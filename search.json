[{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidytof","title":"Contributing to tidytof","text":"outlines propose change tidytof. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidytof","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidytof","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidytof","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"keyes-timothy/tidytof\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidytof","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidytof","text":"Please note tidytof project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = starts_with(\"cd\"),      num_neighbors = 50L,      distance_function = \"cosine\",      method = \"phenograph\"   ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster,     metacluster_cols = starts_with(\"cd\"),     num_metaclusters = 3L,     method = \"kmeans\"   )  phenograph_clusters %>%   dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) %>%   head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 5                   2                   #> 2 H1_PhenoGraph_cluster1 5                   2                   #> 3 H1_PhenoGraph_cluster1 5                   2                   #> 4 H1_PhenoGraph_cluster1 5                   2                   #> 5 H1_PhenoGraph_cluster1 5                   2                   #> 6 H1_PhenoGraph_cluster1 5                   2 phenograph_clusters %>%    dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster1           2                    1000 #> 2 cluster3           2                    1000 #> 3 cluster2           3                     517 #> 4 cluster2           1                     483 # use the kmeans algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\"   )  # use the flowsom algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"flowsom\"   ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\",      augment = FALSE   ) %>%    head()  #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 4               #> 2 18              #> 3 4               #> 4 14              #> 5 4               #> 6 15"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"example, wanted write tidytof-style interface new clustering algorithm “supercluster”, might write something like :","code":"tof_cluster_supercluster <-    function(tof_tibble, cluster_cols, ...) {      cluster_data <- dplyr::select(tof_tibble, {{cluster_cols}})          result <-        cluster_data %>%        do_something(...) %>%        do_something_else(...)   }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"’s possible algorithm doesn’t…","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_daa","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_daa()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest","code":"daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )   significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_dea","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_dea()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_dea_* function family member: tof_dea_diffcyt tof_dea_lmm tof_dea_ttest","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     method = \"ttest\",      cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-    dea_result %>%    mutate(     log2_fc = log(mean_fc, base = 2),      log_p = -log(p_adj),      significance =        case_when(         p_adj < 0.05 & mean_fc > 1 ~ \"increased\",          p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",         TRUE ~ NA_character_       ),      marker =        str_extract(marker, \".+_\") %>%        str_remove(\"_\"),      pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")   )  volcano_data %>%    ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +    geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +    geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +   geom_point(shape = 21, size = 2) +    ggrepel::geom_text_repel(     aes(label = pair),      data = slice_head(volcano_data, n = 10L),      size = 2   ) +    scale_fill_manual(     values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),      na.value = \"#cdcdcd\"   ) +    labs(     x = \"log2(Fold-change)\",      y = \"-log10(p-value)\",      fill = NULL,      caption = \"Labels indicate the 10 most significant marker-cluster pairs\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-    phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1   -8.68  -6.44  #> 2  -12.4    0.948 #> 3  -39.0    7.27  #> 4  -22.9    0.949 #> 5  -23.2   -8.26  #> 6  -23.6   10.5 phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   -12.1   1.89  #>  2   -16.5  -0.660 #>  3   -17.2 -26.3   #>  4   -18.2  -9.03  #>  5   -12.3  -3.77  #>  6   -17.7 -13.4   #>  7   -13.5  -8.21  #>  8   -12.8 -18.9   #>  9   -19.2 -11.2   #> 10   -18.1   5.27  #> # … with 2,990 more rows phenograph_data %>%    tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>     .umap1 .umap2 #>      <dbl>  <dbl> #>  1 10.0    -2.18  #>  2  8.85   -2.06  #>  3  6.20   -0.354 #>  4  4.38    1.21  #>  5  9.99   -1.93  #>  6 -0.0135  3.61  #>  7  9.92   -1.43  #>  8  5.84    0.319 #>  9  5.06   -1.52  #> 10  9.58   -4.37  #> # … with 2,990 more rows  phenograph_data %>%    tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23     0.868  0.978   3.49  #>  2 -0.969  -1.02     0.787  1.22    0.329 #>  3 -2.36    2.54     1.95  -0.882  -1.30  #>  4 -3.68   -0.00565 -0.962  0.410   0.788 #>  5 -4.03    2.07     0.829  1.59    5.39  #>  6 -2.59   -0.108   -1.32  -1.41   -1.24  #>  7 -1.55   -0.651    0.233  1.08    0.129 #>  8 -1.18   -0.446   -0.134 -0.771  -0.932 #>  9 -2.00   -0.485   -0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924    0.692  1.45    0.270 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # … with 2,990 more rows # 3 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23     0.868 #>  2 -0.969  -1.02     0.787 #>  3 -2.36    2.54     1.95  #>  4 -3.68   -0.00565 -0.962 #>  5 -4.03    2.07     0.829 #>  6 -2.59   -0.108   -1.32  #>  7 -1.55   -0.651    0.233 #>  8 -1.18   -0.446   -0.134 #>  9 -2.00   -0.485   -0.593 #> 10 -0.0356 -0.924    0.692 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = phenograph_cluster   ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = cd11b   ) +    ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data %>%    dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     group_cols = phenograph_cluster,      method = \"constant\",     num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     group_cols = phenograph_cluster,      method = \"prop\",     prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-    function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {      x/from[2] * to[2]   }  phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +   scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)   ) +    labs(     fill = \"relative density\"   ) phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)     ) +    labs(     fill = \"relative density\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = function(x) quantile(x = x, probs = 0.75)   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          5.18           1.32               4.32 #> 2 patient1 BCR-XL                         5.30          -0.0186             4.70 #> 3 patient2 Basal                          5.28           1.39               4.21 #> 4 patient2 BCR-XL                         5.41          -0.0201             4.36 #> 5 patient3 Basal                          5.41           1.27               4.28 #> 6 patient3 BCR-XL                         5.42          -0.0362             4.46 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # … with 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    dplyr::left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns  ddpr_patients %>%    dplyr::select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor   # and create the time_to_event and event columns for survival modeling   dplyr::mutate(     relapse_status = as.factor(relapse_status),      time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients %>%    dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-    ddpr_patients %>%    dplyr::filter(is.na(relapse_status))  ddpr_patients <-    ddpr_patients %>%    dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-    ddpr_patients %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 10,      strata = relapse_status   )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # … with 18 more rows training_classifier_metrics <-    class_mod %>%    tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod %>%    tof_plot_model() cv_classifier_metrics <-    class_mod %>%    tof_assess_model(new_data = \"tuning\")  class_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      time_col = time_to_event,      event_col = event,      model_type = \"survival\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # … with 30 more rows survival_metrics <-    survival_mod %>%    tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # … with 51 more rows survival_mod %>%    tof_plot_model() cv_survival_metrics <-   survival_mod %>%   tof_assess_model(new_data = \"tuning\") survival_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows phenograph_data %>%    # perform preprocessing   tof_preprocess() %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # … with 2 more rows phenograph_data %>%    # preprocess   tof_preprocess(transform_fun = scale) %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows  # after preprocessing and post-processing, the data are the same  # except that the re-added noise component is different for each value  phenograph_data %>%    tof_preprocess() %>%    tof_postprocess(redo_noise = TRUE) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34   cd38 #>   <dbl>   <dbl>  <dbl> #> 1  131.  2.41    0.744 #> 2  229. -0.807  10.6   #> 3  293.  4.61    1.34  #> 4  431. -0.0359 12.6   #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files \"phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class()  #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show    # that the columns have been changed   select(where(is.character))  #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # … with 296 more rows phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data() %>%    tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble  # to tof_read_data phenograph_panel <-    phenograph %>%    tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data(panel_info = phenograph_panel) %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%    # create a variable representing if a cell is above or below    # the median expression level of pstat5   mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   ) phenograph_data %>%    mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting started with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"Getting started with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied CyTOF data tof_metacluster() agglomerates clusters smaller number metaclusters tof_daa() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_dea() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"Getting started with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (%>%) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers. Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data %>%    tof_preprocess() %>%   tof_cluster(     cluster_cols = starts_with(\"cd\"), # column specification     method = \"phenograph\", # method specification,    ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster, # column specification     num_metaclusters = 4, # method specification     method = \"kmeans\" # method specification   ) %>%    tof_downsample(     group_cols = .kmeans_metacluster, # column specification     num_cells = 200, # method specification     method = \"constant\" # method specification   ) %>%   tof_plot_cells_layout(     knn_cols = starts_with(\"cd\"), # column specification     color_col = .kmeans_metacluster, # column specification     num_neighbors = 7L, # method specification     node_size = 2L # method specification   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Getting started with tidytof","text":"tidytof verbs can used combination one another using pipe (%>%) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data %>%    # step 1   tof_preprocess() %>%    # step 2   tof_cluster(     cluster_cols = starts_with(\"cd\"),      method = \"phenograph\",      #num_metaclusters = 4L,      seed = 2020L   ) %>%   # step 3   tof_downsample(     group_cols = .phenograph_cluster,      method = \"constant\",      num_cells = 400   ) %>%    # step 4   tof_reduce_dimensions(method = \"tsne\") %>%    # step 5   tof_plot_cells_embedding(     embedding_cols = contains(\"tsne\"),     color_col = .phenograph_cluster    ) +    ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"Getting started with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every CyTOF analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T (2022). tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles. R package version 0.0.0, https://keyes-timothy.github.io/tidytof.","code":"@Manual{,   title = {tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles},   author = {Timothy Keyes},   year = {2022},   note = {R package version 0.0.0},   url = {https://keyes-timothy.github.io/tidytof}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-highly-reproducible-mass-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze Mass Cytometry Data Using Tidy Data Principles","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis mass cytometry (CyTOF) data. Specifically, tidytof provides easy--use pipeline handling CyTOF data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels CyTOF data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if(!require(devtools)) install.packages(\"devtools\")  devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if(!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if(!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #>  [1] \"aml\"                  \"ddpr\"                 \"ddpr_metadata.csv\"    #>  [4] \"mix\"                  \"mix2\"                 \"phenograph\"           #>  [7] \"phenograph_csv\"       \"scaffold\"             \"statistical_scaffold\" #> [10] \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.1/Resources/library/tidytof/extdata/phenograph\" phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show that the columns have been changed   select(where(is.character)) %>%    head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() %>%    head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-    phenograph %>%    tof_preprocess()  # inspect new values phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Often, CyTOF experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"phenograph_data %>%    count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     method = \"constant\",      group_cols = phenograph_cluster,      num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     method = \"prop\",     group_cols = phenograph_cluster,      prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # make a scatterplot   ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw() phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(     density_cols = c(cd34, cd38),      target_prop_cells = 0.25,      method = \"density\",    ) %>%    ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple CyTOF runs.","code":"# when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    # create a variable representing if a cell is above or below the median    # expression level of pstat5   mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters %>%    select(sample_name, .flowsom_metacluster, everything()) %>%    head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacl… phenograph_clus…    cd19 cd11b    cd34  cd45 #>   <chr>            <chr>            <chr>              <dbl> <dbl>   <dbl> <dbl> #> 1 H1_PhenoGraph_c… 7                cluster1         -0.0336 2.46   0.608   3.96 #> 2 H1_PhenoGraph_c… 7                cluster1          0.324  0.856 -0.116   4.52 #> 3 H1_PhenoGraph_c… 3                cluster1          0.532  2.67   0.909   4.76 #> 4 H1_PhenoGraph_c… 2                cluster1          0.0163 2.97   0.0725  5.15 #> 5 H1_PhenoGraph_c… 4                cluster1          0.144  2.98   0.128   4.52 #> 6 H1_PhenoGraph_c… 2                cluster1          0.742  3.41   0.336   5.71 #> # … with 19 more variables: cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, cd7 <dbl>, #> #   cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, #> #   pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, #> #   pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters %>%    count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 24 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster2           12                     334 #>  2 cluster3           16                     304 #>  3 cluster3           15                     300 #>  4 cluster2           13                     257 #>  5 cluster3           11                     221 #>  6 cluster1           2                      204 #>  7 cluster1           5                      194 #>  8 cluster1           4                      176 #>  9 cluster1           6                      166 #> 10 cluster2           18                     145 #> # … with 14 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) %>%    head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 14                   #> 2 13                   #> 3 14                   #> 4 19                   #> 5 18                   #> 6 19"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-    phenograph_clusters %>%    tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1  -2.68    -13.3 #> 2   1.54    -12.3 #> 3   2.20    -33.8 #> 4   9.08    -17.8 #> 5  -0.737   -12.1 #> 6  15.6     -18.1 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = phenograph_cluster)) +    geom_point(shape = 21) +    theme_bw() +    labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = cd11b)) +    geom_point(shape = 21) +    scale_fill_viridis_c() +   theme_bw() +    labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_daa-and-tof_dea","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_daa and tof_dea","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many CyTOF users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_daa tof_dea verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = str_extract(file_name, \"patient[:digit:]\"),      stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\") daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )  significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-    dea_result %>%    tof_plot_cluster_volcano(     use_ggrepel = TRUE   )   volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[kind preamble]","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing CyTOF data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, … # Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, … citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"# link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients %>%    select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor first,    # which is something we'll want for fitting the model later   # and create the time_to_event and event columns for survival modeling   mutate(     relapse_status = as.factor(relapse_status),      time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-    ddpr_patients %>%    dplyr::filter(cohort == \"Training\")   ddpr_validation <-    ddpr_patients %>%    dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training %>%    dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-    ddpr_training %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 5,      strata = relapse_status   )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN7           0.474     0.966    0.124      1.24        2.59     0.243 #> 6 UPN9          15.6       0.446    0.0445     0.163       2.86     0.434 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62        0.550  0.00374      0.622      2.86     0.342 #> 2 UPN8          0.951       0.958  0.161        0.556      3.18     0.556 #> 3 UPN10         0.00374     0.761  0.000696     0.829      3.19     0.886 #> 4 UPN22-Rx      0.0643      1.68   0.0804       1.56       3.06     0.529 #> 5 UPN24         0.0989      0.196  0.0198       0.210      2.36     0.382 #> 6 UPN35-Rx      0          NA     NA           NA         NA       NA     #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-    training_split %>%    tof_train_model(     predictor_cols = contains(\"Pop2\"),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = tof_create_grid(mixture_values = 1),      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # … with 15 more rows class_predictions <-    class_mod %>%    tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions %>%    dplyr::mutate(     truth = ddpr_validation$relapse_status   ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-    class_mod %>%    tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # … with 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod %>%    tof_plot_model() +    labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-    class_mod %>%    tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod %>%    tof_plot_model(new_data = ddpr_validation) +    labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. important principles illustrated following picture: [picture] [construction]","code":"tof_extract_features(   tof_tibble = ___,    cluster_col = ___,    group_cols = ___,   stimulation_col = ___,   lineage_cols = ___,   signaling_cols = ___,   central_tendency_function = ___,   signaling_method = ___,   basal_level = ___, )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path %>%    # step 1   tof_read_data() %>%    # step 2   tof_preprocess() %>%    # step 3   tof_cluster(method = \"phenograph\") %>%   # step 4   tof_downsample(     group_cols = .phenograph_cluster,      num_cells = 100,     method = \"constant\"    ) %>%    # step 5   tof_reduce_dimensions(perplexity = 50, method = \"tsne\") %>%    # step 6   tof_plot_cells_embedding(     embedding_cols = starts_with(\".tsne\"),     color_col = .phenograph_cluster   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for flowSet as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang .data, := tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1/5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    0.933 #> 2 mae    0.810 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster CyTOF data. — tof_cluster","title":"Cluster CyTOF data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster CyTOF data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster CyTOF data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>       cd45     cd38   cd34   cd19 .kmeans_cluster #>      <dbl>    <dbl>  <dbl>  <dbl> <chr>           #>  1 -1.17    0.912    0.428 -1.24  16              #>  2  0.0101 -0.726    0.212  0.139 10              #>  3  1.68    1.15    -0.312  0.218 6               #>  4 -0.0566  0.385   -0.270  0.787 15              #>  5 -0.532  -0.00433 -0.453  0.316 10              #>  6  0.278   0.192    2.13  -0.167 9               #>  7  1.69   -0.707    0.538  0.165 4               #>  8 -1.22   -0.972   -0.221  1.32  2               #>  9  1.15    0.228    1.30   2.05  13              #> 10 -0.678   1.18    -1.81   2.31  11              #> # … with 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>       cd45     cd38   cd34   cd19 .phenograph_cluster #>      <dbl>    <dbl>  <dbl>  <dbl> <chr>               #>  1 -1.17    0.912    0.428 -1.24  2                   #>  2  0.0101 -0.726    0.212  0.139 1                   #>  3  1.68    1.15    -0.312  0.218 4                   #>  4 -0.0566  0.385   -0.270  0.787 4                   #>  5 -0.532  -0.00433 -0.453  0.316 3                   #>  6  0.278   0.192    2.13  -0.167 5                   #>  7  1.69   -0.707    0.538  0.165 1                   #>  8 -1.22   -0.972   -0.221  1.32  1                   #>  9  1.15    0.228    1.30   2.05  4                   #> 10 -0.678   1.18    -1.81   2.31  3                   #> # … with 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"function performs distance-based clustering CyTOF data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.distance_function_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.distance_function_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 a                    #>  2 a                    #>  3 a                    #>  4 a                    #>  5 a                    #>  6 b                    #>  7 a                    #>  8 a                    #>  9 a                    #> 10 a                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"function performs FlowSOM clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 10                   #>  2 13                   #>  3 20                   #>  4 3                    #>  5 1                    #>  6 13                   #>  7 13                   #>  8 12                   #>  9 17                   #> 10 13                   #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"function performs k-means clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 13              #>  2 1               #>  3 2               #>  4 11              #>  5 8               #>  6 19              #>  7 7               #>  8 15              #>  9 18              #> 10 10              #> # … with 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 12              #>  2 13              #>  3 12              #>  4 18              #>  5 20              #>  6 8               #>  7 1               #>  8 5               #>  9 10              #> 10 10              #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering CyTOF data using user-specified selection input variables/CyTOF measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 1                   #>  2 6                   #>  3 1                   #>  4 9                   #>  5 2                   #>  6 6                   #>  7 2                   #>  8 5                   #>  9 6                   #> 10 4                   #> # … with 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 3                   #>  2 5                   #>  3 8                   #>  4 1                   #>  5 8                   #>  6 5                   #>  7 2                   #>  8 1                   #>  9 3                   #> 10 5                   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # … with 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # … with 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_daa_*` function family: tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"tof_daa(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_daa_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tibble nested tibble containing differential abundance results chosen method. See tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"tof_daa_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"tof_daa_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"tof_daa_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_dea_*` function family: tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"tof_dea(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_dea_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tibble nested tibble containing differential abundance results chosen method. See tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"tof_dea_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"tof_dea_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"tof_dea_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data. — tof_downsample","title":"Downsample CyTOF data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>       cd45   cd38    cd34   cd19 cluster_id #>      <dbl>  <dbl>   <dbl>  <dbl> <chr>      #>  1 -1.07    0.943  0.432   0.114 n          #>  2  0.0398  0.754 -0.439  -1.42  g          #>  3 -0.917   0.557 -0.410   0.693 t          #>  4  2.95    0.545  0.366  -0.476 y          #>  5  1.68    0.908 -0.0603  0.170 l          #>  6  0.134  -0.467  0.136  -0.209 v          #>  7  0.218  -0.162  0.890  -1.89  x          #>  8 -0.357  -0.194  0.813   0.147 h          #>  9  1.80    1.77  -1.51   -0.462 q          #> 10  0.0725 -0.902 -0.0115  1.25  j          #> # … with 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>       cd45    cd38   cd34    cd19 cluster_id #>      <dbl>   <dbl>  <dbl>   <dbl> <chr>      #>  1 -0.870  -0.489   1.48   2.13   v          #>  2  2.07   -1.07    1.41  -0.596  g          #>  3  1.98   -0.531  -0.203 -1.52   y          #>  4 -0.0890 -1.01    0.404 -2.37   b          #>  5  0.356  -1.06   -0.918 -1.23   j          #>  6 -0.0892 -0.607   1.62   0.837  n          #>  7  0.0206 -0.207   1.12   0.0689 k          #>  8  0.0695  1.59    0.437 -0.977  k          #>  9 -0.435   0.275   0.593  0.585  h          #> 10  3.99   -0.0398  0.500  0.178  i          #> # … with 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 91 × 5 #>       cd45   cd38   cd34    cd19 cluster_id #>      <dbl>  <dbl>  <dbl>   <dbl> <chr>      #>  1  0.710  -0.224  1.99  -1.39   j          #>  2 -0.485   0.367  1.57   1.06   s          #>  3  0.384   1.07   1.08  -0.827  t          #>  4 -0.880   1.03   0.357 -0.0265 r          #>  5  0.272  -1.07  -0.997 -0.0118 s          #>  6  0.887  -0.369 -0.449 -0.951  v          #>  7 -0.969  -0.240 -0.433 -0.133  r          #>  8  0.0325 -0.334  1.09  -0.254  t          #>  9  0.827   0.906  1.61   2.55   b          #> 10 -0.518   2.06   0.343 -1.23   k          #> # … with 81 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>       cd45   cd38   cd34    cd19 cluster_id #>      <dbl>  <dbl>  <dbl>   <dbl> <chr>      #>  1 -0.435   0.688 -0.989  0.531  y          #>  2 -1.24    1.52  -0.222  1.35   f          #>  3 -0.935   0.747  0.280 -0.765  s          #>  4 -0.965   1.93  -2.24  -0.883  a          #>  5 -0.331  -0.317 -0.914 -0.642  a          #>  6  0.199   1.22  -0.776  0.983  o          #>  7 -1.45   -0.101 -0.652  0.0511 m          #>  8 -0.730   1.05   0.993  0.765  x          #>  9  0.0209  1.72  -0.212  0.320  x          #> 10  0.434   1.40  -0.555  1.08   y          #> # … with 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>       cd45   cd38    cd34    cd19 cluster_id #>      <dbl>  <dbl>   <dbl>   <dbl> <chr>      #>  1 -0.402  -0.592 -0.170  -1.58   v          #>  2  1.38    1.07   0.377  -0.492  j          #>  3 -1.25    1.44   0.0510 -1.62   v          #>  4 -1.24    1.52  -0.222   1.35   f          #>  5  1.76   -1.53   1.20   -0.0321 o          #>  6 -0.683   0.227 -1.57   -1.47   e          #>  7 -0.749  -0.417  0.163   0.436  a          #>  8 -0.0819 -0.642 -0.729   1.60   s          #>  9  1.26   -0.979 -1.88    0.173  o          #> 10 -0.730   1.05   0.993   0.765  x          #> # … with 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 520 × 4 #>       cd45   cd38   cd34    cd19 #>      <dbl>  <dbl>  <dbl>   <dbl> #>  1  0.719  -1.73  -0.275 -0.461  #>  2 -0.475  -1.20   0.842 -0.502  #>  3  1.37    0.310  0.160 -0.908  #>  4  0.391  -0.629  2.26  -0.183  #>  5 -0.0123 -1.40  -0.520 -0.0626 #>  6 -0.799   0.267  0.697 -0.232  #>  7  0.564  -0.611  0.730  1.11   #>  8 -1.31    1.16   0.929  0.472  #>  9 -1.75   -0.388 -0.667  0.763  #> 10  1.20   -1.15   2.91  -0.597  #> # … with 510 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 215 × 4 #>      cd45    cd38   cd34    cd19 #>     <dbl>   <dbl>  <dbl>   <dbl> #>  1 -0.102 -1.10   -0.362  0.418  #>  2  1.37   0.310   0.160 -0.908  #>  3  0.228 -1.49   -1.13  -0.678  #>  4  0.564 -0.611   0.730  1.11   #>  5 -1.75  -0.388  -0.667  0.763  #>  6 -0.300  0.0809 -0.171  2.19   #>  7 -0.185  0.734   0.528  1.34   #>  8 -1.32   0.0249 -1.61  -0.489  #>  9  1.80  -0.119   1.46  -0.0716 #> 10 -0.451  0.0732 -1.57  -0.585  #> # … with 205 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 211 × 4 #>      cd45    cd38   cd34    cd19 #>     <dbl>   <dbl>  <dbl>   <dbl> #>  1  1.37   0.310   0.160 -0.908  #>  2  0.564 -0.611   0.730  1.11   #>  3 -1.31   1.16    0.929  0.472  #>  4  0.302  0.0441  1.44  -0.804  #>  5  1.29   0.0221  1.26   0.948  #>  6 -0.502 -0.847  -1.29  -0.0341 #>  7  0.580 -0.886   0.811 -2.09   #>  8 -1.49   2.27    0.612 -1.67   #>  9  1.80  -0.119   1.46  -0.0716 #> 10  1.88   0.503   1.29  -1.28   #> # … with 201 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>       cd45   cd38   cd34   cd19 cluster_id #>      <dbl>  <dbl>  <dbl>  <dbl> <chr>      #>  1 -0.851  -0.332  0.592  0.540 s          #>  2 -0.396   2.17  -0.226  1.02  z          #>  3 -0.882   0.293  0.120  0.366 o          #>  4 -0.532   1.03  -0.565  0.475 n          #>  5 -1.25    0.999 -0.433  0.629 n          #>  6  0.591   1.36  -0.120 -0.636 k          #>  7 -0.0473  0.278 -0.192  0.435 l          #>  8  0.368   0.482  0.840 -1.18  y          #>  9 -0.233  -0.712 -0.942 -1.48  k          #> 10 -2.35   -0.319  0.904  0.760 u          #> # … with 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 89 × 5 #>       cd45   cd38    cd34   cd19 cluster_id #>      <dbl>  <dbl>   <dbl>  <dbl> <chr>      #>  1  0.361  -0.743  0.494  -0.852 a          #>  2  0.925  -0.572  0.136   0.237 a          #>  3  0.530  -1.53   0.507   0.193 a          #>  4 -0.294   0.374  0.0355  0.345 b          #>  5  1.41   -0.473 -0.556  -0.816 b          #>  6 -0.923  -1.32  -0.943   0.389 b          #>  7  0.809   1.52  -0.103   2.51  b          #>  8  0.0358 -1.42  -0.245  -0.350 b          #>  9  0.780  -0.482 -1.77    0.752 c          #> 10  1.19    0.225  1.91    1.89  c          #> # … with 79 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation CyTOF data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>       cd45    cd38    cd34   cd19 .spade_density #>      <dbl>   <dbl>   <dbl>  <dbl>          <dbl> #>  1 -0.874   1.04   -0.396  -2.85               1 #>  2 -0.363   0.629  -0.113  -0.638              1 #>  3 -1.45    0.0616  0.149   1.26               1 #>  4  0.431   0.849  -0.814  -0.756              1 #>  5  0.0740 -2.82   -0.116  -0.114              1 #>  6 -1.03   -1.42    0.625  -0.586              1 #>  7  0.612  -0.238   1.20    1.51               1 #>  8  0.756  -1.01    1.61   -0.588              1 #>  9  0.861  -1.58    0.988   0.182              1 #> 10  1.58    0.653   0.0320  0.709              1 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>       cd45    cd38    cd34   cd19 .spade_density #>      <dbl>   <dbl>   <dbl>  <dbl>          <dbl> #>  1 -0.874   1.04   -0.396  -2.85             0.1 #>  2 -0.363   0.629  -0.113  -0.638            1   #>  3 -1.45    0.0616  0.149   1.26             0.9 #>  4  0.431   0.849  -0.814  -0.756            1   #>  5  0.0740 -2.82   -0.116  -0.114            0.1 #>  6 -1.03   -1.42    0.625  -0.586            0.6 #>  7  0.612  -0.238   1.20    1.51             0.9 #>  8  0.756  -1.01    1.61   -0.588            1   #>  9  0.861  -1.58    0.988   0.182            0.5 #> 10  1.58    0.653   0.0320  0.709            1   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby        -0.388       0.271     -0.0309       0.398       0.324 #> 2 mario        -0.412       0.469      0.0477       0.140       0.545 #> # … with 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, #> #   `cd19@b_ct` <dbl>, `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, #> #   `cd19@c_ct` <dbl>, `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, #> #   `cd19@d_ct` <dbl>, `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, #> #   `cd19@e_ct` <dbl>, `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, #> #   `cd19@f_ct` <dbl>, `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, #> #   `cd19@g_ct` <dbl>, `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel   values #>    <chr>   <chr>      <chr>      <dbl> #>  1 kirby   a          cd45    -0.388   #>  2 kirby   a          cd38     0.271   #>  3 kirby   a          cd34    -0.0309  #>  4 kirby   a          cd19     0.398   #>  5 kirby   b          cd45     0.324   #>  6 kirby   b          cd38    -0.271   #>  7 kirby   b          cd34    -0.0658  #>  8 kirby   b          cd19     0.375   #>  9 kirby   c          cd45     0.0732  #> 10 kirby   c          cd38     0.00858 #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@f_emd` `stim_cd38@f_emd` `stim_cd34@f_emd` `stim_cd19@f_e…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 kirby                7.59              9.29              9.10             5.77 #> 2 mario                8.64              7.36             10.3             11.6  #> # … with 100 more variables: `stim_cd45@y_emd` <dbl>, `stim_cd38@y_emd` <dbl>, #> #   `stim_cd34@y_emd` <dbl>, `stim_cd19@y_emd` <dbl>, `stim_cd45@q_emd` <dbl>, #> #   `stim_cd38@q_emd` <dbl>, `stim_cd34@q_emd` <dbl>, `stim_cd19@q_emd` <dbl>, #> #   `stim_cd45@o_emd` <dbl>, `stim_cd38@o_emd` <dbl>, `stim_cd34@o_emd` <dbl>, #> #   `stim_cd19@o_emd` <dbl>, `stim_cd45@k_emd` <dbl>, `stim_cd38@k_emd` <dbl>, #> #   `stim_cd34@k_emd` <dbl>, `stim_cd19@k_emd` <dbl>, `stim_cd45@v_emd` <dbl>, #> #   `stim_cd38@v_emd` <dbl>, `stim_cd34@v_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 f          cd45   stim         4.54 #>  2 f          cd38   stim         5.56 #>  3 f          cd34   stim         7.96 #>  4 f          cd19   stim         5.83 #>  5 y          cd45   stim         6.48 #>  6 y          cd38   stim        10.7  #>  7 y          cd34   stim         9.02 #>  8 y          cd19   stim         4.71 #>  9 q          cd45   stim        12.7  #> 10 q          cd38   stim         9.71 #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0337   0.0589   0.0484   0.0442   0.0379   0.0442   0.0232 #> 2 mario     0.0305   0.0476   0.0381   0.0286   0.0438   0.0343   0.0267 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0337   0.0589   0.0484   0.0442   0.0379   0.0442   0.0232 #> 2 mario     0.0305   0.0476   0.0381   0.0286   0.0438   0.0343   0.0267 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@c_jsd` `stim_cd38@c_jsd` `stim_cd34@c_jsd` `stim_cd19@c_j…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 mario                  NA                NA                NA               NA #> 2 kirby                  NA                NA                NA               NA #> # … with 100 more variables: `stim_cd45@s_jsd` <dbl>, `stim_cd38@s_jsd` <dbl>, #> #   `stim_cd34@s_jsd` <dbl>, `stim_cd19@s_jsd` <dbl>, `stim_cd45@j_jsd` <dbl>, #> #   `stim_cd38@j_jsd` <dbl>, `stim_cd34@j_jsd` <dbl>, `stim_cd19@j_jsd` <dbl>, #> #   `stim_cd45@g_jsd` <dbl>, `stim_cd38@g_jsd` <dbl>, `stim_cd34@g_jsd` <dbl>, #> #   `stim_cd19@g_jsd` <dbl>, `stim_cd45@t_jsd` <dbl>, `stim_cd38@t_jsd` <dbl>, #> #   `stim_cd34@t_jsd` <dbl>, `stim_cd19@t_jsd` <dbl>, `stim_cd45@d_jsd` <dbl>, #> #   `stim_cd38@d_jsd` <dbl>, `stim_cd34@d_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   jsd #>    <chr>      <chr>  <chr>       <dbl> #>  1 c          cd45   stim        0.837 #>  2 c          cd38   stim        0.791 #>  3 c          cd34   stim        0.739 #>  4 c          cd19   stim        0.652 #>  5 s          cd45   stim        0.715 #>  6 s          cd38   stim        0.663 #>  7 s          cd34   stim        0.514 #>  8 s          cd19   stim        0.757 #>  9 j          cd45   stim        0.662 #> 10 j          cd38   stim        0.789 #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0260   0.0316   0.0465   0.0316   0.0242   0.0428   0.0502 #> 2 mario     0.0541   0.0455   0.0346   0.0281   0.0411   0.0303   0.0325 #> # … with 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0260 #>  2 kirby   b          0.0316 #>  3 kirby   c          0.0465 #>  4 kirby   d          0.0316 #>  5 kirby   e          0.0242 #>  6 kirby   f          0.0428 #>  7 kirby   g          0.0502 #>  8 kirby   h          0.0335 #>  9 kirby   i          0.0576 #> 10 kirby   j          0.0353 #> # … with 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_thresho…` `cd34@a_thresh…` `cd19@a_thresh…` #>   <chr>                <dbl>             <dbl>            <dbl>            <dbl> #> 1 kirby                0.167              0                0                0    #> 2 mario                0.12               0.12             0.16             0.16 #> # … with 100 more variables: `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0.167  #>  2 kirby   a          cd38    0      #>  3 kirby   a          cd34    0      #>  4 kirby   a          cd19    0      #>  5 kirby   b          cd45    0.115  #>  6 kirby   b          cd38    0.154  #>  7 kirby   b          cd34    0.0769 #>  8 kirby   b          cd19    0.0385 #>  9 kirby   c          cd45    0.0667 #> 10 kirby   c          cd38    0.2    #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   rsplit_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `rsplit_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"Find k-nearest neighbors cell CyTOF dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents CyTOF measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional arguments pass RANN::nn2","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  441  462  917  216  476  205  883   33  404   804 #>    [2,]  117  991  800  104  505  380   70  887  763   395 #>    [3,]  416  896  956  279  142  538  668  815  560   853 #>    [4,]  417  875  819  609  642  685   63   78  250   221 #>    [5,]  336  122  878  153  722  105  974  980  439   696 #>    [6,]  549  790  176  445  496  607  424   61  458    90 #>    [7,]  434  776  559  542  810  757  634  396  566   699 #>    [8,]  991  505  887  645  397  568  800  184  171   837 #>    [9,]  904  725  769  596  203  831  805  324  981   578 #>   [10,]  860   13  369  169  382  723  688  742  550   777 #>   [11,]  857   33  121  476  216  562  398  629  185   327 #>   [12,]  253  371  100  771  145  231  951  653  944   806 #>   [13,]  777  860   10  723  688  262  369  169   56   353 #>   [14,]  545  798  330  212  467  681  574  641  477   368 #>   [15,]  583  795  615  443  254  507  672  285  898    23 #>   [16,]   36  373   66  176  423  661  185  584  476   274 #>   [17,]   26  266  865  453  226  939  851  905  995   945 #>   [18,]  690  342  352  794  772  139  228  194  345   902 #>   [19,]  931  961  557  334   88  276  793  451  521   213 #>   [20,]  901  512  151  140  785  371  951  152  911   312 #>   [21,]  943  801  889  114  294  431  937  195   57   372 #>   [22,]  561  390  664  813  344  858  528  702   87   589 #>   [23,]  672  792  484  179  507  927  675  335  719   354 #>   [24,]  195  889  356  114  943  511  444  554  258   801 #>   [25,]   45  775  444  889  539  702  195  114  448   729 #>   [26,]   17  266  226  995   61  663  607  273  777   851 #>   [27,]  203  592  655  324  588  746  518  791  827   335 #>   [28,]  718  182  855  787  536  402  501  528  124   363 #>   [29,]  255   84  400  996  710  501  739  818  799   553 #>   [30,]  458  790   52  639  308  663  825  222  424   531 #>   [31,]   77  906  570  809  774   59  155   62  734    95 #>   [32,]  368  574  828  301  641  537  144  330  217   949 #>   [33,]  857  121  404  629  398  216   11  967  327   462 #>   [34,]  689   75  935  230  985  932  721  687   91   485 #>   [35,]  796  181  715  762  617  101  126  877  711   882 #>   [36,]   16  373  185  176  661  423  584  274  882    11 #>   [37,]  137  765  950  152  415  750   70  515  296   822 #>   [38,]  599  831  675  707  700  872  592  179  981   174 #>   [39,]  640  437  614   47  835  567  712   97   78   680 #>   [40,]  172  916  463  187  963  866  282  232  859   484 #>   [41,]  102  310  491  316  986  903  897  915   43   120 #>   [42,]  468  864  547  260  626  495  190  870  789   947 #>   [43,]   48  416   47   41    3  437   39   97  279   640 #>   [44,]  589  858  799  509  741  225  130   22  813   528 #>   [45,]  444   25  448  889  603  521  195  298  775   729 #>   [46,]  955  364  764  447  239  167  548  979  595   631 #>   [47,]  437   97  709  891  952  673  640  307  416   279 #>   [48,]   43  416   41  289   79  538  391    3   47   986 #>   [49,]  763  397  954  357  104   70  887  991  950   761 #>   [50,]  411  566  485  776  932  281  138   75  719     7 #>   [51,]  472  149  662  701  481  428  128  533  802   868 #>   [52,]   68  663  458  360  639  790  262   30   56    61 #>   [53,]  604  575  838  109  522  738  488   93  617   101 #>   [54,]  326  182  363  112  930   28  739  633  402   501 #>   [55,]  665  325  263  642  679  400  804  523  501   630 #>   [56,]   68  639  723  688  262  777  663  704   13   860 #>   [57,]  620  556  341  801   21  836  517  736   83   431 #>   [58,]  256   93  251  108  425  475  589   27  604   936 #>   [59,]  809  219  906  131  774   71   62   77  177   938 #>   [60,]  612  757  345  705  734  228  272  699  477   758 #>   [61,]  308  790  222  266   26  995  226  526  458   607 #>   [62,]  906  243  809  774  701  395  499  318  455   938 #>   [63,]  479  535  630  839  410  936  489  642   65   163 #>   [64,]  531  571   68  459  222  925  639  446  969   458 #>   [65,]  163  113  479  561  489  535  753  425  227    63 #>   [66,]  883   16  665  970  423  804   55   36  325   661 #>   [67,]  691  591  730  329  153  913  300  191  146   405 #>   [68,]   56  639  571  598  262   52  777  531  688   723 #>   [69,]  156  988  722  122  878  980  319   94  439     5 #>   [70,]  765  950  137  315  515  268  117  887  991     2 #>   [71,]  164   59  219  131  809  378  291  177  783   168 #>   [72,]  721   80   91  208  935  692  506  370  689   202 #>   [73,]  539  816  109  251  236  637  610  425  954   604 #>   [74,]  632  107  587  558  304  218  870  316  626   897 #>   [75,]  932  689  687  485   50  248  230   34  281   935 #>   [76,]  227  551  775  677  163  114  535   83  694   556 #>   [77,]  774  947  809   95  906  219  243  938   62    59 #>   [78,]  875   39  978  835  614  367  839  657  640     4 #>   [79,]  289  986  703  143  469  409  213  487  673   580 #>   [80,]  208  721  692  528   72  646  741   91  130   189 #>   [81,]  867  350  399  383  269  791  540  827  480   328 #>   [82,]  726  782  421  658  716  737  223  717  322   754 #>   [83,]  736  551  817  448  801  556   76  836   45   341 #>   [84,]  255   29  818  710  907  400   93  256  589   388 #>   [85,]  378  106  125  982  555  755  961  164  206    19 #>   [86,]  269   89  350  867  314  486  540  174  644   136 #>   [87,]  236  987  344  637  702  664  954  636  729   877 #>   [88,]  807  931  926  213  547  334  842  406  557   260 #>   [89,]   86  269  486  337  644  188  498  353  136   578 #>   [90,]  175  150  899  584  366  423  905  449  914   176 #>   [91,]  935  287  721  656  202   80   72  113  788   692 #>   [92,]  618  704  377  355  977  749  374   56   68   629 #>   [93,]  256  907   58  475  818  838  589   84  659   388 #>   [94,]  740  156  373  319  166  176   16   36  771   274 #>   [95,]  947   77  375  918  774  789  219  131  864   938 #>   [96,]  869  660  352  342   18  772  587  789  418   107 #>   [97,]  709  891  673   47  580  737  307  952  942   937 #>   [98,]  500  683  595  843  306  836  121  327  557   755 #>   [99,]  830  362  184  837  214  631  111  887  394     8 #>  [100,]  151  253  653  608  674  371  951  901  234    20 #>  [101,]  711  126  617  824  796   35  589  181  877    53 #>  [102,]  966  903  120  409  986  480  550  369  742   316 #>  [103,]  638  232  572  235  633  564  282  976  280   112 #>  [104,]  763  890  761  707  700  946  420  505  357    49 #>  [105,]  167  514  590  781  671  473  300  448  401   336 #>  [106,]  982  378  206  768  125   85  131  597  440    19 #>  [107,]  587  218  626  772   74  789  352  190  383   284 #>  [108,]  425  760   58  539   73  475  109  436  588   251 #>  [109,]  604  539   73  816  425  987  637  236   53   488 #>  [110,]  513  360  948  979  563  629  327  290  933   727 #>  [111,]  184  830  214  210  744  837   99  800  362   188 #>  [112,]  900  326  182  363  232  750  959  576  564   713 #>  [113,]   65  258  561  163  760  788  114  436  656   227 #>  [114,]  889  195  775   25  425   24   21  258  943   539 #>  [115,]  880  752   54  930   28  855  916   69  787   402 #>  [116,]  953  784  489  133  567  614  158  372  285   267 #>  [117,]    2  278  140   70  644  911  765  700  139   874 #>  [118,]  649  143  717  421  703  737  716  474  673   469 #>  [119,]  635  976  413  510  866  886  478  672  981   246 #>  [120,]  102  998  903  966  409  917  480  581  550   490 #>  [121,]  857   33  327  398  629   11  404  683  562   843 #>  [122,]    5  336  439  722  878  153  524  671  105   980 #>  [123,]  921  952  279  464  399  350  942  393  956   808 #>  [124,]  922  718  855  153  390  528   28  189  536   336 #>  [125,]  106  440  909  755   85  649   19  982  457   627 #>  [126,]  711  617  101  796   35  527  127  745  824   181 #>  [127,]  745  419  541  315  892  126  422  388  515   636 #>  [128,]  802  972  428  197  868  895  380   51  137   512 #>  [129,]  587  438  538  821  147   74  632  968    3   897 #>  [130,]  741  858  370  863   44  208  646  501  528   787 #>  [131,]  219  938  164  375   59  809   95  774  378   779 #>  [132,]  517  861  602  341  620  556  585  839  953    57 #>  [133,]  267  158  681  116  294  784  285  407  349   305 #>  [134,]  886  207  805  714  676  379  324  283  746   833 #>  [135,]  429  728  389  576  848  628  530  434  940     7 #>  [136,]  486  791  644  269  945 1000  324  498  592   337 #>  [137,]  950   70   37  152  428  765  268  315  296   512 #>  [138,]  411   50  776  932  281   75  485  566  586   434 #>  [139,]  278  700  345  117  314  361  599  874  395   578 #>  [140,]  512  911  785   20  312  117  380  152  268   151 #>  [141,]  646  959  863  208  900  326  182  692  494   577 #>  [142,]  560  668  896  193    3  956  279  416  407   545 #>  [143,]  469  649   79  118  703  440  409  986  292   903 #>  [144,]   32  537  871  997  368  162  291  574  828   301 #>  [145,]  806  197  371  934  928  415  427   12  302   565 #>  [146,]  191  405  329  960  160  730  296  691  173   494 #>  [147,]  438  190  789  625  538  540  587   42  956   260 #>  [148,]  461  112  576   54  141  326  766  848  530   460 #>  [149,]  472   51  662  481  868  770  701  974  565   730 #>  [150,]  914  175  905   90  449   26  516  607  549   995 #>  [151,]   20  674  785  901  512  608  140  152  339   601 #>  [152,]  512  268  137  140  765   37  197  151  371    20 #>  [153,]  591  336  124  922  671    5  622   67  691   300 #>  [154,]  744  499  800  210  233  111  188  214  270   184 #>  [155,]  686  856  810  277  884   31  434  776    7   634 #>  [156,]   94  740  319  771  166  373  302  823  878   880 #>  [157,]  391  491  978   41  421  322   43   78  657   998 #>  [158,]  294  133  267  891  641  567  949  307   47   305 #>  [159,]  313  466  828  301  467  889  511  574  195   414 #>  [160,]  146  960  405  191  329  296  271  786  950   730 #>  [161,]  732  600   99  731  579  543  401  780  394   933 #>  [162,]  537  348  871  144  919  291   32  177  773   477 #>  [163,]   65  535  113  489   76  479  227  372  341   114 #>  [164,]   71  131  219  291  378   59  348  779  938   809 #>  [165,]  365  984  914  767  847  387  320  549  759   653 #>  [166,]  771  445  471  176  496  384    6  231  823    12 #>  [167,]  105  364  448  473  603  590  239  170  764   401 #>  [168,]  751  768  378  164  131  938  219  778  779    71 #>  [169,]  569   10   13  742  605  939  860  382  337   369 #>  [170,]  364  678  783  432  401  167  994  764  840   662 #>  [171,]  568  505    8  420  357  645  397  183  761   533 #>  [172,]   40  282  916  187  633  326  739  232   54   103 #>  [173,]  494  248  405  329  429  191  146  311  848   687 #>  [174,]  700  592  888  596  761  707  345  393  831   720 #>  [175,]   90  899  150  905  449  366  584  573  249   423 #>  [176,]  274  661  373    6  496   36  445   90  384   423 #>  [177,]  919  734  348  612  396  162  634  686  884   183 #>  [178,]  862  452  242  297  238  870  547   10  550   260 #>  [179,]   38  927  354  675  831  599  707   23  923   257 #>  [180,]  657  520  544  275  303  609  552  367  875   654 #>  [181,]  796   35  715  999  882  101  126  274  711   293 #>  [182,]  363  959  326  900   28  402  536  112  501    54 #>  [183,]  568  505  420  171  233  634  734  699  395   318 #>  [184,]  830  837  111  214  744   99  533    8  887   800 #>  [185,]   52  513  273  290  663   36  629  110  948   360 #>  [186,]  280  386  812  572  200  608  693  340  638   964 #>  [187,]  679  685  370  916  863  172  130  739  501   208 #>  [188,]  210  498  245  598  111  264  214  353   89   154 #>  [189,]  390  528  622  227  813  300  677   22  311   671 #>  [190,]  789  625  147  540  794  352  902  772  272   438 #>  [191,]  146  405  960  329  730  691  160   49  173   494 #>  [192,]  778  483  881  376  534  820  446  455  247   647 #>  [193,]  196  545  668  641  808  142  261  279  680   393 #>  [194,]  578  666  351  772  924  317  725  139  269   611 #>  [195,]  889   24  444  114  511  456   25  159   45   258 #>  [196,]  193  769  596  795  261  758  668  888  927   705 #>  [197,]  371  895  152  128  543  806  512  802  231   145 #>  [198,]  240  611  666  924  508  194  220  351  234   317 #>  [199,]  750  822  415  235  224  930   37  564  363   402 #>  [200,]  454  964  693  478  186  529  433  246  280   119 #>  [201,]  254  588  680  615  507  475  827  655  724    27 #>  [202,]  506   91  784  935  113  953  656  430  116   287 #>  [203,]  324   27  791  827  592  904  655  805  746   518 #>  [204,]  298  850  356  521  448   24  444  801  836   241 #>  [205,]  941  698  917  910  403  404  441  851  290   975 #>  [206,]  982  106  597  378  871  918   95  375  131   219 #>  [207,]  805  134  324  746  203  714  791  379  833   283 #>  [208,]  646   80  692  863  130  370  141  741  858   528 #>  [209,]  442  992  821  896  968  853  418  435  957     3 #>  [210,]  111  598  188  744  830  214  184  154  548   245 #>  [211,]  408  847  534  222  969  767  925  387  308   995 #>  [212,]  330  467  760  313  828  574  436  798  159   258 #>  [213,]  931  260  406  580   88  703  276  547  487   289 #>  [214,]  111  800  184  837  991  887  830  744   99     8 #>  [215,]  702  236  590  664   25  729   87  300  954   539 #>  [216,]  398   33   11    1  857  121  462  967  562   229 #>  [217,]  949  641  921  464  406  931   32  123  393   920 #>  [218,]  383  107  316  897  382  870  742  605  304   587 #>  [219,]  131   59  809  938  774  164   95   77  375   177 #>  [220,]  593  611  516  317  569  331  169  351  973   605 #>  [221,]  756  876  265  859  936  753  814  615  497   275 #>  [222,]  308  995   61  458  790  925  531  969   64   262 #>  [223,]  658  451  359  717  276  937  737  474  580   716 #>  [224,]  747  523  822  235  199  402  363  400  739   996 #>  [225,]  536  799  293   44  996  733  528  344  813   787 #>  [226,]  266  607  995   17  331   26  785  419  865   453 #>  [227,]   76  677  813  694  189  775  664  561   22   509 #>  [228,]  272  902  318  314  757  395  345   60  612   734 #>  [229,]  492  216  392  912    1   11  398  804  476    16 #>  [230,]  687  689  248  932  311   75  908  173  287   323 #>  [231,]  771  823  895  748  197  302  543  496  971   951 #>  [232,]  103  112  633  572  854  638  326  976  866   900 #>  [233,]  744  499  837  184  568  533  154  800  111   505 #>  [234,]  973  653  901  508  151   20  674  240  785   100 #>  [235,]  199  822  750  224  638  633  564  422  415   363 #>  [236,]   87  987  702  637  729  954   73  539  664   344 #>  [237,]  975  735  845  738  582  369  860  522  945   550 #>  [238,]  297  459  862  178  242   56  547  704  452   571 #>  [239,]  364  167   46  955  979  731  170  105  346   843 #>  [240,]  198  508  666  234  611  351  973  339  924   194 #>  [241,]  456  521  298  603  432  961  793  994  204   444 #>  [242,]  452  297  862  178  238  870  958  459  639    10 #>  [243,]   62  270  499  395  906  318  774  455  154   809 #>  [244,]  424  895  253  951  408  873  222  881  901   549 #>  [245,]  362  188  264  498  360  210  826  111  214   945 #>  [246,]  635  478  963  119  964  976  454  200  616   886 #>  [247,]  778  881  192  684  751  376  168   64  834   571 #>  [248,]  173  494  687  405  311  230  788  429  323   932 #>  [249,]  573  899  426  648  175  865  527  453  905   295 #>  [250,]  814  430  898  285  784  953  116  876  221   875 #>  [251,]   73  256  872  637  954  309   58  636  816   539 #>  [252,]  338  554  368  299  798  828  511  212  682    24 #>  [253,]  653  951  901  371  100   20  549   12  244   607 #>  [254,]  201  680  507  588  827  261  655  615  203    27 #>  [255,]   84   29  400  996  799  589  710  818  309   256 #>  [256,]   58   93  309  251  589  636   27  637  710   354 #>  [257,]  927  719  758  705  923  179  477  196  566   707 #>  [258,]  511  436  667  113  195  561  114  760  788    24 #>  [259,]  403  962  292  698  355  205  749  879  910   623 #>  [260,]  547  213  487  406   88   42  862  178  986   289 #>  [261,]  888  808  467  196  254  393  193  927  760   436 #>  [262,]  688  777  663  639   13   56   68  723  458   531 #>  [263,]   55  679  665  685  523  609  187  642  752   347 #>  [264,]  502  353  582  842  826  188  245  807  720   210 #>  [265,]  936  876  756  753  221  710  859  615  803   354 #>  [266,]   17  226   26  995  865  419  453   61  607   945 #>  [267,]  133  681  158  407  437  285  898  640  116    47 #>  [268,]  315  152   70  137  140  765  512  745  117   911 #>  [269,]   86   89  350  867  136  578  486  337  644    81 #>  [270,]  243  969  499  154  925  455  312  395  318    62 #>  [271,]  786  428  160  427  940  565  950  701  380   137 #>  [272,]  228  902  314  345   60  773  794  625  734   612 #>  [273,]  290  948  513  851  663  738  941  629   26   237 #>  [274,]  661  715  176  181  999  496  882  796  373    35 #>  [275,]  654  803  859  756  885  265  907  295  936   609 #>  [276,]  451  359  474  334  223  557  582  807  842   502 #>  [277,]  856  884  155  686  797  493  810  770  472   706 #>  [278,]  139  874  117  361  700  599    2  666  601   312 #>  [279,]  815  399  123  956  952  328  416  680  896   193 #>  [280,]  186  812  386  572  103  638  964  200  976   693 #>  [281,]  411   50  932  485  687  908  586   75  776   798 #>  [282,]  633  739  172  103  326  232  235  523  638   224 #>  [283,]  328  805  207  815  518  827  324  203  791   399 #>  [284,]  304  990  965  107  198  218  220  611  968   593 #>  [285,]  898  430  681  784  615   15  349  267  583   656 #>  [286,]  997  333  920  294  949  217  641   32  144   301 #>  [287,]  656  788  323   91  687  935  436  212  798   923 #>  [288,]  470  606  814  497  875  756  544  894  963   275 #>  [289,]   79  487  986  538  213  703  260  416  673   409 #>  [290,]  273  948  513  629  738  851  404  975  237   941 #>  [291,]  348  162  682  144  871  961  164  241  919   537 #>  [292,]  403  259  623  322  698  716  143  205  917   404 #>  [293,]  536  225  996  799  600  796   35  181  402   344 #>  [294,]  158  943   21  333  574  286  554  301  641   949 #>  [295,]  818  654  659  907  714  803  388  379   84    93 #>  [296,]  950  960  146  160   49   37  137  405  515    70 #>  [297,]  238  242  862  178  452  459  704   56  639   834 #>  [298,]  204  521  850  356  603  444  241   45  448   195 #>  [299,]  993   24  356  372  554  252  204  943  195   850 #>  [300,]  671  622  913  514  215  189  691  105  390   590 #>  [301,]  828   32  159  574  368  466  456  414  554   313 #>  [302,]  823  771  231  415  543  748  482  145  822   197 #>  [303,]  657  367  180  491  894  358  544  288  915   697 #>  [304,]  284  965  990  218  107   74  632  613  316   593 #>  [305,]  158  294  620  133  640  333  116  567  286   614 #>  [306,]  465  500  850  595  755   98  204  683  298   836 #>  [307,]  937  673  737  580  891  717  709  949   97   464 #>  [308,]  222  995  790  458   61  262  549  607  777   531 #>  [309,]  636  872  256  892  637  251  515  954  344   799 #>  [310,]  581  697  569  102  491  120   41  915  358   910 #>  [311,]  788  390  248  494  189  173  561   22  258   405 #>  [312,]  380  874  140  512  117    2  666  270   20   911 #>  [313,]  330  467  828  667  159  511  414  212  574   368 #>  [314,]  902  345  272  228   86  318  395  174  139   269 #>  [315,]  579  745  268  762   70  515  127  600  362   887 #>  [316,]  897  218  102  742  383   41  870  178  382    10 #>  [317,]  351  337  578  194   89  169  382  939  911   495 #>  [318,]  395  228  757  902  243  314  183  139    2   906 #>  [319,]  971  878  748  933  732  882  373  543  731   722 #>  [320,]  708  767  387  984  847  825  408  211  558   165 #>  [321,]  482  974  543  565  868  296  137  428  960   732 #>  [322,]  292  782   82  917  421  978  623  726  398   403 #>  [323,]  923  667  687  798  313  467  330  287  788   559 #>  [324,]  791  805  203  207  592  904  136   27  518  1000 #>  [325,]  824  332  804  527  630  811  400   55  711   665 #>  [326,]  363  633  182  112  739   54  959  900  141   232 #>  [327,]  121  683  857  817  843  670  110  629   33   473 #>  [328,]  399  952  815  827  279  283  680  588  518   942 #>  [329,]  405  146  191  494  173  960  160  691  730    67 #>  [330,]  313  828  467  368  574  212  667  159   32   798 #>  [331,]  503  453  865  226  516  924  426  652  905   785 #>  [332,]  811  462  824  967  929  670  325  617  509   101 #>  [333,]  997  286  554  294  943  801  301  961   21   368 #>  [334,]  276  807  451  557  793  842  521  502  359   264 #>  [335,]  655  746  507  981  203   27  885  672  207   324 #>  [336,]    5  153  591  974  122  922  105  671  732   696 #>  [337,]  939  317   89  269  486  644  945  136  498   578 #>  [338,]  252  908  798  511  323  368  330  667  828   913 #>  [339,]  874  666  601  151  608  940  674  312  278   508 #>  [340,]  594  728  386  361  413  510  628  854  940   572 #>  [341,]  556   57  517  602  535  736   83  620  551    76 #>  [342,]   18  690  352  418  772  194   96  794  821   435 #>  [343,]  787  844  546  677  439  528  225  733   44   741 #>  [344,]   87  954  636  637  515  664  236  309  799    22 #>  [345,]  314  272   60  228  174  596  139  757  902   794 #>  [346,]  893  933  731  979  563  780  161  732   99   830 #>  [347,]  616  282  263  523  529  249  573  384  544   478 #>  [348,]  919  162  177  291  396  734  537  414  612   699 #>  [349,]  681  430  285   14  985  798  898  133  784   485 #>  [350,]  867   81  269   86  540  123  136  921  399   791 #>  [351,]  317  337  194  578  911  666   89  495  772   382 #>  [352,]  625  789  794  190  772  342   18  587  147   107 #>  [353,]  264  842  723  502  188  582   89  807  598   369 #>  [354,]  577  710  256  179  655   58  507  335  251    27 #>  [355,]  749   92  377  704  618  977  941  374   56   297 #>  [356,]  204   24  298  195  448  444  603  850  456    45 #>  [357,]  420  946  171  761  763   49  104  890  505   397 #>  [358,]  915  310  965  491  697  581  381  990  569   303 #>  [359,]  582  276  223  502  451  474  658  488  735   842 #>  [360,]  513  948  110  245  563   52  362  273  290   777 #>  [361,]  594  728  278  725  340  139  690  599  510   628 #>  [362,]   99  245  830  579  214  111  563  762  184   315 #>  [363,]  182  959  326  900  739  402  501  996  633   536 #>  [364,]  170  167   46  764  239  783  731  955  432   401 #>  [365,]  516  449  905  150  914  366   90  549  653   175 #>  [366,]  449  175   90  573  899  249  648  150  426   365 #>  [367,]  657  303  180   78  875  491  470  835  288   520 #>  [368,]  828  574   32  330  301  313  144  641  212   159 #>  [369,]  860  966   10  550   13  742  723  237  845   975 #>  [370,]  130  741  863  679  208  187  646  858  692    80 #>  [371,]  197  806   20  512  152  951  253  151  901   895 #>  [372,]  943  489  114   21  163   24  341  113  294   801 #>  [373,]   36  176  274  882  661  715  999   16  319   185 #>  [374,]  377  627  704  618   92  749  355  297  977   440 #>  [375,]  926  918   95  938  272  131  406  902   88   219 #>  [376,]  778  802  893  868  881  780  895  972  346   192 #>  [377,]  374   92  704  618  749  355  627  977  297   412 #>  [378,]  982  106  206  768  131  164  219  168   85    95 #>  [379,]  553  676  207  818  134  714  886  388  295   746 #>  [380,]  312  512  874  140    2  428  117  137  152    20 #>  [381,]  648  433  426  593  516  573  529  449  676   249 #>  [382,]  495  870   10  169   13  218  317  862  626   742 #>  [383,]   81  218  742  867  897  350  540  269  605    86 #>  [384,]  445  471  176   90  166  747  899  274  523   905 #>  [385,]  668  142  560  773  352  435  418  896  821   992 #>  [386,]  340  812  594  186  940  572  339  280  713   413 #>  [387,]  984  767  708  211  847  320  973  626  220   408 #>  [388,]  541  818  659  711  127   93  126  101  419   745 #>  [389,]  675  599  950  576  135  900  765  854   38   429 #>  [390,]  528   22  189  813  561  311  664  344  788   858 #>  [391,]  157  469   79  421  143  703  986   41  409   903 #>  [392,]  546  811  492  804  216  844  229  332  343   665 #>  [393,]  466  808  888  464  174  610  921  123  816   261 #>  [394,]  631  729   99  401  600  979  731  590  579   362 #>  [395,]  318  228  243  902  757  314    2  183  139    62 #>  [396,]  699  634  919  542  686  612  884  810  177   477 #>  [397,]    8  887   49  505  991  171  481  357  533   568 #>  [398,]  216   33  121  857  912   11  736  322  602   562 #>  [399,]  328  952   81  279  815  123  827  480  867   350 #>  [400,]   29  255  523   84  996  527  711  824  101   181 #>  [401,]  731  394  732  161  631  170   99  397  600   533 #>  [402,]  536  930  293  363  182   28  225  501  996   224 #>  [403,]  292  259  205  698  476  917  910  941  322   404 #>  [404,]  629  716   33  441  975  857  290  917  522   738 #>  [405,]  329  146  173  494  191  160  960  248  296   730 #>  [406,]  921  487  931  123  213  217  540  807   88   842 #>  [407,]  545  641  142  560  267  158  193  681  286   949 #>  [408,]  211  534  847  881  244  767  222  925  424   969 #>  [409,]  703  986  102  966  903  580  120  716  213   550 #>  [410,]  838  754  839  475  724  479   63  431  575   108 #>  [411,]   50  281  138  932  776  586  485  566   75   810 #>  [412,]  474  550  716  975  582  723  860  369  237    56 #>  [413,]  340  119  728  976  841  594  854  386  812   792 #>  [414,]  420  466  313  946  456  159  357  828  171   330 #>  [415,]  750  199  822   37  928  930  235  823  564   302 #>  [416,]    3  279  487  538  956   47  399  142  896   560 #>  [417,]    4  819  609  642  685  875   63  804  679   621 #>  [418,]  435  342  690  821   18  352   96  957  385   660 #>  [419,]  127  745  541  266  226  388  785  911  865   422 #>  [420,]  357  946  761  890  171  505  104  414  699   568 #>  [421,]  726   82  782  118  737  717  322  703  673    97 #>  [422,]  541  996  127  745  515  765  419  388   37   235 #>  [423,]  584  661  899  175   90  851  883  527  176   273 #>  [424,]  244  790  222  308  895  549    6   61  951   458 #>  [425,]  539  108  775  109  561   73  604   58  760   479 #>  [426,]  573  648  249  453  865  899  516  331  905   381 #>  [427,]  806  380  128  565  271  512  145  428  371   197 #>  [428,]  137  950  380  128    2   70  271  481  701    51 #>  [429,]  848  135  576  173  559  389  530  766  248   460 #>  [430,]  285  898  784  349  250  681  656  615  876    15 #>  [431,]  839  567   21  535  410  489  556  658  891   614 #>  [432,]  994  678  603  170  764  241  913  171  456   364 #>  [433,]  529  381  676  648  426  454  616  331  478   693 #>  [434,]    7  776  628  135  566  559  757  810  758   634 #>  [435,]  690  957  418  841  853   18  342  992  725   769 #>  [436,]  760  258  561  251  788  667  467   73  108   212 #>  [437,]   47  680   39  279  952  815  709  328  583   891 #>  [438,]  147  538  190  789  260   42  625  597  487   587 #>  [439,]  878  524  122  343  722    5  677  733  696   787 #>  [440,]  627  457  649  143  213   79  374  260  125   469 #>  [441,]  462  917  404  522  967  738  754  851    1   290 #>  [442,]  435  119  209  841  957  418  992  853  413   894 #>  [443,]   15  497  792  463  672  583   23  795  484   615 #>  [444,]   45  195   25  456  603  889  521  298   24   448 #>  [445,]  384  496  549    6  653  166  607  471  253   905 #>  [446,]  468  534  864   64  969  571  925  459  531   947 #>  [447,]  631  764  830  184   99  826  394  793  111    46 #>  [448,]  817   45  473   25  590  167  298  444  356   603 #>  [449,]  366  175  648  150  516  573   90  426  899   381 #>  [450,]  624  910  525  698  205  958  941  150  584   449 #>  [451,]  276  223  359  334  937  658  717  464  474   737 #>  [452,]  178  242  862  297  958  870  238  550   10   860 #>  [453,]  865   17  331  833  939  426  266  226  905   516 #>  [454,]  200  693  886  433  478  611  924  676  510   119 #>  [455,]  499  972  925  233  270  744  243  154  969   837 #>  [456,]  444  511  603  195  414  241  159  301  521   889 #>  [457,]  440  879  469  649  143   79  627  125  374   962 #>  [458,]  790   30  308  639   52  663  222  262   68   531 #>  [459,]  238  571  297  531   64  862  495   56   68   242 #>  [460,]  766  530  848  576  854  484  429   23  389   141 #>  [461,]  494  173  329  248  405  989  429  576  932   230 #>  [462,]  967  441  811  332  670  522  754  404  738    33 #>  [463,]  497  443  484  221  756  814  963  876   40   859 #>  [464,]  921  942  808  393  123  466  949  937  610   451 #>  [465,]  755  306  500  836   98  555  909  850  595   204 #>  [466,]  393  159  414  464  816  610  808  888  720   467 #>  [467,]  313  330  261  828  212  159  667  436  923   574 #>  [468,]  864   42  947  446  495  626  459  938  774   969 #>  [469,]  143  649   79  391  703  118  986  457  903   292 #>  [470,]  288  875  814  606  756  497  275  221  835   544 #>  [471,]  384  166  445   12  365  653  771  176  759     6 #>  [472,]   51  149  701  662  565  481  428  770  128   271 #>  [473,]  727  590  694  448  817  729  167  979  702   394 #>  [474,]  276  716  412  359  557  582  223  451  975   334 #>  [475,]  724  518  838  588   93  410   58   27  201   575 #>  [476,]   11  403  205    1   33  857  185  749  629   404 #>  [477,]  705   60  758  699  612  537  396  257  330   773 #>  [478,]  693  635  246  676  886  379  976  866  510   553 #>  [479,]  535   63  425   65  410  775  630  108   58   936 #>  [480,]  966 1000  651  490  742  735  845  399  518   369 #>  [481,]  533  662  397  701  568  837    8  505  233    51 #>  [482,]  321  543  974  868  137   37  296  565  748   732 #>  [483,]  820  534  446  408  192  881  708  211  270   969 #>  [484,]   23  672  460  354  792  766  530  179  577   876 #>  [485,]   50  281   75  985  411  932  798  566  687   719 #>  [486,]  644  498  136  945   89  269  337  720  188    86 #>  [487,]  538  289  406  416  986  260  213  123  956   921 #>  [488,]  610  816  502  359  109   53  735  658  942   518 #>  [489,]  535  839  163   65  116  431  479  372  953    63 #>  [490,]  651 1000  845  480  833  575  735  659  939   518 #>  [491,]  310   41  915  358  581  657  697  998  157   120 #>  [492,]  229  970  392  804   66  585  216  546  621     1 #>  [493,]  797  884  706  277  770  177  810  348  919   686 #>  [494,]  173  405  248  329  311  146  191  429  141   296 #>  [495,]  382  870  531  626   10   13  317  969  351   468 #>  [496,]  274  445  951  747  176    6  231  748  771    61 #>  [497,]  463  443  876  756  814  615   15  963  221   484 #>  [498,]  486  945  644  188  245  136   89  337  264   720 #>  [499,]  455  154  233  744  243  270  925  969  837   111 #>  [500,]   98  836  306  465  683  595  843  755   83   736 #>  [501,]  863  363   29  536   28  739  402  130  182   400 #>  [502,]  264  582  842  359  826  353  720  488  610   807 #>  [503,]  652  924  331  601  674  785  611  419  541   676 #>  [504,]  163  844   80   65  677  546  861  113   76   585 #>  [505,]  568    8  991  645  171  800  420  397  761   104 #>  [506,]  202   72   91  935  721  784  953  504  430    80 #>  [507,]  655  335  254  746  201  203   27  615  672   827 #>  [508,]  240  234  666  339  198  151  519   20  983   312 #>  [509,]  877  694  813  929  664   44  733  589  987   604 #>  [510,]  981  652  594  693  976  725  886  601  866   854 #>  [511,]  667  258  456  195  313  159  828   24  330   889 #>  [512,]  140   20  380  152  312  151  901  268  371   785 #>  [513,]  948  290  360  110  273  629  738  617  245   715 #>  [514,]  671  781  622  105  300  993  913  524  356   167 #>  [515,]  636  892  315  344   70  309  765  872  954   950 #>  [516,]  905  648  331  426  453  220  607  573  150   593 #>  [517,]  620  341  602  556   57  132  861  839  431   782 #>  [518,]  791  588  475  724  651  203  324  827   27   575 #>  [519,]  234  508  973  983  240  984  653  211  387   759 #>  [520,]  657  180  978  552  621   78  883  998  804     1 #>  [521,]  603  298  444   45  241  334  793  764  456   204 #>  [522,]  735  754  575  738   53  975  237  838  658   441 #>  [523,]  400  224  747  527  739   29  996  501  633   255 #>  [524,]  677  439  671  622  189  227  122  514  733   696 #>  [525,]  450  910  205  698  624  584  403  552  883     1 #>  [526,]  780  548  111  210  830  972  925  362   61   222 #>  [527,]  711  126  824  617  899  400  101  865  661   325 #>  [528,]  390  858   22  189  787  225  741  813   44   799 #>  [529,]  433  616  676  381  693  648  426  516  478   331 #>  [530,]  848  766  460  576  854  429  135  484  389    23 #>  [531,]   64  571  639   68  459  495  262  222  458    56 #>  [532,]  909  555  743  168  832  755  465   85  374   306 #>  [533,]  837  481  184  662    8  830  233   99  744   887 #>  [534,]  446  408  925  969  483  211   64  270  881   531 #>  [535,]  479   63  489  163  556  839  431   76   65   775 #>  [536,]  225  293  402  799  996  182   28  363  501   959 #>  [537,]  162   32  144  871  773  477  545  348  641   217 #>  [538,]  487  416  289  438  147    3  956  406  897   560 #>  [539,]   73  109  425  236  604  702  775   25  987   664 #>  [540,]  956  350  867  625  794   81  190   86  123   383 #>  [541,]  419  127  745  388  892  422  652  765  872   636 #>  [542,]  559  396  699  634  908  686    7  890  923   191 #>  [543,]  748  482  802  161  971  197  732  321  137   895 #>  [544,]  609  180  275  288  470  303  657  963  685   875 #>  [545,]  641   14  193  537  574   32  477  407  196   330 #>  [546,]  844  343  392  677  787  741  130  524   44   439 #>  [547,]  260  369   88   42  213  860  862  353   10   842 #>  [548,]  210  526  830  111  598  780  184  744  447    68 #>  [549,]  607    6  653  308  951  995  790  905  226    61 #>  [550,]  860  369  975  412  966  237  723   10  941   903 #>  [551,]  736   83   76  556  817  775  562  448  341   227 #>  [552,]  883  697  520  525  366  180  249  657  449   573 #>  [553,]  379  818  866   29   84  885  388  676  981   746 #>  [554,]  943   24  301  333  294  368  195  801  828   997 #>  [555,]  465  306  832  755   85  850  909  500  204   595 #>  [556,]  341  602   57  736  535  551   83  431   76   517 #>  [557,]  276  474  334   88   19  451  627  359  807   582 #>  [558,]  626  870  708   42  495  382   74  107  468   864 #>  [559,]  542    7  923  429  890  699  396  323  776   257 #>  [560,]  142  668  956  193  773  217  416    3  279   407 #>  [561,]   22  425  539  436  390  788  258  664  113   813 #>  [562,]  843  817  121  551  327  736  857   11  683    33 #>  [563,]  933  362  579  979  346  360   99  762  394   893 #>  [564,]  750  713  235  928  199  415  572  608  112    37 #>  [565,]  321  868  482  128  427  428  271  472   51   145 #>  [566,]  776   50  719  257  758    7  434  810  477   705 #>  [567,]  614  891  709  431   97  839   47  158  942   640 #>  [568,]  505  171    8  183  233  645  420  533  481   800 #>  [569,]  169  605  581  742  593  939  453  833  220   310 #>  [570,]   31  177  918  734  919   59  219  706   95   162 #>  [571,]   64  531   68  459  598  639   56  548  925   446 #>  [572,]  638  232  608  693  976  510  103  854  713   564 #>  [573,]  249  426  899  648  865  175  905  453  516   449 #>  [574,]  828  368   32  641  301  330  159  212  313   467 #>  [575,]  838   53  735  490  522  651  754  659  518  1000 #>  [576,]  848  766  530  429  460  713  389  135  112   900 #>  [577,]  710  354  646  692  858  256  309  959   58   255 #>  [578,]  194  269  644  337   89  317  351   86  867     9 #>  [579,]  762  600  315  362  563  161  394   35   99   933 #>  [580,]  737  717  673  937  307  658   97  703  709   223 #>  [581,]  310  697  569  910  120  102  624  605  903   490 #>  [582,]  502  359  264  353  237  975  842  723  474   276 #>  [583,]   15  680  615  254  795  201  507  815  992   437 #>  [584,]  423  851  175  273   90  899  661   26  290    17 #>  [585,]  861  546  392  844  504  132  492  341  229   677 #>  [586,]  411  281  810  884   50  138  776  493  566   485 #>  [587,]  107  352  147  789  190  625   74  218  821   438 #>  [588,]  827  518  254  201  475   27  942  203  808   680 #>  [589,]   44  799  256  101  509   93  604  255   58   877 #>  [590,]  473  727  702  694  729  664  394  215  987   696 #>  [591,]  153   67  336  691  730  974  671    5  922   329 #>  [592,]   27  203  831  324  174  791  136   38  888   904 #>  [593,]  220  569  516  648  381  169  965  605  449   958 #>  [594,]  340  361  728  510  725  386  339  278  413   690 #>  [595,]  683  843   98  306  955   46  500  327  817   121 #>  [596,]  769  174  196  831  904  345    9  888  827   758 #>  [597,]  206  918  438  982   95  147  538  871  106   375 #>  [598,]  210   68  188  353  777  571  264  723  111   548 #>  [599,]   38  707  700  831  675  872  389  592  763   278 #>  [600,]  579  315  394  161  762  293  696   87  344   732 #>  [601,]  652  674  503  785  924  339  541  151  117   765 #>  [602,]  556  517  782  341  431  535  839  861   57   620 #>  [603,]  521  444  456   45  764  298  432  994  241   167 #>  [604,]  109   53  539  838  425  987  589  637   73   775 #>  [605,]  742  569  939  833  169 1000  337  480  383   651 #>  [606,]  288  470  497  835  894  619  583  712   39   814 #>  [607,]  549  226  905  995  266  951   26  308   61   653 #>  [608,]  151  674  339  100  572  601  806  638  564   693 #>  [609,]  685  544  275  642  417  180    4  756  679   875 #>  [610,]  816  488  720   73  393  109  502  466  464   888 #>  [611,]  924  198  503  220  194  331  652  351  317   578 #>  [612,]  734   60  757  699  634  919  396  228  177   477 #>  [613,]  304  915  990  965  632  358  284  968   74   316 #>  [614,]  567  839  891  640  431   97  709   39  726    47 #>  [615,]  876  201  254  507  583   15  265  753  655   680 #>  [616,]  529  433  964  478  246  693  200  676  347   381 #>  [617,]  126  711  101   35  796  715  824   53  181   762 #>  [618,]  704   92  377  355   56  374  977   68  749   412 #>  [619,]  898  712  285  606  430  835  267  250  681    15 #>  [620,]   57  517  341  556  431  602  782   21  421   305 #>  [621,]  520  883  552  804  417  180  609  492   66   657 #>  [622,]  671  300  514  189  524  153  105  993  913   781 #>  [623,]  292  322  649  143  118  398  469  403  421   259 #>  [624,]  450  910  958  698  941  581  205  569  550   150 #>  [625,]  190  789  794  540  352  147  902  272  772   956 #>  [626,]  558  495  107  870  864  382   42  468  708   772 #>  [627,]  374  377  440  557  618  704  649   92  412   474 #>  [628,]  434  728  135  361  340    7  940  690  594   841 #>  [629,]  290  404  857  948  273  513   33  121  738   110 #>  [630,]  642   63  936  479   44  811  824  589  410   325 #>  [631,]  447  394   99  764  729  830  826  184    8   362 #>  [632,]   74  304  316  897  218  613  107  587  870   129 #>  [633,]  739  326  363  232  235  282   29  553  959   224 #>  [634,]  699  686  396  612  757  890  183  734  919   542 #>  [635,]  119  963  246  478  866  976  886  885  510   894 #>  [636,]  892  637  309  872  954  515  344   87  251   256 #>  [637,]  636   87  892  236  954  987  251  344  309    73 #>  [638,]  572  103  235  693  232  608  564  633  976   674 #>  [639,]   56  688  262   68  663  531  458  777   52   571 #>  [640,]   39  614   47  567  437   97  158  891  305   709 #>  [641,]  574  949   32  545  217  193  828  368  301   808 #>  [642,]  630  936   63  679  685  130   55  370  325   804 #>  [643,]  759  100  519  529  964  234  653  200  973   186 #>  [644,]  486  498  136   89  269  337  578  117  945    86 #>  [645,]    8  505  761  800  720  991  171  568  826   214 #>  [646,]  692  577  863  208  858  141  959  130  710   741 #>  [647,]  873  427  128  701  472   51  565  972  380   455 #>  [648,]  426  381  573  516  249  449  453  433  905   331 #>  [649,]  143  118  469  440  627   79  457  703  623   213 #>  [650,]  591   67  153  989  840  691  336  980  671   730 #>  [651,]  490 1000  480  833  575  518  659  845  939   791 #>  [652,]  503  601  924  674  541  510  785  331  419   578 #>  [653,]  253  951  973  549  234  901  100  607  445    20 #>  [654,]  803  295  907  818  275  714  885  659  746    84 #>  [655,]  335  507  746   27  203  354  254  981  324   907 #>  [656,]  287  753  436  760  784  692  212   91  113   788 #>  [657,]  180  303  367  520  491   78  697  552  998   875 #>  [658,]  223  937  737  359  580  717  451  488  942   522 #>  [659,]  295  833  651  388  575  490  818  907   93  1000 #>  [660,]  869   96  342  669  284  352  418  587  107    18 #>  [661,]  274  715  617  423  181  882  999  527  796   176 #>  [662,]  481  533   51  397  401  837  149    8  568   701 #>  [663,]  262  688  273  777  639   52  458   56   26    68 #>  [664,]  702  813  987   87  694   22  236  509  877   344 #>  [665,]   55  999  325  752  400  523  181  343  501   804 #>  [666,]  874  339  194  240  312  924  278  601  351   785 #>  [667,]  313  511  323  923  467  258  330  436  946   159 #>  [668,]  142  896  560  193  196  956  769  279    3   773 #>  [669,]  869  508  240  660  198  342  386  186  594   690 #>  [670,]  967  929  462  877  604   53  332  509  811   727 #>  [671,]  622  514  300  105  153  189  524  781  336   913 #>  [672,]   23  792  507  335  484  655  981  675  179   831 #>  [673,]  580  737  307   97  717  937  709  703  891    47 #>  [674,]  151  601  785  652  503  608  924  339  331   100 #>  [675,]   38  599  981  831  389  179  872  854  309   354 #>  [676,]  379  134  886  714  433  478  503  331  426   207 #>  [677,]  227  524   76  813  694  844  189  733  343   509 #>  [678,]  783  432  170  840  994  364  770  764  662   241 #>  [679,]  187  685  370  130  642   55  863  741  263   501 #>  [680,]  254  201  815  588  328  827  437  952  583   279 #>  [681,]  349  267  133  285   14  898  545  407  430   158 #>  [682,]  291  241  144  348  554  338  961  997  994   456 #>  [683,]  843  595   98  327  817  121  955  500  306   562 #>  [684,]  834   64  459  571  825  531  238  297  704   639 #>  [685,]  679  187  609  642  370  221  756  859  275   263 #>  [686,]  634  396  884  542  810  919  699  612  177   757 #>  [687,]  248  230  323  932  287   75  923  908  173   689 #>  [688,]  262  639  777  663   56   13  723   10  860    68 #>  [689,]   34   75  935  230  687  932   91  248  287   485 #>  [690,]   18  435  342  361  725  594  957  628  728   794 #>  [691,]  730   67  191  913  146  300  591  329  960   405 #>  [692,]  646  577  208  858  863  354  141  710   80   656 #>  [693,]  478  510  638  200  572  454  674  676  652   976 #>  [694,]  813  509  664  727  590  733  702  473  877   227 #>  [695,]  239  980  840  170  364  722  781    5  852   105 #>  [696,]  733  813  590  600  694  664  727  293  225   877 #>  [697,]  581  310  910  569  648  490  120  624  449   358 #>  [698,]  910  205  624  403  903  917  941  450  120   292 #>  [699,]  890  634  946  396  420  612   60  757  104   705 #>  [700,]  707  599  763  104  174   38  761  139  831   872 #>  [701,]  481   51   62  428    2  455  662  472  233   380 #>  [702,]  664  987  236   87  729  590  215  813  539   694 #>  [703,]  409  986  580  673   79  213  737  717  289   726 #>  [704,]  618   92  377  355   56  297  374  639   68   412 #>  [705,]  477  758   60  257  699  946  612  467  890   345 #>  [706,]  493  884  570  797  177  277  919  810  155    59 #>  [707,]  700  599  763  104   38  890  831  761  946   174 #>  [708,]  558  387  626  767  320  211  534  847  495   870 #>  [709,]  891   97  942  952  937  307  580  737   47   673 #>  [710,]  577  354   84  936  256  255   29  265  907    58 #>  [711,]  126  101  617  527  824  796   35  388  127   181 #>  [712,]  835   39  619  640  606   78  898  250  437   875 #>  [713,]  564  576  572  940  112  389  232  854  386   135 #>  [714,]  134  295  207  654  676  379  886  818  803   659 #>  [715,]  882   35  796  181  661  274  617  762  999   126 #>  [716,]  474  404  412  975  223  409  359  522   82   550 #>  [717,]  737  937  580  223  673  307  658  451  726   276 #>  [718,]  855  124   28  528  922  390  208  182  141   189 #>  [719,]  927  257  758  179  923  566   23  705  795   323 #>  [720,]  816  645  610  826  761  502  486  264  174   498 #>  [721,]   72   80   91  208  692  935  141  646  370   689 #>  [722,]  122    5  878  439  319  980  239  336  105   524 #>  [723,]  860   13   56  777  369  353  688  582  262    10 #>  [724,]  475  518  588  410  838  942  998  328  575   754 #>  [725,]    9  904  361  981  594  578  194  510  831   957 #>  [726,]   82  782  421  737  717  658   97  580  223   673 #>  [727,]  473  590  694  877  729  733  929  394  987   702 #>  [728,]  340  361  594  135  628  841  854  413  725   510 #>  [729,]  987  236  702  394  826   87  631  590  664   727 #>  [730,]  691  191  960  146   67  329  591  160  913   405 #>  [731,]  979  732  346  933  401  394  161  893  563    99 #>  [732,]  161  731  401  971  600  543  346  933  893   974 #>  [733,]  696  813  694  509  877  664  225  727  293   590 #>  [734,]  612  919  177   60  228  757  634  183  699   396 #>  [735,]  237  845  975  522  575  738  966  480  490   488 #>  [736,]  551   83  556  817  341  562   57   76  836   602 #>  [737,]  717  937  580  673  307  658  223  726   97   891 #>  [738,]  237  851  975  290  735  522  845  273  948    53 #>  [739,]  633  326  363   29  501  282  224  523  182   959 #>  [740,]   94  156  373  166  176  319   16   36  771   274 #>  [741,]  130  858   44  370  528  863  208  646  787   501 #>  [742,]  605  369  480  169  383  939  966 1000   10   337 #>  [743,]  595  832  843  683  977   98  306  500  749    11 #>  [744,]  233  184  111  837  154  830  214  210  800   499 #>  [745,]  127  419  541  315  892  126  515  636  762   422 #>  [746,]  335  655  907  207  203   27  507  885  324   981 #>  [747,]  224  822  523  496  422  235  274  400  527   199 #>  [748,]  543  971  579  161  231  823  895  600  802   732 #>  [749,]  355  977  377   92  618  704  374  476  185   259 #>  [750,]  199  415  235  822  564   37  112  928  930   363 #>  [751,]  548  571   46  168  955   64  618   68  459   598 #>  [752,]  880  501  665  787  402   28  343  930   55   224 #>  [753,]  656  265  876  936   65  615   58  354  201   108 #>  [754,]  838  522  410  575  441  724  998   53  658   462 #>  [755,]  465  909  306  500   98  836   19  125  595   555 #>  [756,]  221  859  876  265  275  885  963  497  936   615 #>  [757,]  612   60  228  634  318  699  395  345  734   890 #>  [758,]  705  257   60  196  477  927  596  719  345   566 #>  [759,]  643  653   12  519  100  253  471  944  365   234 #>  [760,]  436  108  212  425  258  159  114  261  467   561 #>  [761,]  104  763  645  420  946  357  505  720  890   700 #>  [762,]  579   35  315  362  796  600  245  715  563   877 #>  [763,]  104  761  707   49  890  700  357  946  420   505 #>  [764,]  447  631  603  364   46  793  432  521  167   779 #>  [765,]   70  950  137  515   37  152  117  268  541   422 #>  [766,]  460  530  848  576  854  429  389  900  141   135 #>  [767,]  847  387  211  825  708  408  320  531  308   984 #>  [768,]  378  106  168  947  982  131  468   95  864   459 #>  [769,]  596  196  957  853    9  904  815  827  795   668 #>  [770,]  662  481  432  730  678  686  171   51  994   568 #>  [771,]  823  231  302  166  496   12  748  822  445   197 #>  [772,]  194  902  625  352  789  190   18  351  794   314 #>  [773,]  272  918   60  537  734  477  162  705  228   612 #>  [774,]   77  809  947  906  938  243   62   95  219   864 #>  [775,]   25  425  539  114  109  604   76  889  694    45 #>  [776,]    7  434  810  566   50  559  411  542  396   884 #>  [777,]  262   13  688  723  663   56   68  598  860   639 #>  [778,]  192  376  247  751  881  168  783  455  780   548 #>  [779,]  793  926  938  233  568  764  183  744  171   447 #>  [780,]  830  837  526   99  184  533  111  972  346   161 #>  [781,]  514  105  671  167  993  622  356  448  300   840 #>  [782,]   82  726  421  602  431  322  839  754  620   978 #>  [783,]  678  170  364  432  662  764  994  840  779    46 #>  [784,]  116  953  285  656  430  753  489  202  133   760 #>  [785,]  911  901  140  151  674   20  601  226  503   419 #>  [786,]  271  160  429  829  940  135  856  576  146   428 #>  [787,]  343  528   28  225  741  536  501  130   44   858 #>  [788,]  311  436  561  258  287  667  390   22  323   248 #>  [789,]  190  625  147  352  772  902  794   95  438    42 #>  [790,]  458  308   30   61  222  663   52  549    6   424 #>  [791,]  324  203  136  805  518  827 1000  592   27    81 #>  [792,]   23  672  841  443  484  795  719   15  728   927 #>  [793,]  779  926  334  764  521  447  807  241  603   171 #>  [794,]  625  540  272  956  190  352  867  314  345   902 #>  [795,]  196   15  769  583  927  957  992  193  672   758 #>  [796,]   35  181  715  126  101  617  711  762  882   293 #>  [797,]  493  277  706  884  770  908  586  686  810   177 #>  [798,]   14  330  323  212  467  313  368  923  287   828 #>  [799,]  225  996  589   44  536  255  344  293  858   309 #>  [800,]  214  991  645    8  505  887  744  111  184   154 #>  [801,]  943   21  836  889   83   24   57  195  204   114 #>  [802,]  128  895  972  543  868  780  161  197  748   732 #>  [803,]  654  907  295  818  275  475  885  746   93   265 #>  [804,]  325  811  332  630  642  462  883   55    1   824 #>  [805,]  324  207  791  203  134  904 1000  833    9   283 #>  [806,]  371  145  151  152  512  197  427   20  608   100 #>  [807,]  842  334  926   88  353  264  502  276  720   582 #>  [808,]  393  888  261  464  942  588  466  952  123   827 #>  [809,]  906  774   59   62  219   77  938  243  183   131 #>  [810,]  884  776  396  686    7  542  566  434  919   612 #>  [811,]  332  462  967  929  670  824  630  804  509   325 #>  [812,]  280  386  186  413  340  713  572  976  594   728 #>  [813,]  664  694  733  509   22  702  390  696  227   877 #>  [814,]  250  221  497  470  756  876  463  288  898   430 #>  [815,]  328  279  399  680  827  283  769  896  952   853 #>  [816,]  610   73  720  109  488  251  466  539  826   761 #>  [817,]  448  473  327  843   83  551  683   45  562   167 #>  [818,]  907  295   84  654  388   93  659  553  803   379 #>  [819,]  417    4  642  685  861  679   63  370  844   546 #>  [820,]  483  446  534  708  864  192  947  468  626   558 #>  [821,]  968    3  587  853  352  342  897  896  794   625 #>  [822,]  199  415  235  750  747  224   37  823  422   152 #>  [823,]  302  771  231  748  822  415  543  496  197   199 #>  [824,]  101  711  332  325  126  617  589  527   93   400 #>  [825,]  767   30  639  834  531  847  458  242  684    64 #>  [826,]  502  264  720  729  645  631  245  816  447   236 #>  [827,]  588  203  791  254  518  328   27  324  592   888 #>  [828,]  574  368  330  313   32  301  159  467  212   511 #>  [829,]  786  713  940  271  856  135  427  386  576   812 #>  [830,]  184  111   99  837  214  744  362  780  210   533 #>  [831,]   38  599  592  707  904  596  700  174  675   888 #>  [832,]  555  306  743  595  239  850  465  843  683   500 #>  [833,]  939 1000  651  490  453  659  605  865  805   207 #>  [834,]  684  297  459  704  825  242  238  618   92   639 #>  [835,]  712   39   78  640  606  875  619  250  470   898 #>  [836,]  801  500   83  204   57   98  298  736  306   850 #>  [837,]  184  830  214  533  111  744  887   99    8   991 #>  [838,]  575  754  475   53  410  604   93  522  488   724 #>  [839,]  431  410   63  535  489  614  479  567  602   754 #>  [840,]  678  170  994  432  913  783  781  364  514   730 #>  [841,]  792  728  413  435  957  340  119   23  672   690 #>  [842,]  807  353  502  264  582  921  720  359  276    86 #>  [843,]  683  595  817  327  562   98  121  955  500   857 #>  [844,]  546  677  343  787  741  130   44  227  528   524 #>  [845,]  237  735  490 1000  975  738  651  480  939   369 #>  [846,]  849  148  812  530   40  413  848  766  232   460 #>  [847,]  767  408  211  222  308  458  531  790   64   825 #>  [848,]  530  766  460  576  429  135  854  389  173   494 #>  [849,]  846   40  812  413  976  280  246  103  232   119 #>  [850,]  204  298  356  306  241  521  448  836  603   817 #>  [851,]  738  273  584  290  237  845   17  975   26   441 #>  [852,]  980  695  868  974  988  149  376    5  321   336 #>  [853,]  957  769  896  815  992    9  904  668    3   956 #>  [854,]  976  866  675  766  530  460  728  389  232   510 #>  [855,]  718  124   28  922  528  787  182  189  208   390 #>  [856,]  277  786  271  155  686  472  829  701  160   427 #>  [857,]   33  121  629  327  404   11  967  290  670   110 #>  [858,]  741   44  130  646  528  799   22  589  577   863 #>  [859,]  885  756  963  265  221  275  710  654  876   803 #>  [860,]  369   10  723   13  550  975  237  688  777   412 #>  [861,]  602  517  132  535  341   63  556  163  839   489 #>  [862,]  178  452  242  297  870  238   10  547  382   459 #>  [863,]  646  130  208  501  741  858  959  370  141   692 #>  [864,]  468  947   42  446  626  774  789  495   95    77 #>  [865,]  453   17  331  833  266  426  226  939  899   419 #>  [866,]  976  854  553  510  635  981  232  478  119   885 #>  [867,]   81  350  269  540   86  383  791  956  399   794 #>  [868,]  802  321  128  543  482  565  974  732  197    51 #>  [869,]   96  660  342   18  669  352  772  418  983   690 #>  [870,]  382  862  495  558  178   10  626  242  218    42 #>  [871,]  162  537  144  918  291  206   32  997  961   217 #>  [872,]  892  636  309  251  954  637   38  515  592   707 #>  [873,]  244  647  128  972  371   20  408  895  197   512 #>  [874,]  312  380  278  339  666  140  117  940  512   139 #>  [875,]   78  470    4  288  180  835  609  275  250   367 #>  [876,]  265  615  221  756  753  859  936  201  507   354 #>  [877,]  509  987  929  664   35  694  733   87  702   813 #>  [878,]  439  319  696    5  733  122  722  971  882   336 #>  [879,]  962  457  452  259  469  143  178  242  440   297 #>  [880,]  752  665   55  343  156  787  115  402  501   930 #>  [881,]  408   64  534  424  244  847  925  222  571   531 #>  [882,]  715  999  181   35  929  796  661  274  762   877 #>  [883,]  423    1   66  804  325  552  584  525  441    16 #>  [884,]  810  396  686  919  177  542  493  634  776   348 #>  [885,]  859  746  654  963  907  335  803  553  379   818 #>  [886,]  134  676  379  207  510  714  478  805  981   635 #>  [887,]  991    8  214  837  800   99  184  397  505   645 #>  [888,]  261  393  808  174  592  596  827  831  816    27 #>  [889,]  195  114  444   25   24  159   45  943   21   775 #>  [890,]  946  699  104  420  763  357  761  707  634   700 #>  [891,]  709   97  942  937  307  567  737  952  673   580 #>  [892,]  636  872  637  309  515  745  127  541  954   251 #>  [893,]  346  933  731  780  563  979  732  161  971    99 #>  [894,]  635  886  963  134  246  714  283  606  885   303 #>  [895,]  197  802  972  231  951  543  371  748  244   268 #>  [896,]    3  992  668  142  815  853  279  769  956   193 #>  [897,]  316  383  218  968  487  538   81  416    3   399 #>  [898,]  285  430   15  615  583  681  267  619  784   250 #>  [899,]  249  573  175  426  905  527  865   90   17   423 #>  [900,]  959  112  363  182  326  389  141  766  515   309 #>  [901,]   20  951  785  151  140  512  911  253  234   371 #>  [902,]  314  272  228  318  395  345  625  190   86   772 #>  [903,]  102  120  409  550  986  698  966  703  910   581 #>  [904,]    9  203  324  725  831  805  596  592  791   769 #>  [905,]  516  607  899  175  226  150  453  865  426   331 #>  [906,]   62  809  243  774   77  318  395   59  701   938 #>  [907,]  818  803   93  654  746  295   84  659  475   885 #>  [908,]  542  687  338  191  323  281  559  691   67   230 #>  [909,]  755  465  125  649  627   98  306  500  374   118 #>  [910,]  698  624  450  205  581  941  903  917  697   120 #>  [911,]  785  140  117  901  226  419  512  268  644    20 #>  [912,]  398  216   11  476  623  229   33  403  292   121 #>  [913,]  994  300  691  432  356  730  511  215  514   456 #>  [914,]  150   90  549  175  790  365  449    6  458    30 #>  [915,]  358  310  965  491   41  613  581  316  990   897 #>  [916,]  187  172   40  679   54  326  863  370  685   141 #>  [917,]  441  205  404  120  698  522  716  754  975   462 #>  [918,]  375  773   95  272  871  789  190  597  206   147 #>  [919,]  177  734  348  396  612  634  162  699  686   183 #>  [920,]  286  217  949  307  931  560  673  406  487   289 #>  [921,]  123  464  406  393  952  942  842  350  217   949 #>  [922,]  124  153  296  336  718  974  960  855  536   321 #>  [923,]  323  667  946  467  559  257  313  179  927   890 #>  [924,]  503  611  652  601  331  674  194  578  666   785 #>  [925,]  969  222  499  270  455  526  154  534   64   210 #>  [926,]  807  375  793  779  938   88  842  183  334   233 #>  [927,]  719  257  179  758  261  923  196  795   23   705 #>  [928,]  415  750  564  145  934  199   37  713  482   112 #>  [929,]  877  509  670  332  882  727  694   35  811   967 #>  [930,]  402  199  415  750  182   54  363  224  822    28 #>  [931,]   19  406  213   88  276  217  334  807  921   451 #>  [932,]   75  687   50  281  248  411  230  429  485   689 #>  [933,]  563  346  979  731  893  579  161  394  362   971 #>  [934,]  145  928  806  564  427  415  371  608   12   713 #>  [935,]   91  689  287  721  202  985  656  230   34    75 #>  [936,]  265  710   58  753  630   84  858   93  256   907 #>  [937,]  737  307  717  580  891  658  709  223  673   464 #>  [938,]  779  774  926  809  219  131  233  183  243   375 #>  [939,]  833 1000  337  605  453  136  845  945  742   651 #>  [940,]  874  339  386  361  135  278  713  389  340   594 #>  [941,]  205  273  550  688  663  975  290   56  629   412 #>  [942,]  952  709  891  464  588  808  123  937  658   921 #>  [943,]   21  801  889  554   24  294  195  114  372   301 #>  [944,]   12  145  934  759  371  806  253  100  771   197 #>  [945,]  498  486  136  337  939  245  644  188  845   502 #>  [946,]  890  420  357  761  104  699  763  707  414   923 #>  [947,]  864   95   77  774  468   42  938  789  446   375 #>  [948,]  513  290  360  273  110  738  629  617  245   670 #>  [949,]  217  641  464  307  808  921  123  393  574   301 #>  [950,]  296   70  137  765   37  515  428   49  389   960 #>  [951,]  253  901  653   20  607  549  371  785  895   496 #>  [952,]  942  328  709  399  123  279  588  891  921    97 #>  [953,]  116  784  489  372  202  250  163  614  839   133 #>  [954,]  637  236   87  344  636  251  872   49  309   892 #>  [955,]   46  447  764  595  979  364  683  548  110   239 #>  [956,]  540  279  123  867  794  350  668    3   81   416 #>  [957,]  853  769    9  992  435  795  725  904  596   196 #>  [958,]  624  169   10  452  242  569  382  688  870   178 #>  [959,]  900  182  363  646  996  326  577  141  799   863 #>  [960,]  146  296  191  730  160  405  329   49  397   950 #>  [961,]   19  241  997  931  301  291  871  793  521    32 #>  [962,]  879  259  452  698  292  403  242  178  355   469 #>  [963,]  635  885  859  866  756  246  478  497  275   553 #>  [964,]  200  616  693  478  246  529  454  280  638   186 #>  [965,]  990  304  593  284  915  358  220  569  381   218 #>  [966,]  480  102  369  735  409  742  550  845  120   975 #>  [967,]  462  670  811  332  441  522  929  754   53    33 #>  [968,]  821  897  853  587    3  218  383  342  107   990 #>  [969,]  925  270  499  154  222  534  455  495  598   210 #>  [970,]  492   66  392  665   55  546  804  880  263   229 #>  [971,]  748  319  543  732  933  161  579  893  731   346 #>  [972,]  455  802  128  895  780  526  837  499  925   512 #>  [973,]  234  653  901  516  220  607  785  549  331   995 #>  [974,]  321  482  336  732  922  960    5  591  868   153 #>  [975,]  237  735  738  845  550  582  412  860  522   369 #>  [976,]  866  119  854  510  413  572  635  232  478   693 #>  [977,]  749   92  355  618  377  704  185  374  834    52 #>  [978,]  322  782  520   78   82  421  602  157  726   917 #>  [979,]  933  731  563  346  394  727  110  473  631   893 #>  [980,]    5  974  852  336  988  122  695  722  732   319 #>  [981,]  510  335  675   38  831  904  655  746  725     9 #>  [982,]  206  106  378  597  131  768   95  871  918   219 #>  [983,]  508  519  240  873  869  234  339  312  647   669 #>  [984,]  387  767  973  519  320  165  211  847  708   220 #>  [985,]  485  349  935  689   75   34  287  798  430   281 #>  [986,]  409  703  102   79  289  903  487  966  213   580 #>  [987,]  702   87  236  729  664  877  637  109  539   604 #>  [988,]  974  922  980  482  321  989  336    5  153   930 #>  [989,]  329  922  461  405  591  153  146  988  124   494 #>  [990,]  965  284  304  613  968  915  358  611  593   220 #>  [991,]  887  800    8  214  505  645  837  184  397     2 #>  [992,]  896  853  957  795  668  583  769   15  815   196 #>  [993,]  299  514  781  622  671  356  300  913   24   850 #>  [994,]  432  913  603  678  170  456  241  356  167   764 #>  [995,]  308  226  607  266  222   26   61  549  262    17 #>  [996,]  799  255  536  422  293  225   29  400  515   796 #>  [997,]  286  333  144  961   32  554  301  871  368   294 #>  [998,]  120  724  754  490  651  575  480  917  102   966 #>  [999,]  181  882  715  274  796  661   35  665  929   293 #> [1000,]  651  490  939  833  480  136  791  845  324   805 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.72666755 0.8097100 0.8620675 0.8691525 0.9345249 0.9420102 0.9493400 #>    [2,] 0.49325212 0.4960293 0.5613617 0.5620789 0.5769737 0.6036426 0.6069854 #>    [3,] 0.50726146 0.5183307 0.6689220 0.7016938 0.7147221 0.8053845 0.8058337 #>    [4,] 0.66532399 0.9618048 1.0040433 1.1787265 1.2742836 1.3063631 1.3296188 #>    [5,] 0.38071311 0.4290138 0.7911791 0.8004290 0.8890433 0.9081256 0.9185220 #>    [6,] 0.58274810 0.6883679 0.7643623 0.7843264 0.8129710 0.8359138 0.8582896 #>    [7,] 0.32197602 0.4664662 0.5778488 0.7559854 0.7827749 0.7953649 0.8041409 #>    [8,] 0.28211698 0.2927667 0.2996897 0.3524449 0.3820754 0.4063836 0.4134455 #>    [9,] 0.16249153 0.3713843 0.5616679 0.5720963 0.5929149 0.6010574 0.6124032 #>   [10,] 0.33709287 0.3464059 0.4615934 0.4720840 0.4792210 0.5547554 0.5628950 #>   [11,] 0.65805498 0.7445004 0.7721509 0.7863693 0.8673317 0.9129152 0.9736517 #>   [12,] 0.80615766 0.8615500 0.8881159 0.9358527 0.9799640 1.0417790 1.0643763 #>   [13,] 0.32803217 0.3461653 0.3464059 0.3830702 0.4355314 0.4369115 0.4878336 #>   [14,] 0.52940172 0.5502880 0.7169765 0.7997611 0.8033435 0.8184706 0.8219581 #>   [15,] 0.40055743 0.5667472 0.6770483 0.7357897 0.8416748 0.8470790 0.8472386 #>   [16,] 0.45950904 0.9464069 1.0076168 1.1099824 1.1112812 1.1587201 1.2980187 #>   [17,] 0.30689500 0.3134443 0.4189660 0.4501258 0.5202311 0.6733964 0.6874139 #>   [18,] 0.49501575 0.6721726 0.7394969 0.7541308 0.7727911 0.8371230 0.8395579 #>   [19,] 0.49313717 0.5600438 0.7319334 0.7675529 0.8245881 0.8603477 0.8985919 #>   [20,] 0.30972644 0.3723822 0.4033998 0.4838718 0.5441243 0.5575688 0.6379733 #>   [21,] 0.38993929 0.5204365 0.6055838 0.6317039 0.6829604 0.7043581 0.7217896 #>   [22,] 0.32777646 0.4313812 0.4435468 0.4463318 0.5574227 0.5781900 0.5968053 #>   [23,] 0.20273430 0.5528594 0.5847434 0.6843805 0.7398328 0.7417554 0.7632668 #>   [24,] 0.31671388 0.5117713 0.5157728 0.5928255 0.5960224 0.6399055 0.6421347 #>   [25,] 0.29655166 0.4405703 0.4445684 0.5012887 0.5143188 0.5195480 0.5668878 #>   [26,] 0.30689500 0.4065921 0.5867443 0.6086270 0.6244477 0.6257655 0.6432517 #>   [27,] 0.32312041 0.3798134 0.4195950 0.4942339 0.4975381 0.4977324 0.5260683 #>   [28,] 0.56983298 0.5802992 0.6375469 0.6382194 0.6710112 0.6796016 0.6880738 #>   [29,] 0.26794125 0.3535964 0.4791531 0.5917765 0.6207631 0.6474570 0.6556245 #>   [30,] 0.37929358 0.4919387 0.6986757 0.7730402 0.8053192 0.8274369 0.8766009 #>   [31,] 0.89974347 1.0000166 1.0498250 1.0763545 1.0910156 1.1295344 1.1297563 #>   [32,] 0.38500397 0.4055069 0.4138250 0.4366263 0.5014779 0.5595461 0.5858419 #>   [33,] 0.28228754 0.3756378 0.5450259 0.6302357 0.6367244 0.7231573 0.7445004 #>   [34,] 0.62737448 0.9678321 1.0912592 1.2780055 1.3164937 1.3367186 1.4689492 #>   [35,] 0.16204728 0.3379261 0.3838727 0.4113234 0.4499775 0.4658299 0.4736367 #>   [36,] 0.45950904 0.6576356 0.8672299 0.8943460 0.9130479 0.9874108 1.0826752 #>   [37,] 0.48245416 0.5319602 0.5354090 0.5893181 0.6386311 0.6429988 0.6985654 #>   [38,] 0.20796788 0.2651181 0.3539117 0.4371354 0.4958151 0.5177569 0.5318616 #>   [39,] 0.73145021 0.7675121 0.8700979 0.9313255 0.9332158 0.9395828 1.1204542 #>   [40,] 0.73995339 1.1456839 1.1810814 1.2935131 1.4157265 1.4469715 1.4538162 #>   [41,] 0.81682605 0.8570367 0.8578227 0.8622234 0.8949679 0.9054565 0.9665167 #>   [42,] 0.45985499 0.5088258 0.6998580 0.7441190 0.7607292 0.7758987 0.7966936 #>   [43,] 0.77290813 0.9146903 0.9758765 1.0387343 1.0950888 1.1079705 1.1502047 #>   [44,] 0.39871010 0.4540076 0.4749586 0.5219028 0.5541176 0.5605503 0.6571999 #>   [45,] 0.29641761 0.2965517 0.4776748 0.5551390 0.5570472 0.5580324 0.5771989 #>   [46,] 0.22570923 0.6195217 0.6562354 0.6997957 0.8433683 0.8495732 0.8659845 #>   [47,] 0.50519820 0.5088624 0.5790840 0.6527911 0.7131403 0.7206088 0.7818534 #>   [48,] 0.77290813 1.2067848 1.2514272 1.2688767 1.2709868 1.3172425 1.4035461 #>   [49,] 0.39613866 0.4599030 0.4805084 0.4831040 0.5052953 0.6261700 0.6444018 #>   [50,] 0.48258154 0.6885693 0.6886593 0.7079467 0.7442037 0.7473217 0.7768417 #>   [51,] 0.40124961 0.4977992 0.5703528 0.6042808 0.6319333 0.7818590 0.8096551 #>   [52,] 0.51897209 0.5351661 0.5478889 0.6004341 0.6470694 0.6567072 0.6832157 #>   [53,] 0.39352417 0.4344496 0.4668662 0.5477871 0.5537995 0.5783871 0.5805692 #>   [54,] 0.62667671 0.7489201 0.8181011 0.8906607 0.8937950 0.9203392 0.9434570 #>   [55,] 0.49551223 0.8370578 0.8780534 0.9618674 1.0113949 1.0201324 1.0289878 #>   [56,] 0.36163299 0.3635215 0.4122397 0.4154556 0.4479839 0.5279255 0.5813527 #>   [57,] 0.48056186 0.6145466 0.6380409 0.7569329 0.8114058 0.8267563 0.8388748 #>   [58,] 0.26852313 0.4582526 0.4994470 0.5214343 0.5404717 0.5646314 0.5758257 #>   [59,] 0.48393501 0.5495375 0.7778778 0.7899018 0.8267051 0.8565037 0.8654039 #>   [60,] 0.34036219 0.4364486 0.4717362 0.4816995 0.5261131 0.5354910 0.5421288 #>   [61,] 0.49600493 0.5576360 0.5755266 0.6172277 0.6244477 0.6281970 0.6865317 #>   [62,] 0.30856636 0.4198757 0.5095595 0.6657533 0.6761530 0.6983704 0.7036138 #>   [63,] 0.55257244 0.5938785 0.6069422 0.6556221 0.7171444 0.8111982 0.8572411 #>   [64,] 0.32512205 0.3320616 0.6587798 0.7006877 0.7124614 0.7279119 0.7365207 #>   [65,] 0.46386013 0.4695897 0.6353309 0.7141213 0.7327772 0.7382776 0.7595756 #>   [66,] 0.97670334 1.0076168 1.1968019 1.2271464 1.3446122 1.3611101 1.3640040 #>   [67,] 0.41335534 0.6324190 0.6845004 0.8058896 0.8422156 0.8914912 0.9080761 #>   [68,] 0.36163299 0.4261778 0.4469215 0.4686958 0.4825014 0.5189721 0.5414238 #>   [69,] 1.51107966 1.6589341 1.6803736 1.7633264 1.7851241 1.7868004 1.8181585 #>   [70,] 0.35067820 0.4518437 0.4759033 0.4863959 0.4994755 0.5068683 0.5311659 #>   [71,] 0.65904766 0.8565037 1.0229287 1.0997628 1.2948956 1.4101825 1.4456894 #>   [72,] 0.40252766 0.8555896 0.8885810 1.0544714 1.1534208 1.2848188 1.2978171 #>   [73,] 0.28947462 0.3274747 0.3614889 0.3679953 0.4576731 0.4802871 0.5128993 #>   [74,] 0.60467187 0.8689217 0.9384047 0.9687932 0.9905847 1.0253031 1.0869086 #>   [75,] 0.45628983 0.6353383 0.7632342 0.8633382 0.9329811 0.9395810 0.9525389 #>   [76,] 0.37160870 0.6016286 0.6284527 0.6828496 0.7029230 0.7042528 0.7281142 #>   [77,] 0.29380508 0.5379111 0.6233205 0.6253797 0.7175512 0.8411832 0.8542686 #>   [78,] 0.85503370 1.1328012 1.1422407 1.1811188 1.1838279 1.3307193 1.3434844 #>   [79,] 0.44778020 0.6294748 0.6498975 0.7740893 0.7883617 0.8739325 0.8897300 #>   [80,] 0.49307072 0.7738750 0.7853475 0.8228466 0.8555896 0.8705685 0.8815705 #>   [81,] 0.22861821 0.3441181 0.4692380 0.5178033 0.5375364 0.5400914 0.5822028 #>   [82,] 0.29480950 0.3733879 0.5410964 0.7162001 0.7399593 0.7449085 0.7548719 #>   [83,] 0.44703221 0.4559690 0.6497351 0.6932367 0.7070713 0.7156910 0.7492470 #>   [84,] 0.26100890 0.3535964 0.4082966 0.4850027 0.5522475 0.5645943 0.5733226 #>   [85,] 1.24288998 1.2820551 1.3080872 1.3877239 1.4025237 1.4129578 1.4181257 #>   [86,] 0.23919051 0.3326339 0.3744237 0.5022410 0.5080412 0.5850598 0.6012933 #>   [87,] 0.25762515 0.2972152 0.2974267 0.3369376 0.3660930 0.3861454 0.3955661 #>   [88,] 0.51293127 0.6551125 0.6665497 0.6691600 0.6853487 0.7031451 0.7087314 #>   [89,] 0.33263393 0.3390093 0.4315356 0.4517080 0.4527273 0.5104940 0.5134758 #>   [90,] 0.35864150 0.6792510 0.6908221 0.7364897 0.7498608 0.7553055 0.7670700 #>   [91,] 0.58089880 0.7470089 0.7751697 0.8471519 0.8837845 0.8879854 0.8885810 #>   [92,] 0.21482655 0.3192498 0.4951694 0.5534756 0.5898105 0.6481500 0.7372540 #>   [93,] 0.41465008 0.4261464 0.4582526 0.5347712 0.5422432 0.5467849 0.5501079 #>   [94,] 0.32331748 0.7031026 1.1124788 1.3203250 1.3623979 1.4125589 1.4582359 #>   [95,] 0.49812194 0.6253797 0.6489189 0.6641405 0.6736198 0.7871180 0.8056775 #>   [96,] 0.56188713 0.7517489 0.9351859 0.9813738 1.1490799 1.2087528 1.2219430 #>   [97,] 0.28533840 0.4018046 0.4484670 0.5088624 0.5351247 0.5438791 0.5896249 #>   [98,] 0.50845022 0.5091336 0.6250467 0.7400678 0.8452505 0.8461640 0.8482045 #>   [99,] 0.26737232 0.3032775 0.3199653 0.3899443 0.4263329 0.4280097 0.4364676 #>  [100,] 0.68244585 0.6995117 0.7092158 0.7245304 0.7604653 0.8144933 0.8374726 #>  [101,] 0.26236959 0.2832913 0.3777820 0.4061242 0.4600988 0.4658299 0.5146423 #>  [102,] 0.42368850 0.4649971 0.4956023 0.5332454 0.5617095 0.6440072 0.6802909 #>  [103,] 0.56794768 0.5846301 0.7795106 0.9078382 0.9138146 0.9687402 0.9897263 #>  [104,] 0.14685469 0.3225140 0.3646208 0.4261481 0.4413218 0.4696609 0.4762272 #>  [105,] 0.50852186 0.6419147 0.6532212 0.6897191 0.7023150 0.7433929 0.7743777 #>  [106,] 0.47478984 0.5868384 0.7434131 0.9618460 1.0731336 1.2820551 1.2875190 #>  [107,] 0.57139727 0.5849253 0.7158669 0.8596975 0.8689217 0.9200229 0.9332864 #>  [108,] 0.37441316 0.4373040 0.5214343 0.5888097 0.5952096 0.6235280 0.6368087 #>  [109,] 0.28395603 0.2983813 0.3614889 0.4805422 0.4841111 0.4975852 0.5192461 #>  [110,] 0.47142176 0.5092074 0.5171684 0.6246194 0.6957029 0.7299974 0.7477471 #>  [111,] 0.23940559 0.2485049 0.2560809 0.2772501 0.3119845 0.3402041 0.4364676 #>  [112,] 0.50631343 0.5804150 0.6720118 0.6841026 0.7075095 0.7434478 0.7537386 #>  [113,] 0.46958972 0.6019544 0.6370831 0.6683828 0.7819214 0.7827216 0.8114984 #>  [114,] 0.31519554 0.4854600 0.5194426 0.5725685 0.5871150 0.5928255 0.6317039 #>  [115,] 1.51236924 1.6965957 1.9993561 2.1420384 2.2208357 2.2213274 2.3364826 #>  [116,] 0.40836798 0.6064300 0.7401971 0.9172492 0.9509869 0.9770139 0.9960072 #>  [117,] 0.49325212 0.5181753 0.5198990 0.5311659 0.5364413 0.5567701 0.5904319 #>  [118,] 0.55755421 0.7840977 0.8092036 0.8538552 0.8802212 0.9266294 0.9966654 #>  [119,] 0.54979344 0.6321951 0.7393154 0.7988946 0.8374577 0.8755081 0.8914884 #>  [120,] 0.49560227 0.5661242 0.5742484 0.6162639 0.6563952 0.6794629 0.7411290 #>  [121,] 0.31906938 0.3756378 0.5424152 0.7071859 0.7182690 0.7721509 0.7731621 #>  [122,] 0.42901377 0.7256913 0.7701238 0.8146284 0.8734917 0.9270625 0.9493081 #>  [123,] 0.29935140 0.4250039 0.4926186 0.5165777 0.5443034 0.5565392 0.5684547 #>  [124,] 0.41523780 0.5067832 0.6008395 0.6709441 0.7458169 0.7768934 0.7802598 #>  [125,] 1.07313356 1.1415306 1.1502524 1.1858248 1.3080872 1.3138281 1.3567319 #>  [126,] 0.14751575 0.2395810 0.2832913 0.4533817 0.4736367 0.5259329 0.5324620 #>  [127,] 0.06443966 0.3366414 0.3746857 0.5092728 0.5137240 0.5324620 0.5589415 #>  [128,] 0.53284063 0.5984853 0.6703250 0.6814798 0.7594601 0.7976276 0.8046401 #>  [129,] 1.02297307 1.1718049 1.1920359 1.2124288 1.2828481 1.3475023 1.3814946 #>  [130,] 0.15405061 0.4546352 0.5062567 0.5423670 0.6571999 0.6820056 0.6839586 #>  [131,] 0.25553271 0.6654261 0.7346248 0.7757727 0.7899018 0.7939642 0.8062760 #>  [132,] 0.86547602 0.8970732 1.3430960 1.3893413 1.3982740 1.5256870 1.5458449 #>  [133,] 0.48431153 0.6790356 0.7733589 0.9172492 0.9877655 0.9929044 1.0122385 #>  [134,] 0.34883844 0.3581274 0.4887094 0.5113789 0.5782629 0.6036790 0.6867016 #>  [135,] 0.59408958 0.6882761 0.7200208 0.7277475 0.7283482 0.7744817 0.8090901 #>  [136,] 0.33563634 0.3840161 0.4488178 0.4551959 0.4624604 0.4678077 0.4879243 #>  [137,] 0.45511302 0.4759033 0.4824542 0.4956164 0.4964945 0.5193491 0.5228930 #>  [138,] 0.61072572 0.7768417 1.0148562 1.1061426 1.1519527 1.2779657 1.2991928 #>  [139,] 0.25249656 0.5179615 0.5690602 0.6258398 0.6368329 0.6504395 0.6848681 #>  [140,] 0.29136213 0.4199149 0.4722432 0.4838718 0.4993541 0.5198990 0.5278492 #>  [141,] 0.59332833 0.6732199 0.7042646 0.7139725 0.7488673 0.7600961 0.7606841 #>  [142,] 0.29830756 0.4586979 0.6321502 0.6453967 0.7147221 0.7502826 0.7518568 #>  [143,] 0.32265696 0.5501678 0.7740893 0.7840977 0.8151480 0.9404044 0.9499624 #>  [144,] 0.58584188 0.6260155 0.6829496 0.6960337 0.6960953 0.7013317 0.8818413 #>  [145,] 0.66195796 0.7824041 0.7952973 0.8451047 0.9056472 0.9652059 0.9660713 #>  [146,] 0.34042097 0.3620540 0.3650805 0.3866689 0.3932664 0.5652193 0.6509063 #>  [147,] 0.37812440 0.4207396 0.5048567 0.5585657 0.7257125 0.7381944 0.8042922 #>  [148,] 1.15131549 1.2810866 1.2934965 1.3266193 1.3529674 1.4043410 1.4137043 #>  [149,] 0.41282584 0.4977992 0.7693824 0.9980705 1.0102675 1.0145934 1.0682097 #>  [150,] 0.52866295 0.5867149 0.6641392 0.6792510 0.7304106 0.7656672 0.7699362 #>  [151,] 0.40339981 0.4763262 0.4985683 0.5324795 0.5410309 0.5570124 0.5877109 #>  [152,] 0.47033551 0.4818503 0.4956164 0.5322763 0.5668470 0.5893181 0.6349802 #>  [153,] 0.46430135 0.5358025 0.6709441 0.6913944 0.7758536 0.8004290 0.8112136 #>  [154,] 0.38764386 0.4185635 0.4568369 0.4957934 0.4995652 0.5007027 0.5158165 #>  [155,] 0.95132626 1.0596260 1.0636588 1.0924781 1.1062555 1.1297563 1.2338483 #>  [156,] 0.70310258 0.9450375 1.1795501 1.2652902 1.2854138 1.3593177 1.3890956 #>  [157,] 0.86231166 1.2266487 1.3335865 1.4940680 1.5259377 1.5558534 1.5812885 #>  [158,] 0.58364424 0.6790356 0.7419672 0.8101535 0.8234630 0.8276648 0.8552609 #>  [159,] 0.43952755 0.4433500 0.4615941 0.4722408 0.5391146 0.5461238 0.5672518 #>  [160,] 0.39326638 0.5681018 0.6249424 0.6318440 0.6616281 0.6658165 0.7108721 #>  [161,] 0.34941449 0.5531793 0.5605032 0.5705519 0.5733315 0.5956059 0.6229609 #>  [162,] 0.33856994 0.5103232 0.5953116 0.7013317 0.7175509 0.7364385 0.7639167 #>  [163,] 0.46386013 0.6325121 0.6683828 0.6867021 0.7029230 0.7745303 0.8249739 #>  [164,] 0.65904766 0.7346248 0.7956973 0.9505694 0.9881929 0.9967604 1.2390030 #>  [165,] 1.18359251 1.2822832 1.3210305 1.4621665 1.5112165 1.6144769 1.6443415 #>  [166,] 0.74836536 0.8377372 0.8520448 0.9920423 1.0076821 1.0208917 1.1336779 #>  [167,] 0.50852186 0.5895573 0.6287314 0.6407823 0.6706020 0.6878454 0.7033729 #>  [168,] 0.96470288 1.0222207 1.1933826 1.3420571 1.3489228 1.4749502 1.4921076 #>  [169,] 0.42846953 0.4720840 0.5362433 0.5428345 0.5462618 0.6284243 0.6535770 #>  [170,] 0.39348927 0.6560235 0.6588787 0.6692396 0.7019516 0.7065253 0.7592750 #>  [171,] 0.29806934 0.3852903 0.4231938 0.4318330 0.4486543 0.4845532 0.5141029 #>  [172,] 0.73995339 0.8164930 0.9127880 0.9419796 1.0007135 1.0039851 1.0216292 #>  [173,] 0.21749205 0.3600651 0.3996591 0.6350446 0.6518242 0.7092109 0.7316385 #>  [174,] 0.45231043 0.4672089 0.4833765 0.4866844 0.5074002 0.5244547 0.5452787 #>  [175,] 0.35864150 0.4462709 0.5867149 0.6273272 0.6378868 0.6446261 0.6568017 #>  [176,] 0.57546200 0.7370457 0.7445396 0.7643623 0.7689641 0.8943460 0.9029988 #>  [177,] 0.17323721 0.4661364 0.5539247 0.6357865 0.6568841 0.7796115 0.7975294 #>  [178,] 0.19963094 0.3237152 0.4718094 0.5257162 0.6859418 0.7044802 0.7544403 #>  [179,] 0.55016563 0.5650288 0.5891896 0.6355266 0.6366751 0.6784494 0.6832054 #>  [180,] 0.65939650 0.9469638 1.0593055 1.0755036 1.0999389 1.1730262 1.2387181 #>  [181,] 0.21543118 0.3379261 0.3995012 0.4794847 0.5578336 0.5943796 0.6097702 #>  [182,] 0.30494790 0.4343023 0.5625654 0.5783648 0.5802992 0.6437100 0.6674260 #>  [183,] 0.40960757 0.5341237 0.6162245 0.6306146 0.6342283 0.6516121 0.6648181 #>  [184,] 0.15931084 0.1952491 0.2394056 0.2878867 0.3098108 0.3199653 0.4006137 #>  [185,] 0.76584837 0.8201800 0.8318641 0.8367191 0.8591225 0.8672299 0.8679146 #>  [186,] 0.35353393 0.7586573 0.7824928 1.0091854 1.0483619 1.0730232 1.1508498 #>  [187,] 0.62101146 0.7619380 0.8153248 0.8383902 0.9165247 0.9419796 1.1093868 #>  [188,] 0.35972911 0.4062591 0.4672631 0.4717255 0.4731373 0.4736213 0.4968963 #>  [189,] 0.43559954 0.6015625 0.6705100 0.6852607 0.6932263 0.7138488 0.7336673 #>  [190,] 0.22469770 0.2365854 0.4207396 0.6003259 0.6462882 0.6541314 0.6762029 #>  [191,] 0.34042097 0.4441550 0.5184139 0.5492915 0.5625614 0.6135824 0.6318440 #>  [192,] 0.71840251 1.1027772 1.2658440 1.3531502 1.3557039 1.3598920 1.4221938 #>  [193,] 0.42989427 0.6052769 0.6140587 0.6424725 0.6437833 0.6453967 0.6614984 #>  [194,] 0.34331059 0.5955148 0.6159968 0.6629289 0.6740367 0.6931504 0.7098203 #>  [195,] 0.27754795 0.3167139 0.3985979 0.4854600 0.5152618 0.5579414 0.5668878 #>  [196,] 0.42989427 0.4779306 0.5092030 0.5244347 0.5973128 0.6234866 0.6406285 #>  [197,] 0.45931643 0.4908727 0.6349802 0.6814798 0.6966594 0.7008487 0.7056615 #>  [198,] 0.37739999 0.5882150 0.7673149 0.8102401 0.8400396 0.8776682 0.9044010 #>  [199,] 0.30151359 0.3565465 0.3861720 0.4320349 0.6823364 0.7451368 0.7549311 #>  [200,] 0.60870073 0.6781948 0.7350491 0.9689498 1.0483619 1.1174622 1.1317736 #>  [201,] 0.29437217 0.4625485 0.5163395 0.5212258 0.5438884 0.6029263 0.6869609 #>  [202,] 0.85474638 0.8837845 0.8897325 1.0173525 1.1743702 1.1799850 1.2106235 #>  [203,] 0.27242371 0.3231204 0.3363142 0.3788185 0.3822031 0.4352136 0.4395273 #>  [204,] 0.25840348 0.3636242 0.5090628 0.7229896 0.7400569 0.7554334 0.7658162 #>  [205,] 0.54279262 0.5478008 0.6213898 0.6506005 0.6963692 0.7133369 0.7912810 #>  [206,] 0.41606262 0.7434131 0.7532283 0.8367997 0.9131486 0.9168565 1.0121487 #>  [207,] 0.29427333 0.3581274 0.3952823 0.4783976 0.5566394 0.5626203 0.5725534 #>  [208,] 0.47324210 0.4930707 0.5227492 0.5572702 0.6820056 0.7081440 0.7139725 #>  [209,] 1.34908018 1.4193772 1.5965955 1.7274508 1.7318449 1.7430095 1.8020726 #>  [210,] 0.27725011 0.3366712 0.3597291 0.4421812 0.4659093 0.4788244 0.4895493 #>  [211,] 0.61264531 0.6745134 0.7444127 0.7940877 0.8000014 0.8225042 0.8598614 #>  [212,] 0.52533369 0.5366817 0.5726287 0.5789785 0.5832454 0.5844200 0.6551748 #>  [213,] 0.59318463 0.6163291 0.6416123 0.6645695 0.6691600 0.6708134 0.6836542 #>  [214,] 0.25608089 0.2645775 0.2878867 0.3234940 0.3300524 0.3570336 0.3781323 #>  [215,] 0.46693450 0.5336304 0.5708487 0.6274230 0.6344533 0.6377209 0.6457027 #>  [216,] 0.61830451 0.7231573 0.8673317 0.8691525 0.8801569 0.9260989 0.9282834 #>  [217,] 0.32414932 0.5643745 0.6386784 0.6476302 0.6648797 0.6799200 0.6842926 #>  [218,] 0.52368712 0.5849253 0.6627103 0.7011442 0.7024402 0.8092195 0.8220083 #>  [219,] 0.25553271 0.5495375 0.5728182 0.6535863 0.7314470 0.7956973 0.8056775 #>  [220,] 0.47473028 0.7042981 0.7137055 0.7679271 0.7947253 0.7969469 0.7990585 #>  [221,] 0.32437639 0.4994656 0.6357960 0.7205015 0.9201780 0.9215999 0.9404181 #>  [222,] 0.24170716 0.5704638 0.5755266 0.5783092 0.5802389 0.5963063 0.6517317 #>  [223,] 0.33588134 0.3729872 0.4259080 0.4299896 0.4884610 0.5245042 0.5304683 #>  [224,] 0.55040969 0.5554357 0.6296867 0.6717729 0.6823364 0.7376579 0.7652997 #>  [225,] 0.29535952 0.3477411 0.3543461 0.5605503 0.5754923 0.5763118 0.6085296 #>  [226,] 0.31482498 0.4031128 0.4546114 0.5202311 0.5833537 0.5867443 0.5911468 #>  [227,] 0.37160870 0.4719597 0.5665950 0.5915079 0.6852607 0.6957972 0.7116857 #>  [228,] 0.35958976 0.3997845 0.4528017 0.4890245 0.4924286 0.5287700 0.5329872 #>  [229,] 0.94139826 1.0487587 1.1635489 1.3046073 1.4278896 1.4732223 1.4776927 #>  [230,] 0.57284287 0.7383399 0.7439148 0.9037339 0.9156511 0.9525389 1.0163470 #>  [231,] 0.53352225 0.6379285 0.6653746 0.6928172 0.7550044 0.7734424 0.8092300 #>  [232,] 0.58463008 0.7075095 0.7220051 0.7256323 0.7515061 0.7835578 0.7924004 #>  [233,] 0.24281462 0.4443296 0.4466211 0.4598913 0.4745243 0.4821190 0.4995652 #>  [234,] 0.40814915 0.6923425 0.6985594 0.7029436 0.7437775 0.7608579 0.7805336 #>  [235,] 0.43203489 0.5334684 0.5642322 0.6717729 0.6861234 0.7306317 0.7395680 #>  [236,] 0.25762515 0.3158315 0.3241803 0.3638917 0.3725327 0.3917874 0.4576731 #>  [237,] 0.21621234 0.2993440 0.3241174 0.3606442 0.5280719 0.5454793 0.5641025 #>  [238,] 0.36114093 0.3684162 0.5838579 0.6859418 0.6913399 0.8031425 0.8036112 #>  [239,] 0.69192611 0.7033729 0.8433683 0.8764111 0.8907209 0.9033902 0.9415723 #>  [240,] 0.37739999 0.5045586 0.6459643 0.7834398 0.8770981 0.9181377 0.9484627 #>  [241,] 0.62245050 0.6234906 0.6423159 0.6530676 0.7255876 0.7315666 0.7799889 #>  [242,] 0.32654163 0.4281061 0.4327940 0.4718094 0.6913399 0.7450960 0.8015747 #>  [243,] 0.41987574 0.4646931 0.5061674 0.5499141 0.5528459 0.5942521 0.6232723 #>  [244,] 0.40054053 0.7786418 0.8192996 0.8594629 0.8915273 0.9508552 0.9858388 #>  [245,] 0.42657573 0.4672631 0.5004312 0.5095047 0.5202869 0.5477122 0.5559143 #>  [246,] 0.62934812 0.7108793 0.9315047 0.9876911 1.0221508 1.1121067 1.1252489 #>  [247,] 1.19532608 1.4282885 1.4968465 1.5217585 1.5652314 1.6549493 1.8111610 #>  [248,] 0.36006507 0.4900363 0.5610092 0.6500378 0.6975652 0.7439148 0.7623723 #>  [249,] 0.18269523 0.3962645 0.4145553 0.6482028 0.7276087 0.7408395 0.7814804 #>  [250,] 0.91551803 0.9878889 1.0619157 1.1555241 1.1910682 1.1929541 1.2247773 #>  [251,] 0.36799528 0.4431670 0.4499934 0.4544130 0.4574332 0.4991430 0.4994470 #>  [252,] 0.75982883 1.0666695 1.1222927 1.1840245 1.2400732 1.3075007 1.3249308 #>  [253,] 0.40444098 0.4058309 0.6220970 0.6850399 0.6995117 0.7652700 0.7699610 #>  [254,] 0.29437217 0.3978295 0.3994549 0.4303809 0.5019497 0.6040935 0.6041257 #>  [255,] 0.26100890 0.2679412 0.4827767 0.4880186 0.5107730 0.5618358 0.5806498 #>  [256,] 0.26852313 0.4146501 0.4296011 0.4431670 0.4897566 0.5259838 0.5526113 #>  [257,] 0.31063550 0.3126939 0.4355463 0.5226242 0.6371384 0.7045538 0.7316664 #>  [258,] 0.49885128 0.5742478 0.5851304 0.6019544 0.6192539 0.6225504 0.6413004 #>  [259,] 0.62433992 0.6787017 0.7413320 0.9557806 1.1018217 1.1376626 1.1487601 #>  [260,] 0.29497860 0.6163291 0.7022846 0.7371257 0.7411939 0.7441190 0.7995053 #>  [261,] 0.40699911 0.4789687 0.5131628 0.5973128 0.6040935 0.6487343 0.6614984 #>  [262,] 0.22408539 0.2714625 0.3716492 0.3841412 0.4369115 0.4479839 0.4825014 #>  [263,] 0.87805343 1.0420089 1.2569964 1.2873281 1.3577923 1.3733333 1.3845308 #>  [264,] 0.29706270 0.3412915 0.4462235 0.4514934 0.4571896 0.4736213 0.5004312 #>  [265,] 0.45455793 0.4616996 0.6133185 0.6185030 0.6357960 0.6552194 0.6643750 #>  [266,] 0.31344431 0.3148250 0.4065921 0.5260412 0.5660972 0.5665038 0.5902812 #>  [267,] 0.48431153 0.7313355 0.7419672 0.8950916 0.9263793 0.9337919 0.9824364 #>  [268,] 0.47285529 0.4818503 0.5068683 0.5228930 0.5408426 0.5987292 0.6321622 #>  [269,] 0.23919051 0.3390093 0.3709596 0.4158956 0.4551959 0.4741479 0.4941609 #>  [270,] 0.46469308 0.4965426 0.5387856 0.5878735 0.6174598 0.6419452 0.7079109 #>  [271,] 0.45591350 0.6985001 0.7108721 0.9008913 0.9015699 0.9021288 0.9443799 #>  [272,] 0.35958976 0.3881146 0.3941812 0.4509151 0.5421288 0.5728519 0.6344583 #>  [273,] 0.26615862 0.4742886 0.4751764 0.4875609 0.4975945 0.5277055 0.5968079 #>  [274,] 0.46608785 0.5170699 0.5754620 0.6201443 0.6251989 0.6273983 0.7159077 #>  [275,] 0.58296622 0.6109639 0.7214781 0.7533634 0.7627831 0.8152758 0.8957602 #>  [276,] 0.34739365 0.3907616 0.4058629 0.4409054 0.4884610 0.5294005 0.5621064 #>  [277,] 0.95151666 1.0565311 1.0924781 1.0951788 1.1320516 1.1538814 1.3222739 #>  [278,] 0.25249656 0.4880271 0.5181753 0.5715110 0.5944308 0.6773395 0.6874640 #>  [279,] 0.41979717 0.4692965 0.4926186 0.4931282 0.4959981 0.5312945 0.5703058 #>  [280,] 0.35353393 0.6337353 0.8906982 0.9996878 1.0578326 1.1542434 1.1704662 #>  [281,] 0.57843228 0.7473217 0.7608215 0.8576092 0.9133008 0.9265705 0.9267963 #>  [282,] 0.73911139 0.7509038 0.8164930 0.9897263 1.0819185 1.1331229 1.1802298 #>  [283,] 0.54971520 0.6136595 0.6196446 0.6239828 0.6476201 0.6649071 0.6701848 #>  [284,] 0.57601953 0.7643707 0.8966643 0.9608681 1.0354863 1.0856863 1.1817941 #>  [285,] 0.33322046 0.4524052 0.7894975 0.7908098 0.8417865 0.8604695 0.8608198 #>  [286,] 0.53972126 0.6525582 0.7101692 0.7615551 0.8527545 0.8833612 0.8884841 #>  [287,] 0.53962990 0.6965316 0.7234003 0.7470089 0.7582398 0.8067058 0.8114528 #>  [288,] 0.41614246 0.8925128 1.1601059 1.2330966 1.2696690 1.3817280 1.4032803 #>  [289,] 0.44778020 0.5361900 0.6334876 0.6913560 0.7352142 0.7643279 0.8323698 #>  [290,] 0.26615862 0.3654061 0.3932595 0.4184227 0.4674051 0.5481429 0.6373681 #>  [291,] 0.62782911 0.7364385 0.8027011 0.8818413 0.8928795 0.9362376 0.9505694 #>  [292,] 0.60270493 0.7413320 0.7473792 0.7859280 0.9037063 0.9905904 1.0071554 #>  [293,] 0.34386683 0.3543461 0.5477174 0.5577568 0.5919869 0.6131649 0.6184081 #>  [294,] 0.58364424 0.6336560 0.6829604 0.7272974 0.7384746 0.7615551 0.7800902 #>  [295,] 0.34728495 0.3936622 0.4392809 0.4864065 0.5416857 0.5690136 0.6384541 #>  [296,] 0.38963647 0.4377025 0.6509063 0.6658165 0.7074673 0.7199234 0.7279112 #>  [297,] 0.36114093 0.4281061 0.4952900 0.5257162 0.5678589 0.6121840 0.7143553 #>  [298,] 0.25840348 0.4698326 0.4995905 0.5459037 0.5927229 0.5940878 0.6423159 #>  [299,] 0.71731716 0.9690899 1.0124374 1.1233966 1.1353655 1.1840245 1.2133643 #>  [300,] 0.47830768 0.4935026 0.5984266 0.6607744 0.6782718 0.7138488 0.7170015 #>  [301,] 0.42794129 0.4366263 0.4722408 0.4759337 0.5468354 0.6821758 0.6882130 #>  [302,] 0.37485448 0.6070403 0.7734424 0.8788907 0.9495125 0.9800310 0.9817554 #>  [303,] 0.81561145 0.8937928 1.0999389 1.2557344 1.2921913 1.3285775 1.5434533 #>  [304,] 0.57601953 0.7470898 0.8989058 0.9359785 0.9797950 0.9905847 1.0190620 #>  [305,] 0.91636848 0.9398867 1.0835493 1.1134203 1.1184001 1.1681996 1.1730295 #>  [306,] 0.67064451 0.7104613 0.7262949 0.7566430 0.8075282 0.8452505 0.9044312 #>  [307,] 0.31189146 0.3936469 0.4206207 0.4626984 0.4901913 0.5157875 0.5235065 #>  [308,] 0.24170716 0.4186348 0.4214575 0.4842221 0.4960049 0.6517020 0.6713906 #>  [309,] 0.30147013 0.4067339 0.4296011 0.4587595 0.4778906 0.4991430 0.5087544 #>  [310,] 0.29480494 0.6456752 0.8178338 0.8420183 0.8541841 0.8568186 0.8570367 #>  [311,] 0.32590028 0.6293727 0.6975652 0.7648086 0.7681095 0.7827401 0.7974593 #>  [312,] 0.31991340 0.3853171 0.4993541 0.5196000 0.6810334 0.6819535 0.6857542 #>  [313,] 0.25517840 0.2826330 0.3927913 0.3964973 0.4395276 0.5238148 0.5508303 #>  [314,] 0.30928185 0.3535250 0.3941812 0.4890245 0.5080412 0.6133341 0.6277368 #>  [315,] 0.43843694 0.4717162 0.4728553 0.4845064 0.4863959 0.4873263 0.5092728 #>  [316,] 0.64659558 0.6627103 0.7779886 0.8324753 0.8522169 0.8622234 0.9084616 #>  [317,] 0.18747479 0.4499598 0.6421050 0.6931504 0.6975487 0.7169603 0.7230244 #>  [318,] 0.09075752 0.4528017 0.5278581 0.5483420 0.5942521 0.6133341 0.6991666 #>  [319,] 0.49416672 0.6661864 0.8754268 0.9621633 1.0059643 1.0355408 1.0508019 #>  [320,] 0.98798472 1.0000294 1.1017314 1.2814191 1.3101946 1.4291799 1.5179152 #>  [321,] 0.24710060 0.5316180 0.7209141 0.7250614 0.7591794 0.8133034 0.8651931 #>  [322,] 0.78592802 0.7971660 0.8188657 0.8721073 0.8840208 0.9099137 1.0040741 #>  [323,] 0.32835119 0.4845860 0.5974996 0.6446255 0.6721220 0.7043014 0.7070704 #>  [324,] 0.22486505 0.2501481 0.2724237 0.3952823 0.4639097 0.4848401 0.4879243 #>  [325,] 0.55095344 0.6666814 0.7291573 0.7537362 0.8190512 0.8246839 0.8350810 #>  [326,] 0.52080809 0.5616700 0.5625654 0.5804150 0.5940951 0.6266767 0.6590819 #>  [327,] 0.54241517 0.6032306 0.6083837 0.6184438 0.6796968 0.7253802 0.7477471 #>  [328,] 0.27618626 0.3964737 0.4157913 0.5125985 0.5312945 0.5497152 0.5615662 #>  [329,] 0.26922984 0.3650805 0.5492915 0.6319213 0.6350446 0.6537525 0.6616281 #>  [330,] 0.25517840 0.3096737 0.3447940 0.4737939 0.4826003 0.5253337 0.5882631 #>  [331,] 0.45583253 0.4597248 0.5200694 0.5833537 0.5989473 0.6424241 0.6659868 #>  [332,] 0.29949554 0.4834348 0.5193261 0.5502192 0.5506004 0.6614979 0.6666814 #>  [333,] 0.57722835 0.6525582 0.7071488 0.7272974 0.9243814 1.0302950 1.0317844 #>  [334,] 0.44090539 0.4431131 0.5221723 0.5730369 0.6124357 0.6285116 0.6351588 #>  [335,] 0.16260551 0.2639417 0.3710191 0.4976741 0.5081550 0.5440974 0.6359842 #>  [336,] 0.38071311 0.5358025 0.6777425 0.6917594 0.7256913 0.8152389 0.8462420 #>  [337,] 0.42438796 0.4499598 0.4517080 0.4972470 0.5056387 0.5198059 0.5234894 #>  [338,] 0.75982883 0.9033353 0.9194700 1.0149766 1.0161549 1.0428481 1.0713807 #>  [339,] 0.49767977 0.5874768 0.6634610 0.6651779 0.6877427 0.7002750 0.7404982 #>  [340,] 0.33152846 0.4800041 0.5666264 0.5787573 0.6329167 0.8262717 0.8303900 #>  [341,] 0.32670626 0.6380409 0.7456303 0.7742844 0.7829993 0.7983863 0.8213529 #>  [342,] 0.67217260 0.7299850 0.7322618 0.9069205 0.9285711 0.9736510 0.9813738 #>  [343,] 0.39551895 0.7444697 0.7733396 0.8093631 0.8453884 0.8863303 0.8935066 #>  [344,] 0.29742667 0.4077930 0.4652116 0.4722326 0.4930993 0.5136270 0.5185057 #>  [345,] 0.35352500 0.4509151 0.4717362 0.5329872 0.5452787 0.5589655 0.5690602 #>  [346,] 0.17685080 0.3721720 0.4748174 0.5313283 0.5359372 0.6265967 0.6922394 #>  [347,] 1.21633797 1.3430120 1.4099715 1.5407085 1.6016785 1.6791686 1.6972243 #>  [348,] 0.45489793 0.5103232 0.5539247 0.6278291 0.7257005 0.7554391 0.7800539 #>  [349,] 0.60662442 0.8317936 0.8608198 0.9513736 1.0106577 1.0576843 1.0694751 #>  [350,] 0.23724582 0.3441181 0.3709596 0.3744237 0.4298599 0.5565392 0.6092838 #>  [351,] 0.18747479 0.5941751 0.6159968 0.6443845 0.7236559 0.7282660 0.7483188 #>  [352,] 0.54473998 0.5902592 0.6487197 0.6541314 0.6967483 0.7322618 0.7394969 #>  [353,] 0.34129146 0.3770262 0.4986486 0.5002697 0.5054301 0.5222922 0.5230441 #>  [354,] 0.41215019 0.4723339 0.5829554 0.5891896 0.6016888 0.6225109 0.6543396 #>  [355,] 0.48132484 0.5534756 0.5558508 0.5684448 0.6456821 0.7351366 0.7934015 #>  [356,] 0.50906275 0.5157728 0.5459037 0.6311334 0.6710689 0.6712504 0.6932427 #>  [357,] 0.27903079 0.3675681 0.4486543 0.4545920 0.4716540 0.4831040 0.4899225 #>  [358,] 0.57893776 0.9183579 0.9297531 1.0660574 1.0759285 1.1135021 1.1360723 #>  [359,] 0.38017488 0.3907616 0.4259080 0.4295899 0.4505474 0.4895749 0.5155903 #>  [360,] 0.39541713 0.4300024 0.5092074 0.5202869 0.5747139 0.6004341 0.6776872 #>  [361,] 0.35057116 0.5114577 0.5715110 0.5722618 0.5787573 0.6504395 0.7603895 #>  [362,] 0.30327753 0.4265757 0.4331996 0.4521616 0.4556754 0.4687541 0.4793629 #>  [363,] 0.30494790 0.4361761 0.5208081 0.5730296 0.6158611 0.6312287 0.6396792 #>  [364,] 0.39348927 0.5895573 0.6195217 0.6345537 0.6919261 0.7282892 0.7916645 #>  [365,] 0.92787703 0.9718710 0.9902623 1.0061168 1.0124508 1.0666473 1.0801703 #>  [366,] 0.51043465 0.6446261 0.7498608 0.8654094 0.8728209 0.8864978 0.9682177 #>  [367,] 0.82888368 0.8937928 1.2949061 1.3307193 1.3706311 1.4255935 1.4960363 #>  [368,] 0.29487322 0.3686881 0.3850040 0.4737939 0.5468354 0.6433608 0.6960953 #>  [369,] 0.25572994 0.4384709 0.4615934 0.4706614 0.4878336 0.4892179 0.4960023 #>  [370,] 0.50625669 0.6155353 0.6951077 0.7012650 0.7081440 0.8153248 0.8660427 #>  [371,] 0.45931643 0.4604748 0.5575688 0.6350742 0.6659486 0.6839461 0.6850399 #>  [372,] 0.68721964 0.7799218 0.8071829 0.8271915 0.8673533 0.8725490 0.8826856 #>  [373,] 0.65763563 0.7445396 0.7589982 0.8034320 0.8611640 0.8914424 0.9353625 #>  [374,] 0.38132246 0.4448987 0.7195186 0.7268184 0.7372540 0.8703340 0.9048954 #>  [375,] 0.56871268 0.5992154 0.6489189 0.7509731 0.7659908 0.7757727 0.7981389 #>  [376,] 1.06673805 1.0906882 1.1842827 1.2036959 1.2306477 1.2566835 1.2917799 #>  [377,] 0.38132246 0.4951694 0.5191811 0.5386177 0.5501985 0.5558508 0.6811017 #>  [378,] 0.55246352 0.5868384 0.8367997 0.8728464 0.8876986 0.9881929 1.0914276 #>  [379,] 0.39193104 0.4476977 0.5804190 0.5867947 0.6036790 0.6151071 0.6338563 #>  [380,] 0.31991340 0.4601354 0.4738983 0.5278492 0.6036426 0.6617342 0.7031576 #>  [381,] 0.40833498 0.6111794 0.6956074 0.8364567 0.8374009 0.8556522 0.8699215 #>  [382,] 0.41175318 0.4118637 0.4792210 0.6598916 0.6984255 0.7024402 0.7230244 #>  [383,] 0.51780332 0.5236871 0.5606087 0.5718235 0.6559446 0.6562479 0.6724257 #>  [384,] 0.71154600 0.8453266 0.9449416 0.9707233 1.0208917 1.0382890 1.0521551 #>  [385,] 1.08357448 1.2131028 1.2458928 1.2721439 1.3943035 1.4003548 1.4104426 #>  [386,] 0.56662642 0.7495416 0.7582271 0.7586573 0.8077391 0.8405836 0.8700717 #>  [387,] 0.62617363 0.6948994 0.8082249 0.8783860 0.9744924 1.1017314 1.1611414 #>  [388,] 0.48407469 0.4893943 0.5279839 0.5673982 0.5926892 0.5988251 0.6106336 #>  [389,] 0.62200357 0.6292992 0.7050691 0.7147167 0.7200208 0.7303440 0.7441891 #>  [390,] 0.39639976 0.4313812 0.4355995 0.5440646 0.6164621 0.6293727 0.6732009 #>  [391,] 0.86231166 0.8882730 1.0931904 1.1103062 1.1146495 1.1736895 1.2531493 #>  [392,] 0.89080181 1.1037069 1.1129382 1.1342069 1.1372136 1.1621123 1.1635489 #>  [393,] 0.34656761 0.4072696 0.4484318 0.5134845 0.5491084 0.5586767 0.5857891 #>  [394,] 0.39360146 0.4243653 0.4622426 0.5172113 0.5477861 0.5501307 0.5528646 #>  [395,] 0.09075752 0.5287700 0.5499141 0.5767628 0.5834501 0.6277368 0.6405316 #>  [396,] 0.47619339 0.4866291 0.5210266 0.5461780 0.5615319 0.5624938 0.6234452 #>  [397,] 0.38207543 0.4438640 0.4599030 0.4694917 0.4932264 0.5141029 0.5268075 #>  [398,] 0.61830451 0.6367244 0.7071859 0.8500741 0.9252634 0.9736517 1.0612055 #>  [399,] 0.27618626 0.4206750 0.4692380 0.4692965 0.4891681 0.5443034 0.6020968 #>  [400,] 0.47915311 0.4827767 0.5536858 0.5645943 0.5922005 0.6494189 0.6636914 #>  [401,] 0.50507909 0.5172113 0.5751281 0.6229609 0.7013557 0.7019516 0.7172642 #>  [402,] 0.42493734 0.5999377 0.6221267 0.6312287 0.6437100 0.6796016 0.6972458 #>  [403,] 0.60270493 0.6243399 0.6963692 0.7386465 0.7914199 0.9976419 1.0211380 #>  [404,] 0.44572149 0.5163496 0.5450259 0.5753633 0.6057782 0.6176596 0.6373681 #>  [405,] 0.26922984 0.3620540 0.3996591 0.4422823 0.4441550 0.6249424 0.6358601 #>  [406,] 0.49894225 0.5730282 0.5780151 0.6112712 0.6416123 0.6648797 0.6968761 #>  [407,] 0.79407589 0.8116882 0.8145849 0.8680510 0.8950916 0.9274303 0.9512822 #>  [408,] 0.61264531 0.6261805 0.6513980 0.7931282 0.8915273 0.9275861 0.9527394 #>  [409,] 0.30272426 0.3968148 0.5332454 0.5762302 0.5912861 0.6072530 0.6563952 #>  [410,] 0.46694611 0.5093437 0.5408561 0.5572402 0.6122226 0.6695602 0.7171444 #>  [411,] 0.48258154 0.5784323 0.6107257 0.8628320 0.8856824 0.8926407 0.9000744 #>  [412,] 0.47868982 0.5070251 0.5165095 0.5473172 0.5667884 0.5748124 0.6313198 #>  [413,] 0.63291671 0.7393154 0.7416918 0.7509386 0.7795827 0.8687010 0.9335904 #>  [414,] 0.47662085 0.5014698 0.5508303 0.5739475 0.5759546 0.5893357 0.6211322 #>  [415,] 0.32126302 0.3861720 0.5272111 0.6386311 0.7118914 0.7580417 0.7622745 #>  [416,] 0.50726146 0.5703058 0.6060701 0.6232000 0.7004988 0.7935397 0.7992147 #>  [417,] 0.66532399 0.7104651 1.1407019 1.2037607 1.3075293 1.4682752 1.4791453 #>  [418,] 0.76504284 0.9069205 0.9847250 1.1953888 1.1977480 1.2952007 1.3104085 #>  [419,] 0.33664139 0.3418350 0.3465680 0.5665038 0.5929710 0.6242412 0.6314760 #>  [420,] 0.27903079 0.3231145 0.3897399 0.3964814 0.4318330 0.4662512 0.4762272 #>  [421,] 0.52384768 0.5410964 0.5618003 0.8538552 0.8587818 0.8827829 0.8840208 #>  [422,] 0.52287463 0.5320831 0.5589415 0.6120780 0.6320823 0.6442031 0.6593485 #>  [423,] 0.35214157 0.6744167 0.7376024 0.7409786 0.7553055 0.7584850 0.8868430 #>  [424,] 0.40054053 0.7225323 0.7597697 0.7711735 0.8173331 0.8577051 0.8582896 #>  [425,] 0.34042164 0.3744132 0.4832381 0.4841111 0.4929409 0.5200370 0.5248840 #>  [426,] 0.27150028 0.3488637 0.4145553 0.5658295 0.5862933 0.5897515 0.6149135 #>  [427,] 0.73502782 0.8424666 0.8692860 0.8948861 0.9008913 0.9624257 0.9660713 #>  [428,] 0.49649449 0.6456369 0.6617342 0.6703250 0.6908654 0.6922282 0.6985001 #>  [429,] 0.59288104 0.5940896 0.6164331 0.6518242 0.7026752 0.7673175 0.7692196 #>  [430,] 0.45240520 0.5416623 0.8213939 0.8317936 0.9878889 1.0281184 1.0673329 #>  [431,] 0.51801140 0.6939295 0.7043581 0.7186608 0.7248751 0.7486610 0.7510087 #>  [432,] 0.25724294 0.5877218 0.6073844 0.6692396 0.6946004 0.7255876 0.7683285 #>  [433,] 0.42339999 0.6111794 0.6453187 0.7680043 0.8308617 0.8387542 0.8608140 #>  [434,] 0.32197602 0.5152366 0.6448542 0.8167391 0.8696843 0.8830477 0.9067282 #>  [435,] 0.65088126 0.7215428 0.7650428 0.7822385 1.0227398 1.0578196 1.0722036 #>  [436,] 0.40253157 0.5742478 0.5747369 0.5921829 0.5929066 0.5948233 0.6123440 #>  [437,] 0.50519820 0.5918857 0.7675121 0.7911945 0.8214948 0.8265080 0.8308650 #>  [438,] 0.37812440 0.6947111 0.7677498 0.7913768 0.8892956 0.9062640 0.9294032 #>  [439,] 0.65164779 0.6552403 0.7701238 0.8453884 0.9062761 0.9570312 0.9747438 #>  [440,] 0.80702470 0.8169074 0.8357116 0.9404044 1.0198618 1.0756218 1.0854184 #>  [441,] 0.38657164 0.4815125 0.5753633 0.6003125 0.6122335 0.6719481 0.6728083 #>  [442,] 1.29164510 1.3261385 1.3490802 1.3666182 1.4363045 1.4691627 1.5372303 #>  [443,] 0.73578971 0.7598990 0.7612625 0.9623327 1.0142475 1.0460588 1.0630082 #>  [444,] 0.29641761 0.3985979 0.4445684 0.4563838 0.4633791 0.4675760 0.5214787 #>  [445,] 0.71154600 0.7163775 0.7756347 0.7843264 0.8363665 0.8377372 0.8543651 #>  [446,] 0.60253411 0.6186885 0.6626907 0.7645069 0.7830388 0.8013295 0.8113712 #>  [447,] 0.27923915 0.3239551 0.5635808 0.5912645 0.6029793 0.6170569 0.6604358 #>  [448,] 0.41901986 0.4776748 0.5362270 0.5890515 0.6241860 0.6287314 0.6614193 #>  [449,] 0.51043465 0.6378868 0.6844488 0.7304106 0.8062977 0.8420109 0.8650467 #>  [450,] 0.40619867 0.6112851 0.7844504 0.8604826 0.8977082 0.9707835 0.9758967 #>  [451,] 0.34739365 0.3729872 0.4505474 0.5221723 0.5448777 0.5698245 0.5786389 #>  [452,] 0.32371525 0.3265416 0.4253115 0.5678589 0.7778638 0.8251673 0.8467096 #>  [453,] 0.29092908 0.4501258 0.4597248 0.4769323 0.5148844 0.5658295 0.5902812 #>  [454,] 0.60870073 0.7857038 0.8351568 0.8387542 0.8674509 0.8787068 0.9775433 #>  [455,] 0.31249920 0.5053936 0.6177306 0.6374266 0.6419452 0.6465645 0.6470696 #>  [456,] 0.45638380 0.5012166 0.5211229 0.5579414 0.5759546 0.6224505 0.6372769 #>  [457,] 0.81690742 1.0634376 1.0744012 1.0783776 1.0813980 1.3169772 1.4224194 #>  [458,] 0.28324315 0.3792936 0.4842221 0.5477892 0.5478889 0.5573048 0.5783092 #>  [459,] 0.36841623 0.5709212 0.6121840 0.6188667 0.7006877 0.7892973 0.7913364 #>  [460,] 0.18488109 0.2262105 0.2840894 0.6916095 0.7129461 0.7518935 0.8009857 #>  [461,] 0.90087995 0.9309915 0.9710328 0.9724100 0.9963563 1.0651372 1.1117825 #>  [462,] 0.32569264 0.3865716 0.4829181 0.4834348 0.6400674 0.7109176 0.7388200 #>  [463,] 0.59813516 0.9623327 0.9708429 1.0763402 1.0812975 1.1061192 1.1289119 #>  [464,] 0.34422354 0.4824492 0.5053825 0.5134845 0.5165777 0.5169799 0.5298680 #>  [465,] 0.55002404 0.6706445 0.7705407 1.0082899 1.0630987 1.0691237 1.0905997 #>  [466,] 0.34656761 0.4433500 0.5014698 0.5169799 0.5463979 0.5687171 0.5944777 #>  [467,] 0.28263298 0.3447940 0.5131628 0.5317184 0.5366817 0.5391146 0.5491396 #>  [468,] 0.15024199 0.4598550 0.5815951 0.6025341 0.7689899 0.7723267 0.8299060 #>  [469,] 0.32265696 0.7775516 0.7883617 0.8882730 0.9605115 1.0148505 1.0651135 #>  [470,] 0.41614246 0.8911159 0.9796114 1.0124756 1.2833602 1.3203828 1.3802202 #>  [471,] 0.84532662 0.8520448 0.8619688 1.3281892 1.3796872 1.4145800 1.4214974 #>  [472,] 0.40124961 0.4128258 0.8358272 0.9031245 0.9774214 0.9774716 1.0215630 #>  [473,] 0.25321508 0.3463115 0.5145955 0.5362270 0.6054614 0.6268476 0.6407823 #>  [474,] 0.40586288 0.4695195 0.4786898 0.4895749 0.5358718 0.5463532 0.5538463 #>  [475,] 0.41948864 0.4346783 0.4561707 0.4897407 0.5347712 0.5572402 0.5646314 #>  [476,] 0.78636926 0.7914199 0.9333529 0.9345249 0.9736255 1.0227263 1.0470798 #>  [477,] 0.30829590 0.5705076 0.6373044 0.6609939 0.6723986 0.6885135 0.6955580 #>  [478,] 0.64041487 0.6570632 0.7108793 0.7276876 0.7354579 0.7976868 0.8171852 #>  [479,] 0.38446054 0.5525724 0.5827285 0.6353309 0.6695602 0.6996775 0.7035251 #>  [480,] 0.37656343 0.4130709 0.4202689 0.4416979 0.5007377 0.5321106 0.5399201 #>  [481,] 0.39807485 0.4035651 0.5268075 0.5287349 0.5671997 0.5827491 0.5953511 #>  [482,] 0.24710060 0.5583914 0.6386167 0.7903163 0.8227805 0.8634246 0.8639151 #>  [483,] 0.58555390 0.7377603 1.0152505 1.0557959 1.1027772 1.2792478 1.2979495 #>  [484,] 0.58474341 0.6645357 0.7518935 0.7721032 0.8511340 0.8956124 0.9012313 #>  [485,] 0.68865927 0.8576092 0.8633382 0.8838559 0.9000744 0.9323178 1.0175072 #>  [486,] 0.20079894 0.2442401 0.3356363 0.4136393 0.4315356 0.4941609 0.5056387 #>  [487,] 0.52783889 0.5361900 0.5730282 0.6060701 0.6975436 0.7022846 0.7143230 #>  [488,] 0.32333139 0.5176067 0.5348271 0.5552808 0.5569956 0.5805692 0.5839408 #>  [489,] 0.62435746 0.6696152 0.6867021 0.7327772 0.7401971 0.7486610 0.7722540 #>  [490,] 0.18251718 0.3377949 0.3895660 0.4416979 0.4677307 0.4883844 0.5397332 #>  [491,] 0.85418410 0.8578227 0.9449904 1.0660574 1.1010332 1.1423922 1.1728920 #>  [492,] 0.94139826 1.0843239 1.1129382 1.4032715 1.5715043 1.5788657 1.6056031 #>  [493,] 0.58671410 0.9281683 0.9473302 1.1538814 1.3234400 1.3301593 1.3439219 #>  [494,] 0.21749205 0.4422823 0.4900363 0.6319213 0.7648086 0.7722771 0.7978335 #>  [495,] 0.41175318 0.6237052 0.6338111 0.6650679 0.6891753 0.7461620 0.7489930 #>  [496,] 0.62739825 0.7163775 0.7422253 0.7513439 0.7689641 0.8129710 0.8171142 #>  [497,] 0.59813516 0.7598990 0.9207075 0.9267003 0.9594198 0.9853066 0.9971105 #>  [498,] 0.24424010 0.3125181 0.3567279 0.4062591 0.5095047 0.5133382 0.5134758 #>  [499,] 0.31249920 0.4185635 0.4443296 0.4553951 0.5061674 0.5387856 0.6109679 #>  [500,] 0.50845022 0.6091323 0.7104613 0.7705407 0.8145954 0.8720655 0.9243237 #>  [501,] 0.63960160 0.6396792 0.6474570 0.6829990 0.6880738 0.6892113 0.7166397 #>  [502,] 0.29706270 0.3614895 0.4003886 0.4295899 0.4345220 0.5002697 0.5105209 #>  [503,] 0.25293695 0.3016752 0.4558325 0.5080177 0.5673184 0.6240415 0.6605948 #>  [504,] 1.10853933 1.1554165 1.2948213 1.3408767 1.3827087 1.3861428 1.4455792 #>  [505,] 0.25437647 0.2927667 0.3620051 0.3715453 0.3852903 0.4144184 0.4662512 #>  [506,] 0.85474638 1.2978171 1.3208939 1.3518600 1.5172626 1.6313288 1.7213937 #>  [507,] 0.27622199 0.3710191 0.3994549 0.5356303 0.5438884 0.5490011 0.5497566 #>  [508,] 0.50455858 0.7029436 0.7824828 0.7947928 0.8400396 0.9214408 0.9470390 #>  [509,] 0.32747116 0.4092305 0.4407789 0.4571716 0.4639577 0.5219028 0.5360608 #>  [510,] 0.49766071 0.6330187 0.6556549 0.6970764 0.7142203 0.7217351 0.7258283 #>  [511,] 0.45660981 0.4988513 0.5012166 0.5152618 0.5238148 0.5672518 0.6342816 #>  [512,] 0.29136213 0.3723822 0.4601354 0.4703355 0.5196000 0.5410309 0.5970642 #>  [513,] 0.11625434 0.3932595 0.3954171 0.4714218 0.4751764 0.6161547 0.6718740 #>  [514,] 0.37411903 0.4821322 0.5376713 0.6419147 0.6607744 0.7632523 0.8828920 #>  [515,] 0.44156281 0.4692479 0.4873263 0.4930993 0.4994755 0.5087544 0.5312231 #>  [516,] 0.43773109 0.5601896 0.5989473 0.6149135 0.6787057 0.7137055 0.7540130 #>  [517,] 0.57296979 0.7456303 0.7457126 0.8323544 0.8388748 0.8654760 0.8941008 #>  [518,] 0.40351002 0.4165228 0.4346783 0.4952333 0.5052427 0.5071780 0.5096598 #>  [519,] 0.88210045 0.9470390 1.0645296 1.1718323 1.1828732 1.2077045 1.2426627 #>  [520,] 0.94220824 0.9469638 1.0490164 1.1900008 1.2916522 1.4017684 1.4362171 #>  [521,] 0.46229938 0.4698326 0.5214787 0.5580324 0.6234906 0.6351588 0.6663498 #>  [522,] 0.42588579 0.4583362 0.4918296 0.5249383 0.5537995 0.5634157 0.5665978 #>  [523,] 0.55368577 0.5554357 0.6633201 0.8079788 0.8539935 0.8628548 0.9640341 #>  [524,] 0.58471808 0.6552403 0.7991714 0.8063197 0.8249438 0.8740551 0.9493081 #>  [525,] 0.78445041 0.9885783 1.0926542 1.1074259 1.1078321 1.1982889 1.2005433 #>  [526,] 0.51604253 0.5415698 0.6030201 0.6096707 0.6291590 0.6544480 0.6551570 #>  [527,] 0.42355615 0.5259329 0.6303151 0.6432289 0.6457249 0.6494189 0.6535115 #>  [528,] 0.39639976 0.5464645 0.5968053 0.6015625 0.6068044 0.6085296 0.6387620 #>  [529,] 0.42339999 0.6547238 0.8649304 0.8699215 0.9180627 0.9323845 0.9377334 #>  [530,] 0.19624274 0.2252148 0.2262105 0.6037831 0.6921547 0.7692196 0.8090901 #>  [531,] 0.32512205 0.4094906 0.5105231 0.5529043 0.6188667 0.6338111 0.6489316 #>  [532,] 1.89274989 2.1167507 2.1834239 2.2301011 2.2838603 2.2979766 2.4493742 #>  [533,] 0.33440818 0.3980748 0.4006137 0.4492341 0.4503551 0.4710869 0.4821190 #>  [534,] 0.61868847 0.6261805 0.6800460 0.6833244 0.7377603 0.7444127 0.8273700 #>  [535,] 0.38446054 0.5938785 0.6243575 0.6325121 0.6604424 0.6618289 0.7186608 #>  [536,] 0.29535952 0.3438668 0.4249373 0.4836221 0.5061382 0.6674260 0.6710112 #>  [537,] 0.33856994 0.5595461 0.6260155 0.6301612 0.6523332 0.6885135 0.7316048 #>  [538,] 0.52783889 0.6232000 0.6913560 0.6947111 0.7257125 0.8053845 0.8458279 #>  [539,] 0.28947462 0.2983813 0.3404216 0.4582335 0.4757734 0.4862774 0.5092610 #>  [540,] 0.35260553 0.4298599 0.4556171 0.4913172 0.5125810 0.5822028 0.6003259 #>  [541,] 0.34656800 0.3746857 0.3910770 0.4840747 0.5174326 0.5228746 0.6206470 #>  [542,] 0.38276164 0.5461780 0.6630750 0.7049516 0.7374477 0.7434731 0.7559854 #>  [543,] 0.38309594 0.5583914 0.5899931 0.5956059 0.6202218 0.6966594 0.7033895 #>  [544,] 0.94598651 1.0593055 1.3424114 1.4032803 1.4517825 1.5434533 1.5738431 #>  [545,] 0.50657334 0.5294017 0.6052769 0.7316048 0.7318655 0.7414538 0.7851561 #>  [546,] 0.37666477 0.7733396 0.8908018 0.9590856 1.0434959 1.1746620 1.2521005 #>  [547,] 0.29497860 0.6364174 0.6853487 0.6998580 0.7062544 0.7151213 0.7195300 #>  [548,] 0.53592772 0.5415698 0.5587035 0.6043865 0.6307677 0.6335693 0.6736747 #>  [549,] 0.34888761 0.5827481 0.6684704 0.6713906 0.6718170 0.6747370 0.6785940 #>  [550,] 0.38469077 0.4706614 0.4853470 0.5070251 0.6024693 0.6123890 0.6146831 #>  [551,] 0.39652533 0.4559690 0.6016286 0.6625886 0.6788592 0.7719098 0.8039212 #>  [552,] 1.05343380 1.0974009 1.1900008 1.2024121 1.2055753 1.2387181 1.3355732 #>  [553,] 0.39193104 0.5843510 0.6720739 0.6971248 0.7030602 0.7062048 0.7250714 #>  [554,] 0.58617524 0.6793400 0.7030658 0.7071488 0.7800902 0.7870862 0.8045173 #>  [555,] 1.06912373 1.1240301 1.2247377 1.2777028 1.4025237 1.4289926 1.6676851 #>  [556,] 0.32670626 0.5575299 0.6145466 0.6455588 0.6604424 0.6625886 0.7156910 #>  [557,] 0.52940048 0.5358718 0.5730369 0.7316181 0.7319334 0.7633318 0.8277183 #>  [558,] 0.52902873 0.6699131 0.7653878 0.8627746 0.9173327 0.9444796 0.9687932 #>  [559,] 0.38276164 0.5778488 0.6273600 0.7026752 0.7227734 0.7250845 0.7773609 #>  [560,] 0.29830756 0.6052979 0.7266263 0.7515047 0.8093824 0.8259159 0.8321857 #>  [561,] 0.32777646 0.4929409 0.5637588 0.5747369 0.6164621 0.6186854 0.6225504 #>  [562,] 0.70804964 0.7429993 0.7937274 0.8039212 0.8100583 0.8160329 0.8720436 #>  [563,] 0.28842598 0.4793629 0.5040606 0.5114998 0.5359372 0.5747139 0.5983260 #>  [564,] 0.64076813 0.6692535 0.7395680 0.7516331 0.7890365 0.7953891 0.8159634 #>  [565,] 0.72506141 0.8243293 0.8678105 0.8787270 0.8948861 0.9005322 0.9021288 #>  [566,] 0.67896485 0.6885693 0.7746648 0.7800627 0.8015410 0.8304228 0.8696843 #>  [567,] 0.28382142 0.5089744 0.6286071 0.6939295 0.7031933 0.7727167 0.8167256 #>  [568,] 0.25437647 0.2980693 0.4063836 0.4096076 0.4745243 0.5065231 0.5196887 #>  [569,] 0.42846953 0.4362450 0.6473201 0.6505891 0.6626376 0.7285785 0.7454400 #>  [570,] 1.04982503 1.0760434 1.2054817 1.2140841 1.2202996 1.2226402 1.2367154 #>  [571,] 0.33206162 0.4094906 0.4469215 0.5709212 0.5803678 0.6747091 0.7002495 #>  [572,] 0.51933190 0.7256323 0.7272930 0.7532548 0.7605731 0.7776900 0.7795106 #>  [573,] 0.18269523 0.2715003 0.4244203 0.5102029 0.6976400 0.7073398 0.7110781 #>  [574,] 0.28549037 0.3686881 0.4055069 0.4307296 0.4759337 0.4826003 0.5709455 #>  [575,] 0.40170648 0.4344496 0.4757893 0.4883844 0.4918296 0.5030447 0.5216108 #>  [576,] 0.46195758 0.5339722 0.6037831 0.6164331 0.6916095 0.7081045 0.7147167 #>  [577,] 0.38469603 0.4121502 0.4191640 0.5200565 0.6086968 0.6115290 0.6228382 #>  [578,] 0.34331059 0.4741479 0.5335057 0.5852682 0.6322754 0.6421050 0.6443845 #>  [579,] 0.29638940 0.4174486 0.4384369 0.4521616 0.5040606 0.5733315 0.5914806 #>  [580,] 0.30447523 0.3681272 0.3707896 0.4029665 0.4626984 0.5188183 0.5351247 #>  [581,] 0.29480494 0.5295195 0.6473201 0.7365757 0.7556938 0.8045789 0.8464811 #>  [582,] 0.36148952 0.3801749 0.4462235 0.5222922 0.5280719 0.5297030 0.5342057 #>  [583,] 0.40055743 0.6244582 0.6437633 0.6713553 0.6802170 0.7922018 0.8002820 #>  [584,] 0.35214157 0.5249030 0.6568017 0.7149898 0.7364897 0.7485421 0.7833673 #>  [585,] 1.21786081 1.3534794 1.4117143 1.4828681 1.4958995 1.5458449 1.5788657 #>  [586,] 0.89264075 0.9267963 1.1542533 1.2081834 1.2781689 1.3094470 1.3702972 #>  [587,] 0.57139727 0.7649635 0.8042922 0.8453471 0.8884964 0.9059576 0.9384047 #>  [588,] 0.34151679 0.4165228 0.4303809 0.4625485 0.4897407 0.4975381 0.5109671 #>  [589,] 0.39871010 0.4491032 0.4897566 0.5146423 0.5424332 0.5501079 0.5562295 #>  [590,] 0.34631148 0.4094435 0.4126186 0.4514489 0.5025199 0.5296719 0.5665968 #>  [591,] 0.46430135 0.6324190 0.6777425 0.7323249 0.7742980 0.9233935 0.9456031 #>  [592,] 0.37981341 0.3822031 0.4268343 0.4639097 0.4672089 0.4796302 0.5251177 #>  [593,] 0.47473028 0.6626376 0.7803677 0.8219894 0.8364567 0.8375121 0.8469636 #>  [594,] 0.33152846 0.3505712 0.5533512 0.6556549 0.6958099 0.7582271 0.8014440 #>  [595,] 0.34515669 0.4863279 0.6250467 0.7566430 0.7903481 0.8670990 0.8720655 #>  [596,] 0.44403180 0.4866844 0.5092030 0.5320432 0.5424335 0.5589655 0.5720963 #>  [597,] 0.75322832 0.9043502 0.9460691 1.0020021 1.1099066 1.1639120 1.2308674 #>  [598,] 0.33667124 0.4686958 0.4717255 0.5326891 0.5782917 0.5803678 0.5940320 #>  [599,] 0.20796788 0.3809304 0.3958160 0.4003754 0.4254499 0.5555477 0.6292992 #>  [600,] 0.41744863 0.5314887 0.5477861 0.5531793 0.5717468 0.5919869 0.6069354 #>  [601,] 0.29986334 0.4958302 0.5080177 0.5794040 0.6209874 0.6634610 0.6648930 #>  [602,] 0.55752992 0.7457126 0.7694596 0.7742844 0.7879930 0.7928196 0.8269810 #>  [603,] 0.46229938 0.4633791 0.5211229 0.5570472 0.5572776 0.5927229 0.6073844 #>  [604,] 0.28395603 0.3935242 0.4757734 0.5065299 0.5248840 0.5380853 0.5562295 #>  [605,] 0.41725810 0.4362450 0.4760809 0.5432098 0.5462618 0.6119345 0.6917320 #>  [606,] 0.89251280 1.0124756 1.1614536 1.2665426 1.2768694 1.3285354 1.3411520 #>  [607,] 0.34888761 0.4031128 0.4948758 0.5045666 0.6183536 0.6414350 0.6432517 #>  [608,] 0.55701245 0.5741660 0.6877427 0.7245304 0.7272930 0.7725411 0.7960386 #>  [609,] 0.83106360 0.9459865 0.9930443 1.0193006 1.1407019 1.1730262 1.1787265 #>  [610,] 0.24464772 0.3233314 0.4188505 0.5128993 0.5586767 0.5588502 0.5634024 #>  [611,] 0.41799061 0.5882150 0.6605948 0.7042981 0.7578560 0.7831449 0.8344066 #>  [612,] 0.28547710 0.3403622 0.3953759 0.5051142 0.5093551 0.5459667 0.5624938 #>  [613,] 1.06892743 1.0813751 1.1333799 1.1420967 1.2447263 1.3471222 1.4259997 #>  [614,] 0.28382142 0.7206791 0.7472548 0.7637360 0.7673328 0.8379414 0.8411853 #>  [615,] 0.48287763 0.5212258 0.6150916 0.6291220 0.6437633 0.6770483 0.7019963 #>  [616,] 0.65472376 0.8608140 0.8821868 1.0109766 1.1359437 1.1925002 1.2077954 #>  [617,] 0.23958104 0.3346062 0.3777820 0.4499775 0.4823018 0.5352753 0.5719060 #>  [618,] 0.17612871 0.2148265 0.5386177 0.6456821 0.6879252 0.7268184 0.8004969 #>  [619,] 0.99692692 1.2388628 1.3092284 1.3285354 1.3354769 1.3398630 1.4457077 #>  [620,] 0.48056186 0.5729698 0.8299798 0.8718233 0.9360361 0.9446721 0.9488705 #>  [621,] 1.29165220 1.4415220 1.5108897 1.5659330 1.5881922 1.6048734 1.6872428 #>  [622,] 0.22598146 0.4935026 0.5376713 0.6705100 0.8063197 0.8112136 0.9015424 #>  [623,] 0.74737918 1.0040741 1.1177160 1.1609090 1.1792714 1.1925766 1.2184433 #>  [624,] 0.40619867 0.4472022 0.6347231 0.7368288 0.8337984 0.8464811 0.8672403 #>  [625,] 0.23658542 0.3875394 0.4188503 0.4913172 0.5447400 0.5585657 0.6661773 #>  [626,] 0.52902873 0.6650679 0.7158669 0.7380306 0.7526476 0.7567008 0.7607292 #>  [627,] 0.44489875 0.6811017 0.8070247 0.8277183 0.8778171 0.8782915 0.9512749 #>  [628,] 0.64485424 0.7126072 0.7744817 0.8161643 0.8303900 0.9002531 0.9037324 #>  [629,] 0.41842271 0.4457215 0.4908177 0.5922683 0.6150004 0.6161547 0.6302357 #>  [630,] 0.56209478 0.6069422 0.6639672 0.7035251 0.7172831 0.7621614 0.7715675 #>  [631,] 0.27923915 0.3936015 0.4280097 0.4754310 0.4891776 0.5152744 0.5208445 #>  [632,] 0.60467187 1.0190620 1.0224524 1.1825147 1.1965885 1.2447263 1.2743411 #>  [633,] 0.27858501 0.5616700 0.6503599 0.7220051 0.7306317 0.7391114 0.7481254 #>  [634,] 0.37440407 0.4770407 0.4866291 0.5093551 0.5104644 0.5627299 0.6516121 #>  [635,] 0.54979344 0.6009072 0.6293481 0.6570632 0.7584288 0.7987896 0.8029673 #>  [636,] 0.23155439 0.2402523 0.3014701 0.3746087 0.4401138 0.4415628 0.4652116 #>  [637,] 0.24025234 0.3369376 0.3555455 0.3638917 0.3880860 0.4128456 0.4544130 #>  [638,] 0.51933190 0.5679477 0.6861234 0.7215182 0.7835578 0.8092559 0.8808280 #>  [639,] 0.36352154 0.3732542 0.3841412 0.4261778 0.5079060 0.5105231 0.5477892 #>  [640,] 0.73145021 0.7637360 0.7818534 0.8429410 0.9148231 1.0039550 1.0707036 #>  [641,] 0.43072957 0.4373514 0.5014779 0.5065733 0.5643745 0.6424725 0.6571289 #>  [642,] 0.56209478 0.8561198 0.8634843 0.9031697 0.9429896 0.9575570 0.9618674 #>  [643,] 1.04964063 1.5871266 1.5950358 1.6449316 1.6704406 1.6720113 1.7404297 #>  [644,] 0.20079894 0.3567279 0.4488178 0.4527273 0.5001496 0.5198059 0.5335057 #>  [645,] 0.35244490 0.3715453 0.3801928 0.3971239 0.4114354 0.4157378 0.4845532 #>  [646,] 0.36018255 0.4191640 0.4195367 0.4732421 0.5380614 0.5933283 0.6506194 #>  [647,] 0.95982098 1.0684276 1.1201516 1.3117005 1.3131658 1.3420835 1.4022046 #>  [648,] 0.34886370 0.4083350 0.5102029 0.5601896 0.6482028 0.6844488 0.7105293 #>  [649,] 0.55016782 0.5575542 0.7775516 0.8357116 0.9512749 1.0743891 1.0783776 #>  [650,] 1.41319386 1.5619852 1.6914123 1.7591232 1.8860660 1.9086458 1.9343489 #>  [651,] 0.18251718 0.2659956 0.4202689 0.4447863 0.5030447 0.5052427 0.5250625 #>  [652,] 0.25293695 0.2998633 0.4224584 0.5393995 0.6206470 0.6330187 0.6468010 #>  [653,] 0.40444098 0.6208890 0.6239366 0.6684704 0.6923425 0.7084811 0.7092158 #>  [654,] 0.29688540 0.3936622 0.4404061 0.4849922 0.5829662 0.5889453 0.6052029 #>  [655,] 0.16260551 0.2762220 0.2792282 0.4195950 0.4395273 0.6016888 0.6041257 #>  [656,] 0.53962990 0.5889296 0.7359446 0.7749280 0.7917527 0.8227452 0.8434048 #>  [657,] 0.65939650 0.8156115 0.8288837 0.9422082 1.1423922 1.3706934 1.4180114 #>  [658,] 0.33588134 0.4821372 0.5067899 0.5155903 0.5188183 0.5261215 0.5698245 #>  [659,] 0.43928087 0.5210203 0.5250625 0.5279839 0.5294711 0.5398385 0.5696936 #>  [660,] 0.74847105 0.7517489 1.1678677 1.4124369 1.4403795 1.4538914 1.4554161 #>  [661,] 0.46608785 0.4983295 0.6559302 0.6744167 0.6906516 0.6947648 0.6967573 #>  [662,] 0.40356507 0.4492341 0.5703528 0.6987310 0.7389214 0.7526267 0.7693824 #>  [663,] 0.37164918 0.4108535 0.4975945 0.5016024 0.5079060 0.5351661 0.5573048 #>  [664,] 0.23820874 0.2800515 0.3539559 0.3861454 0.4239317 0.4435468 0.4621511 #>  [665,] 0.49551223 0.7775083 0.9212480 1.0281819 1.0419020 1.0753735 1.0763527 #>  [666,] 0.58412158 0.5874768 0.5955148 0.6459643 0.6857542 0.6898385 0.6921031 #>  [667,] 0.39649733 0.4566098 0.4845860 0.5108340 0.5491396 0.5851304 0.5882631 #>  [668,] 0.45869787 0.5728174 0.6052979 0.6140587 0.6406285 0.6650419 0.7261667 #>  [669,] 1.33366862 1.3883942 1.4067927 1.4124369 1.4170377 1.4303105 1.4405465 #>  [670,] 0.37056380 0.4619932 0.6400674 0.6462836 0.6539546 0.6609250 0.6614979 #>  [671,] 0.22598146 0.3741190 0.4783077 0.7023150 0.7758536 0.7939497 0.7991714 #>  [672,] 0.20273430 0.6029309 0.6338639 0.6469657 0.6645357 0.7133756 0.7266601 #>  [673,] 0.37078964 0.3788389 0.3936469 0.4484670 0.5027059 0.5254687 0.5840998 #>  [674,] 0.47632621 0.4958302 0.5212478 0.5393995 0.5673184 0.5741660 0.6719143 #>  [675,] 0.35391172 0.4254499 0.5022110 0.5663945 0.6220036 0.6355266 0.6375425 #>  [676,] 0.44769772 0.5782629 0.5842497 0.6090639 0.6453187 0.7276876 0.7287535 #>  [677,] 0.47195975 0.5847181 0.6828496 0.6905154 0.7163644 0.7294819 0.7336673 #>  [678,] 0.47789027 0.5877218 0.6560235 0.7024598 0.7082959 0.8513707 0.9514358 #>  [679,] 0.62101146 0.6608843 0.7012650 0.8949818 0.9031697 1.0113949 1.0127428 #>  [680,] 0.39782949 0.5163395 0.5432039 0.5598300 0.5615662 0.5848622 0.5918857 #>  [681,] 0.60662442 0.7313355 0.7733589 0.7894975 0.8184706 0.9441086 0.9990848 #>  [682,] 0.80270106 1.0413116 1.1753246 1.2026272 1.2349549 1.2422970 1.2502377 #>  [683,] 0.31387526 0.3451567 0.5091336 0.6032306 0.6952771 0.7835427 0.8127729 #>  [684,] 0.42581278 0.9427078 0.9495026 1.0167321 1.0201551 1.0537770 1.1101975 #>  [685,] 0.66088427 0.7619380 0.8310636 0.9429896 0.9559843 1.1128769 1.1155131 #>  [686,] 0.47704072 0.5615319 0.6481009 0.7434731 0.7513689 0.7568906 0.7877078 #>  [687,] 0.56100925 0.5728429 0.5974996 0.5990059 0.7582398 0.7632342 0.8136152 #>  [688,] 0.22408539 0.3732542 0.4096059 0.4108535 0.4154556 0.4355314 0.5202664 #>  [689,] 0.62737448 0.6353383 0.6674328 0.7383399 0.8917684 0.9395241 1.0277712 #>  [690,] 0.49501575 0.6508813 0.7299850 0.7603895 0.7839434 0.8727864 0.8886090 #>  [691,] 0.36231713 0.4133553 0.6135824 0.6418654 0.7093182 0.7170015 0.7323249 #>  [692,] 0.36018255 0.5200565 0.5227492 0.6885031 0.7154132 0.7388577 0.7744280 #>  [693,] 0.64041487 0.6970764 0.7215182 0.7350491 0.7532548 0.7857038 0.8114129 #>  [694,] 0.38904913 0.4092305 0.4239317 0.4408117 0.4514489 0.4717454 0.4979620 #>  [695,] 1.20427310 1.2309744 1.2904037 1.3320484 1.3924165 1.4139141 1.4445140 #>  [696,] 0.25388696 0.5610009 0.5951938 0.6069354 0.6085145 0.6455946 0.6471059 #>  [697,] 0.52951947 0.6456752 0.9164829 0.9300665 1.0128976 1.0475248 1.0504723 #>  [698,] 0.35996274 0.5478008 0.7368288 0.7386465 0.7512542 0.7659354 0.8527929 #>  [699,] 0.30634757 0.3744041 0.4706311 0.4761934 0.4898483 0.5051142 0.5642196 #>  [700,] 0.28569894 0.3958160 0.4266638 0.4413218 0.4523104 0.4958151 0.5051801 #>  [701,] 0.52873493 0.6042808 0.6761530 0.7079180 0.7569625 0.8075313 0.8128559 #>  [702,] 0.23820874 0.2961811 0.3241803 0.3660930 0.3767150 0.4126186 0.4669345 #>  [703,] 0.30272426 0.4138339 0.5435239 0.5973707 0.6498975 0.6708134 0.6894340 #>  [704,] 0.17612871 0.3192498 0.5191811 0.5684448 0.5995372 0.7143553 0.7195186 #>  [705,] 0.30829590 0.3796370 0.4816995 0.5226242 0.6566061 0.6789153 0.7120906 #>  [706,] 0.94733024 1.2538861 1.2609881 1.2786731 1.3683831 1.4903159 1.4908601 #>  [707,] 0.28569894 0.3809304 0.3829616 0.4261481 0.4371354 0.5035837 0.5067412 #>  [708,] 0.76538779 0.8082249 0.8772800 0.8788687 0.9879847 1.0720328 1.0988916 #>  [709,] 0.20409200 0.2853384 0.3534528 0.4186617 0.5217025 0.5235065 0.5687243 #>  [710,] 0.38469603 0.4723339 0.4850027 0.5649443 0.5727006 0.5806498 0.6207631 #>  [711,] 0.14751575 0.2623696 0.3346062 0.4235561 0.4668622 0.5013166 0.5526056 #>  [712,] 0.33886838 1.1204542 1.2388628 1.3434793 1.3579266 1.4881586 1.5883774 #>  [713,] 0.66925352 0.7081045 0.7838781 0.8548518 0.8634274 0.8982546 0.9207183 #>  [714,] 0.51137886 0.5416857 0.5626203 0.5889453 0.6090639 0.6151071 0.7343772 #>  [715,] 0.35840970 0.3838727 0.3887640 0.3995012 0.4983295 0.5170699 0.5352753 #>  [716,] 0.46951953 0.5163496 0.5165095 0.6172003 0.6722525 0.6989665 0.7116488 #>  [717,] 0.18607443 0.3420210 0.3681272 0.4299896 0.5027059 0.5157875 0.5261215 #>  [718,] 0.29340160 0.5067832 0.5698330 0.7171999 0.8284457 0.8312242 0.8756829 #>  [719,] 0.29744609 0.3126939 0.6862971 0.7180647 0.7583422 0.7746648 0.8164415 #>  [720,] 0.36762512 0.4114354 0.4188505 0.4583846 0.4797377 0.5105209 0.5162347 #>  [721,] 0.40252766 0.7738750 0.7751697 0.8055238 0.9610674 1.0161615 1.1380989 #>  [722,] 0.81462836 0.8890433 0.9023367 0.9062761 1.1078451 1.2423050 1.2438685 #>  [723,] 0.34339288 0.3830702 0.4122397 0.4336247 0.4960023 0.4986486 0.5202664 #>  [724,] 0.41948864 0.4952333 0.5820607 0.6122226 0.6240619 0.6448747 0.6575235 #>  [725,] 0.37138428 0.4957124 0.5722618 0.6623714 0.6958099 0.7095994 0.7098203 #>  [726,] 0.29480950 0.4985937 0.5238477 0.5307273 0.6046339 0.6243628 0.6499381 #>  [727,] 0.25321508 0.4094435 0.4408117 0.5757644 0.5762564 0.6159748 0.6165704 #>  [728,] 0.48000411 0.5114577 0.5533512 0.6882761 0.7126072 0.7194947 0.7414164 #>  [729,] 0.32385442 0.3725327 0.3767150 0.4243653 0.4651541 0.4739123 0.4891776 #>  [730,] 0.36231713 0.5625614 0.5641869 0.5652193 0.6845004 0.7592496 0.7742980 #>  [731,] 0.43487071 0.4677030 0.4748174 0.4934572 0.5050791 0.5528646 0.5705519 #>  [732,] 0.34941449 0.4677030 0.5751281 0.6538131 0.6680010 0.7033895 0.7097406 #>  [733,] 0.25388696 0.4306703 0.4717454 0.5360608 0.5423468 0.5594957 0.5763118 #>  [734,] 0.28547710 0.4229152 0.4661364 0.5261131 0.5835813 0.6017170 0.6618239 #>  [735,] 0.29934403 0.3720099 0.3942350 0.4258858 0.4757893 0.5102428 0.5207417 #>  [736,] 0.39652533 0.4470322 0.6455588 0.7965179 0.7983863 0.8160329 0.8769836 #>  [737,] 0.18607443 0.2807453 0.3044752 0.3788389 0.4206207 0.5067899 0.5304683 #>  [738,] 0.36064420 0.4288136 0.4576864 0.4674051 0.5102428 0.5249383 0.5261576 #>  [739,] 0.27858501 0.5940951 0.6158611 0.6556245 0.6892113 0.7509038 0.7841913 #>  [740,] 0.32331748 0.9450375 1.3126682 1.4145547 1.5454692 1.5787271 1.5814866 #>  [741,] 0.15405061 0.3792980 0.5541176 0.6155353 0.6387620 0.6494889 0.7184028 #>  [742,] 0.41725810 0.4892179 0.5007377 0.5428345 0.5606087 0.5708216 0.5787689 #>  [743,] 1.33855324 1.3629026 1.4624241 1.5572207 1.6337818 1.6476679 1.7070129 #>  [744,] 0.24281462 0.3098108 0.3119845 0.3519909 0.3876439 0.4028777 0.4166922 #>  [745,] 0.06443966 0.3418350 0.3910770 0.4717162 0.4946818 0.5520984 0.5967005 #>  [746,] 0.26394167 0.2792282 0.4481988 0.4783976 0.4863049 0.4977324 0.5356303 #>  [747,] 0.55040969 0.6031967 0.6633201 0.7513439 0.7823452 0.8249702 0.8638144 #>  [748,] 0.38309594 0.4582795 0.6260243 0.6648983 0.6928172 0.7305639 0.7560018 #>  [749,] 0.48132484 0.5371805 0.5501985 0.6481500 0.8229050 0.8350049 0.8703340 #>  [750,] 0.30151359 0.3212630 0.5642322 0.5878078 0.6407681 0.6429988 0.7434478 #>  [751,] 0.82346154 0.9571121 0.9595601 0.9647029 1.0014839 1.1416903 1.1470828 #>  [752,] 0.61762019 0.9469796 1.0281819 1.0295703 1.0416143 1.0569368 1.1302775 #>  [753,] 0.58892958 0.6185030 0.6423099 0.6639459 0.7595756 0.7840359 0.7994478 #>  [754,] 0.44848458 0.4583362 0.5093437 0.5216108 0.6728083 0.6824163 0.7219209 #>  [755,] 0.55002404 0.7981389 0.8075282 0.9731824 0.9998940 1.1450535 1.1619875 #>  [756,] 0.32437639 0.5056449 0.5866138 0.6133185 0.7533634 0.8627273 0.9091837 #>  [757,] 0.39537586 0.4364486 0.4924286 0.5104644 0.5278581 0.5816697 0.5834501 #>  [758,] 0.37963703 0.4355463 0.6032184 0.6234866 0.6373044 0.6455455 0.6586092 #>  [759,] 1.04964063 1.2982321 1.3363673 1.3603343 1.4032314 1.4222620 1.4479372 #>  [760,] 0.40253157 0.4373040 0.5726287 0.5815883 0.6418126 0.6534417 0.6820519 #>  [761,] 0.36462081 0.3769074 0.3801928 0.3897399 0.4471444 0.4545920 0.4735463 #>  [762,] 0.29638940 0.4113234 0.4845064 0.4872605 0.5421913 0.5717468 0.5848831 #>  [763,] 0.14685469 0.3769074 0.3829616 0.3961387 0.4084928 0.4266638 0.4716540 #>  [764,] 0.32395509 0.4754310 0.5572776 0.6345537 0.6562354 0.6644001 0.6946004 #>  [765,] 0.35067820 0.5067367 0.5193491 0.5312231 0.5319602 0.5668470 0.5904319 #>  [766,] 0.18488109 0.2252148 0.2279682 0.5339722 0.6592059 0.7713110 0.7928612 #>  [767,] 0.42516774 0.6948994 0.8225042 0.8601541 0.8788687 0.9275861 1.0000294 #>  [768,] 0.87284639 0.9618460 1.0222207 1.0945030 1.1226408 1.1573514 1.2052498 #>  [769,] 0.44403180 0.4779306 0.5051117 0.5559076 0.5616679 0.5791339 0.6256653 #>  [770,] 0.83764597 0.8838707 0.8977544 0.9276438 0.9514358 0.9527275 0.9732805 #>  [771,] 0.50906629 0.5335222 0.6070403 0.7483654 0.8392597 0.9358527 0.9837028 #>  [772,] 0.66292888 0.6833800 0.6850524 0.6967483 0.6997373 0.7231225 0.7727911 #>  [773,] 0.57285188 0.6208600 0.6348921 0.6523332 0.7694877 0.7715127 0.7812196 #>  [774,] 0.29380508 0.4497543 0.5546577 0.5796545 0.6139356 0.6232723 0.6657533 #>  [775,] 0.44057033 0.4832381 0.5092610 0.5194426 0.5607001 0.5883311 0.6284527 #>  [776,] 0.46646625 0.5152366 0.6258417 0.6789648 0.7079467 0.7884788 0.8856824 #>  [777,] 0.27146246 0.3280322 0.4096059 0.4336247 0.5016024 0.5279255 0.5414238 #>  [778,] 0.71840251 1.0667380 1.1953261 1.3033971 1.3819001 1.4952291 1.5479191 #>  [779,] 0.39401725 0.5880229 0.6090855 0.6123833 0.6404278 0.7089804 0.7201897 #>  [780,] 0.46438339 0.5078219 0.5160425 0.5555583 0.5566150 0.5715939 0.6137874 #>  [781,] 0.48213217 0.6897191 0.8314551 0.8959060 0.9187684 1.0102294 1.0116712 #>  [782,] 0.37338792 0.4985937 0.5618003 0.7694596 0.7780665 0.7971660 0.9266316 #>  [783,] 0.47789027 0.6588787 0.7282892 0.8295650 0.9360720 0.9627798 1.0310398 #>  [784,] 0.60642997 0.7894047 0.7908098 0.7917527 0.8213939 0.8649219 0.8735183 #>  [785,] 0.41735855 0.4372203 0.4722432 0.4985683 0.5212478 0.5441243 0.5794040 #>  [786,] 0.45591350 0.7401540 0.9479739 0.9734684 0.9946876 1.0028321 1.0248096 #>  [787,] 0.39551895 0.6068044 0.6382194 0.6769695 0.7256597 0.7432322 0.7740224 #>  [788,] 0.32590028 0.5929066 0.6186854 0.6689522 0.6965316 0.7160133 0.7228406 #>  [789,] 0.22469770 0.3875394 0.5048567 0.5902592 0.6997373 0.7122836 0.7725154 #>  [790,] 0.28324315 0.4214575 0.4919387 0.5576360 0.5802389 0.6561756 0.6567072 #>  [791,] 0.22486505 0.3363142 0.3840161 0.3912306 0.4035100 0.4360616 0.4713052 #>  [792,] 0.55285936 0.6029309 0.6845177 0.7612625 0.8511340 0.9633242 0.9692015 #>  [793,] 0.39401725 0.5811770 0.6124357 0.6644001 0.6663498 0.6774777 0.7344880 #>  [794,] 0.41885028 0.5125810 0.6344583 0.6391296 0.6462882 0.6487197 0.6504246 #>  [795,] 0.52443471 0.5667472 0.6621977 0.6802170 0.7234790 0.7610726 0.7722016 #>  [796,] 0.16204728 0.2154312 0.3887640 0.4533817 0.4600988 0.4823018 0.5013166 #>  [797,] 0.58671410 1.1320516 1.2786731 1.3743580 1.5802575 1.6986204 1.7022624 #>  [798,] 0.55028804 0.6323279 0.6446255 0.6902231 0.7998121 0.8115481 0.8380145 #>  [799,] 0.34774114 0.4261906 0.4491032 0.4749586 0.4836221 0.5107730 0.5437988 #>  [800,] 0.26457751 0.2751594 0.3971239 0.4134455 0.4144184 0.4351833 0.4423412 #>  [801,] 0.42249207 0.5204365 0.5730856 0.6868377 0.7070713 0.7321157 0.7569329 #>  [802,] 0.53284063 0.5701031 0.5797935 0.5899931 0.6438156 0.6570650 0.6837681 #>  [803,] 0.29688540 0.3682253 0.5690136 0.5846037 0.6109639 0.6543267 0.6677251 #>  [804,] 0.72915726 0.7910690 0.8724304 0.9025166 0.9844423 0.9851746 1.0101450 #>  [805,] 0.25014810 0.2942733 0.3912306 0.4757264 0.4887094 0.5330277 0.5482157 #>  [806,] 0.46047483 0.6619580 0.6850269 0.6897582 0.6959363 0.7008487 0.7350278 #>  [807,] 0.31797347 0.4431131 0.4687167 0.5129313 0.5311375 0.5460027 0.5748955 #>  [808,] 0.40726964 0.4655869 0.4789687 0.5053825 0.5147621 0.5345084 0.5944777 #>  [809,] 0.43032791 0.4497543 0.4839350 0.5095595 0.5728182 0.6233205 0.6459660 #>  [810,] 0.44686075 0.6258417 0.6384190 0.7513689 0.7827749 0.8354272 0.9071958 #>  [811,] 0.29949554 0.4829181 0.4927446 0.6569516 0.6918909 0.7271374 0.7621614 #>  [812,] 0.63373527 0.7495416 0.7824928 0.9734559 1.0462038 1.1260297 1.1645950 #>  [813,] 0.28005151 0.3890491 0.4306703 0.4407789 0.4463318 0.4850645 0.5440646 #>  [814,] 0.91551803 0.9404181 0.9594198 0.9796114 1.0145441 1.0800258 1.1061192 #>  [815,] 0.41579130 0.4197972 0.4891681 0.5432039 0.6057509 0.6239828 0.6256653 #>  [816,] 0.24464772 0.3274747 0.3676251 0.4805422 0.5176067 0.5379035 0.5463979 #>  [817,] 0.41901986 0.6054614 0.6184438 0.6247219 0.6497351 0.6788592 0.6952771 #>  [818,] 0.31454723 0.3472850 0.4082966 0.4849922 0.4893943 0.5422432 0.5696936 #>  [819,] 0.71046511 1.0040433 1.2197117 1.3267803 1.3503738 1.3539905 1.3654746 #>  [820,] 0.58555390 1.0275517 1.0498526 1.2127194 1.3468690 1.3598920 1.3603487 #>  [821,] 0.50038470 0.9365410 0.9390758 0.9551053 0.9999988 1.0304065 1.1108256 #>  [822,] 0.35654646 0.5272111 0.5334684 0.5878078 0.6031967 0.6296867 0.7234813 #>  [823,] 0.37485448 0.5090663 0.6379285 0.7305639 0.7343290 0.7794488 0.7923258 #>  [824,] 0.40612417 0.4668622 0.5193261 0.5509534 0.5620009 0.5719060 0.6142111 #>  [825,] 0.86015406 0.8766009 0.9084498 0.9315690 0.9381243 0.9541965 0.9559144 #>  [826,] 0.43452196 0.4571896 0.4583846 0.4651541 0.5131427 0.5208445 0.5559143 #>  [827,] 0.34151679 0.3788185 0.4360616 0.5019497 0.5104143 0.5125985 0.5360587 #>  [828,] 0.28549037 0.2948732 0.3096737 0.3927913 0.4138250 0.4279413 0.4615941 #>  [829,] 0.97346842 1.1544916 1.1739738 1.2102834 1.3074219 1.3367107 1.3516118 #>  [830,] 0.15931084 0.2485049 0.2673723 0.2901470 0.3781323 0.4028777 0.4331996 #>  [831,] 0.26511814 0.4003754 0.4268343 0.5067412 0.5071976 0.5320432 0.5367062 #>  [832,] 1.22473773 1.2591375 1.3629026 1.3961328 1.4934486 1.5581952 1.5871242 #>  [833,] 0.30008116 0.3705910 0.4447863 0.4677307 0.4769323 0.5210203 0.5432098 #>  [834,] 0.42581278 0.8293329 0.9064402 0.9097784 0.9315690 0.9323080 0.9331171 #>  [835,] 0.33886838 0.9332158 1.1811188 1.2540949 1.2665426 1.3368404 1.3398630 #>  [836,] 0.57308560 0.6091323 0.7566546 0.7827395 0.8267563 0.8461640 0.8850679 #>  [837,] 0.19524906 0.2901470 0.3234940 0.3344082 0.3402041 0.3519909 0.3820259 #>  [838,] 0.40170648 0.4484846 0.4561707 0.4668662 0.4669461 0.5065299 0.5467849 #>  [839,] 0.51801140 0.5408561 0.6556221 0.6618289 0.6696152 0.7206791 0.7713865 #>  [840,] 0.70245977 0.8275288 0.8946834 0.9682861 1.0495949 1.0566861 1.0978882 #>  [841,] 0.68451774 0.7194947 0.7795827 0.7822385 0.9727569 0.9889509 0.9949474 #>  [842,] 0.31797347 0.3770262 0.4003886 0.4514934 0.5342057 0.5981101 0.6033577 #>  [843,] 0.31387526 0.4863279 0.6247219 0.6796968 0.7080496 0.7400678 0.8245916 #>  [844,] 0.37666477 0.7294819 0.7444697 0.9049165 0.9100240 1.0064138 1.0705954 #>  [845,] 0.32411737 0.3720099 0.3895660 0.4806928 0.4826672 0.5261576 0.5282865 #>  [846,] 1.11839146 1.5771461 1.6131811 1.6785846 1.7474122 1.7772212 1.7894966 #>  [847,] 0.42516774 0.6513980 0.6745134 0.7888111 0.7923236 0.8977527 0.9125891 #>  [848,] 0.19624274 0.2279682 0.2840894 0.4619576 0.5928810 0.7283482 0.7687306 #>  [849,] 1.11839146 1.6056324 1.6752128 1.7527515 1.8111568 1.8162633 1.9405063 #>  [850,] 0.36362420 0.4995905 0.7161684 0.7262949 0.8718923 0.9120089 0.9551492 #>  [851,] 0.42881362 0.4875609 0.5249030 0.5481429 0.6294731 0.6336492 0.6874139 #>  [852,] 0.99280689 1.5407856 1.5992152 1.7020673 1.7580373 1.7827696 1.8871964 #>  [853,] 0.42730027 0.5559076 0.6539474 0.6784081 0.7042136 0.7742759 0.8665585 #>  [854,] 0.63916785 0.6435594 0.6501147 0.6592059 0.6921547 0.7129461 0.7414164 #>  [855,] 0.29340160 0.6008395 0.6375469 0.8957038 0.9273686 0.9887475 1.0418015 #>  [856,] 0.95151666 1.0248096 1.0274584 1.0596260 1.1762380 1.2872706 1.3074219 #>  [857,] 0.28228754 0.3190694 0.4908177 0.6083837 0.6176596 0.6580550 0.7922612 #>  [858,] 0.37929799 0.4540076 0.4546352 0.5380614 0.5464645 0.5747974 0.5781900 #>  [859,] 0.48024477 0.5056449 0.6321145 0.6643750 0.7205015 0.7214781 0.7395734 #>  [860,] 0.25572994 0.3370929 0.3433929 0.3461653 0.3846908 0.5607125 0.5641025 #>  [861,] 0.88098379 0.8941008 0.8970732 0.9243641 0.9454739 0.9611847 0.9970064 #>  [862,] 0.19963094 0.4253115 0.4327940 0.4952900 0.5478848 0.5838579 0.7121972 #>  [863,] 0.41953670 0.5423670 0.5572702 0.6396016 0.6494889 0.6658933 0.6947535 #>  [864,] 0.15024199 0.4828050 0.5088258 0.6626907 0.7526476 0.8098871 0.8292719 #>  [865,] 0.29092908 0.4189660 0.5200694 0.5646743 0.5660972 0.5862933 0.6207260 #>  [866,] 0.52442058 0.6435594 0.6720739 0.7555221 0.7584288 0.7758265 0.8009670 #>  [867,] 0.22861821 0.2372458 0.4158956 0.4556171 0.5022410 0.5718235 0.5972651 #>  [868,] 0.64381558 0.7591794 0.7594601 0.7857828 0.7903163 0.8243293 0.9415459 #>  [869,] 0.56188713 0.7484710 1.1446443 1.2534089 1.3336686 1.3365599 1.3934439 #>  [870,] 0.41186368 0.5478848 0.6237052 0.6699131 0.7044802 0.7235069 0.7380306 #>  [871,] 0.59531165 0.6301612 0.6829496 0.8703470 0.8928795 0.9131486 0.9271315 #>  [872,] 0.30524402 0.3746087 0.4067339 0.4499934 0.4624110 0.4906096 0.5177569 #>  [873,] 0.95085518 0.9598210 0.9829550 0.9935334 1.0152701 1.0472382 1.0577801 #>  [874,] 0.38531710 0.4738983 0.4880271 0.4976798 0.5841216 0.6218840 0.6474308 #>  [875,] 0.85503370 0.8911159 0.9618048 1.2696690 1.3229686 1.3368404 1.3457721 #>  [876,] 0.46169959 0.4828776 0.4994656 0.5866138 0.6423099 0.8418324 0.8621121 #>  [877,] 0.32747116 0.3815968 0.4280624 0.4658191 0.4937491 0.5168323 0.5423468 #>  [878,] 0.65164779 0.6661864 0.7858247 0.7911791 0.8610737 0.8734917 0.9023367 #>  [879,] 0.64739453 1.0634376 1.2160875 1.2234967 1.2921973 1.3274990 1.3577327 #>  [880,] 0.61762019 1.2386162 1.4444183 1.4449985 1.4653533 1.4873154 1.5123692 #>  [881,] 0.79312821 0.8696507 0.8960241 0.9155061 0.9987688 1.0378403 1.0644435 #>  [882,] 0.35840970 0.5240895 0.5578336 0.5671623 0.5820604 0.6116788 0.6947648 #>  [883,] 0.88684297 0.9493400 0.9767033 1.0101450 1.0499615 1.0534338 1.1310754 #>  [884,] 0.44686075 0.6234452 0.6481009 0.8112823 0.8326556 0.8424521 0.9281683 #>  [885,] 0.48024477 0.5539264 0.6052029 0.6169539 0.6330349 0.6359842 0.6677251 #>  [886,] 0.34883844 0.5842497 0.6338563 0.6392708 0.7258283 0.7343772 0.7354579 #>  [887,] 0.20386822 0.2996897 0.3570336 0.3820259 0.4351833 0.4376626 0.4430032 #>  [888,] 0.40699911 0.4484318 0.4655869 0.4833765 0.5360403 0.5766436 0.5773267 #>  [889,] 0.27754795 0.3151955 0.4675760 0.5012887 0.5117713 0.5461238 0.5551390 #>  [890,] 0.29960910 0.3063476 0.3225140 0.3964814 0.4084928 0.4911228 0.4997326 #>  [891,] 0.20409200 0.4018046 0.4365033 0.4656568 0.4901913 0.5089744 0.5611821 #>  [892,] 0.23155439 0.3052440 0.3555455 0.4587595 0.4692479 0.4946818 0.5137240 #>  [893,] 0.17685080 0.5040590 0.5723363 0.6409552 0.6758198 0.6959621 0.7213932 #>  [894,] 1.06966841 1.1010886 1.1472946 1.1705722 1.1820885 1.2440242 1.2675109 #>  [895,] 0.49087274 0.5701031 0.6240678 0.6653746 0.7381938 0.7541370 0.7551310 #>  [896,] 0.51833067 0.5536824 0.5728174 0.6321502 0.6416228 0.6539474 0.6582722 #>  [897,] 0.64659558 0.6559446 0.7011442 0.8909817 0.8953462 0.9168421 0.9227213 #>  [898,] 0.33322046 0.5416623 0.8752247 0.9212017 0.9404795 0.9441086 0.9824364 #>  [899,] 0.39626450 0.4244203 0.4462709 0.5897515 0.6142419 0.6457249 0.6522478 #>  [900,] 0.36295797 0.5063134 0.5730296 0.5783648 0.6907378 0.7303440 0.7488673 #>  [901,] 0.30972644 0.4260230 0.4372203 0.5324795 0.5882705 0.5970642 0.6164065 #>  [902,] 0.30928185 0.3881146 0.3997845 0.5483420 0.5767628 0.5967284 0.6661773 #>  [903,] 0.46499706 0.5742484 0.5912861 0.6576271 0.6712601 0.7512542 0.7701131 #>  [904,] 0.16249153 0.4352136 0.4848401 0.4957124 0.5071976 0.5330277 0.5424335 #>  [905,] 0.43773109 0.4948758 0.6142419 0.6273272 0.6487756 0.6641392 0.6674030 #>  [906,] 0.30856636 0.4303279 0.5528459 0.5796545 0.7175512 0.7237384 0.7331647 #>  [907,] 0.31454723 0.3682253 0.4261464 0.4404061 0.4481988 0.4864065 0.5522475 #>  [908,] 0.73744766 0.8521705 0.9033353 0.9094887 0.9253753 0.9265705 0.9523677 #>  [909,] 0.79813894 1.0905997 1.1502524 1.3996565 1.4226678 1.4903577 1.4947910 #>  [910,] 0.35996274 0.4472022 0.6112851 0.6506005 0.7365757 0.8663264 0.8677984 #>  [911,] 0.41735855 0.4199149 0.5567701 0.6164065 0.6337841 0.6483968 0.6785883 #>  [912,] 0.92526340 1.1378007 1.2377187 1.2383201 1.2542159 1.3046073 1.3602844 #>  [913,] 0.53270359 0.5984266 0.6418654 0.7683285 0.8012935 0.8263173 0.8334642 #>  [914,] 0.52866295 0.8939852 0.9732876 0.9777768 0.9978706 1.0124508 1.0302478 #>  [915,] 0.57893776 0.9051007 0.9196287 0.9449904 0.9930902 1.0813751 1.1697737 #>  [916,] 0.83839018 0.9127880 1.1456839 1.3790801 1.4026729 1.4045465 1.4147957 #>  [917,] 0.48151248 0.6213898 0.6538957 0.6794629 0.7659354 0.7713424 0.8081861 #>  [918,] 0.59921543 0.6208600 0.6641405 0.7929467 0.8703470 0.8972736 0.8987038 #>  [919,] 0.17323721 0.4229152 0.4548979 0.5210266 0.5459667 0.6904394 0.7175509 #>  [920,] 0.71016921 0.7162610 0.7774744 0.7970494 0.8762610 0.8800556 0.8849447 #>  [921,] 0.29935140 0.3442235 0.4989423 0.5857891 0.5909049 0.5964014 0.5981101 #>  [922,] 0.41523780 0.6913944 0.8095202 0.8152389 0.8284457 0.8360778 0.8374432 #>  [923,] 0.32835119 0.5108340 0.5786481 0.6185293 0.6273600 0.6371384 0.6556190 #>  [924,] 0.30167522 0.4179906 0.4224584 0.6209874 0.6424241 0.6719143 0.6740367 #>  [925,] 0.18803035 0.5963063 0.6109679 0.6174598 0.6177306 0.6551570 0.6799812 #>  [926,] 0.46871671 0.5687127 0.5811770 0.5880229 0.6385232 0.6665497 0.7257461 #>  [927,] 0.29744609 0.3106355 0.5650288 0.6455455 0.6664063 0.7212612 0.7218492 #>  [928,] 0.71189136 0.7486953 0.7516331 0.9056472 0.9363459 0.9654738 1.0685319 #>  [929,] 0.42806237 0.4571716 0.4619932 0.5506004 0.5820604 0.6165704 0.6246660 #>  [930,] 0.59993770 0.7451368 0.7580417 0.7649082 0.8778754 0.8937950 0.9094337 #>  [931,] 0.49313717 0.5780151 0.5931846 0.6551125 0.6708041 0.6799200 0.6923716 #>  [932,] 0.45628983 0.5990059 0.7442037 0.7608215 0.8317483 0.8628320 0.9037339 #>  [933,] 0.28842598 0.3721720 0.3932582 0.4934572 0.5040590 0.6207101 0.6531815 #>  [934,] 0.84510475 0.9363459 1.0705368 1.1156008 1.2090237 1.3907788 1.4146359 #>  [935,] 0.58089880 0.6674328 0.8067058 1.0161615 1.0173525 1.0495499 1.0564533 #>  [936,] 0.45455793 0.5649443 0.6180748 0.6639459 0.6639672 0.7141419 0.7263591 #>  [937,] 0.28074533 0.3118915 0.3420210 0.4029665 0.4656568 0.4821372 0.5217025 #>  [938,] 0.60908551 0.6139356 0.6385232 0.6459660 0.6535863 0.6654261 0.7108370 #>  [939,] 0.30008116 0.3668790 0.4243880 0.4760809 0.5148844 0.5570364 0.5679500 #>  [940,] 0.67705225 0.7002750 0.8077391 0.8333368 0.8431675 0.8442118 0.8548518 #>  [941,] 0.54279262 0.5968079 0.6388143 0.6484457 0.6657748 0.6979090 0.6990303 #>  [942,] 0.30727266 0.3534528 0.4365033 0.4824492 0.5109671 0.5147621 0.5684547 #>  [943,] 0.38993929 0.4224921 0.5716664 0.5861752 0.5960224 0.6336560 0.6380220 #>  [944,] 1.08100555 1.3732769 1.4857438 1.5282236 1.5952576 1.6693231 1.6908325 #>  [945,] 0.31251812 0.4136393 0.4624604 0.5234894 0.5693001 0.5728368 0.5751218 #>  [946,] 0.29960910 0.3231145 0.3675681 0.4471444 0.4696609 0.4706311 0.4842068 #>  [947,] 0.48280500 0.4981219 0.5379111 0.5546577 0.5815951 0.8205679 0.8257004 #>  [948,] 0.11625434 0.3654061 0.4300024 0.4742886 0.5171684 0.5767315 0.5922683 #>  [949,] 0.32414932 0.4373514 0.5298680 0.5658030 0.6331405 0.6424788 0.6633237 #>  [950,] 0.38963647 0.4518437 0.4551130 0.5067367 0.5354090 0.5884079 0.6456369 #>  [951,] 0.40583092 0.4260230 0.6208890 0.6379733 0.6414350 0.6718170 0.6839461 #>  [952,] 0.30727266 0.3964737 0.4186617 0.4206750 0.4250039 0.4959981 0.5741103 #>  [953,] 0.40836798 0.7894047 0.8064655 1.0596628 1.1799850 1.1929541 1.2168564 #>  [954,] 0.38808601 0.3917874 0.3955661 0.4077930 0.4401138 0.4574332 0.4624110 #>  [955,] 0.22570923 0.7344356 0.7773884 0.7903481 0.7977802 0.7985786 0.8127729 #>  [956,] 0.35260553 0.4931282 0.5963574 0.6159683 0.6391296 0.6395572 0.6650419 #>  [957,] 0.42730027 0.5051117 0.7131637 0.7194761 0.7215428 0.7610726 0.7643825 #>  [958,] 0.63472311 0.7318763 0.7419853 0.7778638 0.8015747 0.8186890 0.8572792 #>  [959,] 0.36295797 0.4343023 0.4361761 0.6506194 0.6512680 0.6590819 0.6655405 #>  [960,] 0.38666886 0.4377025 0.5184139 0.5641869 0.5681018 0.6358601 0.6537525 #>  [961,] 0.56004377 0.7315666 0.7440415 0.8300650 0.8628238 0.9362376 0.9387556 #>  [962,] 0.64739453 0.6787017 1.0715520 1.1680605 1.2070891 1.2229335 1.2749480 #>  [963,] 0.60090723 0.6169539 0.6321145 0.8641021 0.9091837 0.9315047 0.9417696 #>  [964,] 0.67819482 0.8821868 0.9061286 0.9538862 1.0221508 1.0946139 1.1334247 #>  [965,] 0.58471071 0.7470898 0.8469636 0.8966643 0.9196287 0.9297531 1.0282795 #>  [966,] 0.37656343 0.4236885 0.4384709 0.5207417 0.5762302 0.5787689 0.6024693 #>  [967,] 0.32569264 0.3705638 0.4927446 0.5502192 0.6122335 0.6536746 0.6705522 #>  [968,] 0.50038470 0.8909817 1.0184914 1.0277657 1.0797412 1.1127988 1.1401717 #>  [969,] 0.18803035 0.4965426 0.6242892 0.6283139 0.6579436 0.6833244 0.6893094 #>  [970,] 1.08432395 1.2271464 1.3137737 1.3620349 1.4284948 1.5223900 1.5904520 #>  [971,] 0.45827951 0.4941667 0.6202218 0.6538131 0.7082099 0.7367217 0.8349034 #>  [972,] 0.50539360 0.5797935 0.5984853 0.6240678 0.6243981 0.6544480 0.7370854 #>  [973,] 0.40814915 0.6239366 0.8107270 0.8254536 0.8334053 0.8449077 0.9154682 #>  [974,] 0.53161800 0.6386167 0.6917594 0.7498573 0.8360778 0.9011919 0.9185220 #>  [975,] 0.21621234 0.3942350 0.4576864 0.4826672 0.4853470 0.5297030 0.5473172 #>  [976,] 0.52442058 0.6321951 0.6391679 0.7142203 0.7509386 0.7605731 0.7987896 #>  [977,] 0.53718049 0.5898105 0.7351366 0.8004969 0.8150537 0.8762175 0.9862135 #>  [978,] 0.90991374 0.9671533 1.0490164 1.1422407 1.2217004 1.2460591 1.3055929 #>  [979,] 0.39325820 0.4348707 0.5114998 0.5313283 0.5501307 0.6241334 0.6246194 #>  [980,] 0.92946731 0.9880871 0.9928069 1.0451796 1.1151619 1.1438995 1.2309744 #>  [981,] 0.49766071 0.4976741 0.5022110 0.5961887 0.6055985 0.6088236 0.6115604 #>  [982,] 0.41606262 0.4747898 0.5524635 1.0020021 1.1123595 1.1226408 1.1881139 #>  [983,] 0.99626532 1.1718323 1.3466073 1.3799171 1.4721848 1.5546496 1.5566981 #>  [984,] 0.62617363 1.1010947 1.2011243 1.2077045 1.2814191 1.2822832 1.3222576 #>  [985,] 0.88385594 1.0106577 1.0495499 1.1741369 1.2861701 1.3164937 1.4699397 #>  [986,] 0.39681475 0.4138339 0.5617095 0.6294748 0.6334876 0.6712601 0.6975436 #>  [987,] 0.29618109 0.2972152 0.3158315 0.3238544 0.3539559 0.3815968 0.4128456 #>  [988,] 0.98593310 1.0696481 1.1151619 1.1382707 1.1526916 1.1847653 1.2048532 #>  [989,] 0.91102222 0.9987503 1.0651372 1.1172784 1.1279404 1.1313420 1.1387125 #>  [990,] 0.58471071 0.7643707 0.8989058 1.1333799 1.2143398 1.2483776 1.2686896 #>  [991,] 0.20386822 0.2751594 0.2821170 0.3300524 0.3620051 0.4157378 0.4345490 #>  [992,] 0.55368243 0.7042136 0.7194761 0.7722016 0.8361046 0.8587182 0.8659535 #>  [993,] 0.71731716 0.7632523 0.9187684 0.9627677 0.9750136 1.0061736 1.0867698 #>  [994,] 0.25724294 0.5327036 0.6214852 0.7082959 0.7592750 0.7667565 0.7818323 #>  [995,] 0.41863484 0.4546114 0.5045666 0.5260412 0.5704638 0.6086270 0.6281970 #>  [996,] 0.42619058 0.4880186 0.5061382 0.5320831 0.5477174 0.5754923 0.5917765 #>  [997,] 0.53972126 0.5772284 0.6960337 0.7440415 0.8602698 0.8730609 0.8888835 #>  [998,] 0.56612416 0.6575235 0.7219209 0.8004682 0.8212409 0.8443122 0.8455567 #>  [999,] 0.47948465 0.5240895 0.5994840 0.6251989 0.6765302 0.6967573 0.7473154 #> [1000,] 0.26599562 0.3377949 0.3668790 0.3705910 0.4130709 0.4678077 0.4713052 #>              [,8]      [,9]     [,10] #>    [1,] 1.0017987 1.0475731 1.0650789 #>    [2,] 0.6214486 0.6307902 0.6405316 #>    [3,] 0.8223215 0.8328577 0.8986674 #>    [4,] 1.3989228 1.4857665 1.5050253 #>    [5,] 0.9294673 0.9570312 0.9624881 #>    [6,] 0.8955523 0.9534202 0.9618639 #>    [7,] 0.8261239 0.8304228 0.8386145 #>    [8,] 0.4202029 0.4231938 0.4286524 #>    [9,] 0.6166653 0.6625598 0.6634870 #>   [10,] 0.6107820 0.6247604 0.6536357 #>   [11,] 0.9924790 1.0323831 1.1293757 #>   [12,] 1.0797073 1.0810056 1.0827304 #>   [13,] 0.5362433 0.6190179 0.6301757 #>   [14,] 0.8538292 0.8630108 0.8638447 #>   [15,] 0.8604695 0.8752247 0.9137490 #>   [16,] 1.3065371 1.3098905 1.3111063 #>   [17,] 0.6912169 0.6938718 0.7175971 #>   [18,] 0.8398069 0.8798543 0.9261822 #>   [19,] 0.9146976 0.9256782 0.9266921 #>   [20,] 0.6733797 0.6986113 0.7151660 #>   [21,] 0.8092202 0.8114058 0.8271915 #>   [22,] 0.6148234 0.6182736 0.6214438 #>   [23,] 0.7804826 0.8164415 0.8174655 #>   [24,] 0.6793400 0.6928292 0.7321157 #>   [25,] 0.5725685 0.5890515 0.6145868 #>   [26,] 0.6539028 0.6709709 0.6998450 #>   [27,] 0.5278241 0.5360587 0.5440974 #>   [28,] 0.7281943 0.7802598 0.7816060 #>   [29,] 0.6748527 0.6930720 0.6971248 #>   [30,] 0.8768724 0.9147689 0.9152929 #>   [31,] 1.3064519 1.3124056 1.3258078 #>   [32,] 0.6046667 0.6842926 0.7166093 #>   [33,] 0.7684586 0.7842605 0.8042285 #>   [34,] 1.4794905 1.5053373 1.5178114 #>   [35,] 0.4937491 0.5526056 0.5671623 #>   [36,] 1.0866635 1.1469679 1.1494184 #>   [37,] 0.6987092 0.7199234 0.7234813 #>   [38,] 0.5501656 0.5961887 0.6970598 #>   [39,] 1.1292862 1.1328012 1.1356073 #>   [40,] 1.4679333 1.5024751 1.5479844 #>   [41,] 0.9930902 1.0387343 1.0640069 #>   [42,] 0.8094063 0.8107663 0.8205679 #>   [43,] 1.2391248 1.2484002 1.2493552 #>   [44,] 0.6611327 0.6779283 0.6802713 #>   [45,] 0.6445052 0.6616670 0.7145873 #>   [46,] 0.8662582 0.8670990 0.8787463 #>   [47,] 0.7885522 0.7935397 0.8031600 #>   [48,] 1.4077391 1.4507073 1.4634549 #>   [49,] 0.6445012 0.6491127 0.6571847 #>   [50,] 0.9329811 0.9682188 1.0422726 #>   [51,] 0.8878259 0.9811573 0.9876503 #>   [52,] 0.6986757 0.7106787 0.7109026 #>   [53,] 0.6044438 0.6101109 0.6148438 #>   [54,] 1.0024218 1.0545711 1.0563403 #>   [55,] 1.0660047 1.0695665 1.1096352 #>   [56,] 0.5995372 0.6190179 0.6498654 #>   [57,] 0.8769836 0.8874848 0.8889665 #>   [58,] 0.5792173 0.6091827 0.6180748 #>   [59,] 0.8955099 0.9166728 0.9567858 #>   [60,] 0.5642196 0.5705076 0.6032184 #>   [61,] 0.6949225 0.6951561 0.7031744 #>   [62,] 0.7253122 0.7692283 0.7734379 #>   [63,] 0.8634843 0.8781599 0.9470034 #>   [64,] 0.7645069 0.7931695 0.8010592 #>   [65,] 0.8415193 0.8679829 0.8781599 #>   [66,] 1.3814304 1.4493176 1.5434808 #>   [67,] 0.9094334 0.9200038 0.9864417 #>   [68,] 0.5529043 0.5995157 0.6178488 #>   [69,] 1.8548248 1.9240973 1.9304719 #>   [70,] 0.5461434 0.5687264 0.6069854 #>   [71,] 1.4607301 1.4904319 1.5022366 #>   [72,] 1.3682196 1.3818478 1.4150295 #>   [73,] 0.5200370 0.5410095 0.5843023 #>   [74,] 1.1410576 1.1783805 1.2683637 #>   [75,] 0.9678321 1.0518829 1.0925606 #>   [76,] 0.7492470 0.7680826 0.7940761 #>   [77,] 0.8809453 0.8893316 0.8955099 #>   [78,] 1.3706934 1.3945817 1.3989228 #>   [79,] 0.9239277 0.9463790 1.0651155 #>   [80,] 0.8879854 0.9153954 0.9205986 #>   [81,] 0.6338702 0.6365369 0.6516390 #>   [82,] 0.7572403 0.8188657 0.8245372 #>   [83,] 0.7566546 0.8061132 0.8213529 #>   [84,] 0.6324063 0.6402100 0.6694417 #>   [85,] 1.4369157 1.5424179 1.6007484 #>   [86,] 0.6043491 0.6062547 0.6123628 #>   [87,] 0.4687029 0.4739123 0.5516490 #>   [88,] 0.7281472 0.7316181 0.7411939 #>   [89,] 0.5230441 0.5848544 0.6322754 #>   [90,] 0.8650467 0.8939852 0.9102452 #>   [91,] 0.9173804 0.9608643 0.9887797 #>   [92,] 0.8399389 0.9499998 0.9684579 #>   [93,] 0.5733226 0.5938870 0.5988251 #>   [94,] 1.4794258 1.5171563 1.5560826 #>   [95,] 0.8062760 0.8702995 0.8869224 #>   [96,] 1.3016225 1.3104085 1.3346281 #>   [97,] 0.5978957 0.6079961 0.6236169 #>   [98,] 0.8698193 0.9269305 0.9998940 #>   [99,] 0.4376626 0.4622426 0.5178862 #>  [100,] 0.8512882 0.8597103 0.8850152 #>  [101,] 0.5943796 0.6052661 0.6148438 #>  [102,] 0.7149260 0.7341596 0.7779886 #>  [103,] 1.0467082 1.0578326 1.0698671 #>  [104,] 0.4821654 0.4899225 0.5052953 #>  [105,] 0.7818686 0.7864234 0.8462420 #>  [106,] 1.3160642 1.3251182 1.3670451 #>  [107,] 0.9368121 0.9437938 0.9608681 #>  [108,] 0.6547371 0.6708612 0.6718062 #>  [109,] 0.5280665 0.5477871 0.5569956 #>  [110,] 0.7629003 0.7709045 0.7931252 #>  [111,] 0.4470590 0.4687541 0.4731373 #>  [112,] 0.8009216 0.8617814 0.8634274 #>  [113,] 0.8188241 0.8587330 0.8625752 #>  [114,] 0.6413004 0.6441258 0.6751091 #>  [115,] 2.3553072 2.4095518 2.4265129 #>  [116,] 1.0059506 1.1140944 1.1408231 #>  [117,] 0.6060371 0.6258398 0.6474308 #>  [118,] 1.0100810 1.0119705 1.0148505 #>  [119,] 0.9671949 0.9686485 0.9876911 #>  [120,] 0.7556938 0.7794600 0.7809303 #>  [121,] 0.7835427 0.7937274 0.8245916 #>  [122,] 1.0408571 1.1085680 1.1438995 #>  [123,] 0.5963525 0.5963574 0.6030394 #>  [124,] 0.7962946 0.9049763 0.9311219 #>  [125,] 1.4344444 1.4482169 1.4803446 #>  [126,] 0.5520984 0.5620009 0.6097702 #>  [127,] 0.5926892 0.5966149 0.6040593 #>  [128,] 0.8096551 0.8398018 0.8512415 #>  [129,] 1.3844340 1.3906619 1.4230766 #>  [130,] 0.7245011 0.7322225 0.7798759 #>  [131,] 0.8733493 0.8876986 0.9182193 #>  [132,] 1.6049290 1.6183883 1.6587870 #>  [133,] 1.0495904 1.0760925 1.1134203 #>  [134,] 0.7044543 0.7161418 0.7541234 #>  [135,] 0.8167391 0.8431675 0.8503995 #>  [136,] 0.5133382 0.5251177 0.5288472 #>  [137,] 0.7140631 0.7279112 0.7312792 #>  [138,] 1.3034333 1.3094470 1.3796062 #>  [139,] 0.6897616 0.6954455 0.6995806 #>  [140,] 0.5322763 0.5408426 0.5877109 #>  [141,] 0.7744280 0.8200106 0.8483860 #>  [142,] 0.8116894 0.8145849 0.8902973 #>  [143,] 0.9770629 1.0071554 1.0315763 #>  [144,] 0.9071394 0.9088660 0.9111389 #>  [145,] 0.9799640 0.9979312 1.0565564 #>  [146,] 0.7093182 0.7316385 0.7722771 #>  [147,] 0.8217854 0.8693486 0.8725801 #>  [148,] 1.4333673 1.4623458 1.5203937 #>  [149,] 1.0708505 1.0770390 1.1161778 #>  [150,] 0.8074077 0.8237649 0.8415638 #>  [151,] 0.6447016 0.6651779 0.6757244 #>  [152,] 0.6447016 0.6659486 0.6733797 #>  [153,] 0.8422156 0.8894254 0.9134062 #>  [154,] 0.5360648 0.5878735 0.6241687 #>  [155,] 1.2957213 1.2994506 1.3012413 #>  [156,] 1.4137770 1.4314193 1.4653533 #>  [157,] 1.5888380 1.6186077 1.6188260 #>  [158,] 0.8979834 0.9093517 0.9163685 #>  [159,] 0.5709455 0.5754450 0.5893357 #>  [160,] 0.7401540 0.8025864 0.8201682 #>  [161,] 0.6286531 0.6471289 0.6531815 #>  [162,] 0.7796115 0.7812196 0.7995518 #>  [163,] 0.8673533 0.8875580 0.9404730 #>  [164,] 1.2406593 1.2672375 1.2723607 #>  [165,] 1.6528876 1.6629143 1.6726823 #>  [166,] 1.1420025 1.1810406 1.2042946 #>  [167,] 0.7065253 0.7073833 0.7396854 #>  [168,] 1.4952291 1.4964026 1.5022366 #>  [169,] 0.6598916 0.6831113 0.6985491 #>  [170,] 0.7783833 0.8275288 0.8352369 #>  [171,] 0.6306146 0.6376776 0.6567010 #>  [172,] 1.1213924 1.2393482 1.2733771 #>  [173,] 0.7827401 0.8660309 0.8707721 #>  [174,] 0.5491084 0.5607001 0.5805423 #>  [175,] 0.7073398 0.7276087 0.7409786 #>  [176,] 0.9102452 0.9449416 0.9541921 #>  [177,] 0.7976421 0.8326556 0.8644918 #>  [178,] 0.7627148 0.8010143 0.8056316 #>  [179,] 0.6843805 0.6914209 0.7045538 #>  [180,] 1.2949061 1.3229686 1.3457376 #>  [181,] 0.6201443 0.6211691 0.6219655 #>  [182,] 0.6720118 0.7289844 0.7489201 #>  [183,] 0.6750102 0.6838051 0.6991666 #>  [184,] 0.4202029 0.4430032 0.4489634 #>  [185,] 0.8736706 0.9161987 0.9514165 #>  [186,] 1.1853497 1.1872287 1.1909662 #>  [187,] 1.1465895 1.1896646 1.1988229 #>  [188,] 0.5054301 0.5104940 0.5158165 #>  [189,] 0.7578127 0.7681095 0.7939497 #>  [190,] 0.7231225 0.7471514 0.7677498 #>  [191,] 0.7082754 0.7092109 0.7978335 #>  [192,] 1.4258656 1.4968465 1.5090110 #>  [193,] 0.6655109 0.6949340 0.7477272 #>  [194,] 0.7331270 0.7414068 0.7578560 #>  [195,] 0.5754450 0.5771989 0.6192539 #>  [196,] 0.7088951 0.7218492 0.7346950 #>  [197,] 0.7118589 0.7550044 0.7824041 #>  [198,] 0.9108867 0.9628781 1.0148464 #>  [199,] 0.7890365 0.8148075 0.8696491 #>  [200,] 1.1347281 1.1788225 1.1800027 #>  [201,] 0.6929208 0.7093966 0.7216872 #>  [202,] 1.2452484 1.2650130 1.2868645 #>  [203,] 0.4757264 0.4863049 0.5071780 #>  [204,] 0.7720853 0.7827395 0.8047392 #>  [205,] 0.7968719 0.8642179 0.8651796 #>  [206,] 1.0279147 1.0539925 1.2187201 #>  [207,] 0.5804190 0.5903258 0.6196446 #>  [208,] 0.7184028 0.7356900 0.7783825 #>  [209,] 1.8083955 1.8461060 1.8590855 #>  [210,] 0.4957934 0.5359277 0.5477122 #>  [211,] 0.8783860 0.8813476 0.9353860 #>  [212,] 0.6902231 0.6997929 0.7029867 #>  [213,] 0.7062544 0.7143230 0.7352142 #>  [214,] 0.4166922 0.4263329 0.4411085 #>  [215,] 0.6782718 0.6927255 0.7138302 #>  [216,] 0.9804394 1.0003945 1.0487587 #>  [217,] 0.6958252 0.7072432 0.7162610 #>  [218,] 0.9044921 0.9359785 0.9387735 #>  [219,] 0.8411832 0.8574073 0.9440942 #>  [220,] 0.8327616 0.8334053 0.8593135 #>  [221,] 0.9719441 1.0120039 1.0170636 #>  [222,] 0.6579436 0.7124614 0.7148290 #>  [223,] 0.5538463 0.5933686 0.6722525 #>  [224,] 0.7750935 0.7841913 0.8011961 #>  [225,] 0.6196694 0.6469996 0.6769695 #>  [226,] 0.5929710 0.6207260 0.6249818 #>  [227,] 0.7143196 0.7423866 0.7604276 #>  [228,] 0.5354910 0.5819264 0.5835813 #>  [229,] 1.6336586 1.6422782 1.6511372 #>  [230,] 1.0270213 1.0318228 1.0401229 #>  [231,] 0.8171142 0.8931313 0.9559339 #>  [232,] 0.7997401 0.8009670 0.9030514 #>  [233,] 0.5352368 0.5424584 0.5587621 #>  [234,] 0.7834398 0.8254703 0.8597103 #>  [235,] 0.7455176 0.7622745 0.7728302 #>  [236,] 0.4582335 0.4621511 0.5185057 #>  [237,] 0.5665978 0.6100151 0.6123890 #>  [238,] 0.8442071 0.8467096 0.8613278 #>  [239,] 0.9448563 1.0181164 1.0216475 #>  [240,] 0.9608500 0.9654572 0.9699256 #>  [241,] 0.7818323 0.8047392 0.8082620 #>  [242,] 0.8229440 0.8352722 0.8455183 #>  [243,] 0.6470696 0.7065688 0.7346868 #>  [244,] 0.9987688 1.0066370 1.0205375 #>  [245,] 0.5620250 0.5647730 0.5728368 #>  [246,] 1.1347281 1.1359437 1.1677108 #>  [247,] 1.8607677 1.9198720 1.9741356 #>  [248,] 0.7781398 0.8050348 0.8317483 #>  [249,] 0.8193360 0.8347437 0.8643172 #>  [250,] 1.2668090 1.3247734 1.3635417 #>  [251,] 0.5082511 0.5379035 0.5524690 #>  [252,] 1.3301343 1.3349423 1.3452622 #>  [253,] 0.8061577 0.8192996 0.8479771 #>  [254,] 0.6150916 0.6490025 0.6526339 #>  [255,] 0.6065043 0.6358426 0.6364884 #>  [256,] 0.5658276 0.5727006 0.5829554 #>  [257,] 0.7756406 0.7800627 0.8009187 #>  [258,] 0.6418126 0.6689522 0.6928292 #>  [259,] 1.2234967 1.2262780 1.2537752 #>  [260,] 0.8056316 0.8283056 0.8323698 #>  [261,] 0.6664063 0.6965775 0.7100085 #>  [262,] 0.5462468 0.5924471 0.6489316 #>  [263,] 1.3952511 1.4074335 1.4099715 #>  [264,] 0.5460027 0.5517136 0.5694520 #>  [265,] 0.7019963 0.7243548 0.7642284 #>  [266,] 0.6172277 0.6183536 0.6510269 #>  [267,] 1.1379802 1.1408231 1.1739286 #>  [268,] 0.6650984 0.6738778 0.6793637 #>  [269,] 0.4972470 0.5001496 0.5375364 #>  [270,] 0.7162678 0.7786019 0.8606209 #>  [271,] 0.9597881 0.9639867 0.9991314 #>  [272,] 0.6839352 0.7070979 0.7241747 #>  [273,] 0.6150004 0.6539028 0.6805466 #>  [274,] 0.7189297 0.7589982 0.8113608 #>  [275,] 0.9675785 0.9829833 0.9930443 #>  [276,] 0.6071412 0.6121929 0.6371915 #>  [277,] 1.4045956 1.4778528 1.4903159 #>  [278,] 0.6921031 0.7118069 0.7457198 #>  [279,] 0.6328397 0.6582722 0.6655109 #>  [280,] 1.1788225 1.2369810 1.2437030 #>  [281,] 1.0518829 1.0932076 1.0965775 #>  [282,] 1.1896477 1.1919227 1.2132658 #>  [283,] 0.6721696 0.6740065 0.7031006 #>  [284,] 1.2092376 1.2304764 1.2789422 #>  [285,] 0.9337919 0.9521159 0.9973786 #>  [286,] 0.9140970 0.9491233 0.9497281 #>  [287,] 0.8242632 0.8443680 0.8706874 #>  [288,] 1.4172896 1.4614011 1.4681546 #>  [289,] 0.8979957 0.8980037 0.9414576 #>  [290,] 0.6890346 0.6952599 0.6990303 #>  [291,] 0.9925741 1.0059826 1.0066862 #>  [292,] 1.0071872 1.0241391 1.0741099 #>  [293,] 0.6219655 0.6221267 0.6242855 #>  [294,] 0.8131705 0.8527071 0.8765571 #>  [295,] 0.6556528 0.7112374 0.7209597 #>  [296,] 0.7460321 0.7474295 0.7767667 #>  [297,] 0.7205670 0.8118935 0.8293329 #>  [298,] 0.6445052 0.6614193 0.7812895 #>  [299,] 1.2804403 1.2817392 1.3160075 #>  [300,] 0.7743777 0.8863783 0.8999749 #>  [301,] 0.6941569 0.7030658 0.7043192 #>  [302,] 0.9979312 1.0040171 1.0541440 #>  [303,] 1.5505570 1.5694343 1.6425128 #>  [304,] 1.0689274 1.1625991 1.1766297 #>  [305,] 1.2141668 1.2345665 1.2362496 #>  [306,] 0.9113773 0.9270363 0.9554519 #>  [307,] 0.5658030 0.5896249 0.6003563 #>  [308,] 0.6926693 0.7495353 0.7564179 #>  [309,] 0.5143248 0.5367031 0.5748045 #>  [310,] 0.9051007 0.9183579 0.9375121 #>  [311,] 0.8365417 0.8415055 0.8543164 #>  [312,] 0.7079109 0.7151660 0.7454736 #>  [313,] 0.5789785 0.6028411 0.6433608 #>  [314,] 0.6341471 0.6368329 0.6564119 #>  [315,] 0.5314887 0.5493388 0.5590682 #>  [316,] 0.9225089 0.9326026 0.9525176 #>  [317,] 0.7313332 0.7397172 0.7489930 #>  [318,] 0.7028761 0.7146700 0.7237384 #>  [319,] 1.0737203 1.1004118 1.1078451 #>  [320,] 1.6173196 1.6238673 1.6443415 #>  [321,] 0.8940875 0.8945241 0.9121029 #>  [322,] 1.0564177 1.0672812 1.0715833 #>  [323,] 0.7234003 0.7531969 0.7857209 #>  [324,] 0.4942339 0.5096598 0.5450156 #>  [325,] 0.8370578 0.8869222 0.9212480 #>  [326,] 0.6907378 0.7600961 0.7924004 #>  [327,] 0.7811872 0.7842605 0.7951415 #>  [328,] 0.5680417 0.6093011 0.6130959 #>  [329,] 0.7549709 0.7592496 0.8058896 #>  [330,] 0.5930548 0.6046667 0.6323279 #>  [331,] 0.6768245 0.6883407 0.7271920 #>  [332,] 0.7563115 0.7827019 0.7833402 #>  [333,] 1.1223747 1.1239328 1.1485117 #>  [334,] 0.6391645 0.6517667 0.6895271 #>  [335,] 0.6469657 0.6538679 0.6605214 #>  [336,] 0.8869416 0.9150744 0.9154203 #>  [337,] 0.5288472 0.5316107 0.5852682 #>  [338,] 1.0975237 1.1391590 1.1403101 #>  [339,] 0.7691296 0.7945243 0.7947928 #>  [340,] 0.8576985 0.8704060 0.8831571 #>  [341,] 0.8299798 0.8489362 0.8556463 #>  [342,] 0.9874539 1.0304065 1.0722036 #>  [343,] 0.9038509 0.9252040 0.9578218 #>  [344,] 0.5367031 0.5437988 0.5574227 #>  [345,] 0.5944434 0.5967284 0.6613294 #>  [346,] 0.7097406 0.7619251 0.8118762 #>  [347,] 1.7264916 1.7325509 1.7351884 #>  [348,] 0.8187118 0.8685058 0.8830286 #>  [349,] 1.0760925 1.0943553 1.1432573 #>  [350,] 0.6356741 0.6357374 0.6375332 #>  [351,] 0.7676658 0.7796153 0.8001151 #>  [352,] 0.7649635 0.8916589 0.9332864 #>  [353,] 0.5311375 0.5326891 0.6113846 #>  [354,] 0.6666220 0.6951145 0.6978031 #>  [355,] 0.9048954 0.9262423 0.9673967 #>  [356,] 0.7161684 0.7453052 0.7673022 #>  [357,] 0.4911228 0.5283702 0.5447773 #>  [358,] 1.2686896 1.3155450 1.3285775 #>  [359,] 0.5552808 0.5962895 0.6047703 #>  [360,] 0.6922475 0.6999212 0.7328775 #>  [361,] 0.7611458 0.7698657 0.8161643 #>  [362,] 0.4872605 0.5032338 0.5493388 #>  [363,] 0.6477561 0.6503599 0.6825710 #>  [364,] 0.7985786 0.8181552 0.8372399 #>  [365,] 1.1181000 1.1201461 1.1281676 #>  [366,] 1.0165219 1.0365262 1.0666473 #>  [367,] 1.5194579 1.5682205 1.6174053 #>  [368,] 0.7003314 0.7183623 0.7430333 #>  [369,] 0.5454793 0.5695168 0.5713032 #>  [370,] 0.8681260 0.9080478 0.9371019 #>  [371,] 0.6919888 0.7008377 0.7551310 #>  [372,] 0.8972163 0.9580956 0.9745452 #>  [373,] 0.9464069 1.0508019 1.0767289 #>  [374,] 1.0005153 1.0435977 1.0854184 #>  [375,] 0.8272062 0.8377332 0.8574073 #>  [376,] 1.2925339 1.3450001 1.3531502 #>  [377,] 0.8150537 0.9582250 0.9773437 #>  [378,] 1.1933826 1.2428900 1.2732573 #>  [379,] 0.6366351 0.6556528 0.6783817 #>  [380,] 0.7419631 0.7671272 0.7825071 #>  [381,] 0.9032309 0.9596740 0.9753834 #>  [382,] 0.7537328 0.7567008 0.7896661 #>  [383,] 0.6945709 0.7063454 0.7994627 #>  [384,] 1.1144786 1.1155881 1.1214182 #>  [385,] 1.4126979 1.4204582 1.4300904 #>  [386,] 0.8906982 0.9449329 0.9731904 #>  [387,] 1.1653903 1.1827779 1.2082735 #>  [388,] 0.6225350 0.6242412 0.6282361 #>  [389,] 0.7449617 0.7515773 0.7673175 #>  [390,] 0.6799858 0.7228406 0.7393895 #>  [391,] 1.2621043 1.2890456 1.2988083 #>  [392,] 1.2366961 1.2509525 1.2934878 #>  [393,] 0.5963525 0.6183394 0.6487343 #>  [394,] 0.5665968 0.5914806 0.5937543 #>  [395,] 0.6838051 0.6954455 0.6983704 #>  [396,] 0.6384190 0.6568841 0.6955580 #>  [397,] 0.5447773 0.5755845 0.5789137 #>  [398,] 1.0672812 1.0741042 1.0794596 #>  [399,] 0.6243520 0.6301182 0.6357374 #>  [400,] 0.6792259 0.6795042 0.7337607 #>  [401,] 0.7174354 0.7228217 0.7294996 #>  [402,] 0.7166397 0.7239848 0.7376579 #>  [403,] 1.0589527 1.0715833 1.0778385 #>  [404,] 0.6538957 0.6580960 0.6920874 #>  [405,] 0.6500378 0.7460321 0.8462229 #>  [406,] 0.7060823 0.7281472 0.7368302 #>  [407,] 1.0089310 1.0327896 1.0347018 #>  [408,] 0.9785581 0.9814212 1.0229813 #>  [409,] 0.6989665 0.7604329 0.7825897 #>  [410,] 0.7248751 0.7717124 0.7991127 #>  [411,] 1.0222689 1.1059094 1.1270150 #>  [412,] 0.7057625 0.7133670 0.7223934 #>  [413,] 0.9731904 0.9734559 1.0549680 #>  [414,] 0.6739851 0.6831493 0.6877890 #>  [415,] 0.7794488 0.7953891 0.8788907 #>  [416,] 0.8116894 0.8307585 0.8321857 #>  [417,] 1.5131040 1.5602191 1.5881922 #>  [418,] 1.3404750 1.4104426 1.4554161 #>  [419,] 0.6483968 0.6557040 0.6593485 #>  [420,] 0.4766208 0.4898483 0.5196887 #>  [421,] 0.9313517 0.9626067 1.0196284 #>  [422,] 0.7058653 0.7286938 0.7455176 #>  [423,] 0.9007919 0.9541921 0.9804693 #>  [424,] 0.8648500 0.8827931 0.8875355 #>  [425,] 0.5404717 0.5815883 0.5827285 #>  [426,] 0.6659868 0.6759419 0.6956074 #>  [427,] 0.9894996 1.0266344 1.0356201 #>  [428,] 0.7005526 0.7079180 0.7818590 #>  [429,] 0.7713110 0.7781398 0.8009857 #>  [430,] 1.1258967 1.1603549 1.1646236 #>  [431,] 0.7532404 0.7669136 0.7673328 #>  [432,] 0.7977278 0.7987950 0.8181552 #>  [433,] 0.9339429 0.9360201 0.9493628 #>  [434,] 0.9173553 0.9962313 1.0327673 #>  [435,] 1.0915902 1.1207887 1.1518124 #>  [436,] 0.6406322 0.6547371 0.6551748 #>  [437,] 0.8471469 0.8709978 0.8827553 #>  [438,] 0.9460691 0.9471284 0.9572736 #>  [439,] 0.9858135 0.9910196 1.1093064 #>  [440,] 1.1203439 1.1415306 1.1443436 #>  [441,] 0.7061825 0.7266676 0.7879852 #>  [442,] 1.5446834 1.5546175 1.5587074 #>  [443,] 1.0736583 1.1519699 1.2017920 #>  [444,] 0.5940878 0.6421347 0.6692173 #>  [445,] 0.8619688 0.8726578 0.8808026 #>  [446,] 0.8488269 0.9049651 0.9265314 #>  [447,] 0.6774777 0.6992251 0.6997957 #>  [448,] 0.6692173 0.6710689 0.6738141 #>  [449,] 0.8792078 0.9010216 0.9032309 #>  [450,] 1.0216509 1.0391173 1.0703283 #>  [451,] 0.5812330 0.6485260 0.6847315 #>  [452,] 0.8632371 0.8687217 0.9517686 #>  [453,] 0.6249818 0.6674030 0.6787057 #>  [454,] 0.9897138 0.9970372 1.0039083 #>  [455,] 0.6735760 0.6893094 0.7162412 #>  [456,] 0.6882130 0.7220266 0.7383734 #>  [457,] 1.4482169 1.5273392 1.5464030 #>  [458,] 0.5924471 0.6921679 0.6942757 #>  [459,] 0.7954533 0.8019226 0.8229440 #>  [460,] 0.8515317 0.8783783 0.8872312 #>  [461,] 1.1159328 1.1276155 1.1335180 #>  [462,] 0.7612039 0.7780813 0.8042285 #>  [463,] 1.1645758 1.1810814 1.2064471 #>  [464,] 0.5343068 0.5750573 0.5812330 #>  [465,] 1.1850781 1.2582286 1.3208842 #>  [466,] 0.6464114 0.6551757 0.6683299 #>  [467,] 0.6123440 0.6185293 0.6211592 #>  [468,] 0.9024496 0.9032457 0.9178722 #>  [469,] 1.0744012 1.0937510 1.0958733 #>  [470,] 1.4357354 1.4376833 1.4517825 #>  [471,] 1.4451279 1.4479372 1.4656745 #>  [472,] 1.0498525 1.0537713 1.0992422 #>  [473,] 0.6616665 0.6650388 0.6697001 #>  [474,] 0.6485260 0.7466120 0.7516992 #>  [475,] 0.5774320 0.6029263 0.6210192 #>  [476,] 1.0644415 1.0862717 1.1113589 #>  [477,] 0.7316664 0.7377168 0.7715127 #>  [478,] 0.8268478 0.8387088 0.8517275 #>  [479,] 0.7450993 0.7568043 0.7669529 #>  [480,] 0.6243520 0.6261196 0.6267955 #>  [481,] 0.5977854 0.6024681 0.6319333 #>  [482,] 0.8678105 0.8781990 0.8891272 #>  [483,] 1.3158422 1.3457326 1.3479068 #>  [484,] 0.9117465 0.9203858 0.9463826 #>  [485,] 1.0347447 1.0421586 1.0603182 #>  [486,] 0.5162347 0.5651105 0.5850598 #>  [487,] 0.7248135 0.7573950 0.7737482 #>  [488,] 0.5860136 0.5995073 0.6001240 #>  [489,] 0.7799218 0.8064655 0.8572411 #>  [490,] 0.5398385 0.5815915 0.6507910 #>  [491,] 1.1991350 1.2266487 1.2499107 #>  [492,] 1.6230983 1.7764893 1.7827310 #>  [493,] 1.3547577 1.3598384 1.3801995 #>  [494,] 0.8092965 0.8200106 0.8454222 #>  [495,] 0.7555418 0.7676658 0.7689899 #>  [496,] 0.8296645 0.8392597 0.8802704 #>  [497,] 0.9978232 1.0120039 1.0976526 #>  [498,] 0.5316107 0.5941175 0.5974070 #>  [499,] 0.6242892 0.6638581 0.6700194 #>  [500,] 0.9731824 1.0135963 1.0173753 #>  [501,] 0.7245011 0.7289844 0.7409604 #>  [502,] 0.5348271 0.5634024 0.5748955 #>  [503,] 0.7067659 0.7236569 0.7287535 #>  [504,] 1.4655879 1.4909894 1.4958995 #>  [505,] 0.4694917 0.4735463 0.4821654 #>  [506,] 1.7214508 1.7408918 1.8096273 #>  [507,] 0.6291220 0.6338639 0.6485809 #>  [508,] 0.9526813 0.9962653 1.0353847 #>  [509,] 0.5424332 0.5762535 0.6304807 #>  [510,] 0.7271593 0.7555221 0.7607862 #>  [511,] 0.6399055 0.6795020 0.7132861 #>  [512,] 0.6321622 0.6350742 0.6498817 #>  [513,] 0.7272689 0.7273857 0.7544028 #>  [514,] 0.9559485 0.9725886 1.0274634 #>  [515,] 0.5359727 0.5868550 0.5884079 #>  [516,] 0.7654560 0.7699362 0.7803677 #>  [517,] 1.0287029 1.0452668 1.0595974 #>  [518,] 0.5104143 0.5260683 0.5493533 #>  [519,] 1.2548393 1.3354119 1.3603343 #>  [520,] 1.4500009 1.4687641 1.4978060 #>  [521,] 0.6947013 0.7220266 0.7229896 #>  [522,] 0.5813948 0.5938262 0.6003125 #>  [523,] 0.9715095 0.9747171 0.9801391 #>  [524,] 0.9559485 0.9637463 0.9790078 #>  [525,] 1.2024121 1.2038515 1.2656031 #>  [526,] 0.6888105 0.6949225 0.7213451 #>  [527,] 0.6742786 0.7050020 0.7537362 #>  [528,] 0.6533656 0.6802713 0.6860174 #>  [529,] 1.0030132 1.0147527 1.0412560 #>  [530,] 0.9012313 0.9061559 0.9422948 #>  [531,] 0.6517317 0.6942757 0.7001986 #>  [532,] 2.4544846 2.5498968 2.5626175 #>  [533,] 0.5245729 0.5272258 0.5348859 #>  [534,] 0.8938408 0.8960241 0.9769167 #>  [535,] 0.7281142 0.7382776 0.7443700 #>  [536,] 0.6825710 0.6829990 0.7210127 #>  [537,] 0.7800539 0.7818994 0.7880828 #>  [538,] 0.9056409 0.9168421 0.9208019 #>  [539,] 0.5143188 0.5248470 0.5391444 #>  [540,] 0.6012933 0.6453389 0.6724257 #>  [541,] 0.6247457 0.6560780 0.6646851 #>  [542,] 0.7750549 0.7899159 0.7995312 #>  [543,] 0.7209141 0.7445328 0.7541370 #>  [544,] 1.6045664 1.6208457 1.6212742 #>  [545,] 0.7940759 0.8052683 0.8135054 #>  [546,] 1.2658108 1.2721049 1.2747134 #>  [547,] 0.7243391 0.7481203 0.7520723 #>  [548,] 0.6798685 0.7317874 0.7354523 #>  [549,] 0.7028183 0.7331276 0.7679870 #>  [550,] 0.6247604 0.6388143 0.6576271 #>  [551,] 0.8077832 0.8489362 0.8719576 #>  [552,] 1.4216352 1.4377535 1.4513855 #>  [553,] 0.7783565 0.7813288 0.7823563 #>  [554,] 0.8079088 0.8559246 0.8730609 #>  [555,] 1.6766190 1.7415053 1.7530709 #>  [556,] 0.7510087 0.7940761 0.8323544 #>  [557,] 0.8312327 0.8357660 0.8362913 #>  [558,] 0.9694720 0.9780194 0.9971291 #>  [559,] 0.7857209 0.7884788 0.8192356 #>  [560,] 0.8328577 0.8348675 0.8680510 #>  [561,] 0.6362685 0.6370831 0.6674070 #>  [562,] 0.9129152 0.9322047 0.9878265 #>  [563,] 0.5986086 0.6742315 0.6758198 #>  [564,] 0.8527133 0.8617814 0.8768915 #>  [565,] 0.9774214 1.0276286 1.0565564 #>  [566,] 0.9071958 0.9141770 0.9154346 #>  [567,] 0.8276648 0.8402657 0.8429410 #>  [568,] 0.5644074 0.5671997 0.5722403 #>  [569,] 0.7527072 0.7947253 0.8178338 #>  [570,] 1.2609881 1.2696087 1.3088383 #>  [571,] 0.7480014 0.7514989 0.8013295 #>  [572,] 0.7832014 0.7838781 0.8159634 #>  [573,] 0.7443688 0.7654560 0.8420109 #>  [574,] 0.5844200 0.6028411 0.6211592 #>  [575,] 0.5294711 0.5493533 0.6029522 #>  [576,] 0.7277475 0.8009216 0.8762477 #>  [577,] 0.6655405 0.7113766 0.7117275 #>  [578,] 0.6489526 0.6559265 0.6634870 #>  [579,] 0.5968020 0.6048130 0.6207101 #>  [580,] 0.5435239 0.5687243 0.5933686 #>  [581,] 0.8924395 0.8948195 0.9056106 #>  [582,] 0.5371303 0.5463532 0.5621064 #>  [583,] 0.8551928 0.8587182 0.8709978 #>  [584,] 0.7915185 0.8173002 0.8882870 #>  [585,] 1.7046636 1.7638000 1.7741316 #>  [586,] 1.4326681 1.4765726 1.5238026 #>  [587,] 0.9387735 0.9390758 0.9572736 #>  [588,] 0.5333099 0.5345084 0.5598300 #>  [589,] 0.5618358 0.5758257 0.5835593 #>  [590,] 0.5708487 0.5932893 0.5951938 #>  [591,] 0.9880058 0.9954543 1.0188347 #>  [592,] 0.5318616 0.5360403 0.5437750 #>  [593,] 0.9318473 0.9364485 0.9392272 #>  [594,] 0.8431052 0.8687010 0.8727864 #>  [595,] 0.9301177 0.9469974 1.0790539 #>  [596,] 0.5766436 0.6375046 0.6586092 #>  [597,] 1.2544670 1.3160642 1.3221553 #>  [598,] 0.6060676 0.6138240 0.6307677 #>  [599,] 0.6477847 0.6501165 0.6773395 #>  [600,] 0.6387600 0.6456049 0.6680010 #>  [601,] 0.6757244 0.6885260 0.7019675 #>  [602,] 0.8809838 0.8920791 0.9446721 #>  [603,] 0.6214852 0.6530676 0.6706020 #>  [604,] 0.5647149 0.5843023 0.5883311 #>  [605,] 0.6955837 0.7063454 0.7124518 #>  [606,] 1.3579266 1.3664572 1.3871119 #>  [607,] 0.6926693 0.7031744 0.7157081 #>  [608,] 0.8092559 0.8527133 0.9283469 #>  [609,] 1.2627175 1.2921734 1.3457721 #>  [610,] 0.5687171 0.5750573 0.6109400 #>  [611,] 0.8479869 0.8493814 0.8659732 #>  [612,] 0.5819264 0.6357865 0.6723986 #>  [613,] 1.5738252 1.6321635 1.6898695 #>  [614,] 0.8700979 0.9227553 0.9565799 #>  [615,] 0.7840359 0.8184724 0.8248483 #>  [616,] 1.2153953 1.2163380 1.2600990 #>  [617,] 0.6101109 0.6236056 0.6266610 #>  [618,] 0.8075322 0.8229050 0.8622395 #>  [619,] 1.4856584 1.5506482 1.5551642 #>  [620,] 1.0359246 1.0567177 1.0835493 #>  [621,] 1.7764893 1.7867437 1.9503246 #>  [622,] 0.9627677 0.9791161 1.0102294 #>  [623,] 1.2324010 1.2384171 1.2537752 #>  [624,] 0.9724827 0.9861623 0.9965534 #>  [625,] 0.6839352 0.6850524 0.7101241 #>  [626,] 0.7723267 0.8772800 0.9019849 #>  [627,] 0.9688171 1.0330679 1.0412812 #>  [628,] 0.9074935 0.9169954 1.0637500 #>  [629,] 0.7182690 0.7183011 0.7299974 #>  [630,] 0.8084917 0.8164701 0.8190512 #>  [631,] 0.5429286 0.6075419 0.6176107 #>  [632,] 1.2801732 1.3713425 1.3814946 #>  [633,] 0.8484116 0.8607765 0.8657827 #>  [634,] 0.6618239 0.6904394 0.7049516 #>  [635,] 0.9017584 1.0074725 1.0696684 #>  [636,] 0.4687029 0.5082511 0.5259838 #>  [637,] 0.4722326 0.4778906 0.4802871 #>  [638,] 0.9190518 0.9983273 0.9997425 #>  [639,] 0.6165452 0.6470694 0.6747091 #>  [640,] 1.0867407 1.1184001 1.1218529 #>  [641,] 0.7003314 0.7065768 0.7545348 #>  [642,] 0.9735087 0.9795846 0.9844423 #>  [643,] 1.7510278 1.7594520 1.7787278 #>  [644,] 0.5364413 0.5751218 0.6062547 #>  [645,] 0.5065231 0.5131427 0.5256155 #>  [646,] 0.6839586 0.6953999 0.7189738 #>  [647,] 1.4280523 1.4330182 1.4436783 #>  [648,] 0.7680043 0.7961847 0.8059000 #>  [649,] 1.1075753 1.1177160 1.1791160 #>  [650,] 1.9892676 2.0083428 2.0130274 #>  [651,] 0.5282865 0.5763245 0.5920885 #>  [652,] 0.6768245 0.6985124 0.7971264 #>  [653,] 0.7157081 0.8363665 0.9175255 #>  [654,] 0.7248804 0.7506064 0.7664869 #>  [655,] 0.6115604 0.6340321 0.6579276 #>  [656,] 0.8471519 0.8587330 0.8597259 #>  [657,] 1.4216352 1.4522303 1.4615488 #>  [658,] 0.5860136 0.5879921 0.5938262 #>  [659,] 0.5927614 0.5938870 0.5952263 #>  [660,] 1.4884896 1.4922849 1.6105829 #>  [661,] 0.7050020 0.7367133 0.7370457 #>  [662,] 0.7963522 0.8125625 0.8128559 #>  [663,] 0.5813527 0.6257655 0.6323340 #>  [664,] 0.4639577 0.4658191 0.5136270 #>  [665,] 1.1004318 1.1063474 1.1481558 #>  [666,] 0.7077038 0.7282660 0.7418317 #>  [667,] 0.5948233 0.6456813 0.6744591 #>  [668,] 0.7975687 0.8058337 0.8164317 #>  [669,] 1.5411267 1.5669990 1.5712749 #>  [670,] 0.6850768 0.6918909 0.7001372 #>  [671,] 0.8314551 0.8869416 0.9154430 #>  [672,] 0.7915488 0.7983345 0.8095752 #>  [673,] 0.5973707 0.6280290 0.7206088 #>  [674,] 0.7404982 0.7479717 0.7604653 #>  [675,] 0.6501147 0.7227608 0.7303598 #>  [676,] 0.7295974 0.7343566 0.7396311 #>  [677,] 0.8073717 0.8093631 0.8240438 #>  [678,] 1.0534804 1.0743346 1.0815421 #>  [679,] 1.0247871 1.0420089 1.0504708 #>  [680,] 0.6073447 0.6244582 0.6328397 #>  [681,] 1.0089310 1.0281184 1.1316345 #>  [682,] 1.2726939 1.3049356 1.3221101 #>  [683,] 0.8145954 0.9113773 0.9322047 #>  [684,] 1.1200697 1.1262620 1.1437638 #>  [685,] 1.2288130 1.2838237 1.2873281 #>  [686,] 0.7906242 0.7976421 0.8516787 #>  [687,] 0.8521705 0.8707721 0.8917684 #>  [688,] 0.5628950 0.5665090 0.5995157 #>  [689,] 1.0882928 1.0902924 1.1701973 #>  [690,] 0.9074935 0.9470913 0.9633112 #>  [691,] 0.7549709 0.7813686 0.8525340 #>  [692,] 0.7843773 0.7853475 0.8227452 #>  [693,] 0.8330849 0.8445686 0.8961796 #>  [694,] 0.5145955 0.5168323 0.5915079 #>  [695,] 1.5028273 1.5407856 1.5804895 #>  [696,] 0.6528062 0.6933638 0.6979360 #>  [697,] 1.0552766 1.0640774 1.0759285 #>  [698,] 0.8604826 0.8710552 0.9037063 #>  [699,] 0.5816697 0.5994740 0.6566061 #>  [700,] 0.5179615 0.5367062 0.5578080 #>  [701,] 0.8358272 0.8560936 0.8609650 #>  [702,] 0.4850645 0.4862774 0.4979620 #>  [703,] 0.7062783 0.7643279 0.7866445 #>  [704,] 0.7792967 0.7795696 0.7913544 #>  [705,] 0.7166892 0.7177396 0.7214244 #>  [706,] 1.5217980 1.5499594 1.5623959 #>  [707,] 0.5112735 0.5227061 0.5244547 #>  [708,] 1.1418071 1.1967855 1.1970951 #>  [709,] 0.5781946 0.5790840 0.5840998 #>  [710,] 0.6552194 0.6645044 0.6654592 #>  [711,] 0.5673982 0.6092266 0.6211691 #>  [712,] 1.5992964 1.6395861 1.6597156 #>  [713,] 0.9423454 0.9449329 0.9460997 #>  [714,] 0.7483279 0.7494075 0.7558050 #>  [715,] 0.5858063 0.5994840 0.6389682 #>  [716,] 0.7351977 0.7399593 0.7407414 #>  [717,] 0.5786389 0.6046339 0.6715148 #>  [718,] 0.8865455 0.8996103 0.9069286 #>  [719,] 0.8209750 0.8729796 0.9121587 #>  [720,] 0.5517136 0.5805423 0.5974070 #>  [721,] 1.1459649 1.1984371 1.2354175 #>  [722,] 1.2516922 1.3036398 1.3222814 #>  [723,] 0.5371303 0.5462468 0.5547554 #>  [724,] 0.6728970 0.6773887 0.6824163 #>  [725,] 0.7217351 0.7392188 0.7643825 #>  [726,] 0.6887731 0.7267878 0.7343449 #>  [727,] 0.6166906 0.6191298 0.6224263 #>  [728,] 0.7416918 0.8627908 0.9063635 #>  [729,] 0.5025199 0.5696584 0.5762564 #>  [730,] 0.8201682 0.8263173 0.8462229 #>  [731,] 0.5723363 0.6877905 0.7264717 #>  [732,] 0.7116366 0.7213932 0.7498573 #>  [733,] 0.6159748 0.6322242 0.6460116 #>  [734,] 0.6648181 0.6924021 0.6966209 #>  [735,] 0.5321106 0.5397332 0.5839408 #>  [736,] 0.9226024 0.9428737 0.9526159 #>  [737,] 0.5307273 0.5438791 0.5611821 #>  [738,] 0.5277055 0.5767315 0.5783871 #>  [739,] 0.8539935 0.8540357 0.8599602 #>  [740,] 1.6115509 1.6484834 1.7789439 #>  [741,] 0.7189738 0.7256597 0.7900402 #>  [742,] 0.6005322 0.6107820 0.6119761 #>  [743,] 1.7168310 1.8105413 1.8159196 #>  [744,] 0.4421812 0.4423412 0.4553951 #>  [745,] 0.6001244 0.6099383 0.6120780 #>  [746,] 0.5539264 0.5598236 0.6145132 #>  [747,] 0.8659840 0.8669079 0.8856476 #>  [748,] 0.7788444 0.7846889 0.7918240 #>  [749,] 1.0644415 1.1155605 1.1487601 #>  [750,] 0.7486953 0.7649082 0.7995738 #>  [751,] 1.1620017 1.2007918 1.2025426 #>  [752,] 1.1501043 1.1541119 1.2179598 #>  [753,] 0.8022862 0.8025281 0.8175027 #>  [754,] 0.7343004 0.7352712 0.7388200 #>  [755,] 1.1858248 1.2254284 1.2777028 #>  [756,] 0.9267003 0.9469319 0.9725415 #>  [757,] 0.5944434 0.6017170 0.6767158 #>  [758,] 0.6862971 0.7012564 0.8015410 #>  [759,] 1.5282236 1.5414558 1.5489588 #>  [760,] 0.6965775 0.6982953 0.7154979 #>  [761,] 0.4797377 0.4997326 0.5051801 #>  [762,] 0.5858063 0.5986086 0.6090776 #>  [763,] 0.4842068 0.5314122 0.5468493 #>  [764,] 0.6947013 0.7073833 0.7089804 #>  [765,] 0.5987292 0.6247457 0.6442031 #>  [766,] 0.8062650 0.8630118 0.8783332 #>  [767,] 1.0387436 1.0881568 1.1010947 #>  [768,] 1.2419187 1.2540241 1.2643233 #>  [769,] 0.6504508 0.6621977 0.7261667 #>  [770,] 0.9943000 0.9993631 1.0004769 #>  [771,] 1.0854959 1.1024631 1.1176087 #>  [772,] 0.7796153 0.7880002 0.8202009 #>  [773,] 0.7850919 0.8035490 0.8056758 #>  [774,] 0.6736198 0.7314470 0.8098871 #>  [775,] 0.6486161 0.6567175 0.6616670 #>  [776,] 0.8934853 0.9842362 1.0053512 #>  [777,] 0.5782917 0.5929548 0.6165452 #>  [778,] 1.5740289 1.6004737 1.6334532 #>  [779,] 0.7218307 0.7472796 0.7557045 #>  [780,] 0.6243981 0.6265967 0.6286531 #>  [781,] 1.0408335 1.0625865 1.0978882 #>  [782,] 0.9335422 0.9488705 0.9671533 #>  [783,] 1.0566861 1.0671804 1.1001340 #>  [784,] 0.8897325 0.9929044 1.0222983 #>  [785,] 0.5911468 0.6240415 0.6314760 #>  [786,] 1.0485414 1.0961376 1.0993201 #>  [787,] 0.7798759 0.7814655 0.8810015 #>  [788,] 0.7484164 0.7531969 0.7623723 #>  [789,] 0.7871180 0.7913768 0.8107663 #>  [790,] 0.6785940 0.6883679 0.7225323 #>  [791,] 0.4796302 0.5278241 0.5400914 #>  [792,] 0.9695905 0.9724418 1.0200166 #>  [793,] 0.7799889 0.8312608 0.8436468 #>  [794,] 0.6572488 0.6613294 0.7184205 #>  [795,] 0.8224355 0.8667615 0.8679090 #>  [796,] 0.5421913 0.6116788 0.6131649 #>  [797,] 1.7437359 1.7785558 1.8514551 #>  [798,] 0.8426772 0.8443680 0.8604788 #>  [799,] 0.5577568 0.5747974 0.5748045 #>  [800,] 0.4470590 0.4489634 0.4568369 #>  [801,] 0.7616970 0.7720853 0.7912353 #>  [802,] 0.7118589 0.7846889 0.8378720 #>  [803,] 0.6685145 0.6705743 0.7243548 #>  [804,] 1.0289878 1.0650789 1.1060827 #>  [805,] 0.5721337 0.6124032 0.6136595 #>  [806,] 0.7464540 0.7960386 0.9000882 #>  [807,] 0.6071412 0.6895294 0.6956838 #>  [808,] 0.5980153 0.6030394 0.6096247 #>  [809,] 0.7346868 0.7919818 0.7939642 #>  [810,] 0.9173553 0.9342517 0.9362462 #>  [811,] 0.7910690 0.7982083 0.8246839 #>  [812,] 1.2495344 1.3415290 1.3806469 #>  [813,] 0.5610009 0.5665950 0.5720446 #>  [814,] 1.1601059 1.3000811 1.3038405 #>  [815,] 0.6416228 0.6663114 0.6784081 #>  [816,] 0.5722757 0.5821153 0.5902164 #>  [817,] 0.7373169 0.7429993 0.7952367 #>  [818,] 0.5843510 0.5846037 0.5867947 #>  [819,] 1.3708352 1.3866011 1.3943978 #>  [820,] 1.3816543 1.4567272 1.4576678 #>  [821,] 1.1214216 1.1333132 1.1765598 #>  [822,] 0.7343290 0.8168545 0.8704287 #>  [823,] 0.8863183 0.9098610 0.9263314 #>  [824,] 0.6303151 0.6554416 0.6792259 #>  [825,] 0.9561091 1.0201551 1.0622732 #>  [826,] 0.5821153 0.6170569 0.6195374 #>  [827,] 0.5487001 0.5759461 0.5773267 #>  [828,] 0.5317184 0.5832454 0.6342816 #>  [829,] 1.3524188 1.4336161 1.4617385 #>  [830,] 0.4643834 0.4659093 0.4710869 #>  [831,] 0.5607001 0.5663945 0.5849718 #>  [832,] 1.6049014 1.6751927 1.7045510 #>  [833,] 0.5646743 0.5721337 0.5903258 #>  [834,] 1.0005500 1.0187342 1.0283764 #>  [835,] 1.3887139 1.4376833 1.4938313 #>  [836,] 0.9428737 0.9554519 0.9573764 #>  [837,] 0.3899443 0.4286524 0.4345490 #>  [838,] 0.5813948 0.6202795 0.6240619 #>  [839,] 0.7727167 0.8269810 0.8681252 #>  [840,] 1.1300088 1.1747184 1.2185179 #>  [841,] 1.0139694 1.0143534 1.0214576 #>  [842,] 0.6047703 0.6121929 0.6250433 #>  [843,] 0.8980097 0.9243237 0.9991409 #>  [844,] 1.0745483 1.0959159 1.1272030 #>  [845,] 0.5399201 0.5679500 0.5695168 #>  [846,] 1.8123285 1.8423700 1.8493462 #>  [847,] 0.9286348 0.9503427 0.9541965 #>  [848,] 0.8040089 0.8660309 0.9244436 #>  [849,] 1.9971270 2.0032888 2.0037577 #>  [850,] 0.9573764 0.9866492 1.0690115 #>  [851,] 0.6969706 0.6998450 0.7061825 #>  [852,] 1.9145517 1.9615334 1.9715274 #>  [853,] 0.8793358 0.8986674 0.9053621 #>  [854,] 0.7449617 0.7515061 0.7607862 #>  [855,] 1.0723498 1.0732380 1.0751088 #>  [856,] 1.3892987 1.4415655 1.4739577 #>  [857,] 0.7966304 0.8281201 0.8359309 #>  [858,] 0.6079206 0.6086968 0.6658933 #>  [859,] 0.8205086 0.8418324 0.8696175 #>  [860,] 0.5665090 0.5929548 0.6313198 #>  [861,] 1.0438089 1.1374661 1.1765667 #>  [862,] 0.7195300 0.7537328 0.7892973 #>  [863,] 0.6951077 0.7042646 0.7154132 #>  [864,] 0.8502922 0.8702995 0.8957210 #>  [865,] 0.6490685 0.6522478 0.6557040 #>  [866,] 0.8268478 0.8374577 0.8516288 #>  [867,] 0.6159683 0.6301182 0.6504246 #>  [868,] 0.9800766 0.9827477 0.9876503 #>  [869,] 1.4635314 1.4721848 1.4997918 #>  [870,] 0.7450960 0.8092195 0.8094063 #>  [871,] 0.9366343 0.9387556 0.9576366 #>  [872,] 0.5359727 0.5508381 0.5522329 #>  [873,] 1.0684380 1.0792667 1.1032581 #>  [874,] 0.6770523 0.6824669 0.6897616 #>  [875,] 1.3529987 1.3635417 1.3706311 #>  [876,] 0.8621903 0.9081492 0.9091747 #>  [877,] 0.5516490 0.5653316 0.5720446 #>  [878,] 0.9746911 1.0087209 1.0183808 #>  [879,] 1.3924513 1.4132842 1.4332004 #>  [880,] 1.5427371 1.5460979 1.5468826 #>  [881,] 1.0693711 1.1192629 1.1407997 #>  [882,] 0.7159077 0.7357247 0.7368212 #>  [883,] 1.2038515 1.3185747 1.3343122 #>  [884,] 0.9615367 1.0053512 1.0276036 #>  [885,] 0.7062048 0.7097760 0.7110731 #>  [886,] 0.7426084 0.7546016 0.8029673 #>  [887,] 0.4438640 0.4974859 0.5305431 #>  [888,] 0.5849718 0.6017299 0.6097585 #>  [889,] 0.5716664 0.6055838 0.6486161 #>  [890,] 0.5035837 0.5627299 0.6333803 #>  [891,] 0.5779422 0.6280290 0.6460095 #>  [892,] 0.5174326 0.5327632 0.5774100 #>  [893,] 0.7392256 0.8558654 0.8835799 #>  [894,] 1.2768694 1.2890454 1.2921913 #>  [895,] 0.7560018 0.7786418 0.7953198 #>  [896,] 0.7599531 0.7742303 0.8211933 #>  [897,] 0.9239685 0.9344597 0.9635141 #>  [898,] 0.9969269 1.0545557 1.0619157 #>  [899,] 0.6908221 0.7291203 0.7376024 #>  [900,] 0.8062650 0.8305910 0.8339717 #>  [901,] 0.6220970 0.6985594 0.7008377 #>  [902,] 0.6762029 0.6769274 0.6833800 #>  [903,] 0.8108820 0.8677984 0.8948195 #>  [904,] 0.5437750 0.5639698 0.5791339 #>  [905,] 0.6740429 0.6759419 0.6883407 #>  [906,] 0.7778778 0.8792370 0.9059076 #>  [907,] 0.5927614 0.6307396 0.6330349 #>  [908,] 0.9587755 1.0125716 1.0163470 #>  [909,] 1.5141723 1.5974236 1.6134405 #>  [910,] 0.9141210 0.9164829 0.9176712 #>  [911,] 0.6793637 0.6880800 0.6986113 #>  [912,] 1.4182476 1.4444820 1.4502124 #>  [913,] 0.8403710 0.8828920 0.8846956 #>  [914,] 1.0507684 1.0537854 1.0754176 #>  [915,] 1.1984993 1.2483776 1.2565435 #>  [916,] 1.4595947 1.4937816 1.5251722 #>  [917,] 0.8233872 0.8268737 0.8534558 #>  [918,] 0.9043502 0.9168565 0.9349560 #>  [919,] 0.7398267 0.7568906 0.7797080 #>  [920,] 0.9173411 0.9406015 0.9642407 #>  [921,] 0.6356741 0.6386784 0.6424788 #>  [922,] 0.8957038 0.9411100 0.9576381 #>  [923,] 0.6914209 0.7212612 0.7274091 #>  [924,] 0.6862046 0.6898385 0.7840658 #>  [925,] 0.6800460 0.7279119 0.7368044 #>  [926,] 0.7356470 0.7360317 0.7820120 #>  [927,] 0.7234790 0.7417554 0.7446827 #>  [928,] 1.1296310 1.1430003 1.1474132 #>  [929,] 0.6549563 0.6569516 0.6705522 #>  [930,] 0.9440703 0.9510543 0.9736721 #>  [931,] 0.7086101 0.7161175 0.7370196 #>  [932,] 0.9264478 0.9323178 0.9395241 #>  [933,] 0.6962652 0.7034326 0.7082099 #>  [934,] 1.4281120 1.4576700 1.4670207 #>  [935,] 1.0604460 1.0912592 1.0925606 #>  [936,] 0.7268802 0.7287145 0.7443112 #>  [937,] 0.5245042 0.5254687 0.5343068 #>  [938,] 0.7380738 0.7492484 0.7509731 #>  [939,] 0.5693001 0.5708216 0.5763245 #>  [940,] 0.8647037 0.8704060 0.8867678 #>  [941,] 0.7503863 0.7507721 0.7605215 #>  [942,] 0.5816653 0.5879921 0.5964014 #>  [943,] 0.6441258 0.6872196 0.7675890 #>  [944,] 1.7695202 1.7884230 1.7938976 #>  [945,] 0.5882969 0.5967464 0.5976957 #>  [946,] 0.5227061 0.5739475 0.5786481 #>  [947,] 0.8486106 0.9265314 0.9402774 #>  [948,] 0.6655646 0.6840561 0.7114929 #>  [949,] 0.6853655 0.6905432 0.7108326 #>  [950,] 0.6491127 0.7050691 0.7238575 #>  [951,] 0.7355914 0.7381938 0.7422253 #>  [952,] 0.5779422 0.5909049 0.5978957 #>  [953,] 1.2274522 1.2416885 1.2487966 #>  [954,] 0.4805084 0.5143248 0.5327632 #>  [955,] 0.8515305 0.8596268 0.8764111 #>  [956,] 0.6689220 0.6817458 0.7004988 #>  [957,] 0.8191692 0.8370893 0.8509869 #>  [958,] 0.8623002 0.8648860 0.9226723 #>  [959,] 0.6732199 0.6775373 0.6947535 #>  [960,] 0.6825740 0.7216127 0.7238575 #>  [961,] 0.9460329 0.9751658 0.9831126 #>  [962,] 1.3020792 1.3107849 1.3129108 #>  [963,] 0.9978232 1.0098200 1.0351533 #>  [964,] 1.1704662 1.1705780 1.1909662 #>  [965,] 1.0524301 1.0666937 1.1040370 #>  [966,] 0.6078389 0.6162639 0.6300773 #>  [967,] 0.7519860 0.7611250 0.7684586 #>  [968,] 1.1732090 1.1762244 1.2143398 #>  [969,] 0.7555418 0.7609337 0.7698207 #>  [970,] 1.5968780 1.7562467 1.7634687 #>  [971,] 0.8558654 0.8598583 0.8678247 #>  [972,] 0.7463311 0.7506119 0.7922344 #>  [973,] 0.9260244 0.9267114 0.9357264 #>  [974,] 0.9233935 0.9415459 0.9596564 #>  [975,] 0.5607125 0.5634157 0.5713032 #>  [976,] 0.7997401 0.8171852 0.8961796 #>  [977,] 1.0435977 1.1942189 1.2505263 #>  [978,] 1.3335865 1.3357281 1.3619087 #>  [979,] 0.6616665 0.6672065 0.6959621 #>  [980,] 1.2423050 1.2671355 1.3331754 #>  [981,] 0.6145132 0.6623714 0.6625598 #>  [982,] 1.2670553 1.2776325 1.2940034 #>  [983,] 1.5656745 1.5706543 1.5910679 #>  [984,] 1.3326607 1.3743000 1.3787750 #>  [985,] 1.4792314 1.4997808 1.5116701 #>  [986,] 0.7326718 0.7490682 0.7818524 #>  [987,] 0.4975852 0.5248470 0.5380853 #>  [988,] 1.2096967 1.2663743 1.2982647 #>  [989,] 1.1847653 1.1937493 1.2420866 #>  [990,] 1.2855663 1.2952427 1.3517510 #>  [991,] 0.4795341 0.4932264 0.4960293 #>  [992,] 0.9738282 0.9875525 0.9888293 #>  [993,] 1.1069481 1.2446370 1.3268957 #>  [994,] 0.8123566 0.8483421 0.8637642 #>  [995,] 0.6747370 0.6827207 0.6938718 #>  [996,] 0.5922005 0.6395535 0.6464631 #>  [997,] 0.9366343 0.9840882 0.9952524 #>  [998,] 0.9022867 0.9109769 0.9271888 #>  [999,] 0.7775083 0.8238705 0.9161456 #> [1000,] 0.4806928 0.5450156 0.5482157 #>   # Find the 10 approximate nearest neighbors (see RANN::nn2) tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\",     eps = 0.3 ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  441  462  917  216  476  205  883   33  404   804 #>    [2,]  117  991  800  104  505  380   70  887  763   395 #>    [3,]  416  896  956  279  142  668  815  560  853   821 #>    [4,]  417  875  819  609  642  685   63   78  250   221 #>    [5,]  336  122  878  153  722  105  974  980  439   696 #>    [6,]  549  790  176  445  496  607  424   61  458    90 #>    [7,]  434  776  559  542  810  757  634  396  699   135 #>    [8,]  991  505  887  645  397  568  800  184  171   837 #>    [9,]  904  725  769  596  203  831  805  324  981   578 #>   [10,]  860   13  369  169  382  723  688  742  550   777 #>   [11,]  857   33  121  476  216  562  398  629  185   327 #>   [12,]  253  371  100  771  145  231  951  653  944   806 #>   [13,]  777  860   10  723  688  262  369  169   56   353 #>   [14,]  545  798  330  212  467  681  574  641  477   368 #>   [15,]  583  795  615  443  254  507  672  285  898    23 #>   [16,]   36  373   66  176  423  661  185  584  476   274 #>   [17,]   26  266  865  453  226  939  851  905  995   945 #>   [18,]  690  342  352  794  772  139  228  194  345   902 #>   [19,]  931  961  557  334   88  276  793  451  521   213 #>   [20,]  901  512  151  140  785  371  951  152  911   312 #>   [21,]  943  801  889  114  294  431  937  195   57   372 #>   [22,]  561  390  664  813  344  858  528  702   87   589 #>   [23,]  672  792  484  179  507  927  675  335  719   354 #>   [24,]  195  889  356  114  943  511  444  554  258   801 #>   [25,]   45  775  444  889  539  702  195  114  448   729 #>   [26,]   17  266  226  995   61  663  607  273  777   851 #>   [27,]  203  592  655  324  588  746  518  791  335   507 #>   [28,]  718  182  855  787  536  402  501  528  124   363 #>   [29,]  255   84  400  996  710  501  739  818  799   553 #>   [30,]  458  790   52  639  308  663  825  222  424   262 #>   [31,]   77  906  570  809  774   59  155   62  734    95 #>   [32,]  368  574  828  301  641  537  144  330  217   949 #>   [33,]  857  121  404  629  398  216   11  967  327   462 #>   [34,]  689   75  935  230  985  932  721  687   91   485 #>   [35,]  796  181  715  762  617  101  126  877  711   882 #>   [36,]   16  373  185  176  661  423  584  274  882    11 #>   [37,]  137  765  950  152  415  750   70  515  296   822 #>   [38,]  599  831  675  707  700  872  592  179  981   174 #>   [39,]  640  437  614   47  835  567  712   97   78   680 #>   [40,]  172  916  463  187  963  866  282  232  859   484 #>   [41,]  102  310  491  316  986  903  897  915   43   120 #>   [42,]  468  864  547  260  626  495  190  870  789   947 #>   [43,]   48  416   47   41    3  437   39   97  279   815 #>   [44,]  589  858  799  509  741  225  130   22  813   528 #>   [45,]  444   25  448  889  603  521  195  298  775   729 #>   [46,]  955  364  764  447  239  167  548  979  595   631 #>   [47,]  437   97  709  891  952  673  640  307  416   279 #>   [48,]   43  416   41  289   79  538  391    3   47   487 #>   [49,]  763  397  954  357  104   70  887  991  950   761 #>   [50,]  411  566  485  776  932  281  138   75  719     7 #>   [51,]  472  149  662  701  481  428  128  533  868   770 #>   [52,]   68  663  458  360  639  790  262   30   56    61 #>   [53,]  604  575  838  109  522  738  488   93  617   101 #>   [54,]  326  182  363  112  930   28  739  633  402   501 #>   [55,]  665  325  263  642  679  400  804  523  501   630 #>   [56,]   68  639  723  688  262  777  663  704   13   860 #>   [57,]  620  556  341  801   21  836  517  736   83   431 #>   [58,]  256   93  251  108  425  475  589   27  604   936 #>   [59,]  809  219  906  131  774   71   62   77  177   938 #>   [60,]  612  757  345  705  734  228  272  699  477   758 #>   [61,]  308  790  222  266   26  995  526  458  607    52 #>   [62,]  906  243  809  774  701  395  499  318  455   938 #>   [63,]  479  535  630  839  410  936  489  642   65   163 #>   [64,]  531  571   68  459  222  925  639  446  969   458 #>   [65,]  163  113  479  561  489  535  753  425  227   858 #>   [66,]  883   16  665  970  423  804   55   36  325   661 #>   [67,]  691  591  730  329  153  913  300  191  146   405 #>   [68,]   56  639  571  598  262   52  777  531  688   723 #>   [69,]  156  988  722  122  878  980  319   94    5   880 #>   [70,]  765  950  137  315  515  268  117  887  991     2 #>   [71,]  164   59  219  131  809  378  291  177  783   168 #>   [72,]  721   80   91  208  935  692  506  370  202   141 #>   [73,]  539  816  109  251  236  637  610  425  954   108 #>   [74,]  632  107  587  558  304  218  870  316  897   438 #>   [75,]  932  689  687  485   50  248  230   34  281   935 #>   [76,]  227  551  775  677  163  114  535   83  694   556 #>   [77,]  774  947  809   95  906  219  243  938   62    59 #>   [78,]  875   39  978  835  614  367  839  657    4   520 #>   [79,]  289  986  703  143  469  409  213  487  673   580 #>   [80,]  208  721  692  528   72  646  741   91  130   189 #>   [81,]  867  350  399  383  269  791  540  827  480   328 #>   [82,]  726  782  421  658  716  737  223  717  322   754 #>   [83,]  736  551  817  448  801  556   76  836   45   341 #>   [84,]  255   29  818  710  907  400   93  256  589   388 #>   [85,]  378  106  125  982  555  755  961  164  206    19 #>   [86,]  269   89  350  867  314  486  540  174  644   842 #>   [87,]  236  987  344  637  702  664  954  636  729   877 #>   [88,]  807  931  926  213  547  334  842  406  557   260 #>   [89,]   86  269  486  337  644  188  498  353  136   578 #>   [90,]  175  150  899  584  366  423  905  449  914    26 #>   [91,]  935  287  721  656  202   80   72  113  788   692 #>   [92,]  618  704  377  355  977  749  374   56   68   629 #>   [93,]  256  907   58  475  818  838  589   84  659   388 #>   [94,]  740  156  373  319  166  176   16   36  771   274 #>   [95,]  947   77  375  918  774  789  219  131  864   190 #>   [96,]  869  660  352  342   18  772  587  789  418   107 #>   [97,]  709  891  673   47  580  737  307  952  937   726 #>   [98,]  500  683  595  843  306  836  121  327  557   755 #>   [99,]  830  362  184  837  214  631  111  887  394     8 #>  [100,]  151  253  653  608  674  371  951  901  234    20 #>  [101,]  711  126  617  824  796   35  589  181  877    53 #>  [102,]  966  903  120  409  986  480  550  369  742   316 #>  [103,]  638  232  572  235  633  564  282  976  280   112 #>  [104,]  763  890  761  707  700  946  420  505  357    49 #>  [105,]  167  514  590  781  671  473  300  448  401   336 #>  [106,]  982  378  206  768  125   85  131  597  440    19 #>  [107,]  587  218  626  772   74  789  352  190  383   284 #>  [108,]  425  760   58  539   73  475  109  436  588   251 #>  [109,]  604  539   73  816  425  987  637  236   53   488 #>  [110,]  513  360  948  979  563  629  327  290  933   727 #>  [111,]  184  830  214  210  744  837   99  800  362   188 #>  [112,]  900  326  182  363  232  750  959  576  564   713 #>  [113,]   65  258  561  163  760  788  114  436  656   227 #>  [114,]  889  195  775   25  425   24   21  258  943   539 #>  [115,]  880  752   54  930   28  855  916   69  787   402 #>  [116,]  953  784  489  133  567  614  158  372  285   267 #>  [117,]    2  278  140   70  644  911  765  700  139   874 #>  [118,]  649  143  717  421  703  737  716  474  673   469 #>  [119,]  635  976  413  510  866  886  478  981  246   841 #>  [120,]  102  998  903  966  409  917  480  581  550   490 #>  [121,]  857   33  327  398  629   11  404  683  562   843 #>  [122,]    5  336  439  722  878  153  524  671  105   980 #>  [123,]  921  952  279  464  399  350  942  393  956   808 #>  [124,]  922  718  855  153  390  528   28  189  536   336 #>  [125,]  106  440  909  755   85  649   19  982  457   627 #>  [126,]  711  617  101  796  527  127  745  824  181   388 #>  [127,]  745  419  541  315  892  126  422  388  515   636 #>  [128,]  802  972  428  197  868  895  380   51  137   512 #>  [129,]  587  438  538  821  147   74  632  968    3   897 #>  [130,]  741  858  370  863   44  208  646  501  528   787 #>  [131,]  219  938  164  375   59  809   95  774  378   779 #>  [132,]  517  861  602  341  620  556  585  839  953    57 #>  [133,]  267  158  681  116  294  784  285  407  349   305 #>  [134,]  886  207  805  714  676  379  324  283  746   833 #>  [135,]  429  728  389  576  848  628  530  434  940     7 #>  [136,]  486  791  644  269  945 1000  324  498  592   337 #>  [137,]  950   70   37  152  428  765  268  315  296   512 #>  [138,]  411   50  776  932  281   75  485  566  586   434 #>  [139,]  278  700  345  117  314  361  599  874  395   578 #>  [140,]  512  911  785   20  312  117  380  152  268   151 #>  [141,]  646  959  863  208  900  326  182  692  494   577 #>  [142,]  560  668  896  193    3  956  279  416  407   545 #>  [143,]  469  649   79  118  703  440  409  986  903   716 #>  [144,]   32  537  871  997  368  162  291  574  828   301 #>  [145,]  806  197  371  934  415  427   12  302  565   823 #>  [146,]  191  405  329  960  160  730  296  691  173   494 #>  [147,]  438  190  789  625  538  540  587   42  956   260 #>  [148,]  461  112  576   54  141  326  766  848  530   460 #>  [149,]  472   51  662  481  868  770  701  974  565   730 #>  [150,]  914  175  905   90  449   26  516  607  549   995 #>  [151,]   20  674  785  901  512  608  140  339  601   100 #>  [152,]  512  268  137  140  765   37  197  151  371    20 #>  [153,]  591  336  124  922  671    5  622   67  691   300 #>  [154,]  744  499  800  210  233  111  188  214  270   184 #>  [155,]  686  856  810  277  884   31  434  776    7   634 #>  [156,]   94  740  319  771  166  373  302  823  878   880 #>  [157,]  391  491  978   41  421  322   43   78  657   998 #>  [158,]  294  133  267  891  641  567  949  307   47   305 #>  [159,]  313  466  828  301  467  889  511  574  195   414 #>  [160,]  146  960  405  191  329  296  271  786  950   730 #>  [161,]  732  600   99  731  579  543  401  780  394   933 #>  [162,]  537  348  871  144  919  291   32  177  773   477 #>  [163,]   65  535  113  489   76  479  227  372  341   114 #>  [164,]   71  131  219  291  378   59  348  938  809   177 #>  [165,]  365  984  914  767  847  387  320  549  759   653 #>  [166,]  771  445  471  176  496  384    6  231  823    12 #>  [167,]  105  364  448  473  603  590  239  170  764   401 #>  [168,]  751  768  378  164  131  938  219  778   71   106 #>  [169,]  569   10   13  742  605  939  860  382  337   369 #>  [170,]  364  678  783  432  401  167  994  764  840   662 #>  [171,]  568  505    8  420  357  645  397  183  761   533 #>  [172,]   40  282  916  187  633  326  739  232   54   103 #>  [173,]  494  248  405  329  429  191  146  311  848   687 #>  [174,]  700  592  888  596  761  707  345  393  831   720 #>  [175,]   90  899  150  905  449  366  584  573  423   426 #>  [176,]  274  661  373    6  496   36  445   90  384   423 #>  [177,]  919  734  348  612  396  634  686  884  183   809 #>  [178,]  862  452  242  297  238  870  547   10  260   860 #>  [179,]   38  927  354  675  831  599  707   23  923   257 #>  [180,]  657  520  544  275  303  609  367  875  654   803 #>  [181,]  796   35  715  999  882  101  126  274  711   293 #>  [182,]  363  959  326  900   28  402  536  112  501    54 #>  [183,]  568  505  420  171  233  634  734  699  395   318 #>  [184,]  830  837  111  214  744   99  533    8  887   800 #>  [185,]   52  513  273  290  663   36  629  110  948   360 #>  [186,]  280  386  812  572  200  608  693  340  638   964 #>  [187,]  679  685  370  916  863  172  130  739  501   208 #>  [188,]  210  498  245  598  111  264  214  353   89   154 #>  [189,]  390  528  622  227  813  300  677   22  311   671 #>  [190,]  789  625  147  540  794  352  902  772  272   438 #>  [191,]  146  405  960  329  730  691  160   49  173   494 #>  [192,]  778  483  881  376  446  455  247  647  873    62 #>  [193,]  196  545  668  641  808  142  261  279  680   393 #>  [194,]  578  666  351  772  924  317  725  139  269   611 #>  [195,]  889   24  444  114  511  456   25  159   45   258 #>  [196,]  193  769  596  795  261  758  668  888  927   705 #>  [197,]  371  895  152  543  806  512  802  231  145   268 #>  [198,]  240  611  666  924  508  194  220  351  234   317 #>  [199,]  750  822  415  235  224  930   37  564  363   402 #>  [200,]  454  964  693  478  186  529  433  280  976   510 #>  [201,]  254  588  680  615  507  475  827  724   27   108 #>  [202,]  506   91  784  935  113  953  656  430  287   349 #>  [203,]  324   27  791  827  592  904  655  805  746   518 #>  [204,]  298  850  356  521  448   24  444  801  836   241 #>  [205,]  941  698  917  910  403  404  441  851  975   624 #>  [206,]  982  106  597  378  871  918   95  375  131   219 #>  [207,]  805  134  324  746  203  714  791  379  833   283 #>  [208,]  646   80  692  863  130  370  141  741  858   528 #>  [209,]  442  992  821  896  968  853  418  435  957     3 #>  [210,]  111  598  188  744  830  214  184  154  548   245 #>  [211,]  408  847  534  222  969  767  925  387  308   995 #>  [212,]  330  467  760  313  828  574  436  798  159   258 #>  [213,]  931  260  406  580   88  703  276  547  487   289 #>  [214,]  111  800  184  837  991  887  830  744   99     8 #>  [215,]  702  236  590  664   25   87  300  954  539   987 #>  [216,]  398   33   11    1  857  121  462  967  562   229 #>  [217,]  949  641  921  464  406  931   32  123  393   920 #>  [218,]  383  107  316  897  382  870  742  605  304   587 #>  [219,]  131   59  809  938  774  164   95   77  375   177 #>  [220,]  593  611  516  317  569  331  169  351  973   605 #>  [221,]  756  876  265  859  936  753  814  615  497   275 #>  [222,]  308  995   61  458  790  925  531  969   64   262 #>  [223,]  658  451  359  717  276  937  737  474  580   716 #>  [224,]  747  523  822  235  199  402  363  400  739   996 #>  [225,]  536  799  293   44  996  733  528  344  813   787 #>  [226,]  266  607  995   17  331   26  785  419  865   453 #>  [227,]   76  677  813  694  189  775  664  561   22   509 #>  [228,]  272  902  318  314  757  395  345   60  612   734 #>  [229,]  492  216  392  912    1   11  398  804  476    16 #>  [230,]  687  689  248  932  311   75  908  173  287   788 #>  [231,]  771  823  895  748  197  302  543  496  971   802 #>  [232,]  103  112  633  572  854  638  326  976  866   900 #>  [233,]  744  499  837  184  568  533  154  800  111   505 #>  [234,]  973  653  901  508  151   20  674  240  785   100 #>  [235,]  199  822  750  224  638  633  564  422  415   363 #>  [236,]   87  987  702  637  729  954   73  539  664   344 #>  [237,]  975  735  845  738  582  369  860  522  945   550 #>  [238,]  297  459  862  178  242   56  547  704  452   571 #>  [239,]  364  167   46  955  979  731  170  105  346   843 #>  [240,]  198  508  666  234  611  351  973  339  924   194 #>  [241,]  456  521  298  603  432  961  793  994  204   444 #>  [242,]  452  297  862  178  238  870  958  459  639    10 #>  [243,]   62  270  499  395  906  318  774  455  154   938 #>  [244,]  424  895  253  951  408  873  222  881  901   549 #>  [245,]  362  188  264  498  360  210  826  111  214   945 #>  [246,]  635  478  963  119  964  976  454  200  616   886 #>  [247,]  778  881  192  684  751  376  168   64  834    30 #>  [248,]  173  494  687  405  311  230  788  429  323   932 #>  [249,]  573  899  426  648  175  865  527  453  295   366 #>  [250,]  814  430  898  285  784  953  116  876  221   875 #>  [251,]   73  256  872  637  954  309   58  636  816   539 #>  [252,]  338  554  368  299  798  828  511  212  682    24 #>  [253,]  653  951  901  371  100   20  549   12  244   607 #>  [254,]  201  680  507  588  827  261  655  615  203    27 #>  [255,]   84   29  400  996  799  589  710  818  309   256 #>  [256,]   58   93  309  251  589  636   27  637  710   354 #>  [257,]  927  719  758  705  923  179  477  196  707   467 #>  [258,]  511  436  667  113  195  561  114  788   24   889 #>  [259,]  403  962  292  698  355  205  749  879  910   623 #>  [260,]  547  213  487  406   88   42  862  178  986   289 #>  [261,]  888  808  467  196  254  393  193  927  760   436 #>  [262,]  688  777  663  639   13   56   68  723  458   531 #>  [263,]   55  679  665  685  523  609  187  642  752   347 #>  [264,]  502  353  582  842  826  188  245  807  720   210 #>  [265,]  936  876  756  753  221  710  859  615  803   354 #>  [266,]   17  226   26  995  865  419  453   61  607   945 #>  [267,]  133  681  158  407  437  285  898  640  116    47 #>  [268,]  315  152   70  137  140  765  512  745  911   887 #>  [269,]   86   89  350  867  136  578  486  337  644    81 #>  [270,]  243  969  499  154  925  455  312  395  318    62 #>  [271,]  786  428  160  940  565  950  701  380  137   856 #>  [272,]  228  902  314  345   60  773  794  625  757   318 #>  [273,]  290  948  513  851  663  738  941  629   26   237 #>  [274,]  661  715  176  181  999  496  882  796  373    35 #>  [275,]  654  803  859  756  885  265  907  936  609   818 #>  [276,]  451  359  474  334  223  557  582  807  842   502 #>  [277,]  856  884  155  686  797  493  810  770  472   706 #>  [278,]  139  874  117  361  700  599    2  666  601   312 #>  [279,]  815  399  123  956  952  328  416  680  896   193 #>  [280,]  186  812  386  572  103  638  964  200  976   693 #>  [281,]  411   50  932  485  687  908  586   75  776   798 #>  [282,]  633  739  172  103  326  232  235  523  638   224 #>  [283,]  328  805  207  815  518  827  324  203  791   399 #>  [284,]  304  990  965  107  198  218  220  611  968   593 #>  [285,]  898  430  681  784  615   15  349  267  583   133 #>  [286,]  997  333  920  294  949  217  641   32  144   301 #>  [287,]  656  788  323   91  687  935  436  212  798   923 #>  [288,]  470  606  814  497  875  756  544  894  963   275 #>  [289,]   79  487  986  538  213  703  260  416  673   409 #>  [290,]  273  948  513  629  738  851  404  975  237   941 #>  [291,]  348  162  682  144  871  961  164  241  919   537 #>  [292,]  403  259  623  322  698  716  143  205  917   404 #>  [293,]  536  225  996  799  796   35  181  402  344   733 #>  [294,]  158  943   21  333  574  286  301  641  949   368 #>  [295,]  818  654  659  907  714  803  388  379   84    93 #>  [296,]  950  960  146  160   49   37  137  405  515    70 #>  [297,]  238  242  862  178  452  459  704   56  639   618 #>  [298,]  204  521  850  356  603  444  241   45  448   195 #>  [299,]  993   24  356  372  554  252  943  195  850   514 #>  [300,]  671  622  913  514  215  189  691  105  390   590 #>  [301,]  828   32  159  574  368  466  456  414  554   313 #>  [302,]  823  771  231  415  543  748  482  145  822   197 #>  [303,]  657  367  180  491  894  358  544  288  915   470 #>  [304,]  284  965  990  218  107   74  632  613  316   593 #>  [305,]  158  294  620  133  640  333  116  567  286   614 #>  [306,]  465  500  850  595  755   98  204  683  298   836 #>  [307,]  937  673  737  580  891  717  709  949   97   464 #>  [308,]  222  995  790  458   61  262  549  607  777   531 #>  [309,]  636  872  256  892  637  251  515  954  344   799 #>  [310,]  581  697  569  102  491  120   41  915  358   910 #>  [311,]  788  390  248  189  561   22  258  405  667   191 #>  [312,]  380  874  140  512  117    2  666  270   20   911 #>  [313,]  330  467  828  667  159  511  414  212  574   368 #>  [314,]  902  345  272  228   86  318  395  174  139   269 #>  [315,]  579  745  268  762   70  515  127  600  362   887 #>  [316,]  897  218  102  742  383   41  870  178  382    10 #>  [317,]  351  337  578  194   89  169  382  939  911   495 #>  [318,]  395  228  757  902  243  314  183  139    2   906 #>  [319,]  971  878  748  933  732  882  373  543  731   722 #>  [320,]  708  767  387  984  847  825  408  211  558   165 #>  [321,]  482  974  543  565  868  296  137  960  732   922 #>  [322,]  292  782   82  917  421  978  623  398  403   716 #>  [323,]  923  667  687  798  313  467  330  287  788   559 #>  [324,]  791  805  203  207  592  904  136   27  518  1000 #>  [325,]  824  332  804  527  630  811  400   55  711   665 #>  [326,]  363  633  182  112  739   54  959  900  141   232 #>  [327,]  121  683  857  817  843  670  110  629   33   473 #>  [328,]  399  952  815  827  279  283  680  588  518   942 #>  [329,]  405  146  191  494  173  960  160  691  730    67 #>  [330,]  313  828  467  368  574  212  667  159   32   798 #>  [331,]  503  453  865  226  516  924  426  652  905   785 #>  [332,]  811  462  824  967  929  670  325  617  101   441 #>  [333,]  997  286  554  294  943  801  301  961   21   368 #>  [334,]  276  807  451  557  793  842  521  502  359   264 #>  [335,]  655  746  507  981  203   27  885  672  207   324 #>  [336,]    5  153  591  974  122  922  105  671  732   696 #>  [337,]  939  317   89  486  644  945  136  498  578   351 #>  [338,]  252  908  798  511  323  368  330  667  828   913 #>  [339,]  874  666  601  151  608  940  674  312  278   508 #>  [340,]  594  728  386  361  413  510  628  854  940   976 #>  [341,]  556   57  517  602  535  736   83  620  551    76 #>  [342,]   18  690  352  418  772  194   96  794  821   435 #>  [343,]  787  844  546  677  439  528  225  733   44   741 #>  [344,]   87  954  636  637  515  664  236  309  799    22 #>  [345,]  314  272   60  228  174  596  139  757  902   794 #>  [346,]  893  933  731  979  563  780  161  732   99   830 #>  [347,]  616  282  263  523  529  249  573  384  544   478 #>  [348,]  919  162  177  291  396  734  537  414  612   699 #>  [349,]  681  430  285   14  985  798  898  133  784   485 #>  [350,]  867   81  269   86  540  123  136  921  399   956 #>  [351,]  317  337  194  578  911  666   89  495  772   382 #>  [352,]  625  789  794  190  772  342   18  587  147   107 #>  [353,]  264  842  723  502  188  582   89  807  598   369 #>  [354,]  577  710  256  179  655   58  507  335   27   675 #>  [355,]  749   92  377  704  618  977  941  374   56   297 #>  [356,]  204   24  298  195  448  444  603  850  456    45 #>  [357,]  420  946  171  761  763   49  104  890  397   645 #>  [358,]  915  310  965  491  697  581  381  990  303   613 #>  [359,]  582  276  223  502  451  474  658  488  735   842 #>  [360,]  513  948  110  245  563   52  362  273  290   777 #>  [361,]  594  728  278  725  340  139  690  599  510   628 #>  [362,]   99  245  830  579  214  111  563  762  184   315 #>  [363,]  182  959  326  900  739  402  501  996  633   536 #>  [364,]  170  167   46  764  239  783  731  955  432   401 #>  [365,]  516  449  905  150  914  366   90  549  653   175 #>  [366,]  449  175   90  573  899  249  648  150  426   365 #>  [367,]  657  303  180   78  875  491  470  835  288   520 #>  [368,]  828  574   32  330  301  313  144  212  159   467 #>  [369,]  860  966   10  550   13  742  723  237  845   975 #>  [370,]  130  741  863  679  208  187  858  692   80   685 #>  [371,]  197  806   20  512  152  951  253  151  901   895 #>  [372,]  943  489  114   21  163   24  341  113  294   801 #>  [373,]   36  176  274  882  661  715  999   16  319   185 #>  [374,]  377  627  704  618   92  749  355  297  977   440 #>  [375,]  926  918   95  938  272  131  406  902   88   219 #>  [376,]  778  802  893  868  881  780  895  972  346   128 #>  [377,]  374   92  704  618  749  355  627  977  297   412 #>  [378,]  982  106  206  768  131  164  219  168   85    95 #>  [379,]  553  676  207  818  134  714  886  388  295   746 #>  [380,]  312  512  874  140    2  428  117  137  152    20 #>  [381,]  648  433  426  593  516  573  529  449  676   249 #>  [382,]  495  870   10  169   13  218  317  862  626   742 #>  [383,]   81  218  742  867  897  350  540  605   86   625 #>  [384,]  445  471  176   90  166  747  899  274  523   905 #>  [385,]  668  142  560  773  352  435  418  896  821   992 #>  [386,]  340  812  594  186  940  572  339  280  713   413 #>  [387,]  984  767  708  211  847  320  973  626  220   408 #>  [388,]  541  818  659  711  127   93  126  101  419   745 #>  [389,]  675  599  950  576  135  900  765  854   38   429 #>  [390,]  528   22  189  813  561  311  664  344  788   858 #>  [391,]  157  469   79  421  143  703  986   41  409   903 #>  [392,]  546  811  492  804  216  844  229  332  343   665 #>  [393,]  466  808  888  464  174  610  921  123  816   949 #>  [394,]  631  729   99  401  600  979  731  590  579   362 #>  [395,]  318  228  243  902  757  314    2  183  139    62 #>  [396,]  699  634  919  542  686  612  884  810  177   477 #>  [397,]    8  887   49  505  991  171  481  357  533   568 #>  [398,]  216   33  121  857  912   11  736  322  602   404 #>  [399,]  328  952   81  279  815  123  827  480  867   350 #>  [400,]   29  255  523   84  996  527  711  824  101   181 #>  [401,]  731  394  732  161  631  170   99  397  600   533 #>  [402,]  536  930  293  363  182   28  225  501  996   224 #>  [403,]  292  259  205  698  476  917  910  941  322   404 #>  [404,]  629  716   33  441  975  857  290  917  522   738 #>  [405,]  329  146  173  494  191  160  960  248  296   730 #>  [406,]  921  487  931  123  213  217  540  807   88   842 #>  [407,]  545  641  142  560  267  158  193  681  286   949 #>  [408,]  211  534  847  881  244  767  222  925  424   969 #>  [409,]  703  986  102  966  903  580  120  716  213   550 #>  [410,]  838  754  839  475  724  479   63  431  575    93 #>  [411,]   50  281  138  932  776  586  485  566   75   810 #>  [412,]  474  550  716  975  582  723  860  369  237    56 #>  [413,]  340  119  728  976  841  594  854  386  812   792 #>  [414,]  420  466  313  946  456  159  357  828  171   330 #>  [415,]  750  199  822   37  928  930  235  823  564   302 #>  [416,]    3  279  487  538  956   47  399  142  896   560 #>  [417,]    4  819  609  642  685  875   63  804  679   621 #>  [418,]  435  342  690  821   18  352   96  957  385   660 #>  [419,]  127  745  541  266  226  388  785  911  865   422 #>  [420,]  357  946  761  890  171  505  104  414  699   568 #>  [421,]  726   82  782  118  737  717  322  703  673    97 #>  [422,]  541  996  127  745  515  765  419  388   37   235 #>  [423,]  584  661  899  175   90  851  883  527  176   273 #>  [424,]  244  790  222  308  895  549    6   61  458    30 #>  [425,]  539  108  775  109  561   73  604   58  760   479 #>  [426,]  573  648  249  453  865  899  516  331  905   381 #>  [427,]  806  380  128  565  271  512  145  428  371   197 #>  [428,]  137  950  380  128    2   70  271  481  701    51 #>  [429,]  848  135  576  173  559  389  530  766  248   460 #>  [430,]  285  898  784  349  250  681  656  615  876    15 #>  [431,]  839  567   21  535  410  489  556  658  891   614 #>  [432,]  994  678  603  170  764  241  913  171  456   364 #>  [433,]  529  381  676  648  426  454  616  331  478   693 #>  [434,]    7  776  628  135  566  559  757  810  758   634 #>  [435,]  690  957  418  841  853   18  342  992  725   769 #>  [436,]  760  258  561  251  788  667  467   73  108   212 #>  [437,]   47  680   39  279  952  815  709  328  583   891 #>  [438,]  147  538  190  789  260   42  625  597  487   587 #>  [439,]  878  524  122  343  722    5  677  733  696   787 #>  [440,]  627  457  649  143  213   79  374  260  125   469 #>  [441,]  462  917  404  522  967  738  754  851    1   290 #>  [442,]  435  119  209  841  957  418  992  853  413   894 #>  [443,]   15  497  792  463  672  583   23  795  484   615 #>  [444,]   45  195   25  456  603  889  521  298   24   448 #>  [445,]  384  496  549    6  653  166  607  471  253   905 #>  [446,]  468  534  864   64  969  571  925  459  531   947 #>  [447,]  631  764  830  184   99  826  394  793   46   603 #>  [448,]  817   45  473   25  590  167  298  444  356   603 #>  [449,]  366  175  648  150  516  573   90  426  899   593 #>  [450,]  624  910  525  698  205  958  941  150  584   449 #>  [451,]  276  223  359  334  937  658  717  464  474   580 #>  [452,]  178  242  862  297  958  870  238  550   10   860 #>  [453,]  865   17  331  833  939  426  266  226  905   516 #>  [454,]  200  693  886  433  478  611  924  676  510   529 #>  [455,]  499  972  925  233  270  744  243  154  969   837 #>  [456,]  444  511  603  195  414  241  159  301  521   889 #>  [457,]  440  879  469  649  143   79  627  125  374   289 #>  [458,]  790   30  308  639   52  663  222  262   68    61 #>  [459,]  238  571  297  531   64  862  495   56  242   639 #>  [460,]  766  530  848  576  854  484  429   23  389   141 #>  [461,]  494  173  329  248  405  989  429  576  932   230 #>  [462,]  967  441  811  332  670  522  754  404  738    33 #>  [463,]  497  443  484  221  756  814  963  876   40   859 #>  [464,]  921  942  808  393  123  466  949  937  610   451 #>  [465,]  755  306  500  836   98  555  909  850  595   204 #>  [466,]  393  159  414  464  816  610  808  888  720   467 #>  [467,]  313  330  261  828  212  159  667  436  923   574 #>  [468,]  864   42  947  446  495  626  459  774  969   789 #>  [469,]  143  649   79  391  703  118  986  457  903   409 #>  [470,]  288  875  814  606  756  497  275  221  835   544 #>  [471,]  384  166  445   12  365  653  771  176  759     6 #>  [472,]   51  149  701  662  565  481  428  770  128   271 #>  [473,]  727  590  694  448  817  729  167  979  702   394 #>  [474,]  276  716  412  359  557  582  223  451  975   334 #>  [475,]  724  518  838  588   93  410   58   27  575   108 #>  [476,]   11  403  205    1   33  857  185  749  629   404 #>  [477,]  705   60  758  699  612  537  396  257  773   467 #>  [478,]  693  635  246  676  886  379  976  866  510   553 #>  [479,]  535   63  425   65  410  775  630   58  936   839 #>  [480,]  966 1000  651  490  742  735  845  399  518   369 #>  [481,]  533  662  397  701  568  837    8  505  233    51 #>  [482,]  321  543  974  868  137   37  296  565  748   732 #>  [483,]  820  534  446  408  192  881  708  211  270   969 #>  [484,]   23  672  460  354  792  766  530  179  577   876 #>  [485,]   50  281   75  985  411  932  798  566  687   719 #>  [486,]  644  498  136  945   89  269  337  720  188    86 #>  [487,]  538  289  406  416  986  260  213  123  956   921 #>  [488,]  610  816  502  359  109   53  735  658  942   518 #>  [489,]  535  839  163   65  116  431  479  372  953    63 #>  [490,]  651 1000  845  480  833  575  735  659  939   518 #>  [491,]  310   41  915  358  581  657  697  998  157   120 #>  [492,]  229  970  392  804  585  216  546  621  861   883 #>  [493,]  797  884  706  277  770  177  810  348  919   686 #>  [494,]  173  405  248  329  311  146  191  429  141   296 #>  [495,]  382  870  531  626   10   13  317  969  351   468 #>  [496,]  274  445  951  747  176    6  231  748  771    61 #>  [497,]  463  443  876  756  814  615   15  963  221   484 #>  [498,]  486  945  644  188  245  136   89  337  264   720 #>  [499,]  455  154  233  744  243  270  925  969  837   111 #>  [500,]   98  836  306  465  683  595  843  755   83   736 #>  [501,]  863  363   29  536   28  739  402  130  182   255 #>  [502,]  264  582  842  359  826  353  720  488  610   807 #>  [503,]  652  924  331  601  674  785  611  419  541   676 #>  [504,]  163  844   80   65  677  546  861  113  585   227 #>  [505,]  568    8  991  645  171  800  420  397  761   104 #>  [506,]  202   72   91  935  721  784  953  504  430    80 #>  [507,]  655  335  254  746  201  203   27  615  672   354 #>  [508,]  240  234  666  339  198  151  519   20  983   312 #>  [509,]  877  694  813  929  664   44  733  589  987   604 #>  [510,]  981  652  594  693  976  725  886  601  866   854 #>  [511,]  667  258  456  195  313  159  828   24  330   889 #>  [512,]  140   20  380  152  312  151  901  268  371   911 #>  [513,]  948  290  360  110  273  629  738  617  245   715 #>  [514,]  671  781  622  105  300  993  913  524  356   167 #>  [515,]  636  892  315  344   70  309  765  872  954   950 #>  [516,]  905  648  331  426  453  220  607  573  150   593 #>  [517,]  620  341  602  556   57  132  861  839  431   782 #>  [518,]  791  588  475  724  651  203  324   27  575  1000 #>  [519,]  234  508  973  983  240  984  653  387  759   253 #>  [520,]  657  180  978  552  621   78  883  998  804   917 #>  [521,]  603  298  444   45  241  334  793  764  456   204 #>  [522,]  735  754  575  738   53  975  237  838  658   441 #>  [523,]  400  224  747  527  739   29  996  501  633   255 #>  [524,]  677  439  671  622  189  227  122  514  733   696 #>  [525,]  450  910  205  698  624  584  403  552  883     1 #>  [526,]  780  548  111  210  830  972  925  362   61   222 #>  [527,]  711  126  824  617  899  400  101  865  661   325 #>  [528,]  390  858   22  189  787  225  741  813   44   799 #>  [529,]  433  616  676  381  693  648  426  516  478   331 #>  [530,]  848  766  460  576  854  429  135  484  389    23 #>  [531,]   64  571  639   68  459  495  262  222  458    56 #>  [532,]  909  555  743  168  832  755  465   85  374   306 #>  [533,]  837  481  184  662    8  830  233   99  744   887 #>  [534,]  446  408  925  969  483  211   64  270  881   531 #>  [535,]  479   63  489  163  556  839  431   76   65   775 #>  [536,]  225  293  402  799  996  182   28  363  501   959 #>  [537,]  162   32  144  871  773  477  545  641  217   368 #>  [538,]  487  416  289  438  147    3  956  406  897   560 #>  [539,]   73  109  425  236  702  775   25  987  664   637 #>  [540,]  956  350  867  625  794   81  190   86  123   383 #>  [541,]  419  127  745  388  892  422  652  765  872   636 #>  [542,]  559  396  699  634  908  686    7  890  923   191 #>  [543,]  748  482  802  161  971  732  321  137  895   868 #>  [544,]  609  180  275  288  470  303  657  963  685   875 #>  [545,]  641   14  193  537  574   32  477  407  196   330 #>  [546,]  844  343  392  677  787  741  130  524   44   439 #>  [547,]  260  369   88   42  213  862  353  842  178   406 #>  [548,]  210  526  830  111  598  780  184  744  447    68 #>  [549,]  607    6  653  308  951  995  790  905  226    61 #>  [550,]  860  369  975  412  966  237  723   10  941   102 #>  [551,]  736   83   76  556  817  775  562  448  341   227 #>  [552,]  883  697  520  525  366  180  249  657  449   573 #>  [553,]  379  818  866   29   84  885  388  676  981   746 #>  [554,]  943   24  301  333  294  368  195  801  828   997 #>  [555,]  465  306  832  755   85  850  909  500  204   298 #>  [556,]  341  602   57  736  535  551   83  431   76   517 #>  [557,]  276  474  334   88   19  451  627  359  807   582 #>  [558,]  626  870  708   42  495  382   74  107  468   864 #>  [559,]  542    7  923  429  890  699  396  323  776   946 #>  [560,]  142  668  956  193  773  217  416    3  279   407 #>  [561,]   22  425  539  436  390  788  258  664  113   813 #>  [562,]  843  817  121  551  327  736  857   11  683    33 #>  [563,]  933  362  579  979  346  360   99  762  394   893 #>  [564,]  750  713  235  928  199  415  572  608  112    37 #>  [565,]  321  868  482  128  427  428  271  472   51   145 #>  [566,]  776   50  719  257  758    7  434  810  477   705 #>  [567,]  614  891  709  431   97  839   47  158  942   640 #>  [568,]  505  171    8  183  233  645  420  533  481   800 #>  [569,]  169  605  581  742  593  939  453  833  220   958 #>  [570,]   31  177  918  734  919   59  219   95  162    77 #>  [571,]   64  531   68  459  598  639   56  548  925   446 #>  [572,]  638  232  608  693  976  510  103  854  713   564 #>  [573,]  249  426  899  648  865  175  905  453  516   449 #>  [574,]  828  368   32  641  301  330  159  212  313   467 #>  [575,]  838   53  735  490  522  651  754  659  518  1000 #>  [576,]  848  766  530  429  460  713  389  135  112   900 #>  [577,]  710  354  646  692  858  256  309  959   58   255 #>  [578,]  194  269  644  337   89  317  351   86  867     9 #>  [579,]  762  600  315  362  563  161  394   35  933   748 #>  [580,]  737  717  673  937  307  658   97  703  709   223 #>  [581,]  310  697  569  910  120  102  624  605  903   490 #>  [582,]  502  359  264  353  237  975  842  723  474   276 #>  [583,]   15  680  615  254  795  201  507  815  992   437 #>  [584,]  423  851  175  273   90  899  661   26  290    17 #>  [585,]  861  546  392  844  504  132  492  341  229   677 #>  [586,]  411  281  810  884   50  138  776  493  566   485 #>  [587,]  107  352  147  789  190  625   74  218  821   438 #>  [588,]  827  518  254  201  475   27  942  203  808   680 #>  [589,]   44  799  256  101  509   93  604  255   58   877 #>  [590,]  473  727  702  694  729  664  394  215  987   696 #>  [591,]  153   67  336  691  730  974    5  922  329   622 #>  [592,]   27  203  831  324  174  791  136   38  888   904 #>  [593,]  220  569  516  648  169  965  605  958  150   453 #>  [594,]  340  361  728  510  725  386  339  278  690   601 #>  [595,]  683  843   98  306  955   46  500  327  817   121 #>  [596,]  769  174  196  831  904  345    9  888  827   758 #>  [597,]  206  918  438  982   95  147  538  871  106   375 #>  [598,]  210   68  188  353  777  571  264  723  111   548 #>  [599,]   38  707  700  831  675  872  389  592  763   278 #>  [600,]  579  315  394  161  762  293  696   87  344   732 #>  [601,]  652  674  503  785  924  339  541  151  117   765 #>  [602,]  556  517  782  341  431  535  839  861  620   736 #>  [603,]  521  444  456   45  764  298  432  994  241   167 #>  [604,]  109   53  539  838  425  987  589  637   73   775 #>  [605,]  742  569  939  833  169 1000  337  480  383   651 #>  [606,]  288  470  497  835  894  619  583  712   39   814 #>  [607,]  549  226  905  995  266  951   26  308   61    17 #>  [608,]  151  674  339  100  572  601  806  638  564   693 #>  [609,]  685  544  275  642  417  180    4  756  875   859 #>  [610,]  816  488  720   73  393  109  502  466  464   136 #>  [611,]  924  198  503  220  194  331  652  351  317   578 #>  [612,]  734   60  757  699  634  919  396  228  177   477 #>  [613,]  304  915  990  965  632  358  284  968   74   316 #>  [614,]  567  839  891  640  431   97  709   39  726    47 #>  [615,]  876  201  254  507  583   15  265  753  655   680 #>  [616,]  529  433  964  478  246  693  200  676  347   381 #>  [617,]  126  711  101   35  796  715  824   53  181   762 #>  [618,]  704   92  377  355   56  374  977   68  749   412 #>  [619,]  898  712  285  606  430  835  267  250  681    15 #>  [620,]   57  517  341  556  431  602  782   21  421   305 #>  [621,]  520  883  552  804  417  180  609  492   66   657 #>  [622,]  671  300  514  189  524  153  105  993   67   591 #>  [623,]  292  322  649  143  118  398  469  403  259   912 #>  [624,]  450  910  958  698  941  581  205  569  550   150 #>  [625,]  190  789  794  540  352  147  902  272  772   956 #>  [626,]  558  495  107  870  864  382   42  468  708   772 #>  [627,]  374  377  440  557  618  704  649   92  412   474 #>  [628,]  434  728  135  361  340    7  940  690  594   841 #>  [629,]  290  404  857  948  273  513   33  738  110   975 #>  [630,]  642   63  936  479   44  811  824  589  410   325 #>  [631,]  447  394   99  764  729  830  826  184    8   362 #>  [632,]   74  304  316  897  218  613  107  587  870   129 #>  [633,]  739  326  363  232  235  282   29  553  959   224 #>  [634,]  699  686  396  612  757  890  183  734  919   542 #>  [635,]  119  963  246  478  866  976  886  885  510   894 #>  [636,]  892  637  309  872  954  515  344   87  251   256 #>  [637,]  636   87  892  236  954  987  251  344  309    73 #>  [638,]  572  103  235  693  232  608  564  633  976   674 #>  [639,]   56  688  262   68  663  531  458  777   52   571 #>  [640,]   39  614   47  567  437   97  158  891  305   709 #>  [641,]  574  949   32  545  217  193  828  368  301   808 #>  [642,]  630  936   63  679  685   55  370  325  804   741 #>  [643,]  759  100  519  964  234  653  200  973  186   616 #>  [644,]  486  498  136   89  269  337  578  117  945    86 #>  [645,]    8  505  761  800  720  991  171  568  826   214 #>  [646,]  692  577  863  208  858  141  959  130  710   741 #>  [647,]  873  427  128  701  472   51  565  972  380   455 #>  [648,]  426  381  573  516  249  449  453  433  905   331 #>  [649,]  143  118  469  440  627   79  457  703  623   213 #>  [650,]  591   67  153  989  840  691  336  980  671   730 #>  [651,]  490 1000  480  833  575  518  659  845  939   791 #>  [652,]  503  601  924  674  541  510  785  331  419   578 #>  [653,]  253  951  973  549  234  901  100  607  445    20 #>  [654,]  803  295  907  818  275  714  885  659  746    84 #>  [655,]  335  507  746   27  203  354  254  981  324   592 #>  [656,]  287  753  436  760  784  692  212   91  113   788 #>  [657,]  180  303  367  520  491   78  697  552  998   875 #>  [658,]  223  937  737  359  580  717  451  488  942   522 #>  [659,]  295  833  651  388  575  490  818  907   93  1000 #>  [660,]  869   96  342  669  284  352  418  587  107   772 #>  [661,]  274  715  617  423  181  882  999  527  796   176 #>  [662,]  481  533   51  397  401  837  149    8  568   701 #>  [663,]  262  688  273  777  639   52  458   56   26    68 #>  [664,]  702  813  987   87  694   22  236  509  877   590 #>  [665,]   55  999  325  752  400  523  181  343  501   804 #>  [666,]  874  339  194  240  312  924  278  601  351   785 #>  [667,]  313  511  323  923  467  258  330  436  946   159 #>  [668,]  142  896  560  193  196  956  769  279    3   773 #>  [669,]  869  508  240  660  198  342  386  186  594   690 #>  [670,]  967  929  462  877  604   53  332  509  811   727 #>  [671,]  622  514  300  105  153  189  524  781  336   913 #>  [672,]   23  792  507  335  484  655  981  675  179   831 #>  [673,]  580  737  307   97  717  937  709  703  891    47 #>  [674,]  151  601  785  652  503  608  924  339  331   100 #>  [675,]   38  599  981  831  389  179  872  854  309   354 #>  [676,]  379  134  886  714  433  478  503  331  426   207 #>  [677,]  227  524   76  813  694  844  189  733  343   509 #>  [678,]  783  432  170  840  994  364  770  764  662   241 #>  [679,]  187  685  370  130  642   55  863  741  263   501 #>  [680,]  254  201  815  588  328  827  437  952  583   279 #>  [681,]  349  267  133  285   14  898  545  407  430   158 #>  [682,]  291  241  144  348  554  338  961  994  456   368 #>  [683,]  843  595   98  327  817  121  955  500  306   562 #>  [684,]  834   64  459  571  825  531  238  297  704   618 #>  [685,]  679  187  609  642  370  221  756  859  275   263 #>  [686,]  634  396  884  542  810  919  699  612  177     7 #>  [687,]  248  230  323  932  287   75  923  908  173   689 #>  [688,]  262  639  777  663   56   13  723   10  860    68 #>  [689,]   34   75  935  230  687  932   91  248  287   485 #>  [690,]   18  435  342  361  725  594  957  628  728   794 #>  [691,]  730   67  191  913  146  300  591  329  960   405 #>  [692,]  646  577  208  858  863  354  141  710   80   656 #>  [693,]  478  510  638  200  572  454  674  676  652   976 #>  [694,]  813  509  664  727  590  733  702  473  877   227 #>  [695,]  239  980  840  170  364  722  781    5  852   105 #>  [696,]  733  813  590  600  694  664  727  293  225   877 #>  [697,]  581  310  910  569  648  490  120  624  449   358 #>  [698,]  910  205  624  403  903  917  941  450  120   292 #>  [699,]  890  634  946  396  420  612   60  757  104   705 #>  [700,]  707  599  763  104  174   38  761  139  831   872 #>  [701,]  481   51   62  428    2  455  662  472  233   380 #>  [702,]  664  987  236   87  729  590  215  813  539   694 #>  [703,]  409  986  580  673   79  213  737  289  726   102 #>  [704,]  618   92  377  355   56  297  374  639   68   412 #>  [705,]  477  758   60  257  699  946  612  467  890   345 #>  [706,]  493  884  570  797  177  277  919  810  155    59 #>  [707,]  700  599  763  104   38  890  831  761  946   174 #>  [708,]  558  387  626  767  320  211  534  847  495   870 #>  [709,]  891   97  942  952  937  307  580  737   47   673 #>  [710,]  577  354   84  936  256  255   29  265  907    58 #>  [711,]  126  101  617  527  824  796  388  127  181   745 #>  [712,]  835   39  619  640  606   78  898  250  437   875 #>  [713,]  564  576  572  940  112  389  232  854  386   135 #>  [714,]  134  295  207  654  676  379  886  818  803   659 #>  [715,]  882   35  796  181  661  274  617  762  999   126 #>  [716,]  474  404  412  975  223  409  359  522  550   582 #>  [717,]  737  937  580  223  673  307  658  451  726   276 #>  [718,]  855  124   28  528  922  390  208  182  141   189 #>  [719,]  927  257  758  179  923  566   23  705  795   323 #>  [720,]  816  645  610  826  761  502  486  264  174   498 #>  [721,]   72   80   91  208  692  935  141  646  370   863 #>  [722,]  122    5  878  439  319  980  239  336  105   524 #>  [723,]  860   13   56  777  369  353  688  582  262    10 #>  [724,]  475  518  588  410  838  942  998  328  575   754 #>  [725,]    9  904  361  981  594  578  194  510  831   957 #>  [726,]   82  782  421  737  717  658   97  580  223   673 #>  [727,]  473  590  694  877  729  733  929  394  987   702 #>  [728,]  340  361  594  135  628  841  854  413  725   510 #>  [729,]  987  236  702  394  826   87  631  590  664   727 #>  [730,]  691  191  960  146   67  329  591  160  405   397 #>  [731,]  979  732  346  933  401  394  161  893  563    99 #>  [732,]  161  731  401  971  600  543  346  933  893   974 #>  [733,]  696  813  694  509  877  664  225  727  293   590 #>  [734,]  612  919  177   60  228  757  634  183  699   396 #>  [735,]  237  845  975  522  575  738  966  480  490   488 #>  [736,]  551   83  556  817  341  562   57   76  836   602 #>  [737,]  717  937  580  673  307  658  223  726   97   891 #>  [738,]  237  851  975  290  735  522  845  273  948    53 #>  [739,]  633  326  363   29  501  282  224  523  182   959 #>  [740,]   94  156  373  166  176  319   16   36  771   274 #>  [741,]  130  858   44  370  528  863  208  646  787   501 #>  [742,]  605  369  480  169  383  939  966 1000   10   337 #>  [743,]  595  832  843  683  977   98  306  500  749    11 #>  [744,]  233  184  111  837  154  830  214  210  800   499 #>  [745,]  127  419  541  315  892  126  515  636  762   422 #>  [746,]  335  655  907  207  203   27  507  885  324   981 #>  [747,]  224  822  523  496  422  235  274  400  527   199 #>  [748,]  543  971  579  161  231  823  895  600  802   732 #>  [749,]  355  977  377   92  618  704  374  476  185   259 #>  [750,]  199  415  235  822  564   37  112  928  930   363 #>  [751,]  548  571   46  168  955   64  618   68  459   598 #>  [752,]  880  501  665  787  402   28  343  930   55   224 #>  [753,]  656  265  876  936   65  615   58  354  201   108 #>  [754,]  838  522  410  575  441  724  998   53  658   462 #>  [755,]  465  909  306  500   98  836   19  125  595   555 #>  [756,]  221  859  876  265  275  885  963  497  936   615 #>  [757,]  612   60  228  634  318  699  395  345  734   890 #>  [758,]  705  257   60  196  477  927  596  719  345   757 #>  [759,]  643  653   12  519  100  253  471  365  234   973 #>  [760,]  436  108  212  425  258  159  114  261  467   561 #>  [761,]  104  763  645  420  946  357  505  720  890   700 #>  [762,]  579   35  315  362  796  600  245  715  563   877 #>  [763,]  104  761  707   49  890  700  357  946  420   505 #>  [764,]  447  631  603  364   46  793  432  521  167   779 #>  [765,]   70  950  137  515   37  152  117  268  541   422 #>  [766,]  460  530  848  576  854  429  389  900  141   135 #>  [767,]  847  387  211  825  708  408  320  531  308   984 #>  [768,]  378  106  168  947  982  131  468   95  864   459 #>  [769,]  596  196  957  853    9  904  815  827  668   896 #>  [770,]  662  481  432  730  678  686  171   51  994   568 #>  [771,]  823  231  302  166  496   12  748  822  971   543 #>  [772,]  194  902  625  352  789  190   18  351  794   314 #>  [773,]  272  918   60  537  477  162  705  228  560   668 #>  [774,]   77  809  947  906  938  243   62   95  219   864 #>  [775,]   25  425  539  114  109  604   76  889  694    45 #>  [776,]    7  434  810  566   50  559  411  542  396   884 #>  [777,]  262   13  688  723  663   56   68  598  860   639 #>  [778,]  192  376  247  751  881  168  783  455  780   548 #>  [779,]  793  926  938  233  568  764  183  744  533   184 #>  [780,]  830  837  526   99  184  533  111  972  346   161 #>  [781,]  514  105  671  167  993  356  448  300  840   239 #>  [782,]   82  726  421  602  431  322  839  754  620   978 #>  [783,]  678  170  364  432  662  764  994  840   46   533 #>  [784,]  116  953  285  656  430  753  489  202  133   760 #>  [785,]  911  901  140  151  674   20  601  226  503   419 #>  [786,]  271  160  429  829  940  135  856  576  389   950 #>  [787,]  343  528   28  225  741  536  501  130   44   858 #>  [788,]  311  436  561  258  287  667  390   22  323   248 #>  [789,]  190  625  147  352  772  902  794   95  438    42 #>  [790,]  458  308   30   61  222  663   52  549    6   424 #>  [791,]  324  203  136  805  518  827 1000  592   27    81 #>  [792,]   23  672  841  443  484  795  719   15  728   927 #>  [793,]  779  926  334  764  521  447  807  241  603   171 #>  [794,]  625  540  272  956  352  867  314  345  902   596 #>  [795,]  196   15  769  583  927  957  992  193  672   758 #>  [796,]   35  181  715  126  101  617  711  762  882   293 #>  [797,]  493  277  706  884  770  908  586  810  177   919 #>  [798,]   14  330  323  212  467  313  368  923  287   828 #>  [799,]  225  996  589   44  536  255  344  293  858   309 #>  [800,]  214  991  645    8  505  887  744  111  184   154 #>  [801,]  943   21  836  889   83   24   57  195  204   114 #>  [802,]  128  895  972  543  868  780  161  197  748   732 #>  [803,]  654  907  295  818  275  475  885  746   93   265 #>  [804,]  325  811  332  630  642  462  883   55    1   824 #>  [805,]  324  207  791  203  134  904 1000  833    9   283 #>  [806,]  371  145  151  152  512  197  427   20  608   100 #>  [807,]  842  334  926   88  353  264  502  276  720   582 #>  [808,]  393  888  261  464  942  588  466  952  123   827 #>  [809,]  906  774   59   62  219   77  938  243  183   131 #>  [810,]  884  776  396  686    7  542  434  919  612   634 #>  [811,]  332  462  967  929  670  824  630  804  325   441 #>  [812,]  280  386  186  413  340  713  572  976  594   728 #>  [813,]  664  694  733  509   22  702  390  696  227   877 #>  [814,]  250  221  497  470  756  876  463  288  898   430 #>  [815,]  328  279  399  680  827  283  769  896  952   853 #>  [816,]  610   73  720  109  488  251  466  539  826   761 #>  [817,]  448  473  327  843   83  551  683   45  562   167 #>  [818,]  907  295   84  654  388   93  659  553  803   379 #>  [819,]  417    4  642  685  861  679   63  370  844   546 #>  [820,]  483  446  534  708  864  192  947  468  626   558 #>  [821,]  968    3  587  853  352  342  897  896  794   956 #>  [822,]  199  415  235  750  747  224   37  823  422   152 #>  [823,]  302  771  231  748  822  415  543  496  197   971 #>  [824,]  101  711  332  325  126  617  589  527   93   400 #>  [825,]  767   30  639  834  531  847  458  242  684    64 #>  [826,]  502  264  720  729  645  631  245  816  447   236 #>  [827,]  588  203  791  254  518  328   27  324  592   888 #>  [828,]  574  368  330  313   32  301  159  467  212   511 #>  [829,]  786  713  940  271  856  135  427  386  812   628 #>  [830,]  184  111   99  837  214  744  362  780  533   631 #>  [831,]   38  599  592  707  904  596  700  174  675   888 #>  [832,]  555  306  743  595  239  850  465  500  364   695 #>  [833,]  939 1000  651  490  453  659  605  865  805   207 #>  [834,]  684  297  459  704  825  242  238  618   92   639 #>  [835,]  712   39   78  640  606  875  619  250  470   898 #>  [836,]  801  500   83  204   57   98  298  736  306   850 #>  [837,]  184  830  214  533  111  744  887   99    8   991 #>  [838,]  575  754  475   53  410  604   93  488  724   518 #>  [839,]  431  410   63  535  489  614  479  567  602   754 #>  [840,]  678  170  994  432  913  783  781  364  514   730 #>  [841,]  792  728  413  435  957  340  119   23  672   690 #>  [842,]  807  353  502  264  582  921  720  359  276    86 #>  [843,]  683  595  817  327  562   98  121  955  500   857 #>  [844,]  546  677  343  787  741  130   44  227  528   524 #>  [845,]  237  735  490 1000  975  738  651  480  939   369 #>  [846,]  849  148  812  530   40  413  848  766  232   460 #>  [847,]  767  408  211  222  308  458  531  790   64   825 #>  [848,]  530  766  460  576  429  135  854  389  173   494 #>  [849,]  846   40  812  413  976  280  246  103  119   172 #>  [850,]  204  298  356  306  241  521  448  836  603    24 #>  [851,]  738  273  584  290  237  845   17  975   26   441 #>  [852,]  980  695  868  974  988  149  376    5  732   482 #>  [853,]  957  769  896  815  992    9  904  668    3   956 #>  [854,]  976  866  675  766  530  460  728  389  232   510 #>  [855,]  718  124   28  922  528  787  182  189  208   390 #>  [856,]  277  786  271  155  686  472  829  701  160   434 #>  [857,]   33  121  629  327  404   11  967  290  670   110 #>  [858,]  741   44  130  646  528  799   22  589  577   863 #>  [859,]  885  756  963  265  221  275  710  654  876   803 #>  [860,]  369   10  723   13  550  975  237  688  777   845 #>  [861,]  602  517  132  535  341   63  556  163  839   489 #>  [862,]  178  452  242  297  870  238   10  547  382   459 #>  [863,]  646  130  208  501  741  858  959  370  141   692 #>  [864,]  468  947   42  446  626  774  789  495   95    77 #>  [865,]  453   17  331  833  266  426  226  939  419   659 #>  [866,]  976  854  553  510  635  981  232  478  119   885 #>  [867,]   81  350  269  540   86  383  791  956  399   794 #>  [868,]  802  321  128  543  482  565  974  732  197    51 #>  [869,]   96  660  342   18  669  352  772  418  983   690 #>  [870,]  382  862  495  558  178   10  626  242  218    42 #>  [871,]  162  537  144  918  291  206   32  997  961   217 #>  [872,]  892  636  309  251  954  637   38  515  592   599 #>  [873,]  244  647  128  972  371   20  408  895  197   512 #>  [874,]  312  380  278  339  666  140  117  940  512   139 #>  [875,]   78  470    4  288  180  835  609  275  250   367 #>  [876,]  265  615  221  756  753  859  936  201  507   354 #>  [877,]  509  987  929  664   35  694  733   87  702   813 #>  [878,]  439  319  696    5  733  122  722  971  882   336 #>  [879,]  962  457  452  259  469  178  242  440  297   862 #>  [880,]  752  665   55  343  156  787  115  402  930   970 #>  [881,]  408   64  534  424  244  847  925  222  571   531 #>  [882,]  715  999  181   35  929  796  661  274  762   877 #>  [883,]  423    1   66  804  325  552  584  525  441    16 #>  [884,]  810  396  686  919  177  542  493  634  776   348 #>  [885,]  859  746  654  963  907  335  803  553  818   655 #>  [886,]  134  676  379  207  510  714  478  805  981   454 #>  [887,]  991    8  214  837  800   99  184  397  505   645 #>  [888,]  261  393  808  174  592  596  827  831  816    27 #>  [889,]  195  114  444   25   24  159   45  943   21   775 #>  [890,]  946  699  104  420  763  357  761  707  634   700 #>  [891,]  709   97  942  937  307  567  737  952  673   580 #>  [892,]  636  872  637  309  515  745  127  541  954   251 #>  [893,]  346  933  731  780  563  979  732  161  971    99 #>  [894,]  635  886  963  134  246  714  283  606  885   303 #>  [895,]  197  802  972  231  951  543  371  748  244   268 #>  [896,]    3  992  668  142  815  853  279  769  956   193 #>  [897,]  316  383  218  968  487  538   81  416    3   399 #>  [898,]  285  430   15  615  583  681  267  619  784   250 #>  [899,]  249  573  175  426  905  527  865   90   17   423 #>  [900,]  959  112  363  182  326  389  141  766  515   309 #>  [901,]   20  951  785  151  140  512  911  253  234   371 #>  [902,]  314  272  228  318  395  345  625  190   86   772 #>  [903,]  102  120  409  550  986  698  966  703  910   581 #>  [904,]    9  203  324  725  831  805  596  592  791   769 #>  [905,]  516  607  899  175  226  150  453  865  426   331 #>  [906,]   62  809  243  774   77  318  395   59  701   938 #>  [907,]  818  803   93  654  746  295   84  659  475   885 #>  [908,]  542  687  338  191  323  281  559  691   67   230 #>  [909,]  755  465  125  649  627   98  306  500  374   118 #>  [910,]  698  624  450  205  581  941  903  917  697   120 #>  [911,]  785  140  117  901  226  419  268  644   20   266 #>  [912,]  398  216   11  476  623  229   33  292  121   322 #>  [913,]  994  300  691  432  356  730  511  215  514   456 #>  [914,]  150   90  549  175  790  365  449    6  458    30 #>  [915,]  358  310  965  491   41  613  581  316  990   897 #>  [916,]  187  172   40  679   54  326  863  370  685   141 #>  [917,]  441  205  404  120  698  522  716  754  975   462 #>  [918,]  375  773   95  272  871  789  190  597  206   147 #>  [919,]  177  734  348  396  612  634  699  686  183   884 #>  [920,]  286  217  949  307  931  560  673  406  487   289 #>  [921,]  123  464  406  393  952  942  842  350  217   949 #>  [922,]  124  153  296  336  718  974  960  855  536   321 #>  [923,]  323  667  946  467  559  257  313  179  927   890 #>  [924,]  503  611  652  601  331  674  194  578  666   785 #>  [925,]  969  222  499  270  455  526  154  534   64   210 #>  [926,]  807  375  793  779  938   88  842  183  334   233 #>  [927,]  719  257  179  758  261  923  196   23  705   467 #>  [928,]  415  750  564  145  934  199   37  713  482   112 #>  [929,]  877  509  670  332  882  727  694   35  811   967 #>  [930,]  402  199  415  750  182   54  363  224  822    28 #>  [931,]   19  406  213   88  276  217  334  807  921   451 #>  [932,]   75  687   50  281  248  411  230  429  485   689 #>  [933,]  563  346  979  731  893  579  161  394  362   971 #>  [934,]  145  928  806  564  427  415  371  608   12   713 #>  [935,]   91  689  287  721  202  985  656  230   34    75 #>  [936,]  265  710   58  753  630   84  858   93  256   907 #>  [937,]  737  307  717  580  891  658  709  223  673   464 #>  [938,]  779  774  926  809  219  131  233  183  243   375 #>  [939,]  833 1000  337  605  453  136  845  945  742   651 #>  [940,]  874  339  386  135  278  713  389  340  594   380 #>  [941,]  205  273  550  688  663  975  290   56  629   860 #>  [942,]  952  709  891  464  588  808  123  937  658   921 #>  [943,]   21  801  889  554   24  294  195  114  372   301 #>  [944,]   12  145  934  759  371  806  253  100  771   197 #>  [945,]  498  486  136  337  939  245  644  188  845   502 #>  [946,]  890  420  357  761  104  699  763  707  414   923 #>  [947,]  864   95   77  774  468   42  938  789  446   375 #>  [948,]  513  290  360  273  110  738  629  617  245   670 #>  [949,]  217  641  464  307  808  921  123  393  574    32 #>  [950,]  296   70  137  765   37  515  428   49  389   960 #>  [951,]  253  901  653   20  607  549  371  785  895   496 #>  [952,]  942  328  709  399  123  279  588  891  921    97 #>  [953,]  116  784  489  372  202  250  163  614  839   133 #>  [954,]  637  236   87  344  636  251  872   49  309   892 #>  [955,]   46  447  764  595  979  364  683  548  110   239 #>  [956,]  540  279  123  867  794  350  668    3   81   416 #>  [957,]  853  769    9  992  435  795  725  904  596   196 #>  [958,]  624  169   10  452  242  569  382  688  870   178 #>  [959,]  900  182  363  646  996  326  577  141  799   863 #>  [960,]  146  296  191  730  160  405  329   49  397   950 #>  [961,]   19  241  997  931  301  291  871  793  521    32 #>  [962,]  879  259  452  698  292  403  242  355  469   903 #>  [963,]  635  885  859  866  756  246  478  497  553   886 #>  [964,]  200  616  693  478  246  454  280  638  186   103 #>  [965,]  990  304  593  284  915  358  220  569  218   605 #>  [966,]  480  102  369  735  409  742  550  845  120   975 #>  [967,]  462  670  811  332  441  522  929  754   53    33 #>  [968,]  821  897  853  587    3  218  383  342  107   990 #>  [969,]  925  270  499  154  222  534  455  495  598   210 #>  [970,]  492   66  392  665   55  546  804  880  263   229 #>  [971,]  748  319  543  732  933  161  579  893  731   346 #>  [972,]  455  802  128  895  780  526  837  499  925   512 #>  [973,]  234  653  901  516  220  607  785  549  331   995 #>  [974,]  321  482  336  732  922  960    5  591  868   153 #>  [975,]  237  735  738  845  550  582  412  860  522   369 #>  [976,]  866  119  854  510  413  572  635  232  478   693 #>  [977,]  749   92  355  618  377  704  185  374  834   629 #>  [978,]  322  782  520   78   82  421  602  157  917   839 #>  [979,]  933  731  563  346  394  727  110  473  631   893 #>  [980,]    5  974  852  336  988  122  695  722  732   319 #>  [981,]  510  335  675   38  831  904  655  746  725     9 #>  [982,]  206  106  378  597  131  768   95  871  918   219 #>  [983,]  508  519  240  873  869  234  339  312  669   483 #>  [984,]  387  767  973  519  320  165  211  847  708   220 #>  [985,]  485  349  935  689   75   34  287  798  430   281 #>  [986,]  409  703  102   79  289  903  487  966  213   580 #>  [987,]  702   87  236  729  664  877  637  109  539   604 #>  [988,]  974  922  980  482  321  989  336    5  153   930 #>  [989,]  329  922  461  591  153  146  988  124  494   160 #>  [990,]  965  284  304  613  968  915  358  611  593   220 #>  [991,]  887  800    8  214  505  645  837  184  397     2 #>  [992,]  896  853  957  795  668  583  769   15  815   196 #>  [993,]  299  514  781  622  671  356  300  913   24   850 #>  [994,]  432  913  603  678  170  456  241  356  167   764 #>  [995,]  308  226  607  266  222   26   61  549  262    17 #>  [996,]  799  255  536  422  293  225  400  515  796   363 #>  [997,]  286  333  144  961   32  554  301  871  368   294 #>  [998,]  120  724  754  490  651  575  480  917  102   966 #>  [999,]  181  882  715  274  796  661   35  665  929   293 #> [1000,]  651  490  939  833  480  136  791  845  324   805 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.72666755 0.8097100 0.8620675 0.8691525 0.9345249 0.9420102 0.9493400 #>    [2,] 0.49325212 0.4960293 0.5613617 0.5620789 0.5769737 0.6036426 0.6069854 #>    [3,] 0.50726146 0.5183307 0.6689220 0.7016938 0.7147221 0.8058337 0.8223215 #>    [4,] 0.66532399 0.9618048 1.0040433 1.1787265 1.2742836 1.3063631 1.3296188 #>    [5,] 0.38071311 0.4290138 0.7911791 0.8004290 0.8890433 0.9081256 0.9185220 #>    [6,] 0.58274810 0.6883679 0.7643623 0.7843264 0.8129710 0.8359138 0.8582896 #>    [7,] 0.32197602 0.4664662 0.5778488 0.7559854 0.7827749 0.7953649 0.8041409 #>    [8,] 0.28211698 0.2927667 0.2996897 0.3524449 0.3820754 0.4063836 0.4134455 #>    [9,] 0.16249153 0.3713843 0.5616679 0.5720963 0.5929149 0.6010574 0.6124032 #>   [10,] 0.33709287 0.3464059 0.4615934 0.4720840 0.4792210 0.5547554 0.5628950 #>   [11,] 0.65805498 0.7445004 0.7721509 0.7863693 0.8673317 0.9129152 0.9736517 #>   [12,] 0.80615766 0.8615500 0.8881159 0.9358527 0.9799640 1.0417790 1.0643763 #>   [13,] 0.32803217 0.3461653 0.3464059 0.3830702 0.4355314 0.4369115 0.4878336 #>   [14,] 0.52940172 0.5502880 0.7169765 0.7997611 0.8033435 0.8184706 0.8219581 #>   [15,] 0.40055743 0.5667472 0.6770483 0.7357897 0.8416748 0.8470790 0.8472386 #>   [16,] 0.45950904 0.9464069 1.0076168 1.1099824 1.1112812 1.1587201 1.2980187 #>   [17,] 0.30689500 0.3134443 0.4189660 0.4501258 0.5202311 0.6733964 0.6874139 #>   [18,] 0.49501575 0.6721726 0.7394969 0.7541308 0.7727911 0.8371230 0.8395579 #>   [19,] 0.49313717 0.5600438 0.7319334 0.7675529 0.8245881 0.8603477 0.8985919 #>   [20,] 0.30972644 0.3723822 0.4033998 0.4838718 0.5441243 0.5575688 0.6379733 #>   [21,] 0.38993929 0.5204365 0.6055838 0.6317039 0.6829604 0.7043581 0.7217896 #>   [22,] 0.32777646 0.4313812 0.4435468 0.4463318 0.5574227 0.5781900 0.5968053 #>   [23,] 0.20273430 0.5528594 0.5847434 0.6843805 0.7398328 0.7417554 0.7632668 #>   [24,] 0.31671388 0.5117713 0.5157728 0.5928255 0.5960224 0.6399055 0.6421347 #>   [25,] 0.29655166 0.4405703 0.4445684 0.5012887 0.5143188 0.5195480 0.5668878 #>   [26,] 0.30689500 0.4065921 0.5867443 0.6086270 0.6244477 0.6257655 0.6432517 #>   [27,] 0.32312041 0.3798134 0.4195950 0.4942339 0.4975381 0.4977324 0.5260683 #>   [28,] 0.56983298 0.5802992 0.6375469 0.6382194 0.6710112 0.6796016 0.6880738 #>   [29,] 0.26794125 0.3535964 0.4791531 0.5917765 0.6207631 0.6474570 0.6556245 #>   [30,] 0.37929358 0.4919387 0.6986757 0.7730402 0.8053192 0.8274369 0.8766009 #>   [31,] 0.89974347 1.0000166 1.0498250 1.0763545 1.0910156 1.1295344 1.1297563 #>   [32,] 0.38500397 0.4055069 0.4138250 0.4366263 0.5014779 0.5595461 0.5858419 #>   [33,] 0.28228754 0.3756378 0.5450259 0.6302357 0.6367244 0.7231573 0.7445004 #>   [34,] 0.62737448 0.9678321 1.0912592 1.2780055 1.3164937 1.3367186 1.4689492 #>   [35,] 0.16204728 0.3379261 0.3838727 0.4113234 0.4499775 0.4658299 0.4736367 #>   [36,] 0.45950904 0.6576356 0.8672299 0.8943460 0.9130479 0.9874108 1.0826752 #>   [37,] 0.48245416 0.5319602 0.5354090 0.5893181 0.6386311 0.6429988 0.6985654 #>   [38,] 0.20796788 0.2651181 0.3539117 0.4371354 0.4958151 0.5177569 0.5318616 #>   [39,] 0.73145021 0.7675121 0.8700979 0.9313255 0.9332158 0.9395828 1.1204542 #>   [40,] 0.73995339 1.1456839 1.1810814 1.2935131 1.4157265 1.4469715 1.4538162 #>   [41,] 0.81682605 0.8570367 0.8578227 0.8622234 0.8949679 0.9054565 0.9665167 #>   [42,] 0.45985499 0.5088258 0.6998580 0.7441190 0.7607292 0.7758987 0.7966936 #>   [43,] 0.77290813 0.9146903 0.9758765 1.0387343 1.0950888 1.1079705 1.1502047 #>   [44,] 0.39871010 0.4540076 0.4749586 0.5219028 0.5541176 0.5605503 0.6571999 #>   [45,] 0.29641761 0.2965517 0.4776748 0.5551390 0.5570472 0.5580324 0.5771989 #>   [46,] 0.22570923 0.6195217 0.6562354 0.6997957 0.8433683 0.8495732 0.8659845 #>   [47,] 0.50519820 0.5088624 0.5790840 0.6527911 0.7131403 0.7206088 0.7818534 #>   [48,] 0.77290813 1.2067848 1.2514272 1.2688767 1.2709868 1.3172425 1.4035461 #>   [49,] 0.39613866 0.4599030 0.4805084 0.4831040 0.5052953 0.6261700 0.6444018 #>   [50,] 0.48258154 0.6885693 0.6886593 0.7079467 0.7442037 0.7473217 0.7768417 #>   [51,] 0.40124961 0.4977992 0.5703528 0.6042808 0.6319333 0.7818590 0.8096551 #>   [52,] 0.51897209 0.5351661 0.5478889 0.6004341 0.6470694 0.6567072 0.6832157 #>   [53,] 0.39352417 0.4344496 0.4668662 0.5477871 0.5537995 0.5783871 0.5805692 #>   [54,] 0.62667671 0.7489201 0.8181011 0.8906607 0.8937950 0.9203392 0.9434570 #>   [55,] 0.49551223 0.8370578 0.8780534 0.9618674 1.0113949 1.0201324 1.0289878 #>   [56,] 0.36163299 0.3635215 0.4122397 0.4154556 0.4479839 0.5279255 0.5813527 #>   [57,] 0.48056186 0.6145466 0.6380409 0.7569329 0.8114058 0.8267563 0.8388748 #>   [58,] 0.26852313 0.4582526 0.4994470 0.5214343 0.5404717 0.5646314 0.5758257 #>   [59,] 0.48393501 0.5495375 0.7778778 0.7899018 0.8267051 0.8565037 0.8654039 #>   [60,] 0.34036219 0.4364486 0.4717362 0.4816995 0.5261131 0.5354910 0.5421288 #>   [61,] 0.49600493 0.5576360 0.5755266 0.6172277 0.6244477 0.6281970 0.6949225 #>   [62,] 0.30856636 0.4198757 0.5095595 0.6657533 0.6761530 0.6983704 0.7036138 #>   [63,] 0.55257244 0.5938785 0.6069422 0.6556221 0.7171444 0.8111982 0.8572411 #>   [64,] 0.32512205 0.3320616 0.6587798 0.7006877 0.7124614 0.7279119 0.7365207 #>   [65,] 0.46386013 0.4695897 0.6353309 0.7141213 0.7327772 0.7382776 0.7595756 #>   [66,] 0.97670334 1.0076168 1.1968019 1.2271464 1.3446122 1.3611101 1.3640040 #>   [67,] 0.41335534 0.6324190 0.6845004 0.8058896 0.8422156 0.8914912 0.9080761 #>   [68,] 0.36163299 0.4261778 0.4469215 0.4686958 0.4825014 0.5189721 0.5414238 #>   [69,] 1.51107966 1.6589341 1.6803736 1.7633264 1.7851241 1.7868004 1.8181585 #>   [70,] 0.35067820 0.4518437 0.4759033 0.4863959 0.4994755 0.5068683 0.5311659 #>   [71,] 0.65904766 0.8565037 1.0229287 1.0997628 1.2948956 1.4101825 1.4456894 #>   [72,] 0.40252766 0.8555896 0.8885810 1.0544714 1.1534208 1.2848188 1.2978171 #>   [73,] 0.28947462 0.3274747 0.3614889 0.3679953 0.4576731 0.4802871 0.5128993 #>   [74,] 0.60467187 0.8689217 0.9384047 0.9687932 0.9905847 1.0253031 1.0869086 #>   [75,] 0.45628983 0.6353383 0.7632342 0.8633382 0.9329811 0.9395810 0.9525389 #>   [76,] 0.37160870 0.6016286 0.6284527 0.6828496 0.7029230 0.7042528 0.7281142 #>   [77,] 0.29380508 0.5379111 0.6233205 0.6253797 0.7175512 0.8411832 0.8542686 #>   [78,] 0.85503370 1.1328012 1.1422407 1.1811188 1.1838279 1.3307193 1.3434844 #>   [79,] 0.44778020 0.6294748 0.6498975 0.7740893 0.7883617 0.8739325 0.8897300 #>   [80,] 0.49307072 0.7738750 0.7853475 0.8228466 0.8555896 0.8705685 0.8815705 #>   [81,] 0.22861821 0.3441181 0.4692380 0.5178033 0.5375364 0.5400914 0.5822028 #>   [82,] 0.29480950 0.3733879 0.5410964 0.7162001 0.7399593 0.7449085 0.7548719 #>   [83,] 0.44703221 0.4559690 0.6497351 0.6932367 0.7070713 0.7156910 0.7492470 #>   [84,] 0.26100890 0.3535964 0.4082966 0.4850027 0.5522475 0.5645943 0.5733226 #>   [85,] 1.24288998 1.2820551 1.3080872 1.3877239 1.4025237 1.4129578 1.4181257 #>   [86,] 0.23919051 0.3326339 0.3744237 0.5022410 0.5080412 0.5850598 0.6012933 #>   [87,] 0.25762515 0.2972152 0.2974267 0.3369376 0.3660930 0.3861454 0.3955661 #>   [88,] 0.51293127 0.6551125 0.6665497 0.6691600 0.6853487 0.7031451 0.7087314 #>   [89,] 0.33263393 0.3390093 0.4315356 0.4517080 0.4527273 0.5104940 0.5134758 #>   [90,] 0.35864150 0.6792510 0.6908221 0.7364897 0.7498608 0.7553055 0.7670700 #>   [91,] 0.58089880 0.7470089 0.7751697 0.8471519 0.8837845 0.8879854 0.8885810 #>   [92,] 0.21482655 0.3192498 0.4951694 0.5534756 0.5898105 0.6481500 0.7372540 #>   [93,] 0.41465008 0.4261464 0.4582526 0.5347712 0.5422432 0.5467849 0.5501079 #>   [94,] 0.32331748 0.7031026 1.1124788 1.3203250 1.3623979 1.4125589 1.4582359 #>   [95,] 0.49812194 0.6253797 0.6489189 0.6641405 0.6736198 0.7871180 0.8056775 #>   [96,] 0.56188713 0.7517489 0.9351859 0.9813738 1.1490799 1.2087528 1.2219430 #>   [97,] 0.28533840 0.4018046 0.4484670 0.5088624 0.5351247 0.5438791 0.5896249 #>   [98,] 0.50845022 0.5091336 0.6250467 0.7400678 0.8452505 0.8461640 0.8482045 #>   [99,] 0.26737232 0.3032775 0.3199653 0.3899443 0.4263329 0.4280097 0.4364676 #>  [100,] 0.68244585 0.6995117 0.7092158 0.7245304 0.7604653 0.8144933 0.8374726 #>  [101,] 0.26236959 0.2832913 0.3777820 0.4061242 0.4600988 0.4658299 0.5146423 #>  [102,] 0.42368850 0.4649971 0.4956023 0.5332454 0.5617095 0.6440072 0.6802909 #>  [103,] 0.56794768 0.5846301 0.7795106 0.9078382 0.9138146 0.9687402 0.9897263 #>  [104,] 0.14685469 0.3225140 0.3646208 0.4261481 0.4413218 0.4696609 0.4762272 #>  [105,] 0.50852186 0.6419147 0.6532212 0.6897191 0.7023150 0.7433929 0.7743777 #>  [106,] 0.47478984 0.5868384 0.7434131 0.9618460 1.0731336 1.2820551 1.2875190 #>  [107,] 0.57139727 0.5849253 0.7158669 0.8596975 0.8689217 0.9200229 0.9332864 #>  [108,] 0.37441316 0.4373040 0.5214343 0.5888097 0.5952096 0.6235280 0.6368087 #>  [109,] 0.28395603 0.2983813 0.3614889 0.4805422 0.4841111 0.4975852 0.5192461 #>  [110,] 0.47142176 0.5092074 0.5171684 0.6246194 0.6957029 0.7299974 0.7477471 #>  [111,] 0.23940559 0.2485049 0.2560809 0.2772501 0.3119845 0.3402041 0.4364676 #>  [112,] 0.50631343 0.5804150 0.6720118 0.6841026 0.7075095 0.7434478 0.7537386 #>  [113,] 0.46958972 0.6019544 0.6370831 0.6683828 0.7819214 0.7827216 0.8114984 #>  [114,] 0.31519554 0.4854600 0.5194426 0.5725685 0.5871150 0.5928255 0.6317039 #>  [115,] 1.51236924 1.6965957 1.9993561 2.1420384 2.2208357 2.2213274 2.3364826 #>  [116,] 0.40836798 0.6064300 0.7401971 0.9172492 0.9509869 0.9770139 0.9960072 #>  [117,] 0.49325212 0.5181753 0.5198990 0.5311659 0.5364413 0.5567701 0.5904319 #>  [118,] 0.55755421 0.7840977 0.8092036 0.8538552 0.8802212 0.9266294 0.9966654 #>  [119,] 0.54979344 0.6321951 0.7393154 0.7988946 0.8374577 0.8755081 0.8914884 #>  [120,] 0.49560227 0.5661242 0.5742484 0.6162639 0.6563952 0.6794629 0.7411290 #>  [121,] 0.31906938 0.3756378 0.5424152 0.7071859 0.7182690 0.7721509 0.7731621 #>  [122,] 0.42901377 0.7256913 0.7701238 0.8146284 0.8734917 0.9270625 0.9493081 #>  [123,] 0.29935140 0.4250039 0.4926186 0.5165777 0.5443034 0.5565392 0.5684547 #>  [124,] 0.41523780 0.5067832 0.6008395 0.6709441 0.7458169 0.7768934 0.7802598 #>  [125,] 1.07313356 1.1415306 1.1502524 1.1858248 1.3080872 1.3138281 1.3567319 #>  [126,] 0.14751575 0.2395810 0.2832913 0.4533817 0.5259329 0.5324620 0.5520984 #>  [127,] 0.06443966 0.3366414 0.3746857 0.5092728 0.5137240 0.5324620 0.5589415 #>  [128,] 0.53284063 0.5984853 0.6703250 0.6814798 0.7594601 0.7976276 0.8046401 #>  [129,] 1.02297307 1.1718049 1.1920359 1.2124288 1.2828481 1.3475023 1.3814946 #>  [130,] 0.15405061 0.4546352 0.5062567 0.5423670 0.6571999 0.6820056 0.6839586 #>  [131,] 0.25553271 0.6654261 0.7346248 0.7757727 0.7899018 0.7939642 0.8062760 #>  [132,] 0.86547602 0.8970732 1.3430960 1.3893413 1.3982740 1.5256870 1.5458449 #>  [133,] 0.48431153 0.6790356 0.7733589 0.9172492 0.9877655 0.9929044 1.0122385 #>  [134,] 0.34883844 0.3581274 0.4887094 0.5113789 0.5782629 0.6036790 0.6867016 #>  [135,] 0.59408958 0.6882761 0.7200208 0.7277475 0.7283482 0.7744817 0.8090901 #>  [136,] 0.33563634 0.3840161 0.4488178 0.4551959 0.4624604 0.4678077 0.4879243 #>  [137,] 0.45511302 0.4759033 0.4824542 0.4956164 0.4964945 0.5193491 0.5228930 #>  [138,] 0.61072572 0.7768417 1.0148562 1.1061426 1.1519527 1.2779657 1.2991928 #>  [139,] 0.25249656 0.5179615 0.5690602 0.6258398 0.6368329 0.6504395 0.6848681 #>  [140,] 0.29136213 0.4199149 0.4722432 0.4838718 0.4993541 0.5198990 0.5278492 #>  [141,] 0.59332833 0.6732199 0.7042646 0.7139725 0.7488673 0.7600961 0.7606841 #>  [142,] 0.29830756 0.4586979 0.6321502 0.6453967 0.7147221 0.7502826 0.7518568 #>  [143,] 0.32265696 0.5501678 0.7740893 0.7840977 0.8151480 0.9404044 0.9499624 #>  [144,] 0.58584188 0.6260155 0.6829496 0.6960337 0.6960953 0.7013317 0.8818413 #>  [145,] 0.66195796 0.7824041 0.7952973 0.8451047 0.9652059 0.9660713 0.9799640 #>  [146,] 0.34042097 0.3620540 0.3650805 0.3866689 0.3932664 0.5652193 0.6509063 #>  [147,] 0.37812440 0.4207396 0.5048567 0.5585657 0.7257125 0.7381944 0.8042922 #>  [148,] 1.15131549 1.2810866 1.2934965 1.3266193 1.3529674 1.4043410 1.4137043 #>  [149,] 0.41282584 0.4977992 0.7693824 0.9980705 1.0102675 1.0145934 1.0682097 #>  [150,] 0.52866295 0.5867149 0.6641392 0.6792510 0.7304106 0.7656672 0.7699362 #>  [151,] 0.40339981 0.4763262 0.4985683 0.5324795 0.5410309 0.5570124 0.5877109 #>  [152,] 0.47033551 0.4818503 0.4956164 0.5322763 0.5668470 0.5893181 0.6349802 #>  [153,] 0.46430135 0.5358025 0.6709441 0.6913944 0.7758536 0.8004290 0.8112136 #>  [154,] 0.38764386 0.4185635 0.4568369 0.4957934 0.4995652 0.5007027 0.5158165 #>  [155,] 0.95132626 1.0596260 1.0636588 1.0924781 1.1062555 1.1297563 1.2338483 #>  [156,] 0.70310258 0.9450375 1.1795501 1.2652902 1.2854138 1.3593177 1.3890956 #>  [157,] 0.86231166 1.2266487 1.3335865 1.4940680 1.5259377 1.5558534 1.5812885 #>  [158,] 0.58364424 0.6790356 0.7419672 0.8101535 0.8234630 0.8276648 0.8552609 #>  [159,] 0.43952755 0.4433500 0.4615941 0.4722408 0.5391146 0.5461238 0.5672518 #>  [160,] 0.39326638 0.5681018 0.6249424 0.6318440 0.6616281 0.6658165 0.7108721 #>  [161,] 0.34941449 0.5531793 0.5605032 0.5705519 0.5733315 0.5956059 0.6229609 #>  [162,] 0.33856994 0.5103232 0.5953116 0.7013317 0.7175509 0.7364385 0.7639167 #>  [163,] 0.46386013 0.6325121 0.6683828 0.6867021 0.7029230 0.7745303 0.8249739 #>  [164,] 0.65904766 0.7346248 0.7956973 0.9505694 0.9881929 0.9967604 1.2390030 #>  [165,] 1.18359251 1.2822832 1.3210305 1.4621665 1.5112165 1.6144769 1.6443415 #>  [166,] 0.74836536 0.8377372 0.8520448 0.9920423 1.0076821 1.0208917 1.1336779 #>  [167,] 0.50852186 0.5895573 0.6287314 0.6407823 0.6706020 0.6878454 0.7033729 #>  [168,] 0.96470288 1.0222207 1.1933826 1.3420571 1.3489228 1.4749502 1.4921076 #>  [169,] 0.42846953 0.4720840 0.5362433 0.5428345 0.5462618 0.6284243 0.6535770 #>  [170,] 0.39348927 0.6560235 0.6588787 0.6692396 0.7019516 0.7065253 0.7592750 #>  [171,] 0.29806934 0.3852903 0.4231938 0.4318330 0.4486543 0.4845532 0.5141029 #>  [172,] 0.73995339 0.8164930 0.9127880 0.9419796 1.0007135 1.0039851 1.0216292 #>  [173,] 0.21749205 0.3600651 0.3996591 0.6350446 0.6518242 0.7092109 0.7316385 #>  [174,] 0.45231043 0.4672089 0.4833765 0.4866844 0.5074002 0.5244547 0.5452787 #>  [175,] 0.35864150 0.4462709 0.5867149 0.6273272 0.6378868 0.6446261 0.6568017 #>  [176,] 0.57546200 0.7370457 0.7445396 0.7643623 0.7689641 0.8943460 0.9029988 #>  [177,] 0.17323721 0.4661364 0.5539247 0.6357865 0.6568841 0.7975294 0.7976421 #>  [178,] 0.19963094 0.3237152 0.4718094 0.5257162 0.6859418 0.7044802 0.7544403 #>  [179,] 0.55016563 0.5650288 0.5891896 0.6355266 0.6366751 0.6784494 0.6832054 #>  [180,] 0.65939650 0.9469638 1.0593055 1.0755036 1.0999389 1.1730262 1.2949061 #>  [181,] 0.21543118 0.3379261 0.3995012 0.4794847 0.5578336 0.5943796 0.6097702 #>  [182,] 0.30494790 0.4343023 0.5625654 0.5783648 0.5802992 0.6437100 0.6674260 #>  [183,] 0.40960757 0.5341237 0.6162245 0.6306146 0.6342283 0.6516121 0.6648181 #>  [184,] 0.15931084 0.1952491 0.2394056 0.2878867 0.3098108 0.3199653 0.4006137 #>  [185,] 0.76584837 0.8201800 0.8318641 0.8367191 0.8591225 0.8672299 0.8679146 #>  [186,] 0.35353393 0.7586573 0.7824928 1.0091854 1.0483619 1.0730232 1.1508498 #>  [187,] 0.62101146 0.7619380 0.8153248 0.8383902 0.9165247 0.9419796 1.1093868 #>  [188,] 0.35972911 0.4062591 0.4672631 0.4717255 0.4731373 0.4736213 0.4968963 #>  [189,] 0.43559954 0.6015625 0.6705100 0.6852607 0.6932263 0.7138488 0.7336673 #>  [190,] 0.22469770 0.2365854 0.4207396 0.6003259 0.6462882 0.6541314 0.6762029 #>  [191,] 0.34042097 0.4441550 0.5184139 0.5492915 0.5625614 0.6135824 0.6318440 #>  [192,] 0.71840251 1.1027772 1.2658440 1.3531502 1.4221938 1.4258656 1.4968465 #>  [193,] 0.42989427 0.6052769 0.6140587 0.6424725 0.6437833 0.6453967 0.6614984 #>  [194,] 0.34331059 0.5955148 0.6159968 0.6629289 0.6740367 0.6931504 0.7098203 #>  [195,] 0.27754795 0.3167139 0.3985979 0.4854600 0.5152618 0.5579414 0.5668878 #>  [196,] 0.42989427 0.4779306 0.5092030 0.5244347 0.5973128 0.6234866 0.6406285 #>  [197,] 0.45931643 0.4908727 0.6349802 0.6966594 0.7008487 0.7056615 0.7118589 #>  [198,] 0.37739999 0.5882150 0.7673149 0.8102401 0.8400396 0.8776682 0.9044010 #>  [199,] 0.30151359 0.3565465 0.3861720 0.4320349 0.6823364 0.7451368 0.7549311 #>  [200,] 0.60870073 0.6781948 0.7350491 0.9689498 1.0483619 1.1174622 1.1317736 #>  [201,] 0.29437217 0.4625485 0.5163395 0.5212258 0.5438884 0.6029263 0.6869609 #>  [202,] 0.85474638 0.8837845 0.8897325 1.0173525 1.1743702 1.1799850 1.2106235 #>  [203,] 0.27242371 0.3231204 0.3363142 0.3788185 0.3822031 0.4352136 0.4395273 #>  [204,] 0.25840348 0.3636242 0.5090628 0.7229896 0.7400569 0.7554334 0.7658162 #>  [205,] 0.54279262 0.5478008 0.6213898 0.6506005 0.6963692 0.7133369 0.7912810 #>  [206,] 0.41606262 0.7434131 0.7532283 0.8367997 0.9131486 0.9168565 1.0121487 #>  [207,] 0.29427333 0.3581274 0.3952823 0.4783976 0.5566394 0.5626203 0.5725534 #>  [208,] 0.47324210 0.4930707 0.5227492 0.5572702 0.6820056 0.7081440 0.7139725 #>  [209,] 1.34908018 1.4193772 1.5965955 1.7274508 1.7318449 1.7430095 1.8020726 #>  [210,] 0.27725011 0.3366712 0.3597291 0.4421812 0.4659093 0.4788244 0.4895493 #>  [211,] 0.61264531 0.6745134 0.7444127 0.7940877 0.8000014 0.8225042 0.8598614 #>  [212,] 0.52533369 0.5366817 0.5726287 0.5789785 0.5832454 0.5844200 0.6551748 #>  [213,] 0.59318463 0.6163291 0.6416123 0.6645695 0.6691600 0.6708134 0.6836542 #>  [214,] 0.25608089 0.2645775 0.2878867 0.3234940 0.3300524 0.3570336 0.3781323 #>  [215,] 0.46693450 0.5336304 0.5708487 0.6274230 0.6344533 0.6457027 0.6782718 #>  [216,] 0.61830451 0.7231573 0.8673317 0.8691525 0.8801569 0.9260989 0.9282834 #>  [217,] 0.32414932 0.5643745 0.6386784 0.6476302 0.6648797 0.6799200 0.6842926 #>  [218,] 0.52368712 0.5849253 0.6627103 0.7011442 0.7024402 0.8092195 0.8220083 #>  [219,] 0.25553271 0.5495375 0.5728182 0.6535863 0.7314470 0.7956973 0.8056775 #>  [220,] 0.47473028 0.7042981 0.7137055 0.7679271 0.7947253 0.7969469 0.7990585 #>  [221,] 0.32437639 0.4994656 0.6357960 0.7205015 0.9201780 0.9215999 0.9404181 #>  [222,] 0.24170716 0.5704638 0.5755266 0.5783092 0.5802389 0.5963063 0.6517317 #>  [223,] 0.33588134 0.3729872 0.4259080 0.4299896 0.4884610 0.5245042 0.5304683 #>  [224,] 0.55040969 0.5554357 0.6296867 0.6717729 0.6823364 0.7376579 0.7652997 #>  [225,] 0.29535952 0.3477411 0.3543461 0.5605503 0.5754923 0.5763118 0.6085296 #>  [226,] 0.31482498 0.4031128 0.4546114 0.5202311 0.5833537 0.5867443 0.5911468 #>  [227,] 0.37160870 0.4719597 0.5665950 0.5915079 0.6852607 0.6957972 0.7116857 #>  [228,] 0.35958976 0.3997845 0.4528017 0.4890245 0.4924286 0.5287700 0.5329872 #>  [229,] 0.94139826 1.0487587 1.1635489 1.3046073 1.4278896 1.4732223 1.4776927 #>  [230,] 0.57284287 0.7383399 0.7439148 0.9037339 0.9156511 0.9525389 1.0163470 #>  [231,] 0.53352225 0.6379285 0.6653746 0.6928172 0.7550044 0.7734424 0.8092300 #>  [232,] 0.58463008 0.7075095 0.7220051 0.7256323 0.7515061 0.7835578 0.7924004 #>  [233,] 0.24281462 0.4443296 0.4466211 0.4598913 0.4745243 0.4821190 0.4995652 #>  [234,] 0.40814915 0.6923425 0.6985594 0.7029436 0.7437775 0.7608579 0.7805336 #>  [235,] 0.43203489 0.5334684 0.5642322 0.6717729 0.6861234 0.7306317 0.7395680 #>  [236,] 0.25762515 0.3158315 0.3241803 0.3638917 0.3725327 0.3917874 0.4576731 #>  [237,] 0.21621234 0.2993440 0.3241174 0.3606442 0.5280719 0.5454793 0.5641025 #>  [238,] 0.36114093 0.3684162 0.5838579 0.6859418 0.6913399 0.8031425 0.8036112 #>  [239,] 0.69192611 0.7033729 0.8433683 0.8764111 0.8907209 0.9033902 0.9415723 #>  [240,] 0.37739999 0.5045586 0.6459643 0.7834398 0.8770981 0.9181377 0.9484627 #>  [241,] 0.62245050 0.6234906 0.6423159 0.6530676 0.7255876 0.7315666 0.7799889 #>  [242,] 0.32654163 0.4281061 0.4327940 0.4718094 0.6913399 0.7450960 0.8015747 #>  [243,] 0.41987574 0.4646931 0.5061674 0.5499141 0.5528459 0.5942521 0.6232723 #>  [244,] 0.40054053 0.7786418 0.8192996 0.8594629 0.8915273 0.9508552 0.9858388 #>  [245,] 0.42657573 0.4672631 0.5004312 0.5095047 0.5202869 0.5477122 0.5559143 #>  [246,] 0.62934812 0.7108793 0.9315047 0.9876911 1.0221508 1.1121067 1.1252489 #>  [247,] 1.19532608 1.4282885 1.4968465 1.5217585 1.5652314 1.6549493 1.8111610 #>  [248,] 0.36006507 0.4900363 0.5610092 0.6500378 0.6975652 0.7439148 0.7623723 #>  [249,] 0.18269523 0.3962645 0.4145553 0.6482028 0.7276087 0.7408395 0.7814804 #>  [250,] 0.91551803 0.9878889 1.0619157 1.1555241 1.1910682 1.1929541 1.2247773 #>  [251,] 0.36799528 0.4431670 0.4499934 0.4544130 0.4574332 0.4991430 0.4994470 #>  [252,] 0.75982883 1.0666695 1.1222927 1.1840245 1.2400732 1.3075007 1.3249308 #>  [253,] 0.40444098 0.4058309 0.6220970 0.6850399 0.6995117 0.7652700 0.7699610 #>  [254,] 0.29437217 0.3978295 0.3994549 0.4303809 0.5019497 0.6040935 0.6041257 #>  [255,] 0.26100890 0.2679412 0.4827767 0.4880186 0.5107730 0.5618358 0.5806498 #>  [256,] 0.26852313 0.4146501 0.4296011 0.4431670 0.4897566 0.5259838 0.5526113 #>  [257,] 0.31063550 0.3126939 0.4355463 0.5226242 0.6371384 0.7045538 0.7316664 #>  [258,] 0.49885128 0.5742478 0.5851304 0.6019544 0.6192539 0.6225504 0.6413004 #>  [259,] 0.62433992 0.6787017 0.7413320 0.9557806 1.1018217 1.1376626 1.1487601 #>  [260,] 0.29497860 0.6163291 0.7022846 0.7371257 0.7411939 0.7441190 0.7995053 #>  [261,] 0.40699911 0.4789687 0.5131628 0.5973128 0.6040935 0.6487343 0.6614984 #>  [262,] 0.22408539 0.2714625 0.3716492 0.3841412 0.4369115 0.4479839 0.4825014 #>  [263,] 0.87805343 1.0420089 1.2569964 1.2873281 1.3577923 1.3733333 1.3845308 #>  [264,] 0.29706270 0.3412915 0.4462235 0.4514934 0.4571896 0.4736213 0.5004312 #>  [265,] 0.45455793 0.4616996 0.6133185 0.6185030 0.6357960 0.6552194 0.6643750 #>  [266,] 0.31344431 0.3148250 0.4065921 0.5260412 0.5660972 0.5665038 0.5902812 #>  [267,] 0.48431153 0.7313355 0.7419672 0.8950916 0.9263793 0.9337919 0.9824364 #>  [268,] 0.47285529 0.4818503 0.5068683 0.5228930 0.5408426 0.5987292 0.6321622 #>  [269,] 0.23919051 0.3390093 0.3709596 0.4158956 0.4551959 0.4741479 0.4941609 #>  [270,] 0.46469308 0.4965426 0.5387856 0.5878735 0.6174598 0.6419452 0.7079109 #>  [271,] 0.45591350 0.6985001 0.7108721 0.9015699 0.9021288 0.9443799 0.9597881 #>  [272,] 0.35958976 0.3881146 0.3941812 0.4509151 0.5421288 0.5728519 0.6344583 #>  [273,] 0.26615862 0.4742886 0.4751764 0.4875609 0.4975945 0.5277055 0.5968079 #>  [274,] 0.46608785 0.5170699 0.5754620 0.6201443 0.6251989 0.6273983 0.7159077 #>  [275,] 0.58296622 0.6109639 0.7214781 0.7533634 0.7627831 0.8152758 0.8957602 #>  [276,] 0.34739365 0.3907616 0.4058629 0.4409054 0.4884610 0.5294005 0.5621064 #>  [277,] 0.95151666 1.0565311 1.0924781 1.0951788 1.1320516 1.1538814 1.3222739 #>  [278,] 0.25249656 0.4880271 0.5181753 0.5715110 0.5944308 0.6773395 0.6874640 #>  [279,] 0.41979717 0.4692965 0.4926186 0.4931282 0.4959981 0.5312945 0.5703058 #>  [280,] 0.35353393 0.6337353 0.8906982 0.9996878 1.0578326 1.1542434 1.1704662 #>  [281,] 0.57843228 0.7473217 0.7608215 0.8576092 0.9133008 0.9265705 0.9267963 #>  [282,] 0.73911139 0.7509038 0.8164930 0.9897263 1.0819185 1.1331229 1.1802298 #>  [283,] 0.54971520 0.6136595 0.6196446 0.6239828 0.6476201 0.6649071 0.6701848 #>  [284,] 0.57601953 0.7643707 0.8966643 0.9608681 1.0354863 1.0856863 1.1817941 #>  [285,] 0.33322046 0.4524052 0.7894975 0.7908098 0.8417865 0.8604695 0.8608198 #>  [286,] 0.53972126 0.6525582 0.7101692 0.7615551 0.8527545 0.8833612 0.8884841 #>  [287,] 0.53962990 0.6965316 0.7234003 0.7470089 0.7582398 0.8067058 0.8114528 #>  [288,] 0.41614246 0.8925128 1.1601059 1.2330966 1.2696690 1.3817280 1.4032803 #>  [289,] 0.44778020 0.5361900 0.6334876 0.6913560 0.7352142 0.7643279 0.8323698 #>  [290,] 0.26615862 0.3654061 0.3932595 0.4184227 0.4674051 0.5481429 0.6373681 #>  [291,] 0.62782911 0.7364385 0.8027011 0.8818413 0.8928795 0.9362376 0.9505694 #>  [292,] 0.60270493 0.7413320 0.7473792 0.7859280 0.9037063 0.9905904 1.0071554 #>  [293,] 0.34386683 0.3543461 0.5477174 0.5577568 0.6131649 0.6184081 0.6219655 #>  [294,] 0.58364424 0.6336560 0.6829604 0.7272974 0.7384746 0.7615551 0.8131705 #>  [295,] 0.34728495 0.3936622 0.4392809 0.4864065 0.5416857 0.5690136 0.6384541 #>  [296,] 0.38963647 0.4377025 0.6509063 0.6658165 0.7074673 0.7199234 0.7279112 #>  [297,] 0.36114093 0.4281061 0.4952900 0.5257162 0.5678589 0.6121840 0.7143553 #>  [298,] 0.25840348 0.4698326 0.4995905 0.5459037 0.5927229 0.5940878 0.6423159 #>  [299,] 0.71731716 0.9690899 1.0124374 1.1233966 1.1353655 1.1840245 1.2804403 #>  [300,] 0.47830768 0.4935026 0.5984266 0.6607744 0.6782718 0.7138488 0.7170015 #>  [301,] 0.42794129 0.4366263 0.4722408 0.4759337 0.5468354 0.6821758 0.6882130 #>  [302,] 0.37485448 0.6070403 0.7734424 0.8788907 0.9495125 0.9800310 0.9817554 #>  [303,] 0.81561145 0.8937928 1.0999389 1.2557344 1.2921913 1.3285775 1.5434533 #>  [304,] 0.57601953 0.7470898 0.8989058 0.9359785 0.9797950 0.9905847 1.0190620 #>  [305,] 0.91636848 0.9398867 1.0835493 1.1134203 1.1184001 1.1681996 1.1730295 #>  [306,] 0.67064451 0.7104613 0.7262949 0.7566430 0.8075282 0.8452505 0.9044312 #>  [307,] 0.31189146 0.3936469 0.4206207 0.4626984 0.4901913 0.5157875 0.5235065 #>  [308,] 0.24170716 0.4186348 0.4214575 0.4842221 0.4960049 0.6517020 0.6713906 #>  [309,] 0.30147013 0.4067339 0.4296011 0.4587595 0.4778906 0.4991430 0.5087544 #>  [310,] 0.29480494 0.6456752 0.8178338 0.8420183 0.8541841 0.8568186 0.8570367 #>  [311,] 0.32590028 0.6293727 0.6975652 0.7681095 0.7974593 0.8365417 0.8415055 #>  [312,] 0.31991340 0.3853171 0.4993541 0.5196000 0.6810334 0.6819535 0.6857542 #>  [313,] 0.25517840 0.2826330 0.3927913 0.3964973 0.4395276 0.5238148 0.5508303 #>  [314,] 0.30928185 0.3535250 0.3941812 0.4890245 0.5080412 0.6133341 0.6277368 #>  [315,] 0.43843694 0.4717162 0.4728553 0.4845064 0.4863959 0.4873263 0.5092728 #>  [316,] 0.64659558 0.6627103 0.7779886 0.8324753 0.8522169 0.8622234 0.9084616 #>  [317,] 0.18747479 0.4499598 0.6421050 0.6931504 0.6975487 0.7169603 0.7230244 #>  [318,] 0.09075752 0.4528017 0.5278581 0.5483420 0.5942521 0.6133341 0.6991666 #>  [319,] 0.49416672 0.6661864 0.8754268 0.9621633 1.0059643 1.0355408 1.0508019 #>  [320,] 0.98798472 1.0000294 1.1017314 1.2814191 1.3101946 1.4291799 1.5179152 #>  [321,] 0.24710060 0.5316180 0.7209141 0.7250614 0.7591794 0.8133034 0.8651931 #>  [322,] 0.78592802 0.7971660 0.8188657 0.8721073 0.8840208 0.9099137 1.0040741 #>  [323,] 0.32835119 0.4845860 0.5974996 0.6446255 0.6721220 0.7043014 0.7070704 #>  [324,] 0.22486505 0.2501481 0.2724237 0.3952823 0.4639097 0.4848401 0.4879243 #>  [325,] 0.55095344 0.6666814 0.7291573 0.7537362 0.8190512 0.8246839 0.8350810 #>  [326,] 0.52080809 0.5616700 0.5625654 0.5804150 0.5940951 0.6266767 0.6590819 #>  [327,] 0.54241517 0.6032306 0.6083837 0.6184438 0.6796968 0.7253802 0.7477471 #>  [328,] 0.27618626 0.3964737 0.4157913 0.5125985 0.5312945 0.5497152 0.5615662 #>  [329,] 0.26922984 0.3650805 0.5492915 0.6319213 0.6350446 0.6537525 0.6616281 #>  [330,] 0.25517840 0.3096737 0.3447940 0.4737939 0.4826003 0.5253337 0.5882631 #>  [331,] 0.45583253 0.4597248 0.5200694 0.5833537 0.5989473 0.6424241 0.6659868 #>  [332,] 0.29949554 0.4834348 0.5193261 0.5502192 0.5506004 0.6614979 0.6666814 #>  [333,] 0.57722835 0.6525582 0.7071488 0.7272974 0.9243814 1.0302950 1.0317844 #>  [334,] 0.44090539 0.4431131 0.5221723 0.5730369 0.6124357 0.6285116 0.6351588 #>  [335,] 0.16260551 0.2639417 0.3710191 0.4976741 0.5081550 0.5440974 0.6359842 #>  [336,] 0.38071311 0.5358025 0.6777425 0.6917594 0.7256913 0.8152389 0.8462420 #>  [337,] 0.42438796 0.4499598 0.4517080 0.5056387 0.5198059 0.5234894 0.5288472 #>  [338,] 0.75982883 0.9033353 0.9194700 1.0149766 1.0161549 1.0428481 1.0713807 #>  [339,] 0.49767977 0.5874768 0.6634610 0.6651779 0.6877427 0.7002750 0.7404982 #>  [340,] 0.33152846 0.4800041 0.5666264 0.5787573 0.6329167 0.8262717 0.8303900 #>  [341,] 0.32670626 0.6380409 0.7456303 0.7742844 0.7829993 0.7983863 0.8213529 #>  [342,] 0.67217260 0.7299850 0.7322618 0.9069205 0.9285711 0.9736510 0.9813738 #>  [343,] 0.39551895 0.7444697 0.7733396 0.8093631 0.8453884 0.8863303 0.8935066 #>  [344,] 0.29742667 0.4077930 0.4652116 0.4722326 0.4930993 0.5136270 0.5185057 #>  [345,] 0.35352500 0.4509151 0.4717362 0.5329872 0.5452787 0.5589655 0.5690602 #>  [346,] 0.17685080 0.3721720 0.4748174 0.5313283 0.5359372 0.6265967 0.6922394 #>  [347,] 1.21633797 1.3430120 1.4099715 1.5407085 1.6016785 1.6791686 1.6972243 #>  [348,] 0.45489793 0.5103232 0.5539247 0.6278291 0.7257005 0.7554391 0.7800539 #>  [349,] 0.60662442 0.8317936 0.8608198 0.9513736 1.0106577 1.0576843 1.0694751 #>  [350,] 0.23724582 0.3441181 0.3709596 0.3744237 0.4298599 0.5565392 0.6092838 #>  [351,] 0.18747479 0.5941751 0.6159968 0.6443845 0.7236559 0.7282660 0.7483188 #>  [352,] 0.54473998 0.5902592 0.6487197 0.6541314 0.6967483 0.7322618 0.7394969 #>  [353,] 0.34129146 0.3770262 0.4986486 0.5002697 0.5054301 0.5222922 0.5230441 #>  [354,] 0.41215019 0.4723339 0.5829554 0.5891896 0.6016888 0.6225109 0.6543396 #>  [355,] 0.48132484 0.5534756 0.5558508 0.5684448 0.6456821 0.7351366 0.7934015 #>  [356,] 0.50906275 0.5157728 0.5459037 0.6311334 0.6710689 0.6712504 0.6932427 #>  [357,] 0.27903079 0.3675681 0.4486543 0.4545920 0.4716540 0.4831040 0.4899225 #>  [358,] 0.57893776 0.9183579 0.9297531 1.0660574 1.0759285 1.1135021 1.1360723 #>  [359,] 0.38017488 0.3907616 0.4259080 0.4295899 0.4505474 0.4895749 0.5155903 #>  [360,] 0.39541713 0.4300024 0.5092074 0.5202869 0.5747139 0.6004341 0.6776872 #>  [361,] 0.35057116 0.5114577 0.5715110 0.5722618 0.5787573 0.6504395 0.7603895 #>  [362,] 0.30327753 0.4265757 0.4331996 0.4521616 0.4556754 0.4687541 0.4793629 #>  [363,] 0.30494790 0.4361761 0.5208081 0.5730296 0.6158611 0.6312287 0.6396792 #>  [364,] 0.39348927 0.5895573 0.6195217 0.6345537 0.6919261 0.7282892 0.7916645 #>  [365,] 0.92787703 0.9718710 0.9902623 1.0061168 1.0124508 1.0666473 1.0801703 #>  [366,] 0.51043465 0.6446261 0.7498608 0.8654094 0.8728209 0.8864978 0.9682177 #>  [367,] 0.82888368 0.8937928 1.2949061 1.3307193 1.3706311 1.4255935 1.4960363 #>  [368,] 0.29487322 0.3686881 0.3850040 0.4737939 0.5468354 0.6433608 0.6960953 #>  [369,] 0.25572994 0.4384709 0.4615934 0.4706614 0.4878336 0.4892179 0.4960023 #>  [370,] 0.50625669 0.6155353 0.6951077 0.7012650 0.7081440 0.8153248 0.8681260 #>  [371,] 0.45931643 0.4604748 0.5575688 0.6350742 0.6659486 0.6839461 0.6850399 #>  [372,] 0.68721964 0.7799218 0.8071829 0.8271915 0.8673533 0.8725490 0.8826856 #>  [373,] 0.65763563 0.7445396 0.7589982 0.8034320 0.8611640 0.8914424 0.9353625 #>  [374,] 0.38132246 0.4448987 0.7195186 0.7268184 0.7372540 0.8703340 0.9048954 #>  [375,] 0.56871268 0.5992154 0.6489189 0.7509731 0.7659908 0.7757727 0.7981389 #>  [376,] 1.06673805 1.0906882 1.1842827 1.2036959 1.2306477 1.2566835 1.2917799 #>  [377,] 0.38132246 0.4951694 0.5191811 0.5386177 0.5501985 0.5558508 0.6811017 #>  [378,] 0.55246352 0.5868384 0.8367997 0.8728464 0.8876986 0.9881929 1.0914276 #>  [379,] 0.39193104 0.4476977 0.5804190 0.5867947 0.6036790 0.6151071 0.6338563 #>  [380,] 0.31991340 0.4601354 0.4738983 0.5278492 0.6036426 0.6617342 0.7031576 #>  [381,] 0.40833498 0.6111794 0.6956074 0.8364567 0.8374009 0.8556522 0.8699215 #>  [382,] 0.41175318 0.4118637 0.4792210 0.6598916 0.6984255 0.7024402 0.7230244 #>  [383,] 0.51780332 0.5236871 0.5606087 0.5718235 0.6559446 0.6562479 0.6724257 #>  [384,] 0.71154600 0.8453266 0.9449416 0.9707233 1.0208917 1.0382890 1.0521551 #>  [385,] 1.08357448 1.2131028 1.2458928 1.2721439 1.3943035 1.4003548 1.4104426 #>  [386,] 0.56662642 0.7495416 0.7582271 0.7586573 0.8077391 0.8405836 0.8700717 #>  [387,] 0.62617363 0.6948994 0.8082249 0.8783860 0.9744924 1.1017314 1.1611414 #>  [388,] 0.48407469 0.4893943 0.5279839 0.5673982 0.5926892 0.5988251 0.6106336 #>  [389,] 0.62200357 0.6292992 0.7050691 0.7147167 0.7200208 0.7303440 0.7441891 #>  [390,] 0.39639976 0.4313812 0.4355995 0.5440646 0.6164621 0.6293727 0.6732009 #>  [391,] 0.86231166 0.8882730 1.0931904 1.1103062 1.1146495 1.1736895 1.2531493 #>  [392,] 0.89080181 1.1037069 1.1129382 1.1342069 1.1372136 1.1621123 1.1635489 #>  [393,] 0.34656761 0.4072696 0.4484318 0.5134845 0.5491084 0.5586767 0.5857891 #>  [394,] 0.39360146 0.4243653 0.4622426 0.5172113 0.5477861 0.5501307 0.5528646 #>  [395,] 0.09075752 0.5287700 0.5499141 0.5767628 0.5834501 0.6277368 0.6405316 #>  [396,] 0.47619339 0.4866291 0.5210266 0.5461780 0.5615319 0.5624938 0.6234452 #>  [397,] 0.38207543 0.4438640 0.4599030 0.4694917 0.4932264 0.5141029 0.5268075 #>  [398,] 0.61830451 0.6367244 0.7071859 0.8500741 0.9252634 0.9736517 1.0612055 #>  [399,] 0.27618626 0.4206750 0.4692380 0.4692965 0.4891681 0.5443034 0.6020968 #>  [400,] 0.47915311 0.4827767 0.5536858 0.5645943 0.5922005 0.6494189 0.6636914 #>  [401,] 0.50507909 0.5172113 0.5751281 0.6229609 0.7013557 0.7019516 0.7172642 #>  [402,] 0.42493734 0.5999377 0.6221267 0.6312287 0.6437100 0.6796016 0.6972458 #>  [403,] 0.60270493 0.6243399 0.6963692 0.7386465 0.7914199 0.9976419 1.0211380 #>  [404,] 0.44572149 0.5163496 0.5450259 0.5753633 0.6057782 0.6176596 0.6373681 #>  [405,] 0.26922984 0.3620540 0.3996591 0.4422823 0.4441550 0.6249424 0.6358601 #>  [406,] 0.49894225 0.5730282 0.5780151 0.6112712 0.6416123 0.6648797 0.6968761 #>  [407,] 0.79407589 0.8116882 0.8145849 0.8680510 0.8950916 0.9274303 0.9512822 #>  [408,] 0.61264531 0.6261805 0.6513980 0.7931282 0.8915273 0.9275861 0.9527394 #>  [409,] 0.30272426 0.3968148 0.5332454 0.5762302 0.5912861 0.6072530 0.6563952 #>  [410,] 0.46694611 0.5093437 0.5408561 0.5572402 0.6122226 0.6695602 0.7171444 #>  [411,] 0.48258154 0.5784323 0.6107257 0.8628320 0.8856824 0.8926407 0.9000744 #>  [412,] 0.47868982 0.5070251 0.5165095 0.5473172 0.5667884 0.5748124 0.6313198 #>  [413,] 0.63291671 0.7393154 0.7416918 0.7509386 0.7795827 0.8687010 0.9335904 #>  [414,] 0.47662085 0.5014698 0.5508303 0.5739475 0.5759546 0.5893357 0.6211322 #>  [415,] 0.32126302 0.3861720 0.5272111 0.6386311 0.7118914 0.7580417 0.7622745 #>  [416,] 0.50726146 0.5703058 0.6060701 0.6232000 0.7004988 0.7935397 0.7992147 #>  [417,] 0.66532399 0.7104651 1.1407019 1.2037607 1.3075293 1.4682752 1.4791453 #>  [418,] 0.76504284 0.9069205 0.9847250 1.1953888 1.1977480 1.2952007 1.3104085 #>  [419,] 0.33664139 0.3418350 0.3465680 0.5665038 0.5929710 0.6242412 0.6314760 #>  [420,] 0.27903079 0.3231145 0.3897399 0.3964814 0.4318330 0.4662512 0.4762272 #>  [421,] 0.52384768 0.5410964 0.5618003 0.8538552 0.8587818 0.8827829 0.8840208 #>  [422,] 0.52287463 0.5320831 0.5589415 0.6120780 0.6320823 0.6442031 0.6593485 #>  [423,] 0.35214157 0.6744167 0.7376024 0.7409786 0.7553055 0.7584850 0.8868430 #>  [424,] 0.40054053 0.7225323 0.7597697 0.7711735 0.8173331 0.8577051 0.8582896 #>  [425,] 0.34042164 0.3744132 0.4832381 0.4841111 0.4929409 0.5200370 0.5248840 #>  [426,] 0.27150028 0.3488637 0.4145553 0.5658295 0.5862933 0.5897515 0.6149135 #>  [427,] 0.73502782 0.8424666 0.8692860 0.8948861 0.9008913 0.9624257 0.9660713 #>  [428,] 0.49649449 0.6456369 0.6617342 0.6703250 0.6908654 0.6922282 0.6985001 #>  [429,] 0.59288104 0.5940896 0.6164331 0.6518242 0.7026752 0.7673175 0.7692196 #>  [430,] 0.45240520 0.5416623 0.8213939 0.8317936 0.9878889 1.0281184 1.0673329 #>  [431,] 0.51801140 0.6939295 0.7043581 0.7186608 0.7248751 0.7486610 0.7510087 #>  [432,] 0.25724294 0.5877218 0.6073844 0.6692396 0.6946004 0.7255876 0.7683285 #>  [433,] 0.42339999 0.6111794 0.6453187 0.7680043 0.8308617 0.8387542 0.8608140 #>  [434,] 0.32197602 0.5152366 0.6448542 0.8167391 0.8696843 0.8830477 0.9067282 #>  [435,] 0.65088126 0.7215428 0.7650428 0.7822385 1.0227398 1.0578196 1.0722036 #>  [436,] 0.40253157 0.5742478 0.5747369 0.5921829 0.5929066 0.5948233 0.6123440 #>  [437,] 0.50519820 0.5918857 0.7675121 0.7911945 0.8214948 0.8265080 0.8308650 #>  [438,] 0.37812440 0.6947111 0.7677498 0.7913768 0.8892956 0.9062640 0.9294032 #>  [439,] 0.65164779 0.6552403 0.7701238 0.8453884 0.9062761 0.9570312 0.9747438 #>  [440,] 0.80702470 0.8169074 0.8357116 0.9404044 1.0198618 1.0756218 1.0854184 #>  [441,] 0.38657164 0.4815125 0.5753633 0.6003125 0.6122335 0.6719481 0.6728083 #>  [442,] 1.29164510 1.3261385 1.3490802 1.3666182 1.4363045 1.4691627 1.5372303 #>  [443,] 0.73578971 0.7598990 0.7612625 0.9623327 1.0142475 1.0460588 1.0630082 #>  [444,] 0.29641761 0.3985979 0.4445684 0.4563838 0.4633791 0.4675760 0.5214787 #>  [445,] 0.71154600 0.7163775 0.7756347 0.7843264 0.8363665 0.8377372 0.8543651 #>  [446,] 0.60253411 0.6186885 0.6626907 0.7645069 0.7830388 0.8013295 0.8113712 #>  [447,] 0.27923915 0.3239551 0.5635808 0.5912645 0.6029793 0.6170569 0.6604358 #>  [448,] 0.41901986 0.4776748 0.5362270 0.5890515 0.6241860 0.6287314 0.6614193 #>  [449,] 0.51043465 0.6378868 0.6844488 0.7304106 0.8062977 0.8420109 0.8650467 #>  [450,] 0.40619867 0.6112851 0.7844504 0.8604826 0.8977082 0.9707835 0.9758967 #>  [451,] 0.34739365 0.3729872 0.4505474 0.5221723 0.5448777 0.5698245 0.5786389 #>  [452,] 0.32371525 0.3265416 0.4253115 0.5678589 0.7778638 0.8251673 0.8467096 #>  [453,] 0.29092908 0.4501258 0.4597248 0.4769323 0.5148844 0.5658295 0.5902812 #>  [454,] 0.60870073 0.7857038 0.8351568 0.8387542 0.8674509 0.8787068 0.9775433 #>  [455,] 0.31249920 0.5053936 0.6177306 0.6374266 0.6419452 0.6465645 0.6470696 #>  [456,] 0.45638380 0.5012166 0.5211229 0.5579414 0.5759546 0.6224505 0.6372769 #>  [457,] 0.81690742 1.0634376 1.0744012 1.0783776 1.0813980 1.3169772 1.4224194 #>  [458,] 0.28324315 0.3792936 0.4842221 0.5477892 0.5478889 0.5573048 0.5783092 #>  [459,] 0.36841623 0.5709212 0.6121840 0.6188667 0.7006877 0.7892973 0.7913364 #>  [460,] 0.18488109 0.2262105 0.2840894 0.6916095 0.7129461 0.7518935 0.8009857 #>  [461,] 0.90087995 0.9309915 0.9710328 0.9724100 0.9963563 1.0651372 1.1117825 #>  [462,] 0.32569264 0.3865716 0.4829181 0.4834348 0.6400674 0.7109176 0.7388200 #>  [463,] 0.59813516 0.9623327 0.9708429 1.0763402 1.0812975 1.1061192 1.1289119 #>  [464,] 0.34422354 0.4824492 0.5053825 0.5134845 0.5165777 0.5169799 0.5298680 #>  [465,] 0.55002404 0.6706445 0.7705407 1.0082899 1.0630987 1.0691237 1.0905997 #>  [466,] 0.34656761 0.4433500 0.5014698 0.5169799 0.5463979 0.5687171 0.5944777 #>  [467,] 0.28263298 0.3447940 0.5131628 0.5317184 0.5366817 0.5391146 0.5491396 #>  [468,] 0.15024199 0.4598550 0.5815951 0.6025341 0.7689899 0.7723267 0.8299060 #>  [469,] 0.32265696 0.7775516 0.7883617 0.8882730 0.9605115 1.0148505 1.0651135 #>  [470,] 0.41614246 0.8911159 0.9796114 1.0124756 1.2833602 1.3203828 1.3802202 #>  [471,] 0.84532662 0.8520448 0.8619688 1.3281892 1.3796872 1.4145800 1.4214974 #>  [472,] 0.40124961 0.4128258 0.8358272 0.9031245 0.9774214 0.9774716 1.0215630 #>  [473,] 0.25321508 0.3463115 0.5145955 0.5362270 0.6054614 0.6268476 0.6407823 #>  [474,] 0.40586288 0.4695195 0.4786898 0.4895749 0.5358718 0.5463532 0.5538463 #>  [475,] 0.41948864 0.4346783 0.4561707 0.4897407 0.5347712 0.5572402 0.5646314 #>  [476,] 0.78636926 0.7914199 0.9333529 0.9345249 0.9736255 1.0227263 1.0470798 #>  [477,] 0.30829590 0.5705076 0.6373044 0.6609939 0.6723986 0.6885135 0.6955580 #>  [478,] 0.64041487 0.6570632 0.7108793 0.7276876 0.7354579 0.7976868 0.8171852 #>  [479,] 0.38446054 0.5525724 0.5827285 0.6353309 0.6695602 0.6996775 0.7035251 #>  [480,] 0.37656343 0.4130709 0.4202689 0.4416979 0.5007377 0.5321106 0.5399201 #>  [481,] 0.39807485 0.4035651 0.5268075 0.5287349 0.5671997 0.5827491 0.5953511 #>  [482,] 0.24710060 0.5583914 0.6386167 0.7903163 0.8227805 0.8634246 0.8639151 #>  [483,] 0.58555390 0.7377603 1.0152505 1.0557959 1.1027772 1.2792478 1.2979495 #>  [484,] 0.58474341 0.6645357 0.7518935 0.7721032 0.8511340 0.8956124 0.9012313 #>  [485,] 0.68865927 0.8576092 0.8633382 0.8838559 0.9000744 0.9323178 1.0175072 #>  [486,] 0.20079894 0.2442401 0.3356363 0.4136393 0.4315356 0.4941609 0.5056387 #>  [487,] 0.52783889 0.5361900 0.5730282 0.6060701 0.6975436 0.7022846 0.7143230 #>  [488,] 0.32333139 0.5176067 0.5348271 0.5552808 0.5569956 0.5805692 0.5839408 #>  [489,] 0.62435746 0.6696152 0.6867021 0.7327772 0.7401971 0.7486610 0.7722540 #>  [490,] 0.18251718 0.3377949 0.3895660 0.4416979 0.4677307 0.4883844 0.5397332 #>  [491,] 0.85418410 0.8578227 0.9449904 1.0660574 1.1010332 1.1423922 1.1728920 #>  [492,] 0.94139826 1.0843239 1.1129382 1.4032715 1.5788657 1.6056031 1.6230983 #>  [493,] 0.58671410 0.9281683 0.9473302 1.1538814 1.3234400 1.3301593 1.3439219 #>  [494,] 0.21749205 0.4422823 0.4900363 0.6319213 0.7648086 0.7722771 0.7978335 #>  [495,] 0.41175318 0.6237052 0.6338111 0.6650679 0.6891753 0.7461620 0.7489930 #>  [496,] 0.62739825 0.7163775 0.7422253 0.7513439 0.7689641 0.8129710 0.8171142 #>  [497,] 0.59813516 0.7598990 0.9207075 0.9267003 0.9594198 0.9853066 0.9971105 #>  [498,] 0.24424010 0.3125181 0.3567279 0.4062591 0.5095047 0.5133382 0.5134758 #>  [499,] 0.31249920 0.4185635 0.4443296 0.4553951 0.5061674 0.5387856 0.6109679 #>  [500,] 0.50845022 0.6091323 0.7104613 0.7705407 0.8145954 0.8720655 0.9243237 #>  [501,] 0.63960160 0.6396792 0.6474570 0.6829990 0.6880738 0.6892113 0.7166397 #>  [502,] 0.29706270 0.3614895 0.4003886 0.4295899 0.4345220 0.5002697 0.5105209 #>  [503,] 0.25293695 0.3016752 0.4558325 0.5080177 0.5673184 0.6240415 0.6605948 #>  [504,] 1.10853933 1.1554165 1.2948213 1.3408767 1.3827087 1.3861428 1.4455792 #>  [505,] 0.25437647 0.2927667 0.3620051 0.3715453 0.3852903 0.4144184 0.4662512 #>  [506,] 0.85474638 1.2978171 1.3208939 1.3518600 1.5172626 1.6313288 1.7213937 #>  [507,] 0.27622199 0.3710191 0.3994549 0.5356303 0.5438884 0.5490011 0.5497566 #>  [508,] 0.50455858 0.7029436 0.7824828 0.7947928 0.8400396 0.9214408 0.9470390 #>  [509,] 0.32747116 0.4092305 0.4407789 0.4571716 0.4639577 0.5219028 0.5360608 #>  [510,] 0.49766071 0.6330187 0.6556549 0.6970764 0.7142203 0.7217351 0.7258283 #>  [511,] 0.45660981 0.4988513 0.5012166 0.5152618 0.5238148 0.5672518 0.6342816 #>  [512,] 0.29136213 0.3723822 0.4601354 0.4703355 0.5196000 0.5410309 0.5970642 #>  [513,] 0.11625434 0.3932595 0.3954171 0.4714218 0.4751764 0.6161547 0.6718740 #>  [514,] 0.37411903 0.4821322 0.5376713 0.6419147 0.6607744 0.7632523 0.8828920 #>  [515,] 0.44156281 0.4692479 0.4873263 0.4930993 0.4994755 0.5087544 0.5312231 #>  [516,] 0.43773109 0.5601896 0.5989473 0.6149135 0.6787057 0.7137055 0.7540130 #>  [517,] 0.57296979 0.7456303 0.7457126 0.8323544 0.8388748 0.8654760 0.8941008 #>  [518,] 0.40351002 0.4165228 0.4346783 0.4952333 0.5052427 0.5071780 0.5096598 #>  [519,] 0.88210045 0.9470390 1.0645296 1.1718323 1.1828732 1.2077045 1.2426627 #>  [520,] 0.94220824 0.9469638 1.0490164 1.1900008 1.2916522 1.4017684 1.4362171 #>  [521,] 0.46229938 0.4698326 0.5214787 0.5580324 0.6234906 0.6351588 0.6663498 #>  [522,] 0.42588579 0.4583362 0.4918296 0.5249383 0.5537995 0.5634157 0.5665978 #>  [523,] 0.55368577 0.5554357 0.6633201 0.8079788 0.8539935 0.8628548 0.9640341 #>  [524,] 0.58471808 0.6552403 0.7991714 0.8063197 0.8249438 0.8740551 0.9493081 #>  [525,] 0.78445041 0.9885783 1.0926542 1.1074259 1.1078321 1.1982889 1.2005433 #>  [526,] 0.51604253 0.5415698 0.6030201 0.6096707 0.6291590 0.6544480 0.6551570 #>  [527,] 0.42355615 0.5259329 0.6303151 0.6432289 0.6457249 0.6494189 0.6535115 #>  [528,] 0.39639976 0.5464645 0.5968053 0.6015625 0.6068044 0.6085296 0.6387620 #>  [529,] 0.42339999 0.6547238 0.8649304 0.8699215 0.9180627 0.9323845 0.9377334 #>  [530,] 0.19624274 0.2252148 0.2262105 0.6037831 0.6921547 0.7692196 0.8090901 #>  [531,] 0.32512205 0.4094906 0.5105231 0.5529043 0.6188667 0.6338111 0.6489316 #>  [532,] 1.89274989 2.1167507 2.1834239 2.2301011 2.2838603 2.2979766 2.4493742 #>  [533,] 0.33440818 0.3980748 0.4006137 0.4492341 0.4503551 0.4710869 0.4821190 #>  [534,] 0.61868847 0.6261805 0.6800460 0.6833244 0.7377603 0.7444127 0.8273700 #>  [535,] 0.38446054 0.5938785 0.6243575 0.6325121 0.6604424 0.6618289 0.7186608 #>  [536,] 0.29535952 0.3438668 0.4249373 0.4836221 0.5061382 0.6674260 0.6710112 #>  [537,] 0.33856994 0.5595461 0.6260155 0.6301612 0.6523332 0.6885135 0.7316048 #>  [538,] 0.52783889 0.6232000 0.6913560 0.6947111 0.7257125 0.8053845 0.8458279 #>  [539,] 0.28947462 0.2983813 0.3404216 0.4582335 0.4862774 0.5092610 0.5143188 #>  [540,] 0.35260553 0.4298599 0.4556171 0.4913172 0.5125810 0.5822028 0.6003259 #>  [541,] 0.34656800 0.3746857 0.3910770 0.4840747 0.5174326 0.5228746 0.6206470 #>  [542,] 0.38276164 0.5461780 0.6630750 0.7049516 0.7374477 0.7434731 0.7559854 #>  [543,] 0.38309594 0.5583914 0.5899931 0.5956059 0.6202218 0.7033895 0.7209141 #>  [544,] 0.94598651 1.0593055 1.3424114 1.4032803 1.4517825 1.5434533 1.5738431 #>  [545,] 0.50657334 0.5294017 0.6052769 0.7316048 0.7318655 0.7414538 0.7851561 #>  [546,] 0.37666477 0.7733396 0.8908018 0.9590856 1.0434959 1.1746620 1.2521005 #>  [547,] 0.29497860 0.6364174 0.6853487 0.6998580 0.7062544 0.7195300 0.7243391 #>  [548,] 0.53592772 0.5415698 0.5587035 0.6043865 0.6307677 0.6335693 0.6736747 #>  [549,] 0.34888761 0.5827481 0.6684704 0.6713906 0.6718170 0.6747370 0.6785940 #>  [550,] 0.38469077 0.4706614 0.4853470 0.5070251 0.6024693 0.6123890 0.6146831 #>  [551,] 0.39652533 0.4559690 0.6016286 0.6625886 0.6788592 0.7719098 0.8039212 #>  [552,] 1.05343380 1.0974009 1.1900008 1.2024121 1.2055753 1.2387181 1.3355732 #>  [553,] 0.39193104 0.5843510 0.6720739 0.6971248 0.7030602 0.7062048 0.7250714 #>  [554,] 0.58617524 0.6793400 0.7030658 0.7071488 0.7800902 0.7870862 0.8045173 #>  [555,] 1.06912373 1.1240301 1.2247377 1.2777028 1.4025237 1.4289926 1.6676851 #>  [556,] 0.32670626 0.5575299 0.6145466 0.6455588 0.6604424 0.6625886 0.7156910 #>  [557,] 0.52940048 0.5358718 0.5730369 0.7316181 0.7319334 0.7633318 0.8277183 #>  [558,] 0.52902873 0.6699131 0.7653878 0.8627746 0.9173327 0.9444796 0.9687932 #>  [559,] 0.38276164 0.5778488 0.6273600 0.7026752 0.7227734 0.7250845 0.7773609 #>  [560,] 0.29830756 0.6052979 0.7266263 0.7515047 0.8093824 0.8259159 0.8321857 #>  [561,] 0.32777646 0.4929409 0.5637588 0.5747369 0.6164621 0.6186854 0.6225504 #>  [562,] 0.70804964 0.7429993 0.7937274 0.8039212 0.8100583 0.8160329 0.8720436 #>  [563,] 0.28842598 0.4793629 0.5040606 0.5114998 0.5359372 0.5747139 0.5983260 #>  [564,] 0.64076813 0.6692535 0.7395680 0.7516331 0.7890365 0.7953891 0.8159634 #>  [565,] 0.72506141 0.8243293 0.8678105 0.8787270 0.8948861 0.9005322 0.9021288 #>  [566,] 0.67896485 0.6885693 0.7746648 0.7800627 0.8015410 0.8304228 0.8696843 #>  [567,] 0.28382142 0.5089744 0.6286071 0.6939295 0.7031933 0.7727167 0.8167256 #>  [568,] 0.25437647 0.2980693 0.4063836 0.4096076 0.4745243 0.5065231 0.5196887 #>  [569,] 0.42846953 0.4362450 0.6473201 0.6505891 0.6626376 0.7285785 0.7454400 #>  [570,] 1.04982503 1.0760434 1.2054817 1.2140841 1.2202996 1.2226402 1.2367154 #>  [571,] 0.33206162 0.4094906 0.4469215 0.5709212 0.5803678 0.6747091 0.7002495 #>  [572,] 0.51933190 0.7256323 0.7272930 0.7532548 0.7605731 0.7776900 0.7795106 #>  [573,] 0.18269523 0.2715003 0.4244203 0.5102029 0.6976400 0.7073398 0.7110781 #>  [574,] 0.28549037 0.3686881 0.4055069 0.4307296 0.4759337 0.4826003 0.5709455 #>  [575,] 0.40170648 0.4344496 0.4757893 0.4883844 0.4918296 0.5030447 0.5216108 #>  [576,] 0.46195758 0.5339722 0.6037831 0.6164331 0.6916095 0.7081045 0.7147167 #>  [577,] 0.38469603 0.4121502 0.4191640 0.5200565 0.6086968 0.6115290 0.6228382 #>  [578,] 0.34331059 0.4741479 0.5335057 0.5852682 0.6322754 0.6421050 0.6443845 #>  [579,] 0.29638940 0.4174486 0.4384369 0.4521616 0.5040606 0.5733315 0.5914806 #>  [580,] 0.30447523 0.3681272 0.3707896 0.4029665 0.4626984 0.5188183 0.5351247 #>  [581,] 0.29480494 0.5295195 0.6473201 0.7365757 0.7556938 0.8045789 0.8464811 #>  [582,] 0.36148952 0.3801749 0.4462235 0.5222922 0.5280719 0.5297030 0.5342057 #>  [583,] 0.40055743 0.6244582 0.6437633 0.6713553 0.6802170 0.7922018 0.8002820 #>  [584,] 0.35214157 0.5249030 0.6568017 0.7149898 0.7364897 0.7485421 0.7833673 #>  [585,] 1.21786081 1.3534794 1.4117143 1.4828681 1.4958995 1.5458449 1.5788657 #>  [586,] 0.89264075 0.9267963 1.1542533 1.2081834 1.2781689 1.3094470 1.3702972 #>  [587,] 0.57139727 0.7649635 0.8042922 0.8453471 0.8884964 0.9059576 0.9384047 #>  [588,] 0.34151679 0.4165228 0.4303809 0.4625485 0.4897407 0.4975381 0.5109671 #>  [589,] 0.39871010 0.4491032 0.4897566 0.5146423 0.5424332 0.5501079 0.5562295 #>  [590,] 0.34631148 0.4094435 0.4126186 0.4514489 0.5025199 0.5296719 0.5665968 #>  [591,] 0.46430135 0.6324190 0.6777425 0.7323249 0.7742980 0.9233935 0.9880058 #>  [592,] 0.37981341 0.3822031 0.4268343 0.4639097 0.4672089 0.4796302 0.5251177 #>  [593,] 0.47473028 0.6626376 0.7803677 0.8219894 0.8375121 0.8469636 0.9318473 #>  [594,] 0.33152846 0.3505712 0.5533512 0.6556549 0.6958099 0.7582271 0.8014440 #>  [595,] 0.34515669 0.4863279 0.6250467 0.7566430 0.7903481 0.8670990 0.8720655 #>  [596,] 0.44403180 0.4866844 0.5092030 0.5320432 0.5424335 0.5589655 0.5720963 #>  [597,] 0.75322832 0.9043502 0.9460691 1.0020021 1.1099066 1.1639120 1.2308674 #>  [598,] 0.33667124 0.4686958 0.4717255 0.5326891 0.5782917 0.5803678 0.5940320 #>  [599,] 0.20796788 0.3809304 0.3958160 0.4003754 0.4254499 0.5555477 0.6292992 #>  [600,] 0.41744863 0.5314887 0.5477861 0.5531793 0.5717468 0.5919869 0.6069354 #>  [601,] 0.29986334 0.4958302 0.5080177 0.5794040 0.6209874 0.6634610 0.6648930 #>  [602,] 0.55752992 0.7457126 0.7694596 0.7742844 0.7879930 0.7928196 0.8269810 #>  [603,] 0.46229938 0.4633791 0.5211229 0.5570472 0.5572776 0.5927229 0.6073844 #>  [604,] 0.28395603 0.3935242 0.4757734 0.5065299 0.5248840 0.5380853 0.5562295 #>  [605,] 0.41725810 0.4362450 0.4760809 0.5432098 0.5462618 0.6119345 0.6917320 #>  [606,] 0.89251280 1.0124756 1.1614536 1.2665426 1.2768694 1.3285354 1.3411520 #>  [607,] 0.34888761 0.4031128 0.4948758 0.5045666 0.6183536 0.6414350 0.6432517 #>  [608,] 0.55701245 0.5741660 0.6877427 0.7245304 0.7272930 0.7725411 0.7960386 #>  [609,] 0.83106360 0.9459865 0.9930443 1.0193006 1.1407019 1.1730262 1.1787265 #>  [610,] 0.24464772 0.3233314 0.4188505 0.5128993 0.5586767 0.5588502 0.5634024 #>  [611,] 0.41799061 0.5882150 0.6605948 0.7042981 0.7578560 0.7831449 0.8344066 #>  [612,] 0.28547710 0.3403622 0.3953759 0.5051142 0.5093551 0.5459667 0.5624938 #>  [613,] 1.06892743 1.0813751 1.1333799 1.1420967 1.2447263 1.3471222 1.4259997 #>  [614,] 0.28382142 0.7206791 0.7472548 0.7637360 0.7673328 0.8379414 0.8411853 #>  [615,] 0.48287763 0.5212258 0.6150916 0.6291220 0.6437633 0.6770483 0.7019963 #>  [616,] 0.65472376 0.8608140 0.8821868 1.0109766 1.1359437 1.1925002 1.2077954 #>  [617,] 0.23958104 0.3346062 0.3777820 0.4499775 0.4823018 0.5352753 0.5719060 #>  [618,] 0.17612871 0.2148265 0.5386177 0.6456821 0.6879252 0.7268184 0.8004969 #>  [619,] 0.99692692 1.2388628 1.3092284 1.3285354 1.3354769 1.3398630 1.4457077 #>  [620,] 0.48056186 0.5729698 0.8299798 0.8718233 0.9360361 0.9446721 0.9488705 #>  [621,] 1.29165220 1.4415220 1.5108897 1.5659330 1.5881922 1.6048734 1.6872428 #>  [622,] 0.22598146 0.4935026 0.5376713 0.6705100 0.8063197 0.8112136 0.9015424 #>  [623,] 0.74737918 1.0040741 1.1177160 1.1609090 1.1792714 1.1925766 1.2184433 #>  [624,] 0.40619867 0.4472022 0.6347231 0.7368288 0.8337984 0.8464811 0.8672403 #>  [625,] 0.23658542 0.3875394 0.4188503 0.4913172 0.5447400 0.5585657 0.6661773 #>  [626,] 0.52902873 0.6650679 0.7158669 0.7380306 0.7526476 0.7567008 0.7607292 #>  [627,] 0.44489875 0.6811017 0.8070247 0.8277183 0.8778171 0.8782915 0.9512749 #>  [628,] 0.64485424 0.7126072 0.7744817 0.8161643 0.8303900 0.9002531 0.9037324 #>  [629,] 0.41842271 0.4457215 0.4908177 0.5922683 0.6150004 0.6161547 0.6302357 #>  [630,] 0.56209478 0.6069422 0.6639672 0.7035251 0.7172831 0.7621614 0.7715675 #>  [631,] 0.27923915 0.3936015 0.4280097 0.4754310 0.4891776 0.5152744 0.5208445 #>  [632,] 0.60467187 1.0190620 1.0224524 1.1825147 1.1965885 1.2447263 1.2743411 #>  [633,] 0.27858501 0.5616700 0.6503599 0.7220051 0.7306317 0.7391114 0.7481254 #>  [634,] 0.37440407 0.4770407 0.4866291 0.5093551 0.5104644 0.5627299 0.6516121 #>  [635,] 0.54979344 0.6009072 0.6293481 0.6570632 0.7584288 0.7987896 0.8029673 #>  [636,] 0.23155439 0.2402523 0.3014701 0.3746087 0.4401138 0.4415628 0.4652116 #>  [637,] 0.24025234 0.3369376 0.3555455 0.3638917 0.3880860 0.4128456 0.4544130 #>  [638,] 0.51933190 0.5679477 0.6861234 0.7215182 0.7835578 0.8092559 0.8808280 #>  [639,] 0.36352154 0.3732542 0.3841412 0.4261778 0.5079060 0.5105231 0.5477892 #>  [640,] 0.73145021 0.7637360 0.7818534 0.8429410 0.9148231 1.0039550 1.0707036 #>  [641,] 0.43072957 0.4373514 0.5014779 0.5065733 0.5643745 0.6424725 0.6571289 #>  [642,] 0.56209478 0.8561198 0.8634843 0.9031697 0.9429896 0.9618674 0.9735087 #>  [643,] 1.04964063 1.5871266 1.5950358 1.6704406 1.6720113 1.7404297 1.7510278 #>  [644,] 0.20079894 0.3567279 0.4488178 0.4527273 0.5001496 0.5198059 0.5335057 #>  [645,] 0.35244490 0.3715453 0.3801928 0.3971239 0.4114354 0.4157378 0.4845532 #>  [646,] 0.36018255 0.4191640 0.4195367 0.4732421 0.5380614 0.5933283 0.6506194 #>  [647,] 0.95982098 1.0684276 1.1201516 1.3117005 1.3131658 1.3420835 1.4022046 #>  [648,] 0.34886370 0.4083350 0.5102029 0.5601896 0.6482028 0.6844488 0.7105293 #>  [649,] 0.55016782 0.5575542 0.7775516 0.8357116 0.9512749 1.0743891 1.0783776 #>  [650,] 1.41319386 1.5619852 1.6914123 1.7591232 1.8860660 1.9086458 1.9343489 #>  [651,] 0.18251718 0.2659956 0.4202689 0.4447863 0.5030447 0.5052427 0.5250625 #>  [652,] 0.25293695 0.2998633 0.4224584 0.5393995 0.6206470 0.6330187 0.6468010 #>  [653,] 0.40444098 0.6208890 0.6239366 0.6684704 0.6923425 0.7084811 0.7092158 #>  [654,] 0.29688540 0.3936622 0.4404061 0.4849922 0.5829662 0.5889453 0.6052029 #>  [655,] 0.16260551 0.2762220 0.2792282 0.4195950 0.4395273 0.6016888 0.6041257 #>  [656,] 0.53962990 0.5889296 0.7359446 0.7749280 0.7917527 0.8227452 0.8434048 #>  [657,] 0.65939650 0.8156115 0.8288837 0.9422082 1.1423922 1.3706934 1.4180114 #>  [658,] 0.33588134 0.4821372 0.5067899 0.5155903 0.5188183 0.5261215 0.5698245 #>  [659,] 0.43928087 0.5210203 0.5250625 0.5279839 0.5294711 0.5398385 0.5696936 #>  [660,] 0.74847105 0.7517489 1.1678677 1.4124369 1.4403795 1.4538914 1.4554161 #>  [661,] 0.46608785 0.4983295 0.6559302 0.6744167 0.6906516 0.6947648 0.6967573 #>  [662,] 0.40356507 0.4492341 0.5703528 0.6987310 0.7389214 0.7526267 0.7693824 #>  [663,] 0.37164918 0.4108535 0.4975945 0.5016024 0.5079060 0.5351661 0.5573048 #>  [664,] 0.23820874 0.2800515 0.3539559 0.3861454 0.4239317 0.4435468 0.4621511 #>  [665,] 0.49551223 0.7775083 0.9212480 1.0281819 1.0419020 1.0753735 1.0763527 #>  [666,] 0.58412158 0.5874768 0.5955148 0.6459643 0.6857542 0.6898385 0.6921031 #>  [667,] 0.39649733 0.4566098 0.4845860 0.5108340 0.5491396 0.5851304 0.5882631 #>  [668,] 0.45869787 0.5728174 0.6052979 0.6140587 0.6406285 0.6650419 0.7261667 #>  [669,] 1.33366862 1.3883942 1.4067927 1.4124369 1.4170377 1.4303105 1.4405465 #>  [670,] 0.37056380 0.4619932 0.6400674 0.6462836 0.6539546 0.6609250 0.6614979 #>  [671,] 0.22598146 0.3741190 0.4783077 0.7023150 0.7758536 0.7939497 0.7991714 #>  [672,] 0.20273430 0.6029309 0.6338639 0.6469657 0.6645357 0.7133756 0.7266601 #>  [673,] 0.37078964 0.3788389 0.3936469 0.4484670 0.5027059 0.5254687 0.5840998 #>  [674,] 0.47632621 0.4958302 0.5212478 0.5393995 0.5673184 0.5741660 0.6719143 #>  [675,] 0.35391172 0.4254499 0.5022110 0.5663945 0.6220036 0.6355266 0.6375425 #>  [676,] 0.44769772 0.5782629 0.5842497 0.6090639 0.6453187 0.7276876 0.7287535 #>  [677,] 0.47195975 0.5847181 0.6828496 0.6905154 0.7163644 0.7294819 0.7336673 #>  [678,] 0.47789027 0.5877218 0.6560235 0.7024598 0.7082959 0.8513707 0.9514358 #>  [679,] 0.62101146 0.6608843 0.7012650 0.8949818 0.9031697 1.0113949 1.0127428 #>  [680,] 0.39782949 0.5163395 0.5432039 0.5598300 0.5615662 0.5848622 0.5918857 #>  [681,] 0.60662442 0.7313355 0.7733589 0.7894975 0.8184706 0.9441086 0.9990848 #>  [682,] 0.80270106 1.0413116 1.1753246 1.2026272 1.2349549 1.2422970 1.2502377 #>  [683,] 0.31387526 0.3451567 0.5091336 0.6032306 0.6952771 0.7835427 0.8127729 #>  [684,] 0.42581278 0.9427078 0.9495026 1.0167321 1.0201551 1.0537770 1.1101975 #>  [685,] 0.66088427 0.7619380 0.8310636 0.9429896 0.9559843 1.1128769 1.1155131 #>  [686,] 0.47704072 0.5615319 0.6481009 0.7434731 0.7513689 0.7568906 0.7877078 #>  [687,] 0.56100925 0.5728429 0.5974996 0.5990059 0.7582398 0.7632342 0.8136152 #>  [688,] 0.22408539 0.3732542 0.4096059 0.4108535 0.4154556 0.4355314 0.5202664 #>  [689,] 0.62737448 0.6353383 0.6674328 0.7383399 0.8917684 0.9395241 1.0277712 #>  [690,] 0.49501575 0.6508813 0.7299850 0.7603895 0.7839434 0.8727864 0.8886090 #>  [691,] 0.36231713 0.4133553 0.6135824 0.6418654 0.7093182 0.7170015 0.7323249 #>  [692,] 0.36018255 0.5200565 0.5227492 0.6885031 0.7154132 0.7388577 0.7744280 #>  [693,] 0.64041487 0.6970764 0.7215182 0.7350491 0.7532548 0.7857038 0.8114129 #>  [694,] 0.38904913 0.4092305 0.4239317 0.4408117 0.4514489 0.4717454 0.4979620 #>  [695,] 1.20427310 1.2309744 1.2904037 1.3320484 1.3924165 1.4139141 1.4445140 #>  [696,] 0.25388696 0.5610009 0.5951938 0.6069354 0.6085145 0.6455946 0.6471059 #>  [697,] 0.52951947 0.6456752 0.9164829 0.9300665 1.0128976 1.0475248 1.0504723 #>  [698,] 0.35996274 0.5478008 0.7368288 0.7386465 0.7512542 0.7659354 0.8527929 #>  [699,] 0.30634757 0.3744041 0.4706311 0.4761934 0.4898483 0.5051142 0.5642196 #>  [700,] 0.28569894 0.3958160 0.4266638 0.4413218 0.4523104 0.4958151 0.5051801 #>  [701,] 0.52873493 0.6042808 0.6761530 0.7079180 0.7569625 0.8075313 0.8128559 #>  [702,] 0.23820874 0.2961811 0.3241803 0.3660930 0.3767150 0.4126186 0.4669345 #>  [703,] 0.30272426 0.4138339 0.5435239 0.5973707 0.6498975 0.6708134 0.6894340 #>  [704,] 0.17612871 0.3192498 0.5191811 0.5684448 0.5995372 0.7143553 0.7195186 #>  [705,] 0.30829590 0.3796370 0.4816995 0.5226242 0.6566061 0.6789153 0.7120906 #>  [706,] 0.94733024 1.2538861 1.2609881 1.2786731 1.3683831 1.4903159 1.4908601 #>  [707,] 0.28569894 0.3809304 0.3829616 0.4261481 0.4371354 0.5035837 0.5067412 #>  [708,] 0.76538779 0.8082249 0.8772800 0.8788687 0.9879847 1.0720328 1.0988916 #>  [709,] 0.20409200 0.2853384 0.3534528 0.4186617 0.5217025 0.5235065 0.5687243 #>  [710,] 0.38469603 0.4723339 0.4850027 0.5649443 0.5727006 0.5806498 0.6207631 #>  [711,] 0.14751575 0.2623696 0.3346062 0.4235561 0.4668622 0.5013166 0.5673982 #>  [712,] 0.33886838 1.1204542 1.2388628 1.3434793 1.3579266 1.4881586 1.5883774 #>  [713,] 0.66925352 0.7081045 0.7838781 0.8548518 0.8634274 0.8982546 0.9207183 #>  [714,] 0.51137886 0.5416857 0.5626203 0.5889453 0.6090639 0.6151071 0.7343772 #>  [715,] 0.35840970 0.3838727 0.3887640 0.3995012 0.4983295 0.5170699 0.5352753 #>  [716,] 0.46951953 0.5163496 0.5165095 0.6172003 0.6722525 0.6989665 0.7116488 #>  [717,] 0.18607443 0.3420210 0.3681272 0.4299896 0.5027059 0.5157875 0.5261215 #>  [718,] 0.29340160 0.5067832 0.5698330 0.7171999 0.8284457 0.8312242 0.8756829 #>  [719,] 0.29744609 0.3126939 0.6862971 0.7180647 0.7583422 0.7746648 0.8164415 #>  [720,] 0.36762512 0.4114354 0.4188505 0.4583846 0.4797377 0.5105209 0.5162347 #>  [721,] 0.40252766 0.7738750 0.7751697 0.8055238 0.9610674 1.0161615 1.1380989 #>  [722,] 0.81462836 0.8890433 0.9023367 0.9062761 1.1078451 1.2423050 1.2438685 #>  [723,] 0.34339288 0.3830702 0.4122397 0.4336247 0.4960023 0.4986486 0.5202664 #>  [724,] 0.41948864 0.4952333 0.5820607 0.6122226 0.6240619 0.6448747 0.6575235 #>  [725,] 0.37138428 0.4957124 0.5722618 0.6623714 0.6958099 0.7095994 0.7098203 #>  [726,] 0.29480950 0.4985937 0.5238477 0.5307273 0.6046339 0.6243628 0.6499381 #>  [727,] 0.25321508 0.4094435 0.4408117 0.5757644 0.5762564 0.6159748 0.6165704 #>  [728,] 0.48000411 0.5114577 0.5533512 0.6882761 0.7126072 0.7194947 0.7414164 #>  [729,] 0.32385442 0.3725327 0.3767150 0.4243653 0.4651541 0.4739123 0.4891776 #>  [730,] 0.36231713 0.5625614 0.5641869 0.5652193 0.6845004 0.7592496 0.7742980 #>  [731,] 0.43487071 0.4677030 0.4748174 0.4934572 0.5050791 0.5528646 0.5705519 #>  [732,] 0.34941449 0.4677030 0.5751281 0.6538131 0.6680010 0.7033895 0.7097406 #>  [733,] 0.25388696 0.4306703 0.4717454 0.5360608 0.5423468 0.5594957 0.5763118 #>  [734,] 0.28547710 0.4229152 0.4661364 0.5261131 0.5835813 0.6017170 0.6618239 #>  [735,] 0.29934403 0.3720099 0.3942350 0.4258858 0.4757893 0.5102428 0.5207417 #>  [736,] 0.39652533 0.4470322 0.6455588 0.7965179 0.7983863 0.8160329 0.8769836 #>  [737,] 0.18607443 0.2807453 0.3044752 0.3788389 0.4206207 0.5067899 0.5304683 #>  [738,] 0.36064420 0.4288136 0.4576864 0.4674051 0.5102428 0.5249383 0.5261576 #>  [739,] 0.27858501 0.5940951 0.6158611 0.6556245 0.6892113 0.7509038 0.7841913 #>  [740,] 0.32331748 0.9450375 1.3126682 1.4145547 1.5454692 1.5787271 1.5814866 #>  [741,] 0.15405061 0.3792980 0.5541176 0.6155353 0.6387620 0.6494889 0.7184028 #>  [742,] 0.41725810 0.4892179 0.5007377 0.5428345 0.5606087 0.5708216 0.5787689 #>  [743,] 1.33855324 1.3629026 1.4624241 1.5572207 1.6337818 1.6476679 1.7070129 #>  [744,] 0.24281462 0.3098108 0.3119845 0.3519909 0.3876439 0.4028777 0.4166922 #>  [745,] 0.06443966 0.3418350 0.3910770 0.4717162 0.4946818 0.5520984 0.5967005 #>  [746,] 0.26394167 0.2792282 0.4481988 0.4783976 0.4863049 0.4977324 0.5356303 #>  [747,] 0.55040969 0.6031967 0.6633201 0.7513439 0.7823452 0.8249702 0.8638144 #>  [748,] 0.38309594 0.4582795 0.6260243 0.6648983 0.6928172 0.7305639 0.7560018 #>  [749,] 0.48132484 0.5371805 0.5501985 0.6481500 0.8229050 0.8350049 0.8703340 #>  [750,] 0.30151359 0.3212630 0.5642322 0.5878078 0.6407681 0.6429988 0.7434478 #>  [751,] 0.82346154 0.9571121 0.9595601 0.9647029 1.0014839 1.1416903 1.1470828 #>  [752,] 0.61762019 0.9469796 1.0281819 1.0295703 1.0416143 1.0569368 1.1302775 #>  [753,] 0.58892958 0.6185030 0.6423099 0.6639459 0.7595756 0.7840359 0.7994478 #>  [754,] 0.44848458 0.4583362 0.5093437 0.5216108 0.6728083 0.6824163 0.7219209 #>  [755,] 0.55002404 0.7981389 0.8075282 0.9731824 0.9998940 1.1450535 1.1619875 #>  [756,] 0.32437639 0.5056449 0.5866138 0.6133185 0.7533634 0.8627273 0.9091837 #>  [757,] 0.39537586 0.4364486 0.4924286 0.5104644 0.5278581 0.5816697 0.5834501 #>  [758,] 0.37963703 0.4355463 0.6032184 0.6234866 0.6373044 0.6455455 0.6586092 #>  [759,] 1.04964063 1.2982321 1.3363673 1.3603343 1.4032314 1.4222620 1.4479372 #>  [760,] 0.40253157 0.4373040 0.5726287 0.5815883 0.6418126 0.6534417 0.6820519 #>  [761,] 0.36462081 0.3769074 0.3801928 0.3897399 0.4471444 0.4545920 0.4735463 #>  [762,] 0.29638940 0.4113234 0.4845064 0.4872605 0.5421913 0.5717468 0.5848831 #>  [763,] 0.14685469 0.3769074 0.3829616 0.3961387 0.4084928 0.4266638 0.4716540 #>  [764,] 0.32395509 0.4754310 0.5572776 0.6345537 0.6562354 0.6644001 0.6946004 #>  [765,] 0.35067820 0.5067367 0.5193491 0.5312231 0.5319602 0.5668470 0.5904319 #>  [766,] 0.18488109 0.2252148 0.2279682 0.5339722 0.6592059 0.7713110 0.7928612 #>  [767,] 0.42516774 0.6948994 0.8225042 0.8601541 0.8788687 0.9275861 1.0000294 #>  [768,] 0.87284639 0.9618460 1.0222207 1.0945030 1.1226408 1.1573514 1.2052498 #>  [769,] 0.44403180 0.4779306 0.5051117 0.5559076 0.5616679 0.5791339 0.6256653 #>  [770,] 0.83764597 0.8838707 0.8977544 0.9276438 0.9514358 0.9527275 0.9732805 #>  [771,] 0.50906629 0.5335222 0.6070403 0.7483654 0.8392597 0.9358527 0.9837028 #>  [772,] 0.66292888 0.6833800 0.6850524 0.6967483 0.6997373 0.7231225 0.7727911 #>  [773,] 0.57285188 0.6208600 0.6348921 0.6523332 0.7715127 0.7812196 0.7850919 #>  [774,] 0.29380508 0.4497543 0.5546577 0.5796545 0.6139356 0.6232723 0.6657533 #>  [775,] 0.44057033 0.4832381 0.5092610 0.5194426 0.5607001 0.5883311 0.6284527 #>  [776,] 0.46646625 0.5152366 0.6258417 0.6789648 0.7079467 0.7884788 0.8856824 #>  [777,] 0.27146246 0.3280322 0.4096059 0.4336247 0.5016024 0.5279255 0.5414238 #>  [778,] 0.71840251 1.0667380 1.1953261 1.3033971 1.3819001 1.4952291 1.5479191 #>  [779,] 0.39401725 0.5880229 0.6090855 0.6123833 0.6404278 0.7089804 0.7201897 #>  [780,] 0.46438339 0.5078219 0.5160425 0.5555583 0.5566150 0.5715939 0.6137874 #>  [781,] 0.48213217 0.6897191 0.8314551 0.8959060 0.9187684 1.0116712 1.0408335 #>  [782,] 0.37338792 0.4985937 0.5618003 0.7694596 0.7780665 0.7971660 0.9266316 #>  [783,] 0.47789027 0.6588787 0.7282892 0.8295650 0.9360720 0.9627798 1.0310398 #>  [784,] 0.60642997 0.7894047 0.7908098 0.7917527 0.8213939 0.8649219 0.8735183 #>  [785,] 0.41735855 0.4372203 0.4722432 0.4985683 0.5212478 0.5441243 0.5794040 #>  [786,] 0.45591350 0.7401540 0.9479739 0.9734684 0.9946876 1.0028321 1.0248096 #>  [787,] 0.39551895 0.6068044 0.6382194 0.6769695 0.7256597 0.7432322 0.7740224 #>  [788,] 0.32590028 0.5929066 0.6186854 0.6689522 0.6965316 0.7160133 0.7228406 #>  [789,] 0.22469770 0.3875394 0.5048567 0.5902592 0.6997373 0.7122836 0.7725154 #>  [790,] 0.28324315 0.4214575 0.4919387 0.5576360 0.5802389 0.6561756 0.6567072 #>  [791,] 0.22486505 0.3363142 0.3840161 0.3912306 0.4035100 0.4360616 0.4713052 #>  [792,] 0.55285936 0.6029309 0.6845177 0.7612625 0.8511340 0.9633242 0.9692015 #>  [793,] 0.39401725 0.5811770 0.6124357 0.6644001 0.6663498 0.6774777 0.7344880 #>  [794,] 0.41885028 0.5125810 0.6344583 0.6391296 0.6487197 0.6504246 0.6572488 #>  [795,] 0.52443471 0.5667472 0.6621977 0.6802170 0.7234790 0.7610726 0.7722016 #>  [796,] 0.16204728 0.2154312 0.3887640 0.4533817 0.4600988 0.4823018 0.5013166 #>  [797,] 0.58671410 1.1320516 1.2786731 1.3743580 1.5802575 1.6986204 1.7022624 #>  [798,] 0.55028804 0.6323279 0.6446255 0.6902231 0.7998121 0.8115481 0.8380145 #>  [799,] 0.34774114 0.4261906 0.4491032 0.4749586 0.4836221 0.5107730 0.5437988 #>  [800,] 0.26457751 0.2751594 0.3971239 0.4134455 0.4144184 0.4351833 0.4423412 #>  [801,] 0.42249207 0.5204365 0.5730856 0.6868377 0.7070713 0.7321157 0.7569329 #>  [802,] 0.53284063 0.5701031 0.5797935 0.5899931 0.6438156 0.6570650 0.6837681 #>  [803,] 0.29688540 0.3682253 0.5690136 0.5846037 0.6109639 0.6543267 0.6677251 #>  [804,] 0.72915726 0.7910690 0.8724304 0.9025166 0.9844423 0.9851746 1.0101450 #>  [805,] 0.25014810 0.2942733 0.3912306 0.4757264 0.4887094 0.5330277 0.5482157 #>  [806,] 0.46047483 0.6619580 0.6850269 0.6897582 0.6959363 0.7008487 0.7350278 #>  [807,] 0.31797347 0.4431131 0.4687167 0.5129313 0.5311375 0.5460027 0.5748955 #>  [808,] 0.40726964 0.4655869 0.4789687 0.5053825 0.5147621 0.5345084 0.5944777 #>  [809,] 0.43032791 0.4497543 0.4839350 0.5095595 0.5728182 0.6233205 0.6459660 #>  [810,] 0.44686075 0.6258417 0.6384190 0.7513689 0.7827749 0.8354272 0.9173553 #>  [811,] 0.29949554 0.4829181 0.4927446 0.6569516 0.6918909 0.7271374 0.7621614 #>  [812,] 0.63373527 0.7495416 0.7824928 0.9734559 1.0462038 1.1260297 1.1645950 #>  [813,] 0.28005151 0.3890491 0.4306703 0.4407789 0.4463318 0.4850645 0.5440646 #>  [814,] 0.91551803 0.9404181 0.9594198 0.9796114 1.0145441 1.0800258 1.1061192 #>  [815,] 0.41579130 0.4197972 0.4891681 0.5432039 0.6057509 0.6239828 0.6256653 #>  [816,] 0.24464772 0.3274747 0.3676251 0.4805422 0.5176067 0.5379035 0.5463979 #>  [817,] 0.41901986 0.6054614 0.6184438 0.6247219 0.6497351 0.6788592 0.6952771 #>  [818,] 0.31454723 0.3472850 0.4082966 0.4849922 0.4893943 0.5422432 0.5696936 #>  [819,] 0.71046511 1.0040433 1.2197117 1.3267803 1.3503738 1.3539905 1.3654746 #>  [820,] 0.58555390 1.0275517 1.0498526 1.2127194 1.3468690 1.3598920 1.3603487 #>  [821,] 0.50038470 0.9365410 0.9390758 0.9551053 0.9999988 1.0304065 1.1108256 #>  [822,] 0.35654646 0.5272111 0.5334684 0.5878078 0.6031967 0.6296867 0.7234813 #>  [823,] 0.37485448 0.5090663 0.6379285 0.7305639 0.7343290 0.7794488 0.7923258 #>  [824,] 0.40612417 0.4668622 0.5193261 0.5509534 0.5620009 0.5719060 0.6142111 #>  [825,] 0.86015406 0.8766009 0.9084498 0.9315690 0.9381243 0.9541965 0.9559144 #>  [826,] 0.43452196 0.4571896 0.4583846 0.4651541 0.5131427 0.5208445 0.5559143 #>  [827,] 0.34151679 0.3788185 0.4360616 0.5019497 0.5104143 0.5125985 0.5360587 #>  [828,] 0.28549037 0.2948732 0.3096737 0.3927913 0.4138250 0.4279413 0.4615941 #>  [829,] 0.97346842 1.1544916 1.1739738 1.2102834 1.3074219 1.3367107 1.3516118 #>  [830,] 0.15931084 0.2485049 0.2673723 0.2901470 0.3781323 0.4028777 0.4331996 #>  [831,] 0.26511814 0.4003754 0.4268343 0.5067412 0.5071976 0.5320432 0.5367062 #>  [832,] 1.22473773 1.2591375 1.3629026 1.3961328 1.4934486 1.5581952 1.5871242 #>  [833,] 0.30008116 0.3705910 0.4447863 0.4677307 0.4769323 0.5210203 0.5432098 #>  [834,] 0.42581278 0.8293329 0.9064402 0.9097784 0.9315690 0.9323080 0.9331171 #>  [835,] 0.33886838 0.9332158 1.1811188 1.2540949 1.2665426 1.3368404 1.3398630 #>  [836,] 0.57308560 0.6091323 0.7566546 0.7827395 0.8267563 0.8461640 0.8850679 #>  [837,] 0.19524906 0.2901470 0.3234940 0.3344082 0.3402041 0.3519909 0.3820259 #>  [838,] 0.40170648 0.4484846 0.4561707 0.4668662 0.4669461 0.5065299 0.5467849 #>  [839,] 0.51801140 0.5408561 0.6556221 0.6618289 0.6696152 0.7206791 0.7713865 #>  [840,] 0.70245977 0.8275288 0.8946834 0.9682861 1.0495949 1.0566861 1.0978882 #>  [841,] 0.68451774 0.7194947 0.7795827 0.7822385 0.9727569 0.9889509 0.9949474 #>  [842,] 0.31797347 0.3770262 0.4003886 0.4514934 0.5342057 0.5981101 0.6033577 #>  [843,] 0.31387526 0.4863279 0.6247219 0.6796968 0.7080496 0.7400678 0.8245916 #>  [844,] 0.37666477 0.7294819 0.7444697 0.9049165 0.9100240 1.0064138 1.0705954 #>  [845,] 0.32411737 0.3720099 0.3895660 0.4806928 0.4826672 0.5261576 0.5282865 #>  [846,] 1.11839146 1.5771461 1.6131811 1.6785846 1.7474122 1.7772212 1.7894966 #>  [847,] 0.42516774 0.6513980 0.6745134 0.7888111 0.7923236 0.8977527 0.9125891 #>  [848,] 0.19624274 0.2279682 0.2840894 0.4619576 0.5928810 0.7283482 0.7687306 #>  [849,] 1.11839146 1.6056324 1.6752128 1.7527515 1.8111568 1.8162633 1.9405063 #>  [850,] 0.36362420 0.4995905 0.7161684 0.7262949 0.8718923 0.9120089 0.9551492 #>  [851,] 0.42881362 0.4875609 0.5249030 0.5481429 0.6294731 0.6336492 0.6874139 #>  [852,] 0.99280689 1.5407856 1.5992152 1.7020673 1.7580373 1.7827696 1.8871964 #>  [853,] 0.42730027 0.5559076 0.6539474 0.6784081 0.7042136 0.7742759 0.8665585 #>  [854,] 0.63916785 0.6435594 0.6501147 0.6592059 0.6921547 0.7129461 0.7414164 #>  [855,] 0.29340160 0.6008395 0.6375469 0.8957038 0.9273686 0.9887475 1.0418015 #>  [856,] 0.95151666 1.0248096 1.0274584 1.0596260 1.1762380 1.2872706 1.3074219 #>  [857,] 0.28228754 0.3190694 0.4908177 0.6083837 0.6176596 0.6580550 0.7922612 #>  [858,] 0.37929799 0.4540076 0.4546352 0.5380614 0.5464645 0.5747974 0.5781900 #>  [859,] 0.48024477 0.5056449 0.6321145 0.6643750 0.7205015 0.7214781 0.7395734 #>  [860,] 0.25572994 0.3370929 0.3433929 0.3461653 0.3846908 0.5607125 0.5641025 #>  [861,] 0.88098379 0.8941008 0.8970732 0.9243641 0.9454739 0.9611847 0.9970064 #>  [862,] 0.19963094 0.4253115 0.4327940 0.4952900 0.5478848 0.5838579 0.7121972 #>  [863,] 0.41953670 0.5423670 0.5572702 0.6396016 0.6494889 0.6658933 0.6947535 #>  [864,] 0.15024199 0.4828050 0.5088258 0.6626907 0.7526476 0.8098871 0.8292719 #>  [865,] 0.29092908 0.4189660 0.5200694 0.5646743 0.5660972 0.5862933 0.6207260 #>  [866,] 0.52442058 0.6435594 0.6720739 0.7555221 0.7584288 0.7758265 0.8009670 #>  [867,] 0.22861821 0.2372458 0.4158956 0.4556171 0.5022410 0.5718235 0.5972651 #>  [868,] 0.64381558 0.7591794 0.7594601 0.7857828 0.7903163 0.8243293 0.9415459 #>  [869,] 0.56188713 0.7484710 1.1446443 1.2534089 1.3336686 1.3365599 1.3934439 #>  [870,] 0.41186368 0.5478848 0.6237052 0.6699131 0.7044802 0.7235069 0.7380306 #>  [871,] 0.59531165 0.6301612 0.6829496 0.8703470 0.8928795 0.9131486 0.9271315 #>  [872,] 0.30524402 0.3746087 0.4067339 0.4499934 0.4624110 0.4906096 0.5177569 #>  [873,] 0.95085518 0.9598210 0.9829550 0.9935334 1.0152701 1.0472382 1.0577801 #>  [874,] 0.38531710 0.4738983 0.4880271 0.4976798 0.5841216 0.6218840 0.6474308 #>  [875,] 0.85503370 0.8911159 0.9618048 1.2696690 1.3229686 1.3368404 1.3457721 #>  [876,] 0.46169959 0.4828776 0.4994656 0.5866138 0.6423099 0.8418324 0.8621121 #>  [877,] 0.32747116 0.3815968 0.4280624 0.4658191 0.4937491 0.5168323 0.5423468 #>  [878,] 0.65164779 0.6661864 0.7858247 0.7911791 0.8610737 0.8734917 0.9023367 #>  [879,] 0.64739453 1.0634376 1.2160875 1.2234967 1.2921973 1.3577327 1.3924513 #>  [880,] 0.61762019 1.2386162 1.4444183 1.4449985 1.4653533 1.4873154 1.5123692 #>  [881,] 0.79312821 0.8696507 0.8960241 0.9155061 0.9987688 1.0378403 1.0644435 #>  [882,] 0.35840970 0.5240895 0.5578336 0.5671623 0.5820604 0.6116788 0.6947648 #>  [883,] 0.88684297 0.9493400 0.9767033 1.0101450 1.0499615 1.0534338 1.1310754 #>  [884,] 0.44686075 0.6234452 0.6481009 0.8112823 0.8326556 0.8424521 0.9281683 #>  [885,] 0.48024477 0.5539264 0.6052029 0.6169539 0.6330349 0.6359842 0.6677251 #>  [886,] 0.34883844 0.5842497 0.6338563 0.6392708 0.7258283 0.7343772 0.7354579 #>  [887,] 0.20386822 0.2996897 0.3570336 0.3820259 0.4351833 0.4376626 0.4430032 #>  [888,] 0.40699911 0.4484318 0.4655869 0.4833765 0.5360403 0.5766436 0.5773267 #>  [889,] 0.27754795 0.3151955 0.4675760 0.5012887 0.5117713 0.5461238 0.5551390 #>  [890,] 0.29960910 0.3063476 0.3225140 0.3964814 0.4084928 0.4911228 0.4997326 #>  [891,] 0.20409200 0.4018046 0.4365033 0.4656568 0.4901913 0.5089744 0.5611821 #>  [892,] 0.23155439 0.3052440 0.3555455 0.4587595 0.4692479 0.4946818 0.5137240 #>  [893,] 0.17685080 0.5040590 0.5723363 0.6409552 0.6758198 0.6959621 0.7213932 #>  [894,] 1.06966841 1.1010886 1.1472946 1.1705722 1.1820885 1.2440242 1.2675109 #>  [895,] 0.49087274 0.5701031 0.6240678 0.6653746 0.7381938 0.7541370 0.7551310 #>  [896,] 0.51833067 0.5536824 0.5728174 0.6321502 0.6416228 0.6539474 0.6582722 #>  [897,] 0.64659558 0.6559446 0.7011442 0.8909817 0.8953462 0.9168421 0.9227213 #>  [898,] 0.33322046 0.5416623 0.8752247 0.9212017 0.9404795 0.9441086 0.9824364 #>  [899,] 0.39626450 0.4244203 0.4462709 0.5897515 0.6142419 0.6457249 0.6522478 #>  [900,] 0.36295797 0.5063134 0.5730296 0.5783648 0.6907378 0.7303440 0.7488673 #>  [901,] 0.30972644 0.4260230 0.4372203 0.5324795 0.5882705 0.5970642 0.6164065 #>  [902,] 0.30928185 0.3881146 0.3997845 0.5483420 0.5767628 0.5967284 0.6661773 #>  [903,] 0.46499706 0.5742484 0.5912861 0.6576271 0.6712601 0.7512542 0.7701131 #>  [904,] 0.16249153 0.4352136 0.4848401 0.4957124 0.5071976 0.5330277 0.5424335 #>  [905,] 0.43773109 0.4948758 0.6142419 0.6273272 0.6487756 0.6641392 0.6674030 #>  [906,] 0.30856636 0.4303279 0.5528459 0.5796545 0.7175512 0.7237384 0.7331647 #>  [907,] 0.31454723 0.3682253 0.4261464 0.4404061 0.4481988 0.4864065 0.5522475 #>  [908,] 0.73744766 0.8521705 0.9033353 0.9094887 0.9253753 0.9265705 0.9523677 #>  [909,] 0.79813894 1.0905997 1.1502524 1.3996565 1.4226678 1.4903577 1.4947910 #>  [910,] 0.35996274 0.4472022 0.6112851 0.6506005 0.7365757 0.8663264 0.8677984 #>  [911,] 0.41735855 0.4199149 0.5567701 0.6164065 0.6337841 0.6483968 0.6793637 #>  [912,] 0.92526340 1.1378007 1.2377187 1.2383201 1.2542159 1.3046073 1.3602844 #>  [913,] 0.53270359 0.5984266 0.6418654 0.7683285 0.8012935 0.8263173 0.8334642 #>  [914,] 0.52866295 0.8939852 0.9732876 0.9777768 0.9978706 1.0124508 1.0302478 #>  [915,] 0.57893776 0.9051007 0.9196287 0.9449904 0.9930902 1.0813751 1.1697737 #>  [916,] 0.83839018 0.9127880 1.1456839 1.3790801 1.4026729 1.4045465 1.4147957 #>  [917,] 0.48151248 0.6213898 0.6538957 0.6794629 0.7659354 0.7713424 0.8081861 #>  [918,] 0.59921543 0.6208600 0.6641405 0.7929467 0.8703470 0.8972736 0.8987038 #>  [919,] 0.17323721 0.4229152 0.4548979 0.5210266 0.5459667 0.6904394 0.7398267 #>  [920,] 0.71016921 0.7162610 0.7774744 0.7970494 0.8762610 0.8800556 0.8849447 #>  [921,] 0.29935140 0.3442235 0.4989423 0.5857891 0.5909049 0.5964014 0.5981101 #>  [922,] 0.41523780 0.6913944 0.8095202 0.8152389 0.8284457 0.8360778 0.8374432 #>  [923,] 0.32835119 0.5108340 0.5786481 0.6185293 0.6273600 0.6371384 0.6556190 #>  [924,] 0.30167522 0.4179906 0.4224584 0.6209874 0.6424241 0.6719143 0.6740367 #>  [925,] 0.18803035 0.5963063 0.6109679 0.6174598 0.6177306 0.6551570 0.6799812 #>  [926,] 0.46871671 0.5687127 0.5811770 0.5880229 0.6385232 0.6665497 0.7257461 #>  [927,] 0.29744609 0.3106355 0.5650288 0.6455455 0.6664063 0.7212612 0.7218492 #>  [928,] 0.71189136 0.7486953 0.7516331 0.9056472 0.9363459 0.9654738 1.0685319 #>  [929,] 0.42806237 0.4571716 0.4619932 0.5506004 0.5820604 0.6165704 0.6246660 #>  [930,] 0.59993770 0.7451368 0.7580417 0.7649082 0.8778754 0.8937950 0.9094337 #>  [931,] 0.49313717 0.5780151 0.5931846 0.6551125 0.6708041 0.6799200 0.6923716 #>  [932,] 0.45628983 0.5990059 0.7442037 0.7608215 0.8317483 0.8628320 0.9037339 #>  [933,] 0.28842598 0.3721720 0.3932582 0.4934572 0.5040590 0.6207101 0.6531815 #>  [934,] 0.84510475 0.9363459 1.0705368 1.1156008 1.2090237 1.3907788 1.4146359 #>  [935,] 0.58089880 0.6674328 0.8067058 1.0161615 1.0173525 1.0495499 1.0564533 #>  [936,] 0.45455793 0.5649443 0.6180748 0.6639459 0.6639672 0.7141419 0.7263591 #>  [937,] 0.28074533 0.3118915 0.3420210 0.4029665 0.4656568 0.4821372 0.5217025 #>  [938,] 0.60908551 0.6139356 0.6385232 0.6459660 0.6535863 0.6654261 0.7108370 #>  [939,] 0.30008116 0.3668790 0.4243880 0.4760809 0.5148844 0.5570364 0.5679500 #>  [940,] 0.67705225 0.7002750 0.8077391 0.8431675 0.8442118 0.8548518 0.8647037 #>  [941,] 0.54279262 0.5968079 0.6388143 0.6484457 0.6657748 0.6979090 0.6990303 #>  [942,] 0.30727266 0.3534528 0.4365033 0.4824492 0.5109671 0.5147621 0.5684547 #>  [943,] 0.38993929 0.4224921 0.5716664 0.5861752 0.5960224 0.6336560 0.6380220 #>  [944,] 1.08100555 1.3732769 1.4857438 1.5282236 1.5952576 1.6693231 1.6908325 #>  [945,] 0.31251812 0.4136393 0.4624604 0.5234894 0.5693001 0.5728368 0.5751218 #>  [946,] 0.29960910 0.3231145 0.3675681 0.4471444 0.4696609 0.4706311 0.4842068 #>  [947,] 0.48280500 0.4981219 0.5379111 0.5546577 0.5815951 0.8205679 0.8257004 #>  [948,] 0.11625434 0.3654061 0.4300024 0.4742886 0.5171684 0.5767315 0.5922683 #>  [949,] 0.32414932 0.4373514 0.5298680 0.5658030 0.6331405 0.6424788 0.6633237 #>  [950,] 0.38963647 0.4518437 0.4551130 0.5067367 0.5354090 0.5884079 0.6456369 #>  [951,] 0.40583092 0.4260230 0.6208890 0.6379733 0.6414350 0.6718170 0.6839461 #>  [952,] 0.30727266 0.3964737 0.4186617 0.4206750 0.4250039 0.4959981 0.5741103 #>  [953,] 0.40836798 0.7894047 0.8064655 1.0596628 1.1799850 1.1929541 1.2168564 #>  [954,] 0.38808601 0.3917874 0.3955661 0.4077930 0.4401138 0.4574332 0.4624110 #>  [955,] 0.22570923 0.7344356 0.7773884 0.7903481 0.7977802 0.7985786 0.8127729 #>  [956,] 0.35260553 0.4931282 0.5963574 0.6159683 0.6391296 0.6395572 0.6650419 #>  [957,] 0.42730027 0.5051117 0.7131637 0.7194761 0.7215428 0.7610726 0.7643825 #>  [958,] 0.63472311 0.7318763 0.7419853 0.7778638 0.8015747 0.8186890 0.8572792 #>  [959,] 0.36295797 0.4343023 0.4361761 0.6506194 0.6512680 0.6590819 0.6655405 #>  [960,] 0.38666886 0.4377025 0.5184139 0.5641869 0.5681018 0.6358601 0.6537525 #>  [961,] 0.56004377 0.7315666 0.7440415 0.8300650 0.8628238 0.9362376 0.9387556 #>  [962,] 0.64739453 0.6787017 1.0715520 1.1680605 1.2070891 1.2229335 1.2749480 #>  [963,] 0.60090723 0.6169539 0.6321145 0.8641021 0.9091837 0.9315047 0.9417696 #>  [964,] 0.67819482 0.8821868 0.9061286 0.9538862 1.0221508 1.1334247 1.1704662 #>  [965,] 0.58471071 0.7470898 0.8469636 0.8966643 0.9196287 0.9297531 1.0282795 #>  [966,] 0.37656343 0.4236885 0.4384709 0.5207417 0.5762302 0.5787689 0.6024693 #>  [967,] 0.32569264 0.3705638 0.4927446 0.5502192 0.6122335 0.6536746 0.6705522 #>  [968,] 0.50038470 0.8909817 1.0184914 1.0277657 1.0797412 1.1127988 1.1401717 #>  [969,] 0.18803035 0.4965426 0.6242892 0.6283139 0.6579436 0.6833244 0.6893094 #>  [970,] 1.08432395 1.2271464 1.3137737 1.3620349 1.4284948 1.5223900 1.5904520 #>  [971,] 0.45827951 0.4941667 0.6202218 0.6538131 0.7082099 0.7367217 0.8349034 #>  [972,] 0.50539360 0.5797935 0.5984853 0.6240678 0.6243981 0.6544480 0.7370854 #>  [973,] 0.40814915 0.6239366 0.8107270 0.8254536 0.8334053 0.8449077 0.9154682 #>  [974,] 0.53161800 0.6386167 0.6917594 0.7498573 0.8360778 0.9011919 0.9185220 #>  [975,] 0.21621234 0.3942350 0.4576864 0.4826672 0.4853470 0.5297030 0.5473172 #>  [976,] 0.52442058 0.6321951 0.6391679 0.7142203 0.7509386 0.7605731 0.7987896 #>  [977,] 0.53718049 0.5898105 0.7351366 0.8004969 0.8150537 0.8762175 0.9862135 #>  [978,] 0.90991374 0.9671533 1.0490164 1.1422407 1.2217004 1.2460591 1.3055929 #>  [979,] 0.39325820 0.4348707 0.5114998 0.5313283 0.5501307 0.6241334 0.6246194 #>  [980,] 0.92946731 0.9880871 0.9928069 1.0451796 1.1151619 1.1438995 1.2309744 #>  [981,] 0.49766071 0.4976741 0.5022110 0.5961887 0.6055985 0.6088236 0.6115604 #>  [982,] 0.41606262 0.4747898 0.5524635 1.0020021 1.1123595 1.1226408 1.1881139 #>  [983,] 0.99626532 1.1718323 1.3466073 1.3799171 1.4721848 1.5546496 1.5566981 #>  [984,] 0.62617363 1.1010947 1.2011243 1.2077045 1.2814191 1.2822832 1.3222576 #>  [985,] 0.88385594 1.0106577 1.0495499 1.1741369 1.2861701 1.3164937 1.4699397 #>  [986,] 0.39681475 0.4138339 0.5617095 0.6294748 0.6334876 0.6712601 0.6975436 #>  [987,] 0.29618109 0.2972152 0.3158315 0.3238544 0.3539559 0.3815968 0.4128456 #>  [988,] 0.98593310 1.0696481 1.1151619 1.1382707 1.1526916 1.1847653 1.2048532 #>  [989,] 0.91102222 0.9987503 1.0651372 1.1279404 1.1313420 1.1387125 1.1847653 #>  [990,] 0.58471071 0.7643707 0.8989058 1.1333799 1.2143398 1.2483776 1.2686896 #>  [991,] 0.20386822 0.2751594 0.2821170 0.3300524 0.3620051 0.4157378 0.4345490 #>  [992,] 0.55368243 0.7042136 0.7194761 0.7722016 0.8361046 0.8587182 0.8659535 #>  [993,] 0.71731716 0.7632523 0.9187684 0.9627677 0.9750136 1.0061736 1.0867698 #>  [994,] 0.25724294 0.5327036 0.6214852 0.7082959 0.7592750 0.7667565 0.7818323 #>  [995,] 0.41863484 0.4546114 0.5045666 0.5260412 0.5704638 0.6086270 0.6281970 #>  [996,] 0.42619058 0.4880186 0.5061382 0.5320831 0.5477174 0.5754923 0.5922005 #>  [997,] 0.53972126 0.5772284 0.6960337 0.7440415 0.8602698 0.8730609 0.8888835 #>  [998,] 0.56612416 0.6575235 0.7219209 0.8004682 0.8212409 0.8443122 0.8455567 #>  [999,] 0.47948465 0.5240895 0.5994840 0.6251989 0.6765302 0.6967573 0.7473154 #> [1000,] 0.26599562 0.3377949 0.3668790 0.3705910 0.4130709 0.4678077 0.4713052 #>              [,8]      [,9]     [,10] #>    [1,] 1.0017987 1.0475731 1.0650789 #>    [2,] 0.6214486 0.6307902 0.6405316 #>    [3,] 0.8328577 0.8986674 0.9365410 #>    [4,] 1.3989228 1.4857665 1.5050253 #>    [5,] 0.9294673 0.9570312 0.9624881 #>    [6,] 0.8955523 0.9534202 0.9618639 #>    [7,] 0.8261239 0.8386145 0.8503995 #>    [8,] 0.4202029 0.4231938 0.4286524 #>    [9,] 0.6166653 0.6625598 0.6634870 #>   [10,] 0.6107820 0.6247604 0.6536357 #>   [11,] 0.9924790 1.0323831 1.1293757 #>   [12,] 1.0797073 1.0810056 1.0827304 #>   [13,] 0.5362433 0.6190179 0.6301757 #>   [14,] 0.8538292 0.8630108 0.8638447 #>   [15,] 0.8604695 0.8752247 0.9137490 #>   [16,] 1.3065371 1.3098905 1.3111063 #>   [17,] 0.6912169 0.6938718 0.7175971 #>   [18,] 0.8398069 0.8798543 0.9261822 #>   [19,] 0.9146976 0.9256782 0.9266921 #>   [20,] 0.6733797 0.6986113 0.7151660 #>   [21,] 0.8092202 0.8114058 0.8271915 #>   [22,] 0.6148234 0.6182736 0.6214438 #>   [23,] 0.7804826 0.8164415 0.8174655 #>   [24,] 0.6793400 0.6928292 0.7321157 #>   [25,] 0.5725685 0.5890515 0.6145868 #>   [26,] 0.6539028 0.6709709 0.6998450 #>   [27,] 0.5278241 0.5440974 0.5497566 #>   [28,] 0.7281943 0.7802598 0.7816060 #>   [29,] 0.6748527 0.6930720 0.6971248 #>   [30,] 0.8768724 0.9147689 0.9360993 #>   [31,] 1.3064519 1.3124056 1.3258078 #>   [32,] 0.6046667 0.6842926 0.7166093 #>   [33,] 0.7684586 0.7842605 0.8042285 #>   [34,] 1.4794905 1.5053373 1.5178114 #>   [35,] 0.4937491 0.5526056 0.5671623 #>   [36,] 1.0866635 1.1469679 1.1494184 #>   [37,] 0.6987092 0.7199234 0.7234813 #>   [38,] 0.5501656 0.5961887 0.6970598 #>   [39,] 1.1292862 1.1328012 1.1356073 #>   [40,] 1.4679333 1.5024751 1.5479844 #>   [41,] 0.9930902 1.0387343 1.0640069 #>   [42,] 0.8094063 0.8107663 0.8205679 #>   [43,] 1.2391248 1.2484002 1.2640630 #>   [44,] 0.6611327 0.6779283 0.6802713 #>   [45,] 0.6445052 0.6616670 0.7145873 #>   [46,] 0.8662582 0.8670990 0.8787463 #>   [47,] 0.7885522 0.7935397 0.8031600 #>   [48,] 1.4077391 1.4507073 1.4865984 #>   [49,] 0.6445012 0.6491127 0.6571847 #>   [50,] 0.9329811 0.9682188 1.0422726 #>   [51,] 0.8878259 0.9876503 0.9943000 #>   [52,] 0.6986757 0.7106787 0.7109026 #>   [53,] 0.6044438 0.6101109 0.6148438 #>   [54,] 1.0024218 1.0545711 1.0563403 #>   [55,] 1.0660047 1.0695665 1.1096352 #>   [56,] 0.5995372 0.6190179 0.6498654 #>   [57,] 0.8769836 0.8874848 0.8889665 #>   [58,] 0.5792173 0.6091827 0.6180748 #>   [59,] 0.8955099 0.9166728 0.9567858 #>   [60,] 0.5642196 0.5705076 0.6032184 #>   [61,] 0.6951561 0.7031744 0.7109026 #>   [62,] 0.7253122 0.7692283 0.7734379 #>   [63,] 0.8634843 0.8781599 0.9470034 #>   [64,] 0.7645069 0.7931695 0.8010592 #>   [65,] 0.8415193 0.8679829 0.8987149 #>   [66,] 1.3814304 1.4493176 1.5434808 #>   [67,] 0.9094334 0.9200038 0.9864417 #>   [68,] 0.5529043 0.5995157 0.6178488 #>   [69,] 1.8548248 1.9304719 2.0110164 #>   [70,] 0.5461434 0.5687264 0.6069854 #>   [71,] 1.4607301 1.4904319 1.5022366 #>   [72,] 1.3682196 1.4150295 1.4773467 #>   [73,] 0.5200370 0.5410095 0.5952096 #>   [74,] 1.1410576 1.2683637 1.3033463 #>   [75,] 0.9678321 1.0518829 1.0925606 #>   [76,] 0.7492470 0.7680826 0.7940761 #>   [77,] 0.8809453 0.8893316 0.8955099 #>   [78,] 1.3706934 1.3989228 1.4017684 #>   [79,] 0.9239277 0.9463790 1.0651155 #>   [80,] 0.8879854 0.9153954 0.9205986 #>   [81,] 0.6338702 0.6365369 0.6516390 #>   [82,] 0.7572403 0.8188657 0.8245372 #>   [83,] 0.7566546 0.8061132 0.8213529 #>   [84,] 0.6324063 0.6402100 0.6694417 #>   [85,] 1.4369157 1.5424179 1.6007484 #>   [86,] 0.6043491 0.6062547 0.6250433 #>   [87,] 0.4687029 0.4739123 0.5516490 #>   [88,] 0.7281472 0.7316181 0.7411939 #>   [89,] 0.5230441 0.5848544 0.6322754 #>   [90,] 0.8650467 0.8939852 0.9539407 #>   [91,] 0.9173804 0.9608643 0.9887797 #>   [92,] 0.8399389 0.9499998 0.9684579 #>   [93,] 0.5733226 0.5938870 0.5988251 #>   [94,] 1.4794258 1.5171563 1.5560826 #>   [95,] 0.8062760 0.8702995 0.9007719 #>   [96,] 1.3016225 1.3104085 1.3346281 #>   [97,] 0.5978957 0.6236169 0.6499381 #>   [98,] 0.8698193 0.9269305 0.9998940 #>   [99,] 0.4376626 0.4622426 0.5178862 #>  [100,] 0.8512882 0.8597103 0.8850152 #>  [101,] 0.5943796 0.6052661 0.6148438 #>  [102,] 0.7149260 0.7341596 0.7779886 #>  [103,] 1.0467082 1.0578326 1.0698671 #>  [104,] 0.4821654 0.4899225 0.5052953 #>  [105,] 0.7818686 0.7864234 0.8462420 #>  [106,] 1.3160642 1.3251182 1.3670451 #>  [107,] 0.9368121 0.9437938 0.9608681 #>  [108,] 0.6547371 0.6708612 0.6718062 #>  [109,] 0.5280665 0.5477871 0.5569956 #>  [110,] 0.7629003 0.7709045 0.7931252 #>  [111,] 0.4470590 0.4687541 0.4731373 #>  [112,] 0.8009216 0.8617814 0.8634274 #>  [113,] 0.8188241 0.8587330 0.8625752 #>  [114,] 0.6413004 0.6441258 0.6751091 #>  [115,] 2.3553072 2.4095518 2.4265129 #>  [116,] 1.0059506 1.1140944 1.1408231 #>  [117,] 0.6060371 0.6258398 0.6474308 #>  [118,] 1.0100810 1.0119705 1.0148505 #>  [119,] 0.9686485 0.9876911 0.9949474 #>  [120,] 0.7556938 0.7794600 0.7809303 #>  [121,] 0.7835427 0.7937274 0.8245916 #>  [122,] 1.0408571 1.1085680 1.1438995 #>  [123,] 0.5963525 0.5963574 0.6030394 #>  [124,] 0.7962946 0.9049763 0.9311219 #>  [125,] 1.4344444 1.4482169 1.4803446 #>  [126,] 0.5620009 0.6097702 0.6106336 #>  [127,] 0.5926892 0.5966149 0.6040593 #>  [128,] 0.8096551 0.8398018 0.8512415 #>  [129,] 1.3844340 1.3906619 1.4230766 #>  [130,] 0.7245011 0.7322225 0.7798759 #>  [131,] 0.8733493 0.8876986 0.9182193 #>  [132,] 1.6049290 1.6183883 1.6587870 #>  [133,] 1.0495904 1.0760925 1.1134203 #>  [134,] 0.7044543 0.7161418 0.7541234 #>  [135,] 0.8167391 0.8431675 0.8503995 #>  [136,] 0.5133382 0.5251177 0.5288472 #>  [137,] 0.7140631 0.7279112 0.7312792 #>  [138,] 1.3034333 1.3094470 1.3796062 #>  [139,] 0.6897616 0.6954455 0.6995806 #>  [140,] 0.5322763 0.5408426 0.5877109 #>  [141,] 0.7744280 0.8200106 0.8483860 #>  [142,] 0.8116894 0.8145849 0.8902973 #>  [143,] 0.9770629 1.0315763 1.0918488 #>  [144,] 0.9071394 0.9088660 0.9111389 #>  [145,] 0.9979312 1.0565564 1.0640533 #>  [146,] 0.7093182 0.7316385 0.7722771 #>  [147,] 0.8217854 0.8693486 0.8725801 #>  [148,] 1.4333673 1.4623458 1.5203937 #>  [149,] 1.0708505 1.0770390 1.1161778 #>  [150,] 0.8074077 0.8237649 0.8415638 #>  [151,] 0.6651779 0.6757244 0.6824458 #>  [152,] 0.6447016 0.6659486 0.6733797 #>  [153,] 0.8422156 0.8894254 0.9134062 #>  [154,] 0.5360648 0.5878735 0.6241687 #>  [155,] 1.2957213 1.2994506 1.3012413 #>  [156,] 1.4137770 1.4314193 1.4653533 #>  [157,] 1.5888380 1.6186077 1.6188260 #>  [158,] 0.8979834 0.9093517 0.9163685 #>  [159,] 0.5709455 0.5754450 0.5893357 #>  [160,] 0.7401540 0.8025864 0.8201682 #>  [161,] 0.6286531 0.6471289 0.6531815 #>  [162,] 0.7796115 0.7812196 0.7995518 #>  [163,] 0.8673533 0.8875580 0.9404730 #>  [164,] 1.2672375 1.2723607 1.3005360 #>  [165,] 1.6528876 1.6629143 1.6726823 #>  [166,] 1.1420025 1.1810406 1.2042946 #>  [167,] 0.7065253 0.7073833 0.7396854 #>  [168,] 1.4952291 1.5022366 1.5269907 #>  [169,] 0.6598916 0.6831113 0.6985491 #>  [170,] 0.7783833 0.8275288 0.8352369 #>  [171,] 0.6306146 0.6376776 0.6567010 #>  [172,] 1.1213924 1.2393482 1.2733771 #>  [173,] 0.7827401 0.8660309 0.8707721 #>  [174,] 0.5491084 0.5607001 0.5805423 #>  [175,] 0.7073398 0.7409786 0.8338477 #>  [176,] 0.9102452 0.9449416 0.9541921 #>  [177,] 0.8326556 0.8644918 0.8689088 #>  [178,] 0.7627148 0.8056316 0.8361300 #>  [179,] 0.6843805 0.6914209 0.7045538 #>  [180,] 1.3229686 1.3457376 1.4135420 #>  [181,] 0.6201443 0.6211691 0.6219655 #>  [182,] 0.6720118 0.7289844 0.7489201 #>  [183,] 0.6750102 0.6838051 0.6991666 #>  [184,] 0.4202029 0.4430032 0.4489634 #>  [185,] 0.8736706 0.9161987 0.9514165 #>  [186,] 1.1853497 1.1872287 1.1909662 #>  [187,] 1.1465895 1.1896646 1.1988229 #>  [188,] 0.5054301 0.5104940 0.5158165 #>  [189,] 0.7578127 0.7681095 0.7939497 #>  [190,] 0.7231225 0.7471514 0.7677498 #>  [191,] 0.7082754 0.7092109 0.7978335 #>  [192,] 1.5090110 1.5580803 1.5735821 #>  [193,] 0.6655109 0.6949340 0.7477272 #>  [194,] 0.7331270 0.7414068 0.7578560 #>  [195,] 0.5754450 0.5771989 0.6192539 #>  [196,] 0.7088951 0.7218492 0.7346950 #>  [197,] 0.7550044 0.7824041 0.8043089 #>  [198,] 0.9108867 0.9628781 1.0148464 #>  [199,] 0.7890365 0.8148075 0.8696491 #>  [200,] 1.1788225 1.1915692 1.2072630 #>  [201,] 0.7093966 0.7216872 0.7325123 #>  [202,] 1.2452484 1.2868645 1.2964094 #>  [203,] 0.4757264 0.4863049 0.5071780 #>  [204,] 0.7720853 0.7827395 0.8047392 #>  [205,] 0.7968719 0.8651796 0.8672403 #>  [206,] 1.0279147 1.0539925 1.2187201 #>  [207,] 0.5804190 0.5903258 0.6196446 #>  [208,] 0.7184028 0.7356900 0.7783825 #>  [209,] 1.8083955 1.8461060 1.8590855 #>  [210,] 0.4957934 0.5359277 0.5477122 #>  [211,] 0.8783860 0.8813476 0.9353860 #>  [212,] 0.6902231 0.6997929 0.7029867 #>  [213,] 0.7062544 0.7143230 0.7352142 #>  [214,] 0.4166922 0.4263329 0.4411085 #>  [215,] 0.6927255 0.7138302 0.7207348 #>  [216,] 0.9804394 1.0003945 1.0487587 #>  [217,] 0.6958252 0.7072432 0.7162610 #>  [218,] 0.9044921 0.9359785 0.9387735 #>  [219,] 0.8411832 0.8574073 0.9440942 #>  [220,] 0.8327616 0.8334053 0.8593135 #>  [221,] 0.9719441 1.0120039 1.0170636 #>  [222,] 0.6579436 0.7124614 0.7148290 #>  [223,] 0.5538463 0.5933686 0.6722525 #>  [224,] 0.7750935 0.7841913 0.8011961 #>  [225,] 0.6196694 0.6469996 0.6769695 #>  [226,] 0.5929710 0.6207260 0.6249818 #>  [227,] 0.7143196 0.7423866 0.7604276 #>  [228,] 0.5354910 0.5819264 0.5835813 #>  [229,] 1.6336586 1.6422782 1.6511372 #>  [230,] 1.0270213 1.0318228 1.0565587 #>  [231,] 0.8171142 0.8931313 0.9664695 #>  [232,] 0.7997401 0.8009670 0.9030514 #>  [233,] 0.5352368 0.5424584 0.5587621 #>  [234,] 0.7834398 0.8254703 0.8597103 #>  [235,] 0.7455176 0.7622745 0.7728302 #>  [236,] 0.4582335 0.4621511 0.5185057 #>  [237,] 0.5665978 0.6100151 0.6123890 #>  [238,] 0.8442071 0.8467096 0.8613278 #>  [239,] 0.9448563 1.0181164 1.0216475 #>  [240,] 0.9608500 0.9654572 0.9699256 #>  [241,] 0.7818323 0.8047392 0.8082620 #>  [242,] 0.8229440 0.8352722 0.8455183 #>  [243,] 0.6470696 0.7065688 0.7492484 #>  [244,] 0.9987688 1.0066370 1.0205375 #>  [245,] 0.5620250 0.5647730 0.5728368 #>  [246,] 1.1347281 1.1359437 1.1677108 #>  [247,] 1.8607677 1.9198720 2.0773208 #>  [248,] 0.7781398 0.8050348 0.8317483 #>  [249,] 0.8193360 0.8643172 0.8864978 #>  [250,] 1.2668090 1.3247734 1.3635417 #>  [251,] 0.5082511 0.5379035 0.5524690 #>  [252,] 1.3301343 1.3349423 1.3452622 #>  [253,] 0.8061577 0.8192996 0.8479771 #>  [254,] 0.6150916 0.6490025 0.6526339 #>  [255,] 0.6065043 0.6358426 0.6364884 #>  [256,] 0.5658276 0.5727006 0.5829554 #>  [257,] 0.7756406 0.8009187 0.8120274 #>  [258,] 0.6689522 0.6928292 0.6966460 #>  [259,] 1.2234967 1.2262780 1.2537752 #>  [260,] 0.8056316 0.8283056 0.8323698 #>  [261,] 0.6664063 0.6965775 0.7100085 #>  [262,] 0.5462468 0.5924471 0.6489316 #>  [263,] 1.3952511 1.4074335 1.4099715 #>  [264,] 0.5460027 0.5517136 0.5694520 #>  [265,] 0.7019963 0.7243548 0.7642284 #>  [266,] 0.6172277 0.6183536 0.6510269 #>  [267,] 1.1379802 1.1408231 1.1739286 #>  [268,] 0.6650984 0.6793637 0.6810947 #>  [269,] 0.4972470 0.5001496 0.5375364 #>  [270,] 0.7162678 0.7786019 0.8606209 #>  [271,] 0.9639867 0.9991314 1.0274584 #>  [272,] 0.6839352 0.7311533 0.7391390 #>  [273,] 0.6150004 0.6539028 0.6805466 #>  [274,] 0.7189297 0.7589982 0.8113608 #>  [275,] 0.9829833 0.9930443 1.0054245 #>  [276,] 0.6071412 0.6121929 0.6371915 #>  [277,] 1.4045956 1.4778528 1.4903159 #>  [278,] 0.6921031 0.7118069 0.7457198 #>  [279,] 0.6328397 0.6582722 0.6655109 #>  [280,] 1.1788225 1.2369810 1.2437030 #>  [281,] 1.0518829 1.0932076 1.0965775 #>  [282,] 1.1896477 1.1919227 1.2132658 #>  [283,] 0.6721696 0.6740065 0.7031006 #>  [284,] 1.2092376 1.2304764 1.2789422 #>  [285,] 0.9337919 0.9521159 1.0122385 #>  [286,] 0.9140970 0.9491233 0.9497281 #>  [287,] 0.8242632 0.8443680 0.8706874 #>  [288,] 1.4172896 1.4614011 1.4681546 #>  [289,] 0.8979957 0.8980037 0.9414576 #>  [290,] 0.6890346 0.6952599 0.6990303 #>  [291,] 0.9925741 1.0059826 1.0066862 #>  [292,] 1.0071872 1.0241391 1.0741099 #>  [293,] 0.6221267 0.6242855 0.6322242 #>  [294,] 0.8527071 0.8765571 0.9211422 #>  [295,] 0.6556528 0.7112374 0.7209597 #>  [296,] 0.7460321 0.7474295 0.7767667 #>  [297,] 0.7205670 0.8118935 0.8752362 #>  [298,] 0.6445052 0.6614193 0.7812895 #>  [299,] 1.2817392 1.3160075 1.3222173 #>  [300,] 0.7743777 0.8863783 0.8999749 #>  [301,] 0.6941569 0.7030658 0.7043192 #>  [302,] 0.9979312 1.0040171 1.0541440 #>  [303,] 1.5505570 1.5694343 1.6633229 #>  [304,] 1.0689274 1.1625991 1.1766297 #>  [305,] 1.2141668 1.2345665 1.2362496 #>  [306,] 0.9113773 0.9270363 0.9554519 #>  [307,] 0.5658030 0.5896249 0.6003563 #>  [308,] 0.6926693 0.7495353 0.7564179 #>  [309,] 0.5143248 0.5367031 0.5748045 #>  [310,] 0.9051007 0.9183579 0.9375121 #>  [311,] 0.8543164 0.8764051 0.8796582 #>  [312,] 0.7079109 0.7151660 0.7454736 #>  [313,] 0.5789785 0.6028411 0.6433608 #>  [314,] 0.6341471 0.6368329 0.6564119 #>  [315,] 0.5314887 0.5493388 0.5590682 #>  [316,] 0.9225089 0.9326026 0.9525176 #>  [317,] 0.7313332 0.7397172 0.7489930 #>  [318,] 0.7028761 0.7146700 0.7237384 #>  [319,] 1.0737203 1.1004118 1.1078451 #>  [320,] 1.6173196 1.6238673 1.6443415 #>  [321,] 0.8945241 0.9121029 0.9576381 #>  [322,] 1.0672812 1.0715833 1.1441182 #>  [323,] 0.7234003 0.7531969 0.7857209 #>  [324,] 0.4942339 0.5096598 0.5450156 #>  [325,] 0.8370578 0.8869222 0.9212480 #>  [326,] 0.6907378 0.7600961 0.7924004 #>  [327,] 0.7811872 0.7842605 0.7951415 #>  [328,] 0.5680417 0.6093011 0.6130959 #>  [329,] 0.7549709 0.7592496 0.8058896 #>  [330,] 0.5930548 0.6046667 0.6323279 #>  [331,] 0.6768245 0.6883407 0.7271920 #>  [332,] 0.7563115 0.7833402 0.8053165 #>  [333,] 1.1223747 1.1239328 1.1485117 #>  [334,] 0.6391645 0.6517667 0.6895271 #>  [335,] 0.6469657 0.6538679 0.6605214 #>  [336,] 0.8869416 0.9150744 0.9154203 #>  [337,] 0.5316107 0.5852682 0.5941751 #>  [338,] 1.0975237 1.1391590 1.1403101 #>  [339,] 0.7691296 0.7945243 0.7947928 #>  [340,] 0.8576985 0.8704060 0.9166592 #>  [341,] 0.8299798 0.8489362 0.8556463 #>  [342,] 0.9874539 1.0304065 1.0722036 #>  [343,] 0.9038509 0.9252040 0.9578218 #>  [344,] 0.5367031 0.5437988 0.5574227 #>  [345,] 0.5944434 0.5967284 0.6613294 #>  [346,] 0.7097406 0.7619251 0.8118762 #>  [347,] 1.7264916 1.7325509 1.7351884 #>  [348,] 0.8187118 0.8685058 0.8830286 #>  [349,] 1.0760925 1.0943553 1.1432573 #>  [350,] 0.6356741 0.6357374 0.6395572 #>  [351,] 0.7676658 0.7796153 0.8001151 #>  [352,] 0.7649635 0.8916589 0.9332864 #>  [353,] 0.5311375 0.5326891 0.6113846 #>  [354,] 0.6666220 0.6978031 0.7303598 #>  [355,] 0.9048954 0.9262423 0.9673967 #>  [356,] 0.7161684 0.7453052 0.7673022 #>  [357,] 0.4911228 0.5447773 0.5524837 #>  [358,] 1.2686896 1.3285775 1.3471222 #>  [359,] 0.5552808 0.5962895 0.6047703 #>  [360,] 0.6922475 0.6999212 0.7328775 #>  [361,] 0.7611458 0.7698657 0.8161643 #>  [362,] 0.4872605 0.5032338 0.5493388 #>  [363,] 0.6477561 0.6503599 0.6825710 #>  [364,] 0.7985786 0.8181552 0.8372399 #>  [365,] 1.1181000 1.1201461 1.1281676 #>  [366,] 1.0165219 1.0365262 1.0666473 #>  [367,] 1.5194579 1.5682205 1.6174053 #>  [368,] 0.7183623 0.7430333 0.7719535 #>  [369,] 0.5454793 0.5695168 0.5713032 #>  [370,] 0.9080478 0.9371019 0.9559843 #>  [371,] 0.6919888 0.7008377 0.7551310 #>  [372,] 0.8972163 0.9580956 0.9745452 #>  [373,] 0.9464069 1.0508019 1.0767289 #>  [374,] 1.0005153 1.0435977 1.0854184 #>  [375,] 0.8272062 0.8377332 0.8574073 #>  [376,] 1.2925339 1.3450001 1.3568569 #>  [377,] 0.8150537 0.9582250 0.9773437 #>  [378,] 1.1933826 1.2428900 1.2732573 #>  [379,] 0.6366351 0.6556528 0.6783817 #>  [380,] 0.7419631 0.7671272 0.7825071 #>  [381,] 0.9032309 0.9596740 0.9753834 #>  [382,] 0.7537328 0.7567008 0.7896661 #>  [383,] 0.7063454 0.7994627 0.8060727 #>  [384,] 1.1144786 1.1155881 1.1214182 #>  [385,] 1.4126979 1.4204582 1.4300904 #>  [386,] 0.8906982 0.9449329 0.9731904 #>  [387,] 1.1653903 1.1827779 1.2082735 #>  [388,] 0.6225350 0.6242412 0.6282361 #>  [389,] 0.7449617 0.7515773 0.7673175 #>  [390,] 0.6799858 0.7228406 0.7393895 #>  [391,] 1.2621043 1.2890456 1.2988083 #>  [392,] 1.2366961 1.2509525 1.2934878 #>  [393,] 0.5963525 0.6183394 0.6853655 #>  [394,] 0.5665968 0.5914806 0.5937543 #>  [395,] 0.6838051 0.6954455 0.6983704 #>  [396,] 0.6384190 0.6568841 0.6955580 #>  [397,] 0.5447773 0.5755845 0.5789137 #>  [398,] 1.0672812 1.0741042 1.0855428 #>  [399,] 0.6243520 0.6301182 0.6357374 #>  [400,] 0.6792259 0.6795042 0.7337607 #>  [401,] 0.7174354 0.7228217 0.7294996 #>  [402,] 0.7166397 0.7239848 0.7376579 #>  [403,] 1.0589527 1.0715833 1.0778385 #>  [404,] 0.6538957 0.6580960 0.6920874 #>  [405,] 0.6500378 0.7460321 0.8462229 #>  [406,] 0.7060823 0.7281472 0.7368302 #>  [407,] 1.0089310 1.0327896 1.0347018 #>  [408,] 0.9785581 0.9814212 1.0229813 #>  [409,] 0.6989665 0.7604329 0.7825897 #>  [410,] 0.7248751 0.7717124 0.8070999 #>  [411,] 1.0222689 1.1059094 1.1270150 #>  [412,] 0.7057625 0.7133670 0.7223934 #>  [413,] 0.9731904 0.9734559 1.0549680 #>  [414,] 0.6739851 0.6831493 0.6877890 #>  [415,] 0.7794488 0.7953891 0.8788907 #>  [416,] 0.8116894 0.8307585 0.8321857 #>  [417,] 1.5131040 1.5602191 1.5881922 #>  [418,] 1.3404750 1.4104426 1.4554161 #>  [419,] 0.6483968 0.6557040 0.6593485 #>  [420,] 0.4766208 0.4898483 0.5196887 #>  [421,] 0.9313517 0.9626067 1.0196284 #>  [422,] 0.7058653 0.7286938 0.7455176 #>  [423,] 0.9007919 0.9541921 0.9804693 #>  [424,] 0.8648500 0.8875355 0.9147689 #>  [425,] 0.5404717 0.5815883 0.5827285 #>  [426,] 0.6659868 0.6759419 0.6956074 #>  [427,] 0.9894996 1.0266344 1.0356201 #>  [428,] 0.7005526 0.7079180 0.7818590 #>  [429,] 0.7713110 0.7781398 0.8009857 #>  [430,] 1.1258967 1.1603549 1.1646236 #>  [431,] 0.7532404 0.7669136 0.7673328 #>  [432,] 0.7977278 0.7987950 0.8181552 #>  [433,] 0.9339429 0.9360201 0.9493628 #>  [434,] 0.9173553 0.9962313 1.0327673 #>  [435,] 1.0915902 1.1207887 1.1518124 #>  [436,] 0.6406322 0.6547371 0.6551748 #>  [437,] 0.8471469 0.8709978 0.8827553 #>  [438,] 0.9460691 0.9471284 0.9572736 #>  [439,] 0.9858135 0.9910196 1.1093064 #>  [440,] 1.1203439 1.1415306 1.1443436 #>  [441,] 0.7061825 0.7266676 0.7879852 #>  [442,] 1.5446834 1.5546175 1.5587074 #>  [443,] 1.0736583 1.1519699 1.2017920 #>  [444,] 0.5940878 0.6421347 0.6692173 #>  [445,] 0.8619688 0.8726578 0.8808026 #>  [446,] 0.8488269 0.9049651 0.9265314 #>  [447,] 0.6774777 0.6997957 0.7168813 #>  [448,] 0.6692173 0.6710689 0.6738141 #>  [449,] 0.8792078 0.9010216 0.9364485 #>  [450,] 1.0216509 1.0391173 1.0703283 #>  [451,] 0.5812330 0.6485260 0.6957363 #>  [452,] 0.8632371 0.8687217 0.9517686 #>  [453,] 0.6249818 0.6674030 0.6787057 #>  [454,] 0.9897138 0.9970372 1.0527953 #>  [455,] 0.6735760 0.6893094 0.7162412 #>  [456,] 0.6882130 0.7220266 0.7383734 #>  [457,] 1.4482169 1.5273392 1.5726415 #>  [458,] 0.5924471 0.6921679 0.6951561 #>  [459,] 0.7954533 0.8229440 0.8256559 #>  [460,] 0.8515317 0.8783783 0.8872312 #>  [461,] 1.1159328 1.1276155 1.1335180 #>  [462,] 0.7612039 0.7780813 0.8042285 #>  [463,] 1.1645758 1.1810814 1.2064471 #>  [464,] 0.5343068 0.5750573 0.5812330 #>  [465,] 1.1850781 1.2582286 1.3208842 #>  [466,] 0.6464114 0.6551757 0.6683299 #>  [467,] 0.6123440 0.6185293 0.6211592 #>  [468,] 0.9032457 0.9178722 0.9259254 #>  [469,] 1.0744012 1.0937510 1.0975716 #>  [470,] 1.4357354 1.4376833 1.4517825 #>  [471,] 1.4451279 1.4479372 1.4656745 #>  [472,] 1.0498525 1.0537713 1.0992422 #>  [473,] 0.6616665 0.6650388 0.6697001 #>  [474,] 0.6485260 0.7466120 0.7516992 #>  [475,] 0.5774320 0.6210192 0.6235280 #>  [476,] 1.0644415 1.0862717 1.1113589 #>  [477,] 0.7316664 0.7715127 0.7774802 #>  [478,] 0.8268478 0.8387088 0.8517275 #>  [479,] 0.7568043 0.7669529 0.7713865 #>  [480,] 0.6243520 0.6261196 0.6267955 #>  [481,] 0.5977854 0.6024681 0.6319333 #>  [482,] 0.8678105 0.8781990 0.8891272 #>  [483,] 1.3158422 1.3457326 1.3479068 #>  [484,] 0.9117465 0.9203858 0.9463826 #>  [485,] 1.0347447 1.0421586 1.0603182 #>  [486,] 0.5162347 0.5651105 0.5850598 #>  [487,] 0.7248135 0.7573950 0.7737482 #>  [488,] 0.5860136 0.5995073 0.6001240 #>  [489,] 0.7799218 0.8064655 0.8572411 #>  [490,] 0.5398385 0.5815915 0.6507910 #>  [491,] 1.1991350 1.2266487 1.2499107 #>  [492,] 1.7764893 1.7978529 1.8314241 #>  [493,] 1.3547577 1.3598384 1.3801995 #>  [494,] 0.8092965 0.8200106 0.8454222 #>  [495,] 0.7555418 0.7676658 0.7689899 #>  [496,] 0.8296645 0.8392597 0.8802704 #>  [497,] 0.9978232 1.0120039 1.0976526 #>  [498,] 0.5316107 0.5941175 0.5974070 #>  [499,] 0.6242892 0.6638581 0.6700194 #>  [500,] 0.9731824 1.0135963 1.0173753 #>  [501,] 0.7245011 0.7289844 0.7568721 #>  [502,] 0.5348271 0.5634024 0.5748955 #>  [503,] 0.7067659 0.7236569 0.7287535 #>  [504,] 1.4655879 1.4958995 1.5020251 #>  [505,] 0.4694917 0.4735463 0.4821654 #>  [506,] 1.7214508 1.7408918 1.8096273 #>  [507,] 0.6291220 0.6338639 0.6543396 #>  [508,] 0.9526813 0.9962653 1.0353847 #>  [509,] 0.5424332 0.5762535 0.6304807 #>  [510,] 0.7271593 0.7555221 0.7607862 #>  [511,] 0.6399055 0.6795020 0.7132861 #>  [512,] 0.6321622 0.6350742 0.6785883 #>  [513,] 0.7272689 0.7273857 0.7544028 #>  [514,] 0.9559485 0.9725886 1.0274634 #>  [515,] 0.5359727 0.5868550 0.5884079 #>  [516,] 0.7654560 0.7699362 0.7803677 #>  [517,] 1.0287029 1.0452668 1.0595974 #>  [518,] 0.5260683 0.5493533 0.5575548 #>  [519,] 1.3354119 1.3603343 1.3623790 #>  [520,] 1.4500009 1.4687641 1.5026535 #>  [521,] 0.6947013 0.7220266 0.7229896 #>  [522,] 0.5813948 0.5938262 0.6003125 #>  [523,] 0.9715095 0.9747171 0.9801391 #>  [524,] 0.9559485 0.9637463 0.9790078 #>  [525,] 1.2024121 1.2038515 1.2656031 #>  [526,] 0.6888105 0.6949225 0.7213451 #>  [527,] 0.6742786 0.7050020 0.7537362 #>  [528,] 0.6533656 0.6802713 0.6860174 #>  [529,] 1.0030132 1.0147527 1.0412560 #>  [530,] 0.9012313 0.9061559 0.9422948 #>  [531,] 0.6517317 0.6942757 0.7001986 #>  [532,] 2.4544846 2.5498968 2.5626175 #>  [533,] 0.5245729 0.5272258 0.5348859 #>  [534,] 0.8938408 0.8960241 0.9769167 #>  [535,] 0.7281142 0.7382776 0.7443700 #>  [536,] 0.6825710 0.6829990 0.7210127 #>  [537,] 0.7818994 0.7880828 0.8445923 #>  [538,] 0.9056409 0.9168421 0.9208019 #>  [539,] 0.5248470 0.5391444 0.5483084 #>  [540,] 0.6012933 0.6453389 0.6724257 #>  [541,] 0.6247457 0.6560780 0.6646851 #>  [542,] 0.7750549 0.7899159 0.7995312 #>  [543,] 0.7445328 0.7541370 0.7857828 #>  [544,] 1.6045664 1.6208457 1.6212742 #>  [545,] 0.7940759 0.8052683 0.8135054 #>  [546,] 1.2658108 1.2721049 1.2747134 #>  [547,] 0.7520723 0.7544403 0.7953732 #>  [548,] 0.6798685 0.7317874 0.7354523 #>  [549,] 0.7028183 0.7331276 0.7679870 #>  [550,] 0.6247604 0.6388143 0.6802909 #>  [551,] 0.8077832 0.8489362 0.8719576 #>  [552,] 1.4216352 1.4377535 1.4513855 #>  [553,] 0.7783565 0.7813288 0.7823563 #>  [554,] 0.8079088 0.8559246 0.8730609 #>  [555,] 1.6766190 1.7415053 1.8154397 #>  [556,] 0.7510087 0.7940761 0.8323544 #>  [557,] 0.8312327 0.8357660 0.8362913 #>  [558,] 0.9694720 0.9780194 0.9971291 #>  [559,] 0.7857209 0.7884788 0.8238498 #>  [560,] 0.8328577 0.8348675 0.8680510 #>  [561,] 0.6362685 0.6370831 0.6674070 #>  [562,] 0.9129152 0.9322047 0.9878265 #>  [563,] 0.5986086 0.6742315 0.6758198 #>  [564,] 0.8527133 0.8617814 0.8768915 #>  [565,] 0.9774214 1.0276286 1.0565564 #>  [566,] 0.9071958 0.9141770 0.9154346 #>  [567,] 0.8276648 0.8402657 0.8429410 #>  [568,] 0.5644074 0.5671997 0.5722403 #>  [569,] 0.7527072 0.7947253 0.8186890 #>  [570,] 1.2696087 1.3088383 1.3131960 #>  [571,] 0.7480014 0.7514989 0.8013295 #>  [572,] 0.7832014 0.7838781 0.8159634 #>  [573,] 0.7443688 0.7654560 0.8420109 #>  [574,] 0.5844200 0.6028411 0.6211592 #>  [575,] 0.5294711 0.5493533 0.6029522 #>  [576,] 0.7277475 0.8009216 0.8762477 #>  [577,] 0.6655405 0.7113766 0.7117275 #>  [578,] 0.6489526 0.6559265 0.6634870 #>  [579,] 0.5968020 0.6207101 0.6260243 #>  [580,] 0.5435239 0.5687243 0.5933686 #>  [581,] 0.8924395 0.8948195 0.9056106 #>  [582,] 0.5371303 0.5463532 0.5621064 #>  [583,] 0.8551928 0.8587182 0.8709978 #>  [584,] 0.7915185 0.8173002 0.8882870 #>  [585,] 1.7046636 1.7638000 1.7741316 #>  [586,] 1.4326681 1.4765726 1.5238026 #>  [587,] 0.9387735 0.9390758 0.9572736 #>  [588,] 0.5333099 0.5345084 0.5598300 #>  [589,] 0.5618358 0.5758257 0.5835593 #>  [590,] 0.5708487 0.5932893 0.5951938 #>  [591,] 0.9954543 1.0188347 1.0233527 #>  [592,] 0.5318616 0.5360403 0.5437750 #>  [593,] 0.9392272 0.9979997 1.0088390 #>  [594,] 0.8431052 0.8727864 0.8743196 #>  [595,] 0.9301177 0.9469974 1.0790539 #>  [596,] 0.5766436 0.6375046 0.6586092 #>  [597,] 1.2544670 1.3160642 1.3221553 #>  [598,] 0.6060676 0.6138240 0.6307677 #>  [599,] 0.6477847 0.6501165 0.6773395 #>  [600,] 0.6387600 0.6456049 0.6680010 #>  [601,] 0.6757244 0.6885260 0.7019675 #>  [602,] 0.8809838 0.9446721 0.9526159 #>  [603,] 0.6214852 0.6530676 0.6706020 #>  [604,] 0.5647149 0.5843023 0.5883311 #>  [605,] 0.6955837 0.7063454 0.7124518 #>  [606,] 1.3579266 1.3664572 1.3871119 #>  [607,] 0.6926693 0.7031744 0.7185054 #>  [608,] 0.8092559 0.8527133 0.9283469 #>  [609,] 1.2627175 1.3457721 1.3664088 #>  [610,] 0.5687171 0.5750573 0.6188358 #>  [611,] 0.8479869 0.8493814 0.8659732 #>  [612,] 0.5819264 0.6357865 0.6723986 #>  [613,] 1.5738252 1.6321635 1.6898695 #>  [614,] 0.8700979 0.9227553 0.9565799 #>  [615,] 0.7840359 0.8184724 0.8248483 #>  [616,] 1.2153953 1.2163380 1.2600990 #>  [617,] 0.6101109 0.6236056 0.6266610 #>  [618,] 0.8075322 0.8229050 0.8622395 #>  [619,] 1.4856584 1.5506482 1.5551642 #>  [620,] 1.0359246 1.0567177 1.0835493 #>  [621,] 1.7764893 1.7867437 1.9503246 #>  [622,] 0.9627677 1.0144880 1.0233527 #>  [623,] 1.2324010 1.2537752 1.2542159 #>  [624,] 0.9724827 0.9861623 0.9965534 #>  [625,] 0.6839352 0.6850524 0.7101241 #>  [626,] 0.7723267 0.8772800 0.9019849 #>  [627,] 0.9688171 1.0330679 1.0412812 #>  [628,] 0.9074935 0.9169954 1.0637500 #>  [629,] 0.7183011 0.7299974 0.7371444 #>  [630,] 0.8084917 0.8164701 0.8190512 #>  [631,] 0.5429286 0.6075419 0.6176107 #>  [632,] 1.2801732 1.3713425 1.3814946 #>  [633,] 0.8484116 0.8607765 0.8657827 #>  [634,] 0.6618239 0.6904394 0.7049516 #>  [635,] 0.9017584 1.0074725 1.0696684 #>  [636,] 0.4687029 0.5082511 0.5259838 #>  [637,] 0.4722326 0.4778906 0.4802871 #>  [638,] 0.9190518 0.9983273 0.9997425 #>  [639,] 0.6165452 0.6470694 0.6747091 #>  [640,] 1.0867407 1.1184001 1.1218529 #>  [641,] 0.7003314 0.7065768 0.7545348 #>  [642,] 0.9795846 0.9844423 0.9939111 #>  [643,] 1.7594520 1.7787278 1.8331013 #>  [644,] 0.5364413 0.5751218 0.6062547 #>  [645,] 0.5065231 0.5131427 0.5256155 #>  [646,] 0.6839586 0.6953999 0.7189738 #>  [647,] 1.4280523 1.4330182 1.4436783 #>  [648,] 0.7680043 0.7961847 0.8059000 #>  [649,] 1.1075753 1.1177160 1.1791160 #>  [650,] 1.9892676 2.0083428 2.0130274 #>  [651,] 0.5282865 0.5763245 0.5920885 #>  [652,] 0.6768245 0.6985124 0.7971264 #>  [653,] 0.7157081 0.8363665 0.9175255 #>  [654,] 0.7248804 0.7506064 0.7664869 #>  [655,] 0.6115604 0.6340321 0.6647110 #>  [656,] 0.8471519 0.8587330 0.8597259 #>  [657,] 1.4216352 1.4522303 1.4615488 #>  [658,] 0.5860136 0.5879921 0.5938262 #>  [659,] 0.5927614 0.5938870 0.5952263 #>  [660,] 1.4884896 1.4922849 1.6182172 #>  [661,] 0.7050020 0.7367133 0.7370457 #>  [662,] 0.7963522 0.8125625 0.8128559 #>  [663,] 0.5813527 0.6257655 0.6323340 #>  [664,] 0.4639577 0.4658191 0.5296719 #>  [665,] 1.1004318 1.1063474 1.1481558 #>  [666,] 0.7077038 0.7282660 0.7418317 #>  [667,] 0.5948233 0.6456813 0.6744591 #>  [668,] 0.7975687 0.8058337 0.8164317 #>  [669,] 1.5411267 1.5669990 1.5712749 #>  [670,] 0.6850768 0.6918909 0.7001372 #>  [671,] 0.8314551 0.8869416 0.9154430 #>  [672,] 0.7915488 0.7983345 0.8095752 #>  [673,] 0.5973707 0.6280290 0.7206088 #>  [674,] 0.7404982 0.7479717 0.7604653 #>  [675,] 0.6501147 0.7227608 0.7303598 #>  [676,] 0.7295974 0.7343566 0.7396311 #>  [677,] 0.8073717 0.8093631 0.8240438 #>  [678,] 1.0534804 1.0743346 1.0815421 #>  [679,] 1.0247871 1.0420089 1.0504708 #>  [680,] 0.6073447 0.6244582 0.6328397 #>  [681,] 1.0089310 1.0281184 1.1316345 #>  [682,] 1.3049356 1.3221101 1.3299804 #>  [683,] 0.8145954 0.9113773 0.9322047 #>  [684,] 1.1200697 1.1262620 1.1709524 #>  [685,] 1.2288130 1.2838237 1.2873281 #>  [686,] 0.7906242 0.7976421 0.8701690 #>  [687,] 0.8521705 0.8707721 0.8917684 #>  [688,] 0.5628950 0.5665090 0.5995157 #>  [689,] 1.0882928 1.0902924 1.1701973 #>  [690,] 0.9074935 0.9470913 0.9633112 #>  [691,] 0.7549709 0.7813686 0.8525340 #>  [692,] 0.7843773 0.7853475 0.8227452 #>  [693,] 0.8330849 0.8445686 0.8961796 #>  [694,] 0.5145955 0.5168323 0.5915079 #>  [695,] 1.5028273 1.5407856 1.5804895 #>  [696,] 0.6528062 0.6933638 0.6979360 #>  [697,] 1.0552766 1.0640774 1.0759285 #>  [698,] 0.8604826 0.8710552 0.9037063 #>  [699,] 0.5816697 0.5994740 0.6566061 #>  [700,] 0.5179615 0.5367062 0.5578080 #>  [701,] 0.8358272 0.8560936 0.8609650 #>  [702,] 0.4850645 0.4862774 0.4979620 #>  [703,] 0.7643279 0.7866445 0.7942050 #>  [704,] 0.7792967 0.7795696 0.7913544 #>  [705,] 0.7166892 0.7177396 0.7214244 #>  [706,] 1.5217980 1.5499594 1.5623959 #>  [707,] 0.5112735 0.5227061 0.5244547 #>  [708,] 1.1418071 1.1967855 1.1970951 #>  [709,] 0.5781946 0.5790840 0.5840998 #>  [710,] 0.6552194 0.6645044 0.6654592 #>  [711,] 0.6092266 0.6211691 0.6403163 #>  [712,] 1.5992964 1.6395861 1.6597156 #>  [713,] 0.9423454 0.9449329 0.9460997 #>  [714,] 0.7483279 0.7494075 0.7558050 #>  [715,] 0.5858063 0.5994840 0.6389682 #>  [716,] 0.7351977 0.7407414 0.7810701 #>  [717,] 0.5786389 0.6046339 0.6715148 #>  [718,] 0.8865455 0.8996103 0.9069286 #>  [719,] 0.8209750 0.8729796 0.9121587 #>  [720,] 0.5517136 0.5805423 0.5974070 #>  [721,] 1.1459649 1.1984371 1.2791316 #>  [722,] 1.2516922 1.3036398 1.3222814 #>  [723,] 0.5371303 0.5462468 0.5547554 #>  [724,] 0.6728970 0.6773887 0.6824163 #>  [725,] 0.7217351 0.7392188 0.7643825 #>  [726,] 0.6887731 0.7267878 0.7343449 #>  [727,] 0.6166906 0.6191298 0.6224263 #>  [728,] 0.7416918 0.8627908 0.9063635 #>  [729,] 0.5025199 0.5696584 0.5762564 #>  [730,] 0.8201682 0.8462229 0.8928561 #>  [731,] 0.5723363 0.6877905 0.7264717 #>  [732,] 0.7116366 0.7213932 0.7498573 #>  [733,] 0.6159748 0.6322242 0.6460116 #>  [734,] 0.6648181 0.6924021 0.6966209 #>  [735,] 0.5321106 0.5397332 0.5839408 #>  [736,] 0.9226024 0.9428737 0.9526159 #>  [737,] 0.5307273 0.5438791 0.5611821 #>  [738,] 0.5277055 0.5767315 0.5783871 #>  [739,] 0.8539935 0.8540357 0.8599602 #>  [740,] 1.6115509 1.6484834 1.7789439 #>  [741,] 0.7189738 0.7256597 0.7900402 #>  [742,] 0.6005322 0.6107820 0.6119761 #>  [743,] 1.7168310 1.8105413 1.8159196 #>  [744,] 0.4421812 0.4423412 0.4553951 #>  [745,] 0.6001244 0.6099383 0.6120780 #>  [746,] 0.5539264 0.5598236 0.6145132 #>  [747,] 0.8659840 0.8669079 0.8856476 #>  [748,] 0.7788444 0.7846889 0.7918240 #>  [749,] 1.0644415 1.1155605 1.1487601 #>  [750,] 0.7486953 0.7649082 0.7995738 #>  [751,] 1.1620017 1.2007918 1.2025426 #>  [752,] 1.1501043 1.1541119 1.2179598 #>  [753,] 0.8022862 0.8025281 0.8175027 #>  [754,] 0.7343004 0.7352712 0.7388200 #>  [755,] 1.1858248 1.2254284 1.2777028 #>  [756,] 0.9267003 0.9469319 0.9725415 #>  [757,] 0.5944434 0.6017170 0.6767158 #>  [758,] 0.6862971 0.7012564 0.8524343 #>  [759,] 1.5414558 1.5489588 1.5886264 #>  [760,] 0.6965775 0.6982953 0.7154979 #>  [761,] 0.4797377 0.4997326 0.5051801 #>  [762,] 0.5858063 0.5986086 0.6090776 #>  [763,] 0.4842068 0.5314122 0.5468493 #>  [764,] 0.6947013 0.7073833 0.7089804 #>  [765,] 0.5987292 0.6247457 0.6442031 #>  [766,] 0.8062650 0.8630118 0.8783332 #>  [767,] 1.0387436 1.0881568 1.1010947 #>  [768,] 1.2419187 1.2540241 1.2643233 #>  [769,] 0.6504508 0.7261667 0.7599531 #>  [770,] 0.9943000 0.9993631 1.0004769 #>  [771,] 1.0854959 1.1376431 1.1389227 #>  [772,] 0.7796153 0.7880002 0.8202009 #>  [773,] 0.8035490 0.8093824 0.8164317 #>  [774,] 0.6736198 0.7314470 0.8098871 #>  [775,] 0.6486161 0.6567175 0.6616670 #>  [776,] 0.8934853 0.9842362 1.0053512 #>  [777,] 0.5782917 0.5929548 0.6165452 #>  [778,] 1.5740289 1.6004737 1.6334532 #>  [779,] 0.7218307 0.8326811 0.8495164 #>  [780,] 0.6243981 0.6265967 0.6286531 #>  [781,] 1.0625865 1.0978882 1.1047401 #>  [782,] 0.9335422 0.9488705 0.9671533 #>  [783,] 1.0566861 1.1001340 1.1138006 #>  [784,] 0.8897325 0.9929044 1.0222983 #>  [785,] 0.5911468 0.6240415 0.6314760 #>  [786,] 1.0485414 1.1174144 1.1353041 #>  [787,] 0.7798759 0.7814655 0.8810015 #>  [788,] 0.7484164 0.7531969 0.7623723 #>  [789,] 0.7871180 0.7913768 0.8107663 #>  [790,] 0.6785940 0.6883679 0.7225323 #>  [791,] 0.4796302 0.5278241 0.5400914 #>  [792,] 0.9695905 0.9724418 1.0200166 #>  [793,] 0.7799889 0.8312608 0.8436468 #>  [794,] 0.6613294 0.7184205 0.7460243 #>  [795,] 0.8224355 0.8667615 0.8679090 #>  [796,] 0.5421913 0.6116788 0.6131649 #>  [797,] 1.7785558 1.8514551 1.8827393 #>  [798,] 0.8426772 0.8443680 0.8604788 #>  [799,] 0.5577568 0.5747974 0.5748045 #>  [800,] 0.4470590 0.4489634 0.4568369 #>  [801,] 0.7616970 0.7720853 0.7912353 #>  [802,] 0.7118589 0.7846889 0.8378720 #>  [803,] 0.6685145 0.6705743 0.7243548 #>  [804,] 1.0289878 1.0650789 1.1060827 #>  [805,] 0.5721337 0.6124032 0.6136595 #>  [806,] 0.7464540 0.7960386 0.9000882 #>  [807,] 0.6071412 0.6895294 0.6956838 #>  [808,] 0.5980153 0.6030394 0.6096247 #>  [809,] 0.7346868 0.7919818 0.7939642 #>  [810,] 0.9342517 0.9362462 0.9581477 #>  [811,] 0.7910690 0.8246839 0.8459932 #>  [812,] 1.2495344 1.3415290 1.3806469 #>  [813,] 0.5610009 0.5665950 0.5720446 #>  [814,] 1.1601059 1.3000811 1.3038405 #>  [815,] 0.6416228 0.6663114 0.6784081 #>  [816,] 0.5722757 0.5821153 0.5902164 #>  [817,] 0.7373169 0.7429993 0.7952367 #>  [818,] 0.5843510 0.5846037 0.5867947 #>  [819,] 1.3708352 1.3866011 1.3943978 #>  [820,] 1.3816543 1.4567272 1.4576678 #>  [821,] 1.1214216 1.1333132 1.1944810 #>  [822,] 0.7343290 0.8168545 0.8704287 #>  [823,] 0.8863183 0.9098610 0.9456932 #>  [824,] 0.6303151 0.6554416 0.6792259 #>  [825,] 0.9561091 1.0201551 1.0622732 #>  [826,] 0.5821153 0.6170569 0.6195374 #>  [827,] 0.5487001 0.5759461 0.5773267 #>  [828,] 0.5317184 0.5832454 0.6342816 #>  [829,] 1.3524188 1.4617385 1.4666730 #>  [830,] 0.4643834 0.4710869 0.5152744 #>  [831,] 0.5607001 0.5663945 0.5849718 #>  [832,] 1.7045510 1.7137669 1.7198642 #>  [833,] 0.5646743 0.5721337 0.5903258 #>  [834,] 1.0005500 1.0187342 1.0283764 #>  [835,] 1.3887139 1.4376833 1.4938313 #>  [836,] 0.9428737 0.9554519 0.9573764 #>  [837,] 0.3899443 0.4286524 0.4345490 #>  [838,] 0.6202795 0.6240619 0.6535807 #>  [839,] 0.7727167 0.8269810 0.8681252 #>  [840,] 1.1300088 1.1747184 1.2185179 #>  [841,] 1.0139694 1.0143534 1.0214576 #>  [842,] 0.6047703 0.6121929 0.6250433 #>  [843,] 0.8980097 0.9243237 0.9991409 #>  [844,] 1.0745483 1.0959159 1.1272030 #>  [845,] 0.5399201 0.5679500 0.5695168 #>  [846,] 1.8123285 1.8423700 1.8493462 #>  [847,] 0.9286348 0.9503427 0.9541965 #>  [848,] 0.8040089 0.8660309 0.9244436 #>  [849,] 1.9971270 2.0037577 2.0261146 #>  [850,] 0.9573764 0.9866492 1.0716750 #>  [851,] 0.6969706 0.6998450 0.7061825 #>  [852,] 1.9145517 1.9758946 2.0307313 #>  [853,] 0.8793358 0.8986674 0.9053621 #>  [854,] 0.7449617 0.7515061 0.7607862 #>  [855,] 1.0723498 1.0732380 1.0751088 #>  [856,] 1.3892987 1.4415655 1.4940642 #>  [857,] 0.7966304 0.8281201 0.8359309 #>  [858,] 0.6079206 0.6086968 0.6658933 #>  [859,] 0.8205086 0.8418324 0.8696175 #>  [860,] 0.5665090 0.5929548 0.6366962 #>  [861,] 1.0438089 1.1374661 1.1765667 #>  [862,] 0.7195300 0.7537328 0.7892973 #>  [863,] 0.6951077 0.7042646 0.7154132 #>  [864,] 0.8502922 0.8702995 0.8957210 #>  [865,] 0.6490685 0.6557040 0.6685501 #>  [866,] 0.8268478 0.8374577 0.8516288 #>  [867,] 0.6159683 0.6301182 0.6504246 #>  [868,] 0.9800766 0.9827477 0.9876503 #>  [869,] 1.4635314 1.4721848 1.4997918 #>  [870,] 0.7450960 0.8092195 0.8094063 #>  [871,] 0.9366343 0.9387556 0.9576366 #>  [872,] 0.5359727 0.5508381 0.5555477 #>  [873,] 1.0684380 1.0792667 1.1032581 #>  [874,] 0.6770523 0.6824669 0.6897616 #>  [875,] 1.3529987 1.3635417 1.3706311 #>  [876,] 0.8621903 0.9081492 0.9091747 #>  [877,] 0.5516490 0.5653316 0.5720446 #>  [878,] 0.9746911 1.0087209 1.0183808 #>  [879,] 1.4132842 1.4332004 1.4905695 #>  [880,] 1.5427371 1.5468826 1.5968780 #>  [881,] 1.0693711 1.1192629 1.1407997 #>  [882,] 0.7159077 0.7357247 0.7368212 #>  [883,] 1.2038515 1.3185747 1.3343122 #>  [884,] 0.9615367 1.0053512 1.0276036 #>  [885,] 0.7062048 0.7110731 0.7194774 #>  [886,] 0.7426084 0.7546016 0.8351568 #>  [887,] 0.4438640 0.4974859 0.5305431 #>  [888,] 0.5849718 0.6017299 0.6097585 #>  [889,] 0.5716664 0.6055838 0.6486161 #>  [890,] 0.5035837 0.5627299 0.6333803 #>  [891,] 0.5779422 0.6280290 0.6460095 #>  [892,] 0.5174326 0.5327632 0.5774100 #>  [893,] 0.7392256 0.8558654 0.8835799 #>  [894,] 1.2768694 1.2890454 1.2921913 #>  [895,] 0.7560018 0.7786418 0.7953198 #>  [896,] 0.7599531 0.7742303 0.8211933 #>  [897,] 0.9239685 0.9344597 0.9635141 #>  [898,] 0.9969269 1.0545557 1.0619157 #>  [899,] 0.6908221 0.7291203 0.7376024 #>  [900,] 0.8062650 0.8305910 0.8339717 #>  [901,] 0.6220970 0.6985594 0.7008377 #>  [902,] 0.6762029 0.6769274 0.6833800 #>  [903,] 0.8108820 0.8677984 0.8948195 #>  [904,] 0.5437750 0.5639698 0.5791339 #>  [905,] 0.6740429 0.6759419 0.6883407 #>  [906,] 0.7778778 0.8792370 0.9059076 #>  [907,] 0.5927614 0.6307396 0.6330349 #>  [908,] 0.9587755 1.0125716 1.0163470 #>  [909,] 1.5141723 1.5974236 1.6134405 #>  [910,] 0.9141210 0.9164829 0.9176712 #>  [911,] 0.6880800 0.6986113 0.7127933 #>  [912,] 1.4444820 1.4502124 1.4553155 #>  [913,] 0.8403710 0.8828920 0.8846956 #>  [914,] 1.0507684 1.0537854 1.0754176 #>  [915,] 1.1984993 1.2483776 1.2565435 #>  [916,] 1.4595947 1.4937816 1.5251722 #>  [917,] 0.8233872 0.8268737 0.8534558 #>  [918,] 0.9043502 0.9168565 0.9349560 #>  [919,] 0.7568906 0.7797080 0.8112823 #>  [920,] 0.9173411 0.9406015 0.9642407 #>  [921,] 0.6356741 0.6386784 0.6424788 #>  [922,] 0.8957038 0.9411100 0.9576381 #>  [923,] 0.6914209 0.7212612 0.7274091 #>  [924,] 0.6862046 0.6898385 0.7840658 #>  [925,] 0.6800460 0.7279119 0.7368044 #>  [926,] 0.7356470 0.7360317 0.7820120 #>  [927,] 0.7417554 0.7446827 0.8035295 #>  [928,] 1.1296310 1.1430003 1.1474132 #>  [929,] 0.6549563 0.6569516 0.6705522 #>  [930,] 0.9440703 0.9510543 0.9736721 #>  [931,] 0.7086101 0.7161175 0.7370196 #>  [932,] 0.9264478 0.9323178 0.9395241 #>  [933,] 0.6962652 0.7034326 0.7082099 #>  [934,] 1.4281120 1.4576700 1.4670207 #>  [935,] 1.0604460 1.0912592 1.0925606 #>  [936,] 0.7268802 0.7287145 0.7443112 #>  [937,] 0.5245042 0.5254687 0.5343068 #>  [938,] 0.7380738 0.7492484 0.7509731 #>  [939,] 0.5693001 0.5708216 0.5763245 #>  [940,] 0.8704060 0.8867678 0.8969031 #>  [941,] 0.7503863 0.7507721 0.7730170 #>  [942,] 0.5816653 0.5879921 0.5964014 #>  [943,] 0.6441258 0.6872196 0.7675890 #>  [944,] 1.7695202 1.7884230 1.7938976 #>  [945,] 0.5882969 0.5967464 0.5976957 #>  [946,] 0.5227061 0.5739475 0.5786481 #>  [947,] 0.8486106 0.9265314 0.9402774 #>  [948,] 0.6655646 0.6840561 0.7114929 #>  [949,] 0.6853655 0.6905432 0.7166093 #>  [950,] 0.6491127 0.7050691 0.7238575 #>  [951,] 0.7355914 0.7381938 0.7422253 #>  [952,] 0.5779422 0.5909049 0.5978957 #>  [953,] 1.2274522 1.2416885 1.2487966 #>  [954,] 0.4805084 0.5143248 0.5327632 #>  [955,] 0.8515305 0.8596268 0.8764111 #>  [956,] 0.6689220 0.6817458 0.7004988 #>  [957,] 0.8191692 0.8370893 0.8509869 #>  [958,] 0.8623002 0.8648860 0.9226723 #>  [959,] 0.6732199 0.6775373 0.6947535 #>  [960,] 0.6825740 0.7216127 0.7238575 #>  [961,] 0.9460329 0.9751658 0.9831126 #>  [962,] 1.3107849 1.3129108 1.3231609 #>  [963,] 0.9978232 1.0351533 1.0748506 #>  [964,] 1.1705780 1.1909662 1.2689788 #>  [965,] 1.0524301 1.1040370 1.1172149 #>  [966,] 0.6078389 0.6162639 0.6300773 #>  [967,] 0.7519860 0.7611250 0.7684586 #>  [968,] 1.1732090 1.1762244 1.2143398 #>  [969,] 0.7555418 0.7609337 0.7698207 #>  [970,] 1.5968780 1.7562467 1.7634687 #>  [971,] 0.8558654 0.8598583 0.8678247 #>  [972,] 0.7463311 0.7506119 0.7922344 #>  [973,] 0.9260244 0.9267114 0.9357264 #>  [974,] 0.9233935 0.9415459 0.9596564 #>  [975,] 0.5607125 0.5634157 0.5713032 #>  [976,] 0.7997401 0.8171852 0.8961796 #>  [977,] 1.0435977 1.1942189 1.3076839 #>  [978,] 1.3335865 1.3619087 1.3788751 #>  [979,] 0.6616665 0.6672065 0.6959621 #>  [980,] 1.2423050 1.2671355 1.3331754 #>  [981,] 0.6145132 0.6623714 0.6625598 #>  [982,] 1.2670553 1.2776325 1.2940034 #>  [983,] 1.5656745 1.5910679 1.6145657 #>  [984,] 1.3326607 1.3743000 1.3787750 #>  [985,] 1.4792314 1.4997808 1.5116701 #>  [986,] 0.7326718 0.7490682 0.7818524 #>  [987,] 0.4975852 0.5248470 0.5380853 #>  [988,] 1.2096967 1.2663743 1.2982647 #>  [989,] 1.1937493 1.2420866 1.2443530 #>  [990,] 1.2855663 1.2952427 1.3517510 #>  [991,] 0.4795341 0.4932264 0.4960293 #>  [992,] 0.9738282 0.9875525 0.9888293 #>  [993,] 1.1069481 1.2446370 1.3268957 #>  [994,] 0.8123566 0.8483421 0.8637642 #>  [995,] 0.6747370 0.6827207 0.6938718 #>  [996,] 0.6395535 0.6464631 0.6477561 #>  [997,] 0.9366343 0.9840882 0.9952524 #>  [998,] 0.9022867 0.9109769 0.9271888 #>  [999,] 0.7775083 0.8238705 0.9161456 #> [1000,] 0.4806928 0.5450156 0.5482157 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure CyTOF panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) CyTOF panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   rsplit_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `rsplit_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample  cd45 pstat5  cd34 outcome class  multiclass event time_to_event #>    <chr>  <dbl>  <dbl> <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 79     0.775 0.0614 0.817    1.10 class2 class3         1         12.5  #>  2 84     0.749 0.646  0.453    3.94 class1 class3         1          8.40 #>  3 44     0.825 0.233  0.563    4.78 class1 class2         1         12.7  #>  4 40     0.610 0.125  0.733    2.09 class2 class2         1          9.86 #>  5 28     0.646 0.977  0.136    4.24 class1 class1         0          9.97 #>  6 73     0.233 0.524  0.517    3.00 class2 class3         1          8.82 #>  7 21     0.687 0.381  0.379    4.69 class1 class1         0          9.87 #>  8 66     0.278 0.351  0.564    2.65 class2 class3         1          7.18 #>  9 41     0.989 0.695  0.606    4.81 class1 class2         1          9.06 #> 10 77     0.514 0.0869 0.200    1.98 class2 class3         1          7.83 #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>               cd45       pstat5        cd34 #>   [1,] -1.03309822  1.237595940  0.72367324 #>   [2,] -0.91733596  0.970579125 -0.83166507 #>   [3,] -0.61111274 -0.690989625 -1.12370496 #>   [4,] -0.72249262  0.948092938 -1.14062031 #>   [5,] -0.78787109  1.043686822  1.78690825 #>   [6,]  1.33294039 -0.018172669 -0.28149944 #>   [7,]  1.46806683 -0.928786055 -0.62163274 #>   [8,]  1.72784575 -1.263540534 -0.18207122 #>   [9,]  0.60234880 -0.079850577  0.01471264 #>  [10,] -0.90754630 -1.416674878  0.54861160 #>  [11,] -1.22661522 -0.545534742  0.81897251 #>  [12,]  0.52873115  0.365961613 -0.08294140 #>  [13,]  1.38135287 -0.039960670  1.51992043 #>  [14,]  0.90850114  0.454507348  1.11362857 #>  [15,] -0.34380516  1.590803171  1.81655298 #>  [16,] -1.51207092  1.317420059 -1.23820907 #>  [17,] -0.15761891  1.546665379  1.95338846 #>  [18,] -0.93679503 -1.052727156  0.06395692 #>  [19,]  1.74169824 -0.994934780 -0.46531019 #>  [20,] -0.11863649 -0.992131794 -0.41032204 #>  [21,]  1.75140709 -0.695280386  0.12705726 #>  [22,] -0.39960575  1.193537288  1.78405869 #>  [23,]  1.10147345  0.251654159  1.06542961 #>  [24,] -1.08314545  0.135066965 -1.64511657 #>  [25,] -0.44676568  1.269331660  0.82649619 #>  [26,] -0.01244774  1.138219299  0.83880555 #>  [27,]  0.36290731 -1.035340113  0.50399183 #>  [28,]  1.37043760  0.097863717  0.19028756 #>  [29,] -0.88704418  1.533843678  1.49900059 #>  [30,]  1.27974811 -1.484321048 -0.80681043 #>  [31,]  0.48234982  0.957191033 -0.47894610 #>  [32,] -1.08937170  0.641251401 -1.12523284 #>  [33,]  1.36900136 -0.730038279 -0.81240594 #>  [34,]  0.55682422 -0.194920575  0.80921816 #>  [35,]  0.05794279 -1.207788546  0.80901321 #>  [36,]  1.29625344  0.813875571 -1.02915322 #>  [37,]  0.79909358  0.073448524  0.36082277 #>  [38,] -0.01029979  0.128499871 -1.11321147 #>  [39,]  1.13850626 -0.014245583  0.59553984 #>  [40,] -1.00159573  0.754619419  1.39718271 #>  [41,]  0.53403074  0.604052535 -0.97012634 #>  [42,] -1.01125838  0.204069322  0.20571855 #>  [43,]  1.38007258  0.014624119  0.17390851 #>  [44,] -0.97718928  1.258184731 -1.38215539 #>  [45,] -1.03479896 -1.095384337  0.64154846 #>  [46,] -0.28027277 -0.199688231 -0.18319338 #>  [47,] -0.95881647 -1.358921539 -0.44883194 #>  [48,] -1.43469344 -1.263999184  1.16424770 #>  [49,] -0.37678824  1.337720142  0.14657059 #>  [50,]  1.68424477 -1.087822207 -1.19981720 #>  [51,] -1.44654053 -0.236088653 -0.54761850 #>  [52,] -0.30992885  1.570879872 -1.70351405 #>  [53,]  0.75908125 -1.391153684 -0.63560832 #>  [54,]  0.46898389 -1.383604839 -1.71768802 #>  [55,] -0.89148911  1.576054752 -0.11334224 #>  [56,] -0.56450783  1.643902252  0.26551721 #>  [57,] -1.01065055 -0.323384214 -1.08276588 #>  [58,]  0.25071517 -0.620062744 -1.38124506 #>  [59,] -1.33189739  0.495591357  0.24226566 #>  [60,]  1.69376020 -0.599506960 -1.04893296 #>  [61,] -0.75696525 -0.231073615 -0.88489186 #>  [62,]  0.27075350 -0.368463402 -1.36179084 #>  [63,] -1.48538203 -1.264696694  1.20827725 #>  [64,]  0.77469979 -1.063699195  1.75911582 #>  [65,]  1.59154505  1.266351409 -0.34980062 #>  [66,] -0.36047328 -1.170409637  0.85097979 #>  [67,] -0.74465213 -0.923896020 -0.70705551 #>  [68,]  0.97578624  0.492702482 -0.75770402 #>  [69,]  1.45461456 -1.291967499 -1.46610618 #>  [70,]  0.41692280 -0.600177808 -0.17025551 #>  [71,] -0.58439429  1.649246643  1.51058456 #>  [72,]  0.46809134  0.581999858  0.46257099 #>  [73,]  0.90546536 -1.466112094 -0.61143868 #>  [74,]  0.99867273  1.352390897  1.05655798 #>  [75,] -1.17954081  1.050935197 -0.94939553 #>  [76,] -0.78758913 -1.261692349  1.74416305 #>  [77,] -0.90496507 -0.956719385 -0.56392349 #>  [78,]  0.51906607 -0.327707170 -0.18030653 #>  [79,] -0.78205942  0.517502655  1.35454202 #>  [80,]  0.25304941  1.395953718  1.46084386 #>  [81,] -0.84909519 -1.270902674 -1.11572344 #>  [82,]  0.18753926  0.335345232  0.84776765 #>  [83,] -1.43593227 -0.445222562  0.42298912 #>  [84,] -0.56878815 -1.273711026 -1.42292528 #>  [85,] -0.16001408 -0.266654513 -0.19614969 #>  [86,] -0.99726136 -0.362342043  0.14507625 #>  [87,] -0.71226739  0.506273785 -0.24402259 #>  [88,] -1.05859901  0.482007475  0.76178949 #>  [89,]  1.60565991  1.672850123 -0.50816915 #>  [90,] -1.40559547  0.162225179  0.93163325 #>  [91,] -0.89099893 -0.006730036 -0.63584621 #>  [92,] -0.22882454 -1.078920091  1.53825381 #>  [93,]  0.79172536 -0.176532172  0.92234845 #>  [94,]  1.48000485 -1.108735876 -0.27008511 #>  [95,]  1.77947590 -0.171381083 -1.11911351 #>  [96,] -1.27079585 -1.331152797 -0.80737983 #>  [97,]  0.58132645  1.376121103 -0.12964787 #>  [98,]  0.45357579  1.644780554 -1.13481742 #>  [99,] -1.13075308  1.239560202  1.67979371 #> [100,]  0.59276004 -1.531286233 -1.27405214"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  2.323214559  5.725644537  6.682036320  5.422974360  3.206566819 #>   [6]  5.603627018  2.730443166  3.949508656  3.502740763  1.973278233 #>  [11] -0.412134325 -0.003814552  4.285851036  7.260734229  3.710055825 #>  [16]  4.043474317  4.076814795  3.010817886  3.853432662  5.243040835 #>  [21]  7.709892547  1.322346531  6.843515067  2.994399391  3.470734767 #>  [26]  2.843283023  1.477093735  3.249946429 -1.259241751  1.313031023 #>  [31]  0.095379279  5.209976391  2.716686869  4.331498559  6.855272990 #>  [36]  3.130682902  6.506064101  5.228969633  3.948268291  6.437794914 #>  [41]  5.728099189  3.388604657  4.402202814  2.191642994  4.249776489 #>  [46]  7.505284116  3.525930528  3.318044033  0.197252178  0.981481225 #>  [51]  2.567296559  4.881094409 -0.452409821  2.934687217  2.562150290 #>  [56]  3.857682281  0.475722134  0.846781950  5.426052101  2.993510696 #>  [61]  2.931531273  1.223215731  3.572458036  1.823110488  4.830223955 #>  [66]  3.542912423  1.874236683  4.321990621  0.134863802  1.191207288 #>  [71]  2.008023764  2.140149152  4.888102683  2.985630113  4.529315002 #>  [76]  3.047323246  4.246734392  5.360955992  2.978576067  2.251244148 #>  [81]  4.097728089  4.758356225  0.909400633  1.721910824  2.774325558 #>  [86]  3.586800359  2.455071528  3.640434513  3.604747416  6.326080495 #>  [91]  0.658363967  3.605481610  7.978616503  3.698312461  0.723596114 #>  [96]  2.462301457  1.993104048  3.681647143  4.613404657  5.529128916"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # … with 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode CyTOF measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing CyTOF data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"      ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction  )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>      cd45    cd38    cd34   cd19 cluster_id .flowsom_metacluster #>     <dbl>   <dbl>   <dbl>  <dbl> <chr>      <chr>                #>  1  0.764 -1.01   -2.27   -0.449 i          7                    #>  2  0.398  1.64   -2.25    0.791 i          7                    #>  3  0.276  1.02    0.766   0.911 f          4                    #>  4 -2.01  -1.61   -0.0797 -0.873 z          2                    #>  5 -0.908  0.237  -0.987   1.76  l          4                    #>  6 -0.564  2.38   -1.37    0.249 m          1                    #>  7  1.58   0.453   0.252   1.24  v          4                    #>  8  0.583 -1.98    0.318   0.787 w          3                    #>  9 -0.529  0.0542  0.855  -1.76  h          6                    #> 10 -0.620 -1.91    0.653  -0.796 w          3                    #> # … with 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>      cd45    cd38    cd34   cd19 cluster_id .phenograph_metacluster #>     <dbl>   <dbl>   <dbl>  <dbl> <chr>      <chr>                   #>  1  0.764 -1.01   -2.27   -0.449 i          2                       #>  2  0.398  1.64   -2.25    0.791 i          2                       #>  3  0.276  1.02    0.766   0.911 f          3                       #>  4 -2.01  -1.61   -0.0797 -0.873 z          1                       #>  5 -0.908  0.237  -0.987   1.76  l          3                       #>  6 -0.564  2.38   -1.37    0.249 m          5                       #>  7  1.58   0.453   0.252   1.24  v          3                       #>  8  0.583 -1.98    0.318   0.787 w          2                       #>  9 -0.529  0.0542  0.855  -1.76  h          1                       #> 10 -0.620 -1.91    0.653  -0.796 w          2                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 1                      #>  2 2                      #>  3 6                      #>  4 2                      #>  5 6                      #>  6 3                      #>  7 3                      #>  8 5                      #>  9 6                      #> 10 3                      #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 5                    #>  2 3                    #>  3 3                    #>  4 3                    #>  5 3                    #>  6 2                    #>  7 2                    #>  8 3                    #>  9 3                    #> 10 2                    #> # … with 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 2                    #>  2 1                    #>  3 3                    #>  4 1                    #>  5 3                    #>  6 1                    #>  7 1                    #>  8 3                    #>  9 3                    #> 10 1                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 3                         #>  2 10                        #>  3 1                         #>  4 3                         #>  5 3                         #>  6 4                         #>  7 10                        #>  8 5                         #>  9 5                         #> 10 3                         #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 6                   #>  2 8                   #>  3 8                   #>  4 4                   #>  5 4                   #>  6 1                   #>  7 2                   #>  8 4                   #>  9 2                   #> 10 9                   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 5                       #>  2 1                       #>  3 3                       #>  4 4                       #>  5 1                       #>  6 1                       #>  7 2                       #>  8 2                       #>  9 3                       #> 10 1                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   point_alpha = 1,   theme = ggplot2::theme_bw(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `...`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (pass tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". point_alpha numeric value 0 1 set transparency (alpha) point scatterplot. theme ggplot2 theme apply scatterplot. Defaults theme_bw ... Optional additional arguments pass tof_reduce_dimensions.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         pca_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"tsne\",         tsne_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments pass ggraph","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"tof_plot_cluster_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_cluster_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"tof_plot_cluster_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... currently used.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )   # use the same layout as the plot above to color the same  # tree using a different marker  layout_cd45 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"tof_plot_cluster_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )   attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"   # create the volcano plot  volcano <- tof_plot_cluster_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(        tof_tibble = sim_data,        cluster_col = cluster_id,        group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1  4.74 #>  2  3.26 #>  3  3.59 #>  4  5.27 #>  5  1.85 #>  6  5.78 #>  7  4.79 #>  8  1.19 #>  9  3.81 #> 10  4.83 #> 11  5.32 #> 12  5.18 #> 13  2.01 #> 14  4.23 #> 15  3.74 #> 16  6.85 #> 17  5.33 #> 18  3.94 #> 19  3.89 #> 20  1.67"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw CyTOF data. — tof_preprocess","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts directly measured mass cytometer using user-provided function. can used perform standard pre-processing steps CyTOF data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector non-quoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read CyTOF data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing CyTOF data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents CyTOF measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads CyTOF data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read CyTOF data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction CyTOF data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>       cd45    cd38     cd34   cd19   .pc1    .pc2   .pc3   .pc4 #>      <dbl>   <dbl>    <dbl>  <dbl>  <dbl>   <dbl>  <dbl>  <dbl> #>  1  0.0204  1.20   -0.614    0.632  1.13   0.904   0.108 -0.468 #>  2  1.19    0.0463  0.00602  0.825 -0.474  1.42   -0.219 -0.381 #>  3 -2.35   -0.529  -1.63     0.851  1.83  -0.573  -0.776  1.94  #>  4  0.600  -0.298  -0.915   -0.685 -0.209 -0.314  -0.969 -0.859 #>  5 -0.834   0.657   0.929   -1.51   0.217 -1.61    1.13  -0.886 #>  6 -0.478   0.0844  0.612    0.891  0.207  0.588   0.674  0.687 #>  7 -0.591   2.41    0.466   -0.265  1.58   0.0523  1.54  -1.23  #>  8 -0.363   1.11   -0.479   -0.340  1.06  -0.192   0.220 -0.787 #>  9 -0.669  -1.91    1.35    -0.359 -1.46  -1.11    0.356  1.15  #> 10  0.170  -0.392   1.06     0.706 -0.673  0.652   0.630  0.475 #> # … with 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>       cd45    cd38     cd34   cd19 .tsne_1 .tsne_2 #>      <dbl>   <dbl>    <dbl>  <dbl>   <dbl>   <dbl> #>  1  0.0204  1.20   -0.614    0.632   3.65   -1.31  #>  2  1.19    0.0463  0.00602  0.825  -3.98   -0.759 #>  3 -2.35   -0.529  -1.63     0.851   1.41   -3.99  #>  4  0.600  -0.298  -0.915   -0.685  -1.00   -1.88  #>  5 -0.834   0.657   0.929   -1.51    1.88    3.31  #>  6 -0.478   0.0844  0.612    0.891   0.690   1.35  #>  7 -0.591   2.41    0.466   -0.265   4.65    0.365 #>  8 -0.363   1.11   -0.479   -0.340   2.94   -1.35  #>  9 -0.669  -1.91    1.35    -0.359  -0.500   3.56  #> 10  0.170  -0.392   1.06     0.706  -2.12    2.07  #> # … with 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>       cd45    cd38     cd34   cd19 .umap1 .umap2 #>      <dbl>   <dbl>    <dbl>  <dbl>  <dbl>  <dbl> #>  1  0.0204  1.20   -0.614    0.632 -3.29  -2.10  #>  2  1.19    0.0463  0.00602  0.825 -2.33   1.07  #>  3 -2.35   -0.529  -1.63     0.851  1.17  -2.35  #>  4  0.600  -0.298  -0.915   -0.685  3.09  -0.804 #>  5 -0.834   0.657   0.929   -1.51  -0.896 -0.260 #>  6 -0.478   0.0844  0.612    0.891  0.645  0.725 #>  7 -0.591   2.41    0.466   -0.265 -3.04  -1.05  #>  8 -0.363   1.11   -0.479   -0.340 -1.69  -1.08  #>  9 -0.669  -1.91    1.35    -0.359  2.63   1.63  #> 10  0.170  -0.392   1.06     0.706  0.351  1.65  #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on CyTOF data — tof_reduce_pca","title":"Perform principal component analysis on CyTOF data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on CyTOF data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on CyTOF data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on CyTOF data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on CyTOF data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>      .pc1   .pc2 #>     <dbl>  <dbl> #>  1  0.723 -1.58  #>  2 -2.09   0.208 #>  3 -0.794 -0.951 #>  4 -0.348  0.703 #>  5  0.123  0.315 #>  6  0.163  2.07  #>  7  0.856  1.45  #>  8  0.265  0.148 #>  9  0.113  1.08  #> 10  1.02   0.971 #> # … with 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>        PC1      PC2    PC3    PC4 #>      <dbl>    <dbl>  <dbl>  <dbl> #>  1 -0.157   0.865    0.563  0.887 #>  2  0.793   0.00327 -0.310  0.260 #>  3 -0.204  -1.38    -0.963  0.896 #>  4 -0.462  -0.0934   0.635  0.549 #>  5  0.481  -0.894    0.782  1.10  #>  6 -1.40   -0.689   -1.25   1.65  #>  7  0.941  -0.191   -0.608 -1.15  #>  8 -0.347  -0.286   -1.14  -0.233 #>  9 -0.0864  1.84    -0.638  0.567 #> 10 -0.0657  0.418    0.411  0.503 #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -0.541   8.56  #>  2   2.72    8.60  #>  3  -6.27   -4.18  #>  4  -0.192  -1.97  #>  5  -7.61   -4.53  #>  6  -3.13   -0.766 #>  7  -5.41   -5.34  #>  8   0.772  -1.66  #>  9  -0.765   6.18  #> 10  -8.14   -4.11  #> # … with 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1    5.01  -6.60  #>  2   -8.96   1.34  #>  3   -7.82  -3.16  #>  4   10.5    4.07  #>  5   -7.83  -5.34  #>  6    1.48   0.255 #>  7   -7.59  -2.81  #>  8    8.92   5.22  #>  9    2.30   1.28  #> 10   -7.86  -5.48  #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","title":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>     .umap1 .umap2 #>      <dbl>  <dbl> #>  1  6.44    8.67  #>  2  6.62    8.49  #>  3  0.113   0.172 #>  4  0.599  -3.22  #>  5 -0.474  -4.53  #>  6 -1.66    1.69  #>  7 -0.0807 -4.60  #>  8  0.102   4.26  #>  9 -3.33    2.84  #> 10  1.34    2.55  #> # … with 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -4.94    1.28  #>  2  -4.55    1.52  #>  3  -1.31   -6.57  #>  4  -1.22   -0.125 #>  5   1.18   -5.17  #>  6   1.07    0.813 #>  7   3.02   -6.55  #>  8  -0.477   1.53  #>  9   5.24    5.21  #> 10  -1.71    5.33  #> # … with 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>    UMAP1  UMAP2 #>    <dbl>  <dbl> #>  1 -4.04  3.73  #>  2 -1.26  2.29  #>  3  2.49  0.614 #>  4  4.43 -3.00  #>  5 -4.29  0.289 #>  6 -5.64  2.07  #>  7 -4.64  1.27  #>  8 -6.16  3.61  #>  9 -5.74  3.73  #> 10  3.51  1.02  #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing CyTOF data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              1 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # … with 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.7 #>  2            0.7 #>  3            0.2 #>  4            0.3 #>  5            0.4 #>  6            0.7 #>  7            0.8 #>  8            0.6 #>  9            0.6 #> 10            0.5 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            1   #>  2            1   #>  3            0.1 #>  4            0   #>  5            1   #>  6            0.4 #>  7            1   #>  8            1   #>  9            1   #> 10            1   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split CyTOF data into a training and test set — tof_split_data","title":"Split CyTOF data into a training and test set — tof_split_data","text":"Split CyTOF data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split CyTOF data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split CyTOF data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/41]> Bootstrap01 #>  2 <split [100/34]> Bootstrap02 #>  3 <split [100/32]> Bootstrap03 #>  4 <split [100/37]> Bootstrap04 #>  5 <split [100/38]> Bootstrap05 #>  6 <split [100/44]> Bootstrap06 #>  7 <split [100/37]> Bootstrap07 #>  8 <split [100/34]> Bootstrap08 #>  9 <split [100/37]> Bootstrap09 #> 10 <split [100/39]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Analysis/Assess/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)      3.54   #> 2 pstat5           1.34   #> 3 cd45             0.523  #> 4 cd34            -0.0198  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 pstat5        -0.265    #> 2 cd45          -0.107    #> 3 cd34           0.00993  #> 4 (Intercept)    0.000372  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 0 × 2 #> # … with 2 variables: feature <chr>, coefficient <dbl>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>       cd45    cd38   cd34    cd19 .upsample_cluster #>      <dbl>   <dbl>  <dbl>   <dbl> <chr>             #>  1  0.218  -1.07   -0.124 -0.410  a                 #>  2 -1.77   -1.23    0.590 -0.418  b                 #>  3  0.382  -0.409   0.267  0.770  a                 #>  4  0.0913  0.156   0.289 -0.672  a                 #>  5  0.134   0.751   0.520 -0.623  a                 #>  6 -0.258  -0.697   0.721 -0.0560 b                 #>  7 -0.225   0.380  -0.766 -0.692  a                 #>  8  0.607   0.880   0.834  0.778  a                 #>  9  0.794   0.187  -0.782 -1.09   a                 #> 10  0.0754  0.0174  1.16   0.342  b                 #> # … with 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>       cd45    cd38   cd34    cd19 .upsample_cluster #>      <dbl>   <dbl>  <dbl>   <dbl> <chr>             #>  1  0.218  -1.07   -0.124 -0.410  a                 #>  2 -1.77   -1.23    0.590 -0.418  a                 #>  3  0.382  -0.409   0.267  0.770  b                 #>  4  0.0913  0.156   0.289 -0.672  b                 #>  5  0.134   0.751   0.520 -0.623  b                 #>  6 -0.258  -0.697   0.721 -0.0560 b                 #>  7 -0.225   0.380  -0.766 -0.692  a                 #>  8  0.607   0.880   0.834  0.778  a                 #>  9  0.794   0.187  -0.782 -1.09   b                 #> 10  0.0754  0.0174  1.16   0.342  b                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 a                 #>  3 b                 #>  4 b                 #>  5 b                 #>  6 b                 #>  7 b                 #>  8 b                 #>  9 b                 #> 10 a                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 b                 #>  4 b                 #>  5 b                 #>  6 b                 #>  7 b                 #>  8 b                 #>  9 b                 #> 10 a                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 b                 #>  3 b                 #>  4 a                 #>  5 b                 #>  6 b                 #>  7 b                 #>  8 a                 #>  9 b                 #> 10 a                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 a                 #>  3 b                 #>  4 a                 #>  5 b                 #>  6 b                 #>  7 b                 #>  8 b                 #>  9 a                 #> 10 b                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write cytof data to a file or to a directory of files — tof_write_data","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""}]
