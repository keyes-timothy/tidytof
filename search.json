[{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidytof","title":"Contributing to tidytof","text":"outlines propose change tidytof. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidytof","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidytof","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidytof","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"keyes-timothy/tidytof\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidytof","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidytof","text":"Please note tidytof project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = starts_with(\"cd\"),      num_neighbors = 50L,      distance_function = \"cosine\",      method = \"phenograph\"   ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster,     metacluster_cols = starts_with(\"cd\"),     num_metaclusters = 3L,     method = \"kmeans\"   )  phenograph_clusters %>%   dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) %>%   head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 5                   2                   #> 2 H1_PhenoGraph_cluster1 5                   2                   #> 3 H1_PhenoGraph_cluster1 5                   2                   #> 4 H1_PhenoGraph_cluster1 5                   2                   #> 5 H1_PhenoGraph_cluster1 5                   2                   #> 6 H1_PhenoGraph_cluster1 5                   2 phenograph_clusters %>%    dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster1           2                    1000 #> 2 cluster3           2                    1000 #> 3 cluster2           3                     517 #> 4 cluster2           1                     483 # use the kmeans algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\"   )  # use the flowsom algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"flowsom\"   ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\",      augment = FALSE   ) %>%    head()  #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 4               #> 2 18              #> 3 4               #> 4 14              #> 5 4               #> 6 15"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"example, wanted write tidytof-style interface new clustering algorithm “supercluster”, might write something like :","code":"tof_cluster_supercluster <-    function(tof_tibble, cluster_cols, ...) {      cluster_data <- dplyr::select(tof_tibble, {{cluster_cols}})          result <-        cluster_data %>%        do_something(...) %>%        do_something_else(...)   }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"’s possible algorithm doesn’t…","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_daa","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_daa()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest","code":"daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )   significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_dea","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_dea()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_dea_* function family member: tof_dea_diffcyt tof_dea_lmm tof_dea_ttest","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     method = \"ttest\",      cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-    dea_result %>%    mutate(     log2_fc = log(mean_fc, base = 2),      log_p = -log(p_adj),      significance =        case_when(         p_adj < 0.05 & mean_fc > 1 ~ \"increased\",          p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",         TRUE ~ NA_character_       ),      marker =        str_extract(marker, \".+_\") %>%        str_remove(\"_\"),      pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")   )  volcano_data %>%    ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +    geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +    geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +   geom_point(shape = 21, size = 2) +    ggrepel::geom_text_repel(     aes(label = pair),      data = slice_head(volcano_data, n = 10L),      size = 2   ) +    scale_fill_manual(     values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),      na.value = \"#cdcdcd\"   ) +    labs(     x = \"log2(Fold-change)\",      y = \"-log10(p-value)\",      fill = NULL,      caption = \"Labels indicate the 10 most significant marker-cluster pairs\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-    phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1  -0.678  -14.0  #> 2   6.62   -12.1  #> 3  27.4     -8.24 #> 4  12.2    -20.2  #> 5   1.96   -15.5  #> 6  17.1    -13.1 phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -13.3  -10.9   #>  2  -13.2    2.57  #>  3  -36.1   -5.19  #>  4  -20.7    0.708 #>  5  -17.7   -8.45  #>  6  -25.1    8.69  #>  7  -13.7    3.98  #>  8  -32.5    3.14  #>  9  -21.7    5.16  #> 10   -7.93  -3.75  #> # … with 2,990 more rows phenograph_data %>%    tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1  5.35  -4.84  #>  2  5.66  -3.66  #>  3  4.03  -0.942 #>  4  3.23   1.29  #>  5  5.33  -5.01  #>  6  0.634  2.02  #>  7  5.32  -5.26  #>  8  2.72   0.201 #>  9  6.05   0.439 #> 10  7.29  -5.27  #> # … with 2,990 more rows  phenograph_data %>%    tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23     0.868  0.978   3.49  #>  2 -0.969  -1.02     0.787  1.22    0.329 #>  3 -2.36    2.54     1.95  -0.882  -1.30  #>  4 -3.68   -0.00565 -0.962  0.410   0.788 #>  5 -4.03    2.07     0.829  1.59    5.39  #>  6 -2.59   -0.108   -1.32  -1.41   -1.24  #>  7 -1.55   -0.651    0.233  1.08    0.129 #>  8 -1.18   -0.446   -0.134 -0.771  -0.932 #>  9 -2.00   -0.485   -0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924    0.692  1.45    0.270 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # … with 2,990 more rows # 3 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23     0.868 #>  2 -0.969  -1.02     0.787 #>  3 -2.36    2.54     1.95  #>  4 -3.68   -0.00565 -0.962 #>  5 -4.03    2.07     0.829 #>  6 -2.59   -0.108   -1.32  #>  7 -1.55   -0.651    0.233 #>  8 -1.18   -0.446   -0.134 #>  9 -2.00   -0.485   -0.593 #> 10 -0.0356 -0.924    0.692 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = phenograph_cluster   ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = cd11b   ) +    ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data %>%    dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     group_cols = phenograph_cluster,      method = \"constant\",     num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     group_cols = phenograph_cluster,      method = \"prop\",     prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-    function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {      x/from[2] * to[2]   }  phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +   scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)   ) +    labs(     fill = \"relative density\"   ) phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)     ) +    labs(     fill = \"relative density\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = function(x) quantile(x = x, probs = 0.75)   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          5.18           1.32               4.32 #> 2 patient1 BCR-XL                         5.30          -0.0186             4.70 #> 3 patient2 Basal                          5.28           1.39               4.21 #> 4 patient2 BCR-XL                         5.41          -0.0201             4.36 #> 5 patient3 Basal                          5.41           1.27               4.28 #> 6 patient3 BCR-XL                         5.42          -0.0362             4.46 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # … with 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    dplyr::left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns  ddpr_patients %>%    dplyr::select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor   # and create the time_to_event and event columns for survival modeling   dplyr::mutate(     relapse_status = as.factor(relapse_status),      time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients %>%    dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-    ddpr_patients %>%    dplyr::filter(is.na(relapse_status))  ddpr_patients <-    ddpr_patients %>%    dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-    ddpr_patients %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 10,      strata = relapse_status   )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # … with 18 more rows training_classifier_metrics <-    class_mod %>%    tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod %>%    tof_plot_model() cv_classifier_metrics <-    class_mod %>%    tof_assess_model(new_data = \"tuning\")  class_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      time_col = time_to_event,      event_col = event,      model_type = \"survival\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # … with 30 more rows survival_metrics <-    survival_mod %>%    tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # … with 51 more rows survival_mod %>%    tof_plot_model() cv_survival_metrics <-   survival_mod %>%   tof_assess_model(new_data = \"tuning\") survival_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows phenograph_data %>%    # perform preprocessing   tof_preprocess() %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # … with 2 more rows phenograph_data %>%    # preprocess   tof_preprocess(transform_fun = scale) %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows  # after preprocessing and post-processing, the data are the same  # except that the re-added noise component is different for each value  phenograph_data %>%    tof_preprocess() %>%    tof_postprocess(redo_noise = TRUE) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34   cd38 #>   <dbl>  <dbl>  <dbl> #> 1  130.  2.42   0.898 #> 2  230. -1.09  11.3   #> 3  293.  5.11   1.68  #> 4  431. -0.155 12.9   #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files \"phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class()  #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show    # that the columns have been changed   select(where(is.character))  #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # … with 296 more rows phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data() %>%    tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble  # to tof_read_data phenograph_panel <-    phenograph %>%    tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data(panel_info = phenograph_panel) %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%    # create a variable representing if a cell is above or below    # the median expression level of pstat5   mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   ) phenograph_data %>%    mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting started with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"Getting started with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied CyTOF data tof_metacluster() agglomerates clusters smaller number metaclusters tof_daa() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_dea() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"Getting started with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (%>%) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers. Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data %>%    tof_preprocess() %>%   tof_cluster(     cluster_cols = starts_with(\"cd\"), # column specification     method = \"phenograph\", # method specification,    ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster, # column specification     num_metaclusters = 4, # method specification     method = \"kmeans\" # method specification   ) %>%    tof_downsample(     group_cols = .kmeans_metacluster, # column specification     num_cells = 200, # method specification     method = \"constant\" # method specification   ) %>%   tof_plot_cells_layout(     knn_cols = starts_with(\"cd\"), # column specification     color_col = .kmeans_metacluster, # column specification     num_neighbors = 7L, # method specification     node_size = 2L # method specification   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Getting started with tidytof","text":"tidytof verbs can used combination one another using pipe (%>%) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data %>%    # step 1   tof_preprocess() %>%    # step 2   tof_cluster(     cluster_cols = starts_with(\"cd\"),      method = \"phenograph\",      #num_metaclusters = 4L,      seed = 2020L   ) %>%   # step 3   tof_downsample(     group_cols = .phenograph_cluster,      method = \"constant\",      num_cells = 400   ) %>%    # step 4   tof_reduce_dimensions(method = \"tsne\") %>%    # step 5   tof_plot_cells_embedding(     embedding_cols = contains(\"tsne\"),     color_col = .phenograph_cluster    ) +    ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"Getting started with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every CyTOF analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T (2022). tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles. R package version 0.0.0, https://keyes-timothy.github.io/tidytof.","code":"@Manual{,   title = {tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles},   author = {Timothy Keyes},   year = {2022},   note = {R package version 0.0.0},   url = {https://keyes-timothy.github.io/tidytof}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-highly-reproducible-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze Mass Cytometry Data Using Tidy Data Principles","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis high-dimensional cytometry data (.e. mass cytometry, full-spectrum flow cytometry, sequence-based cytometry). Specifically, tidytof provides easy--use pipeline handling high-dimensional cytometry data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels CyTOF data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if(!require(devtools)) install.packages(\"devtools\")  devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if(!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if(!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.1/Resources/library/tidytof/extdata/phenograph\" phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show that the columns have been changed   select(where(is.character)) %>%    head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() %>%    head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-    phenograph %>%    tof_preprocess()  # inspect new values phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Often, CyTOF experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"data(phenograph_data)  phenograph_data %>%    count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     method = \"constant\",      group_cols = phenograph_cluster,      num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     method = \"prop\",     group_cols = phenograph_cluster,      prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # make a scatterplot   ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw() phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(     density_cols = c(cd34, cd38),      target_prop_cells = 0.25,      method = \"density\",    ) %>%    ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple CyTOF runs.","code":"# when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    # create a variable representing if a cell is above or below the median    # expression level of pstat5   mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters %>%    select(sample_name, .flowsom_metacluster, everything()) %>%    head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacl… phenograph_clus…    cd19 cd11b    cd34  cd45 #>   <chr>            <chr>            <chr>              <dbl> <dbl>   <dbl> <dbl> #> 1 H1_PhenoGraph_c… 3                cluster1         -0.0336 2.46   0.608   3.96 #> 2 H1_PhenoGraph_c… 7                cluster1          0.324  0.856 -0.116   4.52 #> 3 H1_PhenoGraph_c… 3                cluster1          0.532  2.67   0.909   4.76 #> 4 H1_PhenoGraph_c… 4                cluster1          0.0163 2.97   0.0725  5.15 #> 5 H1_PhenoGraph_c… 2                cluster1          0.144  2.98   0.128   4.52 #> 6 H1_PhenoGraph_c… 4                cluster1          0.742  3.41   0.336   5.71 #> # … with 19 more variables: cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, cd7 <dbl>, #> #   cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, #> #   pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, #> #   pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters %>%    count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 22 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster3           15                     436 #>  2 cluster1           5                      278 #>  3 cluster1           4                      260 #>  4 cluster2           19                     258 #>  5 cluster2           14                     242 #>  6 cluster3           8                      241 #>  7 cluster3           11                     183 #>  8 cluster1           2                      158 #>  9 cluster2           16                     157 #> 10 cluster2           20                     156 #> # … with 12 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) %>%    head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 4                    #> 2 6                    #> 3 3                    #> 4 2                    #> 5 3                    #> 6 2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-    phenograph_clusters %>%    tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1    8.65  -5.01  #> 2   14.3   -2.76  #> 3   37.0   13.4   #> 4   24.1   -0.176 #> 5   11.6   -3.47  #> 6   22.6    7.79 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = phenograph_cluster)) +    geom_point(shape = 21) +    theme_bw() +    labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = cd11b)) +    geom_point(shape = 21) +    scale_fill_viridis_c() +   theme_bw() +    labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_daa-and-tof_dea","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_daa and tof_dea","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many CyTOF users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_daa tof_dea verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = str_extract(file_name, \"patient[:digit:]\"),      stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\") daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )  significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-    dea_result %>%    tof_plot_cluster_volcano(     use_ggrepel = TRUE   )   volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition verbs operate single-cell data directly, tidytof implements functions aggregating single-cell measurements cluster- sample-level summary statistics can analyzed using variety statistical models.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing CyTOF data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, … # Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, … citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients %>%    select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor first,    # which is something we'll want for fitting the model later   # and create the time_to_event and event columns for survival modeling   mutate(     relapse_status = as.factor(relapse_status),      time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-    ddpr_patients %>%    dplyr::filter(cohort == \"Training\")   ddpr_validation <-    ddpr_patients %>%    dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training %>%    dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-    ddpr_training %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 5,      strata = relapse_status   )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN6           5.62      0.550    0.00374    0.622       2.86     0.342 #> 6 UPN9          15.6       0.446    0.0445     0.163       2.86     0.434 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN7           0.474      0.966   0.124       1.24       2.59     0.243 #> 2 UPN8           0.951      0.958   0.161       0.556      3.18     0.556 #> 3 UPN12          0.0565     0.185   0.0115      0.142      2.49     0.254 #> 4 UPN24          0.0989     0.196   0.0198      0.210      2.36     0.382 #> 5 UPN26          0.390      0.650   0.00157     0.622      2.81     0.684 #> 6 UPN27          0.563      1.07    0.00276     0.712      2.40     0.411 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-    training_split %>%    tof_train_model(     predictor_cols = contains(\"Pop2\"),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = tof_create_grid(mixture_values = 1),      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-05  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # … with 15 more rows class_predictions <-    class_mod %>%    tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions %>%    dplyr::mutate(     truth = ddpr_validation$relapse_status   ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-    class_mod %>%    tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # … with 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod %>%    tof_plot_model() +    labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-    class_mod %>%    tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod %>%    tof_plot_model(new_data = ddpr_validation) +    labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. details design principles, check Getting Started tidytof vignette","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path %>%    # step 1   tof_read_data() %>%    # step 2   tof_preprocess() %>%    # step 3   tof_cluster(method = \"phenograph\") %>%   # step 4   tof_downsample(     group_cols = .phenograph_cluster,      num_cells = 100,     method = \"constant\"    ) %>%    # step 5   tof_reduce_dimensions(perplexity = 50, method = \"tsne\") %>%    # step 6   tof_plot_cells_embedding(     embedding_cols = starts_with(\".tsne\"),     color_col = .phenograph_cluster   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for flowSet as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang .data, := tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1/5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    1.10  #> 2 mae    0.810 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster CyTOF data. — tof_cluster","title":"Cluster CyTOF data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster CyTOF data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster CyTOF data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>       cd45    cd38   cd34    cd19 .kmeans_cluster #>      <dbl>   <dbl>  <dbl>   <dbl> <chr>           #>  1  0.169   0.0758 -1.37  -1.71   5               #>  2 -1.89   -0.741   0.679  0.123  20              #>  3  0.947  -0.891  -1.28  -0.721  18              #>  4  2.00    1.14    0.959 -0.734  8               #>  5 -0.0650 -0.712   0.773  0.678  11              #>  6 -1.50    0.719  -0.348 -0.846  20              #>  7  1.30    1.64   -0.289 -0.318  12              #>  8  0.398  -0.133   0.209  0.289  13              #>  9 -0.0533  0.455  -0.244 -0.0417 13              #> 10 -1.58   -0.0885  1.44   0.0487 1               #> # … with 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>       cd45    cd38   cd34    cd19 .phenograph_cluster #>      <dbl>   <dbl>  <dbl>   <dbl> <chr>               #>  1  0.169   0.0758 -1.37  -1.71   5                   #>  2 -1.89   -0.741   0.679  0.123  6                   #>  3  0.947  -0.891  -1.28  -0.721  2                   #>  4  2.00    1.14    0.959 -0.734  8                   #>  5 -0.0650 -0.712   0.773  0.678  1                   #>  6 -1.50    0.719  -0.348 -0.846  6                   #>  7  1.30    1.64   -0.289 -0.318  5                   #>  8  0.398  -0.133   0.209  0.289  2                   #>  9 -0.0533  0.455  -0.244 -0.0417 4                   #> 10 -1.58   -0.0885  1.44   0.0487 6                   #> # … with 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"function performs distance-based clustering CyTOF data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.distance_function_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.distance_function_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 b                    #>  2 a                    #>  3 a                    #>  4 a                    #>  5 b                    #>  6 b                    #>  7 b                    #>  8 b                    #>  9 b                    #> 10 a                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"function performs FlowSOM clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 2                    #>  2 9                    #>  3 1                    #>  4 11                   #>  5 10                   #>  6 4                    #>  7 7                    #>  8 8                    #>  9 2                    #> 10 7                    #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"function performs k-means clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 2               #>  2 16              #>  3 5               #>  4 10              #>  5 5               #>  6 16              #>  7 4               #>  8 2               #>  9 6               #> 10 5               #> # … with 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 17              #>  2 4               #>  3 2               #>  4 20              #>  5 19              #>  6 18              #>  7 18              #>  8 9               #>  9 5               #> 10 19              #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering CyTOF data using user-specified selection input variables/CyTOF measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 3                   #>  2 1                   #>  3 3                   #>  4 7                   #>  5 1                   #>  6 3                   #>  7 4                   #>  8 4                   #>  9 7                   #> 10 6                   #> # … with 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 10                  #>  2 4                   #>  3 3                   #>  4 9                   #>  5 8                   #>  6 6                   #>  7 12                  #>  8 6                   #>  9 1                   #> 10 13                  #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # … with 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # … with 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_daa_*` function family: tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"tof_daa(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_daa_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tibble nested tibble containing differential abundance results chosen method. See tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"tof_daa_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"tof_daa_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"tof_daa_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_dea_*` function family: tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"tof_dea(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_dea_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tibble nested tibble containing differential abundance results chosen method. See tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"tof_dea_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"tof_dea_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"tof_dea_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data. — tof_downsample","title":"Downsample CyTOF data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>      cd45    cd38   cd34    cd19 cluster_id #>     <dbl>   <dbl>  <dbl>   <dbl> <chr>      #>  1 -0.751  0.176  -0.163  0.0145 k          #>  2 -0.936 -0.0406  0.459 -0.0936 x          #>  3 -0.913 -0.266   0.502  0.0926 l          #>  4 -0.306  1.21    0.189  1.37   e          #>  5  0.203  0.279   1.47  -1.77   s          #>  6  0.759 -1.30    1.06  -0.917  q          #>  7  0.357 -1.19    0.403 -0.785  e          #>  8 -1.72  -0.544  -0.452  1.98   i          #>  9  0.183  1.20   -1.11  -0.897  u          #> 10 -1.43   0.782  -1.75  -0.299  p          #> # … with 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>      cd45   cd38    cd34   cd19 cluster_id #>     <dbl>  <dbl>   <dbl>  <dbl> <chr>      #>  1 -0.310 -1.02  -0.611  -1.15  d          #>  2  0.652  0.961 -0.655   1.41  t          #>  3  0.409 -1.40  -0.894   0.703 s          #>  4 -0.536 -0.411  2.25    1.31  j          #>  5 -0.418 -1.11   1.19   -0.807 c          #>  6 -0.398 -0.638  0.839   0.689 s          #>  7  0.940 -0.143 -1.09   -0.171 u          #>  8 -0.199  0.191  0.441   1.29  c          #>  9 -0.328 -0.140  0.0824  0.427 e          #> 10  0.702  0.321  0.449  -1.49  y          #> # … with 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 98 × 5 #>      cd45   cd38   cd34   cd19 cluster_id #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>      #>  1 -1.49   1.21  -1.57   0.629 i          #>  2 -0.306  1.21   0.189  1.37  e          #>  3 -1.52  -0.884 -0.940  0.194 w          #>  4  0.616 -0.330 -0.684  0.713 s          #>  5 -0.199 -0.221 -1.21  -1.67  s          #>  6  0.442 -0.664  1.02   1.10  l          #>  7 -1.89   1.17   0.403 -0.202 v          #>  8  1.25   0.345  0.155 -0.386 b          #>  9 -0.944 -0.177  0.399 -0.851 q          #> 10 -1.19  -0.302 -1.21   1.12  n          #> # … with 88 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 cluster_id #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>      #>  1 -0.632  0.854  1.93   0.632 o          #>  2 -0.422  0.914  0.625 -0.159 c          #>  3  1.34   0.421 -0.978 -0.227 x          #>  4  1.32   0.394  0.617 -2.32  r          #>  5  0.862 -1.53   0.475 -1.19  i          #>  6  0.131 -0.439  0.770  0.212 r          #>  7 -0.223 -1.01  -0.298  0.950 z          #>  8  0.474  2.17   2.04  -0.450 s          #>  9 -1.05   0.331 -0.864  2.26  m          #> 10 -0.335  0.620  1.03  -1.06  m          #> # … with 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>      cd45   cd38   cd34   cd19 cluster_id #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>      #>  1  0.480 -1.42  -1.24   0.905 u          #>  2  1.32   0.394  0.617 -2.32  r          #>  3  0.862 -1.53   0.475 -1.19  i          #>  4 -0.508 -0.927 -0.118  1.89  a          #>  5 -0.223 -1.01  -0.298  0.950 z          #>  6 -0.883 -0.498 -0.243  0.693 k          #>  7  0.367 -1.63  -1.01   1.37  l          #>  8  1.00   1.19   0.260 -0.677 d          #>  9  0.474  2.17   2.04  -0.450 s          #> 10  2.43   1.42   1.46  -1.13  j          #> # … with 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 494 × 4 #>       cd45   cd38    cd34    cd19 #>      <dbl>  <dbl>   <dbl>   <dbl> #>  1  1.14   -1.51  -0.923   0.780  #>  2  0.856   0.213  1.01   -0.368  #>  3  0.947  -2.89  -0.0701 -0.701  #>  4  0.0611  1.53   0.514  -0.334  #>  5  0.732   0.581  1.21   -1.15   #>  6  0.339  -1.09  -1.15    1.21   #>  7  0.228   1.79  -0.983  -0.0959 #>  8 -0.805   0.128 -1.82   -1.02   #>  9  2.30    0.204  1.36   -0.0891 #> 10  1.96    0.703  1.23   -1.61   #> # … with 484 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 196 × 4 #>       cd45   cd38    cd34    cd19 #>      <dbl>  <dbl>   <dbl>   <dbl> #>  1 -0.565  -0.139  0.900  -0.599  #>  2  0.947  -2.89  -0.0701 -0.701  #>  3  0.973  -0.100 -1.03    0.0814 #>  4  2.30    0.204  1.36   -0.0891 #>  5  1.96    0.703  1.23   -1.61   #>  6  0.713  -2.61   0.212   0.0906 #>  7  0.0656 -1.80  -0.654   0.158  #>  8  0.734  -1.77   0.179  -0.298  #>  9 -0.911  -0.889  0.813  -0.806  #> 10 -0.804   1.27   0.919   0.524  #> # … with 186 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 196 × 4 #>       cd45   cd38   cd34    cd19 #>      <dbl>  <dbl>  <dbl>   <dbl> #>  1  0.0611  1.53   0.514 -0.334  #>  2 -0.209   1.65   1.20   1.13   #>  3  0.339  -1.09  -1.15   1.21   #>  4  1.56    1.31  -0.406  1.44   #>  5  1.73   -1.05  -1.43   0.639  #>  6  2.30    0.204  1.36  -0.0891 #>  7 -0.271   1.26   0.421  0.0134 #>  8  1.21    0.428  0.363  0.999  #>  9 -1.55    0.378  1.17  -1.23   #> 10  0.496  -0.979 -0.338  0.754  #> # … with 186 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>        cd45   cd38    cd34    cd19 cluster_id #>       <dbl>  <dbl>   <dbl>   <dbl> <chr>      #>  1 -1.42     0.271 -1.77    1.68   j          #>  2 -1.16    -0.370  0.703  -0.689  o          #>  3  0.248    0.250  0.0357  0.453  d          #>  4 -0.257    1.27  -1.44   -1.72   x          #>  5  0.242   -0.181 -0.421  -0.357  h          #>  6  0.833   -0.834 -0.801  -0.138  m          #>  7 -1.51     1.88   0.244   0.706  b          #>  8  0.766   -0.646 -0.281  -0.343  n          #>  9 -0.382    0.653  0.794   0.0304 r          #> 10  0.00905 -0.473  2.04    0.289  y          #> # … with 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 88 × 5 #>        cd45    cd38    cd34    cd19 cluster_id #>       <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1  1.27    -0.530  -1.01   -0.0388 a          #>  2  0.698   -0.465  -0.650  -0.632  a          #>  3 -1.15     0.0200  0.0153  0.418  a          #>  4 -0.515    1.91    0.0649 -0.746  a          #>  5 -0.00241 -0.530   0.279   0.454  b          #>  6  0.346   -0.845  -2.06   -1.83   b          #>  7 -1.17    -1.21   -0.456  -0.275  b          #>  8  1.10     0.932   0.0673 -0.358  b          #>  9  0.649   -0.197   0.750  -0.977  c          #> 10 -1.18    -1.01   -2.38   -0.388  c          #> # … with 78 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation CyTOF data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>       cd45    cd38    cd34    cd19 .spade_density #>      <dbl>   <dbl>   <dbl>   <dbl>          <dbl> #>  1 -0.244  -0.875  -0.978   1.05            1     #>  2 -0.602  -1.39    0.249  -0.715           1     #>  3  0.0870 -1.00   -0.0822 -0.0913          1     #>  4 -0.487  -1.65    1.68   -0.683           1     #>  5  0.199   0.163   0.706  -0.513           1     #>  6 -1.76    1.33    0.291  -1.85            1     #>  7 -0.661  -2.56    2.76   -1.00            0.778 #>  8 -2.60   -0.225   0.862   1.06            1     #>  9 -0.901   1.50   -0.617  -0.114           1     #> 10  0.231   0.0409  1.11    1.11            1     #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>       cd45    cd38    cd34    cd19 .spade_density #>      <dbl>   <dbl>   <dbl>   <dbl>          <dbl> #>  1 -0.244  -0.875  -0.978   1.05              1   #>  2 -0.602  -1.39    0.249  -0.715             1   #>  3  0.0870 -1.00   -0.0822 -0.0913            1   #>  4 -0.487  -1.65    1.68   -0.683             0   #>  5  0.199   0.163   0.706  -0.513             1   #>  6 -1.76    1.33    0.291  -1.85              0   #>  7 -0.661  -2.56    2.76   -1.00              0   #>  8 -2.60   -0.225   0.862   1.06              0   #>  9 -0.901   1.50   -0.617  -0.114             0.7 #> 10  0.231   0.0409  1.11    1.11              1   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby         0.302       0.824      -0.286       0.299      -0.501 #> 2 mario         0.217      -0.388       0.456      -0.152      -0.114 #> # … with 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, #> #   `cd19@b_ct` <dbl>, `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, #> #   `cd19@c_ct` <dbl>, `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, #> #   `cd19@d_ct` <dbl>, `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, #> #   `cd19@e_ct` <dbl>, `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, #> #   `cd19@f_ct` <dbl>, `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, #> #   `cd19@g_ct` <dbl>, `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel   values #>    <chr>   <chr>      <chr>      <dbl> #>  1 kirby   a          cd45     0.302   #>  2 kirby   a          cd38     0.824   #>  3 kirby   a          cd34    -0.286   #>  4 kirby   a          cd19     0.299   #>  5 kirby   b          cd45    -0.501   #>  6 kirby   b          cd38    -0.0964  #>  7 kirby   b          cd34    -0.144   #>  8 kirby   b          cd19    -0.00305 #>  9 kirby   c          cd45     0.210   #> 10 kirby   c          cd38     0.264   #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@g_emd` `stim_cd38@g_emd` `stim_cd34@g_emd` `stim_cd19@g_e…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 kirby                  NA                NA                NA               NA #> 2 mario                  NA                NA                NA               NA #> # … with 100 more variables: `stim_cd45@n_emd` <dbl>, `stim_cd38@n_emd` <dbl>, #> #   `stim_cd34@n_emd` <dbl>, `stim_cd19@n_emd` <dbl>, `stim_cd45@c_emd` <dbl>, #> #   `stim_cd38@c_emd` <dbl>, `stim_cd34@c_emd` <dbl>, `stim_cd19@c_emd` <dbl>, #> #   `stim_cd45@t_emd` <dbl>, `stim_cd38@t_emd` <dbl>, `stim_cd34@t_emd` <dbl>, #> #   `stim_cd19@t_emd` <dbl>, `stim_cd45@a_emd` <dbl>, `stim_cd38@a_emd` <dbl>, #> #   `stim_cd34@a_emd` <dbl>, `stim_cd19@a_emd` <dbl>, `stim_cd45@m_emd` <dbl>, #> #   `stim_cd38@m_emd` <dbl>, `stim_cd34@m_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 g          cd45   stim        10.0  #>  2 g          cd38   stim         6.93 #>  3 g          cd34   stim         6.23 #>  4 g          cd19   stim         6.50 #>  5 n          cd45   stim         5.52 #>  6 n          cd38   stim         6.92 #>  7 n          cd34   stim         6.46 #>  8 n          cd19   stim         4.06 #>  9 c          cd45   stim         4.89 #> 10 c          cd38   stim         4.74 #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0416   0.0297   0.0396   0.0396   0.0257   0.0376   0.0495 #> 2 mario     0.0424   0.0485   0.0485   0.0364   0.0263   0.0303   0.0424 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0416   0.0297   0.0396   0.0396   0.0257   0.0376   0.0495 #> 2 mario     0.0424   0.0485   0.0485   0.0364   0.0263   0.0303   0.0424 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@c_jsd` `stim_cd38@c_jsd` `stim_cd34@c_jsd` `stim_cd19@c_j…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 kirby                  NA                NA                NA               NA #> 2 mario                  NA                NA                NA               NA #> # … with 100 more variables: `stim_cd45@r_jsd` <dbl>, `stim_cd38@r_jsd` <dbl>, #> #   `stim_cd34@r_jsd` <dbl>, `stim_cd19@r_jsd` <dbl>, `stim_cd45@o_jsd` <dbl>, #> #   `stim_cd38@o_jsd` <dbl>, `stim_cd34@o_jsd` <dbl>, `stim_cd19@o_jsd` <dbl>, #> #   `stim_cd45@g_jsd` <dbl>, `stim_cd38@g_jsd` <dbl>, `stim_cd34@g_jsd` <dbl>, #> #   `stim_cd19@g_jsd` <dbl>, `stim_cd45@w_jsd` <dbl>, `stim_cd38@w_jsd` <dbl>, #> #   `stim_cd34@w_jsd` <dbl>, `stim_cd19@w_jsd` <dbl>, `stim_cd45@q_jsd` <dbl>, #> #   `stim_cd38@q_jsd` <dbl>, `stim_cd34@q_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   jsd #>    <chr>      <chr>  <chr>       <dbl> #>  1 c          cd45   stim        0.658 #>  2 c          cd38   stim        0.852 #>  3 c          cd34   stim        0.775 #>  4 c          cd19   stim        0.577 #>  5 r          cd45   stim        0.757 #>  6 r          cd38   stim        0.924 #>  7 r          cd34   stim        0.645 #>  8 r          cd19   stim        0.791 #>  9 o          cd45   stim        0.736 #> 10 o          cd38   stim        0.696 #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0434   0.0394   0.0434   0.0473   0.0414   0.0355   0.0533 #> 2 mario     0.0304   0.0304   0.0183   0.0507   0.0345   0.0426   0.0325 #> # … with 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0434 #>  2 kirby   b          0.0394 #>  3 kirby   c          0.0434 #>  4 kirby   d          0.0473 #>  5 kirby   e          0.0414 #>  6 kirby   f          0.0355 #>  7 kirby   g          0.0533 #>  8 kirby   h          0.0355 #>  9 kirby   i          0.0296 #> 10 kirby   j          0.0316 #> # … with 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_thresho…` `cd34@a_thresh…` `cd19@a_thresh…` #>   <chr>                <dbl>             <dbl>            <dbl>            <dbl> #> 1 kirby                 0               0.0435            0.130           0.0435 #> 2 mario                 0.05            0.05              0               0.05   #> # … with 100 more variables: `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0      #>  2 kirby   a          cd38    0.0435 #>  3 kirby   a          cd34    0.130  #>  4 kirby   a          cd19    0.0435 #>  5 kirby   b          cd45    0.130  #>  6 kirby   b          cd38    0.0870 #>  7 kirby   b          cd34    0.0870 #>  8 kirby   b          cd19    0.130  #>  9 kirby   c          cd45    0.125  #> 10 kirby   c          cd38    0.0625 #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   rsplit_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `rsplit_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"Find k-nearest neighbors cell CyTOF dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents CyTOF measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional arguments pass RANN::nn2","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  882   70  563  933  979  281  663  491  153   544 #>    [2,]  712  559  312  182  946  338  973  728  116   641 #>    [3,]  538  875  912  988  198  558  866  389  106   490 #>    [4,]  493  742  268  619  190  191  540   97  617   635 #>    [5,]  427  794  378   45  949  191  227  119  583   555 #>    [6,]  871  674  861  796  807  314   54  322  936   551 #>    [7,]  367  733  723  714  206  538  360  262  417   404 #>    [8,]  685  251  131  184  220  275  526  436  229   848 #>    [9,]  570  115   60  834  560  434  877  965  883   687 #>   [10,]  927  802  230  741  419  529  906  551  871   744 #>   [11,]  465  395   64  531  212  911  183  754  334   441 #>   [12,]  847  294  788  627  378  430  631  680  961    45 #>   [13,]  998  917   22  180  118  786  379  908  261   257 #>   [14,]  669  466   31  888   96  353  487  428  448   503 #>   [15,]  678   90  622  366  473  296  752  164  541    82 #>   [16,]  636  943   69  587  621  941  192  376  339   402 #>   [17,]  297  886  572   54  318  796  842  711  837   674 #>   [18,]  111   80  226  805  501  412  256  893  221   143 #>   [19,]  276  334  691  682  548  515  614  754  611   827 #>   [20,]  722  597  366  918  678  926  128  164  622   989 #>   [21,]  993   53  873  200  469  723  714  452   77   404 #>   [22,]  917  261  786  118  545  925  566  831  708   104 #>   [23,]  480  425  171  249  764  787  706  860  380   468 #>   [24,]  517  153  623  302   37  778  791  985  413   725 #>   [25,]  541  171  473  468  289   23  425  759   82   951 #>   [26,]  761  771  402  381  497  546   49  708  192   840 #>   [27,]  399  990  168  752  858  364  468   55   93   939 #>   [28,]  126  145   58  416  806  941  119  177  847   574 #>   [29,]  874  675  695  533  826  569  346  581  862   612 #>   [30,]  403  767   36  440  265  689  827  243  148   995 #>   [31,]  518  487  303  448  643  210  911  323  185   827 #>   [32,]  698  197  734  134  822  711  253  833  731    78 #>   [33,]  807  103  905  861  654  497  573  311  170   796 #>   [34,]  446  411  304  259  959  453  727  405  968   288 #>   [35,]  442  819  634  738  763  193  792  248  429   484 #>   [36,]  204   30  767  403  440  995  218  909  579   414 #>   [37,]   70  623  153    1  886  882  837  297   17   933 #>   [38,]  110  492  688  107   89  478   60  286  834   350 #>   [39,]  363  539  282  700   62  320  604  630  368   484 #>   [40,]  737  270  564  969  864  390   87  836  632    48 #>   [41,]  105  638  375  398  736  550  937  428  524   516 #>   [42,]  441  775  672  682  754   84  323  483  334   341 #>   [43,]  475  768  579  234  289  787  388  585  279   326 #>   [44,]  130  857  849  277  782  279  606  874  335   974 #>   [45,]  378    5  358  227  867  119  794  285  847    12 #>   [46,]  985  684  302  910   37  842  841  486  291   345 #>   [47,]  331  756   67  258  844  237  384  574  769   295 #>   [48,]  463   87   91  554  599  199   40  774  878   568 #>   [49,]  676  381  217   52  402  832   26  322  151   241 #>   [50,]  274  320  113  142  143  382  805  388  475   850 #>   [51,]  940  729  150  255  805  481  226  511  804   815 #>   [52,]  676  865  840  656  322  187  292   49   89   217 #>   [53,]  200  811  227  612  377  298  723   77  575   469 #>   [54,]  796  318  674  187  886  322   17  807   72     6 #>   [55,]  858  603  537  739  535  327  512  576  990   718 #>   [56,]  313  391  868  802  961  813  885  424  443   464 #>   [57,]  719  166  808  140  709  272  908  542  447   928 #>   [58,]  941  145  806  943  177   28  621  285  126   867 #>   [59,]  401  407  273 1000  792  431  950  528  992   819 #>   [60,]  492  834   38  570  110  688  144  437  883   350 #>   [61,]  797  575  660  141  860  605  811  233  101   186 #>   [62,]  368  585  361  282   39  248  700  429  973   363 #>   [63,]  568  467  757  609  131  878  112  552  184   554 #>   [64,]   11  465  803  212  395  531  703  334  911   183 #>   [65,]  873  452  739  362   83   21  921  816  156   577 #>   [66,]  625  716  412  455  829  476  109  856  237   735 #>   [67,]  258  701  574  844  769  177  123   47  989   540 #>   [68,]  552  945  704  112  127  609  884  758  467   977 #>   [69,]   16  636  943  502   49  402  494  566  241   397 #>   [70,]    1   37  882  933  274  837  142  979  663   281 #>   [71,]  500  979  486  689  544  274  451  143  805   789 #>   [72,]  497  187  322  381  840   54  676   52   26   674 #>   [73,]  240  663  841  519  882  345   94  601  563   979 #>   [74,]  342  607  948  938  284  992  931  372  357   549 #>   [75,]  179  213  846  644  458  957  755  981  385   225 #>   [76,]  838  173  424  846  479  136  634  386  632   699 #>   [77,]  315  472  897  377  396  679  770  470  404   133 #>   [78,]  822  698   32  197  292  833  915  134  884   935 #>   [79,]  175  489  169  668  610  365  574   28   97   237 #>   [80,]  893  501   18  111  221  256  143  549  805   226 #>   [81,]  531  435  183  395  532  550  937  748  428   536 #>   [82,]  380  616  706  692  215  296  335  960  400   321 #>   [83,]  421   65  825  452  578  577  383  362  873   102 #>   [84,]  584  801  323  448  754  775  243  212   42   420 #>   [85,]  956   32  915  720  202  155  988  389  875   755 #>   [86,]  277  594  849  924  576  206  377  612  857   233 #>   [87,]   88   48  855   40  667  870  969  463  537   737 #>   [88,]   87  969  667  106  599  912  898  963  855   537 #>   [89,]  522   38  591  207  286  834  688  144  492   110 #>   [90,]  215  622   15  380   82  141  678  706   93   164 #>   [91,]  774  463  245  828  290   48  707  999  996   825 #>   [92,]  891  262  554  923  199  993  362  714  526   452 #>   [93,]  990  816   27  858  168  349  577  512  752   622 #>   [94,]  240  485  785   73  519  663  588  922  820   563 #>   [95,]  319  647  929  875  650  988  558  231  338   632 #>   [96,]  880  888  456  300  104  987  516  202  591   428 #>   [97,]  169  540    4  593  126  493  735  170  574   246 #>   [98,]  317  330  461  821  790  652  801  713  223   780 #>   [99,]  482  791  596  333  725  651  562  114  336   453 #>  [100,]  534  954  772  588  152  451  724  153  979   808 #>  [101,]  974  860  753  400  594  849  279  797  616   130 #>  [102,]  666  421  235  590  436  721  370  214  220   376 #>  [103,]  905  705   33  190  311  807  964  742  654   159 #>  [104,]  257  545   96  987  516  731  398  698  197   202 #>  [105,]   41  977  398  375  467  257  638  736  878   843 #>  [106,]  912  969  898  343  181  603  417  390  963   558 #>  [107,]  478  586   38  790  821  492  189  110  317   350 #>  [108,]  699  830  677  743  225  464  239  710  385   763 #>  [109,]  625  765  481  135  971  619  735    4  190   455 #>  [110,]  688  492   38  437  821  478   60  107  144   793 #>  [111,]   18   80  226  805  501  412  893  143  256   221 #>  [112,]  552   63  609  467  981   68  945  184  131   568 #>  [113,]  274  673  142  491   50  382  652  330  872    70 #>  [114,]  543  506  127  589  704  161  333   99  310   596 #>  [115,]  639  570    9  834  188  207  904  194  746    60 #>  [116,]  879  728  973  559  509  182    2  957  700   338 #>  [117,]  186  580  860  753  101  797  659  974  980   484 #>  [118,]  786  925  589   22  140  708  917  104  545   822 #>  [119,]   45  427    5  126   12  378  631  847  930   416 #>  [120,]  863  747  717  990  349  921   55  818  249   168 #>  [121,]  628  626  726  890  894  942  406  261  831   661 #>  [122,]  643  845  223  210  780  579  673  185  420   793 #>  [123,]  393  605   45  631  701  867   12  806  847   983 #>  [124,]  254  580  800  521  301  475  966  388  289   326 #>  [125,]  750  367  897  282  363  630  230  419  206   679 #>  [126,]   28  416  145  119   97  593  777   58  941   806 #>  [127,]  884  704  543  758  900  624  506   78  945   915 #>  [128,]  245  996  678  926  816  707  535  858  718   512 #>  [129,]  903  654  246  170  392  546  567  306  152   693 #>  [130,]   44  514  849  974  279  857  277  371  400   335 #>  [131,]  184    8  848  220  685   63  251  851  758   554 #>  [132,]  214  376  337  996  707  721  621  309  167   362 #>  [133,]  679  738  315  897  472   77  404  230  899   715 #>  [134,]  734  253  292  197   32  731  698  217  322   822 #>  [135,]  976  919  481  971  556  109  729  617  625   226 #>  [136,]  386  866  715  650  923  929  173  479  558   891 #>  [137,]  472  315  404  470  679  479  195   77  634   133 #>  [138,]  955  291  418  892  394   46  146  302  910   592 #>  [139,]  185  648  643  845  244  303  911  238  934   399 #>  [140,]  908  709  336  242  219  719  166  928  118    57 #>  [141,]  215  706   61  817  660  380  616  694  328    82 #>  [142,]  872  274  113  486   50  579   70  889  684   440 #>  [143,]  501  221  805   50  274  388  486  347  320   592 #>  [144,]  591  688  300  731   89   60  110   38  456   492 #>  [145,]  806   58  941  285  416   28  126  867  177   847 #>  [146,]  592  302  486  359  778  221  955  352  143    71 #>  [147,]  451  500  789  954  544  438  159  994  614   600 #>  [148,]  827  914  243   30  518  265  611   31  703   909 #>  [149,]  192  402  228  546   26  339  502  474  172   761 #>  [150,]  255  511  696  729  815  940  158  805  958   964 #>  [151,]  936  551  741   49  322  217  582  529  325   397 #>  [152,]  724  567  530  100  413  129  534  772  497   709 #>  [153,]  979  882    1   37   24  413  534   70  933   623 #>  [154,]  358  565  635  285  348  640  346  695  569   268 #>  [155,]  523  305  944  389  952  956  879  163  973   762 #>  [156,]  718  362  714  898  739  537  603  535  512   707 #>  [157,]  114  211  704  161  333  458  127   68  543   589 #>  [158,]  696  958  705  203  964  815  810  311  461   511 #>  [159,]  789  964  544  451  693  103  905  500  147   815 #>  [160,]  178  649  432  469  575  811   21  798  200   393 #>  [161,]  333  458  644  658  114  250  755  833  935   387 #>  [162,]  208  776  210  163  495  353  280  952  681   643 #>  [163,]  208  162  720  681  389  776  952  503  305   944 #>  [164,]  622  678  581  702  692  328  779  695  694   348 #>  [165,]  587  666  228  610   58   28   16  943  436   636 #>  [166,]  808  719   57  140  775  908  928  709   42   954 #>  [167,]  220  986  199  554  214  568  132   91  707   566 #>  [168,]  990  468   27  249  863  752  480  399  327   747 #>  [169,]   97  175  246  593  489  654  540  170  777   903 #>  [170,]  654  546  982  903  246  832  381  392   33   635 #>  [171,]   23  425  480  380  706  787   25  326  289   860 #>  [172,]  546  149  192  567   26  222  129  402  339   392 #>  [173,]  632  838  136  386  195  424  479  650   76   866 #>  [174,]  870  270  737   40  717  864   87  564  120   231 #>  [175,]  169  668  489  246   97  777   79  593  365   126 #>  [176,]  410  922  914  232  271  909  265  995  148   767 #>  [177,]  621  941  574   58  285  989  145  943  337   154 #>  [178,]  160  469  575   21  873  818  355  811  200   369 #>  [179,]  981  915  458   75  760   85  650  740  644   945 #>  [180,]  998  379   13  908  308  140  589  118  888   336 #>  [181,]  603  106  921  898  963  390  537    7  664   969 #>  [182,]  496  973  889    2  728  952  305  236  700   879 #>  [183,]  531   81  395  937  244  353  428  532  667   487 #>  [184,]  131    8  251  609  624  891  923  884  508   799 #>  [185,]  139  643  845  244  648  210  303  122  934   162 #>  [186,]  117  797  369  520  484  580  980  860  659   753 #>  [187,]  840  656   54   72  318  322   52  865  676   381 #>  [188,]  812  639  686  309  570  834  115  779  341   746 #>  [189,]  586  107  286  478   38  241  832  322  381   746 #>  [190,]  742  619  493    4  103  705  905  617  268   481 #>  [191,]  268  427  852  493  794  640    4  617    5   635 #>  [192,]  402  149  546   26  339  381  502  228  832    49 #>  [193,]  792  484  819  293  992  442  407  539  899   738 #>  [194,]  207  639  832  522  341  834  982  115  831   196 #>  [195,]  404  390  561  558  564    7  137  679  866   479 #>  [196,]  670  392  975  447  444  341  661  982  194   422 #>  [197,]  698   32  731  734  134  822  292  253   78   833 #>  [198,]  253  350  877  681    3  799  734  325  731   134 #>  [199,]  825   92  568   48  167  554  463   91  220   362 #>  [200,]  811   53  227  575   77  583  520  788  377   378 #>  [201,]  841  910  901  302   73  517  146  913   24    46 #>  [202,]  987  720  880  760  935  698  516   96  104   681 #>  [203,]  958  158  514  640  696  705  852  311  790   810 #>  [204,]   36  329  978  414  768  403  289  966  218    43 #>  [205,]  751  994  808  100  719  588  152  306  690    57 #>  [206,]  367  377    7  612  298   86  906  630  360   396 #>  [207,]  522  194  834   89  341  286  570  672  639   591 #>  [208,]  162  163  776  681  495  353  280  965  516   210 #>  [209,]  795  700  282  225  291  248  677  429  108   509 #>  [210,]  643  162  122  780  845  889  185  776  793   426 #>  [211,]  458  760  945  179  915  250   68  704  740   987 #>  [212,]  775   84  448  682  518  754  243   42   31   323 #>  [213,]  595  846  225  795  108  699  385  644  957    75 #>  [214,]  132  996  376  337  707  721  167  362  590   220 #>  [215,]  141  380   82  706  622   90  694  817  616   960 #>  [216,]  287  498  730  269  713  670  887  557  812   366 #>  [217,]  292  286  325  676   49  397  434   52  134   322 #>  [218,]  553   36  592  146  418  352  768  922  486   684 #>  [219,]  242  572  423  140  833  318  709  935  197   928 #>  [220,]  590  167    8  131  235  376  848  214   69   436 #>  [221,]  501  143  256  623  893   80  347  805  146   549 #>  [222,]  339  332  149  474  708  172  831  771  761   192 #>  [223,]  420  801   98  330  122  845  780  515  793   317 #>  [224,]  239 1000  401  950  892  284  824  795  108   209 #>  [225,]  385  509  699  957  795  108  743  209  750   116 #>  [226,]  659  729  617  511  919  481  255  111  805    80 #>  [227,]  378  200  583  298   53  612  811  377   45   520 #>  [228,]  149  777  192  587  668  402  502  316  546   264 #>  [229,]  275  391   92    8  891  184  993  445  136   923 #>  [230,]  419  899  897  738  396   10  906  927  293   938 #>  [231,]  632  564  270  864  836  390   95   40  319   561 #>  [232,]  839  510  176  410  922  910  995   36  394   218 #>  [233,]  616  328  692  874  695   86  576  849  960   581 #>  [234,]   43  388  768  585  394  414   50  579  347   142 #>  [235,]  590  102  436  220  848  421  370  666    8   131 #>  [236,]  505  633  973  630  952  363  879  496  182   664 #>  [237,]  765  625  109  489   47  540  844  976  135   384 #>  [238,]  648  263  779  939  267  934  606  139  911   883 #>  [239,]  464  108  763  699  830  813  819  442   35   401 #>  [240,]   94   73  485  519  663  882  979  785  563   922 #>  [241,]  832  286  746  189   49  325  217  346  834   533 #>  [242,]  709  840  656  865  219  187  928  761  423    52 #>  [243,]   84  485  785  448  518  212  827  148   30   775 #>  [244,]  185  139  776  353  667  162  487  643  648   869 #>  [245,]   91  774  707  996  128  463  999  828  858   939 #>  [246,]  903  654  129  170  169  546  175  777   97    33 #>  [247,]  905  727  573  968  446  246  856  129  724   654 #>  [248,]  429  881  824   62  997  209  282   35  361   795 #>  [249,]  863  480  967  747  664  963   23  168  924   717 #>  [250,]  161  658  387  333  458  344  379  755  913   935 #>  [251,]  685    8  624  184  408  741  324  131  582   151 #>  [252,]  364  920  459  307   27  532  290  773  828    93 #>  [253,]  734  134  198  731  350  292   32  197  698   144 #>  [254,]  124  966  580  289  764  171  787   43  521    23 #>  [255,]  150  511  729  696  815  940  158  958  617   805 #>  [256,]  623  645  549  501  221  629   80  143   37   573 #>  [257,]  977  398  104  375  105  560  428  467  987   516 #>  [258,]   67  844  989  701  574  177  769  597  721   331 #>  [259,]  959  446  593  727  450   34  304  411  264   618 #>  [260,]  809  634  373  513  439  355   35  881  457   369 #>  [261,]  831   22  917  494  566  536  272  542  545   560 #>  [262,]  891  923  417  526  714    7  508  558   92   993 #>  [263,]  238  939  648  779  606  581  675  535  934   883 #>  [264,]  777  316  968  668  453  651  446  228  497   593 #>  [265,]  995  914  767  909  440  210  354   30  426   889 #>  [266,]  851  758  900  502  474  624  884  251  685   582 #>  [267,]  437  323  934  492  801  110  793   60  821   883 #>  [268,]  191  493    4  640  852  617  742  635  705   427 #>  [269,]  287  670  216  730  671  907  444  823  693   498 #>  [270,]  737   40  864  231  564  174  836  632  390   561 #>  [271,]  410  662  176  922  914  785  148   94  485   820 #>  [272,]  542  831  708  709  194  928  261  207  530   447 #>  [273,]  407  637  528   59  431  792  401  299  992   659 #>  [274,]  113   50  142   70  486  143  837  933  872   382 #>  [275,]  415  229  391  370    8  993  526  324  436   788 #>  [276,]   19  611  827  548  703  334  803  515  243   691 #>  [277,]  849   86  857  924  630   44  633  130  594   974 #>  [278,]   57  682   42  166  726  395  719  465  212   441 #>  [279,]  782  753  326  130  974  787  857   44  101   849 #>  [280,]  883  965  495   60  353  437  934  208  144   681 #>  [281,]  933  491  544    1  652   70  563  113  882   673 #>  [282,]  363  750  879   39  700  125   62  973  630   209 #>  [283,]  907  462  449  619  269  765  295  683  844   557 #>  [284,]  931  342   74  527  604  607  992  677  347   549 #>  [285,]  867  358  154  941  145  621  806  177   45   565 #>  [286,]  217  746  834   89   38  676  325  189  241   207 #>  [287,]  216  269  730  498  670  671  557  366  975   823 #>  [288,]  725  629  562  405  645  527  607  573  453   549 #>  [289,]  787   43  326  782  475  579  279  585  122   768 #>  [290,]  774  828  463   91  999  435  532  245  855   920 #>  [291,]  394  604  347  700  209  138   46  234  677    39 #>  [292,]  134  217  731  197  676  734  253   52  322   698 #>  [293,]  992  938  899  193  419  819  230  792  528   763 #>  [294,]  847   12  788  415  961  324  627  806  416   930 #>  [295,]  384  556  557  331  665  817  283  907  976   498 #>  [296,]  515  321  702  541   82  713  810  335  223   606 #>  [297,]   17  572  886  842  711  601   70    1  563   318 #>  [298,]  612  377  360  723  227  826  206  906   53   770 #>  [299,]  301  407  484  273  792  193  186  401  373    35 #>  [300,]  144  456  688  591  731  110  880  197   96    89 #>  [301,]  800  299  580  585  234  753  521  484  117    62 #>  [302,]  517  146   24   46  910  841  778  201  985   684 #>  [303,]  911  518  487   31  323  754  643  611  139   185 #>  [304,]  405  727  629  446   34  959  411  259  645   607 #>  [305,]  952  155  523  944  389  879  889  163  182   973 #>  [306,]  693  653  683  994  129  903  159  449  269   751 #>  [307,]  773  459  920  648  911  939  139  752  238   364 #>  [308,]  482  336  471  589  140  786  925  118  242   908 #>  [309,]  348  812  695  188  569  565  337  989  621    29 #>  [310,]  854  506  582   78  711  596  562  822  744   529 #>  [311,]  861  958  807  705  852  203  103  158  514   640 #>  [312,]    2  712  338  620  776  559  946  697  962   162 #>  [313,]  802  961  868  680  324  741   10  230  899   627 #>  [314,]  871  853    6  371  837  850  363  956  539   674 #>  [315,]  472   77  679  470  404  133  137  897  738   396 #>  [316,]  264  777  408  228  416  668  502  582  608   402 #>  [317,]  821  793  790   98  934  780  492  437  107   110 #>  [318,]   54  423  187  656   17  478  796  865  886   840 #>  [319,]   95  647  650  836  981  231  864  632  524   929 #>  [320,]  850   50  371  347  514   39  274  130  837   539 #>  [321,]  810  296  335  702  598  887  515  400  713   382 #>  [322,]  676   54  674   72   52  187  292  134  217    49 #>  [323,]  801  754  267  437  584   84  448  303  441   934 #>  [324,]  415  802  741  294  313  788  408  961  847   770 #>  [325,]  397  877  434  217  746  286  862  350  198   253 #>  [326,]  787  782  475  279  400  753   43  289  101   860 #>  [327,]  960  692  576  706  535  380  512   55  606   233 #>  [328,]  616  233  665  695  817  335  692  565  887   581 #>  [329,]  641  962  946  204  414  916  289  712   36   909 #>  [330,]  652  461  673   98  420  801  223  780  584   491 #>  [331,]  384   47  295  769  258  844  722  756   67   665 #>  [332,]  222  471  172  708  339  149  474  831  761   308 #>  [333,]  161  658   99  114  250  458  351  814  725   644 #>  [334,]  682  754  614  441  465   19   42   84  212   323 #>  [335,]  702  400  616  887  321  810  581  328  130    44 #>  [336,]  308  140  482  242  219  709  908  719  100   166 #>  [337,]  989  132  376  721  621  214  309  177  569   996 #>  [338,]  312    2  559  163  524  116  776  991  875   988 #>  [339,]  149  222  831  192  636  402  474  502  494    69 #>  [340,]  626  465  890  628  975  926  334  894  686   441 #>  [341,]  672  522  207  422  834  196  188  492  586   194 #>  [342,]   74  284  604  677  931  853  992  938  347   607 #>  [343,]  417  898  106  603  862  675  912  599  877     3 #>  [344,]  387  345  601  354  503   73  426  519  841   547 #>  [345,]  601  344  387   73  841  684  910  663  426    46 #>  [346,]  533  640  358   29  826  746  949  154  862   189 #>  [347,]  604  320  342  853  850  221  501  291  549   143 #>  [348,]  565  309  695  154  665  812  569  989  328   635 #>  [349,]  120  818  990   93  739  577  873  816  863   747 #>  [350,]  746   38   60  198  253  862  325  107  286   110 #>  [351,]  658  333  913  901  201  791  250   99  841   510 #>  [352,]  745  359  876  592  553  955  146  418  768   778 #>  [353,]  965  428  208  280  516  162  398  776  681   883 #>  [354,]  503  991  669  163  344  426  265  914  995   208 #>  [355,]  470  469  369  472  315  137   77  921  818   178 #>  [356,]  829  615  430  627  885  649  443   12  631   961 #>  [357,]  607  549  948   74  629  555  645  744  861   450 #>  [358,]  285  154   45  346  867  378  794  640  635   565 #>  [359,]  778  352  553  146  592   71  876  745  221   955 #>  [360,]  826  655  862  784  783  490  298  723  733   526 #>  [361,]   62  997  368  641  967  585  429  409  881   248 #>  [362,]  707  156  996  452  714  825   92  537  214   718 #>  [363,]   39  630  282  539  236  633  973  879  125   700 #>  [364,]  920  459   27  828  855  245  290  463  307   774 #>  [365,]  610  170  823  574  177  670  246  942  903   169 #>  [366,]   20  678  216  926  287  164  498   15  686   722 #>  [367,]  206    7  377  125  733  897  906  630  396   538 #>  [368,]   62  924  361  585  363   39  967  753  236   630 #>  [369,]  520  811  355  472  186  575  200  583  315   470 #>  [370,]  436  590  275  806  415  235  798  294  102   123 #>  [371,]  850  514  949  974  539  320  130  852  849   794 #>  [372,]  948  744  854  927  938   74   10  710  562   551 #>  [373,]  792  401  819   35  407  443  442   59  738   369 #>  [374,]  859  747  764  120  863  249  980   23  818   717 #>  [375,]  398  516  428  736  550  965   41  878  257   560 #>  [376,]  132  337  214  621  943  590  941  721  783   285 #>  [377,]  206  612  298  367   77  396  227   86  906   594 #>  [378,]   45  227    5  794  583  358   12  847  867   298 #>  [379,]  888  987   96  908  998  669  880  935  180   202 #>  [380,]  706  960  692   82  327  425  215  622  616   141 #>  [381,]   49  832   26  497  676   72  840  982  546    52 #>  [382,]  598  815  113  330   50  652  461  274  673   696 #>  [383,]  983  578  421  370  393  798  102  436  452   701 #>  [384,]  295  331  976  556  817  665  769  557  525   283 #>  [385,]  957  509  225  743  699  750  108  116  879   795 #>  [386,]  136  715  866  679  479  923  508  929  733   404 #>  [387,]  344  345  601  755  841   73  503  910  354   985 #>  [388,]  768  475  234   43   50  805  143  876  592   940 #>  [389,]  155  952  305  944  523  163  988  912  681     3 #>  [390,]  564  969  558  195  106  181  561   40  537   647 #>  [391,]  275  445  229  424   56  386  415  802  715   313 #>  [392,]  982  196  832  170  530  444  903  422  732   654 #>  [393,]  983  701  123  605  504  984  575  769  200   631 #>  [394,]  414  291  234  839  496  700  684  592  579   486 #>  [395,]  531  183   81  483  904   11  441  560  536    42 #>  [396,]  906  897  770  230  899  733   77  377  367   206 #>  [397,]  434  325  877  217  784  783  687  862  286   655 #>  [398,]  375  428  516  257   41  736  104  105  353   965 #>  [399,]   27  752  468  963  620  139  939   55  869   648 #>  [400,]  335  616  101  782  130  326  974   44  279   321 #>  [401,]   59  792  407 1000  950  819  373  273  992   431 #>  [402,]  192  149   26  502  546   49  381  771  761   832 #>  [403,]   30  767  440   36  122  689  827  579  548   265 #>  [404,]  679  195  315  137  472   77    7  133  733   367 #>  [405,]  629  304  607  288  527  931  645  549  727   411 #>  [406,]  890  628  896  894  972  918  926  121  642   942 #>  [407,]  792  528  273   59  193  401  992  293  819   637 #>  [408,]  324  294  415  251  885  416  741  685  806   847 #>  [409,]  361  764  697  997  641  967  712  946  559   916 #>  [410,]  176  922  271  232  344  510  914   94  240   345 #>  [411,]   34  948  288  507  372  854  629  405  446   607 #>  [412,]  455  856   18  111  716  109   80  625  476   304 #>  [413,]  724  886  623  153  573  796  807   37   54   933 #>  [414,]  585  641  496  394  234  579   43   62  768   329 #>  [415,]  324  788  294  275  847  770  526  408  806   961 #>  [416,]  126  145  930  847  806  294   28  936  119   358 #>  [417,]  343  898  262  599  106    7  877  862  714   360 #>  [418,]  955  138  745  352  592  146  394  218  768   234 #>  [419,]  230  899  738  927  710  763  830  938  897   293 #>  [420,]  223  330  801  515   98  461  652  673  713   584 #>  [421,]  102  235   83  383  590  452  436  370  666   825 #>  [422,]  438  732  672  341  586  478  392  584  196   447 #>  [423,]  318  928  656  732  478  865  300  187  242   709 #>  [424,]  391  173  386  838  445   56   76  715  136   133 #>  [425,]  480   23  706  171  380  960  860  787  782   327 #>  [426,]  762  889  872  440  547  767  944  519  563   210 #>  [427,]    5  191  794  971  555  268  119  852   45   378 #>  [428,]  398  353  375  965  516  550  560   96  280   483 #>  [429,]  248  881   62  824  997  282  361  209   35   795 #>  [430,]  631   12  627  119  443  680  583  847  378   649 #>  [431,]   59  950  273 1000  893  401  284  931  407   637 #>  [432,]  932  798  649  160   21  439  178  443  627   200 #>  [433,]  946  962  697  712    2  902  312  909  995   991 #>  [434,]  397  877  325  687  217  799    9  286  198   746 #>  [435,]  532   81  828  937  290  748  646  855  638   550 #>  [436,]  370  590  235  806  275  102  220    8  685    58 #>  [437,]  267  492  110  793  934  688  495  821   60   317 #>  [438,]  422  732  584  281  461  652  789  544  478   586 #>  [439,]   21  513  432  561  173  195  355  404  178   315 #>  [440,]  767  426  889  872  579  142  995  265  684   673 #>  [441,]   42  754  323  672  267  341  334  522   84   483 #>  [442,]   35  819  738  763  193  792  897  419  133   750 #>  [443,]  868  680  961  627  899  430  313  373  819   738 #>  [444,]  670  982  196  812  341  392  635  975  188   832 #>  [445,]  391  229  424  275   56  386  885  251  136     8 #>  [446,]  727  968  453  573  959   34  259  304  645   411 #>  [447,]  196  661  422  614  392  272   42  341  672   530 #>  [448,]  775   84   31  323  518  456  801  584  212   437 #>  [449,]  683  619  895  283  481  804  190  462  765   907 #>  [450,]  618  555  735  959  593  930  357  427  119   259 #>  [451,]  147  500  789  954  159  544  534   71  994   100 #>  [452,]   65  362  873   92   21  714  825  993  156   199 #>  [453,]  651  968  446  573  596  288  727  264  497   562 #>  [454,]  896  894  406  340  121  890  626  628  926   726 #>  [455,]  856  412  109  716  625  247  765  735  489   190 #>  [456,]  300  591   96  144  888  688  483  775  880   731 #>  [457,]  178  349  160  818  859  355  374  439  469   120 #>  [458,]  915  935  161  760  644  833   85  755  179   987 #>  [459,]  920  307  828  939  364  855  999  532  774   904 #>  [460,]  471  482  308  336   99  152  488  772  589   651 #>  [461,]  652  330   98  713  810  584  420  790  491   815 #>  [462,]  283  449  295  907  653  683  765  384  619   269 #>  [463,]   91  774  290   48  828  245   87  825  855   199 #>  [464,]  239  108  830  813  699  763  710  927  419   743 #>  [465,]  340   11  334  441  682  626  754   42  395   212 #>  [466,]  914   14  354  265  776  433  669   31  487   902 #>  [467,]  878  609   63  105  757  568  748  257  977   736 #>  [468,]  752  168  399  480  541  990  327  249   27   139 #>  [469,]  355  818  178   53  575  811  873  921  470   200 #>  [470,]  472  315  137   77  355  377  404   86  367   181 #>  [471,]  308  482  332  589  336  460  708  222  925   786 #>  [472,]  315   77  137  470  679  133  404  897  355   738 #>  [473,]  541  139  752  911  611  296  773  468  515   648 #>  [474,]  771  502  900  266  925  761   26  149  402   339 #>  [475,]  326  388   43  279   50  787  782  150  400   753 #>  [476,]  637  226  919  135  971  625  109  659  273   111 #>  [477,]  660  141  919  525  817  976   61  215  556   797 #>  [478,]  586  107   38  790  110  492  821  688  317   584 #>  [479,]  929  715  866  679  838  750  137  404  125   386 #>  [480,]  425   23  249  960  706  171  327  924  380   787 #>  [481,]  729  135  109  617  619  742  190  226  556   255 #>  [482,]  308  336  242  589  596  925  471   99  761   543 #>  [483,]  560  591  456  545  522  428  536  144  395   888 #>  [484,]  193  539  753   39  520  594  368  792  442   282 #>  [485,]  785   94  240  519  243  954  588  663  563   979 #>  [486,]  684  142  274   70  592  872  663  146  882   979 #>  [487,]   31  518  303  911  643  244  185  611  448   139 #>  [488,]  247  446  968  453   34  727  460  651  573   724 #>  [489,]  169  175  765   97   79  540  246  237  283   593 #>  [490,]  655  862  538  360  508  529  733  906  871   367 #>  [491,]  281  933  652  673  113  790    1  544  330   478 #>  [492,]  110  688   38  437  821   60  478  107  267   317 #>  [493,]    4  742  268  619  191  190  617  635  705   540 #>  [494,]  566  636  831  261   69  339  757   16  167    22 #>  [495,]  280  793  437  883  934  110  208  688   60   162 #>  [496,]  889  182  579  700  872  414  236  973  952   142 #>  [497,]   72  381   26  546  840  187  761   33  651   596 #>  [498,]  730  216  557  887  287  810  269  321  600   296 #>  [499,]  795  225  116  595  728  213  824  957  429   509 #>  [500,]  451   71  147  789  544  689  979  159  815   964 #>  [501,]  221  143  256   80  893  805  623  549  347    50 #>  [502,]  474  402  900  771  582  149  266   49   26    69 #>  [503,]  669  354  720  163  880  202  208  991  344   987 #>  [504,]  984  701  769  393  983  694  577  605  141    61 #>  [505,]  633  236  630  277  857  952   44  845  363   924 #>  [506,]  582  310  608  624  543  900  127  596  854   884 #>  [507,]  411  885  813  313  948  868  608  961  854    56 #>  [508,]  526  655  733  490  923  891  784  529  360   262 #>  [509,]  385  957  225  743  750  116  879  699  282   929 #>  [510,]  232  901  910  839  387  410  841  345  344   658 #>  [511,]  255  150  696  958  852  617  729  158  805   815 #>  [512,]  718  535  327  739  694  816  858  960   55   156 #>  [513,]  634  561  137  231  838  195  355  564  404   472 #>  [514,]  203  130  371  958  850  696  852  640  320   790 #>  [515,]  296  420  713  223  321   98  810  461  598   801 #>  [516,]  681  375  965  398  736  428  353  198  104   144 #>  [517,]   24  302  791  778  623  153  725  985   37    46 #>  [518,]   31  303  487  827  611  448  911  643  212   323 #>  [519,]  563  547  663  240  882   73    1  426   94   785 #>  [520,]  583  594  227  811  369  377   77  200  396   539 #>  [521,]  835  800  580  301  124  299  980  117  186   254 #>  [522,]  207   89  834  341  672  492  591   38  688    60 #>  [523,]  155  305  944  389  952  956  879  853  363   314 #>  [524,]  740  338  843   41  647  720   95  319  875   163 #>  [525,]  759   82  556  477  295  817  498  384  215   557 #>  [526,]  508  784  655  891  733  360  262  770  723   923 #>  [527,]  931  284  342  405   74  629  725  607  288   549 #>  [528,]  407  992  293  273  193  792  583  555  659   520 #>  [529,]  490  956   10  508  741  151  655  551  134   538 #>  [530,]  567  709  656  840  732  392  242  542  928   187 #>  [531,]  395  183   81  532  904   11  435  483  536   920 #>  [532,]  435   81  828  920  290  531  459  855  937   183 #>  [533,]  346  862  826  746   29  350  360  874  783   325 #>  [534,]  100  772  954  588  153  979  451  724  882   240 #>  [535,]  718  512  327  858  675   55  156  263  939   603 #>  [536,]  560  748  483  261   81  566  904  545    9   986 #>  [537,]  898  603  969   55  156  181  417  106  390   921 #>  [538,]    3  866  490  988    7  367  558  923  508   912 #>  [539,]  594   39  363  371  974  849  484  630  277   753 #>  [540,]  574   97  844    4  493  907  154  177  268   765 #>  [541,]  473  296   25  515   82  223  468  321  782   752 #>  [542,]  272  709  928  708  831  865  207  530  656   194 #>  [543,]  589  925  127  506  114  786  900  474  771   596 #>  [544,]  281  933  789  491    1  964  652  979  159   882 #>  [545,]  591  560  104   89  731  483  144  207  566   292 #>  [546,]  192  170  381   26  402  497  149  982  172   832 #>  [547,]  563  519  762  426    1  491  663  673  882   601 #>  [548,]  598  420  515  689  403  382  223  827  321   600 #>  [549,]  607  357  256  629  623  645  931  501   74   347 #>  [550,]  667  375  965  937  428  855  353  828  398   599 #>  [551,]  936  741  151  744   10  674    6  871  529   322 #>  [552,]  758   68  112  609   63  884  945  851  127   757 #>  [553,]  359  352  218  146  592  778   71  876  302   955 #>  [554,]  599  878  687   48  799   92  568  891  877   262 #>  [555,]  930  450  794  427  618    5  191  378  357   861 #>  [556,]  817  976  557  665  135  729  328  295  887   617 #>  [557,]  730  887  498  619  742  556  665  810  907   493 #>  [558,]  390  866  647  929  969  988  923    3  875   538 #>  [559,]    2  967  973  116  664  338  879  312  620   236 #>  [560,]  483  536  545  591    9  375  428  398  104   566 #>  [561,]  921  195  564  390  181  404  969  137  632   537 #>  [562,]  854  725  288  744  842  372  711  310  596   886 #>  [563,]  547  519    1  882  663  491   70  281  933   979 #>  [564,]  390  969  231  632  561  195   40  558  270   106 #>  [565,]  695  348  154  569  309  285  989  358  665   328 #>  [566,]  494  545  434  687  194  261   69  217  115   207 #>  [567,]  530  709  152  840  656  392  242  732  542   708 #>  [568,]  878   63  554  467  199   48  167  748  757   986 #>  [569,]  695  565   29  309  867  612  348  285  154   826 #>  [570,]  834    9  115   60  746  639  522  207  188   286 #>  [571,]  201  791  778  517  302  553   24  359  901   146 #>  [572,]  297   17  711  601  318  219   32  833  886   842 #>  [573,]  645  727  968  413  905   33  446  453  623   629 #>  [574,]  844  540  177  258   67   97  365  941   58   154 #>  [575,]  811   61  200   53  469  605  797  369  227   520 #>  [576,]  327   86  960  924  233  603   55  706  512   692 #>  [577,]  816  739  984  504  873   65   93   83  983   694 #>  [578,]  383   65   83  452  873  178  983  577  160    21 #>  [579,]  496  142  889  872   43  440  767  122  414   113 #>  [580,]  117  980  860  186  753  521  124  301  800   835 #>  [581,]  702  606  874  692  263  164  675  335   29   695 #>  [582,]  900  151  506  502  310  771  624  551   72    49 #>  [583,]  520  227  378  811  680  200    5  396  794   594 #>  [584,]  801   84  330  323   98  478  652  461  437   492 #>  [585,]  414   62   43  368  234  641  496  361   39   579 #>  [586,]  478  107  189  790   38  821  732  492  110   672 #>  [587,]  165   16  228  636  943  610   69  666   58   192 #>  [588,]  954  100  534  772  485  808   94  240  785   820 #>  [589,]  543  925  786  118  308  482  708  127  771   242 #>  [590,]  436  220  235  370  376  102  214    8  666   132 #>  [591,]  144   89  456  300  688  731  522  545  483    60 #>  [592,]  146  486  768  388  143  352  234  876  221   955 #>  [593,]  735   97  169  450  959  126  618  777  259    33 #>  [594,]   86  849  974  539  101  277  520  377  206   949 #>  [595,]  795  213  225  209  677  957  108  385  644   839 #>  [596,]  651   72  310  497  562  582  453  854  761   482 #>  [597,]  722   20  918  989  721  128  258  926  337   984 #>  [598,]  382  321  815  810  461  940  548  420  330   150 #>  [599,]  417  554  343  877  799  736    3  262  198   898 #>  [600,]  691  730  598  498  789  810  693  815  147   461 #>  [601,]  345  344  572  297   73  387  547  563  519   426 #>  [602,]  937  638  435  855  646  532  667   87  870    41 #>  [603,]  898  181  343  537  106   55  417  675  156   576 #>  [604,]  347  342  853  992   39  284  320  291  931    74 #>  [605,]  631  575    5  123   45  393  811  769  378   227 #>  [606,]  581  702  874  263   44  845  692  934  675   317 #>  [607,]  549  357  629   74  931  342  405  948  645   284 #>  [608,]  506  624  582  251  854  310  741  316  408   802 #>  [609,]  467  884  945  687  184  799  736  878   63   552 #>  [610,]  365   16  943  942  587  636  177   58  574   941 #>  [611,]  827  518  303  803  911  487   31  473  276   643 #>  [612,]  298  377  723   53  227  206  826  360   86    29 #>  [613,]  452  229   92  199  235  275   65  848  825    21 #>  [614,]  691  334  447  682  422  438  147  693   84    42 #>  [615,]  356  507  885  627   56  932  443  868  961   813 #>  [616,]  328  335  400  692  233   82  706  101  702   960 #>  [617,]  852  268  191  729  742  511  493  705    4   255 #>  [618,]  450  735  555  427  119  971  593  191  930   959 #>  [619,]  742  190  493    4  907  557  765  481  268   449 #>  [620,]  963  312  664  967  712  559  399  916    2   185 #>  [621,]  177  941  943  337  376  285   58  309  154   241 #>  [622,]  678  164  380  960  215  692  512   82  327   535 #>  [623,]  256   37  645  549  413   24  221  501  153   886 #>  [624,]  251  884  758  900  506  582  608  266  851   184 #>  [625,]  109  765  237  135  971  735  481  455  618   976 #>  [626,]  628  890  340  121  904  975  441  894  686   639 #>  [627,]  961   12  294  847  680  788  443  313  885   868 #>  [628,]  890  626  975  121  926  686  639  942  340   406 #>  [629,]  405  645  607  549  288  357  727  931  256   527 #>  [630,]  633  363  277  505  236  206  367  539  924   849 #>  [631,]  430  605   12  119    5   45  378  123  811   200 #>  [632,]  231  564  836  864  390  173   40  195  270   558 #>  [633,]  505  630  236  277  363  924  912  973  664   857 #>  [634,]   35  137  838  442  479  513  472  429  315   881 #>  [635,]  154  640  268  493    4  191  203  358  705   444 #>  [636,]   16   69  943  339  494  587  192  402  972   831 #>  [637,]  273  528  407  476  659   59  431  226  186   919 #>  [638,]   41  937  646  105  435  602  398   81  550   375 #>  [639,]  115  570  188  194  834  207  812  686    9   341 #>  [640,]  203  268  949  852  635  346  191  794  154   514 #>  [641,]  414  329  182  361  585  946    2  496  712    62 #>  [642,]  972  406  942  121  726  896  890  628  661   636 #>  [643,]  185  210  122  845  139  303   31  223  162   518 #>  [644,]  755  458  957  385   85  161  743  108  699   509 #>  [645,]  256  573  629  623  727  549  607  357  288   405 #>  [646,]  748  638  435   81  602  105  467   41  532   937 #>  [647,]  875  558  988  929   95    3  912  969  650   390 #>  [648,]  238  139  939  263  185  606  934  845  883   911 #>  [649,]  798  430  432  160  631  932   12  393  627   811 #>  [650,]  136  647  929  875  866  558   95  923  319   988 #>  [651,]  453  596  968  497   72  573  413  562  264   854 #>  [652,]  461  330  491   98  673  281  113  790  584   815 #>  [653,]  306  693  283  683  449  269  462  129  671   903 #>  [654,]  903  170  129  246   33  103  392  546  982   905 #>  [655,]  360  784  490  508  526  733  862  826  906   783 #>  [656,]  840  865  187  732   52  423  318  928  709   676 #>  [657,]  662  749  808  682  212  243  166  785  820   485 #>  [658,]  333  901  351  161  387  250  913  841  985   510 #>  [659,]  226  117  511  101  753  852  919  974  528   617 #>  [660,]  797  919   61  477  141  817  976  860  117   556 #>  [661,]  196  447  671  975  942  890  726  272  392   628 #>  [662,]  820  271  785  485   94  657  922  243  240   410 #>  [663,]  882  519  563  979    1  684   73  240   70   547 #>  [664,]  967  963  924  620  181  633  559  236  249   106 #>  [665,]  817  328  348  556  887  565  557  695  164   616 #>  [666,]  102  590  235  587  721  943  436   16  165   636 #>  [667,]  855  937  550   88   87  828  244  965  353   920 #>  [668,]  777  175  228  264  169  126  593  316  246    28 #>  [669,]  503  720  354  880  202  987  163   96   14   208 #>  [670,]  444  975  196  823  269  671  812  216  287   392 #>  [671,]  670  975  269  196  287  823  661  890  447   216 #>  [672,]  341  522  422  492  207  478  586  732  441   267 #>  [673,]  330  113  780  652  491  762   98  461  801   584 #>  [674,]  796   54    6  322  886  807  744  871  551   711 #>  [675,]   29  874  343  535  263  581  606  603  898   826 #>  [676,]   52  865  322   49  840  217  286  292  381   656 #>  [677,]  342  108  710  853  209  284  830  604  291   743 #>  [678,]  622  164  779  128  366  263  581  686  926   535 #>  [679,]  133  404  897  315  472   77  715  733  137   479 #>  [680,]  961  899  788  868  313  396  930   12  583   230 #>  [681,]  516  198  208  965  163  389  720  495  280   253 #>  [682,]  334   42  212  614  441   84  754  465  808   166 #>  [683,]  449  895  619  804  190  306  693  481  742   283 #>  [684,]  486  663  872   46  142   70  882  345  910   440 #>  [685,]    8  251  131  408  184  851  848  436  220    69 #>  [686,]  812  779  188  926  639  975  309  115  628   263 #>  [687,]  799  434  736  877  554  397  878    9  198   599 #>  [688,]  110  492   38  144  437  300   60   89  591   478 #>  [689,]  500   71  403  548  382   30  598  940  768   815 #>  [690,]  751  691  994  614  600  147  895  306   19   451 #>  [691,]  600  614  730   19  690  287  334  216  147   693 #>  [692,]  960  706  616  380  327  581  233  606   82   702 #>  [693,]  306  159  789  269  438  422  683  903  600   730 #>  [694,]  984  512  718  164  141  328  215  233  695   622 #>  [695,]  569  565  348   29  309  328  874  233  581   154 #>  [696,]  158  958  511  150  203  815  255  514  810   964 #>  [697,]  433  712  946  962  312    2  970  409  781   559 #>  [698,]  197   32  822  731  734  134  833   78  935   292 #>  [699,]  108  225  743  385  830  509  464  710  750   957 #>  [700,]  879  496   39  282  973  363  182   62  209   305 #>  [701,]  983  393  984  258   67  123  504  989  769   721 #>  [702,]  335  581  606  321  887  810  296  713  692   874 #>  [703,]  803  611  827  148  276  518  951  487  303    31 #>  [704,]  127  884  945  915  758  552  624   68  506   114 #>  [705,]  158  958  103  311  742  203  964  696  268   852 #>  [706,]  380  960  692  425  327  616   82  141  233   576 #>  [707,]  996  362  245  214  132   91  156  774  376   718 #>  [708,]  761  771  925   26  786  542  709  242  272   865 #>  [709,]  242  928  530  656  840  542  567  865  140   708 #>  [710,]  830  927  419  763  938  743  230  108   10   853 #>  [711,]  572   32  842  956   17  297  674  734  134   886 #>  [712,]  946  962    2  312  916  697  620  433  641   559 #>  [713,]   98  810  461  515  702  420  321  801  330   317 #>  [714,]  723  993    7  262  360  417  156  526  826   733 #>  [715,]  386  679  136  479  866  133  419  230  830   738 #>  [716,]  856  455  412  247   66  259  959  304  727   446 #>  [717,]  747  863  120  249  963  970  967  270  620   174 #>  [718,]  512  535  156  739  858  816   55  675  694   327 #>  [719,]   57  166  808  140  908  709  336  567  928   542 #>  [720,]  202  163  503  880  681  987  669  516   85   208 #>  [721,]  337  132  214  989  376  621  177  943  102   597 #>  [722,]   20  597  918  366  258  331  989  926  984   128 #>  [723,]  714  770  298  360    7  733  993  612  526   377 #>  [724,]  413  152  905  153  573  534  772  100  159   623 #>  [725,]  288  985  562  527  517  791   24  842  629    46 #>  [726,]  121  661  626  890  272  628  831  261  942   447 #>  [727,]  446  573  645  629  959  304  968  357  453   259 #>  [728,]  116  182  991    2  839  879  973  902  700   496 #>  [729,]  255  150  481  617  511  226   51  556  742   696 #>  [730,]  498  557  216  287  887  269  600  810  713   321 #>  [731,]  197  144  734  134  698  253  300  292  591    89 #>  [732,]  656  422  438  423  478  586  530  928  840   672 #>  [733,]  770  906  655    7  508  396  723  526  367   360 #>  [734,]  134  253   32  197  731  698  292  198  144   300 #>  [735,]  618  450  593  427   97  119  191    4  971   555 #>  [736,]  799  375  516  687  878  599  398  681  198   554 #>  [737,]   40  864  270  870  174  836   87  564   48   632 #>  [738,]  819  899  419  230  897  763  133  442  679   293 #>  [739,]  873  816  718  512   55  156  858  921  818   469 #>  [740,]  524  760  843  981  720  105  202   41  669   319 #>  [741,]  551  802  936  324   10  151  529  313  744   582 #>  [742,]  493  619  190    4  705  268  617  557  191   635 #>  [743,]  385  750  699  509  710  830  957  108  225   125 #>  [744,]  372  551  674  854  948  871   10    6  562   936 #>  [745,]  352  955  418  876  592  359  146  388  800   893 #>  [746,]  834  286  350  325  570  533   38   60  862   107 #>  [747,]  717  863  120  249  990  168  374  967  963    55 #>  [748,]  646  536  878  435  467   81  375  560  757   986 #>  [749,]  657  662  271  148  212  278   64  243  682   785 #>  [750,]  125  743  282  509  879  479  385  363  710   830 #>  [751,]  994  690  306  147  614  451  205  693  954   808 #>  [752,]  468  399  648   27  327  939  168  622  960   139 #>  [753,]  279  974  101  117  539  860  484  326  849   594 #>  [754,]  323  441  801   84  911  267  334  303   42   584 #>  [755,]  644  957  387   85  385  458  720  509  991   305 #>  [756,]   47  331   67  769  237  258  384  701  844   504 #>  [757,]  467   63  917  748  986  494  566   22  878   568 #>  [758,]  851  266  884  624  127  552  900  131  251   184 #>  [759,]  525   51   82  598  548  940  321   25  296   498 #>  [760,]  740  202  987  977  720  945  915  458   85   105 #>  [761,]   26  771  708  840  925   52  865   72  497   676 #>  [762,]  426  944  780  872  547  889  673  952  793   491 #>  [763,]  819  830  419  710  738  442  938  230  792   927 #>  [764,]   23  409  361  480  997  374  249  980  254   171 #>  [765,]  109  625  619    4  540  237  493  489  907   283 #>  [766,]  602  870  737  463   48  199  825  568  290    40 #>  [767,]  440  426  889  995  265  872  579   30  142   684 #>  [768,]  388   43  592  234  876  579  475  486   50   414 #>  [769,]  976  605  984  701  504  817   67  258  665   844 #>  [770,]  733  906  396  723  655   77  526  993  377   788 #>  [771,]  761   26  474  925  900  708  502   49   52   402 #>  [772,]  534  100  588  153  954  724  979   24  152   240 #>  [773,]  307  911  139  473  459  648  303  244  920   487 #>  [774,]   91  828  463  290  245  999   48  855  707   550 #>  [775,]  448  456   84   42  212  888  323  166  928   584 #>  [776,]  162  208  163  312  244  210  353  338  495   185 #>  [777,]  668  264  228  126  316  593  546  246  169   416 #>  [778,]  359  146  517   24  302  221  501   71  623   592 #>  [779,]  686  238  263  812  188  678  939  581  164   648 #>  [780,]  793  317  673  762  821  330   98  790  934   845 #>  [781,]  697  559  338  970   95  231  116    2  312   409 #>  [782,]  787  326  279  857   44  400  130  475  335   849 #>  [783,]  784  826  360  867  655  862  526  397  298   325 #>  [784,]  783  655  360  526  826  508  723  862  867   298 #>  [785,]  485   94  519  240  243  547  588  448  775   563 #>  [786,]  118  925  589  708   22  771  761  242  543   917 #>  [787,]  782  326  289  279   43  475  425  857  480   753 #>  [788,]  415  847  294   12  680  770  961  324  227   378 #>  [789,]  159  544  964  147  815  500  451  281  438   652 #>  [790,]  821  317  107  478   98  586  491  780  793   652 #>  [791,]  517   24  725   99  985  302  288  772  153   841 #>  [792,]  819  407  193  293  992  401  763  442  738    59 #>  [793,]  780  317  934  821  437  495  110  801   98   492 #>  [794,]  949    5  427  378  191  640  555  852   45   358 #>  [795,]  209  225  595  108  385  509  699  429  957   824 #>  [796,]  807   54  886  674  837    6   17  861  318   187 #>  [797,]   61  660  101  860  117  575  594  186  974   919 #>  [798,]  432  649  370  627   12  788  932   21  294   275 #>  [799,]  687  736  198  877  599  434  554    3  516   397 #>  [800,]  301  521  124  580  299  745  388  117  273   234 #>  [801,]  323  584   98  420  223  330  267  793   84   437 #>  [802,]  313  741  324   10  961  230  419  415  927   906 #>  [803,]  703  611  827  487  518  303  773  911  148    31 #>  [804,]  895  683  449  481   51  111  729   18  190   619 #>  [805,]  143  940  511   50  501  388  150  255  964   815 #>  [806,]  145   58  867  941  847  285  294  416  415   783 #>  [807,]  796  861  311    6   54  674   33  886  837   187 #>  [808,]  166  719   57  954  588  100  682  140  614   709 #>  [809,]  373  260  299  401   35   59  792  881  407   824 #>  [810,]  321  887  335  702  713  461  696  158   98   203 #>  [811,]  200  575   53  227  520  583  369  469   77   377 #>  [812,]  188  686  309  779  348  444  639  975  670   341 #>  [813,]  464  239 1000  868  763  830  938   56  372   710 #>  [814,]  725  527  288  333  562  791  405  658   99   411 #>  [815,]  964  696  158  382  150  255  652  789  598   461 #>  [816,]  739  858  512  718  577  535  128  694  156    55 #>  [817,]  556  665  976  328  141  616  660  215  384   769 #>  [818,]  469  739  120  576  921  873  859  355  178   349 #>  [819,]  792  738  763  442  193  899  293  419   35   230 #>  [820,]  662   94  588  485  240  785  913  922  954   772 #>  [821,]  317  790  492  107  793  110   98  934  437   478 #>  [822,]   78  698  197   32  292  833  134  935  731   734 #>  [823,]  670  975  269  671  444  907  844  365  287   348 #>  [824,]  248  429  881  795  997  209   35   62  634   225 #>  [825,]  199  463  362   91  707  996  452   48  167   245 #>  [826,]  360  862  783  784  655  298  533   29  612   723 #>  [827,]  611  518  303  403  148   31  243   30  487   803 #>  [828,]  774  290  855   91  920  999  463  459  435   532 #>  [829,]  356  618  430  625  735  119  631  971  237   450 #>  [830,]  710  763  927  419  743  938  108  699  230   738 #>  [831,]  272  261  542  339  194  494  566  708  207    22 #>  [832,]  982  241  381   49  194  189  170  392  286   676 #>  [833,]  935  698   32  822  197   78  572  880  987   711 #>  [834,]  570  746  522   60  286  207   89   38  492   115 #>  [835,]  521  980  580  859  301  254  299  186  117   124 #>  [836,]  864  632   40  737  270  231  319  564  390   173 #>  [837,]  796   70  886   17  933  491  807  274  113    54 #>  [838,]  479  173  634   76  715  386  195  137  679   136 #>  [839,]  232  394  728  510  182  700  910  496  991   291 #>  [840,]  656  187  865   52  676  242  381   72  709   761 #>  [841,]  910   73  345  201  302  901  684  985   46   663 #>  [842,]  297  711   17  886  985  853  572   37  562    46 #>  [843,]  740  524  105   41  760  977  981  638  319   669 #>  [844,]  574  540  258  907  177   67  823  989  665   769 #>  [845,]  934  643  122  185  793  780  223  606  139   210 #>  [846,]  213  699  225  108  464   75  385  795  595   239 #>  [847,]  294   12  788  806  415  378  416  930  961    45 #>  [848,]  131  235  220    8  685  184   63  590  229   436 #>  [849,]  277  974   86  857  130   44  594  101  924   539 #>  [850,]  320  371  514  958  852  511   50  311  130   837 #>  [851,]  266  758  900  884  624  502  474  131  685   251 #>  [852,]  268  617  191  640  958  511  311  203  949   794 #>  [853,]  314  604  342  871  927  842  523  347  938   710 #>  [854,]  372  562  744  310  551  948  596  741  582   506 #>  [855,]  667  937  828  920   87  550   88  774  435   459 #>  [856,]  455  412  716  247  804  109   18  905  727   111 #>  [857,]   44  277  849  924  130  782  279  505   86   974 #>  [858,]   55  535  816  718  512  739  156  537  245   990 #>  [859,]  374  980  818   23  863  355  120  425  835   764 #>  [860,]  101  117  797  753  974  425  594  706  326   279 #>  [861,]  311  807    6  796   33  674  958  640  203   189 #>  [862,]  360  826  490  877  655  533  325  350  343   746 #>  [863,]  249  120  747  717   55  990  963  921  168   576 #>  [864,]  836  737  270   40  632  231  564  319  174   390 #>  [865,]   52  676  656  840  187  928   89  242  709   318 #>  [866,]  929  538  558  988  136  923  386    3  479   715 #>  [867,]  285  783  806  358   45  784  298  569  378   145 #>  [868,]  443  313  680  961  899  938  230  419  293   627 #>  [869,]  970  244  399  620  667  855   88  937  312    87 #>  [870,]  174  737   87   40  270  463  855   48  364   602 #>  [871,]  314    6  674  853   10  490  744  956  551   861 #>  [872,]  142  889  426  762  440  684  113  579   70   486 #>  [873,]  739   65  921  469  452  156   21  816  818    53 #>  [874,]   29  675  581  606  695   44  233  533  702   849 #>  [875,]  988  647    3  929  912  558  538  389  866   650 #>  [876,]  352  388  768  592  940  745  805  359  689    71 #>  [877,]  434  397  325  862  198  799  417  360  826   687 #>  [878,]  554  467  568  736  687  375  599  799  748    48 #>  [879,]  973  116  282  700  363  750  509  305  523   952 #>  [880,]   96  202  987  300  720  698  935  197  503   456 #>  [881,]  248  429  997   62  361  824   35  368  484   980 #>  [882,]    1  979  663  563   70  153  933  519   37   281 #>  [883,]  280   60  934  495  965  437  267  793  570   492 #>  [884,]  127  624  900  758  609   78  822  851  945   915 #>  [885,]  627  408  961  313  294   56  507  415  324   847 #>  [886,]  796   17   54  297  674  807  837   37  842   413 #>  [887,]  810  335  702  557  498  321  730  665  328   713 #>  [888,]   96  456  880  775  483  379  300  104  591   987 #>  [889,]  496  426  872  440  762  579  952  182  767   142 #>  [890,]  628  975  626  340  926  121  406  942  661   686 #>  [891,]  262  923  526   92  508  993  714  417    7   558 #>  [892,]  138  955  527  893  931  418  284  745  224   291 #>  [893,]   80  501  931  221  549  284  143  347  431   607 #>  [894,]  999  896  904  628  626  121  926  406  890   454 #>  [895,]  683  804  449  600   51  306  693  730  481   691 #>  [896,]  454  894  406  121  642  972  999  628  890   986 #>  [897,]  230  396  899  738   77  679  125  419  906   133 #>  [898,]  343  417  603  537  106  181  969  156  675     7 #>  [899,]  230  419  738  897  293  396  819  680  938   906 #>  [900,]  474  771  582  502  884  266  624  925  851   127 #>  [901,]  910  841  201  658  985   46  302  510  345   387 #>  [902,]  991  728  433  354    2  338  503  312  946   116 #>  [903,]  654  129  246  170  392  546  982  693  169    33 #>  [904,]  999  115  639  626  395  686  828  536  531     9 #>  [905,]  103   33  573  190  654  159  724  705  413   645 #>  [906,]  396  770  733  655  897  230  377  367  206   490 #>  [907,]  283  619  269    4  540  844  557  493  742   823 #>  [908,]  140  166  719  998  336   57  379  888  219   308 #>  [909,]  995  265  914  962   36  946  176  433  767    30 #>  [910,]  841  901   46  302  684  201  345  985   73   510 #>  [911,]  303  754  487  518  139  323  238  648   31   611 #>  [912,]  106    3  875  988  343  389  633  538  647   558 #>  [913,]   73   94  841  240  772  820  344  201  658   345 #>  [914,]  265  909  995  466  354  176  148   31  767   922 #>  [915,]  458   78  945   85  822  760  935  833  884   202 #>  [916,]  712  962  946  620  329  185  641  643    2   122 #>  [917,]   22  261  757  118  786  257  545  104   13   566 #>  [918,]  722  597   20  406  926  366  721  128  823   890 #>  [919,]  660  135  971  976  659  797  226  556  477   817 #>  [920,]  459  855  828  364  307  532  667  937  435   774 #>  [921,]  561  181  873   55  537  739  469  470  603   863 #>  [922,]  410  176   94  240  767  485  519  663   73   785 #>  [923,]  891  262  508  866  526  558  538    7  136     3 #>  [924,]  277  857   86  849  368  664  630  633  576   505 #>  [925,]  786  771  118  708  761  589  543  474  900   242 #>  [926,]  686  628  890  812  128  779  975  366  678   894 #>  [927,]  710  830  419   10  938  230  372  763  853   744 #>  [928,]  423  709  656  865  732  542   89  522  591   242 #>  [929,]  988  866  558  875  647  479   95  538  650     3 #>  [930,]  555  416  680  936  847  961  294  378   12   450 #>  [931,]  284  527  607  342   74  549  893  629  405   604 #>  [932,]  432  798  443  649  627   56  373  868  430   961 #>  [933,]  281  544  491    1   70  882  837  563  652   979 #>  [934,]  793  317  437  821  267  883  845  495  780   280 #>  [935,]  833  698  987   32  880  197  202  822   78   572 #>  [936,]  551  151  741  930    6   10  744  871  324   674 #>  [937,]  667  855  550  638  435  602   81   41  828   920 #>  [938,]  293  992  419  927  948   74  710  763  899   230 #>  [939,]  263  648  238  535  459  779  245  752  675   883 #>  [940,]   51  150  805  255  815  598  382  475  729   511 #>  [941,]   58  145  621  943  177  285  806  867  376   154 #>  [942,]  972  628  890  661  975  636  365  610   16   121 #>  [943,]   16  941  621   58  376  636   69  177  145   285 #>  [944,]  952  155  305  523  762  389  426  889  495   163 #>  [945,]  609  977  915  760  884  987  104  127  257   704 #>  [946,]  962  712  433    2  697  641  916  312  995   329 #>  [947,]  349  859   93  168  990  374   90  818  171   120 #>  [948,]  372  938   74  744  357  607  992  293  927    10 #>  [949,]  794  640  371  852    5  974  346  514  378   594 #>  [950,] 1000   59  431  401  284  813   74  407  273   792 #>  [951,]  773  473  803  468   25  703  611  541  307   752 #>  [952,]  305  944  389  155  523  236  889  973  762   163 #>  [953,]  477  660   61  504  919  769  976  141  605   575 #>  [954,]  588  100  534  451  147  485  808  772  544   438 #>  [955,]  418  745  138  146  352  592  394  359  234   291 #>  [956,]  529  711  523   32  155  871  734   85  253   134 #>  [957,]  385  509  225  743  755  116  699  750  879   644 #>  [958,]  158  696  203  311  705  514  511  852  964   850 #>  [959,]  259  450  593  727  446  304  618  735  411   264 #>  [960,]  327  692  706  380  576  512  425  233  616   535 #>  [961,]  627  313  680  294  868  788   12  847  324   930 #>  [962,]  946  712  916  433    2  697  329  641  312   995 #>  [963,]  664  620  106  181  967  603  969   88  249   912 #>  [964,]  815  158  789  958  696  705  544  159  511   933 #>  [965,]  280  353  516  883  428  681  550  495  375   208 #>  [966,]  254  414  124  301  585  204  800  418  997   234 #>  [967,]  664  559  249  963  620  368  361  924  973   236 #>  [968,]  453  651  446  573  264  727  497   33  247   596 #>  [969,]  390  106  564  558   88  537  898  647  181    40 #>  [970,]  869  697  717  620  312  712  747  963  781   967 #>  [971,]  427  135    5  976  919  191  617  618  735   119 #>  [972,]  942  642  636  406   16  121  666  610  628   721 #>  [973,]  879  236  182  952  559  363  116  700  282   633 #>  [974,]  101  849  130  594  371  753  279  539  277   400 #>  [975,]  670  890  196  628  671  444  812  686  823   626 #>  [976,]  817  556  135  971  769  919  384  660  665   295 #>  [977,]  257  105  398  945  104  987  760  375  467   202 #>  [978,]  204  329  254  966  764  289  641  409   36   962 #>  [979,]  882    1  153  663   70  544  563  933  281   240 #>  [980,]  580  835  117  186  859  860  881  484  368   753 #>  [981,]  179  650  740  319  760  843  112  105  945    95 #>  [982,]  392  832  170  381  444  189  194  546  196   241 #>  [983,]  393  701  123  504  383  984   67  989  258   605 #>  [984,]  694  504  701  769  989  393  983  816  512   141 #>  [985,]   46  725  842   37  841  297  345  302   24    73 #>  [986,]  167  748  757  536  290  568  494  999  566   774 #>  [987,]  202  880  935  720  760  104   96  833  977   698 #>  [988,]  875  929    3  538  647  866  912  558  389   106 #>  [989,]  337  177  565  348  309  258  721  621  569   701 #>  [990,]  168   55  863   27  120  858   93  327  249   468 #>  [991,]  902  728  354  182  503    2  338  163  305   116 #>  [992,]  293  938  528  792  193   74  604  342  819   407 #>  [993,]  714  723  770  526  733  891  262  404    7    21 #>  [994,]  751  451  147  306  693  159  690  100  954   789 #>  [995,]  265  909  767  440  914  889  182  946  354    36 #>  [996,]  707  214  132  245  362  128  337   91  376   774 #>  [997,]  361  881  248  429   62  824  409  368  585   764 #>  [998,]  180  908   13  379  140  308  888  118  719   336 #>  [999,]  904  774  828  290  894  245   91  115  459   463 #> [1000,]  950  401   59  431  813  284   74  792  239   407 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.22955788 0.3147758 0.3528415 0.3531328 0.3851255 0.4218153 0.4811096 #>    [2,] 0.52205739 0.5285002 0.5445752 0.5547201 0.5666508 0.6858549 0.6971000 #>    [3,] 0.29043581 0.4236301 0.4283759 0.4348192 0.5277681 0.5625142 0.5825964 #>    [4,] 0.11974982 0.3883122 0.4289352 0.4685197 0.5112956 0.5155442 0.6103175 #>    [5,] 0.35167193 0.3973417 0.4109456 0.4139010 0.5931289 0.6050622 0.6241632 #>    [6,] 0.36658553 0.3835472 0.3865429 0.4770600 0.4959404 0.5588210 0.5910474 #>    [7,] 0.38954091 0.4307306 0.4765231 0.4900548 0.4916846 0.5146938 0.5343246 #>    [8,] 0.47694982 0.5426104 0.5720074 0.5893318 0.7185845 0.7771288 0.8031372 #>    [9,] 0.36432492 0.4817068 0.5547988 0.5742169 0.6595359 0.6642841 0.6720351 #>   [10,] 0.41581566 0.5036597 0.5068568 0.5079031 0.5357371 0.5434673 0.5857902 #>   [11,] 0.75090353 0.8468605 0.8937218 0.9069346 1.0005448 1.0036982 1.0362182 #>   [12,] 0.30038238 0.4167902 0.4974701 0.5285796 0.6048515 0.6064083 0.6166146 #>   [13,] 0.95696900 0.9926525 1.1152842 1.2119040 1.2242314 1.3276908 1.3519234 #>   [14,] 0.87476717 0.8779168 0.9330503 0.9443368 0.9452227 0.9652644 0.9802480 #>   [15,] 0.95961683 1.0036337 1.0290349 1.0550523 1.1394752 1.2369858 1.2582852 #>   [16,] 0.25174739 0.4186268 0.5292774 0.7673578 0.8025159 0.8370141 0.8626276 #>   [17,] 0.19001988 0.3184818 0.4104462 0.4567366 0.4896734 0.5115793 0.5380951 #>   [18,] 0.14193852 0.5965792 0.8995982 0.9394248 0.9441787 0.9727588 0.9974096 #>   [19,] 0.61599421 0.7719512 0.9112849 1.0318855 1.0660049 1.0739199 1.0788189 #>   [20,] 0.47353190 0.6662763 0.7478808 0.8225368 0.9698352 1.0005276 1.0698264 #>   [21,] 0.70158470 0.8405912 0.8500911 0.8535006 0.8763916 0.9166175 0.9203771 #>   [22,] 0.29142265 0.6238260 0.6672124 0.6935020 0.7960446 0.8701332 0.9054751 #>   [23,] 0.38329518 0.4248052 0.5331477 0.8018750 0.8221615 0.8548062 0.9489073 #>   [24,] 0.26438244 0.6151679 0.6478287 0.6634108 0.7444792 0.8061131 0.8213870 #>   [25,] 0.83772894 0.9611045 1.0553389 1.1672386 1.2495497 1.2886693 1.2909780 #>   [26,] 0.27138544 0.4333277 0.4667941 0.4868108 0.5363539 0.5429688 0.5651363 #>   [27,] 0.65400625 0.7330919 0.7974136 0.8056535 0.8744545 0.9043918 0.9619047 #>   [28,] 0.42985587 0.5566478 0.6284227 0.7081441 0.8009395 0.8038349 0.8332182 #>   [29,] 0.29878435 0.3163037 0.4711332 0.4854285 0.5161449 0.5370229 0.5601168 #>   [30,] 0.49423771 0.7367394 0.7772910 0.7803123 0.8458345 0.8564536 0.8906206 #>   [31,] 0.28532947 0.3041852 0.4769811 0.5980285 0.6687472 0.7046688 0.7742714 #>   [32,] 0.25064520 0.3072318 0.3352395 0.3728546 0.4731351 0.5042372 0.5065395 #>   [33,] 0.53160948 0.5620400 0.6073710 0.6094534 0.6336428 0.6552232 0.6896397 #>   [34,] 0.77685665 0.7967507 0.9097738 0.9531234 1.0630410 1.0784622 1.1020093 #>   [35,] 0.28774145 0.6213532 0.7006512 0.7059420 0.7353344 0.7612390 0.7644148 #>   [36,] 0.75924608 0.7772910 0.7835089 0.7919207 0.8514512 0.8588565 0.9047142 #>   [37,] 0.40874262 0.4731610 0.5497708 0.5542306 0.5581127 0.5927913 0.6550149 #>   [38,] 0.26454652 0.2813778 0.2852025 0.3146972 0.3678983 0.3783726 0.3992287 #>   [39,] 0.35015508 0.5207689 0.5466499 0.5852646 0.6499753 0.6535911 0.6778602 #>   [40,] 0.47752675 0.5891235 0.6210819 0.6559817 0.6612791 0.6779006 0.7035086 #>   [41,] 0.43515815 0.5427919 0.6420046 0.6459957 0.7780180 0.7797683 0.8050569 #>   [42,] 0.34097264 0.6597671 0.7086855 0.7314902 0.7374816 0.7590198 0.7771964 #>   [43,] 0.56124200 0.5776895 0.5785828 0.5989219 0.6034228 0.6302666 0.6312037 #>   [44,] 0.24197527 0.3422654 0.4376664 0.4923291 0.5221900 0.5478162 0.5534744 #>   [45,] 0.24850381 0.4139010 0.5176666 0.5243583 0.5563664 0.5818203 0.5884176 #>   [46,] 0.53337590 0.6039191 0.6842995 0.6862257 0.6949797 0.7501835 0.7701968 #>   [47,] 0.81468898 0.9472570 1.0385676 1.0632125 1.0907152 1.1678819 1.3024224 #>   [48,] 0.54771926 0.5979702 0.6388442 0.6518540 0.7279184 0.7482242 0.7669109 #>   [49,] 0.44051952 0.4582034 0.4670918 0.5155253 0.5531315 0.5598117 0.5651363 #>   [50,] 0.33588533 0.4875531 0.4933346 0.5221565 0.5511288 0.5914730 0.6395483 #>   [51,] 0.51165768 0.6992192 0.7921689 0.7985628 0.8676614 0.9185706 0.9840152 #>   [52,] 0.11131967 0.1920039 0.3920492 0.4502519 0.4884780 0.4967604 0.5029804 #>   [53,] 0.33937755 0.4447574 0.4693584 0.5125122 0.5515011 0.5733509 0.6048581 #>   [54,] 0.30086372 0.3589078 0.3637277 0.3725972 0.4069020 0.4227815 0.4567366 #>   [55,] 0.49271844 0.5924642 0.6064765 0.6185078 0.6335998 0.6581721 0.6738409 #>   [56,] 0.79157970 0.8545616 0.8740242 0.9631994 0.9849236 1.0012189 1.0345704 #>   [57,] 0.25074555 0.5101001 0.6682075 0.8538193 0.9460150 0.9961794 0.9985972 #>   [58,] 0.26706143 0.3353384 0.5193202 0.5313529 0.5535716 0.6284227 0.6556597 #>   [59,] 0.37334771 0.5159829 0.6587210 0.6674950 0.6781264 0.6929206 0.7023600 #>   [60,] 0.36432780 0.3796669 0.3992287 0.4022015 0.4056132 0.4106404 0.4300700 #>   [61,] 0.50952156 0.5411832 0.6186135 0.6862895 0.8409144 0.8967585 0.9295798 #>   [62,] 0.49382892 0.5235448 0.5392796 0.6241569 0.6499753 0.6556254 0.6746993 #>   [63,] 0.60509386 0.6643747 0.7903283 0.8285489 0.8696223 0.8826998 0.8933504 #>   [64,] 0.89372183 1.2762580 1.5608329 1.6156184 1.6808172 1.6888735 1.7430245 #>   [65,] 0.51559977 0.5623370 0.8759161 0.9370672 1.0336979 1.0458282 1.0547228 #>   [66,] 1.51973824 1.5327795 1.5583865 1.5634930 1.5958666 1.6812691 1.7905241 #>   [67,] 0.55121589 0.7827151 0.7978571 0.8100517 0.8811937 1.0184953 1.0341364 #>   [68,] 0.81861944 1.0862665 1.1130497 1.2226387 1.2798352 1.3649363 1.4278899 #>   [69,] 0.52927737 0.5628008 0.6884613 0.7342654 0.7534210 0.7640672 0.7646252 #>   [70,] 0.31477578 0.4087426 0.4212690 0.4626128 0.4659702 0.5148053 0.5474437 #>   [71,] 0.49839545 0.6832273 0.7231331 0.7394909 0.7608450 0.7772437 0.8063634 #>   [72,] 0.39321579 0.4183378 0.4685458 0.4981386 0.5174615 0.5808584 0.5836605 #>   [73,] 0.52031443 0.5314677 0.5467499 0.6069266 0.6375156 0.6417617 0.6428783 #>   [74,] 0.40224149 0.4991503 0.5281373 0.5290308 0.5302368 0.5552956 0.6143706 #>   [75,] 0.99428733 1.2215164 1.3113957 1.3248068 1.4749380 1.4785234 1.4887600 #>   [76,] 0.90401083 1.0216621 1.0672304 1.4068108 1.4464495 1.4789490 1.4835176 #>   [77,] 0.31207111 0.3975268 0.4490219 0.4790694 0.4916165 0.5217519 0.5219402 #>   [78,] 0.15233236 0.5099480 0.5439941 0.5645764 0.6213503 0.6228073 0.6492930 #>   [79,] 0.95315722 1.0277990 1.2760757 1.3098735 1.3221914 1.3504356 1.3845404 #>   [80,] 0.48674489 0.5680026 0.5965792 0.6815743 0.7145227 0.7465897 0.8091168 #>   [81,] 0.49209632 0.5385692 0.6413912 0.6787231 0.6867009 0.7489957 0.7706572 #>   [82,] 0.54926698 0.5766717 0.5866596 0.6021086 0.6834629 0.6882445 0.7024412 #>   [83,] 0.89649395 1.0336979 1.0766788 1.0939217 1.1683508 1.1771884 1.3575005 #>   [84,] 0.46121948 0.5206923 0.5247918 0.5413250 0.6095777 0.6267140 0.6769131 #>   [85,] 0.67317429 0.6924852 0.7115891 0.7246897 0.7407812 0.7859023 0.8046616 #>   [86,] 0.35438072 0.3655914 0.3830447 0.5052356 0.5130918 0.5206713 0.5216893 #>   [87,] 0.46529356 0.5979702 0.6313286 0.7035086 0.7113231 0.7121853 0.7445457 #>   [88,] 0.46529356 0.5537717 0.6157474 0.6216260 0.7095360 0.7251863 0.7278297 #>   [89,] 0.30257578 0.3678983 0.3838820 0.4039412 0.4067629 0.4109428 0.4111247 #>   [90,] 0.75911512 0.9456824 1.0036337 1.0508298 1.1135203 1.1558895 1.1906191 #>   [91,] 0.26711949 0.2921032 0.5063923 0.5660536 0.5682086 0.6388442 0.6627853 #>   [92,] 0.49469570 0.5911418 0.6734925 0.7223337 0.7260962 0.8019800 0.8190748 #>   [93,] 0.84606760 0.9390106 0.9948477 1.0298800 1.0389892 1.1489887 1.1632995 #>   [94,] 0.30931680 0.4790119 0.5222593 0.6428783 0.6718746 0.8095090 0.8161483 #>   [95,] 0.54773425 0.5612501 0.6103436 0.7593193 0.7915471 0.7919086 0.8294008 #>   [96,] 0.39860713 0.4180741 0.4449353 0.5817220 0.6296496 0.6468781 0.6887198 #>   [97,] 0.40277941 0.5458427 0.6294593 0.6531673 0.7100846 0.7302993 0.7379574 #>   [98,] 0.33179294 0.3346954 0.3538130 0.4218332 0.4363952 0.4373618 0.4419613 #>   [99,] 0.94558128 1.0124895 1.0441433 1.0575390 1.0885354 1.1542463 1.1650044 #>  [100,] 0.28821340 0.4679749 0.4770330 0.5006976 0.8454803 0.8610168 0.8928643 #>  [101,] 0.24311166 0.4874578 0.5111905 0.5199864 0.5233516 0.5274160 0.5806486 #>  [102,] 0.66106908 0.6771497 0.7177148 0.7365333 0.8875912 0.9274102 1.0404540 #>  [103,] 0.33720097 0.4684372 0.5620400 0.5736191 0.5873198 0.7007622 0.7030042 #>  [104,] 0.55216763 0.5801038 0.6296496 0.6397676 0.6452197 0.6459959 0.6603118 #>  [105,] 0.43515815 0.5435702 0.6606966 0.6872181 0.7111712 0.7208413 0.7363367 #>  [106,] 0.35623223 0.4136343 0.4629466 0.4931602 0.5072623 0.5371209 0.5417839 #>  [107,] 0.27056438 0.2726058 0.3146972 0.3321369 0.3526669 0.4281768 0.4358156 #>  [108,] 0.35479316 0.6131547 0.6542839 0.6544143 0.6674126 0.6708937 0.6785268 #>  [109,] 0.39284474 0.5420591 0.6921861 0.7057456 0.9243953 0.9498105 0.9732389 #>  [110,] 0.16005995 0.1636918 0.2645465 0.2988628 0.3765656 0.3922052 0.4056132 #>  [111,] 0.14193852 0.6815743 0.8687264 0.9189984 0.9999733 1.0397466 1.0979863 #>  [112,] 0.82989409 0.8933504 0.9880924 1.1579817 1.1645617 1.2226387 1.2492971 #>  [113,] 0.33137370 0.4152467 0.4215835 0.4711941 0.4933346 0.4997815 0.5003712 #>  [114,] 0.85492792 1.0534906 1.1235410 1.1579978 1.1796942 1.1813262 1.2210131 #>  [115,] 0.25412577 0.3669649 0.4817068 0.5577018 0.6230956 0.6750065 0.6895357 #>  [116,] 0.47510870 0.5279733 0.5894320 0.6128468 0.6191184 0.7315621 0.7333377 #>  [117,] 0.51409931 0.5208724 0.5318891 0.5796677 0.6545335 0.6822003 0.7333890 #>  [118,] 0.22218065 0.5155723 0.6680324 0.6935020 0.8086749 0.8160104 0.8334246 #>  [119,] 0.58182028 0.6132824 0.6272283 0.6492518 0.6848345 0.6873225 0.6964786 #>  [120,] 0.54030555 0.5959394 0.7760290 0.7833529 0.8450053 0.8692232 0.8991530 #>  [121,] 0.69180369 0.6933099 0.7299780 0.8226545 0.9148125 1.0143681 1.0513574 #>  [122,] 0.47361947 0.5024221 0.5353100 0.5594510 0.5839937 0.6586737 0.7191844 #>  [123,] 0.60099663 0.7140281 0.7170791 0.8001993 0.8057490 0.8164433 0.8367857 #>  [124,] 0.58946217 0.8689148 0.9280811 1.0297510 1.1650943 1.1733137 1.1789849 #>  [125,] 0.39695292 0.4719325 0.4911514 0.5876585 0.6284460 0.6305630 0.6321651 #>  [126,] 0.42985587 0.5029663 0.6075160 0.6492518 0.7100846 0.7933092 0.8024217 #>  [127,] 0.55526788 0.5586333 0.7667336 0.7792013 0.8127992 0.8537498 0.8770906 #>  [128,] 0.62018411 0.7043686 0.8071477 0.8345459 0.8527875 0.8559284 0.8598052 #>  [129,] 0.30479621 0.5022706 0.5304571 0.8042871 0.8683446 0.9016947 0.9335791 #>  [130,] 0.24197527 0.4096973 0.4317216 0.4609947 0.4916033 0.5029903 0.5412672 #>  [131,] 0.51004812 0.5720074 0.6491926 0.7357600 0.7646844 0.8696223 0.8756437 #>  [132,] 0.13904093 0.4621753 0.4935436 0.5077706 0.6445842 0.6567433 0.8032437 #>  [133,] 0.32270638 0.4489236 0.4736157 0.5149963 0.5206218 0.5755592 0.6165712 #>  [134,] 0.20668934 0.2611233 0.3023190 0.3630814 0.3728546 0.3971645 0.4223222 #>  [135,] 0.62544437 0.6360042 0.6398665 0.6644473 0.6911587 0.7057456 0.8358892 #>  [136,] 0.29230067 0.5180780 0.5909023 0.6417467 0.6542717 0.7033741 0.7459431 #>  [137,] 0.42200272 0.4784113 0.4936388 0.5049658 0.6076743 0.6563010 0.6814775 #>  [138,] 0.67721699 0.7717950 0.8382128 0.9263069 0.9795451 1.0932158 1.1341864 #>  [139,] 0.27987714 0.4488782 0.5854625 0.6257288 0.6345945 0.6902922 0.6961660 #>  [140,] 0.58608702 0.6638989 0.6969766 0.7041460 0.7049275 0.7438635 0.7748060 #>  [141,] 0.43326589 0.6756711 0.6862895 0.7127515 0.7218695 0.7224012 0.7310283 #>  [142,] 0.26337288 0.4015201 0.4215835 0.4814051 0.5221565 0.5253220 0.5474437 #>  [143,] 0.33310089 0.3704731 0.4405922 0.5511288 0.6054457 0.6731733 0.7192804 #>  [144,] 0.26581135 0.2963973 0.3324854 0.3465442 0.4260973 0.4300700 0.4372892 #>  [145,] 0.33290079 0.3353384 0.3674355 0.5208225 0.5399085 0.5566478 0.6075160 #>  [146,] 0.37835990 0.6405020 0.6440883 0.7015320 0.7455531 0.7561979 0.8140324 #>  [147,] 0.36215703 0.5166758 0.5691353 0.7220621 0.7482427 0.7646507 0.8137214 #>  [148,] 0.84070282 0.8560164 0.8889693 0.9450211 0.9862482 1.0241095 1.0575188 #>  [149,] 0.36944808 0.4554618 0.6130401 0.6222292 0.6359916 0.6431986 0.6849759 #>  [150,] 0.08551787 0.3613223 0.4205612 0.4796084 0.5095843 0.5723981 0.6301929 #>  [151,] 0.45342692 0.4706235 0.5708228 0.5755871 0.5824983 0.6264366 0.6280891 #>  [152,] 0.60119898 0.6556549 0.7864463 0.8454803 0.9558553 0.9605236 0.9762076 #>  [153,] 0.42793592 0.4449730 0.5276249 0.5497708 0.6151679 0.6419102 0.6568379 #>  [154,] 0.38640308 0.3934733 0.4566357 0.4568346 0.5615495 0.5621974 0.6091768 #>  [155,] 0.12389484 0.3203079 0.3639448 0.4116619 0.4565016 0.6194494 0.6626536 #>  [156,] 0.39944448 0.5693601 0.6031179 0.6054276 0.6224050 0.6252988 0.6270104 #>  [157,] 1.62006077 1.7635119 1.8712836 1.9232603 2.0583817 2.1801529 2.1935168 #>  [158,] 0.30072160 0.3019427 0.3577447 0.3825818 0.4182599 0.4488711 0.5854856 #>  [159,] 0.40262400 0.5694063 0.6144611 0.7008188 0.7237297 0.7322923 0.7855943 #>  [160,] 0.58087979 0.9419955 1.0095770 1.1918821 1.2107654 1.2282833 1.2405619 #>  [161,] 0.63259672 0.8445695 0.9345116 1.1022390 1.1813262 1.2116629 1.2563411 #>  [162,] 0.24313366 0.3057443 0.4975631 0.5048315 0.5364558 0.6135362 0.6408903 #>  [163,] 0.38395016 0.5048315 0.5161639 0.5293862 0.5406022 0.5429100 0.6075109 #>  [164,] 0.45751392 0.4675344 0.5480638 0.6617852 0.6907607 0.7314067 0.7344837 #>  [165,] 0.70078136 1.0926036 1.2291760 1.2968192 1.3170591 1.3256003 1.3856046 #>  [166,] 0.43217442 0.4716839 0.5101001 0.7748060 0.8129792 0.8652922 0.8725444 #>  [167,] 0.66707214 0.7803646 0.7832437 0.8182318 0.8249728 0.8406484 0.8800038 #>  [168,] 0.39760685 0.6161242 0.7974136 0.8211332 0.8252103 0.8292952 0.8793245 #>  [169,] 0.40277941 0.5684774 0.6342366 0.6819751 0.6842595 0.8487373 0.8727477 #>  [170,] 0.44796127 0.5118791 0.5180486 0.5497547 0.6156194 0.6259169 0.6322976 #>  [171,] 0.53314771 0.5454910 0.7581105 0.9108543 0.9276680 0.9338713 0.9611045 #>  [172,] 0.71075313 0.7336180 0.7705374 0.9231344 0.9460307 0.9535106 1.0002517 #>  [173,] 0.71689709 0.7361889 0.7459431 0.8645907 0.9024557 0.9728832 1.0025582 #>  [174,] 0.63034356 0.6647712 0.6926248 0.9478527 1.0700162 1.0775018 1.1115952 #>  [175,] 0.56847744 0.6887247 0.7312608 0.8129587 0.9198719 0.9326896 0.9531572 #>  [176,] 0.55541501 0.7102808 0.8414685 0.9378846 0.9677141 0.9782553 1.0207536 #>  [177,] 0.41673703 0.4403338 0.5465063 0.5535716 0.6162078 0.6438130 0.6958704 #>  [178,] 0.58087979 0.6672218 0.9132468 0.9662791 0.9694484 0.9716051 0.9810414 #>  [179,] 0.81357368 0.8643784 0.9614959 0.9942873 0.9961434 1.0171498 1.0372205 #>  [180,] 0.55632795 1.1818391 1.2119040 1.3025537 1.5745201 1.6500159 1.6715337 #>  [181,] 0.43908226 0.5072623 0.5383672 0.5934038 0.6195960 0.6219528 0.6312036 #>  [182,] 0.43793954 0.5140202 0.5531305 0.5547201 0.5973966 0.6278508 0.6553777 #>  [183,] 0.47004406 0.6413912 0.6643795 0.8795570 0.9406942 0.9545599 0.9681110 #>  [184,] 0.51004812 0.5893318 0.6842077 0.8034199 0.8419069 0.8440431 0.8544933 #>  [185,] 0.27987714 0.3663453 0.5177153 0.5899872 0.6576819 0.6672836 0.7225982 #>  [186,] 0.51409931 0.7375290 0.7808489 0.8199043 0.8358652 0.8493777 0.8677896 #>  [187,] 0.30333347 0.3608692 0.3725972 0.4183378 0.4351121 0.4891648 0.4967604 #>  [188,] 0.28440992 0.5103241 0.5136182 0.5624893 0.5836626 0.6047847 0.6230956 #>  [189,] 0.33782589 0.4358156 0.4800265 0.5518935 0.5727671 0.5763716 0.5841545 #>  [190,] 0.37735464 0.4303420 0.4956834 0.5112956 0.5736191 0.6140534 0.7433016 #>  [191,] 0.21727980 0.3733621 0.4492541 0.4809946 0.5004074 0.5054139 0.5155442 #>  [192,] 0.28546131 0.3694481 0.4361109 0.5763236 0.6825838 0.7209713 0.7373494 #>  [193,] 0.43452606 0.4488168 0.4982236 0.4997053 0.5478643 0.6132689 0.6180409 #>  [194,] 0.39394548 0.5320953 0.5834369 0.6239036 0.6294544 0.6672104 0.6773759 #>  [195,] 0.39009829 0.5425900 0.5725280 0.5763635 0.6203012 0.6806642 0.6814775 #>  [196,] 0.51667811 0.5347940 0.5449681 0.5754141 0.5981160 0.6229404 0.6286619 #>  [197,] 0.12538428 0.3072318 0.3116469 0.3552241 0.3630814 0.4298587 0.4583920 #>  [198,] 0.37747422 0.4624659 0.4713784 0.4924199 0.5277681 0.5420740 0.5594301 #>  [199,] 0.57274545 0.7260962 0.7440049 0.7482242 0.7832437 0.8442242 0.8743571 #>  [200,] 0.21472878 0.3393775 0.4357680 0.5961560 0.6413207 0.6473117 0.6801670 #>  [201,] 0.71186889 0.7288690 0.8069348 0.8224667 1.1552856 1.1655937 1.2262614 #>  [202,] 0.32050574 0.3337549 0.4940733 0.6227784 0.6271494 0.6581667 0.6793984 #>  [203,] 0.35771010 0.3825818 0.3923413 0.4208666 0.4261663 0.4992121 0.5456999 #>  [204,] 0.75924608 0.8665322 1.0565891 1.1317184 1.1613763 1.1993853 1.2169592 #>  [205,] 1.23858684 1.5171744 1.7487213 1.8748342 1.9045844 1.9093356 1.9264777 #>  [206,] 0.26780405 0.3084474 0.4916846 0.5134707 0.5176944 0.5206713 0.5394292 #>  [207,] 0.24638563 0.3939455 0.3987328 0.4039412 0.4857725 0.5482301 0.5744782 #>  [208,] 0.24313366 0.3839502 0.4288310 0.4944697 0.5065014 0.5176481 0.5880595 #>  [209,] 0.41703370 0.7069654 0.7399889 0.7448465 0.7580006 0.7898350 0.7965212 #>  [210,] 0.38587184 0.4975631 0.5594510 0.6300390 0.6326412 0.6597140 0.6672836 #>  [211,] 1.24422973 1.2786736 1.3715459 1.4806201 1.5267689 1.5286590 1.5433729 #>  [212,] 0.70954159 0.7412521 0.7424398 0.7461115 0.7506821 0.7928971 0.8237864 #>  [213,] 0.74141024 0.7546082 0.9585443 1.0428205 1.0983664 1.1202161 1.1269039 #>  [214,] 0.13904093 0.4522702 0.4983274 0.5700029 0.5975394 0.6806852 0.8249728 #>  [215,] 0.43326589 0.6411276 0.6834629 0.7205418 0.7251965 0.7591151 0.7901431 #>  [216,] 0.28858662 0.4970802 0.5083395 0.6022775 0.7461951 0.7610566 0.7669707 #>  [217,] 0.33486494 0.3717531 0.3984501 0.4593153 0.4670918 0.4699170 0.5092941 #>  [218,] 0.84984832 0.9047142 1.0059428 1.0462504 1.0763196 1.1725214 1.1988895 #>  [219,] 0.56062714 0.6276588 0.6828559 0.7049275 0.7707003 0.8094828 0.8113266 #>  [220,] 0.58793500 0.6670721 0.7185845 0.7357600 0.8015458 0.8078165 0.8603771 #>  [221,] 0.18013526 0.3704731 0.6120133 0.6604803 0.7079778 0.7145227 0.7187308 #>  [222,] 0.66779022 0.6869281 0.8172175 0.8365964 0.8599619 0.9535106 0.9848579 #>  [223,] 0.29650164 0.4610676 0.4832860 0.4923617 0.5353100 0.5497003 0.5619143 #>  [224,] 1.20222048 1.3727464 1.4854362 1.4902847 1.5489303 1.5574380 1.5955406 #>  [225,] 0.37771248 0.4804653 0.4986226 0.5152624 0.5672420 0.6674126 0.6776456 #>  [226,] 0.59942135 0.6546835 0.7880145 0.8058012 0.8429035 0.8465317 0.8674869 #>  [227,] 0.36641994 0.4357680 0.4633839 0.4639479 0.4693584 0.5126482 0.5128345 #>  [228,] 0.61304012 0.7119856 0.7455963 0.7735822 0.7824257 0.7828968 0.8753107 #>  [229,] 0.68757988 0.8065900 0.8845088 0.9054058 0.9125156 0.9198210 0.9628631 #>  [230,] 0.20000492 0.2384277 0.3585345 0.4087444 0.4245112 0.5068568 0.5240756 #>  [231,] 0.56885825 0.5715856 0.6165661 0.7218372 0.7906669 0.8122972 0.8441366 #>  [232,] 0.71572490 0.7642984 0.9378846 1.0588150 1.0688866 1.1198065 1.1491633 #>  [233,] 0.47763385 0.4797836 0.5104001 0.5988339 0.6127841 0.6350583 0.6418602 #>  [234,] 0.59892192 0.6139956 0.6491442 0.6942876 0.6976818 0.6983015 0.7386737 #>  [235,] 0.64099106 0.7177148 0.7538726 0.8015458 0.8345369 0.8733538 0.9699346 #>  [236,] 0.38610709 0.4008743 0.4136998 0.5332662 0.5381345 0.5704168 0.6657183 #>  [237,] 0.84983696 0.8586996 1.0738222 1.1530405 1.1678819 1.2576083 1.2958749 #>  [238,] 0.32956002 0.3940419 0.4693793 0.5317511 0.6308598 0.6641704 0.6983086 #>  [239,] 0.66905318 0.6785268 0.7599306 0.8700268 0.8908215 0.9088285 0.9549943 #>  [240,] 0.30931680 0.5203144 0.5216290 0.5318545 0.5420474 0.6642372 0.6644111 #>  [241,] 0.40127694 0.5105350 0.5684965 0.5763716 0.5990375 0.6510221 0.6652866 #>  [242,] 0.37901107 0.4866599 0.5087568 0.5342810 0.5606271 0.6380582 0.6521944 #>  [243,] 0.67691313 0.7012143 0.7525811 0.7862250 0.8136232 0.8237864 0.8585687 #>  [244,] 0.58998716 0.6345945 0.6721443 0.7031739 0.7565083 0.7659594 0.7755620 #>  [245,] 0.50639228 0.5423040 0.5919427 0.6056507 0.6201841 0.7244920 0.7364956 #>  [246,] 0.48899784 0.5099924 0.5304571 0.6156194 0.6342366 0.7273355 0.8129587 #>  [247,] 0.83347350 0.9325508 0.9808844 0.9923914 1.0237412 1.0639629 1.0813860 #>  [248,] 0.29391951 0.4717049 0.6299487 0.6556254 0.7245437 0.7898350 0.8217511 #>  [249,] 0.41683776 0.5962302 0.6669037 0.6901070 0.7025320 0.7523450 0.8018750 #>  [250,] 1.21166288 1.2294056 1.2509839 1.2674258 1.3260661 1.3444372 1.4390961 #>  [251,] 0.52906397 0.5426104 0.5877009 0.6842077 0.7569454 0.8216116 0.8229070 #>  [252,] 1.21518246 1.6197748 1.6598146 1.6952379 1.7601753 1.7737064 1.9183537 #>  [253,] 0.22047455 0.2611233 0.3774742 0.4322265 0.4684449 0.4887826 0.5065395 #>  [254,] 0.58946217 1.0513826 1.0520304 1.0542315 1.1893098 1.2351798 1.2734196 #>  [255,] 0.08551787 0.3252085 0.4097797 0.4338313 0.5597723 0.6249364 0.6318772 #>  [256,] 0.38258829 0.4579993 0.5345361 0.5610336 0.6120133 0.7436644 0.7465897 #>  [257,] 0.43031041 0.5497444 0.5521676 0.6688059 0.7208413 0.8118281 0.8168851 #>  [258,] 0.55121589 0.6485464 0.6858611 0.7505180 0.7848223 0.8771457 0.8978137 #>  [259,] 0.26956496 0.8147315 0.9095093 0.9144601 0.9358312 0.9531234 0.9747795 #>  [260,] 1.28338506 1.7764107 1.8023658 1.8967842 1.9080833 1.9829430 2.0239790 #>  [261,] 0.56054171 0.6238260 0.7594736 0.7609070 0.7762419 0.7825435 0.8131707 #>  [262,] 0.20386375 0.2894980 0.5014639 0.5317128 0.5389260 0.5404083 0.5769577 #>  [263,] 0.39404185 0.4011199 0.4710589 0.4949200 0.5165640 0.5427113 0.5808416 #>  [264,] 0.59342678 0.6662673 0.6955228 0.8457980 0.9130582 0.9248700 0.9811662 #>  [265,] 0.35188854 0.4413836 0.6151514 0.6217122 0.7083897 0.7695969 0.8029376 #>  [266,] 0.40778994 0.5975137 0.6944126 0.6956455 0.6962288 0.8199660 0.9895106 #>  [267,] 0.28557816 0.3657849 0.4267636 0.4291062 0.4985506 0.5251761 0.5381624 #>  [268,] 0.21727980 0.3531541 0.4289352 0.4339720 0.4406686 0.4887455 0.5069494 #>  [269,] 0.43534290 0.5898221 0.6022775 0.6294779 0.6655560 0.6799997 0.7664075 #>  [270,] 0.55810737 0.5891235 0.6006815 0.6165661 0.6484500 0.6647712 0.7563848 #>  [271,] 0.81651345 0.9643287 0.9677141 1.0810313 1.1658729 1.1887008 1.2135606 #>  [272,] 0.26026174 0.5380415 0.7469310 0.7652901 0.7713135 0.8104013 0.8131707 #>  [273,] 0.50024718 0.5243151 0.6254142 0.6587210 0.7286231 0.8836161 0.8869014 #>  [274,] 0.33137370 0.3358853 0.4015201 0.4659702 0.5578032 0.6054457 0.6084786 #>  [275,] 0.55844154 0.6875799 0.7551750 0.7720374 0.7771288 0.8117078 0.8346682 #>  [276,] 0.61599421 0.9854010 1.0290453 1.0593234 1.3344945 1.3489911 1.3506421 #>  [277,] 0.19484835 0.3543807 0.3548574 0.4050111 0.4546856 0.4923291 0.5261272 #>  [278,] 1.10729674 1.1853797 1.2004013 1.2797400 1.3119256 1.3159201 1.3192099 #>  [279,] 0.41107031 0.4316017 0.4766862 0.4916033 0.5123082 0.5255391 0.5330666 #>  [280,] 0.22766851 0.3132526 0.3408474 0.4639939 0.5203137 0.5247737 0.5420218 #>  [281,] 0.16992806 0.2420129 0.2994975 0.4218153 0.4656619 0.5660513 0.5740398 #>  [282,] 0.46035510 0.4611113 0.4814347 0.5466499 0.5853492 0.5876585 0.6241569 #>  [283,] 0.52947069 0.6197363 0.7916820 0.8509321 0.8983430 0.9008699 0.9058150 #>  [284,] 0.35770762 0.4833269 0.5302368 0.5997357 0.6832954 0.7496746 0.7581900 #>  [285,] 0.37091313 0.3719896 0.4568346 0.4632408 0.5208225 0.5646419 0.5887753 #>  [286,] 0.37175308 0.3849084 0.3963773 0.4067629 0.4309658 0.4644801 0.4651885 #>  [287,] 0.28858662 0.4353429 0.5452345 0.5803351 0.7704363 0.8070511 0.8566027 #>  [288,] 0.53011055 0.5805749 0.6361523 0.7466841 0.7649024 0.8000256 0.8005046 #>  [289,] 0.46679256 0.6034228 0.7086978 0.7599640 0.8815497 0.9097066 0.9192341 #>  [290,] 0.48149613 0.5005688 0.5063163 0.5682086 0.6571252 0.7471739 0.7773060 #>  [291,] 0.65258652 0.7388078 0.7399706 0.7499713 0.7580006 0.7717950 0.8064043 #>  [292,] 0.30231904 0.3348649 0.4415725 0.4583920 0.4765848 0.4837072 0.4887826 #>  [293,] 0.27011389 0.3438977 0.4255804 0.4997053 0.5256825 0.5290668 0.5315624 #>  [294,] 0.20184663 0.4167902 0.4518392 0.4690126 0.5373669 0.5568693 0.5662645 #>  [295,] 0.27473942 0.8162747 0.8527524 0.8612523 0.8668324 0.8920183 0.9058150 #>  [296,] 0.44900317 0.4493876 0.5293741 0.6437868 0.6882445 0.6935936 0.6964255 #>  [297,] 0.19001988 0.3533672 0.4542226 0.4711553 0.5672505 0.5941687 0.6204520 #>  [298,] 0.19781634 0.3821711 0.4491683 0.4584128 0.4639479 0.4738210 0.5176944 #>  [299,] 0.77389249 0.8696867 0.8979825 0.9275306 0.9471746 0.9756299 0.9800021 #>  [300,] 0.33248540 0.3366895 0.4040801 0.4073470 0.4408097 0.5429953 0.5654190 #>  [301,] 0.57960198 0.7738925 0.8987480 0.9527630 0.9669431 0.9821260 0.9847550 #>  [302,] 0.60849289 0.6405020 0.6634108 0.6842995 0.6999846 0.7160324 0.8142133 #>  [303,] 0.32778020 0.3825694 0.4279165 0.4769811 0.6253705 0.6481501 0.6658579 #>  [304,] 0.67761263 0.7900411 0.8224570 0.8930972 0.9097738 0.9277988 0.9704154 #>  [305,] 0.30127508 0.3203079 0.3666278 0.3728496 0.5056536 0.6256642 0.6431401 #>  [306,] 0.53789777 0.6647837 0.8510780 0.8753737 0.9529782 1.0084163 1.0419023 #>  [307,] 0.45572107 0.5709510 0.6918727 0.9127637 0.9149750 0.9481829 0.9778297 #>  [308,] 0.65993860 0.6637175 0.7099439 0.7212062 0.8731649 0.9998810 1.0348141 #>  [309,] 0.39431712 0.4816355 0.4997697 0.5624893 0.5708168 0.5751171 0.5831899 #>  [310,] 0.63773860 0.6751415 0.6965160 0.7180837 0.7277565 0.7521209 0.7757006 #>  [311,] 0.32832891 0.3763102 0.4364114 0.4687094 0.5127298 0.5490327 0.5873198 #>  [312,] 0.54457525 0.5568382 0.5719386 0.6054965 0.6269027 0.7570178 0.7835987 #>  [313,] 0.35852339 0.3970127 0.5043570 0.5926795 0.5973222 0.6713057 0.7088751 #>  [314,] 0.29869490 0.4050321 0.5588210 0.6373195 0.6520656 0.6716763 0.6874708 #>  [315,] 0.10703625 0.3120711 0.4565264 0.4639676 0.4678737 0.4736157 0.4784113 #>  [316,] 0.66626727 0.8263012 0.8736679 0.9085505 0.9975550 1.0182086 1.0461780 #>  [317,] 0.14644027 0.2897663 0.3245218 0.3317929 0.3771291 0.3913380 0.4649052 #>  [318,] 0.35890780 0.4177575 0.4351121 0.4831061 0.4896734 0.5528471 0.5891893 #>  [319,] 0.54773425 0.8312438 0.8319873 0.9041896 0.9175260 0.9271209 0.9294561 #>  [320,] 0.28242921 0.4875531 0.5423291 0.5655464 0.6020892 0.6535911 0.6672805 #>  [321,] 0.35569337 0.4493876 0.4685769 0.4890031 0.5073405 0.5654476 0.6063604 #>  [322,] 0.41701475 0.4227815 0.4558231 0.4685458 0.4884780 0.4891648 0.5302586 #>  [323,] 0.32444853 0.3522360 0.3657849 0.5025019 0.5162817 0.5247918 0.6237221 #>  [324,] 0.39445494 0.4501696 0.4651665 0.5568693 0.5973222 0.6052589 0.6248924 #>  [325,] 0.26958030 0.3733315 0.3752093 0.3984501 0.4573811 0.4651885 0.4657123 #>  [326,] 0.35332061 0.3897748 0.4561825 0.4766862 0.5685745 0.6914093 0.6930869 #>  [327,] 0.25382708 0.4709134 0.5051585 0.5345975 0.5349636 0.5495654 0.5645974 #>  [328,] 0.38941890 0.4797836 0.4958289 0.5585444 0.5586989 0.5945452 0.6745505 #>  [329,] 0.65717654 0.8219947 0.8586754 0.8665322 0.8869342 0.8926854 1.0021505 #>  [330,] 0.25890945 0.3114668 0.3344297 0.3346954 0.4415133 0.4756494 0.4923617 #>  [331,] 0.74836579 0.8146890 0.8612523 1.0359420 1.0367497 1.0818234 1.1672308 #>  [332,] 0.68692814 0.9739637 1.1744392 1.3050302 1.3088869 1.3556043 1.4608639 #>  [333,] 0.63259672 0.7321876 1.0575390 1.2210131 1.2674258 1.3484005 1.3615457 #>  [334,] 0.54060538 0.6456163 0.7090011 0.7280781 0.7551603 0.7719512 0.8049644 #>  [335,] 0.34954486 0.3847488 0.4369691 0.4639756 0.4685769 0.4827117 0.5843821 #>  [336,] 0.66371751 0.6969766 0.7131800 0.8011269 0.8462605 0.8968729 0.9142923 #>  [337,] 0.46865196 0.4935436 0.4942628 0.5252806 0.5300798 0.5700029 0.5831899 #>  [338,] 0.57193855 0.6858549 0.6883190 0.7293401 0.7666079 0.7949877 0.8049425 #>  [339,] 0.64319859 0.6677902 0.6687857 0.6825838 0.7042280 0.7464974 0.7779685 #>  [340,] 0.64522884 0.7134803 0.7372167 0.8764077 0.9741486 1.0392974 1.0905848 #>  [341,] 0.17318192 0.4344757 0.4857725 0.5291707 0.5988933 0.6229404 0.6273307 #>  [342,] 0.40224149 0.4833269 0.5042339 0.5669015 0.5804446 0.6034721 0.6113145 #>  [343,] 0.25732828 0.3229172 0.4931602 0.5142644 0.5404666 0.5586184 0.5758649 #>  [344,] 0.44118523 0.4563260 0.4840751 0.7578517 0.8152281 0.8183491 0.8857718 #>  [345,] 0.42810590 0.4563260 0.4631437 0.6417617 0.6659502 0.7062909 0.7676711 #>  [346,] 0.17136703 0.5031950 0.5225606 0.5601168 0.5906645 0.5996671 0.6072727 #>  [347,] 0.35005205 0.5655464 0.6819647 0.7029357 0.7174457 0.7187308 0.7246776 #>  [348,] 0.37528063 0.3943171 0.4269992 0.5615495 0.6119267 0.6167704 0.6321606 #>  [349,] 0.84500529 0.9724347 1.0467427 1.1489887 1.1878251 1.2489750 1.2511756 #>  [350,] 0.38763149 0.4407847 0.4545905 0.4624659 0.4684449 0.4732793 0.5228951 #>  [351,] 0.95764644 1.3615457 1.4108821 1.5248635 1.5860636 1.6217466 1.7271510 #>  [352,] 0.60043966 0.6230444 0.6888276 0.7829242 0.8064713 0.8338613 0.8362069 #>  [353,] 0.36055055 0.3836838 0.5176481 0.5203137 0.6071910 0.6135362 0.6698722 #>  [354,] 0.49138077 0.6208565 0.7221109 0.7496356 0.7578517 0.7949448 0.8029376 #>  [355,] 0.61429030 0.6211695 0.6563429 0.6982256 0.7521475 0.8270865 0.9149978 #>  [356,] 0.95925206 1.1608518 1.2249716 1.2282700 1.4298206 1.4418256 1.4505299 #>  [357,] 0.34641275 0.4071556 0.6277187 0.6635607 0.6948244 0.7417024 0.7554322 #>  [358,] 0.37198962 0.3864031 0.5176666 0.5225606 0.5545292 0.5870995 0.5888366 #>  [359,] 0.58627170 0.6230444 0.6452471 0.7015320 0.8733523 0.9777953 0.9926123 #>  [360,] 0.24157650 0.2608568 0.3075040 0.3657443 0.4325758 0.4459570 0.4491683 #>  [361,] 0.53927956 0.5756609 0.6593261 0.7103708 0.7414109 0.7523980 0.8006531 #>  [362,] 0.43391574 0.5693601 0.6460765 0.7042639 0.7397000 0.8173817 0.8190748 #>  [363,] 0.35015508 0.3741200 0.4603551 0.5231295 0.5704168 0.5704249 0.5882026 #>  [364,] 0.64462719 0.7330033 0.9043918 0.9179242 0.9336096 0.9827761 0.9992968 #>  [365,] 0.75628496 0.8495078 0.8670282 0.8689152 0.9749622 0.9766779 0.9823692 #>  [366,] 0.74788077 0.8463139 0.8623662 0.8945547 0.8995558 1.0413868 1.0545975 #>  [367,] 0.26780405 0.3895409 0.4636101 0.4719325 0.4929738 0.5305033 0.5307431 #>  [368,] 0.49382892 0.5619761 0.6593261 0.6713175 0.6902761 0.6966789 0.7094681 #>  [369,] 0.61716276 0.6508003 0.6563429 0.7798511 0.7808489 0.7866576 0.7874363 #>  [370,] 0.34177648 0.6633839 0.7720374 0.8266824 0.8908372 0.9699346 0.9966640 #>  [371,] 0.33801447 0.4201246 0.4578096 0.4819769 0.5250051 0.5423291 0.5546237 #>  [372,] 0.41875004 0.4763184 0.5126225 0.5720617 0.6169266 0.6461097 0.6978403 #>  [373,] 0.76800561 0.7840686 0.8045325 0.8838494 0.8901628 0.8990052 0.9572398 #>  [374,] 0.75136221 0.9362715 1.1261287 1.1379489 1.1497601 1.1953332 1.2592386 #>  [375,] 0.29373044 0.4296327 0.4595382 0.4677693 0.5287560 0.6074936 0.6420046 #>  [376,] 0.46217533 0.4942628 0.4983274 0.5462977 0.6161980 0.7013665 0.7015580 #>  [377,] 0.30844740 0.3693023 0.3821711 0.4636101 0.4790694 0.4981114 0.5151640 #>  [378,] 0.24850381 0.3664199 0.4109456 0.4889477 0.5860767 0.5870995 0.6048515 #>  [379,] 0.79189538 0.8983704 0.9497039 1.0040368 1.0284043 1.0573054 1.0605671 #>  [380,] 0.20888352 0.3245844 0.4696115 0.5492670 0.5495654 0.5981923 0.6411276 #>  [381,] 0.45820339 0.4759318 0.4868108 0.4929879 0.4947816 0.4981386 0.5029787 #>  [382,] 0.36615464 0.4987424 0.4997815 0.5633176 0.5914730 0.5923912 0.6362516 #>  [383,] 0.91391626 0.9598573 1.0016504 1.0582589 1.1089170 1.1709128 1.2265636 #>  [384,] 0.27473942 0.7483658 0.8248381 0.8581475 0.8649329 0.9528830 1.0264302 #>  [385,] 0.25564934 0.2769709 0.3777125 0.4305316 0.5313647 0.6546921 0.7354276 #>  [386,] 0.29230067 0.3286251 0.5559795 0.6936359 0.7016651 0.7514979 0.7932342 #>  [387,] 0.44118523 0.4631437 0.6503266 0.7698617 0.9740158 0.9956570 1.0132370 #>  [388,] 0.49097643 0.5506696 0.6139956 0.6312037 0.6453357 0.6668508 0.6731733 #>  [389,] 0.41166195 0.4404673 0.5056536 0.5149787 0.5154467 0.5406022 0.5520172 #>  [390,] 0.26610248 0.2839152 0.4449723 0.5425900 0.5578180 0.6219528 0.6370323 #>  [391,] 0.75517504 0.7723181 0.8065900 0.8502117 0.8545616 0.9260004 0.9826079 #>  [392,] 0.31499425 0.5347940 0.6426890 0.6429713 0.6450839 0.6669177 0.6844864 #>  [393,] 0.43705634 0.5903262 0.6009966 0.7913458 0.8672894 0.9413523 1.0223127 #>  [394,] 0.64483600 0.6525865 0.6976818 0.7363154 0.8002869 0.8361220 0.8563938 #>  [395,] 0.31559434 0.6643795 0.6787231 0.7690992 0.8116862 0.8468605 0.8698276 #>  [396,] 0.20550343 0.3668317 0.4101305 0.4245112 0.4463518 0.4708458 0.4916165 #>  [397,] 0.18697600 0.2695803 0.3702227 0.4699170 0.5993502 0.5994176 0.5998461 #>  [398,] 0.29373044 0.3446270 0.4562323 0.5497444 0.6459957 0.6490334 0.6603118 #>  [399,] 0.65400625 0.7646623 0.7971747 0.8008353 0.8227845 0.8449739 0.8771934 #>  [400,] 0.38474883 0.4423559 0.5199864 0.5621799 0.5631742 0.5685745 0.5844964 #>  [401,] 0.37334771 0.5669541 0.6266748 0.6299624 0.7621527 0.7819104 0.7840686 #>  [402,] 0.28546131 0.4554618 0.4667941 0.5038547 0.5436614 0.5531315 0.6262212 #>  [403,] 0.49423771 0.7807277 0.7911324 0.7919207 0.8096671 0.8209923 0.8406419 #>  [404,] 0.36148249 0.3900983 0.4678737 0.4936388 0.5221780 0.5552746 0.5760931 #>  [405,] 0.35822829 0.6776126 0.7094866 0.7466841 0.7533527 0.7584077 0.7897788 #>  [406,] 0.84310984 0.8798585 0.9394858 0.9404797 0.9633205 0.9670616 1.0002061 #>  [407,] 0.42070511 0.4933400 0.5002472 0.5159829 0.6180409 0.6266748 0.6488143 #>  [408,] 0.62489237 0.6897379 0.7172686 0.7569454 0.7891132 0.7993421 0.8153877 #>  [409,] 0.81276323 0.8777608 0.9701075 0.9812265 1.0211290 1.0222164 1.1265965 #>  [410,] 0.55541501 0.6258560 0.8165134 1.0588150 1.1575399 1.1592611 1.1922072 #>  [411,] 0.79675070 0.8238955 0.8742803 0.8873789 0.9100372 0.9189333 0.9364915 #>  [412,] 0.76769489 0.8519251 0.9727588 1.0397466 1.3176880 1.3264168 1.3444716 #>  [413,] 0.45445774 0.6036394 0.6252131 0.6419102 0.6715846 0.6956225 0.7056913 #>  [414,] 0.49126617 0.6060959 0.6448073 0.6448360 0.6983015 0.7197324 0.7206705 #>  [415,] 0.39445494 0.4495041 0.4690126 0.5584415 0.5865362 0.6718452 0.7108417 #>  [416,] 0.50296629 0.5399085 0.5501971 0.6113103 0.6376368 0.6393994 0.7081441 #>  [417,] 0.25732828 0.3315103 0.5014639 0.5025302 0.5417839 0.5508617 0.5514610 #>  [418,] 0.42249267 0.8382128 0.8608219 0.9061576 0.9111203 0.9813843 0.9871218 #>  [419,] 0.20000492 0.3494797 0.3931327 0.4028479 0.4357955 0.4389403 0.4553270 #>  [420,] 0.29650164 0.4415133 0.4561043 0.4634407 0.5303329 0.5754762 0.6538907 #>  [421,] 0.67714969 0.8733538 0.8964939 1.0016504 1.1087119 1.2251280 1.2383282 #>  [422,] 0.35747588 0.4573762 0.4773304 0.5291707 0.6414353 0.6787061 0.6913417 #>  [423,] 0.41775747 0.4701926 0.4709967 0.5130926 0.6422240 0.6423078 0.6524806 #>  [424,] 0.85021170 0.9728832 1.0085030 1.0395545 1.0446848 1.0557861 1.0672304 #>  [425,] 0.35054712 0.4248052 0.5334679 0.5454910 0.5981923 0.6602953 0.7033212 #>  [426,] 0.41601608 0.4272115 0.4892146 0.5011020 0.5342211 0.5525882 0.6483288 #>  [427,] 0.35167193 0.3733621 0.4570082 0.5634618 0.5692287 0.5722573 0.6132824 #>  [428,] 0.34462700 0.3836838 0.4595382 0.4928038 0.5100259 0.6198197 0.6951443 #>  [429,] 0.29391951 0.5339224 0.7037705 0.7121532 0.7338909 0.7851809 0.8006531 #>  [430,] 0.36043811 0.6064083 0.7853899 0.8334970 0.8662027 0.8897205 0.8938963 #>  [431,] 0.69292063 0.7131670 0.7286231 0.8173009 0.9194374 0.9255504 0.9522368 #>  [432,] 0.61405593 0.7787198 0.9140566 1.0095770 1.1735254 1.2790258 1.3064622 #>  [433,] 0.52465819 0.6363106 0.6834310 0.7514513 0.8576450 0.8863310 0.9435758 #>  [434,] 0.18697600 0.3659917 0.3752093 0.4533781 0.5092941 0.6135531 0.6642841 #>  [435,] 0.38127462 0.5385692 0.6714740 0.7091851 0.7471739 0.7515485 0.7722963 #>  [436,] 0.34177648 0.4401600 0.7538726 0.8199839 0.8787511 0.8875912 0.9009039 #>  [437,] 0.28557816 0.2896119 0.2988628 0.3573544 0.3796977 0.3850855 0.4271373 #>  [438,] 0.35747588 0.4741428 0.5949773 0.6323623 0.6330370 0.6389746 0.6567827 #>  [439,] 1.11715622 1.2476346 1.2790258 1.3322719 1.4284007 1.4460941 1.4593562 #>  [440,] 0.11940893 0.5011020 0.5222349 0.5430692 0.5802624 0.6448649 0.6919374 #>  [441,] 0.34097264 0.5361913 0.6298053 0.6322302 0.6828277 0.7277178 0.7280781 #>  [442,] 0.28774145 0.4354041 0.4620837 0.5106507 0.6132689 0.6619993 0.6923399 #>  [443,] 0.46908262 0.6585486 0.7191727 0.7277080 0.8305145 0.8662027 0.8669034 #>  [444,] 0.36240687 0.5905339 0.5981160 0.6319032 0.6667065 0.6669177 0.6675078 #>  [445,] 0.77231811 0.9851261 1.0446848 1.1979251 1.2501236 1.4380549 1.4687189 #>  [446,] 0.44743584 0.5909966 0.6482640 0.6963227 0.7409194 0.7768567 0.8147315 #>  [447,] 0.57541405 0.6355147 0.7665603 0.7821943 0.7862931 0.8678232 0.8827589 #>  [448,] 0.45453513 0.5413250 0.5980285 0.6237221 0.6581594 0.6992777 0.7011031 #>  [449,] 0.32669064 0.7596226 0.7720966 0.7916820 0.9185841 0.9267801 0.9452282 #>  [450,] 0.37347159 0.5049356 0.5772835 0.7066247 0.7169133 0.7222277 0.8114842 #>  [451,] 0.36215703 0.3940541 0.5945117 0.6844643 0.7008188 0.7054963 0.7775904 #>  [452,] 0.56233697 0.7042639 0.8251752 0.8698567 0.9224027 0.9595984 0.9610544 #>  [453,] 0.38287441 0.4239390 0.6482640 0.7196261 0.8009001 0.8270137 0.9095490 #>  [454,] 0.83916131 1.0889476 1.2226140 1.3123556 1.4498936 1.5065588 1.5238987 #>  [455,] 0.57055542 0.7676949 1.0241772 1.0286185 1.1045690 1.1336047 1.2588105 #>  [456,] 0.33668945 0.3923662 0.4449353 0.4792366 0.5534742 0.5785733 0.6042255 #>  [457,] 1.53647431 1.6178615 1.6512543 1.7226223 1.7756641 1.8627478 1.8805088 #>  [458,] 0.61727290 0.8220140 0.8445695 0.8508129 0.8528987 0.8639137 0.9325485 #>  [459,] 0.34846949 0.5709510 0.6599498 0.7078336 0.7330033 0.8075759 0.8636713 #>  [460,] 1.14524212 1.2188654 1.2781857 1.3542194 1.4079681 1.6090034 1.7249296 #>  [461,] 0.22123491 0.3114668 0.3538130 0.5207228 0.5209862 0.5731625 0.5754762 #>  [462,] 0.61973630 0.9494569 1.1121380 1.1394969 1.2118634 1.2288078 1.2462952 #>  [463,] 0.29210316 0.4480716 0.5063163 0.5477193 0.6207600 0.7244920 0.7657549 #>  [464,] 0.66905318 0.6708937 0.6978460 0.7040336 0.7308514 0.7986751 0.8245491 #>  [465,] 0.71348035 0.7509035 0.7551603 0.9717438 0.9837804 0.9838602 1.0819567 #>  [466,] 0.75905191 0.8779168 0.9910372 1.0471405 1.0749886 1.1187961 1.1271064 #>  [467,] 0.54210870 0.6165977 0.6643747 0.7111712 0.7175497 0.7301004 0.7730969 #>  [468,] 0.56514304 0.6161242 0.7971747 0.8047540 0.9143065 0.9293016 0.9356823 #>  [469,] 0.62116951 0.6643985 0.6672218 0.6680482 0.6795948 0.7160144 0.7334433 #>  [470,] 0.43893707 0.4639676 0.5049658 0.5277332 0.6142903 0.6366302 0.6449385 #>  [471,] 0.70994389 0.9184007 0.9739637 1.1212719 1.1400991 1.1452421 1.1734676 #>  [472,] 0.10703625 0.3975268 0.4220027 0.4389371 0.5158890 0.5206218 0.5221780 #>  [473,] 0.56702327 0.8752330 0.9027604 0.9080641 0.9129220 0.9322507 0.9333638 #>  [474,] 0.45659317 0.4655799 0.4964106 0.6962288 0.7009999 0.7060645 0.7146333 #>  [475,] 0.45618254 0.5506696 0.5612420 0.6094576 0.6540806 0.6955831 0.7139990 #>  [476,] 0.88441993 1.0570602 1.0968792 1.1582658 1.2374673 1.2634697 1.2973450 #>  [477,] 0.64691897 0.9631873 0.9639582 1.0711266 1.0808411 1.1130650 1.1240179 #>  [478,] 0.26417802 0.2705644 0.3783726 0.3830392 0.3922052 0.3971396 0.4311260 #>  [479,] 0.57318548 0.5984288 0.5989313 0.6090431 0.6154716 0.6323436 0.6563010 #>  [480,] 0.35054712 0.3832952 0.5962302 0.7402190 0.7525725 0.7581105 0.7622566 #>  [481,] 0.52763527 0.6398665 0.6921861 0.7184366 0.7369236 0.7906425 0.8131480 #>  [482,] 0.65993860 0.7131800 0.7988633 0.8641216 0.8992590 0.9042614 0.9184007 #>  [483,] 0.42775260 0.5363482 0.6042255 0.6578652 0.7411959 0.7546979 0.7636264 #>  [484,] 0.44881683 0.5539141 0.6750129 0.6972536 0.7514615 0.7645972 0.7669418 #>  [485,] 0.43464182 0.4790119 0.5216290 0.6956134 0.7012143 0.7698489 0.7879565 #>  [486,] 0.43963382 0.4814051 0.5578032 0.5737495 0.5750448 0.6033637 0.6368990 #>  [487,] 0.30418521 0.3983786 0.4279165 0.6400764 0.7708698 0.7755620 0.8200295 #>  [488,] 1.40983907 1.4360926 1.4830111 1.4998200 1.6123649 1.6836294 1.7249296 #>  [489,] 0.68425947 0.7312608 0.8825166 0.9258225 1.0277990 1.1349683 1.1463213 #>  [490,] 0.32772639 0.4307908 0.4446180 0.4459570 0.4625440 0.4914491 0.5342600 #>  [491,] 0.24201294 0.3362537 0.3983924 0.4597303 0.4711941 0.4876246 0.5080557 #>  [492,] 0.16369180 0.2759465 0.2813778 0.2896119 0.3495367 0.3643278 0.3971396 #>  [493,] 0.11974982 0.2956964 0.3531541 0.4497023 0.4809946 0.4956834 0.5731456 #>  [494,] 0.54281586 0.7507016 0.7520920 0.7609070 0.7646252 0.8153496 0.9107875 #>  [495,] 0.34084741 0.4138856 0.4271373 0.4681658 0.4789620 0.5049328 0.5065014 #>  [496,] 0.38672767 0.4379395 0.4994565 0.5671212 0.6149567 0.6448073 0.6677660 #>  [497,] 0.39321579 0.4929879 0.5363539 0.5680632 0.6139790 0.6212663 0.6483283 #>  [498,] 0.35065148 0.4970802 0.5264252 0.5447677 0.5803351 0.7658133 0.8221483 #>  [499,] 1.06072712 1.1588054 1.2317703 1.2682641 1.2683999 1.2692907 1.3062797 #>  [500,] 0.39405412 0.4983954 0.5166758 0.5894445 0.6710525 0.7275147 0.7867517 #>  [501,] 0.18013526 0.3331009 0.5610336 0.5680026 0.6396652 0.6588329 0.7003871 #>  [502,] 0.46557987 0.5038547 0.5827236 0.6261052 0.6821761 0.6849759 0.6956455 #>  [503,] 0.34040762 0.4913808 0.5344756 0.6127803 0.6496542 0.7339786 0.7746826 #>  [504,] 0.48992050 0.8142854 0.8621548 0.8672894 0.8954281 0.9149062 1.0569230 #>  [505,] 0.23394394 0.3861071 0.4703700 0.5677295 0.6015055 0.6103876 0.6467122 #>  [506,] 0.66906314 0.6751415 0.6801455 0.7045991 0.8085477 0.8327391 0.8770906 #>  [507,] 0.88737890 1.0997228 1.1164011 1.1833907 1.1974072 1.2169764 1.2212561 #>  [508,] 0.31159392 0.3641150 0.4516517 0.4625440 0.4664921 0.5404303 0.5411897 #>  [509,] 0.27697085 0.2929649 0.4804653 0.5107848 0.5279865 0.6191184 0.6193931 #>  [510,] 0.76429843 0.9493937 0.9743492 0.9810488 1.0498775 1.1592611 1.1662370 #>  [511,] 0.32520845 0.3613223 0.3947316 0.4747412 0.5125007 0.5654712 0.5759288 #>  [512,] 0.32543437 0.4204392 0.5645974 0.5981146 0.6117691 0.6236082 0.6353335 #>  [513,] 0.88125608 0.9071713 0.9611344 1.0245191 1.0361278 1.0738697 1.1334215 #>  [514,] 0.39234127 0.4096973 0.4201246 0.4251943 0.4520400 0.4843802 0.5522855 #>  [515,] 0.44900317 0.4634407 0.5407477 0.5763734 0.6063604 0.7260918 0.7378094 #>  [516,] 0.36293547 0.4296327 0.4518987 0.4562323 0.4843977 0.5100259 0.6071910 #>  [517,] 0.26438244 0.6084929 0.7254217 0.7848867 0.8226275 0.8640242 0.8751965 #>  [518,] 0.28532947 0.3825694 0.3983786 0.6118515 0.6412445 0.6581594 0.6789707 #>  [519,] 0.32759879 0.3507520 0.4067639 0.5318545 0.5661919 0.6069266 0.6157666 #>  [520,] 0.26048530 0.5466924 0.5810058 0.6052335 0.6171628 0.6665280 0.6717407 #>  [521,] 0.76002877 0.8116333 0.8681844 0.9847550 1.0297510 1.1525605 1.1676207 #>  [522,] 0.24638563 0.3025758 0.3703916 0.4344757 0.4553944 0.4747810 0.4826182 #>  [523,] 0.12389484 0.3666278 0.4249845 0.5154467 0.5207309 0.6082847 0.6412380 #>  [524,] 0.57615778 0.7666079 0.7936587 0.8298455 0.9375756 0.9452178 0.9544123 #>  [525,] 0.76292567 1.0017774 1.0155551 1.0711266 1.0855124 1.0911613 1.0962031 #>  [526,] 0.31159392 0.3951564 0.3960281 0.4761596 0.4801395 0.5216214 0.5317128 #>  [527,] 0.43717820 0.5997357 0.6919621 0.7533527 0.7699842 0.7783428 0.7790400 #>  [528,] 0.49334000 0.5409595 0.5992381 0.6254142 0.7008422 0.7321424 0.7746440 #>  [529,] 0.49144906 0.5028006 0.5434673 0.5663814 0.6315573 0.6550502 0.6569037 #>  [530,] 0.24194670 0.4787234 0.5458883 0.5572480 0.5682598 0.6450839 0.7090014 #>  [531,] 0.31559434 0.4700441 0.4920963 0.8560473 0.8674704 0.9069346 0.9150298 #>  [532,] 0.38127462 0.6867009 0.7131149 0.7168554 0.7773060 0.8560473 0.8856886 #>  [533,] 0.17136703 0.4616882 0.4786221 0.4792738 0.4854285 0.5760725 0.5791022 #>  [534,] 0.28821340 0.3768929 0.5380466 0.6219728 0.6568379 0.7456289 0.7775904 #>  [535,] 0.39470899 0.4204392 0.5349636 0.5472957 0.5779398 0.6335998 0.6427310 #>  [536,] 0.51754813 0.7124520 0.7636264 0.7825435 0.8405046 0.8440759 0.8661887 #>  [537,] 0.40909039 0.5246958 0.5651156 0.6064765 0.6252988 0.6312036 0.6583789 #>  [538,] 0.29043581 0.4312964 0.4446180 0.4936077 0.5146938 0.5663736 0.5736590 #>  [539,] 0.51122266 0.5207689 0.5231295 0.5250051 0.5336354 0.5510590 0.5539141 #>  [540,] 0.47662270 0.5458427 0.5899411 0.6103175 0.6908952 0.7519298 0.7807606 #>  [541,] 0.56702327 0.6437868 0.8377289 0.8580207 0.9081185 0.9103294 0.9143065 #>  [542,] 0.26026174 0.5530942 0.5781695 0.6322190 0.6525015 0.6896952 0.7040240 #>  [543,] 0.56075937 0.6478335 0.7667336 0.8085477 0.8549279 0.8553429 0.8742056 #>  [544,] 0.29949752 0.3275517 0.4118724 0.5236165 0.5337389 0.5607139 0.5792362 #>  [545,] 0.50560827 0.5427254 0.5801038 0.5834891 0.5915343 0.6578652 0.6644083 #>  [546,] 0.43611091 0.5118791 0.5381446 0.5429688 0.5436614 0.5680632 0.6222292 #>  [547,] 0.27593383 0.3507520 0.5341641 0.5342211 0.5964515 0.6052395 0.6113120 #>  [548,] 0.69252124 0.7358341 0.7741121 0.8321165 0.8716701 0.9199923 0.9224866 #>  [549,] 0.33402327 0.4071556 0.5345361 0.5720158 0.6157051 0.6270832 0.6422392 #>  [550,] 0.44917351 0.5287560 0.5495031 0.5982677 0.6198197 0.6698343 0.6899744 #>  [551,] 0.24484892 0.4229555 0.4706235 0.4888860 0.5952771 0.6075180 0.6261479 #>  [552,] 0.80598612 0.8186194 0.8298941 0.8409931 0.8992710 0.9329099 1.0199448 #>  [553,] 0.64524708 0.8064713 0.8498483 0.8668415 1.0083146 1.0547074 1.1871046 #>  [554,] 0.50644169 0.5141749 0.5935717 0.6518540 0.6573349 0.6734925 0.6900354 #>  [555,] 0.45677254 0.5049356 0.5425401 0.5692287 0.6681154 0.6937356 0.7005976 #>  [556,] 0.45339887 0.5601268 0.6451748 0.6455267 0.6911587 0.7347924 0.7906423 #>  [557,] 0.46626237 0.4922907 0.5264252 0.6229340 0.6291464 0.6451748 0.6832727 #>  [558,] 0.44497231 0.4513298 0.4550514 0.5012718 0.5181469 0.5512114 0.5602011 #>  [559,] 0.52850017 0.5787957 0.5862767 0.6128468 0.6680522 0.6883190 0.7183996 #>  [560,] 0.42775260 0.5175481 0.5427254 0.6569535 0.6595359 0.6716049 0.6951443 #>  [561,] 0.51318954 0.5725280 0.5818517 0.6370323 0.7450875 0.7688468 0.8700146 #>  [562,] 0.58701516 0.6260463 0.6361523 0.6709515 0.7497361 0.7564475 0.7741619 #>  [563,] 0.27593383 0.3275988 0.3528415 0.4144384 0.4468093 0.5622781 0.5683815 #>  [564,] 0.26610248 0.4597773 0.5715856 0.5793379 0.5818517 0.6203012 0.6210819 #>  [565,] 0.37147684 0.3752806 0.3934733 0.4135453 0.5751171 0.6213779 0.6596234 #>  [566,] 0.54281586 0.6851990 0.7100188 0.7281727 0.7723297 0.7762419 0.7806314 #>  [567,] 0.24194670 0.5803009 0.6556549 0.7138727 0.7512776 0.7777793 0.7880474 #>  [568,] 0.55425317 0.6050939 0.6900354 0.7301004 0.7440049 0.7911462 0.8406484 #>  [569,] 0.35117481 0.4135453 0.5370229 0.5708168 0.6115714 0.6197958 0.6321606 #>  [570,] 0.27230569 0.3643249 0.3669649 0.4022015 0.4583033 0.4885882 0.5631478 #>  [571,] 1.52219912 1.5991783 1.6265690 1.6332291 1.7718006 1.7995502 1.8059868 #>  [572,] 0.35336720 0.4104462 0.4903238 0.5547930 0.6229684 0.6276588 0.6484134 #>  [573,] 0.47572834 0.5138600 0.6628875 0.6715846 0.6752892 0.6896397 0.6963227 #>  [574,] 0.39337545 0.4766227 0.5465063 0.7848223 0.7978571 0.8648717 0.8689152 #>  [575,] 0.41995504 0.5411832 0.5961560 0.6551350 0.6795948 0.7011057 0.7237330 #>  [576,] 0.50515850 0.5130918 0.6018444 0.6241627 0.6418602 0.6743052 0.6760620 #>  [577,] 0.67328649 0.9962225 0.9997117 1.0569230 1.0815491 1.0855475 1.1632995 #>  [578,] 0.95985729 1.1399182 1.1683508 1.3167519 1.3226590 1.3408213 1.3578525 #>  [579,] 0.49945652 0.5253220 0.5400124 0.5755419 0.5785828 0.5802624 0.6464493 #>  [580,] 0.52087241 0.7222377 0.8345813 0.8493777 0.8671070 0.8681844 0.8689148 #>  [581,] 0.35059583 0.3569313 0.4266498 0.5035998 0.5427113 0.5480638 0.5841539 #>  [582,] 0.57722521 0.6280891 0.6690631 0.6821761 0.6965160 0.7168962 0.7217612 #>  [583,] 0.26048530 0.4633839 0.5860767 0.6152366 0.6390107 0.6473117 0.6620371 #>  [584,] 0.34713540 0.4612195 0.5077196 0.5162817 0.5165609 0.5298608 0.5530475 #>  [585,] 0.49126617 0.5235448 0.6407572 0.6713175 0.6942876 0.7152187 0.7480074 #>  [586,] 0.26417802 0.2726058 0.3378259 0.4724146 0.4765816 0.5521425 0.5559430 #>  [587,] 0.70078136 0.7673578 0.7735822 0.8120287 0.9098886 0.9867142 1.0066147 #>  [588,] 0.45517425 0.5006976 0.6219728 0.7522038 0.7879565 0.7905780 0.8161483 #>  [589,] 0.56075937 0.6112078 0.6166349 0.6680324 0.7212062 0.8641216 1.0098390 #>  [590,] 0.44016004 0.5879350 0.6409911 0.6633839 0.7013665 0.7365333 0.8646713 #>  [591,] 0.26581135 0.3838820 0.3923662 0.4073470 0.4117534 0.4710219 0.4826182 #>  [592,] 0.37835990 0.5750448 0.6003493 0.7276730 0.7580303 0.7829242 0.7939919 #>  [593,] 0.58717444 0.6531673 0.6819751 0.7169133 0.7244539 0.7933092 0.8267837 #>  [594,] 0.36559143 0.4600776 0.4618041 0.5112227 0.5233516 0.5413442 0.5466924 #>  [595,] 0.69531890 0.7414102 0.9132096 0.9178658 1.0431061 1.0441048 1.0491834 #>  [596,] 0.47599965 0.6277012 0.7521209 0.7765854 0.7842128 0.7972031 0.8009001 #>  [597,] 0.55704178 0.6662763 0.6846241 0.8698158 0.9377401 0.9706901 0.9908796 #>  [598,] 0.36615464 0.5073405 0.5765950 0.6437456 0.6775580 0.6891600 0.6925212 #>  [599,] 0.50253020 0.5064417 0.5805766 0.5901949 0.5996534 0.6243219 0.6364947 #>  [600,] 0.61080837 0.6437033 0.8239138 0.8515289 0.8579575 0.8858618 0.8970477 #>  [601,] 0.42810590 0.4840751 0.5547930 0.5941687 0.6468280 0.6503266 0.6786053 #>  [602,] 0.75734933 0.8359095 0.8621293 0.8892553 1.0036065 1.0220619 1.0341512 #>  [603,] 0.33194133 0.4390823 0.5142644 0.5246958 0.5371209 0.5924642 0.6076156 #>  [604,] 0.35005205 0.5042339 0.5851365 0.6014279 0.6778602 0.6832954 0.7194450 #>  [605,] 0.58631958 0.7011057 0.7133602 0.7140281 0.7304903 0.7913458 0.8065874 #>  [606,] 0.35693126 0.4758364 0.4855275 0.5165640 0.5534744 0.5652265 0.5785209 #>  [607,] 0.33402327 0.3464128 0.4882385 0.4991503 0.5688758 0.6882857 0.7094866 #>  [608,] 0.68014551 0.7796754 1.0083438 1.0134183 1.0373805 1.0799154 1.1043739 #>  [609,] 0.61659766 0.6700545 0.6748007 0.8019752 0.8034199 0.8052899 0.8076963 #>  [610,] 0.75628496 0.9300235 0.9356196 0.9854565 0.9867142 1.0350879 1.0450867 #>  [611,] 0.30182090 0.6412445 0.6762218 0.7456638 0.8059456 0.8382252 0.8800025 #>  [612,] 0.19781634 0.3693023 0.5049697 0.5125122 0.5126482 0.5134707 0.5231141 #>  [613,] 1.11103741 1.1243815 1.2427253 1.3327939 1.3873190 1.4263606 1.4356633 #>  [614,] 0.65430105 0.7090011 0.7821943 0.7830770 0.7949184 0.8327096 0.8971017 #>  [615,] 1.16085181 1.2859226 1.3526999 1.5955760 1.6109844 1.6332728 1.6563566 #>  [616,] 0.38941890 0.4369691 0.4423559 0.4501769 0.4776339 0.5766717 0.5818154 #>  [617,] 0.44353495 0.4887455 0.5184546 0.5484931 0.5603051 0.5654712 0.5731456 #>  [618,] 0.37347159 0.4060493 0.6681154 0.6917392 0.7569415 0.8130419 0.8267837 #>  [619,] 0.33704530 0.4303420 0.4497023 0.4685197 0.5818527 0.6229340 0.7207835 #>  [620,] 0.48688762 0.6054965 0.6092661 0.7047627 0.7446502 0.7838449 0.8227845 #>  [621,] 0.41673703 0.4268768 0.4798343 0.5300798 0.5462977 0.5646419 0.6556597 #>  [622,] 0.40517404 0.4575139 0.6930866 0.7210628 0.7251965 0.7387124 0.7868618 #>  [623,] 0.38258829 0.4731610 0.5569863 0.6157051 0.6252131 0.6478287 0.6604803 #>  [624,] 0.58770085 0.6187128 0.6947591 0.6950184 0.7045991 0.7217612 0.7796754 #>  [625,] 0.39284474 0.6933015 0.8586996 0.8749933 0.9644550 1.0213235 1.0611433 #>  [626,] 0.52240618 0.6043040 0.6452288 0.6933099 0.8085487 0.8203647 0.8754795 #>  [627,] 0.38124697 0.5285796 0.5662645 0.6465648 0.6913787 0.6913790 0.7277080 #>  [628,] 0.29276087 0.5224062 0.5618018 0.6918037 0.7569125 0.7779511 0.8019763 #>  [629,] 0.35822829 0.4788052 0.4882385 0.5720158 0.5805749 0.6948244 0.7154066 #>  [630,] 0.28973643 0.3741200 0.4546856 0.4703700 0.5332662 0.5412440 0.5534393 #>  [631,] 0.36043811 0.5863196 0.6166146 0.6964786 0.7153669 0.7249852 0.7456496 #>  [632,] 0.56885825 0.5793379 0.5870513 0.6847814 0.7078320 0.7168971 0.7217780 #>  [633,] 0.23394394 0.2897364 0.4008743 0.5261272 0.5704249 0.6020420 0.6054547 #>  [634,] 0.70065121 0.7332669 0.7438053 0.8209904 0.8607592 0.8812561 0.9160570 #>  [635,] 0.45663568 0.4993909 0.5168119 0.5888597 0.6414985 0.6428881 0.6480470 #>  [636,] 0.25174739 0.5628008 0.6683239 0.7042280 0.7507016 0.8120287 0.8629716 #>  [637,] 0.52431506 0.8462950 0.8556250 0.8844199 0.9179171 0.9784026 1.0083105 #>  [638,] 0.54279192 0.6317799 0.6812063 0.7363367 0.8187412 0.8359095 0.8441111 #>  [639,] 0.25412577 0.4885882 0.5103241 0.5320953 0.5772348 0.6050261 0.6340830 #>  [640,] 0.42086663 0.4339720 0.4515892 0.4608961 0.4993909 0.5031950 0.5054139 #>  [641,] 0.60609586 0.6571765 0.6880096 0.7103708 0.7152187 0.7239493 0.7395066 #>  [642,] 0.92658774 1.1198464 1.1418314 1.1727680 1.3286506 1.3550099 1.4614772 #>  [643,] 0.36634528 0.3858718 0.4736195 0.4978277 0.5854625 0.6658579 0.6687472 #>  [644,] 0.66164744 0.8528987 0.8680384 0.8805055 0.9147241 0.9345116 0.9602465 #>  [645,] 0.45799933 0.4757283 0.4788052 0.5569863 0.5619245 0.6270832 0.7448518 #>  [646,] 0.66297591 0.6812063 0.7722963 0.9831027 1.0036065 1.0342122 1.0733090 #>  [647,] 0.34148306 0.4550514 0.5049729 0.5311704 0.5612501 0.6435010 0.6442239 #>  [648,] 0.32956002 0.4488782 0.4599426 0.4710589 0.6576819 0.6880245 0.6885462 #>  [649,] 0.88677453 0.9134603 0.9140566 0.9419955 0.9779157 1.1620484 1.2224709 #>  [650,] 0.64174675 0.6595560 0.6728136 0.7282510 0.7297418 0.7498807 0.7915471 #>  [651,] 0.38287441 0.4759996 0.5405602 0.6758481 0.7408762 0.7970889 0.9139823 #>  [652,] 0.22123491 0.2589094 0.3983924 0.4373618 0.4510537 0.4656619 0.5003712 #>  [653,] 0.66478370 1.1009156 1.1142933 1.1206992 1.1564630 1.2080584 1.2118634 #>  [654,] 0.28851935 0.4479613 0.5022706 0.5099924 0.6336428 0.7175314 0.7450791 #>  [655,] 0.26085680 0.3121599 0.3277264 0.3641150 0.3960281 0.4142606 0.4520506 #>  [656,] 0.24012601 0.3429393 0.3608692 0.4197467 0.4502519 0.4709967 0.4831061 #>  [657,] 1.14394853 1.1478046 1.2508148 1.2728986 1.3873491 1.3940187 1.4076489 #>  [658,] 0.73218764 0.9131417 0.9576464 1.1022390 1.2016048 1.2294056 1.2593992 #>  [659,] 0.59942135 0.7333890 0.7489757 0.7624862 0.8017545 0.8098474 0.8100819 #>  [660,] 0.56145841 0.6002499 0.6186135 0.6469190 0.7218695 0.7858630 0.8358559 #>  [661,] 0.62866194 0.6355147 0.8187250 0.8504182 0.8796054 0.8796343 0.8873856 #>  [662,] 0.71446560 0.9643287 1.0446029 1.0533370 1.1020664 1.1439485 1.2627950 #>  [663,] 0.33356608 0.4067639 0.4468093 0.4595977 0.4811096 0.5049732 0.5314677 #>  [664,] 0.34998465 0.4492794 0.5677012 0.6092661 0.6555657 0.6608266 0.6680522 #>  [665,] 0.48359199 0.4958289 0.6119267 0.6455267 0.6566531 0.6743180 0.6832727 #>  [666,] 0.66106908 0.9239632 0.9755952 1.0259270 1.0284271 1.0455506 1.0461768 #>  [667,] 0.34329496 0.3547318 0.4491735 0.6157474 0.7113231 0.7210238 0.7565083 #>  [668,] 0.48626450 0.6887247 0.7824257 0.8457980 0.9576185 0.9847045 1.0068689 #>  [669,] 0.34040762 0.6502751 0.7221109 0.7603506 0.7637373 0.7804353 0.8364945 #>  [670,] 0.36240687 0.4329632 0.5166781 0.5823979 0.5898221 0.6420975 0.7214171 #>  [671,] 0.64209755 0.6534237 0.6655560 0.7459050 0.8070511 0.8130369 0.8187250 #>  [672,] 0.17318192 0.4553944 0.4773304 0.5518361 0.5809373 0.5964734 0.6204008 #>  [673,] 0.33442966 0.4152467 0.4493383 0.4510537 0.4597303 0.5780735 0.6061289 #>  [674,] 0.34155495 0.3637277 0.3835472 0.4558231 0.4730177 0.4997876 0.5042114 #>  [675,] 0.31630371 0.3989766 0.5586184 0.5779398 0.5808416 0.5841539 0.6066485 #>  [676,] 0.11131967 0.2919546 0.4170147 0.4405195 0.4475242 0.4593153 0.4644801 #>  [677,] 0.56690154 0.6542839 0.7602277 0.7725507 0.7965212 0.8031524 0.8165751 #>  [678,] 0.40517404 0.4675344 0.6912767 0.8071477 0.8463139 0.8829152 0.8855257 #>  [679,] 0.32270638 0.3614825 0.4518970 0.4565264 0.5158890 0.5217519 0.5573268 #>  [680,] 0.46688452 0.5167508 0.5228851 0.5342897 0.5926795 0.5968356 0.6075152 #>  [681,] 0.36293547 0.4924199 0.4944697 0.5271496 0.5293862 0.5826599 0.5841860 #>  [682,] 0.54060538 0.7314902 0.7461115 0.7830770 0.8759649 0.8784282 0.9291199 #>  [683,] 0.32669064 0.6612046 0.7604295 0.8185375 0.8191296 0.8510780 0.8704606 #>  [684,] 0.43963382 0.5049732 0.5457092 0.6039191 0.6261896 0.6589133 0.7060820 #>  [685,] 0.47694982 0.5290640 0.7646844 0.8459208 0.8956212 0.9304820 0.9355625 #>  [686,] 0.38645058 0.4554910 0.5136182 0.5317034 0.6530180 0.7270387 0.7544350 #>  [687,] 0.35352044 0.4533781 0.5536697 0.5850655 0.5935717 0.5998461 0.6267351 #>  [688,] 0.16005995 0.2759465 0.2852025 0.2963973 0.3850855 0.4040801 0.4106404 #>  [689,] 0.72751468 0.7394909 0.8209923 0.8321165 0.8553546 0.8564536 0.8759223 #>  [690,] 0.84255293 0.9266826 1.0670871 1.2097252 1.2309256 1.2572768 1.2859596 #>  [691,] 0.61080837 0.6543010 0.9088477 0.9112849 0.9266826 0.9416712 0.9784726 #>  [692,] 0.29889180 0.3962974 0.4501769 0.4696115 0.4709134 0.5035998 0.5104001 #>  [693,] 0.53789777 0.7237297 0.7847008 0.8212229 0.8616711 0.8622247 0.8704606 #>  [694,] 0.47181807 0.6117691 0.7275827 0.7593611 0.7652019 0.7745349 0.7901431 #>  [695,] 0.35117481 0.3714768 0.4269992 0.4711332 0.4997697 0.5585444 0.5751053 #>  [696,] 0.30072160 0.3166425 0.3947316 0.4205612 0.4261663 0.4293017 0.4338313 #>  [697,] 0.68343095 0.7027524 0.7172097 0.7984283 0.8341679 0.8410788 0.8848979 #>  [698,] 0.12538428 0.2506452 0.3831456 0.3982250 0.4017587 0.4223222 0.4958255 #>  [699,] 0.35479316 0.4986226 0.5043588 0.5313647 0.6459516 0.7200898 0.7308514 #>  [700,] 0.54539001 0.5671212 0.5852646 0.5853492 0.6141009 0.6343111 0.6699257 #>  [701,] 0.45736723 0.5903262 0.7472407 0.7505180 0.7827151 0.8057490 0.8142854 #>  [702,] 0.34954486 0.3505958 0.4758364 0.4890031 0.4890486 0.4993365 0.5293741 #>  [703,] 0.51610225 1.0267961 1.0959316 1.1320192 1.3344945 1.4097979 1.4244303 #>  [704,] 0.55863325 0.8814798 0.9797329 0.9823797 1.0197228 1.0890111 1.1004447 #>  [705,] 0.35774466 0.4032576 0.4684372 0.4687094 0.4692074 0.4992121 0.5502237 #>  [706,] 0.20888352 0.3067290 0.3962974 0.5334679 0.5345975 0.5818154 0.5866596 #>  [707,] 0.33263549 0.4339157 0.5919427 0.5975394 0.6445842 0.6627853 0.6986410 #>  [708,] 0.37565769 0.5452041 0.5473182 0.5700936 0.6286015 0.6322190 0.6706868 #>  [709,] 0.37901107 0.4707106 0.4787234 0.4894403 0.5386406 0.5530942 0.5803009 #>  [710,] 0.14669973 0.2787914 0.4357955 0.4426173 0.5324888 0.5748610 0.6180380 #>  [711,] 0.49032379 0.5042372 0.5282224 0.5506099 0.5533816 0.5672505 0.6115304 #>  [712,] 0.34715580 0.3693359 0.5220574 0.5568382 0.5795153 0.7027524 0.7446502 #>  [713,] 0.45437109 0.5187645 0.5207228 0.5407477 0.5942655 0.6559608 0.6607864 #>  [714,] 0.26202615 0.4752905 0.4900548 0.5389260 0.5802730 0.5915257 0.6031179 #>  [715,] 0.32862509 0.5573268 0.5909023 0.5984288 0.6345245 0.6761820 0.6866769 #>  [716,] 1.02433032 1.0286185 1.3176880 1.5036463 1.5327795 1.6170477 1.6534214 #>  [717,] 0.50635260 0.6863917 0.7760290 0.8401606 0.8544909 0.8860551 1.0409387 #>  [718,] 0.32543437 0.3947090 0.3994445 0.5791632 0.6268271 0.6676544 0.6941255 #>  [719,] 0.25074555 0.4716839 0.5934938 0.7438635 0.8711604 0.8877085 0.9479475 #>  [720,] 0.33375488 0.5161639 0.5344756 0.5654631 0.5841860 0.6113934 0.6502751 #>  [721,] 0.52528065 0.6567433 0.6806852 0.7202064 0.7506226 0.8184130 0.8643049 #>  [722,] 0.47353190 0.5570418 0.6328771 1.1101781 1.1375539 1.1672308 1.2502036 #>  [723,] 0.26202615 0.4399604 0.4584128 0.4630024 0.4765231 0.4768761 0.4908760 #>  [724,] 0.45445774 0.6011990 0.7961897 0.8062714 0.8208983 0.8302785 0.8807189 #>  [725,] 0.53011055 0.5910516 0.6260463 0.7790400 0.8751965 0.8966681 0.9031294 #>  [726,] 0.72997800 0.8873856 0.9786215 1.1409917 1.1480994 1.1567272 1.1947779 #>  [727,] 0.44743584 0.5138600 0.5619245 0.7154066 0.7277129 0.7900411 0.8194933 #>  [728,] 0.52797333 0.5973966 0.6093643 0.7074128 0.7755693 0.8231754 0.8415867 #>  [729,] 0.40977967 0.4796084 0.5276353 0.5484931 0.5759288 0.6546835 0.6992192 #>  [730,] 0.35065148 0.4662624 0.5083395 0.5452345 0.5765576 0.6294779 0.6437033 #>  [731,] 0.31164690 0.3465442 0.3692782 0.3971645 0.3982250 0.4322265 0.4408097 #>  [732,] 0.41974673 0.4573762 0.4741428 0.5130926 0.5506081 0.5559430 0.5682598 #>  [733,] 0.23960045 0.3231343 0.4142606 0.4307306 0.4516517 0.4708458 0.4768761 #>  [734,] 0.20668934 0.2204746 0.3352395 0.3552241 0.3692782 0.4017587 0.4837072 #>  [735,] 0.40604925 0.5772835 0.5871744 0.7115746 0.7379574 0.7826453 0.7971534 #>  [736,] 0.38889572 0.4677693 0.4843977 0.5536697 0.5846864 0.6243219 0.6490334 #>  [737,] 0.47752675 0.5530309 0.5581074 0.6595254 0.6926248 0.7199403 0.8012651 #>  [738,] 0.35250389 0.3755863 0.3931327 0.4087444 0.4408868 0.4457550 0.4489236 #>  [739,] 0.50823618 0.5647361 0.5791632 0.5981146 0.6185078 0.6224050 0.7008235 #>  [740,] 0.57615778 0.6107461 0.6300107 0.8809123 0.9191083 0.9812427 0.9838289 #>  [741,] 0.42295551 0.4263607 0.4597089 0.4651665 0.5079031 0.5708228 0.6315573 #>  [742,] 0.29569639 0.3370453 0.3773546 0.3883122 0.4692074 0.5069494 0.5603051 #>  [743,] 0.43053157 0.4444031 0.5043588 0.5107848 0.5748610 0.5845553 0.6213120 #>  [744,] 0.47631836 0.4888860 0.5042114 0.5897586 0.6199403 0.6267215 0.6363372 #>  [745,] 0.60043966 0.6600636 0.8608219 0.9534265 0.9968662 1.0249290 1.0752448 #>  [746,] 0.36618627 0.3849084 0.3876315 0.4573811 0.4583033 0.4792738 0.4872928 #>  [747,] 0.50635260 0.5456036 0.5959394 0.6901070 0.9303365 0.9326100 0.9362715 #>  [748,] 0.66297591 0.7124520 0.7373227 0.7515485 0.7730969 0.7893731 0.8215301 #>  [749,] 1.14780457 1.6038861 1.8427790 1.9416874 1.9693325 2.0760822 2.0910741 #>  [750,] 0.39695292 0.4444031 0.4611113 0.5279865 0.6027009 0.6323436 0.6546921 #>  [751,] 0.52045984 0.8425529 1.0905442 1.1022602 1.1422607 1.1599784 1.2385868 #>  [752,] 0.56514304 0.7646623 0.7864618 0.8056535 0.8064677 0.8099435 0.8292952 #>  [753,] 0.43160166 0.4962557 0.5111905 0.5796677 0.5931478 0.6608780 0.6750129 #>  [754,] 0.35223605 0.5361913 0.5683477 0.6095777 0.6110790 0.6117159 0.6456163 #>  [755,] 0.66164744 0.7342847 0.7698617 0.8366933 0.9201586 0.9338262 0.9637788 #>  [756,] 0.94725699 1.1891447 1.3003933 1.4143057 1.4376412 1.5155486 1.6426305 #>  [757,] 0.71754967 0.7903283 0.8224968 0.8620429 0.9027133 0.9107875 0.9494858 #>  [758,] 0.40917951 0.5975137 0.6568544 0.6947591 0.7792013 0.8059861 0.8423392 #>  [759,] 0.76292567 1.1601558 1.1844603 1.2223999 1.2355192 1.2621326 1.2788077 #>  [760,] 0.61074612 0.6227784 0.6319838 0.7613379 0.7655260 0.7840758 0.7997061 #>  [761,] 0.27138544 0.3593593 0.3756577 0.5547267 0.5722622 0.6039047 0.6336948 #>  [762,] 0.41601608 0.4262079 0.4863711 0.5306412 0.5341641 0.5389558 0.5780735 #>  [763,] 0.37505725 0.3783283 0.4389403 0.4426173 0.4457550 0.5106507 0.5499238 #>  [764,] 0.82216152 0.8777608 0.9803811 1.0854935 1.1054741 1.1261287 1.1391287 #>  [765,] 0.54205914 0.6933015 0.7207835 0.7806046 0.8362905 0.8498370 0.8642246 #>  [766,] 1.30797205 1.3096376 1.3186475 1.4244420 1.4557399 1.4739963 1.5201327 #>  [767,] 0.11940893 0.5525882 0.5744406 0.5921864 0.6151514 0.6451292 0.6464493 #>  [768,] 0.49097643 0.5776895 0.6003493 0.6491442 0.7279610 0.7851036 0.8484805 #>  [769,] 0.76658008 0.8331004 0.8411093 0.8521470 0.8621548 0.8661589 0.8811937 #>  [770,] 0.23960045 0.3162256 0.4101305 0.4399604 0.5207913 0.5219402 0.5379774 #>  [771,] 0.35935930 0.4333277 0.4565932 0.4834678 0.5158029 0.5452041 0.6261052 #>  [772,] 0.37689287 0.4770330 0.7522038 0.7636929 0.8536118 0.8807189 0.9742971 #>  [773,] 0.45572107 0.8277994 0.8563715 0.9333638 0.9915184 0.9987359 1.0148538 #>  [774,] 0.26711949 0.3417279 0.4480716 0.4814961 0.5423040 0.5762949 0.7686097 #>  [775,] 0.45453513 0.6045534 0.6267140 0.6597671 0.7095416 0.7620320 0.7922083 #>  [776,] 0.30574429 0.4288310 0.5429100 0.6269027 0.6721443 0.6732248 0.6761699 #>  [777,] 0.48626450 0.5934268 0.7119856 0.8024217 0.8263012 0.8447904 0.8683187 #>  [778,] 0.58627170 0.7455531 0.7848867 0.8061131 0.8142133 0.8556844 0.9675981 #>  [779,] 0.45549100 0.4693793 0.4949200 0.6013482 0.6262245 0.6912767 0.7079499 #>  [780,] 0.27752957 0.3913380 0.4493383 0.4863711 0.4984892 0.5005513 0.5047864 #>  [781,] 1.01240504 1.0842512 1.1865323 1.2009058 1.2029245 1.2630841 1.2975388 #>  [782,] 0.34042616 0.3897748 0.4110703 0.5165421 0.5221900 0.5621799 0.6023652 #>  [783,] 0.21845515 0.3747031 0.4325758 0.4741816 0.4821145 0.5874376 0.5879229 #>  [784,] 0.21845515 0.3121599 0.3657443 0.3951564 0.4367433 0.5411897 0.5780953 #>  [785,] 0.43464182 0.5222593 0.6861310 0.6971393 0.7525811 0.8890549 0.9045178 #>  [786,] 0.22218065 0.3213256 0.6166349 0.6286015 0.6672124 0.7085727 0.7784858 #>  [787,] 0.34042616 0.3533206 0.4667926 0.5255391 0.6302666 0.6955831 0.7403501 #>  [788,] 0.44950410 0.4497899 0.4518392 0.4974701 0.5228851 0.5787882 0.5993098 #>  [789,] 0.40262400 0.4118724 0.4915695 0.5691353 0.5719801 0.5894445 0.5945117 #>  [790,] 0.31096021 0.3245218 0.3321369 0.3830392 0.4363952 0.4724146 0.4876246 #>  [791,] 0.72542166 0.8213870 0.8966681 1.0124895 1.0738002 1.1702486 1.1708256 #>  [792,] 0.33116647 0.4207051 0.4345261 0.5404123 0.5413857 0.5669541 0.6217337 #>  [793,] 0.27752957 0.2897663 0.2952101 0.3532739 0.3573544 0.4138856 0.4698365 #>  [794,] 0.33300185 0.3973417 0.4570082 0.4889477 0.5004074 0.5395369 0.5425401 #>  [795,] 0.41703370 0.5672420 0.6953189 0.8589529 0.8708676 0.8828636 0.9012297 #>  [796,] 0.26314586 0.3008637 0.3106681 0.3415550 0.4684444 0.4770600 0.5115793 #>  [797,] 0.50952156 0.5614584 0.5834634 0.6182936 0.6822003 0.7237330 0.7294409 #>  [798,] 0.77871976 0.8867745 0.9966640 1.0166002 1.0590388 1.0685822 1.0862960 #>  [799,] 0.35352044 0.3888957 0.5420740 0.5504663 0.5996534 0.6135531 0.6573349 #>  [800,] 0.57960198 0.8116333 0.9280811 0.9849208 1.1029505 1.1457090 1.1467080 #>  [801,] 0.32444853 0.3471354 0.4419613 0.4561043 0.4610676 0.4756494 0.4985506 #>  [802,] 0.35852339 0.4263607 0.4501696 0.5036597 0.6829681 0.6945506 0.7397598 #>  [803,] 0.51610225 0.7456638 0.9104393 1.0046194 1.0561417 1.1022630 1.1054157 #>  [804,] 0.76784621 0.8185375 0.9267801 0.9956467 1.0370397 1.2436124 1.2737303 #>  [805,] 0.44059220 0.5839564 0.6095878 0.6395483 0.6588329 0.6668508 0.6669111 #>  [806,] 0.33290079 0.5193202 0.5221833 0.5366964 0.5837792 0.5887753 0.6184469 #>  [807,] 0.26314586 0.3624926 0.4364114 0.4959404 0.4980540 0.4997876 0.5316095 #>  [808,] 0.43217442 0.5934938 0.6682075 0.7869955 0.7905780 0.9970243 1.0038611 #>  [809,] 1.16137639 1.2833851 1.3552978 1.5082891 1.6002515 1.7301343 1.7377789 #>  [810,] 0.35569337 0.4041247 0.4827117 0.4993365 0.5187645 0.5209862 0.5440199 #>  [811,] 0.21472878 0.4199550 0.4447574 0.5128345 0.6052335 0.6152366 0.6508003 #>  [812,] 0.28440992 0.3864506 0.4816355 0.6013482 0.6167704 0.6319032 0.6340830 #>  [813,] 0.70403357 0.9088285 0.9344096 0.9434363 0.9481525 0.9686601 0.9941508 #>  [814,] 1.10927189 1.2595713 1.2709843 1.3773606 1.3937384 1.3938095 1.4948830 #>  [815,] 0.36555032 0.4293017 0.4488711 0.4987424 0.5095843 0.5597723 0.5709205 #>  [816,] 0.56473612 0.6027353 0.6236082 0.6676544 0.6732865 0.8516135 0.8527875 #>  [817,] 0.45339887 0.4835920 0.5448988 0.5586989 0.7127515 0.7260867 0.7858630 #>  [818,] 0.66439847 0.8182388 0.9010624 0.9197660 0.9299567 0.9463128 0.9464726 #>  [819,] 0.33116647 0.3525039 0.3750573 0.4354041 0.4982236 0.5135838 0.5290668 #>  [820,] 0.71446560 0.8777564 0.9746028 0.9913176 1.0798188 1.1143837 1.1963472 #>  [821,] 0.14644027 0.3109602 0.3495367 0.3526669 0.3532739 0.3765656 0.4218332 #>  [822,] 0.15233236 0.3831456 0.4298587 0.4731351 0.5403333 0.5661614 0.5728284 #>  [823,] 0.58239787 0.7289464 0.7899618 0.8130369 0.8198325 0.8214114 0.8635750 #>  [824,] 0.62994871 0.7121532 0.8768730 0.9413705 0.9629408 1.0152308 1.1142352 #>  [825,] 0.57274545 0.7940196 0.8173817 0.8281173 0.9179836 0.9211146 0.9610544 #>  [826,] 0.24157650 0.3226832 0.3747031 0.4367433 0.4722681 0.4738210 0.4786221 #>  [827,] 0.30182090 0.6118515 0.7849604 0.8406419 0.8407028 0.8462045 0.8585687 #>  [828,] 0.34172795 0.5005688 0.5569271 0.5660536 0.6011946 0.6173882 0.6207600 #>  [829,] 0.95925206 1.3367526 1.4134495 1.4266580 1.4338886 1.4488678 1.5053736 #>  [830,] 0.14669973 0.3783283 0.3901603 0.4553270 0.5845553 0.6058406 0.6131547 #>  [831,] 0.53804149 0.5605417 0.6525015 0.6687857 0.7095232 0.7520920 0.8004521 #>  [832,] 0.34550017 0.4012769 0.4759318 0.5598117 0.5834369 0.5841545 0.6259169 #>  [833,] 0.16824860 0.4958255 0.5343016 0.5661614 0.5754340 0.6228073 0.6620431 #>  [834,] 0.27230569 0.3661863 0.3703916 0.3796669 0.3963773 0.3987328 0.4109428 #>  [835,] 0.76002877 0.8322685 0.9894998 1.2930661 1.3584155 1.3612673 1.3776066 #>  [836,] 0.24049238 0.5870513 0.7183615 0.7199403 0.7563848 0.7906669 0.9041896 #>  [837,] 0.46844439 0.5148053 0.5341162 0.5570542 0.5576495 0.5746542 0.5807157 #>  [838,] 0.61547163 0.7361889 0.7438053 0.9040108 0.9288750 0.9411601 0.9432134 #>  [839,] 0.71572490 0.7363154 0.7755693 0.9810488 1.0028669 1.0251768 1.0374264 #>  [840,] 0.24012601 0.3033335 0.3537112 0.3920492 0.4475242 0.4866599 0.5029787 #>  [841,] 0.40180906 0.5467499 0.6659502 0.7118689 0.7160324 0.7170773 0.7361901 #>  [842,] 0.47115533 0.5282224 0.5380951 0.5840682 0.6589651 0.6740432 0.6791516 #>  [843,] 0.63001065 0.7936587 0.8936931 0.9466404 1.0086060 1.1030572 1.1301727 #>  [844,] 0.39337545 0.5899411 0.6485464 0.7574435 0.7779471 0.8100517 0.8635750 #>  [845,] 0.44278904 0.4978277 0.5024221 0.5177153 0.5238067 0.5352654 0.5497003 #>  [846,] 0.75460822 1.1162043 1.1209585 1.2100491 1.3018919 1.3113957 1.3299731 #>  [847,] 0.20184663 0.3003824 0.4497899 0.5837792 0.5865362 0.6109501 0.6113103 #>  [848,] 0.64919255 0.8345369 0.8603771 0.9169258 0.9355625 1.0967533 1.1375266 #>  [849,] 0.19484835 0.3702368 0.3830447 0.3838986 0.4317216 0.4376664 0.4600776 #>  [850,] 0.28242921 0.3380145 0.4520400 0.5971396 0.6046006 0.6394313 0.6563004 #>  [851,] 0.40778994 0.4091795 0.7182944 0.8115553 0.8323121 0.8492034 0.8562963 #>  [852,] 0.44066863 0.4435350 0.4492541 0.4608961 0.4766352 0.5125007 0.5127298 #>  [853,] 0.40503205 0.5851365 0.6034721 0.6103412 0.6728448 0.6740432 0.6834661 #>  [854,] 0.51262245 0.5870152 0.5897586 0.6377386 0.7180589 0.7785425 0.8273197 #>  [855,] 0.34329496 0.4394551 0.5569271 0.5590979 0.6313286 0.6698343 0.7432620 #>  [856,] 0.57055542 0.8519251 1.0243303 1.0813860 1.4919775 1.5085276 1.5340665 #>  [857,] 0.34226539 0.3548574 0.3838986 0.4214968 0.5029903 0.5165421 0.5330666 #>  [858,] 0.49271844 0.5472957 0.6027353 0.6268271 0.6353335 0.7008235 0.7388877 #>  [859,] 0.75136221 0.9455791 0.9464726 1.1567508 1.2555792 1.2561584 1.2815779 #>  [860,] 0.48745778 0.5318891 0.6182936 0.6608780 0.6869719 0.7033212 0.7370191 #>  [861,] 0.32832891 0.3624926 0.3865429 0.5455971 0.6094534 0.6258549 0.6567186 #>  [862,] 0.30750399 0.3226832 0.4307908 0.4508884 0.4520506 0.4616882 0.4657123 #>  [863,] 0.41683776 0.5403055 0.5456036 0.6863917 0.6983057 0.7204711 0.8022711 #>  [864,] 0.24049238 0.5530309 0.6006815 0.6612791 0.6847814 0.7218372 0.9166190 #>  [865,] 0.19200385 0.2919546 0.3429393 0.3537112 0.5008478 0.5074334 0.5190257 #>  [866,] 0.38666463 0.4312964 0.4513298 0.5072282 0.5180780 0.5357130 0.5559795 #>  [867,] 0.37091313 0.4741816 0.5221833 0.5545292 0.5563664 0.5825139 0.6037188 #>  [868,] 0.46908262 0.5043570 0.5342897 0.5411612 0.6318017 0.7345150 0.7541224 #>  [869,] 0.85684074 0.8654049 0.8804955 0.9058943 0.9491224 0.9716836 0.9835710 #>  [870,] 0.63034356 0.6595254 0.7121853 0.9210040 0.9926003 1.0069212 1.0417054 #>  [871,] 0.29869490 0.3665855 0.5895732 0.6103412 0.6108661 0.6151418 0.6267215 #>  [872,] 0.26337288 0.4333595 0.4892146 0.5306412 0.5430692 0.5457092 0.5685390 #>  [873,] 0.50823618 0.5155998 0.7098535 0.7334433 0.8251752 0.8327274 0.8500911 #>  [874,] 0.29878435 0.3989766 0.4266498 0.4855275 0.5751053 0.5814230 0.5988339 #>  [875,] 0.29122779 0.3414831 0.4236301 0.5131387 0.5181273 0.5685564 0.6180097 #>  [876,] 0.68882763 0.7269549 0.7279610 0.8237203 0.8870050 0.9534265 0.9646766 #>  [877,] 0.36599172 0.3702227 0.3733315 0.4508884 0.4713784 0.5504663 0.5514610 #>  [878,] 0.51417490 0.5421087 0.5542532 0.5846864 0.6267351 0.6512617 0.7271366 #>  [879,] 0.30281588 0.4751087 0.4814347 0.5453900 0.5917332 0.6027009 0.6193931 #>  [880,] 0.39860713 0.4940733 0.5414637 0.5654190 0.5654631 0.5695065 0.5921115 #>  [881,] 0.47170494 0.5339224 0.6333174 0.8356014 0.8513966 0.8768730 0.8902373 #>  [882,] 0.22955788 0.2295866 0.3335661 0.4144384 0.4212690 0.4449730 0.5551526 #>  [883,] 0.22766851 0.4396996 0.4424427 0.4681658 0.4716342 0.5296945 0.5776378 #>  [884,] 0.55526788 0.6187128 0.6526257 0.6568544 0.6700545 0.7005156 0.7951226 #>  [885,] 0.77043081 0.7891132 0.8423980 0.9730631 0.9834802 1.0345704 1.0997228 #>  [886,] 0.31066809 0.3184818 0.4069020 0.4542226 0.4730177 0.5329278 0.5341162 #>  [887,] 0.40412472 0.4639756 0.4890486 0.4922907 0.5447677 0.5654476 0.5765576 #>  [888,] 0.41807414 0.5534742 0.7487783 0.7620320 0.7718291 0.7918954 0.7973109 #>  [889,] 0.38672767 0.4272115 0.4333595 0.5222349 0.5389558 0.5400124 0.5500092 #>  [890,] 0.29276087 0.5157372 0.6043040 0.7372167 0.8139813 0.8226545 0.8431098 #>  [891,] 0.20386375 0.2521463 0.4761596 0.4946957 0.5404303 0.5963738 0.6426769 #>  [892,] 0.92630687 1.1684450 1.4102346 1.4348467 1.4440150 1.4469043 1.5028845 #>  [893,] 0.48674489 0.6396652 0.6971069 0.7079778 0.8517127 0.8918529 0.9071284 #>  [894,] 0.72213147 0.8645228 0.8805288 0.9050049 0.9131692 0.9148125 0.9165667 #>  [895,] 0.66120457 0.7678462 0.7720966 0.9775638 1.1237605 1.1904550 1.2243181 #>  [896,] 0.83916131 0.8645228 0.9394858 1.2287851 1.3550099 1.4421083 1.4604315 #>  [897,] 0.35853453 0.3668317 0.3963896 0.4408868 0.4490219 0.4518970 0.4911514 #>  [898,] 0.32291723 0.3315103 0.3319413 0.4090904 0.4629466 0.5934038 0.6035091 #>  [899,] 0.23842769 0.3494797 0.3755863 0.3963896 0.4255804 0.4463518 0.5135838 #>  [900,] 0.49641060 0.5158029 0.5772252 0.5827236 0.6526257 0.6944126 0.6950184 #>  [901,] 0.55018191 0.7170773 0.8069348 0.9131417 0.9184734 0.9366011 0.9470807 #>  [902,] 0.48105557 0.8430040 0.8863310 0.9244996 0.9988390 1.0035136 1.0888905 #>  [903,] 0.28851935 0.3047962 0.4889978 0.5497547 0.6844864 0.7932388 0.8007578 #>  [904,] 0.53860920 0.6895357 0.7704833 0.8085487 0.8116862 0.8251827 0.8325388 #>  [905,] 0.33720097 0.6073710 0.6752892 0.7433016 0.7637077 0.7855943 0.7961897 #>  [906,] 0.20550343 0.3162256 0.3231343 0.4765917 0.5016970 0.5240756 0.5242504 #>  [907,] 0.52947069 0.5818527 0.6799997 0.7492848 0.7519298 0.7574435 0.7635241 #>  [908,] 0.58608702 0.8652922 0.8711604 0.8814015 0.9142923 0.9985972 1.0040368 #>  [909,] 0.57704765 0.6217122 0.6941189 0.9046879 0.9101487 0.9483313 0.9782553 #>  [910,] 0.40180906 0.5501819 0.6862257 0.6999846 0.7212574 0.7288690 0.7676711 #>  [911,] 0.32778020 0.6110790 0.6400764 0.6789707 0.6961660 0.7094063 0.7154041 #>  [912,] 0.35623223 0.4283759 0.5181273 0.5330261 0.5758649 0.5766391 0.6054547 #>  [913,] 0.86228610 0.9093107 1.0241086 1.0487301 1.1730124 1.1963472 1.2320405 #>  [914,] 0.44138360 0.6941189 0.6971731 0.7590519 0.8381876 0.8414685 0.8560164 #>  [915,] 0.61727290 0.6492930 0.7107481 0.7115891 0.7376989 0.7997061 0.8383983 #>  [916,] 0.57951533 0.6361834 0.7817506 0.8348247 0.8926854 0.8961640 0.9057307 #>  [917,] 0.29142265 0.7594736 0.8224968 0.8334246 0.8632394 0.9266422 0.9408426 #>  [918,] 0.63287706 0.6846241 0.8225368 0.9670616 1.1380926 1.2644008 1.4143197 #>  [919,] 0.60024993 0.6360042 0.7608358 0.7738620 0.8100819 0.8136884 0.8429035 #>  [920,] 0.34846949 0.5590979 0.6011946 0.6446272 0.6918727 0.7168554 0.7934441 #>  [921,] 0.51318954 0.5383672 0.7098535 0.7109050 0.7153044 0.7297890 0.7365039 #>  [922,] 0.62585597 0.7102808 0.8279595 0.8410550 0.9667986 0.9738688 0.9760638 #>  [923,] 0.25214626 0.2894980 0.4664921 0.5357130 0.5529807 0.5602011 0.5916762 #>  [924,] 0.40501106 0.4214968 0.5052356 0.5325935 0.5619761 0.5677012 0.5765305 #>  [925,] 0.32132559 0.4834678 0.5155723 0.5473182 0.5722622 0.6112078 0.6478335 #>  [926,] 0.53170338 0.7569125 0.8139813 0.8168034 0.8345459 0.8475698 0.8776862 #>  [927,] 0.27879142 0.3901603 0.4028479 0.4158157 0.4899760 0.5300574 0.5720617 #>  [928,] 0.47019257 0.4707106 0.4857358 0.5074334 0.5770843 0.5781695 0.5960032 #>  [929,] 0.36651583 0.3866646 0.5012718 0.5131387 0.5311704 0.5731855 0.6103436 #>  [930,] 0.45677254 0.5501971 0.6075152 0.6136652 0.6249506 0.6737893 0.6778467 #>  [931,] 0.35770762 0.4371782 0.5688758 0.5804446 0.6143706 0.6422392 0.6971069 #>  [932,] 0.61405593 1.0862960 1.0873228 1.1620484 1.2114551 1.2664690 1.3771769 #>  [933,] 0.16992806 0.3275517 0.3362537 0.3531328 0.4626128 0.5551526 0.5576495 #>  [934,] 0.29521010 0.3771291 0.3796977 0.4247537 0.4267636 0.4424427 0.4427890 #>  [935,] 0.16824860 0.5240899 0.5765566 0.5870448 0.5921115 0.6160924 0.6271494 #>  [936,] 0.24484892 0.4534269 0.4597089 0.6136652 0.6162311 0.6739171 0.6742549 #>  [937,] 0.35473182 0.4394551 0.5982677 0.6317799 0.7091851 0.7573493 0.7706572 #>  [938,] 0.34389771 0.3730292 0.4761306 0.4899760 0.5114681 0.5290308 0.5324888 #>  [939,] 0.40111986 0.4599426 0.5317511 0.6817764 0.7078336 0.7079499 0.7822935 #>  [940,] 0.51165768 0.5723981 0.5839564 0.6249364 0.6510966 0.6891600 0.7598562 #>  [941,] 0.26706143 0.3674355 0.4268768 0.4329526 0.4403338 0.4632408 0.5366964 #>  [942,] 0.82524433 0.8481422 0.8642787 0.8796054 0.9386571 0.9577445 0.9854139 #>  [943,] 0.41862677 0.4329526 0.4798343 0.5313529 0.6161980 0.6683239 0.6884613 #>  [944,] 0.33184275 0.3639448 0.3728496 0.4249845 0.4262079 0.5149787 0.6483288 #>  [945,] 0.67480073 0.6982753 0.7107481 0.7840758 0.8343006 0.9174380 0.9417480 #>  [946,] 0.27390118 0.3471558 0.5246582 0.5666508 0.7172097 0.7239493 0.7817506 #>  [947,] 1.65936247 1.7255408 1.8943405 1.9096007 1.9672099 1.9679604 2.0111074 #>  [948,] 0.41875004 0.5114681 0.5281373 0.6199403 0.6277187 0.7168522 0.7223796 #>  [949,] 0.33300185 0.4515892 0.4578096 0.5468248 0.5931289 0.6025360 0.6072727 #>  [950,] 0.21374845 0.7023600 0.7131670 0.7621527 1.0695233 1.0826475 1.1502043 #>  [951,] 1.14574483 1.1537377 1.2407244 1.3347764 1.3528933 1.4244303 1.4760178 #>  [952,] 0.30127508 0.3318427 0.4404673 0.4565016 0.5207309 0.5381345 0.5500092 #>  [953,] 1.59447438 1.7938527 1.8327666 1.9184266 1.9509554 2.0098241 2.0136447 #>  [954,] 0.45517425 0.4679749 0.5380466 0.6844643 0.7220621 0.7698489 0.7869955 #>  [955,] 0.42249267 0.6600636 0.6772170 0.8140324 0.8338613 0.8364318 1.0932709 #>  [956,] 0.50280056 0.5506099 0.6082847 0.6136635 0.6194494 0.6621470 0.6682736 #>  [957,] 0.25564934 0.2929649 0.5152624 0.6213120 0.7342847 0.7385585 0.7813795 #>  [958,] 0.30194272 0.3166425 0.3577101 0.3763102 0.4032576 0.4251943 0.4747412 #>  [959,] 0.26956496 0.7066247 0.7244539 0.7277129 0.7409194 0.9277988 0.9367336 #>  [960,] 0.25382708 0.2988918 0.3067290 0.3245844 0.6018444 0.6566472 0.6602953 #>  [961,] 0.38124697 0.3970127 0.4668845 0.5373669 0.5411612 0.5993098 0.6344204 #>  [962,] 0.27390118 0.3693359 0.6361834 0.6363106 0.7848330 0.7984283 0.8219947 #>  [963,] 0.44927939 0.4868876 0.5841146 0.6195960 0.6846143 0.6929486 0.7288326 #>  [964,] 0.36555032 0.4182599 0.4915695 0.5231800 0.5452290 0.5502237 0.5607139 #>  [965,] 0.31325256 0.3605506 0.4518987 0.4716342 0.4928038 0.5271496 0.5495031 #>  [966,] 1.05138257 1.1606901 1.1789849 1.1835452 1.2242864 1.2689624 1.2708109 #>  [967,] 0.34998465 0.5787957 0.6669037 0.6846143 0.7047627 0.7094681 0.7414109 #>  [968,] 0.42393900 0.5405602 0.5909966 0.6628875 0.6955228 0.8194933 0.8345780 #>  [969,] 0.28391516 0.4136343 0.4597773 0.5181469 0.5537717 0.5651156 0.6035091 #>  [970,] 0.85684074 0.8848979 0.8860551 0.9751930 1.0879892 1.1442476 1.1731443 #>  [971,] 0.56346178 0.6644473 0.7254369 0.7466141 0.7608358 0.7811852 0.7980730 #>  [972,] 0.82524433 0.9265877 0.9359427 0.9633205 1.0196004 1.1069919 1.1295258 #>  [973,] 0.30281588 0.4136998 0.5140202 0.5687824 0.5862767 0.5882026 0.5894320 #>  [974,] 0.24311166 0.3702368 0.4609947 0.4618041 0.4819769 0.4962557 0.5123082 #>  [975,] 0.43296317 0.5157372 0.5449681 0.5618018 0.6534237 0.6911553 0.7208816 #>  [976,] 0.54489884 0.5601268 0.6254444 0.7466141 0.7665801 0.7738620 0.8248381 #>  [977,] 0.43031041 0.5435702 0.6953609 0.6982753 0.7118375 0.7369195 0.7613379 #>  [978,] 1.05658905 1.1189617 1.4692204 1.5074885 1.5790060 1.6337460 1.7105836 #>  [979,] 0.22958661 0.3851255 0.4279359 0.4595977 0.5545906 0.5801462 0.5945252 #>  [980,] 0.72223769 0.8322685 0.8500288 0.8677896 0.9455791 0.9548179 0.9678827 #>  [981,] 0.81357368 0.8486657 0.8809123 0.9175260 1.0507398 1.1301727 1.1645617 #>  [982,] 0.31499425 0.3455002 0.5180486 0.5319553 0.5905339 0.6233546 0.6773759 #>  [983,] 0.43705634 0.4573672 0.8550436 0.8954281 0.9139163 0.9425114 1.1433109 #>  [984,] 0.47181807 0.4899205 0.7472407 0.8411093 0.9364010 0.9413523 0.9425114 #>  [985,] 0.53337590 0.5910516 0.6589651 0.7219842 0.7475867 0.7895464 0.8146919 #>  [986,] 0.78036460 0.8707426 0.9027133 0.9539329 1.0253069 1.0255073 1.0693003 #>  [987,] 0.32050574 0.5414637 0.5765566 0.6113934 0.6319838 0.6397676 0.6468781 #>  [988,] 0.29122779 0.3665158 0.4348192 0.4936077 0.5049729 0.5072282 0.5330261 #>  [989,] 0.46865196 0.6438130 0.6596234 0.6656801 0.6669171 0.6858611 0.7202064 #>  [990,] 0.39760685 0.6836013 0.7204711 0.7330919 0.7833529 0.8258210 0.8460676 #>  [991,] 0.48105557 0.6093643 0.6208565 0.7745014 0.7984159 0.8000553 0.8100549 #>  [992,] 0.27011389 0.3730292 0.5409595 0.5413857 0.5478643 0.5552956 0.6014279 #>  [993,] 0.47529054 0.4908760 0.5539483 0.5664712 0.5810069 0.5963738 0.6090675 #>  [994,] 0.52045984 0.8089790 0.8738416 0.8753737 0.9914109 1.0087482 1.0670871 #>  [995,] 0.35188854 0.5770477 0.5921864 0.6919374 0.6971731 0.8057086 0.8127165 #>  [996,] 0.33263549 0.4522702 0.5077706 0.6056507 0.6460765 0.7043686 0.7650220 #>  [997,] 0.57566088 0.6333174 0.7245437 0.7338909 0.8584998 0.9629408 0.9812265 #>  [998,] 0.55632795 0.8814015 0.9569690 1.0284043 1.2735349 1.4201331 1.4244367 #>  [999,] 0.53860920 0.5762949 0.6173882 0.6571252 0.7221315 0.7364956 0.7801887 #> [1000,] 0.21374845 0.6299624 0.6674950 0.8173009 0.9344096 0.9970338 1.0825339 #>              [,8]      [,9]     [,10] #>    [1,] 0.5080557 0.5276249 0.5337389 #>    [2,] 0.7074128 0.7333377 0.7395066 #>    [3,] 0.5996369 0.6178832 0.6300159 #>    [4,] 0.6294593 0.6412215 0.6414985 #>    [5,] 0.6272283 0.6620371 0.6937356 #>    [6,] 0.5920410 0.6162311 0.6261479 #>    [7,] 0.5404083 0.5508617 0.5760931 #>    [8,] 0.9030304 0.9054058 0.9169258 #>    [9,] 0.6796995 0.6798185 0.6882096 #>   [10,] 0.5952771 0.6108661 0.6363372 #>   [11,] 1.1515974 1.1585714 1.1764944 #>   [12,] 0.6344104 0.6344204 0.6544046 #>   [13,] 1.3734810 1.3737147 1.3799566 #>   [14,] 0.9936946 0.9948671 1.0303819 #>   [15,] 1.2681895 1.2826945 1.3215186 #>   [16,] 0.8651911 0.8869985 0.8962368 #>   [17,] 0.5533816 0.5570542 0.6133875 #>   [18,] 1.0297665 1.0658929 1.0793955 #>   [19,] 1.0815234 1.0850919 1.1513881 #>   [20,] 1.1861404 1.1980848 1.2415036 #>   [21,] 0.9224027 0.9262830 0.9529141 #>   [22,] 0.9118904 0.9361001 0.9581702 #>   [23,] 0.9605426 0.9889294 1.0033541 #>   [24,] 0.8545195 0.8885775 0.9031294 #>   [25,] 1.2930295 1.3421264 1.3528933 #>   [26,] 0.5700936 0.5763236 0.5987912 #>   [27,] 0.9870573 0.9948477 1.1168059 #>   [28,] 0.9608363 0.9699667 0.9919009 #>   [29,] 0.5862364 0.6154337 0.6187765 #>   [30,] 0.9273866 0.9450211 0.9907834 #>   [31,] 0.7959124 0.8398739 0.8462045 #>   [32,] 0.5343016 0.5406186 0.5439941 #>   [33,] 0.7023936 0.7280959 0.7383516 #>   [34,] 1.2014335 1.2157381 1.2321383 #>   [35,] 0.8235722 0.8731829 0.8779245 #>   [36,] 0.9101487 0.9766236 0.9906663 #>   [37,] 0.6601854 0.6663551 0.6740048 #>   [38,] 0.4309658 0.4329583 0.4407847 #>   [39,] 0.6811694 0.6966789 0.6972536 #>   [40,] 0.7183615 0.7217780 0.7669109 #>   [41,] 0.8224173 0.8298455 0.8696873 #>   [42,] 0.7993482 0.8049644 0.8086437 #>   [43,] 0.6407572 0.6814056 0.6930869 #>   [44,] 0.5814230 0.5956360 0.6016379 #>   [45,] 0.6181526 0.6403005 0.6544046 #>   [46,] 0.8002856 0.8064043 0.8103385 #>   [47,] 1.3102151 1.3637129 1.3749191 #>   [48,] 0.7686097 0.7900123 0.7911462 #>   [49,] 0.5750444 0.5755871 0.5990375 #>   [50,] 0.6453357 0.6540806 0.6563004 #>   [51,] 1.0329458 1.0370397 1.0453536 #>   [52,] 0.5155253 0.5320130 0.5346914 #>   [53,] 0.6470461 0.6551350 0.6680482 #>   [54,] 0.4980540 0.5808584 0.5910474 #>   [55,] 0.6760620 0.6836013 0.6941255 #>   [56,] 1.0557861 1.0576671 1.1017859 #>   [57,] 1.0050945 1.0421926 1.0590219 #>   [58,] 0.6706848 0.8074650 0.8298261 #>   [59,] 0.8464529 0.8810010 0.9420835 #>   [60,] 0.4366093 0.4396996 0.4545905 #>   [61,] 0.9353369 0.9993647 1.0092564 #>   [62,] 0.7037705 0.7555856 0.7575959 #>   [63,] 0.8992710 1.0743661 1.0752524 #>   [64,] 1.7470827 1.7579438 1.7593070 #>   [65,] 1.0584227 1.0642055 1.0855475 #>   [66,] 1.8898611 1.9768267 2.0916113 #>   [67,] 1.0385676 1.0765273 1.1149711 #>   [68,] 1.4407721 1.5037860 1.5182663 #>   [69,] 0.7806314 0.8501857 0.8556603 #>   [70,] 0.5545906 0.5658269 0.5660513 #>   [71,] 0.8199538 0.8199899 0.8235114 #>   [72,] 0.5957826 0.6060273 0.6236403 #>   [73,] 0.6468280 0.6857229 0.7658867 #>   [74,] 0.6461097 0.6635607 0.7326811 #>   [75,] 1.5193302 1.5227179 1.6047617 #>   [76,] 1.5158562 1.5701660 1.5814253 #>   [77,] 0.5277332 0.5552746 0.5755592 #>   [78,] 0.6520442 0.7005156 0.7072381 #>   [79,] 1.4551196 1.4618644 1.5376717 #>   [80,] 0.8445137 0.8900952 0.8976119 #>   [81,] 0.7893731 0.8060993 0.8405046 #>   [82,] 0.7212222 0.7331050 0.7646248 #>   [83,] 1.3916332 1.4546393 1.4559839 #>   [84,] 0.7412521 0.7590198 0.7590833 #>   [85,] 0.8091812 0.8101159 0.8366933 #>   [86,] 0.5993512 0.6157499 0.6350583 #>   [87,] 0.7657549 0.7837344 0.8012651 #>   [88,] 0.7323194 0.7432620 0.7482892 #>   [89,] 0.4260973 0.5047487 0.5053205 #>   [90,] 1.2301855 1.2605199 1.3045251 #>   [91,] 0.7801887 0.7967628 0.8281173 #>   [92,] 0.8193655 0.8201218 0.8698567 #>   [93,] 1.1954961 1.1962214 1.2376784 #>   [94,] 0.8279595 0.8777564 0.9069167 #>   [95,] 0.8441366 0.9015529 0.9358159 #>   [96,] 0.6934890 0.7004701 0.7026138 #>   [97,] 0.8461678 0.8648717 0.8776659 #>   [98,] 0.4543711 0.4832860 0.5047864 #>   [99,] 1.2298503 1.2376851 1.2397138 #>  [100,] 0.9082196 0.9929584 0.9970243 #>  [101,] 0.5834634 0.6274774 0.6298161 #>  [102,] 1.1456485 1.1671503 1.1907138 #>  [103,] 0.7111230 0.7175314 0.7322923 #>  [104,] 0.6743699 0.6875476 0.6939073 #>  [105,] 0.7597750 0.8190446 0.8936931 #>  [106,] 0.5578180 0.5841146 0.5894138 #>  [107,] 0.4363057 0.4748232 0.5302414 #>  [108,] 0.6789403 0.7354276 0.7723596 #>  [109,] 0.9890113 1.0111142 1.0241772 #>  [110,] 0.4363057 0.4372892 0.4698365 #>  [111,] 1.0998304 1.1007903 1.1193233 #>  [112,] 1.2768919 1.3087673 1.3460148 #>  [113,] 0.5332060 0.5685390 0.5854549 #>  [114,] 1.2298503 1.2404983 1.3232201 #>  [115,] 0.6978123 0.7445224 0.7589983 #>  [116,] 0.7385585 0.7871817 0.7949877 #>  [117,] 0.8161993 0.8500288 0.8948250 #>  [118,] 0.8424284 0.8469029 0.8660082 #>  [119,] 0.7489264 0.7502431 0.7545002 #>  [120,] 0.9010624 0.9329894 1.0209371 #>  [121,] 1.0531867 1.0838350 1.0918795 #>  [122,] 0.7312861 0.7487063 0.7560838 #>  [123,] 0.8482322 0.8508158 0.8550436 #>  [124,] 1.2199684 1.2207409 1.2303376 #>  [125,] 0.6592235 0.6682473 0.6688940 #>  [126,] 0.8074650 0.8548906 0.8826178 #>  [127,] 0.9312320 0.9598662 0.9763838 #>  [128,] 0.8647986 0.9012468 0.9498584 #>  [129,] 0.9529782 0.9605236 0.9741826 #>  [130,] 0.5546237 0.5631742 0.5950487 #>  [131,] 0.9115275 0.9784889 0.9918894 #>  [132,] 0.8332822 0.8800038 0.9207668 #>  [133,] 0.6196387 0.6336624 0.6761820 #>  [134,] 0.5454920 0.5527264 0.5728284 #>  [135,] 0.8636828 0.8749933 0.9185172 #>  [136,] 0.7870375 0.7925053 0.8376971 #>  [137,] 0.7173027 0.7332669 0.7487080 #>  [138,] 1.1408286 1.1849486 1.2182944 #>  [139,] 0.7153244 0.8187454 0.8449739 #>  [140,] 0.7994577 0.8086749 0.8538193 #>  [141,] 0.7652019 0.7869069 0.8148103 #>  [142,] 0.6258908 0.6261896 0.6448649 #>  [143,] 0.7513867 0.7552259 0.7580303 #>  [144,] 0.4720235 0.4792366 0.5213524 #>  [145,] 0.6551473 0.6958704 0.7223629 #>  [146,] 0.8362069 0.8405536 0.8565929 #>  [147,] 0.8738416 0.8971017 0.9103595 #>  [148,] 1.0889241 1.1320192 1.1368238 #>  [149,] 0.7323186 0.7336180 0.8134327 #>  [150,] 0.6669111 0.6677252 0.6852465 #>  [151,] 0.6550502 0.6577029 0.6880727 #>  [152,] 1.0158847 1.0640336 1.0661031 #>  [153,] 0.6744438 0.7048592 0.7068142 #>  [154,] 0.6227925 0.6495350 0.6716401 #>  [155,] 0.7606048 0.7716304 0.7823896 #>  [156,] 0.6427310 0.6938234 0.6986410 #>  [157,] 2.2243953 2.2818069 2.3548247 #>  [158,] 0.5961741 0.6022288 0.6058505 #>  [159,] 0.8131157 0.8137214 0.8280638 #>  [160,] 1.2743416 1.2868713 1.2899822 #>  [161,] 1.3146021 1.3353001 1.3368493 #>  [162,] 0.6946327 0.7012835 0.7251204 #>  [163,] 0.6127803 0.6431774 0.7204136 #>  [164,] 0.7545672 0.7593611 0.7826182 #>  [165,] 1.3952458 1.4271346 1.4625213 #>  [166,] 0.8901617 0.9050034 0.9516254 #>  [167,] 0.9036075 0.9154107 0.9331740 #>  [168,] 0.9185183 0.9200200 0.9326100 #>  [169,] 0.8875240 0.9120973 0.9143072 #>  [170,] 0.6429713 0.7280959 0.7596716 #>  [171,] 1.0246371 1.0345012 1.0557454 #>  [172,] 1.0018301 1.0084624 1.0100844 #>  [173,] 1.0143576 1.0216621 1.0684191 #>  [174,] 1.1942019 1.2136506 1.2568399 #>  [175,] 0.9811516 1.1636346 1.1644887 #>  [176,] 1.0806422 1.2234049 1.2690338 #>  [177,] 0.6972208 0.6990434 0.7036953 #>  [178,] 0.9847635 1.0457525 1.0838359 #>  [179,] 1.1015694 1.1211389 1.2049402 #>  [180,] 1.7213170 1.7851067 1.8574547 #>  [181,] 0.6492943 0.6555657 0.6556211 #>  [182,] 0.6691152 0.6699257 0.6803000 #>  [183,] 0.9723774 0.9728730 0.9739049 #>  [184,] 0.8658128 0.8704720 0.8774337 #>  [185,] 0.7312861 0.7849494 0.7938089 #>  [186,] 0.8680248 0.9116079 0.9157186 #>  [187,] 0.5008478 0.5075463 0.5559240 #>  [188,] 0.6262245 0.6273307 0.6587450 #>  [189,] 0.5901097 0.6069190 0.6181006 #>  [190,] 0.7438293 0.7749785 0.8131480 #>  [191,] 0.5184546 0.6050622 0.6428881 #>  [192,] 0.7455963 0.7483005 0.7627564 #>  [193,] 0.6634177 0.6760532 0.6854905 #>  [194,] 0.6978123 0.7095232 0.7155607 #>  [195,] 0.6898289 0.6977017 0.7063082 #>  [196,] 0.6864827 0.7155607 0.7228114 #>  [197,] 0.5242706 0.5645764 0.5754340 #>  [198,] 0.5673655 0.5925344 0.5984235 #>  [199,] 0.9184426 0.9331691 0.9448668 #>  [200,] 0.7067501 0.7085544 0.7213221 #>  [201,] 1.2449175 1.2550705 1.2643054 #>  [202,] 0.6934890 0.6939073 0.6953294 #>  [203,] 0.5490327 0.5874233 0.6097186 #>  [204,] 1.2689624 1.2937247 1.3199985 #>  [205,] 1.9468479 1.9484012 1.9743326 #>  [206,] 0.5412440 0.5681761 0.5704542 #>  [207,] 0.5809373 0.6050261 0.6399953 #>  [208,] 0.6083842 0.6924729 0.7020541 #>  [209,] 0.8460950 0.8572993 0.8829110 #>  [210,] 0.6732248 0.6787015 0.6993888 #>  [211,] 1.5547211 1.5975276 1.6310009 #>  [212,] 0.8422099 0.8773511 0.8789763 #>  [213,] 1.1392924 1.1563075 1.2215164 #>  [214,] 0.8370229 0.8646713 0.8731582 #>  [215,] 0.8611776 0.8726212 0.8774227 #>  [216,] 0.8281654 0.8488380 0.8623662 #>  [217,] 0.5346914 0.5454920 0.5642485 #>  [218,] 1.2164695 1.2387679 1.2503448 #>  [219,] 0.8229731 0.8343546 0.8362686 #>  [220,] 0.8731582 0.8916319 0.9009039 #>  [221,] 0.7524220 0.7561979 0.7610670 #>  [222,] 1.0412500 1.0446721 1.0565529 #>  [223,] 0.5763734 0.6147375 0.6382505 #>  [224,] 1.6575207 1.6746017 1.6878967 #>  [225,] 0.7448465 0.7894852 0.8954691 #>  [226,] 0.8687264 0.8814779 0.8976119 #>  [227,] 0.5151640 0.5243583 0.5810058 #>  [228,] 0.9085505 0.9730838 0.9862231 #>  [229,] 0.9851261 0.9910822 1.0011635 #>  [230,] 0.5300574 0.5315624 0.5783893 #>  [231,] 0.8977692 0.9271209 0.9371086 #>  [232,] 1.1986902 1.1987326 1.2547277 #>  [233,] 0.6509163 0.6764662 0.6791010 #>  [234,] 0.7565132 0.7674119 0.7678589 #>  [235,] 0.9755952 1.1601576 1.2227501 #>  [236,] 0.6677660 0.6691152 0.6887232 #>  [237,] 1.3410361 1.3547734 1.3622604 #>  [238,] 0.7153244 0.7154041 0.7571962 #>  [239,] 0.9664334 0.9744362 0.9782915 #>  [240,] 0.6971393 0.7295374 0.8410550 #>  [241,] 0.6722334 0.6769558 0.6783899 #>  [242,] 0.6658708 0.6731826 0.6766597 #>  [243,] 0.8889693 0.9273866 0.9716146 #>  [244,] 0.8260102 0.8616595 0.8654049 #>  [245,] 0.7471159 0.7681191 0.7822935 #>  [246,] 0.8699080 0.8776659 0.9367706 #>  [247,] 1.1068650 1.1109713 1.1309259 #>  [248,] 0.8235722 0.8580807 0.9456406 #>  [249,] 0.8211332 0.8212621 0.8401606 #>  [250,] 1.4703698 1.5218513 1.5253210 #>  [251,] 0.8756437 0.8903666 0.8960529 #>  [252,] 1.9771299 1.9901936 2.0015273 #>  [253,] 0.5242706 0.5696508 0.5743931 #>  [254,] 1.2898856 1.2985500 1.3229827 #>  [255,] 0.6529944 0.6591772 0.6768424 #>  [256,] 0.7605011 0.8052184 0.8064463 #>  [257,] 0.8268119 0.8712144 0.8712788 #>  [258,] 0.9908796 0.9956447 1.0367497 #>  [259,] 1.0208277 1.0702586 1.1417724 #>  [260,] 2.0508268 2.0996489 2.1297518 #>  [261,] 0.8951290 0.8981277 0.9625495 #>  [262,] 0.5867843 0.5911418 0.6090675 #>  [263,] 0.6470041 0.6918925 0.7094913 #>  [264,] 0.9862231 0.9893178 1.0305538 #>  [265,] 0.8458345 0.8589800 0.9129090 #>  [266,] 0.9931099 1.0004020 1.0178100 #>  [267,] 0.5492920 0.5579753 0.5776378 #>  [268,] 0.5168119 0.5719328 0.5722573 #>  [269,] 0.7899618 0.8212229 0.8221483 #>  [270,] 0.7783004 0.8741039 0.9137974 #>  [271,] 1.3229581 1.4177344 1.4403607 #>  [272,] 0.8327822 0.8563464 0.8678232 #>  [273,] 0.9275306 0.9488989 0.9594895 #>  [274,] 0.6135332 0.6176430 0.6367721 #>  [275,] 0.8479561 0.8787511 0.9242614 #>  [276,] 1.3874072 1.3965994 1.3980224 #>  [277,] 0.5412672 0.5413442 0.5450219 #>  [278,] 1.3346748 1.3455890 1.3965806 #>  [279,] 0.5478162 0.5806486 0.6010023 #>  [280,] 0.5880595 0.5979649 0.6005933 #>  [281,] 0.5923437 0.6121432 0.6209169 #>  [282,] 0.6363827 0.7094409 0.7399889 #>  [283,] 0.9931211 1.0242778 1.0797293 #>  [284,] 0.8031524 0.8739472 0.8832235 #>  [285,] 0.6162078 0.6181526 0.6213779 #>  [286,] 0.4800265 0.5105350 0.5482301 #>  [287,] 0.8995558 0.9071393 0.9150336 #>  [288,] 0.8154512 0.8270137 0.8705957 #>  [289,] 0.9320773 0.9862201 0.9971606 #>  [290,] 0.8392597 0.9297457 0.9426545 #>  [291,] 0.8222482 0.8627887 0.9631315 #>  [292,] 0.5029804 0.5302586 0.5391368 #>  [293,] 0.5404123 0.5992381 0.6343732 #>  [294,] 0.6184469 0.6393994 0.6778467 #>  [295,] 0.9111369 0.9344715 0.9935865 #>  [296,] 0.7113885 0.7161360 0.7342103 #>  [297,] 0.6288929 0.6296916 0.6348889 #>  [298,] 0.5644425 0.5733509 0.5805444 #>  [299,] 1.0282836 1.0531133 1.0744547 #>  [300,] 0.5792694 0.5817220 0.6017946 #>  [301,] 1.0035618 1.0340226 1.0792533 #>  [302,] 0.8224667 0.8474627 0.8527090 #>  [303,] 0.6762218 0.6902922 0.7225982 #>  [304,] 0.9747795 1.0537804 1.0914642 #>  [305,] 0.6431774 0.6553777 0.6572575 #>  [306,] 1.0650431 1.0761388 1.0905442 #>  [307,] 1.0065705 1.0188044 1.0438174 #>  [308,] 1.0359633 1.0556539 1.0981911 #>  [309,] 0.6669171 0.6750496 0.6973854 #>  [310,] 0.8167783 0.8308105 0.8781047 #>  [311,] 0.5961741 0.6152930 0.6406947 #>  [312,] 0.8341679 0.8718684 0.8802096 #>  [313,] 0.7219223 0.7359262 0.7548472 #>  [314,] 0.7098606 0.7278945 0.7369752 #>  [315,] 0.5273665 0.7113929 0.7336709 #>  [316,] 1.0936329 1.1280078 1.1830340 #>  [317,] 0.4684957 0.4748232 0.4827794 #>  [318,] 0.5944924 0.6127464 0.6165768 #>  [319,] 0.9386948 0.9655460 1.0449539 #>  [320,] 0.6945784 0.7019300 0.7080052 #>  [321,] 0.6420715 0.6607864 0.6618692 #>  [322,] 0.5527264 0.5642485 0.5750444 #>  [323,] 0.6253705 0.6298053 0.6449690 #>  [324,] 0.6618842 0.6718443 0.7074430 #>  [325,] 0.5228951 0.5673655 0.5804400 #>  [326,] 0.7086978 0.7214121 0.7630708 #>  [327,] 0.6581721 0.7298017 0.7378522 #>  [328,] 0.6779486 0.6818557 0.7243537 #>  [329,] 1.0166501 1.0266741 1.0931595 #>  [330,] 0.5005513 0.5077196 0.5268218 #>  [331,] 1.1891447 1.2570007 1.3063215 #>  [332,] 1.4941467 1.5413041 1.5447015 #>  [333,] 1.3773606 1.3987059 1.4154231 #>  [334,] 0.9010323 0.9278341 0.9555620 #>  [335,] 0.5945452 0.5950487 0.5956360 #>  [336,] 0.9479475 1.0720566 1.0912605 #>  [337,] 0.6990434 0.7391738 0.7650220 #>  [338,] 0.8100549 0.8479712 0.8834843 #>  [339,] 0.8085043 0.8153496 0.8659155 #>  [340,] 1.0942887 1.1063112 1.1542061 #>  [341,] 0.6277977 0.6281034 0.6294544 #>  [342,] 0.6477788 0.6819647 0.6882857 #>  [343,] 0.5805766 0.6020253 0.6395995 #>  [344,] 0.9300626 0.9874764 0.9895243 #>  [345,] 0.7791843 0.7993172 0.8103385 #>  [346,] 0.6091768 0.6211957 0.6449905 #>  [347,] 0.7399706 0.7433385 0.7513867 #>  [348,] 0.6656801 0.7373986 0.7468133 #>  [349,] 1.2823180 1.2845878 1.3149303 #>  [350,] 0.5302414 0.5484530 0.5681435 #>  [351,] 1.7907100 1.7921945 1.8377308 #>  [352,] 0.9061576 1.0582734 1.1120492 #>  [353,] 0.6761699 0.6839403 0.6897820 #>  [354,] 0.8381876 0.8488140 0.8490278 #>  [355,] 0.9250963 0.9625194 0.9810414 #>  [356,] 1.4752122 1.4901066 1.5199204 #>  [357,] 0.7925903 0.8046926 0.8114842 #>  [358,] 0.6051121 0.6572348 0.6655885 #>  [359,] 1.0249290 1.0991059 1.1072275 #>  [360,] 0.4630024 0.5181561 0.5216214 #>  [361,] 0.8127632 0.8513966 0.8580807 #>  [362,] 0.8331608 0.8370229 0.8507488 #>  [363,] 0.5917332 0.6284460 0.6343111 #>  [364,] 1.0148085 1.0438174 1.0521465 #>  [365,] 0.9854139 0.9864013 0.9945519 #>  [366,] 1.0550523 1.0727685 1.1101781 #>  [367,] 0.5534393 0.5632414 0.5663736 #>  [368,] 0.7334309 0.7360284 0.7392629 #>  [369,] 0.7933238 0.8079707 0.8220060 #>  [370,] 1.0281430 1.0404540 1.0562614 #>  [371,] 0.5802714 0.6141619 0.6155760 #>  [372,] 0.7286655 0.7564475 0.7614687 #>  [373,] 0.9620947 0.9648955 1.0308733 #>  [374,] 1.3375373 1.3407626 1.3484463 #>  [375,] 0.6512617 0.6688059 0.6716049 #>  [376,] 0.7506226 0.7537856 0.7943958 #>  [377,] 0.5216893 0.5242504 0.5478584 #>  [378,] 0.6109501 0.6295589 0.6360508 #>  [379,] 1.1294462 1.1818391 1.1839886 #>  [380,] 0.6930866 0.7109143 0.7224012 #>  [381,] 0.5319553 0.5381446 0.5421736 #>  [382,] 0.6367721 0.6397702 0.6494582 #>  [383,] 1.2828530 1.2914719 1.3340556 #>  [384,] 1.0627043 1.1022313 1.1061595 #>  [385,] 0.8647540 0.8706249 0.8708676 #>  [386,] 0.8043476 0.8290090 0.8392421 #>  [387,] 1.0206989 1.0221908 1.0337220 #>  [388,] 0.7269549 0.7276730 0.8333923 #>  [389,] 0.5766391 0.5826599 0.5996369 #>  [390,] 0.6779006 0.6782037 0.7011281 #>  [391,] 1.0167261 1.0364106 1.0601456 #>  [392,] 0.6913417 0.7027843 0.7450791 #>  [393,] 1.0521463 1.0729956 1.0796489 #>  [394,] 0.9547871 0.9644787 0.9662885 #>  [395,] 0.9693171 0.9812911 0.9873352 #>  [396,] 0.4981114 0.5632414 0.5704542 #>  [397,] 0.6290962 0.6539551 0.6598012 #>  [398,] 0.6606966 0.6698722 0.6861729 #>  [399,] 0.8796215 0.8804955 0.8840630 #>  [400,] 0.6277674 0.6366864 0.6420715 #>  [401,] 0.8869014 0.9172616 0.9255504 #>  [402,] 0.6786759 0.7158590 0.7345220 #>  [403,] 0.8613869 0.8716701 0.9437147 #>  [404,] 0.6165712 0.6347951 0.6351871 #>  [405,] 0.8637331 0.9164881 0.9376060 #>  [406,] 1.0513574 1.1198464 1.1210114 #>  [407,] 0.7013993 0.7273121 0.8556250 #>  [408,] 0.8459208 0.8509803 0.8607299 #>  [409,] 1.1396785 1.1401010 1.1652299 #>  [410,] 1.2097029 1.3290838 1.3451194 #>  [411,] 0.9376060 0.9441122 0.9507034 #>  [412,] 1.4317888 1.4433019 1.4710430 #>  [413,] 0.7196664 0.7934229 0.8004471 #>  [414,] 0.8496712 0.8825974 0.8869342 #>  [415,] 0.7172686 0.7347804 0.7382020 #>  [416,] 0.7531827 0.7545002 0.7651596 #>  [417,] 0.5817903 0.5915257 0.6054770 #>  [418,] 1.0763196 1.1326925 1.1734889 #>  [419,] 0.4761306 0.4965961 0.5256825 #>  [420,] 0.6556727 0.6559608 0.6839239 #>  [421,] 1.2620790 1.3099540 1.3257610 #>  [422,] 0.7063542 0.7228114 0.7665603 #>  [423,] 0.6716094 0.6731826 0.6744110 #>  [424,] 1.0776125 1.1139243 1.2586460 #>  [425,] 0.7403501 0.7788079 0.7884644 #>  [426,] 0.6504663 0.6934103 0.6993888 #>  [427,] 0.6625744 0.6668379 0.6800288 #>  [428,] 0.7026138 0.7504933 0.7546979 #>  [429,] 0.8460950 0.8731829 0.9243577 #>  [430,] 0.9037120 0.9053061 0.9134603 #>  [431,] 0.9812076 0.9912094 1.0083105 #>  [432,] 1.3412830 1.3467039 1.3857169 #>  [433,] 1.0016601 1.0417702 1.0662256 #>  [434,] 0.6905879 0.6924633 0.6965472 #>  [435,] 0.7991004 0.8187412 0.8537889 #>  [436,] 0.9030304 0.9382107 0.9832149 #>  [437,] 0.4283122 0.4366093 0.4684957 #>  [438,] 0.6588133 0.6701868 0.7081910 #>  [439,] 1.4632844 1.4724457 1.4883183 #>  [440,] 0.7083897 0.7234269 0.7371691 #>  [441,] 0.8041308 0.8191224 0.8224202 #>  [442,] 0.7190115 0.7433681 0.7614164 #>  [443,] 0.8990052 0.9183955 0.9380971 #>  [444,] 0.6911553 0.6964381 0.7110337 #>  [445,] 1.4704173 1.4888272 1.5295277 #>  [446,] 0.8930972 0.8996214 0.9441122 #>  [447,] 0.8850028 0.9007028 0.9156353 #>  [448,] 0.7191633 0.7424398 0.7752480 #>  [449,] 0.9494569 0.9854761 0.9857833 #>  [450,] 0.8145610 0.8546957 0.9358312 #>  [451,] 0.8063634 0.8089790 0.8610168 #>  [452,] 0.9826243 1.0370296 1.0796544 #>  [453,] 0.9130582 0.9868831 0.9989299 #>  [454,] 1.5872252 1.6623733 1.6843201 #>  [455,] 1.2656468 1.2688334 1.3397707 #>  [456,] 0.6045534 0.6502464 0.6544195 #>  [457,] 1.9113821 1.9187778 1.9312155 #>  [458,] 0.9338262 0.9614959 0.9776963 #>  [459,] 0.8856886 0.8872872 0.8934997 #>  [460,] 1.7427374 1.7945939 1.8802027 #>  [461,] 0.5773265 0.5961714 0.6014012 #>  [462,] 1.2513282 1.3591731 1.3751743 #>  [463,] 0.7940196 0.8396341 0.8743571 #>  [464,] 1.0110325 1.0335452 1.0461453 #>  [465,] 1.1113875 1.1308214 1.2066376 #>  [466,] 1.1466837 1.1576865 1.1682958 #>  [467,] 0.8268119 0.8284297 0.8470166 #>  [468,] 0.9584412 0.9619047 0.9633828 #>  [469,] 0.7365039 0.7659789 0.7661747 #>  [470,] 0.6630733 0.6821130 0.7134559 #>  [471,] 1.2063782 1.2961594 1.3495357 #>  [472,] 0.5644148 0.6982256 0.7198100 #>  [473,] 0.9747335 0.9772767 0.9900802 #>  [474,] 0.7323186 0.7439912 0.7779685 #>  [475,] 0.7341867 0.7410779 0.7568952 #>  [476,] 1.3377814 1.3458587 1.3727904 #>  [477,] 1.1467471 1.1875083 1.1954367 #>  [478,] 0.4821627 0.5285974 0.5298608 #>  [479,] 0.6700257 0.6881802 0.7016651 #>  [480,] 0.7830573 0.8000627 0.8019101 #>  [481,] 0.8465317 0.8475198 0.9061272 #>  [482,] 0.9455813 0.9475736 0.9681680 #>  [483,] 0.7636855 0.7690992 0.7718291 #>  [484,] 0.8188366 0.8248050 0.8290967 #>  [485,] 0.8982082 0.9226149 0.9604672 #>  [486,] 0.6440883 0.6924096 0.6990023 #>  [487,] 0.8382252 0.8428737 0.8618445 #>  [488,] 1.7509359 1.7686903 1.7759033 #>  [489,] 1.1530405 1.1610048 1.1894465 #>  [490,] 0.5587740 0.6151418 0.6158542 #>  [491,] 0.5236165 0.5268218 0.5527841 #>  [492,] 0.4281768 0.4291062 0.4649052 #>  [493,] 0.5888597 0.5992826 0.6908952 #>  [494,] 0.9329583 0.9860497 0.9918414 #>  [495,] 0.5263283 0.5337777 0.5364558 #>  [496,] 0.6795043 0.7112654 0.7247807 #>  [497,] 0.6552232 0.6758481 0.7765854 #>  [498,] 0.8412021 0.8515289 0.8669860 #>  [499,] 1.3470363 1.3484786 1.3838270 #>  [500,] 0.8131157 0.8554573 0.8907300 #>  [501,] 0.7075458 0.7246776 0.8418232 #>  [502,] 0.7255162 0.7331211 0.7342654 #>  [503,] 0.7984159 0.8152281 0.8400921 #>  [504,] 1.1459536 1.1576783 1.1819146 #>  [505,] 0.6523330 0.6836872 0.6839593 #>  [506,] 0.9088440 0.9180842 1.0171838 #>  [507,] 1.2479393 1.2491365 1.2540928 #>  [508,] 0.5663814 0.5713216 0.5769577 #>  [509,] 0.7200898 0.7755270 0.8240567 #>  [510,] 1.1720804 1.2210900 1.2883394 #>  [511,] 0.6058505 0.6095878 0.6350539 #>  [512,] 0.6566472 0.6738409 0.6938234 #>  [513,] 1.1485640 1.1888977 1.2167933 #>  [514,] 0.5835475 0.6020892 0.6055015 #>  [515,] 0.7601323 0.7645733 0.7732410 #>  [516,] 0.6106645 0.6452197 0.6535126 #>  [517,] 0.8874708 0.9275270 1.0081139 #>  [518,] 0.7504317 0.7506821 0.7552770 #>  [519,] 0.6504663 0.6718746 0.6861310 #>  [520,] 0.6801670 0.7405547 0.7483216 #>  [521,] 1.2501587 1.2950181 1.2985500 #>  [522,] 0.4867347 0.5193953 0.5473474 #>  [523,] 0.6834661 0.7380807 0.7463566 #>  [524,] 0.9655460 0.9670665 0.9977170 #>  [525,] 1.1022313 1.1700955 1.1797428 #>  [526,] 0.5379774 0.5389069 0.5529807 #>  [527,] 0.7955551 0.8000256 0.8768765 #>  [528,] 0.7964439 0.8171075 0.8353387 #>  [529,] 0.6831450 0.7077967 0.7216140 #>  [530,] 0.7174759 0.7496967 0.7590659 #>  [531,] 0.9839412 1.0451429 1.0477765 #>  [532,] 0.8868258 0.9018225 0.9723774 #>  [533,] 0.6008911 0.6218564 0.6311324 #>  [534,] 0.8302785 0.8543320 0.8915927 #>  [535,] 0.6470041 0.6817764 0.6886861 #>  [536,] 0.9173063 0.9356378 0.9539329 #>  [537,] 0.6670649 0.6782037 0.7153044 #>  [538,] 0.5916762 0.5954806 0.6082973 #>  [539,] 0.5593284 0.5658413 0.5931478 #>  [540,] 0.8223406 0.8224401 0.8362905 #>  [541,] 0.9263552 0.9502146 0.9703050 #>  [542,] 0.7174759 0.7461806 0.7492793 #>  [543,] 0.9153164 0.9344584 0.9403150 #>  [544,] 0.5801462 0.6144611 0.6456883 #>  [545,] 0.6837112 0.6851990 0.6933130 #>  [546,] 0.6815153 0.7107531 0.7268409 #>  [547,] 0.6389565 0.6741184 0.6786053 #>  [548,] 0.9676630 0.9849359 1.0101607 #>  [549,] 0.7075458 0.7326811 0.7433385 #>  [550,] 0.7156261 0.7174452 0.7221767 #>  [551,] 0.6820651 0.6831450 0.7044299 #>  [552,] 1.0209482 1.0601143 1.0651295 #>  [553,] 1.2108689 1.2140743 1.2581239 #>  [554,] 0.7112818 0.7165507 0.7266928 #>  [555,] 0.7226369 0.7417024 0.7454752 #>  [556,] 0.8162747 0.8245005 0.8259692 #>  [557,] 0.7360234 0.7635241 0.7968344 #>  [558,] 0.5625142 0.5685564 0.5736590 #>  [559,] 0.7570178 0.7838449 0.8231215 #>  [560,] 0.7455113 0.7623644 0.8010221 #>  [561,] 0.8727324 0.8748225 0.9038319 #>  [562,] 0.7757006 0.7842128 0.8643986 #>  [563,] 0.5740398 0.5934170 0.5945252 #>  [564,] 0.6392571 0.6484500 0.7720673 #>  [565,] 0.6655885 0.6743180 0.6779486 #>  [566,] 0.7901173 0.7981712 0.7983230 #>  [567,] 0.8048408 0.8283223 0.8807517 #>  [568,] 0.9075695 0.9715642 1.0255073 #>  [569,] 0.6473657 0.6495350 0.6693262 #>  [570,] 0.5744782 0.5836626 0.6190405 #>  [571,] 1.8366485 2.0437603 2.0583096 #>  [572,] 0.6620431 0.6655179 0.6791516 #>  [573,] 0.7196261 0.7938160 0.7962969 #>  [574,] 0.8917535 0.9155725 0.9166543 #>  [575,] 0.7866576 0.7894378 0.8291971 #>  [576,] 0.6940847 0.7062356 0.7102649 #>  [577,] 1.1771884 1.2078249 1.2095564 #>  [578,] 1.3634891 1.3939749 1.4634599 #>  [579,] 0.6586737 0.7197324 0.7435609 #>  [580,] 0.8987480 0.9849208 0.9894998 #>  [581,] 0.5843821 0.5862364 0.6218803 #>  [582,] 0.7262026 0.7468419 0.7559365 #>  [583,] 0.6814921 0.6887560 0.7072772 #>  [584,] 0.5731625 0.5763827 0.5824663 #>  [585,] 0.7523980 0.7808821 0.8365417 #>  [586,] 0.5610655 0.5982099 0.6204008 #>  [587,] 1.0259270 1.0648567 1.0733800 #>  [588,] 0.8940600 0.9045178 0.9746028 #>  [589,] 1.0550600 1.0779072 1.1134729 #>  [590,] 0.9187177 0.9239632 0.9346137 #>  [591,] 0.5056083 0.5363482 0.5403131 #>  [592,] 0.8237203 0.8269712 0.8364318 #>  [593,] 0.8447904 0.9095093 0.9648745 #>  [594,] 0.5478584 0.6437780 0.6693342 #>  [595,] 1.0675974 1.1307489 1.1384189 #>  [596,] 0.8273197 0.8955224 0.8992590 #>  [597,] 0.9980729 1.0299264 1.1693013 #>  [598,] 0.7007785 0.7038253 0.7045636 #>  [599,] 0.6676725 0.6821830 0.6928614 #>  [600,] 0.9076353 0.9103595 0.9218361 #>  [601,] 0.6985503 0.7149939 0.7318860 #>  [602,] 1.0677413 1.1122509 1.1378047 #>  [603,] 0.6156719 0.6270104 0.6743052 #>  [604,] 0.7388078 0.7629217 0.7805969 #>  [605,] 0.8331004 0.8508775 0.8805920 #>  [606,] 0.5923856 0.6066485 0.6619116 #>  [607,] 0.7168522 0.7448518 0.7496746 #>  [608,] 1.1280078 1.1565525 1.1846627 #>  [609,] 0.8185754 0.8285489 0.8409931 #>  [610,] 1.0622050 1.1009614 1.1097394 #>  [611,] 0.9129220 0.9854010 0.9935101 #>  [612,] 0.5460570 0.5993512 0.6187765 #>  [613,] 1.4569998 1.4910143 1.5370926 #>  [614,] 0.9829298 0.9941992 1.0052577 #>  [615,] 1.7164762 1.7424494 1.7875236 #>  [616,] 0.6274774 0.6558855 0.6949051 #>  [617,] 0.6378134 0.6412215 0.6591772 #>  [618,] 0.9170868 0.9362229 0.9367336 #>  [619,] 0.7369236 0.7566563 0.7596226 #>  [620,] 0.8348247 0.8585611 0.8730797 #>  [621,] 0.6750496 0.7033319 0.7223224 #>  [622,] 0.7897586 0.8119954 0.8189538 #>  [623,] 0.7003871 0.7068142 0.7748512 #>  [624,] 0.8199660 0.8323121 0.8419069 #>  [625,] 1.1045690 1.2107562 1.2319602 #>  [626,] 0.9131692 0.9210249 0.9397806 #>  [627,] 0.7548472 0.7704308 0.7772167 #>  [628,] 0.8481422 0.8764077 0.8798585 #>  [629,] 0.7297793 0.7436644 0.7783428 #>  [630,] 0.5593284 0.5765305 0.6118864 #>  [631,] 0.8001993 0.8151127 0.8444979 #>  [632,] 0.7320196 0.7783004 0.8161769 #>  [633,] 0.6433447 0.6608266 0.6614136 #>  [634,] 0.9531442 0.9916023 0.9964517 #>  [635,] 0.6572348 0.6574776 0.6675078 #>  [636,] 0.9157394 0.9359427 0.9523184 #>  [637,] 1.0496276 1.0996977 1.1340951 #>  [638,] 0.8471146 0.8570708 0.8719575 #>  [639,] 0.6530180 0.7088556 0.7194892 #>  [640,] 0.5395369 0.5621974 0.5835475 #>  [641,] 0.7401197 0.8167949 0.8393856 #>  [642,] 1.4867030 1.6342627 1.6478050 #>  [643,] 0.6713796 0.7251204 0.7504317 #>  [644,] 1.0470515 1.0659459 1.0857719 #>  [645,] 0.7554322 0.7649024 0.7897788 #>  [646,] 1.0739251 1.0857340 1.1143712 #>  [647,] 0.6448016 0.6595560 0.7011281 #>  [648,] 0.6993334 0.7309225 0.7396918 #>  [649,] 1.2662849 1.2703515 1.2805022 #>  [650,] 0.7955320 0.8319873 0.8429453 #>  [651,] 0.9203363 0.9248700 0.9551500 #>  [652,] 0.5244229 0.5530475 0.5709205 #>  [653,] 1.2183134 1.2446512 1.2838131 #>  [654,] 0.7541218 0.7621194 0.7637077 #>  [655,] 0.4722681 0.4765917 0.4821145 #>  [656,] 0.4857358 0.4894403 0.5059064 #>  [657,] 1.4709740 1.5184150 1.5206989 #>  [658,] 1.2673450 1.2862129 1.2883394 #>  [659,] 0.8102039 0.8171075 0.8284695 #>  [660,] 0.8685055 0.9161996 0.9339830 #>  [661,] 0.8966339 0.9491244 0.9558303 #>  [662,] 1.2754416 1.3446697 1.3470734 #>  [663,] 0.5420474 0.5658269 0.6113120 #>  [664,] 0.6887232 0.7025320 0.7381261 #>  [665,] 0.7466126 0.8016505 0.8125555 #>  [666,] 1.0510379 1.0926036 1.1250276 #>  [667,] 0.7591156 0.7732638 0.7934441 #>  [668,] 1.0182086 1.0198852 1.1025823 #>  [669,] 0.8404265 0.8747672 0.9387730 #>  [670,] 0.7610566 0.7704363 0.7913307 #>  [671,] 0.9161187 0.9619424 0.9691255 #>  [672,] 0.6292526 0.6322302 0.6446386 #>  [673,] 0.6118547 0.6184963 0.6202510 #>  [674,] 0.5895732 0.6075180 0.6115304 #>  [675,] 0.6156719 0.6429881 0.6453184 #>  [676,] 0.4765848 0.4947816 0.5059064 #>  [677,] 0.8168232 0.8627887 0.8716503 #>  [678,] 0.8859470 0.9134393 0.9377686 #>  [679,] 0.5884108 0.6076743 0.6090431 #>  [680,] 0.6344104 0.6390107 0.6583607 #>  [681,] 0.5997981 0.6005933 0.6392775 #>  [682,] 0.9837804 1.0038611 1.0098063 #>  [683,] 0.9256998 0.9498782 0.9931211 #>  [684,] 0.7062909 0.7212574 0.7234269 #>  [685,] 0.9382107 0.9614998 0.9633979 #>  [686,] 0.7759727 0.7779511 0.8106796 #>  [687,] 0.6882096 0.7066970 0.7106976 #>  [688,] 0.4111247 0.4117534 0.4821627 #>  [689,] 0.9670699 0.9774032 1.0328941 #>  [690,] 1.3356433 1.4051511 1.4272016 #>  [691,] 0.9941043 1.0140997 1.0319565 #>  [692,] 0.5785209 0.6021086 0.6033697 #>  [693,] 0.8950361 0.8970477 0.9119953 #>  [694,] 0.8057063 0.8319142 0.8398148 #>  [695,] 0.6127841 0.6218803 0.6227925 #>  [696,] 0.4843802 0.5440199 0.5452290 #>  [697,] 0.9701075 1.0124050 1.0210424 #>  [698,] 0.5099480 0.5240899 0.5391368 #>  [699,] 0.7321030 0.7612548 0.7813795 #>  [700,] 0.6746993 0.7069654 0.7391829 #>  [701,] 0.8205810 0.8521470 1.0569124 #>  [702,] 0.5942655 0.6033697 0.6189313 #>  [703,] 1.4374229 1.5353338 1.5725754 #>  [704,] 1.1130497 1.1627276 1.1796942 #>  [705,] 0.5517548 0.5719328 0.5940707 #>  [706,] 0.6756711 0.6918201 0.6940847 #>  [707,] 0.7886001 0.8296601 0.8322916 #>  [708,] 0.7090457 0.7469310 0.7521583 #>  [709,] 0.5849814 0.6638989 0.6706868 #>  [710,] 0.6789403 0.6796824 0.7129410 #>  [711,] 0.6345210 0.6487710 0.6687342 #>  [712,] 0.7514513 0.8167949 0.8724405 #>  [713,] 0.6722705 0.6867958 0.6919834 #>  [714,] 0.6033282 0.6356714 0.6408718 #>  [715,] 0.7085451 0.7425614 0.7745157 #>  [716,] 1.6760356 1.7165422 1.7553438 #>  [717,] 1.0441478 1.0456645 1.0700162 #>  [718,] 0.7081499 0.7275827 0.7483928 #>  [719,] 1.0598507 1.0681156 1.0799537 #>  [720,] 0.6985512 0.7246897 0.7333440 #>  [721,] 0.9183454 0.9274102 0.9377401 #>  [722,] 1.2815371 1.3336700 1.3469360 #>  [723,] 0.5049697 0.5389069 0.5557634 #>  [724,] 0.8928643 0.9083218 0.9173306 #>  [725,] 0.9064235 0.9720465 0.9739652 #>  [726,] 1.1990616 1.2500721 1.2840976 #>  [727,] 0.8922805 0.9095490 0.9144601 #>  [728,] 0.8430040 0.8447580 0.9277927 #>  [729,] 0.7347924 0.7671882 0.7958384 #>  [730,] 0.6668138 0.7719728 0.8596274 #>  [731,] 0.4415725 0.4710219 0.5262583 #>  [732,] 0.5770843 0.6119340 0.6292526 #>  [733,] 0.4801395 0.4929738 0.5181561 #>  [734,] 0.5594301 0.5728300 0.6118946 #>  [735,] 0.8128546 0.8161219 0.8226355 #>  [736,] 0.6876277 0.7077507 0.7578045 #>  [737,] 0.9616543 0.9846436 1.0074764 #>  [738,] 0.4620837 0.6096883 0.6418558 #>  [739,] 0.7297890 0.8182388 0.8289834 #>  [740,] 1.0244872 1.0757796 1.0767159 #>  [741,] 0.6713057 0.7840297 0.8121408 #>  [742,] 0.6291464 0.6786938 0.6987714 #>  [743,] 0.6544143 0.6776456 0.7130871 #>  [744,] 0.6446493 0.6709515 0.6742549 #>  [745,] 1.0925961 1.1457090 1.1753125 #>  [746,] 0.4931023 0.5470389 0.5511702 #>  [747,] 1.1081919 1.1151940 1.1648702 #>  [748,] 0.8590732 0.8620429 0.8707426 #>  [749,] 2.1235457 2.1551517 2.2012507 #>  [750,] 0.7274885 0.7314188 0.7524161 #>  [751,] 1.2563893 1.2794365 1.2917452 #>  [752,] 0.8353474 0.8692183 0.8894801 #>  [753,] 0.6914093 0.7098420 0.7184492 #>  [754,] 0.6481501 0.7374816 0.7411144 #>  [755,] 0.9748641 0.9768049 0.9806201 #>  [756,] 1.7163732 1.7251956 1.7541153 #>  [757,] 0.9624285 0.9707040 0.9715642 #>  [758,] 0.9784889 0.9891589 0.9942499 #>  [759,] 1.2930295 1.3189623 1.3296776 #>  [760,] 0.8508129 0.9489323 0.9801974 #>  [761,] 0.6463231 0.6483283 0.6637134 #>  [762,] 0.5834604 0.6088368 0.6383551 #>  [763,] 0.6066992 0.6217337 0.6294513 #>  [764,] 1.1734119 1.1893098 1.1893932 #>  [765,] 0.8825166 0.8862550 0.9008699 #>  [766,] 1.5346162 1.5430535 1.5995332 #>  [767,] 0.7367394 0.7563018 0.7785785 #>  [768,] 0.8556421 0.8607998 0.8825974 #>  [769,] 0.8978137 0.9593798 0.9594456 #>  [770,] 0.5539483 0.5704797 0.5787882 #>  [771,] 0.6280613 0.6608675 0.6786759 #>  [772,] 1.0121614 1.0158847 1.0193493 #>  [773,] 1.0163836 1.0384575 1.0633730 #>  [774,] 0.7826744 0.7886001 0.8163242 #>  [775,] 0.8129792 0.8195663 0.8221312 #>  [776,] 0.8049425 0.8191020 0.8345838 #>  [777,] 0.8699080 0.9120973 0.9127125 #>  [778,] 1.0405190 1.0507727 1.0508686 #>  [779,] 0.7202987 0.7344837 0.7531549 #>  [780,] 0.5066802 0.5189158 0.5352654 #>  [781,] 1.3021742 1.3134598 1.3477393 #>  [782,] 0.7139990 0.7365014 0.7515671 #>  [783,] 0.5994176 0.5994369 0.6214478 #>  [784,] 0.5797305 0.5825139 0.5987487 #>  [785,] 0.9108976 0.9218970 0.9281638 #>  [786,] 0.8189061 0.8553429 0.8632394 #>  [787,] 0.7447475 0.8019101 0.8062966 #>  [788,] 0.6052589 0.6623913 0.6730858 #>  [789,] 0.6503719 0.6567827 0.6780329 #>  [790,] 0.5066802 0.5221259 0.5244229 #>  [791,] 1.1745096 1.2105194 1.2921329 #>  [792,] 0.6619993 0.6665641 0.6781264 #>  [793,] 0.5053420 0.5056296 0.5100396 #>  [794,] 0.5475722 0.5884176 0.5888366 #>  [795,] 0.9243577 0.9310811 0.9413705 #>  [796,] 0.5455971 0.5891893 0.5945936 #>  [797,] 0.7375290 0.7669405 0.8136884 #>  [798,] 1.0890889 1.1061301 1.1152411 #>  [799,] 0.6719767 0.6851759 0.6852865 #>  [800,] 1.1934423 1.2281478 1.2291469 #>  [801,] 0.5053420 0.5206923 0.5220304 #>  [802,] 0.7426401 0.7521436 0.7586472 #>  [803,] 1.1442447 1.1596929 1.1981744 #>  [804,] 1.3081984 1.3090885 1.3596680 #>  [805,] 0.6768424 0.6959722 0.7028574 #>  [806,] 0.6376368 0.7347804 0.7855045 #>  [807,] 0.5329278 0.5807157 0.6796043 #>  [808,] 1.1180750 1.1250380 1.1307023 #>  [809,] 1.7769896 1.7802452 1.7883017 #>  [810,] 0.5854856 0.6038059 0.6097186 #>  [811,] 0.7160144 0.7371898 0.7868989 #>  [812,] 0.7208816 0.7214171 0.7698611 #>  [813,] 1.0012189 1.0124799 1.0343231 #>  [814,] 1.5136249 1.5140191 1.5390155 #>  [815,] 0.5719801 0.5765950 0.6014012 #>  [816,] 0.8583850 0.8702248 0.8822194 #>  [817,] 0.8611776 0.8649329 0.8661589 #>  [818,] 0.9625194 0.9716051 0.9724347 #>  [819,] 0.5584441 0.6213532 0.6241279 #>  [820,] 1.3111551 1.3331311 1.3696013 #>  [821,] 0.4247537 0.4283122 0.4311260 #>  [822,] 0.6406493 0.6500004 0.6727601 #>  [823,] 0.8670282 0.9150336 0.9179197 #>  [824,] 1.2345009 1.2796798 1.2904966 #>  [825,] 0.9741229 1.0226902 1.0481047 #>  [826,] 0.5161449 0.5231141 0.5607576 #>  [827,] 0.8906206 0.8977731 0.9104393 #>  [828,] 0.6599498 0.6714740 0.7131149 #>  [829,] 1.5656336 1.5671280 1.5863353 #>  [830,] 0.6459516 0.6481295 0.6749395 #>  [831,] 0.8295159 0.9107007 0.9118904 #>  [832,] 0.6426890 0.6431015 0.6812781 #>  [833,] 0.6999043 0.7187784 0.7244061 #>  [834,] 0.4329583 0.4946602 0.5577018 #>  [835,] 1.3801660 1.3814285 1.3985668 #>  [836,] 0.9609607 1.1151065 1.1232381 #>  [837,] 0.6084786 0.6156311 0.6416995 #>  [838,] 0.9678764 0.9762165 0.9855130 #>  [839,] 1.0501064 1.0597368 1.0667170 #>  [840,] 0.5174615 0.5386406 0.5547267 #>  [841,] 0.7475867 0.7701968 0.7852482 #>  [842,] 0.7059222 0.7497361 0.7501835 #>  [843,] 1.1844298 1.3052446 1.3078718 #>  [844,] 0.8742576 0.9196237 0.9594456 #>  [845,] 0.5652265 0.6257288 0.6326412 #>  [846,] 1.3386203 1.3839337 1.3856525 #>  [847,] 0.6249506 0.6402600 0.6403005 #>  [848,] 1.1466205 1.1948941 1.1975840 #>  [849,] 0.5274160 0.5325935 0.5510590 #>  [850,] 0.6577861 0.6664406 0.6699231 #>  [851,] 0.9115275 0.9304820 0.9591916 #>  [852,] 0.5456999 0.5468248 0.5475722 #>  [853,] 0.7029357 0.7099608 0.7129410 #>  [854,] 0.8730761 0.8787716 0.9180842 #>  [855,] 0.7826744 0.7991004 0.8075759 #>  [856,] 1.5388090 1.5524143 1.5976263 #>  [857,] 0.6015055 0.6157499 0.6335730 #>  [858,] 0.7644309 0.7681191 0.8258210 #>  [859,] 1.2846227 1.2930661 1.2943769 #>  [860,] 0.7384802 0.7630708 0.7935590 #>  [861,] 0.6653476 0.6956442 0.6961646 #>  [862,] 0.4732793 0.5404666 0.5470389 #>  [863,] 0.8035524 0.8252103 0.8335693 #>  [864,] 0.9294561 1.0775018 1.0955893 #>  [865,] 0.5342810 0.5849814 0.5944924 #>  [866,] 0.5825964 0.5989313 0.6345245 #>  [867,] 0.6115714 0.6295589 0.6551473 #>  [868,] 0.7557889 0.7664958 0.7772167 #>  [869,] 0.9967808 1.0041083 1.0863151 #>  [870,] 1.0598272 1.0974567 1.1122509 #>  [871,] 0.6621470 0.6820651 0.7049392 #>  [872,] 0.5755419 0.5777749 0.6033637 #>  [873,] 0.9195576 0.9463128 0.9612616 #>  [874,] 0.6008911 0.6189313 0.6234639 #>  [875,] 0.6308935 0.6519247 0.7282510 #>  [876,] 0.9926123 1.0486008 1.0497778 #>  [877,] 0.5810066 0.5841283 0.5850655 #>  [878,] 0.7272257 0.7373227 0.7900123 #>  [879,] 0.6256642 0.6412380 0.6585862 #>  [880,] 0.6076184 0.6496542 0.6502464 #>  [881,] 0.9518128 0.9529206 0.9678827 #>  [882,] 0.5661919 0.5927913 0.6121432 #>  [883,] 0.6395726 0.6623249 0.6656604 #>  [884,] 0.8115553 0.8343006 0.8529159 #>  [885,] 1.1111980 1.1254821 1.1605266 #>  [886,] 0.5581127 0.5840682 0.6036394 #>  [887,] 0.6566531 0.6818557 0.7025152 #>  [888,] 0.8286382 0.8352073 0.9095717 #>  [889,] 0.5531305 0.5744406 0.6258908 #>  [890,] 0.8642787 0.8796343 0.9074971 #>  [891,] 0.6839282 0.6939164 0.7095014 #>  [892,] 1.5317893 1.5489303 1.5740127 #>  [893,] 0.9103780 0.9194374 0.9423361 #>  [894,] 0.9404797 1.0293842 1.0889476 #>  [895,] 1.2558508 1.2565452 1.2787837 #>  [896,] 1.4650669 1.5067914 1.5598404 #>  [897,] 0.4965961 0.5016970 0.5149963 #>  [898,] 0.6054276 0.6429881 0.6838499 #>  [899,] 0.5167508 0.5733566 0.6112863 #>  [900,] 0.7144465 0.7182944 0.8127992 #>  [901,] 0.9493937 1.0475107 1.0996935 #>  [902,] 1.1299976 1.1337776 1.1521135 #>  [903,] 0.8950361 0.9143072 0.9146129 #>  [904,] 0.8661887 0.8674704 0.8677415 #>  [905,] 0.8014286 0.8203869 0.8247256 #>  [906,] 0.5307431 0.5394292 0.5587740 #>  [907,] 0.7646705 0.7859571 0.8214114 #>  [908,] 1.0180352 1.0458498 1.0981911 #>  [909,] 1.0016601 1.0336192 1.0345606 #>  [910,] 0.8727917 0.9071608 0.9743492 #>  [911,] 0.7396918 0.7742714 0.8059456 #>  [912,] 0.6082973 0.6442239 0.6659218 #>  [913,] 1.2449175 1.2593992 1.2683980 #>  [914,] 0.9763766 1.0066649 1.0644944 #>  [915,] 0.8406561 0.8529159 0.8624085 #>  [916,] 0.9508022 0.9921804 1.0059785 #>  [917,] 0.9615050 0.9926525 1.0428204 #>  [918,] 1.4158221 1.4554805 1.4594704 #>  [919,] 0.8878980 0.9639582 1.0028009 #>  [920,] 0.8355546 0.8800045 0.8941680 #>  [921,] 0.7608756 0.7742453 0.8035524 #>  [922,] 1.0070140 1.0076073 1.0131699 #>  [923,] 0.6538371 0.6542717 0.6630137 #>  [924,] 0.6020420 0.6241627 0.6839593 #>  [925,] 0.7009999 0.7144465 0.7890546 #>  [926,] 0.8945547 0.9134393 0.9165667 #>  [927,] 0.6294513 0.6728448 0.6882586 #>  [928,] 0.6078338 0.6415186 0.6521944 #>  [929,] 0.6645064 0.6728136 0.6931976 #>  [930,] 0.6801378 0.6989154 0.7222277 #>  [931,] 0.7297793 0.7584077 0.7629217 #>  [932,] 1.4149121 1.4187559 1.4189118 #>  [933,] 0.5934170 0.5967879 0.6082230 #>  [934,] 0.4789620 0.5189158 0.5420218 #>  [935,] 0.6406493 0.7072381 0.7370671 #>  [936,] 0.7101963 0.7128224 0.7176614 #>  [937,] 0.8050569 0.8177715 0.8355546 #>  [938,] 0.5499238 0.5733566 0.5783893 #>  [939,] 0.8099435 0.8120634 0.8306977 #>  [940,] 0.8018398 0.8032656 0.8158670 #>  [941,] 0.6893857 0.7015580 0.7876610 #>  [942,] 0.9854565 1.0132067 1.0143681 #>  [943,] 0.6972208 0.7271152 0.8054697 #>  [944,] 0.6561348 0.7102944 0.7204136 #>  [945,] 0.9598662 0.9753323 0.9797329 #>  [946,] 0.7835987 0.8360882 0.8586754 #>  [947,] 2.0199665 2.0655328 2.0983987 #>  [948,] 0.7310471 0.7474080 0.7694710 #>  [949,] 0.6337819 0.6501910 0.6693342 #>  [950,] 1.1905860 1.2143293 1.2326695 #>  [951,] 1.5127487 1.5175339 1.5451652 #>  [952,] 0.5687824 0.5834604 0.6075109 #>  [953,] 2.0680514 2.1032104 2.1127819 #>  [954,] 0.8536118 0.8737991 0.8843137 #>  [955,] 1.1072275 1.1355357 1.1414634 #>  [956,] 0.6731743 0.6833588 0.6846343 #>  [957,] 0.7878627 0.8210491 0.8680384 #>  [958,] 0.4766352 0.5231800 0.5971396 #>  [959,] 0.9884408 0.9945522 1.0507357 #>  [960,] 0.6764662 0.6949051 0.6990531 #>  [961,] 0.6402600 0.6618842 0.6737893 #>  [962,] 0.8616473 0.8718684 0.9045195 #>  [963,] 0.7323194 0.7523450 0.7679169 #>  [964,] 0.5694063 0.6622882 0.6736840 #>  [965,] 0.5915993 0.6074936 0.6083842 #>  [966,] 1.3336842 1.3983629 1.4072210 #>  [967,] 0.7494199 0.8467284 0.8489341 #>  [968,] 0.9219765 0.9923914 1.0021881 #>  [969,] 0.6448016 0.6556211 0.6559817 #>  [970,] 1.1830361 1.2009058 1.2531887 #>  [971,] 0.8130419 0.8161219 0.8887966 #>  [972,] 1.1412514 1.1639985 1.1699191 #>  [973,] 0.6141009 0.6363827 0.6433447 #>  [974,] 0.5336354 0.5450219 0.5844964 #>  [975,] 0.7270387 0.7289464 0.8203647 #>  [976,] 0.8358559 0.8444300 0.9344715 #>  [977,] 0.8260109 0.8284297 0.8353497 #>  [978,] 1.7207541 1.7237456 1.7472047 #>  [979,] 0.6082230 0.6542949 0.6644111 #>  [980,] 1.0109498 1.0531495 1.0648398 #>  [981,] 1.1983752 1.2002157 1.2047966 #>  [982,] 0.6815153 0.6864827 0.7006269 #>  [983,] 1.1585249 1.1864220 1.1868981 #>  [984,] 0.9450763 0.9725860 0.9884720 #>  [985,] 0.8474627 0.8545195 0.8580885 #>  [986,] 1.1036654 1.1774915 1.2023256 #>  [987,] 0.7187784 0.7369195 0.7448406 #>  [988,] 0.5512114 0.5520172 0.7349225 #>  [989,] 0.7279254 0.7797859 0.8205810 #>  [990,] 0.8681607 0.8999218 0.9293016 #>  [991,] 0.8403195 0.8624474 0.8803382 #>  [992,] 0.6113145 0.6378893 0.6488143 #>  [993,] 0.6404178 0.6471349 0.7015847 #>  [994,] 1.0865217 1.0932648 1.1152656 #>  [995,] 0.8360882 0.8488140 0.8588565 #>  [996,] 0.7967628 0.8420562 0.9025528 #>  [997,] 1.0771834 1.0982860 1.1054741 #>  [998,] 1.5101174 1.5594214 1.5999814 #>  [999,] 0.8416457 0.8636713 0.9527628 #> [1000,] 1.1018125 1.1059846 1.1261027 #>   # Find the 10 approximate nearest neighbors (see RANN::nn2) tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\",     eps = 0.3 ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  882   70  563  933  979  281  663  491  153   544 #>    [2,]  712  559  312  182  946  338  973  728  116   641 #>    [3,]  538  875  912  988  198  558  866  389  106   599 #>    [4,]  493  742  268  619  190  191  540   97  617   635 #>    [5,]  427  794  378   45  949  191  227  119  583   555 #>    [6,]  871  674  861  796  807  314   54  322  936   311 #>    [7,]  367  733  723  714  206  538  360  262  417   404 #>    [8,]  685  251  131  184  220  275  526  436  848   590 #>    [9,]  570  115   60  834  560  434  877  965  883   687 #>   [10,]  927  802  230  741  419  529  906  551  871   396 #>   [11,]  465  395   64  531  212  911  183  754  334   441 #>   [12,]  847  294  788  627  378  430  631  680  961    45 #>   [13,]  998  917   22  180  118  786  379  908  261   140 #>   [14,]  669  466   31  888   96  353  487  428  448   208 #>   [15,]  678   90  622  366  473  752  164  541   82   779 #>   [16,]  636  943   69  587  621  941  192  376  339    58 #>   [17,]  297  886  572   54  318  796  842  711  837     1 #>   [18,]  111   80  226  805  501  412  256  893  221   143 #>   [19,]  276  334  691  682  548  515  614  754  611   827 #>   [20,]  722  597  366  918  678  926  128  164  622   989 #>   [21,]  993   53  873  200  469  723  714  452   77   404 #>   [22,]  917  261  786  118  545  925  566  831  708   104 #>   [23,]  480  425  171  249  764  787  706  860  380   468 #>   [24,]  517  153  623  302   37  778  791  985  413   725 #>   [25,]  541  171  473  468   23  425  759   82  951   480 #>   [26,]  761  771  402  381  497  546   49  708  192   840 #>   [27,]  399  990  168  752  858  364  468   55   93   939 #>   [28,]  126  145   58  416  806  941  119  177  847   574 #>   [29,]  874  675  695  533  826  569  346  581  862   612 #>   [30,]  403  767   36  440  265  689  827  148  995   922 #>   [31,]  518  487  303  448  643  210  911  323  185   827 #>   [32,]  698  197  734  134  822  711  253  833  731    78 #>   [33,]  807  103  905  861  654  497  573  311  170   796 #>   [34,]  446  411  304  259  959  453  727  405  968   288 #>   [35,]  442  819  634  738  763  193  792  248  429   484 #>   [36,]  204   30  767  403  440  995  218  909  579   768 #>   [37,]   70  623  153    1  886  882  837  297   17   933 #>   [38,]  110  492  688  107   89  478   60  286  834   350 #>   [39,]  363  539  282  700   62  320  604  630  368   484 #>   [40,]  737  270  564  969  864  390   87  836  632    48 #>   [41,]  105  638  375  398  736  550  937  428  524   516 #>   [42,]  441  775  672  682  754   84  323  483  334   341 #>   [43,]  475  768  579  234  289  787  388  585  279   326 #>   [44,]  130  857  849  277  782  279  606  874  335   974 #>   [45,]  378    5  358  227  867  119  794  285  847    12 #>   [46,]  985  684  302  910   37  842  841  486  291   345 #>   [47,]  331  756   67  258  844  237  384  574  769   295 #>   [48,]  463   87   91  554  599  199   40  774  878   568 #>   [49,]  676  381  217   52  402  832   26  322  151   241 #>   [50,]  274  320  113  142  143  382  805  388  475   850 #>   [51,]  940  729  150  255  805  481  226  511  598   876 #>   [52,]  676  865  840  656  322  187  292   49   89   381 #>   [53,]  200  811  227  612  377  298  723   77  575   469 #>   [54,]  796  318  674  187  886  322   17  807   72     6 #>   [55,]  858  603  537  739  535  327  512  576  990   718 #>   [56,]  313  391  868  802  961  813  885  424  443   464 #>   [57,]  719  166  808  140  709  272  908  542  447   928 #>   [58,]  941  145  806  943  177   28  621  285  126   867 #>   [59,]  401  407  273 1000  792  431  950  528  992   373 #>   [60,]  492  834   38  570  110  688  144  437  883   350 #>   [61,]  797  575  660  141  860  605  811  233  101   186 #>   [62,]  368  585  361  282   39  248  700  429  973   363 #>   [63,]  568  467  757  609  131  878  112  552  184   554 #>   [64,]   11  465  803  212  395  531  703  334  911   183 #>   [65,]  873  452  739  362   83   21  921  816  156   577 #>   [66,]  625  716  412  455  829  476  109  856  237   735 #>   [67,]  258  701  574  844  769  177  123   47  989   540 #>   [68,]  552  945  704  112  127  609  884  758  977   211 #>   [69,]   16  636  943  502   49  402  494  566  397   434 #>   [70,]    1   37  882  933  274  837  142  663  281   563 #>   [71,]  500  979  486  689  544  274  451  143  805   592 #>   [72,]  497  187  322  381  840   54  676   52   26   674 #>   [73,]  240  663  841  519  882  345   94  601  563   979 #>   [74,]  342  607  948  938  284  992  931  372  357   549 #>   [75,]  179  213  846  644  458  957  755  981  385   740 #>   [76,]  838  173  424  846  479  136  634  386  632   699 #>   [77,]  315  472  897  377  396  679  770  470  404   133 #>   [78,]  822  698   32  197  292  833  915  134  884   935 #>   [79,]  175  489  169  668  610  365  574   28   97   237 #>   [80,]  893  501   18  111  221  256  143  549  805   226 #>   [81,]  531  435  183  395  532  550  937  748  428   536 #>   [82,]  380  616  706  692  215  296  335  960  400   321 #>   [83,]  421   65  825  452  578  577  383  362  873   102 #>   [84,]  584  801  323  448  754  775  243  212  420   330 #>   [85,]  956   32  915  720  202  155  988  389  875   755 #>   [86,]  277  594  849  924  576  206  377  612  857   233 #>   [87,]   88   48  855   40  667  870  969  463  537    91 #>   [88,]   87  969  667  106  599  912  898  963  855   537 #>   [89,]  522   38  591  207  286  834  688  144  492   110 #>   [90,]  215  622   15  380   82  141  678  706  164   960 #>   [91,]  774  463  245  828  290   48  707  999  996   825 #>   [92,]  891  262  554  923  199  993  362  714  526   452 #>   [93,]  990  816   27  858  168  349  577  512  752   622 #>   [94,]  240  485  785   73  519  663  588  922  820   563 #>   [95,]  319  647  929  875  650  988  558  231  338   632 #>   [96,]  880  888  456  300  104  987  202  591  428   144 #>   [97,]  169  540    4  593  126  493  735  170  574   246 #>   [98,]  317  330  461  821  790  652  801  713  223   780 #>   [99,]  482  791  596  333  725  651  562  114  336   453 #>  [100,]  534  954  772  588  152  451  724  153  979   808 #>  [101,]  974  860  753  400  594  849  279  797  130   117 #>  [102,]  666  421  235  590  436  721  370  214  220   376 #>  [103,]  905  705   33  190  311  807  964  742  654   159 #>  [104,]  257  545   96  987  516  731  398  698  197   202 #>  [105,]   41  977  398  375  467  257  638  736  878   843 #>  [106,]  912  969  898  343  181  603  417  390  963   558 #>  [107,]  478  586   38  790  821  492  189  110  317   350 #>  [108,]  699  830  677  743  225  464  239  710  385   763 #>  [109,]  625  765  481  135  971  619  735    4  190   455 #>  [110,]  688  492   38  437  821  478   60  107  144   793 #>  [111,]   18   80  226  805  501  412  893  143  256   221 #>  [112,]  552   63  609  467  981   68  945  184  131   568 #>  [113,]  274  673  142  491   50  382  652  330  872    70 #>  [114,]  543  506  127  589  704  161  333   99  310   596 #>  [115,]  639  570    9  834  188  207  904  194  746    60 #>  [116,]  879  728  973  559  509  182    2  957  700   338 #>  [117,]  186  580  860  753  101  797  659  974  980   484 #>  [118,]  786  925  589   22  140  708  917  104  545   822 #>  [119,]   45  427    5  126   12  378  631  847  930   416 #>  [120,]  863  747  717  990  349  921   55  818  249   168 #>  [121,]  628  626  726  890  894  942  406  261  831   661 #>  [122,]  643  845  223  210  780  579  673  185  420   793 #>  [123,]  393  605   45  631  701  867  847  983  145   119 #>  [124,]  254  580  800  521  301  966  289  326   43   117 #>  [125,]  750  367  897  282  363  630  230  419  206   679 #>  [126,]   28  416  145  119   97  593  777   58  941   806 #>  [127,]  884  704  543  758  900  624  506   78  945   915 #>  [128,]  245  996  678  926  816  707  535  858  718   512 #>  [129,]  903  654  246  170  392  546  567  306  152   693 #>  [130,]   44  514  849  974  279  857  277  371  400   335 #>  [131,]  184    8  848  220  685   63  251  851  758   554 #>  [132,]  214  376  337  996  707  721  621  309  167   362 #>  [133,]  679  738  315  897  472   77  404  230  715   442 #>  [134,]  734  253  292  197   32  731  698  217  322   822 #>  [135,]  976  919  481  971  556  109  729  617  625   226 #>  [136,]  386  866  715  650  923  929  173  479  558   508 #>  [137,]  472  315  404  470  679  479  195   77  634   133 #>  [138,]  955  291  418  892  394   46  146  302  910   592 #>  [139,]  185  648  643  845  244  303  911  238  934   399 #>  [140,]  908  709  336  242  219  719  166  928  118    57 #>  [141,]  215  706   61  817  660  616  694  328   82   233 #>  [142,]  872  274  113  486   50  579   70  889  684   440 #>  [143,]  501  221  805   50  274  388  486  347  320   592 #>  [144,]  591  688  300  731   89   60  110   38  456   492 #>  [145,]  806   58  941  285  416   28  126  867  177   847 #>  [146,]  592  302  486  359  778  221  955  352  143    71 #>  [147,]  451  500  789  954  544  438  159  994  614   600 #>  [148,]  827  914  243   30  518  265  611   31  703   909 #>  [149,]  192  402  228  546   26  339  502  474  172   761 #>  [150,]  255  511  696  729  815  940  158  805  958   964 #>  [151,]  936  551  741   49  322  217  582  529  325   397 #>  [152,]  724  567  530  100  413  129  534  772  497   242 #>  [153,]  979  882    1   37   24  413  534   70  933   623 #>  [154,]  358  565  635  285  348  640  346  695  569   268 #>  [155,]  523  305  944  389  952  956  879  973  762    85 #>  [156,]  718  362  714  898  739  537  603  535  512   707 #>  [157,]  114  211  704  161  333  458  127   68  543   589 #>  [158,]  696  958  705  203  964  815  810  311  461   511 #>  [159,]  789  964  544  451  693  103  905  500  147   705 #>  [160,]  178  649  432  469  575  811   21  200  393   369 #>  [161,]  333  458  644  658  114  250  755  833  935   387 #>  [162,]  208  776  210  163  495  353  280  952  681   643 #>  [163,]  208  162  720  681  389  776  952  503  305   944 #>  [164,]  622  678  581  702  692  328  779  695  694   348 #>  [165,]  587  666  228  610   58   28   16  943  436   636 #>  [166,]  808  719   57  140  775  908  928  709   42   954 #>  [167,]  220  986  199  554  214  568  132   91  707   566 #>  [168,]  990  468   27  249  863  752  480  399  327   747 #>  [169,]   97  175  246  593  489  654  540  777  903     4 #>  [170,]  654  546  982  903  246  832  381  392   33   635 #>  [171,]   23  425  480  380  706  787   25  326  289   860 #>  [172,]  546  149  192  567   26  222  129  402  339   392 #>  [173,]  632  838  136  386  195  424  479  650   76   866 #>  [174,]  870  270  737   40  717  864   87  564  120   231 #>  [175,]  169  668  489  246   97  777   79  593  365   126 #>  [176,]  410  922  914  232  271  909  265  995  148   767 #>  [177,]  621  941  574   58  285  989  145  943  337   154 #>  [178,]  160  469  575   21  873  818  355  200  369    53 #>  [179,]  981  915  458   75  760   85  650  740  644   945 #>  [180,]  998  379   13  908  308  140  589  118  888   336 #>  [181,]  603  106  921  898  963  390  537    7  664   969 #>  [182,]  496  973  889    2  728  952  305  236  700   879 #>  [183,]  531   81  395  937  244  353  428  532  667   487 #>  [184,]  131    8  251  609  624  923  884  508  799   687 #>  [185,]  139  643  845  244  648  210  303  122  934   162 #>  [186,]  117  797  369  520  484  580  980  860  659   753 #>  [187,]  840  656   54   72  318  322   52  865  676   381 #>  [188,]  812  639  686  309  570  834  115  779  341   746 #>  [189,]  586  107  286  478  241  832  322  381  746   982 #>  [190,]  742  619  493    4  103  705  905  617  268   683 #>  [191,]  268  427  852  493  794  640    4  617    5   635 #>  [192,]  402  149  546   26  339  381  502  228  832    49 #>  [193,]  792  484  819  293  992  442  407  539  899   738 #>  [194,]  207  639  832  522  341  834  982  831  196   241 #>  [195,]  404  390  561  558  564    7  137  679  866   479 #>  [196,]  670  392  975  447  444  341  661  982  194   422 #>  [197,]  698   32  731  734  134  822  292  253   78   833 #>  [198,]  253  350  877  681    3  799  734  325  134   862 #>  [199,]  825   92  568   48  167  554  463   91  220   362 #>  [200,]  811   53  227  575   77  583  520  377  378   298 #>  [201,]  841  910  901  302   73  146  913   46  684   240 #>  [202,]  987  720  880  760  935  698  516   96  104   681 #>  [203,]  958  158  514  640  696  705  852  311  790   810 #>  [204,]   36  329  978  414  768  403  289  966  218    43 #>  [205,]  751  994  808  100  719  152  306  690   57   653 #>  [206,]  367  377    7  612  298   86  906  630  360   396 #>  [207,]  522  194  834   89  341  286  570  672  639   591 #>  [208,]  162  163  776  681  495  353  280  965  516   210 #>  [209,]  795  700  282  225  291  248  677  429  108   509 #>  [210,]  643  162  122  845  889  185  776  426  208   762 #>  [211,]  458  760  945  179  915  250   68  704  740   987 #>  [212,]  775   84  448  682  518  754  243   42   31   323 #>  [213,]  595  846  225  795  108  699  385  644  957    75 #>  [214,]  132  996  376  337  707  721  167  362  590   220 #>  [215,]  141  380   82  706  622   90  694  817  616   960 #>  [216,]  287  498  730  269  713  670  887  557  812   366 #>  [217,]  292  286  325  676   49  397  434   52  134   322 #>  [218,]  553   36  592  146  418  352  768  922  486   232 #>  [219,]  242  572  423  140  833  318  709  935  197   928 #>  [220,]  590  167    8  131  235  376  848  214   69   436 #>  [221,]  501  143  256  623  893   80  347  805  146   549 #>  [222,]  339  332  149  474  708  172  831  771  761   192 #>  [223,]  420  801   98  330  122  845  780  515  793   317 #>  [224,]  239 1000  401  950  824  795  108  209  138   431 #>  [225,]  385  509  699  957  795  108  743  209  750   116 #>  [226,]  659  729  617  511  919  481  255  111  805    80 #>  [227,]  378  200  583  298   53  612  811  377   45   520 #>  [228,]  149  777  192  587  668  402  502  316  546   264 #>  [229,]  275  391   92    8  891  184  993  445  136   923 #>  [230,]  419  899  897  738  396   10  906  927  293   938 #>  [231,]  632  564  270  864  836  390   95   40  319   561 #>  [232,]  839  510  176  410  922  910  995   36  394   218 #>  [233,]  616  328  692  874  695   86  576  849  960   581 #>  [234,]   43  388  768  394  414   50  579  347  142   320 #>  [235,]  590  102  436  220  848  421  370  666    8   131 #>  [236,]  505  633  973  630  952  363  879  496  182   664 #>  [237,]  765  625  109  489   47  540  844  976  135   384 #>  [238,]  648  263  779  939  267  934  606  139  911   883 #>  [239,]  464  108  763  699  830  813  819  442   35   401 #>  [240,]   94   73  485  519  663  882  979  785  563   922 #>  [241,]  832  286  746  189   49  325  217  346  834   533 #>  [242,]  709  840  656  865  219  187  928  761  423    52 #>  [243,]   84  485  785  448  518  212  827  148   30    31 #>  [244,]  185  139  776  353  667  162  487  643  648   869 #>  [245,]   91  774  707  996  128  463  999  828  858   939 #>  [246,]  903  654  129  170  169  546  175  777   97    33 #>  [247,]  905  727  573  968  446  246  856  129  724   654 #>  [248,]  429  881  824   62  997  209  282   35  361   795 #>  [249,]  863  480  967  747  664  963   23  168  924   717 #>  [250,]  161  658  387  333  458  344  379  755  913   935 #>  [251,]  685    8  624  184  408  741  324  131  582   151 #>  [252,]  364  920  459  307   27  532  773  828   93   855 #>  [253,]  734  134  198  731  350  292   32  197  698   144 #>  [254,]  124  966  580  289  764  171  787   23  326   835 #>  [255,]  150  511  729  696  815  940  158  958  617   805 #>  [256,]  623  645  549  501  221  629   80  143  607   905 #>  [257,]  977  398  104  375  105  560  428  467  987   516 #>  [258,]   67  844  989  701  574  177  769  597  721   331 #>  [259,]  959  446  593  727  450   34  304  411  264   618 #>  [260,]  809  634  373  513  439  355   35  369  432   932 #>  [261,]  831   22  917  494  566  536  272  542  545   560 #>  [262,]  891  923  417  526  714    7  508  558   92   993 #>  [263,]  238  939  648  779  606  581  675  535  934   883 #>  [264,]  777  316  968  668  453  651  446  228  497   959 #>  [265,]  995  914  767  909  440  210  354   30  426   889 #>  [266,]  851  758  900  502  474  624  884  251  685   582 #>  [267,]  437  323  934  492  801  110  793   60  821   317 #>  [268,]  191  493    4  640  852  617  742  635  705   427 #>  [269,]  287  670  216  730  671  907  444  823  693   498 #>  [270,]  737   40  864  231  564  174  836  632  390   561 #>  [271,]  410  662  176  922  914  785  148   94  820    14 #>  [272,]  542  831  708  709  194  928  261  207  530   447 #>  [273,]  407  637  528   59  431  792  401  299  992   659 #>  [274,]  113   50  142   70  486  143  837  872  382   815 #>  [275,]  415  229  391  370    8  993  526  324  436   788 #>  [276,]   19  611  827  548  703  334  803  515  243   691 #>  [277,]  849   86  857  924  630   44  633  130  594   974 #>  [278,]   57  682   42  166  726  395  719  465  212   441 #>  [279,]  782  753  326  130  974  787  857   44  101   849 #>  [280,]  883  965  495   60  353  437  934  208  144   681 #>  [281,]  933  491  544    1  652   70  563  113  882   673 #>  [282,]  363  750  879   39  700  125   62  973  630   209 #>  [283,]  907  462  449  619  269  765  295  683  844   557 #>  [284,]  931  342   74  527  604  607  992  677  347   549 #>  [285,]  867  358  154  941  145  621  806  177   45   565 #>  [286,]  217  746  834   89   38  676  325  189  241   207 #>  [287,]  216  269  730  498  670  671  557  366  975   823 #>  [288,]  725  629  562  405  645  527  607  573  453   549 #>  [289,]  787   43  326  782  475  579  279  585  122   768 #>  [290,]  774  828  463   91  999  435  532  245  855   920 #>  [291,]  394  604  347  700  209  138   46  234  677    39 #>  [292,]  134  217  731  197  676  734  253   52  322   698 #>  [293,]  992  938  899  193  419  819  230  792  528   763 #>  [294,]  847   12  788  415  961  324  627  806  416   930 #>  [295,]  384  556  557  331  665  817  283  907  976   498 #>  [296,]  515  321  702  541   82  713  810  223  606   887 #>  [297,]   17  572  886  842  711  601   70  563  318    54 #>  [298,]  612  377  360  723  227  826  206  906   53   770 #>  [299,]  301  407  484  273  792  193  186  401  373    35 #>  [300,]  144  456  688  591  731  110  880  197   96    89 #>  [301,]  800  299  580  585  234  753  521  484  117    62 #>  [302,]  517  146   24   46  910  841  778  201  985   684 #>  [303,]  911  518  487   31  323  754  643  611  185   801 #>  [304,]  405  727  629  446   34  959  411  259  645   607 #>  [305,]  952  155  523  944  389  879  889  163  182   973 #>  [306,]  693  653  683  994  129  903  159  449  269   751 #>  [307,]  773  459  920  648  911  939  139  752  238   364 #>  [308,]  482  336  471  589  140  786  925  118  242   908 #>  [309,]  348  812  695  188  569  565  337  989  621    29 #>  [310,]  854  506  582   78  711  596  562  822  744   529 #>  [311,]  861  958  807  705  852  203  103  158  514   640 #>  [312,]    2  712  338  620  776  559  946  697  962   162 #>  [313,]  802  961  868  680  324  741   10  230  627   419 #>  [314,]  871  853    6  371  850  363  956  539  674   744 #>  [315,]  472   77  679  470  404  133  137  897  738   377 #>  [316,]  264  777  408  228  416  668  502  582  608   402 #>  [317,]  821  793  790   98  934  780  492  437  107   110 #>  [318,]   54  423  187  656   17  478  796  865  886   840 #>  [319,]   95  647  650  836  981  231  864  632  524   929 #>  [320,]  850   50  371  347  514   39  274  130  539   279 #>  [321,]  810  296  335  702  598  887  515  400  713   382 #>  [322,]  676   54  674   72   52  187  292  134  217    49 #>  [323,]  801  754  267  437  584   84  448  303  441   934 #>  [324,]  415  802  741  294  313  788  408  961  847   770 #>  [325,]  397  877  434  217  746  286  862  350  198   253 #>  [326,]  787  782  475  279  400  753   43  289  101   860 #>  [327,]  960  692  576  706  535  380  512   55  606   233 #>  [328,]  616  233  665  695  817  335  692  565  887   581 #>  [329,]  641  962  946  204  414  916  289  712   36   909 #>  [330,]  652  461  673   98  420  801  223  780  584   491 #>  [331,]  384   47  295  769  258  844  722  756  665    20 #>  [332,]  222  471  172  708  339  149  474  831  761   308 #>  [333,]  161  658   99  114  250  351  814  725  644   387 #>  [334,]  682  754  614  441  465   19   42   84  212   323 #>  [335,]  702  400  616  887  321  810  581  328  130    44 #>  [336,]  308  140  482  242  219  709  908  719  166   567 #>  [337,]  989  132  376  721  621  214  309  177  569   996 #>  [338,]  312    2  559  163  524  116  776  991  988   389 #>  [339,]  149  222  831  192  636  402  474  502  494    16 #>  [340,]  626  465  890  628  975  926  334  894  441   671 #>  [341,]  672  522  207  422  834  196  492  586  194   732 #>  [342,]   74  284  604  677  931  853  992  938  347   607 #>  [343,]  417  898  106  603  862  675  912  599  877     3 #>  [344,]  387  345  601  354  503   73  426  519  841   547 #>  [345,]  601  344  387   73  841  684  910  663  426    46 #>  [346,]  533  640  358   29  826  746  949  154  862   189 #>  [347,]  604  320  342  853  850  221  501  291  549   143 #>  [348,]  565  309  695  154  665  812  569  989  328   635 #>  [349,]  120  818  990   93  739  577  873  816  863   747 #>  [350,]  746   38   60  198  253  862  325  107  286   110 #>  [351,]  658  333  913  901  201  791  250   99  841   510 #>  [352,]  745  359  876  592  553  955  146  418  768   778 #>  [353,]  965  428  208  280  516  162  398  776  681   883 #>  [354,]  503  991  669  163  344  426  265  914  995   208 #>  [355,]  470  469  369  472  315  137   77  921  178   811 #>  [356,]  829  615  430  627  885  649  443   12  631   618 #>  [357,]  607  549  948   74  629  555  744  861  450   256 #>  [358,]  285  154   45  346  867  378  794  640  635   565 #>  [359,]  778  352  553  146  592   71  876  745  221   955 #>  [360,]  826  655  862  784  783  490  298  723  733   526 #>  [361,]   62  997  368  641  967  585  429  409  881   248 #>  [362,]  707  156  996  452  714  825   92  537  214   718 #>  [363,]   39  630  282  539  236  633  973  879  125   700 #>  [364,]  920  459   27  828  855  245  463  307  774    91 #>  [365,]  610  170  823  574  177  670  246  942  169    97 #>  [366,]   20  678  216  926  287  164  498   15  686   722 #>  [367,]  206    7  377  125  733  897  906  630  396   538 #>  [368,]   62  924  361  585  363   39  967  753  236   630 #>  [369,]  520  811  355  472  186  575  583  315  470    77 #>  [370,]  436  590  275  806  415  235  798  102  123   383 #>  [371,]  850  514  949  974  539  320  130  852  849   794 #>  [372,]  948  744  854  927  938   74   10  710  562   551 #>  [373,]  792  401  819   35  407  443  442  738  369   299 #>  [374,]  859  747  764  120  863  249  980   23  818   717 #>  [375,]  398  516  428  736  550  965   41  878  257   560 #>  [376,]  132  337  214  621  943  590  941  721  783   867 #>  [377,]  206  612  298  367   77  396  227   86  906   594 #>  [378,]   45  227    5  794  583  358   12  847  867   298 #>  [379,]  888  987   96  908  998  669  880  935  180   140 #>  [380,]  706  960  692   82  327  425  215  622  616   141 #>  [381,]   49  832   26  497  676   72  840  982  546    52 #>  [382,]  598  815  113  330   50  652  461  274  673   696 #>  [383,]  983  578  421  370  393  798  102  436  452   701 #>  [384,]  295  331  976  556  817  665  769  557  525   283 #>  [385,]  957  509  225  743  699  750  108  116  879   795 #>  [386,]  136  715  866  679  479  923  508  929  733   404 #>  [387,]  344  345  601  755  841   73  503  910  354   510 #>  [388,]  768  475  234   43   50  805  143  876  592   940 #>  [389,]  155  952  305  944  523  163  988  912  681     3 #>  [390,]  564  969  558  195  106  181  561   40  537   647 #>  [391,]  275  445  229  424   56  386  415  802  715   313 #>  [392,]  982  196  832  170  530  444  903  422  732   654 #>  [393,]  983  701  123  605  504  984  575  769  200   631 #>  [394,]  414  291  234  839  496  700  684  592  579   486 #>  [395,]  531  183   81  483  904   11  441  560  536    42 #>  [396,]  906  897  770  230  899  733   77  377  367   206 #>  [397,]  434  325  877  217  784  783  687  862  286   655 #>  [398,]  375  428  516  257   41  736  104  105  353   965 #>  [399,]   27  752  468  963  620  139  939   55  869   648 #>  [400,]  335  616  101  782  130  326  974   44  279   321 #>  [401,]   59  792  407 1000  950  819  373  273  992   431 #>  [402,]  192  149   26  502  546   49  381  771  761   832 #>  [403,]   30  767  440   36  122  689  827  579  548   265 #>  [404,]  679  195  315  137  472   77    7  133  733   367 #>  [405,]  629  304  607  288  527  931  645  549  727   411 #>  [406,]  890  628  896  894  972  918  926  121  642   942 #>  [407,]  792  528  273   59  193  401  992  293  819   637 #>  [408,]  324  294  415  251  885  416  741  685  806   847 #>  [409,]  361  764  697  997  641  967  712  946  559   916 #>  [410,]  176  922  271  232  344  510  914   94  240   345 #>  [411,]   34  948  288  507  854  629  405  446  607    74 #>  [412,]  455  856   18  111  716  109   80  625  476   304 #>  [413,]  724  886  623  153  573  796  807   37  933   187 #>  [414,]  585  641  496  394  234  579   43   62  768   329 #>  [415,]  324  788  294  275  847  770  526  408  806   961 #>  [416,]  126  145  930  847  806  294   28  936  119   358 #>  [417,]  343  898  262  599  106    7  877  862  714   360 #>  [418,]  955  138  745  352  592  146  394  218  768   234 #>  [419,]  230  899  738  927  710  763  830  938  897   293 #>  [420,]  223  330  801  515   98  461  652  673  713   584 #>  [421,]  102  235   83  383  590  452  436  370  666   825 #>  [422,]  438  732  672  341  586  478  392  584  196   447 #>  [423,]  318  928  656  732  478  865  300  187  242   709 #>  [424,]  391  173  386  838  445   56   76  715  136   133 #>  [425,]  480   23  706  171  380  960  860  787  782   327 #>  [426,]  762  889  872  440  547  767  944  519  563   210 #>  [427,]    5  191  794  971  555  268  119  852   45   378 #>  [428,]  398  353  375  965  516  550  560   96  280   483 #>  [429,]  248  881   62  824  997  282  361  209  795   634 #>  [430,]  631   12  627  119  443  680  583  847  378   649 #>  [431,]   59  950  273 1000  893  401  284  931  407   637 #>  [432,]  932  798  649  160   21  439  178  443  200   430 #>  [433,]  946  962  697  712    2  902  312  909  995   991 #>  [434,]  397  877  325  687  217  799    9  286  198   566 #>  [435,]  532   81  828  937  290  748  646  855  638   550 #>  [436,]  370  590  235  806  275  102  220    8  685    58 #>  [437,]  267  492  110  793  934  688  495  821   60   317 #>  [438,]  422  732  584  461  652  789  544  478  586   491 #>  [439,]   21  513  432  561  173  195  355  404  178   315 #>  [440,]  767  426  889  872  579  142  995  265  684   673 #>  [441,]   42  754  323  672  267  341  334  522   84   483 #>  [442,]   35  819  738  763  193  792  897  419  133   750 #>  [443,]  868  680  961  627  899  430  313  373  819   738 #>  [444,]  670  982  196  812  341  392  635  975  188   832 #>  [445,]  391  229  424  275   56  386  885  251    8   415 #>  [446,]  727  968  453  573  959   34  259  304  645   411 #>  [447,]  196  661  422  614  392  272   42  341  672   530 #>  [448,]  775   84   31  323  518  456  801  584  212   437 #>  [449,]  683  619  895  283  481  804  190  462  765   907 #>  [450,]  618  555  735  959  593  930  357  427  119   259 #>  [451,]  147  500  789  954  159  544  534   71  994   100 #>  [452,]   65  362  873   92   21  714  825  993  199    83 #>  [453,]  651  968  446  573  596  288  727  264  497   562 #>  [454,]  896  894  406  340  121  890  626  628  926   726 #>  [455,]  856  412  109  716  625  247  765  735  489   190 #>  [456,]  300  591   96  144  888  688  483  775  880   731 #>  [457,]  178  349  160  818  859  355  374  439  469   120 #>  [458,]  915  935  161  760  644  833   85  755  179   987 #>  [459,]  920  307  828  939  364  855  999  532  774   904 #>  [460,]  471  482  308  336   99  152  589  651  791   567 #>  [461,]  652  330   98  713  810  584  420  790  491   815 #>  [462,]  283  449  295  907  653  683  765  384  619   269 #>  [463,]   91  774  290   48  828  245   87  825  855   199 #>  [464,]  239  108  830  813  699  763  710  927  743   715 #>  [465,]  340   11  334  441  682  626  754   42  395   212 #>  [466,]  914   14  354  265  776  433  669   31  487   902 #>  [467,]  878  609   63  105  757  568  748  257  977   736 #>  [468,]  752  168  399  480  541  327   27  139  473   960 #>  [469,]  355  818  178   53  575  811  873  470  200   739 #>  [470,]  472  315  137   77  355  377  404   86  367   181 #>  [471,]  308  482  332  589  336  460  708  222  786   140 #>  [472,]  315   77  137  470  679  133  404  897  355   738 #>  [473,]  541  139  752  911  611  296  773  468  515   648 #>  [474,]  771  502  900  266  925  761   26  149  402   339 #>  [475,]  326  388   43  279   50  787  782  150  400   511 #>  [476,]  637  226  919  135  971  625  109  273  111    18 #>  [477,]  660  141  919  525  817  976   61  215  797   135 #>  [478,]  586  107   38  790  110  492  821  688  317   584 #>  [479,]  929  715  866  679  838  750  137  404  125   195 #>  [480,]  425   23  249  960  706  171  327  924  380   787 #>  [481,]  729  135  109  617  619  742  190  226  556   493 #>  [482,]  308  336  242  589  596  925  471   99  761   543 #>  [483,]  560  591  456  545  522  428  536  144  395   888 #>  [484,]  193  539  753   39  520  594  368  792  442   282 #>  [485,]  785   94  240  519  243  954  588  663  563   979 #>  [486,]  684  142  274   70  592  872  663  146  882   143 #>  [487,]   31  518  303  911  643  244  185  611  448   139 #>  [488,]  247  446  968  453   34  727  651  573  724   152 #>  [489,]  169  175  765   97   79  540  246  237  283   593 #>  [490,]  655  862  538  360  508  529  733  906  871   367 #>  [491,]  281  933  652  673  113  790    1  544  330   478 #>  [492,]  110  688   38  437  821   60  478  107  267   317 #>  [493,]    4  742  268  619  191  190  617  635  705   540 #>  [494,]  566  636  831  261   69  339  757   16  167    22 #>  [495,]  280  793  437  883  934  110  208   60  162   144 #>  [496,]  889  182  579  700  872  414  236  973  952   142 #>  [497,]   72  381   26  546  840  187  761   33  651   596 #>  [498,]  730  216  557  887  287  810  269  321  600   296 #>  [499,]  795  225  116  595  728  213  824  957  429   509 #>  [500,]  451   71  147  789  544  689  979  159  815   964 #>  [501,]  221  143  256   80  893  805  623  549  347    50 #>  [502,]  474  402  900  771  582  149  266   49   26   192 #>  [503,]  669  354  720  163  880  202  208  991  344   987 #>  [504,]  984  701  769  393  983  694  577  605  141    61 #>  [505,]  633  236  630  277  857  952   44  845  363   924 #>  [506,]  582  310  608  624  543  900  127  596  854   884 #>  [507,]  411  885  813  313  948  868  608  961   56   259 #>  [508,]  526  655  733  490  923  891  784  529  360   538 #>  [509,]  385  957  225  743  750  116  879  699  282   929 #>  [510,]  232  901  910  839  387  410  841  345  344   658 #>  [511,]  255  150  696  958  852  617  729  158  805   815 #>  [512,]  718  535  327  739  694  816  858  960   55   156 #>  [513,]  634  561  137  231  838  195  355  564  404   632 #>  [514,]  203  130  371  958  850  696  852  640  320   790 #>  [515,]  296  420  713  223  321   98  810  461  598   801 #>  [516,]  681  375  965  398  736  428  353  198  104   731 #>  [517,]   24  302  791  778  623  153  725  985   37    46 #>  [518,]   31  303  487  827  611  448  911  643  212   323 #>  [519,]  563  547  663  240  882   73    1   94  785   485 #>  [520,]  583  594  227  811  369  377   77  396  539   484 #>  [521,]  835  800  580  301  124  299  980  117  186   254 #>  [522,]  207   89  834  341  672  492  591   38  688    60 #>  [523,]  155  305  944  389  952  956  879  853  363   314 #>  [524,]  740  338  843   41  647  720   95  319  875   105 #>  [525,]  759   82  556  477  295  817  498  384  215   557 #>  [526,]  508  784  655  891  733  360  770  723  923   993 #>  [527,]  931  284  342  405   74  629  725  607  288   549 #>  [528,]  407  992  293  273  193  792  583  555  659   637 #>  [529,]  490  956   10  508  741  151  655  551  134   538 #>  [530,]  567  709  656  840  732  392  242  542  928   187 #>  [531,]  395  183   81  532  904   11  435  483  536   920 #>  [532,]  435   81  828  920  290  531  459  855  937   183 #>  [533,]  346  862  826  746   29  350  360  874  783   325 #>  [534,]  100  772  954  588  153  979  451  724  882   240 #>  [535,]  718  512  327  858  675   55  156  263  939   603 #>  [536,]  560  748  483  261   81  566  904  545    9   986 #>  [537,]  898  603  969   55  156  181  417  106  390   921 #>  [538,]    3  866  490  988    7  367  558  923  508   912 #>  [539,]  594   39  363  371  974  849  484  630  277   753 #>  [540,]  574   97  844    4  493  907  154  177  268   765 #>  [541,]  473  296   25  515   82  223  468  321  782   752 #>  [542,]  272  709  928  708  831  865  207  530  656   194 #>  [543,]  589  925  506  114  786  900  474  771  596   118 #>  [544,]  281  933  789  491    1  964  652  979  159   882 #>  [545,]  591  560  104   89  731  483  144  207  566   292 #>  [546,]  192  170  381   26  402  497  149  982  172   832 #>  [547,]  563  519  762  426    1  491  663  673  882   601 #>  [548,]  598  420  515  689  403  382  223  827  321   600 #>  [549,]  607  357  256  629  623  645  931  501   74   347 #>  [550,]  667  375  965  937  428  353  828  398  599     9 #>  [551,]  936  741  151  744   10  674    6  871  529   322 #>  [552,]  758   68  112  609   63  884  945  851  127   757 #>  [553,]  359  352  218  146  592  778   71  876  302   955 #>  [554,]  599  878  687   48  799   92  568  891  877   262 #>  [555,]  930  450  794  427  618    5  191  378  357   861 #>  [556,]  817  976  557  665  135  729  328  295  887   617 #>  [557,]  730  887  498  619  742  556  665  810  907   493 #>  [558,]  390  866  647  929  969  988  923    3  875   538 #>  [559,]    2  967  973  116  664  338  879  312  620   236 #>  [560,]  483  536  545  591    9  375  428  398  104   566 #>  [561,]  921  195  564  390  181  404  969  632  537   513 #>  [562,]  854  725  288  744  842  372  711  310  596   886 #>  [563,]  547  519    1  882  663  491   70  281  933   979 #>  [564,]  390  969  231  632  561  195   40  558  270   106 #>  [565,]  695  348  154  569  309  285  989  358  665   328 #>  [566,]  494  545  434  687  194  261   69  217  115   207 #>  [567,]  530  709  152  840  656  392  242  732  542   708 #>  [568,]  878   63  554  467  199   48  167  748  757   986 #>  [569,]  695  565   29  309  867  612  348  285  154   826 #>  [570,]  834    9  115   60  746  639  522  207  188   286 #>  [571,]  201  791  778  517  302  553   24  359  901   146 #>  [572,]  297   17  711  601  318  219   32  833  842   197 #>  [573,]  645  727  968  413  905   33  446  453  623   629 #>  [574,]  844  540  177  258   67   97  365  941   58   154 #>  [575,]  811   61  200   53  469  605  797  369  227   520 #>  [576,]  327   86  960  924  233  603   55  706  512   692 #>  [577,]  816  739  984  504  873   65   93  983  694   512 #>  [578,]  383   65   83  452  873  178  983  577  160    21 #>  [579,]  496  142  889  872   43  440  767  122  414   113 #>  [580,]  117  980  860  186  753  521  124  301  800   835 #>  [581,]  702  606  874  692  263  164  675  335   29   695 #>  [582,]  900  151  506  502  310  771  624  551   72    49 #>  [583,]  520  227  378  811  680  396  794  594   77   899 #>  [584,]  801   84  330  323   98  478  652  437  492   110 #>  [585,]  414   62   43  368  234  641  496  361   39   579 #>  [586,]  478  107  189  790   38  821  732  492  110   672 #>  [587,]  165   16  228  636  943  610   69  666  192   339 #>  [588,]  954  100  534  772  485  808   94  240  785   820 #>  [589,]  543  925  786  118  308  482  708  242  761   140 #>  [590,]  436  220  235  370  376  102  214    8  666   132 #>  [591,]  144   89  456  300  688  731  522  545  483    60 #>  [592,]  146  486  768  388  143  352  234  876  221   955 #>  [593,]  735   97  169  450  959  126  618  777  259   727 #>  [594,]   86  849  974  539  101  277  520  377  206   949 #>  [595,]  795  213  225  209  677  957  108  385  644   839 #>  [596,]  651   72  310  497  562  582  453  854  761   482 #>  [597,]  722   20  918  989  721  128  258  926  337   984 #>  [598,]  382  321  815  810  461  940  548  420  330   150 #>  [599,]  417  554  343  877  799  736    3  262  198    88 #>  [600,]  691  730  598  498  789  810  693  147  461   515 #>  [601,]  345  344  572  297   73  387  547  563  519   426 #>  [602,]  937  638  435  855  646  532  667   87  870    41 #>  [603,]  898  181  343  537  106   55  417  675  156   576 #>  [604,]  347  342  853  992   39  284  320  291  931    74 #>  [605,]  631  575    5  123   45  393  811  769  378   227 #>  [606,]  581  702  874  263   44  845  692  934  675   317 #>  [607,]  549  357  629   74  931  342  405  948  645   284 #>  [608,]  506  624  582  251  854  310  741  316  408   802 #>  [609,]  467  884  945  687  184  799  736  878   63   552 #>  [610,]  365   16  943  942  587  636  177   58  574   941 #>  [611,]  827  518  303  803  911  487   31  473  276   643 #>  [612,]  298  377  723   53  227  206  826  360   86    29 #>  [613,]  452  229   92  199  235  275   65  848  825    21 #>  [614,]  691  334  447  682  422  438  147  693   84   600 #>  [615,]  356  507  885  627   56  932  443  868  961   813 #>  [616,]  328  335  400  692  233   82  706  101  702   960 #>  [617,]  852  268  191  729  742  511  493  705    4   255 #>  [618,]  450  735  555  427  119  971  593  191  930   959 #>  [619,]  742  190  493    4  907  557  765  481  268   449 #>  [620,]  963  312  664  967  712  559  399  916    2   249 #>  [621,]  177  941  943  337  376  285   58  309  154   989 #>  [622,]  678  164  380  960  215  692  512   82  327   535 #>  [623,]  256   37  645  549  413   24  221  501  153   886 #>  [624,]  251  884  758  900  506  582  608  266  851   184 #>  [625,]  109  765  237  135  971  735  481  455  618   976 #>  [626,]  628  890  340  121  904  975  441  894  639   661 #>  [627,]  961   12  294  847  680  788  443  313  885   868 #>  [628,]  890  626  975  121  926  686  639  942  340   406 #>  [629,]  405  645  607  549  288  357  727  931  256   527 #>  [630,]  633  363  277  505  236  206  367  539  924   849 #>  [631,]  430  605   12  119    5   45  378  123  811   200 #>  [632,]  231  564  836  864  390  173   40  195  270   558 #>  [633,]  505  630  236  277  363  924  912  973  664   857 #>  [634,]   35  137  838  442  479  513  472  429  315   881 #>  [635,]  154  640  268  493    4  191  203  358  705   444 #>  [636,]   16   69  943  339  494  587  192  402  972   831 #>  [637,]  273  528  407  476  659   59  431  226  186   919 #>  [638,]   41  937  646  105  435  602  398   81  550   375 #>  [639,]  115  570  188  194  834  207  812  686    9   341 #>  [640,]  203  268  949  852  635  346  191  794  154   514 #>  [641,]  414  329  182  361  585  946    2  496   62   962 #>  [642,]  972  406  942  121  726  896  890  628  661   636 #>  [643,]  185  210  122  845  139  303   31  223  162   518 #>  [644,]  755  458  957  385   85  161  743  108  699   915 #>  [645,]  256  573  629  623  727  549  607  357  288   405 #>  [646,]  748  638  435   81  602  105  467   41  532   937 #>  [647,]  875  558  988  929   95    3  912  969  650   106 #>  [648,]  238  139  939  263  185  606  934  845  883   911 #>  [649,]  798  430  432  160  631  932   12  393  627   811 #>  [650,]  136  647  929  875  866  558   95  923  988   981 #>  [651,]  453  596  968  497   72  573  562  264  854   446 #>  [652,]  461  330  491   98  673  281  113  790  584   815 #>  [653,]  306  693  283  683  449  269  462  129  671   903 #>  [654,]  903  170  129  246   33  103  392  546  982   905 #>  [655,]  360  784  490  508  526  733  862  826  906   783 #>  [656,]  840  865  187  732   52  423  318  928  709   676 #>  [657,]  662  749  808  682  212  243  166  785  820   485 #>  [658,]  333  901  351  161  387  250  913  841  510   910 #>  [659,]  226  117  511  101  753  852  919  974  528   850 #>  [660,]  797  919   61  477  141  817  976  860  117   556 #>  [661,]  196  447  671  975  942  890  726  272  392   628 #>  [662,]  820  271  785  485   94  657  922  243  240   410 #>  [663,]  882  519  563  979    1  684   73  240   70   547 #>  [664,]  967  963  924  620  181  633  559  236  249   106 #>  [665,]  817  328  348  556  887  565  557  695  164   616 #>  [666,]  102  590  235  587  721  943  436   16  165   636 #>  [667,]  855  937  550   88   87  828  244  965  353   920 #>  [668,]  777  175  228  264  169  126  593  316  246    28 #>  [669,]  503  720  354  880  202  987  163   96   14   208 #>  [670,]  444  975  196  823  269  671  812  216  287   392 #>  [671,]  670  975  269  196  287  823  661  890  447   216 #>  [672,]  341  522  422  492  478  586  732  441  267   584 #>  [673,]  330  113  780  652  491  762  461  801  584   281 #>  [674,]  796   54    6  322  886  807  744  871  551    17 #>  [675,]   29  874  343  535  263  581  606  603  898   826 #>  [676,]   52  865  322   49  840  286  292  381  656   187 #>  [677,]  342  108  710  853  209  284  830  604  291   743 #>  [678,]  622  164  779  128  366  263  581  686  926   535 #>  [679,]  133  404  897  315  472   77  715  733  137   479 #>  [680,]  961  899  788  868  313  396  930   12  583   230 #>  [681,]  516  198  208  965  163  389  720  495  280   253 #>  [682,]  334   42  212  614  441   84  754  465  808   166 #>  [683,]  449  895  619  804  190  306  693  481  742   283 #>  [684,]  486  663  872   46  142   70  882  345  910   440 #>  [685,]    8  251  131  408  184  851  848  436  220    69 #>  [686,]  812  779  188  926  639  975  309  115  628   263 #>  [687,]  799  434  736  877  554  397  878    9  198   599 #>  [688,]  110  492   38  144  437  300   60   89  591   522 #>  [689,]  500   71  403  548  382   30  598  768  815   673 #>  [690,]  751  691  994  614  600  147  895  306   19   451 #>  [691,]  600  614  730   19  690  287  334  216  147   693 #>  [692,]  960  706  616  380  327  581  233  606   82   702 #>  [693,]  306  159  789  269  438  422  683  903  600   730 #>  [694,]  984  512  718  164  141  328  215  233  695   622 #>  [695,]  569  565  348   29  309  328  874  233  581   154 #>  [696,]  158  958  511  150  203  815  255  514  964   705 #>  [697,]  433  712  946  962  312    2  970  409  781   559 #>  [698,]  197   32  822  731  734  134  833   78  935   292 #>  [699,]  108  225  743  385  830  509  464  710  750   957 #>  [700,]  879  496   39  282  973  363  182   62  209   305 #>  [701,]  983  393  984  258   67  123  504  989  769   605 #>  [702,]  335  581  606  321  887  810  296  713  692   874 #>  [703,]  803  611  827  148  276  518  951  487  303    31 #>  [704,]  127  884  945  915  758  552  624   68  506   114 #>  [705,]  158  958  103  311  742  203  964  696  268   852 #>  [706,]  380  960  692  425  327  616   82  141  233   576 #>  [707,]  996  362  245  214  132   91  156  774  376   718 #>  [708,]  761  771  925   26  786  542  709  242  272   865 #>  [709,]  242  928  530  656  840  542  567  865  140   708 #>  [710,]  830  927  419  763  938  743  230  108   10   853 #>  [711,]  572   32  842  956   17  297  674  734  134   886 #>  [712,]  946  962    2  312  916  697  620  433  641   559 #>  [713,]   98  810  461  515  702  420  321  801  330   317 #>  [714,]  723  993    7  262  360  417  156  526  826   891 #>  [715,]  386  679  136  479  866  133  830  738  743   125 #>  [716,]  856  455  412  247   66  259  959  304  727   446 #>  [717,]  747  863  120  249  963  970  967  620  174   664 #>  [718,]  512  535  156  739  858  816   55  675  694   327 #>  [719,]   57  166  808  140  908  709  336  567  542   530 #>  [720,]  202  163  503  880  681  987  669  516   85   208 #>  [721,]  337  132  214  989  376  621  177  943  102   597 #>  [722,]   20  597  918  366  258  331  989  926  984   128 #>  [723,]  714  770  298  360    7  733  993  612  526   377 #>  [724,]  413  152  905  153  573  534  772  100  159   623 #>  [725,]  288  985  562  527  517  791   24  842  629    46 #>  [726,]  121  661  626  890  272  628  831  261  942   447 #>  [727,]  446  573  645  629  959  304  968  357  259   405 #>  [728,]  116  182  991    2  839  879  973  902  700   496 #>  [729,]  255  150  481  617  511  226   51  556  742   696 #>  [730,]  498  557  216  287  887  269  600  810  713   321 #>  [731,]  197  144  734  134  698  253  300  292  591    89 #>  [732,]  656  422  438  423  478  586  530  928  840   672 #>  [733,]  770  906  655    7  508  396  723  526  367   360 #>  [734,]  134  253   32  197  731  698  292  198  144   300 #>  [735,]  618  450  593  427   97  119  191    4  971   555 #>  [736,]  799  375  516  687  878  599  398  681  198   554 #>  [737,]   40  864  270  870  174  836   87  564   48   632 #>  [738,]  819  899  419  230  897  763  133  442  679   293 #>  [739,]  873  816  718  512   55  156  858  921  818   469 #>  [740,]  524  760  843  981  720  202  669  319  977   179 #>  [741,]  551  802  936  324   10  151  529  313  744   582 #>  [742,]  493  619  190    4  705  268  617  557  191   635 #>  [743,]  385  750  699  509  710  830  957  108  225   125 #>  [744,]  372  551  674  854  948  871   10    6  562   936 #>  [745,]  352  955  418  876  592  359  146  388  893   768 #>  [746,]  834  286  350  325  570  533   38   60  862   107 #>  [747,]  717  863  120  249  990  168  374  967  963    55 #>  [748,]  646  536  878  435  467   81  375  560  757   986 #>  [749,]  657  662  271  148  212  278   64  243  682   820 #>  [750,]  125  743  282  509  879  479  385  363  710   699 #>  [751,]  994  690  306  147  614  451  205  693  954   808 #>  [752,]  468  399  648   27  327  939  168  622  960   139 #>  [753,]  279  974  101  117  539  860  484  326  849   594 #>  [754,]  323  441  801   84  911  267  334  303  584   420 #>  [755,]  644  957  387   85  385  458  720  991  305   503 #>  [756,]   47  331   67  769  237  258  384  701  504   976 #>  [757,]  467   63  917  748  986  494  566   22  878   568 #>  [758,]  851  266  884  624  127  552  900  131  251   184 #>  [759,]  525   51   82  598  548  940  321   25  296   498 #>  [760,]  740  202  987  977  720  945  915  458   85   669 #>  [761,]   26  771  708  840  925   52  865   72  497   676 #>  [762,]  426  944  780  872  547  889  673  952  793   491 #>  [763,]  819  830  419  710  738  442  938  230  792   927 #>  [764,]   23  409  361  480  997  374  249  980  254   967 #>  [765,]  109  625  619    4  540  237  493  489  907   283 #>  [766,]  602  870  737  463   48  199  825  568  290    40 #>  [767,]  440  426  889  995  265  872  579   30  142   684 #>  [768,]  388   43  592  234  876  579  475  486   50   414 #>  [769,]  976  605  984  701  504  817   67  258  665   844 #>  [770,]  733  906  396  723  655   77  526  993  377   788 #>  [771,]  761   26  474  925  900  708  502   49   52   402 #>  [772,]  534  100  588  153  954  724  979   24  152   240 #>  [773,]  307  911  139  473  459  648  303  244  920   487 #>  [774,]   91  828  463  290  245  999   48  855  707   550 #>  [775,]  448  456   84   42  212  888  323  166  928   300 #>  [776,]  162  208  163  312  244  210  353  338  495   185 #>  [777,]  668  264  228  126  316  593  546  246  169   402 #>  [778,]  359  146  517   24  302  221  501   71  623   592 #>  [779,]  686  238  263  812  188  678  939  581  164   648 #>  [780,]  793  317  673  762  821  330   98  790  934   845 #>  [781,]  697  559  338  970   95  231  116    2  312   409 #>  [782,]  787  326  279  857   44  400  130  475  335   849 #>  [783,]  784  826  360  867  655  862  526  397  298   325 #>  [784,]  783  655  360  526  826  508  723  867  298   397 #>  [785,]  485   94  519  240  243  547  588  448  775   563 #>  [786,]  118  925  589  708   22  771  761  242  543   917 #>  [787,]  782  326  289  279   43  475  425  857  480   753 #>  [788,]  415  847  294   12  680  770  961  324  227   378 #>  [789,]  159  544  964  147  815  500  451  281  438   652 #>  [790,]  821  317  107  478   98  586  491  780  793   110 #>  [791,]  517   24  725   99  985  302  288  772  153   841 #>  [792,]  819  407  193  293  992  401  763  442  738    59 #>  [793,]  780  317  934  821  437  495  110  801   98   492 #>  [794,]  949    5  427  378  191  640  555  852   45   358 #>  [795,]  209  225  595  108  385  509  699  429  957   824 #>  [796,]  807   54  886  674  837    6   17  861  318   187 #>  [797,]   61  660  101  860  117  575  594  186  974   919 #>  [798,]  432  649  370  627  788  932  294  275  415   847 #>  [799,]  687  736  198  877  599  434  554    3  516   397 #>  [800,]  301  521  124  580  299  745  388  117  273   234 #>  [801,]  323  584   98  420  223  330  267  793   84   437 #>  [802,]  313  741  324   10  961  230  419  415  927   906 #>  [803,]  703  611  827  487  518  303  773  911  148    31 #>  [804,]  895  683  449  481   51  111  729   18  190   619 #>  [805,]  143  940  511   50  501  388  150  255  964   815 #>  [806,]  145   58  867  941  847  285  294  416  783    28 #>  [807,]  796  861  311    6   54  674   33  886  837   958 #>  [808,]  166  719   57  954  588  100  682  140  614   709 #>  [809,]  373  260  299  401   35  792  407  442  634   239 #>  [810,]  321  887  335  702  713  461  696  158   98   203 #>  [811,]  200  575   53  227  520  583  369  469   77   377 #>  [812,]  188  686  309  779  348  444  639  975  670   341 #>  [813,]  464  239 1000  868  763  830  938   56  372   710 #>  [814,]  725  527  288  333  562  791  405   99  411   161 #>  [815,]  964  696  158  382  150  255  652  789  598   461 #>  [816,]  739  858  512  718  577  535  128  694  156    55 #>  [817,]  556  665  976  328  141  616  660  215  384   769 #>  [818,]  469  739  120  576  921  873  859  355  178   349 #>  [819,]  792  738  763  442  193  899  293  419   35   230 #>  [820,]  662   94  588  485  240  785  913  922  954   772 #>  [821,]  317  790  492  107  793  110   98  934  437   478 #>  [822,]   78  698  197   32  292  833  134  935  731   734 #>  [823,]  670  975  269  671  444  907  844  365  287   348 #>  [824,]  248  429  881  795  997  209   35   62  634   225 #>  [825,]  199  463  362   91  707  996  452   48  167   245 #>  [826,]  360  862  783  784  655  298  533   29  612   723 #>  [827,]  611  518  303  403  148   31   30  487  803   548 #>  [828,]  774  290  855   91  920  999  463  459  435   532 #>  [829,]  356  618  430  625  119  631  971  237   66    28 #>  [830,]  710  763  927  419  743  938  108  699  230   738 #>  [831,]  272  261  542  339  194  494  566  708  207    22 #>  [832,]  982  241  381   49  194  189  170  392  286   676 #>  [833,]  935  698   32  822  197   78  572  880  987   711 #>  [834,]  570  746  522   60  286  207   89   38  492   115 #>  [835,]  521  980  580  859  301  254  299  186  117   124 #>  [836,]  864  632   40  737  270  231  319  564  390   173 #>  [837,]  796   70  886   17  933  491  807  274  113    54 #>  [838,]  479  173  634   76  715  386  195  137  679   136 #>  [839,]  232  394  728  510  182  700  910  496  991   291 #>  [840,]  656  187  865   52  676  242  381   72  709   761 #>  [841,]  910   73  345  201  302  901  684  985   46   663 #>  [842,]  297  711   17  886  985  853  572   37  562    46 #>  [843,]  740  524  105   41  760  977  981  638  319   669 #>  [844,]  574  540  258  907  177   67  823  989  665   769 #>  [845,]  934  643  122  185  793  780  223  606  139   210 #>  [846,]  213  699  225  108  464   75  385  795  595   239 #>  [847,]  294   12  788  806  415  378  416  930  961    45 #>  [848,]  131  235  220    8  685  184   63  590  229   436 #>  [849,]  277  974   86  857  130   44  594  101  924   539 #>  [850,]  320  371  514  958  852  511   50  311  130   314 #>  [851,]  266  758  900  884  624  502  474  131  685   251 #>  [852,]  268  617  191  640  958  511  311  203  949   794 #>  [853,]  314  604  342  871  927  842  347  938  710   956 #>  [854,]  372  562  744  310  551  948  596  741  582   411 #>  [855,]  667  937  828  920   87  550   88  774  435   459 #>  [856,]  455  412  716  247  804  109   18  727  111   190 #>  [857,]   44  277  849  924  130  782  279  505   86   974 #>  [858,]   55  535  816  718  512  739  156  537  245   990 #>  [859,]  374  980  818   23  863  355  120  425  835   764 #>  [860,]  101  117  797  753  974  425  594  706  326   279 #>  [861,]  311  807    6  796   33  674  958  640  203   189 #>  [862,]  360  826  490  877  655  533  325  350  343   746 #>  [863,]  249  120  747  717   55  990  963  921  168   576 #>  [864,]  836  737  270   40  632  231  564  319  174   390 #>  [865,]   52  676  656  840  187  928   89  709  318   292 #>  [866,]  929  538  558  988  136  923  386    3  479   715 #>  [867,]  285  783  806  358   45  784  298  569  378   145 #>  [868,]  443  313  680  961  899  938  230  419  293   627 #>  [869,]  970  244  399  620  667  855   88  937  312    87 #>  [870,]  174  737   87   40  270  463  855   48  364    88 #>  [871,]  314    6  674  853   10  490  744  956  551   861 #>  [872,]  142  889  426  762  440  684  113  579   70   486 #>  [873,]  739   65  921  469  452  156   21  816  818    53 #>  [874,]   29  675  581  606  695   44  233  533  702   849 #>  [875,]  988  647    3  929  912  558  538  389  866   650 #>  [876,]  352  388  768  592  940  745  805  359  689    71 #>  [877,]  434  397  325  862  198  799  417  360  826   687 #>  [878,]  554  467  568  736  687  375  599  748   48   609 #>  [879,]  973  116  282  700  363  750  509  305  523   952 #>  [880,]   96  202  987  300  720  698  935  197  503   456 #>  [881,]  248  429  997   62  361  824   35  368  484   980 #>  [882,]    1  979  663  563   70  153  933  519   37   281 #>  [883,]  280   60  934  495  965  437  267  793  570   492 #>  [884,]  127  624  900  758  609   78  822  851  945   915 #>  [885,]  627  408  961  313  294   56  507  415  324   847 #>  [886,]  796   17   54  297  674  807  837   37  842   413 #>  [887,]  810  335  702  557  498  321  730  665  328   713 #>  [888,]   96  456  880  775  483  379  300  104  591   987 #>  [889,]  496  426  872  440  762  579  952  182  767   142 #>  [890,]  628  975  626  340  926  121  406  942  661   196 #>  [891,]  262  923  526   92  508  993  714  417    7   558 #>  [892,]  138  955  527  893  931  418  284  745  224   291 #>  [893,]   80  501  931  221  549  284  143  347  431   607 #>  [894,]  999  896  904  628  626  121  926  406  890   454 #>  [895,]  683  804  449  600   51  306  693  730  481   691 #>  [896,]  454  894  406  121  642  972  999  628  890   986 #>  [897,]  230  396  899  738   77  679  125  419  906   133 #>  [898,]  343  417  603  537  106  181  969  156  675   599 #>  [899,]  230  419  738  897  293  396  819  680  938   906 #>  [900,]  474  771  582  502  884  266  624  925  851   127 #>  [901,]  910  841  201  658  985   46  302  510  345   387 #>  [902,]  991  728  433  354    2  338  503  312  946   116 #>  [903,]  654  129  246  170  392  546  982  693  169   103 #>  [904,]  999  115  639  395  828  536    9  570  894   459 #>  [905,]  103   33  573  190  654  159  724  705  413   645 #>  [906,]  396  770  733  655  897  230  377  367  206   490 #>  [907,]  283  619  269    4  540  844  557  493  742   823 #>  [908,]  140  166  719  998  336   57  379  888  219   308 #>  [909,]  995  265  914  962   36  946  176  433  767    30 #>  [910,]  841  901   46  302  684  201  345  985   73   510 #>  [911,]  303  754  487  518  139  323  238  648   31   611 #>  [912,]  106    3  875  988  343  389  633  538  647   558 #>  [913,]   73   94  841  240  772  820  344  658  345   785 #>  [914,]  265  909  995  466  354  176  148   31  767   922 #>  [915,]  458   78  945   85  822  760  935  833  884   202 #>  [916,]  712  962  946  620  329  185  641  643    2   122 #>  [917,]   22  261  757  118  786  257  545  104   13   566 #>  [918,]  722  597   20  406  926  366  721  128  823   890 #>  [919,]  660  135  971  976  659  797  226  556  477   817 #>  [920,]  459  855  828  364  307  532  667  937  435   774 #>  [921,]  561  181  873   55  537  739  469  470  603   863 #>  [922,]  410  176   94  240  767  485  519   73  785    30 #>  [923,]  891  262  508  866  526  558  538    7  136     3 #>  [924,]  277  857   86  849  368  664  630  633  576   505 #>  [925,]  786  771  118  708  761  589  543  474  900   242 #>  [926,]  686  628  890  812  128  779  975  366  678   894 #>  [927,]  710  830  419   10  938  230  372  763  853   744 #>  [928,]  423  709  656  865  542   89  522  591  242   840 #>  [929,]  988  866  558  875  647  479   95  538  650     3 #>  [930,]  555  416  680  936  847  961  294  378   12   450 #>  [931,]  284  527  607  342   74  549  893  629  405   604 #>  [932,]  432  798  443  649  627   56  373  868  430   391 #>  [933,]  281  544  491    1   70  882  837  563  979   274 #>  [934,]  793  317  437  821  267  883  845  495  780   280 #>  [935,]  833  698  987   32  880  197  202  822   78   572 #>  [936,]  551  151  741  930    6   10  744  871  324   674 #>  [937,]  667  855  550  638  435  602   81   41  828   920 #>  [938,]  293  992  419  927  948   74  710  763  899   230 #>  [939,]  263  648  238  535  459  779  245  752  675   883 #>  [940,]   51  150  805  255  815  598  382  475  729   511 #>  [941,]   58  145  621  943  177  285  806  867  376   358 #>  [942,]  972  628  890  661  975  636  365  610   16   121 #>  [943,]   16  941  621   58  376  636   69  177  145   806 #>  [944,]  952  155  305  523  762  389  426  889  495   163 #>  [945,]  609  977  915  760  884  987  104  127  257   704 #>  [946,]  962  712  433    2  697  641  916  312  329   182 #>  [947,]  349  859   93  168  990  374  818  171  120    23 #>  [948,]  372  938   74  744  357  607  992  927   10   854 #>  [949,]  794  640  371  852    5  974  346  514  378   594 #>  [950,] 1000   59  431  401  284  813  407  273  792   931 #>  [951,]  773  473  803  468   25  703  611  541  307   752 #>  [952,]  305  944  389  155  523  236  889  973  762   163 #>  [953,]  477  660   61  504  919  769  976  141  605   575 #>  [954,]  588  100  534  451  147  485  808  772  544   438 #>  [955,]  418  745  138  146  352  592  394  234  291   221 #>  [956,]  529  711  523   32  155  871  734   85  253   134 #>  [957,]  385  509  225  743  755  116  750  879  644    85 #>  [958,]  158  696  203  311  705  514  511  852  964   850 #>  [959,]  259  450  593  727  446  304  618  735  411   264 #>  [960,]  327  692  706  380  576  512  425  233  616   535 #>  [961,]  627  313  680  294  868  788   12  847  324   930 #>  [962,]  946  712  916  433    2  697  329  641  312   995 #>  [963,]  664  620  106  181  967  603  969   88  249   912 #>  [964,]  815  158  789  958  696  705  544  159  511   933 #>  [965,]  280  353  516  883  428  681  550  495  375   208 #>  [966,]  254  414  124  301  585  204  800  418  997   234 #>  [967,]  664  559  249  963  620  368  361  924  973   236 #>  [968,]  453  651  446  573  264  727  497   33  247   596 #>  [969,]  390  106  564  558   88  537  898  647  181    40 #>  [970,]  869  697  717  620  312  712  747  963  781   399 #>  [971,]  427  135    5  976  919  191  617  618  735   119 #>  [972,]  942  642  636  406   16  121  666  610  628   721 #>  [973,]  879  236  182  952  559  363  116  700  282   633 #>  [974,]  101  849  130  594  371  753  279  539  277   400 #>  [975,]  670  890  196  628  671  444  812  686  823   626 #>  [976,]  817  556  135  971  769  919  384  660  665   295 #>  [977,]  257  105  398  945  104  987  760  375  467   202 #>  [978,]  204  329  254  966  764  289  641  409   36   962 #>  [979,]  882    1  153  663   70  544  563  933  281   240 #>  [980,]  580  835  117  186  859  860  881  484  368   753 #>  [981,]  179  650  740  319  760  843  112  105  945    95 #>  [982,]  392  832  170  381  444  189  194  546  196   241 #>  [983,]  393  701  123  504  383  984   67  989  258   605 #>  [984,]  694  504  701  769  989  393  983  816  141   577 #>  [985,]   46  725  842   37  841  297  345  302   24    73 #>  [986,]  167  748  757  536  290  568  494  999  566   774 #>  [987,]  202  880  935  720  760  104   96  833  977   698 #>  [988,]  875  929    3  538  647  866  912  558  389   106 #>  [989,]  337  177  565  348  309  258  721  621  569   701 #>  [990,]  168   55  863   27  120  858   93  327  468   752 #>  [991,]  902  728  354  182  503    2  338  163  305   116 #>  [992,]  293  938  528  792  193   74  604  342  407   899 #>  [993,]  714  723  770  526  733  891  262  404    7    21 #>  [994,]  751  451  147  306  693  159  690  100  954   789 #>  [995,]  265  909  767  440  914  889  182  354   36   210 #>  [996,]  707  214  132  245  362  128  337   91  376   774 #>  [997,]  361  881  248  429   62  824  409  368  585   764 #>  [998,]  180  908   13  379  140  308  888  118  719   336 #>  [999,]  904  774  828  290  894  245   91  115  459   463 #> [1000,]  950  401   59  431  813  284   74  792  239   407 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.22955788 0.3147758 0.3528415 0.3531328 0.3851255 0.4218153 0.4811096 #>    [2,] 0.52205739 0.5285002 0.5445752 0.5547201 0.5666508 0.6858549 0.6971000 #>    [3,] 0.29043581 0.4236301 0.4283759 0.4348192 0.5277681 0.5625142 0.5825964 #>    [4,] 0.11974982 0.3883122 0.4289352 0.4685197 0.5112956 0.5155442 0.6103175 #>    [5,] 0.35167193 0.3973417 0.4109456 0.4139010 0.5931289 0.6050622 0.6241632 #>    [6,] 0.36658553 0.3835472 0.3865429 0.4770600 0.4959404 0.5588210 0.5910474 #>    [7,] 0.38954091 0.4307306 0.4765231 0.4900548 0.4916846 0.5146938 0.5343246 #>    [8,] 0.47694982 0.5426104 0.5720074 0.5893318 0.7185845 0.7771288 0.8031372 #>    [9,] 0.36432492 0.4817068 0.5547988 0.5742169 0.6595359 0.6642841 0.6720351 #>   [10,] 0.41581566 0.5036597 0.5068568 0.5079031 0.5357371 0.5434673 0.5857902 #>   [11,] 0.75090353 0.8468605 0.8937218 0.9069346 1.0005448 1.0036982 1.0362182 #>   [12,] 0.30038238 0.4167902 0.4974701 0.5285796 0.6048515 0.6064083 0.6166146 #>   [13,] 0.95696900 0.9926525 1.1152842 1.2119040 1.2242314 1.3276908 1.3519234 #>   [14,] 0.87476717 0.8779168 0.9330503 0.9443368 0.9452227 0.9652644 0.9802480 #>   [15,] 0.95961683 1.0036337 1.0290349 1.0550523 1.1394752 1.2582852 1.2681895 #>   [16,] 0.25174739 0.4186268 0.5292774 0.7673578 0.8025159 0.8370141 0.8626276 #>   [17,] 0.19001988 0.3184818 0.4104462 0.4567366 0.4896734 0.5115793 0.5380951 #>   [18,] 0.14193852 0.5965792 0.8995982 0.9394248 0.9441787 0.9727588 0.9974096 #>   [19,] 0.61599421 0.7719512 0.9112849 1.0318855 1.0660049 1.0739199 1.0788189 #>   [20,] 0.47353190 0.6662763 0.7478808 0.8225368 0.9698352 1.0005276 1.0698264 #>   [21,] 0.70158470 0.8405912 0.8500911 0.8535006 0.8763916 0.9166175 0.9203771 #>   [22,] 0.29142265 0.6238260 0.6672124 0.6935020 0.7960446 0.8701332 0.9054751 #>   [23,] 0.38329518 0.4248052 0.5331477 0.8018750 0.8221615 0.8548062 0.9489073 #>   [24,] 0.26438244 0.6151679 0.6478287 0.6634108 0.7444792 0.8061131 0.8213870 #>   [25,] 0.83772894 0.9611045 1.0553389 1.1672386 1.2886693 1.2909780 1.2930295 #>   [26,] 0.27138544 0.4333277 0.4667941 0.4868108 0.5363539 0.5429688 0.5651363 #>   [27,] 0.65400625 0.7330919 0.7974136 0.8056535 0.8744545 0.9043918 0.9619047 #>   [28,] 0.42985587 0.5566478 0.6284227 0.7081441 0.8009395 0.8038349 0.8332182 #>   [29,] 0.29878435 0.3163037 0.4711332 0.4854285 0.5161449 0.5370229 0.5601168 #>   [30,] 0.49423771 0.7367394 0.7772910 0.7803123 0.8458345 0.8564536 0.8906206 #>   [31,] 0.28532947 0.3041852 0.4769811 0.5980285 0.6687472 0.7046688 0.7742714 #>   [32,] 0.25064520 0.3072318 0.3352395 0.3728546 0.4731351 0.5042372 0.5065395 #>   [33,] 0.53160948 0.5620400 0.6073710 0.6094534 0.6336428 0.6552232 0.6896397 #>   [34,] 0.77685665 0.7967507 0.9097738 0.9531234 1.0630410 1.0784622 1.1020093 #>   [35,] 0.28774145 0.6213532 0.7006512 0.7059420 0.7353344 0.7612390 0.7644148 #>   [36,] 0.75924608 0.7772910 0.7835089 0.7919207 0.8514512 0.8588565 0.9047142 #>   [37,] 0.40874262 0.4731610 0.5497708 0.5542306 0.5581127 0.5927913 0.6550149 #>   [38,] 0.26454652 0.2813778 0.2852025 0.3146972 0.3678983 0.3783726 0.3992287 #>   [39,] 0.35015508 0.5207689 0.5466499 0.5852646 0.6499753 0.6535911 0.6778602 #>   [40,] 0.47752675 0.5891235 0.6210819 0.6559817 0.6612791 0.6779006 0.7035086 #>   [41,] 0.43515815 0.5427919 0.6420046 0.6459957 0.7780180 0.7797683 0.8050569 #>   [42,] 0.34097264 0.6597671 0.7086855 0.7314902 0.7374816 0.7590198 0.7771964 #>   [43,] 0.56124200 0.5776895 0.5785828 0.5989219 0.6034228 0.6302666 0.6312037 #>   [44,] 0.24197527 0.3422654 0.4376664 0.4923291 0.5221900 0.5478162 0.5534744 #>   [45,] 0.24850381 0.4139010 0.5176666 0.5243583 0.5563664 0.5818203 0.5884176 #>   [46,] 0.53337590 0.6039191 0.6842995 0.6862257 0.6949797 0.7501835 0.7701968 #>   [47,] 0.81468898 0.9472570 1.0385676 1.0632125 1.0907152 1.1678819 1.3024224 #>   [48,] 0.54771926 0.5979702 0.6388442 0.6518540 0.7279184 0.7482242 0.7669109 #>   [49,] 0.44051952 0.4582034 0.4670918 0.5155253 0.5531315 0.5598117 0.5651363 #>   [50,] 0.33588533 0.4875531 0.4933346 0.5221565 0.5511288 0.5914730 0.6395483 #>   [51,] 0.51165768 0.6992192 0.7921689 0.7985628 0.8676614 0.9185706 0.9840152 #>   [52,] 0.11131967 0.1920039 0.3920492 0.4502519 0.4884780 0.4967604 0.5029804 #>   [53,] 0.33937755 0.4447574 0.4693584 0.5125122 0.5515011 0.5733509 0.6048581 #>   [54,] 0.30086372 0.3589078 0.3637277 0.3725972 0.4069020 0.4227815 0.4567366 #>   [55,] 0.49271844 0.5924642 0.6064765 0.6185078 0.6335998 0.6581721 0.6738409 #>   [56,] 0.79157970 0.8545616 0.8740242 0.9631994 0.9849236 1.0012189 1.0345704 #>   [57,] 0.25074555 0.5101001 0.6682075 0.8538193 0.9460150 0.9961794 0.9985972 #>   [58,] 0.26706143 0.3353384 0.5193202 0.5313529 0.5535716 0.6284227 0.6556597 #>   [59,] 0.37334771 0.5159829 0.6587210 0.6674950 0.6781264 0.6929206 0.7023600 #>   [60,] 0.36432780 0.3796669 0.3992287 0.4022015 0.4056132 0.4106404 0.4300700 #>   [61,] 0.50952156 0.5411832 0.6186135 0.6862895 0.8409144 0.8967585 0.9295798 #>   [62,] 0.49382892 0.5235448 0.5392796 0.6241569 0.6499753 0.6556254 0.6746993 #>   [63,] 0.60509386 0.6643747 0.7903283 0.8285489 0.8696223 0.8826998 0.8933504 #>   [64,] 0.89372183 1.2762580 1.5608329 1.6156184 1.6808172 1.6888735 1.7430245 #>   [65,] 0.51559977 0.5623370 0.8759161 0.9370672 1.0336979 1.0458282 1.0547228 #>   [66,] 1.51973824 1.5327795 1.5583865 1.5634930 1.5958666 1.6812691 1.7905241 #>   [67,] 0.55121589 0.7827151 0.7978571 0.8100517 0.8811937 1.0184953 1.0341364 #>   [68,] 0.81861944 1.0862665 1.1130497 1.2226387 1.2798352 1.3649363 1.4278899 #>   [69,] 0.52927737 0.5628008 0.6884613 0.7342654 0.7534210 0.7640672 0.7646252 #>   [70,] 0.31477578 0.4087426 0.4212690 0.4626128 0.4659702 0.5148053 0.5474437 #>   [71,] 0.49839545 0.6832273 0.7231331 0.7394909 0.7608450 0.7772437 0.8063634 #>   [72,] 0.39321579 0.4183378 0.4685458 0.4981386 0.5174615 0.5808584 0.5836605 #>   [73,] 0.52031443 0.5314677 0.5467499 0.6069266 0.6375156 0.6417617 0.6428783 #>   [74,] 0.40224149 0.4991503 0.5281373 0.5290308 0.5302368 0.5552956 0.6143706 #>   [75,] 0.99428733 1.2215164 1.3113957 1.3248068 1.4749380 1.4785234 1.4887600 #>   [76,] 0.90401083 1.0216621 1.0672304 1.4068108 1.4464495 1.4789490 1.4835176 #>   [77,] 0.31207111 0.3975268 0.4490219 0.4790694 0.4916165 0.5217519 0.5219402 #>   [78,] 0.15233236 0.5099480 0.5439941 0.5645764 0.6213503 0.6228073 0.6492930 #>   [79,] 0.95315722 1.0277990 1.2760757 1.3098735 1.3221914 1.3504356 1.3845404 #>   [80,] 0.48674489 0.5680026 0.5965792 0.6815743 0.7145227 0.7465897 0.8091168 #>   [81,] 0.49209632 0.5385692 0.6413912 0.6787231 0.6867009 0.7489957 0.7706572 #>   [82,] 0.54926698 0.5766717 0.5866596 0.6021086 0.6834629 0.6882445 0.7024412 #>   [83,] 0.89649395 1.0336979 1.0766788 1.0939217 1.1683508 1.1771884 1.3575005 #>   [84,] 0.46121948 0.5206923 0.5247918 0.5413250 0.6095777 0.6267140 0.6769131 #>   [85,] 0.67317429 0.6924852 0.7115891 0.7246897 0.7407812 0.7859023 0.8046616 #>   [86,] 0.35438072 0.3655914 0.3830447 0.5052356 0.5130918 0.5206713 0.5216893 #>   [87,] 0.46529356 0.5979702 0.6313286 0.7035086 0.7113231 0.7121853 0.7445457 #>   [88,] 0.46529356 0.5537717 0.6157474 0.6216260 0.7095360 0.7251863 0.7278297 #>   [89,] 0.30257578 0.3678983 0.3838820 0.4039412 0.4067629 0.4109428 0.4111247 #>   [90,] 0.75911512 0.9456824 1.0036337 1.0508298 1.1135203 1.1558895 1.1906191 #>   [91,] 0.26711949 0.2921032 0.5063923 0.5660536 0.5682086 0.6388442 0.6627853 #>   [92,] 0.49469570 0.5911418 0.6734925 0.7223337 0.7260962 0.8019800 0.8190748 #>   [93,] 0.84606760 0.9390106 0.9948477 1.0298800 1.0389892 1.1489887 1.1632995 #>   [94,] 0.30931680 0.4790119 0.5222593 0.6428783 0.6718746 0.8095090 0.8161483 #>   [95,] 0.54773425 0.5612501 0.6103436 0.7593193 0.7915471 0.7919086 0.8294008 #>   [96,] 0.39860713 0.4180741 0.4449353 0.5817220 0.6296496 0.6468781 0.6934890 #>   [97,] 0.40277941 0.5458427 0.6294593 0.6531673 0.7100846 0.7302993 0.7379574 #>   [98,] 0.33179294 0.3346954 0.3538130 0.4218332 0.4363952 0.4373618 0.4419613 #>   [99,] 0.94558128 1.0124895 1.0441433 1.0575390 1.0885354 1.1542463 1.1650044 #>  [100,] 0.28821340 0.4679749 0.4770330 0.5006976 0.8454803 0.8610168 0.8928643 #>  [101,] 0.24311166 0.4874578 0.5111905 0.5199864 0.5233516 0.5274160 0.5806486 #>  [102,] 0.66106908 0.6771497 0.7177148 0.7365333 0.8875912 0.9274102 1.0404540 #>  [103,] 0.33720097 0.4684372 0.5620400 0.5736191 0.5873198 0.7007622 0.7030042 #>  [104,] 0.55216763 0.5801038 0.6296496 0.6397676 0.6452197 0.6459959 0.6603118 #>  [105,] 0.43515815 0.5435702 0.6606966 0.6872181 0.7111712 0.7208413 0.7363367 #>  [106,] 0.35623223 0.4136343 0.4629466 0.4931602 0.5072623 0.5371209 0.5417839 #>  [107,] 0.27056438 0.2726058 0.3146972 0.3321369 0.3526669 0.4281768 0.4358156 #>  [108,] 0.35479316 0.6131547 0.6542839 0.6544143 0.6674126 0.6708937 0.6785268 #>  [109,] 0.39284474 0.5420591 0.6921861 0.7057456 0.9243953 0.9498105 0.9732389 #>  [110,] 0.16005995 0.1636918 0.2645465 0.2988628 0.3765656 0.3922052 0.4056132 #>  [111,] 0.14193852 0.6815743 0.8687264 0.9189984 0.9999733 1.0397466 1.0979863 #>  [112,] 0.82989409 0.8933504 0.9880924 1.1579817 1.1645617 1.2226387 1.2492971 #>  [113,] 0.33137370 0.4152467 0.4215835 0.4711941 0.4933346 0.4997815 0.5003712 #>  [114,] 0.85492792 1.0534906 1.1235410 1.1579978 1.1796942 1.1813262 1.2210131 #>  [115,] 0.25412577 0.3669649 0.4817068 0.5577018 0.6230956 0.6750065 0.6895357 #>  [116,] 0.47510870 0.5279733 0.5894320 0.6128468 0.6191184 0.7315621 0.7333377 #>  [117,] 0.51409931 0.5208724 0.5318891 0.5796677 0.6545335 0.6822003 0.7333890 #>  [118,] 0.22218065 0.5155723 0.6680324 0.6935020 0.8086749 0.8160104 0.8334246 #>  [119,] 0.58182028 0.6132824 0.6272283 0.6492518 0.6848345 0.6873225 0.6964786 #>  [120,] 0.54030555 0.5959394 0.7760290 0.7833529 0.8450053 0.8692232 0.8991530 #>  [121,] 0.69180369 0.6933099 0.7299780 0.8226545 0.9148125 1.0143681 1.0513574 #>  [122,] 0.47361947 0.5024221 0.5353100 0.5594510 0.5839937 0.6586737 0.7191844 #>  [123,] 0.60099663 0.7140281 0.7170791 0.8001993 0.8057490 0.8164433 0.8508158 #>  [124,] 0.58946217 0.8689148 0.9280811 1.0297510 1.1650943 1.1789849 1.2207409 #>  [125,] 0.39695292 0.4719325 0.4911514 0.5876585 0.6284460 0.6305630 0.6321651 #>  [126,] 0.42985587 0.5029663 0.6075160 0.6492518 0.7100846 0.7933092 0.8024217 #>  [127,] 0.55526788 0.5586333 0.7667336 0.7792013 0.8127992 0.8537498 0.8770906 #>  [128,] 0.62018411 0.7043686 0.8071477 0.8345459 0.8527875 0.8559284 0.8598052 #>  [129,] 0.30479621 0.5022706 0.5304571 0.8042871 0.8683446 0.9016947 0.9335791 #>  [130,] 0.24197527 0.4096973 0.4317216 0.4609947 0.4916033 0.5029903 0.5412672 #>  [131,] 0.51004812 0.5720074 0.6491926 0.7357600 0.7646844 0.8696223 0.8756437 #>  [132,] 0.13904093 0.4621753 0.4935436 0.5077706 0.6445842 0.6567433 0.8032437 #>  [133,] 0.32270638 0.4489236 0.4736157 0.5149963 0.5206218 0.5755592 0.6165712 #>  [134,] 0.20668934 0.2611233 0.3023190 0.3630814 0.3728546 0.3971645 0.4223222 #>  [135,] 0.62544437 0.6360042 0.6398665 0.6644473 0.6911587 0.7057456 0.8358892 #>  [136,] 0.29230067 0.5180780 0.5909023 0.6417467 0.6542717 0.7033741 0.7459431 #>  [137,] 0.42200272 0.4784113 0.4936388 0.5049658 0.6076743 0.6563010 0.6814775 #>  [138,] 0.67721699 0.7717950 0.8382128 0.9263069 0.9795451 1.0932158 1.1341864 #>  [139,] 0.27987714 0.4488782 0.5854625 0.6257288 0.6345945 0.6902922 0.6961660 #>  [140,] 0.58608702 0.6638989 0.6969766 0.7041460 0.7049275 0.7438635 0.7748060 #>  [141,] 0.43326589 0.6756711 0.6862895 0.7127515 0.7218695 0.7310283 0.7652019 #>  [142,] 0.26337288 0.4015201 0.4215835 0.4814051 0.5221565 0.5253220 0.5474437 #>  [143,] 0.33310089 0.3704731 0.4405922 0.5511288 0.6054457 0.6731733 0.7192804 #>  [144,] 0.26581135 0.2963973 0.3324854 0.3465442 0.4260973 0.4300700 0.4372892 #>  [145,] 0.33290079 0.3353384 0.3674355 0.5208225 0.5399085 0.5566478 0.6075160 #>  [146,] 0.37835990 0.6405020 0.6440883 0.7015320 0.7455531 0.7561979 0.8140324 #>  [147,] 0.36215703 0.5166758 0.5691353 0.7220621 0.7482427 0.7646507 0.8137214 #>  [148,] 0.84070282 0.8560164 0.8889693 0.9450211 0.9862482 1.0241095 1.0575188 #>  [149,] 0.36944808 0.4554618 0.6130401 0.6222292 0.6359916 0.6431986 0.6849759 #>  [150,] 0.08551787 0.3613223 0.4205612 0.4796084 0.5095843 0.5723981 0.6301929 #>  [151,] 0.45342692 0.4706235 0.5708228 0.5755871 0.5824983 0.6264366 0.6280891 #>  [152,] 0.60119898 0.6556549 0.7864463 0.8454803 0.9558553 0.9605236 0.9762076 #>  [153,] 0.42793592 0.4449730 0.5276249 0.5497708 0.6151679 0.6419102 0.6568379 #>  [154,] 0.38640308 0.3934733 0.4566357 0.4568346 0.5615495 0.5621974 0.6091768 #>  [155,] 0.12389484 0.3203079 0.3639448 0.4116619 0.4565016 0.6194494 0.6626536 #>  [156,] 0.39944448 0.5693601 0.6031179 0.6054276 0.6224050 0.6252988 0.6270104 #>  [157,] 1.62006077 1.7635119 1.8712836 1.9232603 2.0583817 2.1801529 2.1935168 #>  [158,] 0.30072160 0.3019427 0.3577447 0.3825818 0.4182599 0.4488711 0.5854856 #>  [159,] 0.40262400 0.5694063 0.6144611 0.7008188 0.7237297 0.7322923 0.7855943 #>  [160,] 0.58087979 0.9419955 1.0095770 1.1918821 1.2107654 1.2282833 1.2405619 #>  [161,] 0.63259672 0.8445695 0.9345116 1.1022390 1.1813262 1.2116629 1.2563411 #>  [162,] 0.24313366 0.3057443 0.4975631 0.5048315 0.5364558 0.6135362 0.6408903 #>  [163,] 0.38395016 0.5048315 0.5161639 0.5293862 0.5406022 0.5429100 0.6075109 #>  [164,] 0.45751392 0.4675344 0.5480638 0.6617852 0.6907607 0.7314067 0.7344837 #>  [165,] 0.70078136 1.0926036 1.2291760 1.2968192 1.3170591 1.3256003 1.3856046 #>  [166,] 0.43217442 0.4716839 0.5101001 0.7748060 0.8129792 0.8652922 0.8725444 #>  [167,] 0.66707214 0.7803646 0.7832437 0.8182318 0.8249728 0.8406484 0.8800038 #>  [168,] 0.39760685 0.6161242 0.7974136 0.8211332 0.8252103 0.8292952 0.8793245 #>  [169,] 0.40277941 0.5684774 0.6342366 0.6819751 0.6842595 0.8487373 0.8727477 #>  [170,] 0.44796127 0.5118791 0.5180486 0.5497547 0.6156194 0.6259169 0.6322976 #>  [171,] 0.53314771 0.5454910 0.7581105 0.9108543 0.9276680 0.9338713 0.9611045 #>  [172,] 0.71075313 0.7336180 0.7705374 0.9231344 0.9460307 0.9535106 1.0002517 #>  [173,] 0.71689709 0.7361889 0.7459431 0.8645907 0.9024557 0.9728832 1.0025582 #>  [174,] 0.63034356 0.6647712 0.6926248 0.9478527 1.0700162 1.0775018 1.1115952 #>  [175,] 0.56847744 0.6887247 0.7312608 0.8129587 0.9198719 0.9326896 0.9531572 #>  [176,] 0.55541501 0.7102808 0.8414685 0.9378846 0.9677141 0.9782553 1.0207536 #>  [177,] 0.41673703 0.4403338 0.5465063 0.5535716 0.6162078 0.6438130 0.6958704 #>  [178,] 0.58087979 0.6672218 0.9132468 0.9662791 0.9694484 0.9716051 0.9810414 #>  [179,] 0.81357368 0.8643784 0.9614959 0.9942873 0.9961434 1.0171498 1.0372205 #>  [180,] 0.55632795 1.1818391 1.2119040 1.3025537 1.5745201 1.6500159 1.6715337 #>  [181,] 0.43908226 0.5072623 0.5383672 0.5934038 0.6195960 0.6219528 0.6312036 #>  [182,] 0.43793954 0.5140202 0.5531305 0.5547201 0.5973966 0.6278508 0.6553777 #>  [183,] 0.47004406 0.6413912 0.6643795 0.8795570 0.9406942 0.9545599 0.9681110 #>  [184,] 0.51004812 0.5893318 0.6842077 0.8034199 0.8419069 0.8544933 0.8658128 #>  [185,] 0.27987714 0.3663453 0.5177153 0.5899872 0.6576819 0.6672836 0.7225982 #>  [186,] 0.51409931 0.7375290 0.7808489 0.8199043 0.8358652 0.8493777 0.8677896 #>  [187,] 0.30333347 0.3608692 0.3725972 0.4183378 0.4351121 0.4891648 0.4967604 #>  [188,] 0.28440992 0.5103241 0.5136182 0.5624893 0.5836626 0.6047847 0.6230956 #>  [189,] 0.33782589 0.4358156 0.4800265 0.5518935 0.5763716 0.5841545 0.5901097 #>  [190,] 0.37735464 0.4303420 0.4956834 0.5112956 0.5736191 0.6140534 0.7433016 #>  [191,] 0.21727980 0.3733621 0.4492541 0.4809946 0.5004074 0.5054139 0.5155442 #>  [192,] 0.28546131 0.3694481 0.4361109 0.5763236 0.6825838 0.7209713 0.7373494 #>  [193,] 0.43452606 0.4488168 0.4982236 0.4997053 0.5478643 0.6132689 0.6180409 #>  [194,] 0.39394548 0.5320953 0.5834369 0.6239036 0.6294544 0.6672104 0.6773759 #>  [195,] 0.39009829 0.5425900 0.5725280 0.5763635 0.6203012 0.6806642 0.6814775 #>  [196,] 0.51667811 0.5347940 0.5449681 0.5754141 0.5981160 0.6229404 0.6286619 #>  [197,] 0.12538428 0.3072318 0.3116469 0.3552241 0.3630814 0.4298587 0.4583920 #>  [198,] 0.37747422 0.4624659 0.4713784 0.4924199 0.5277681 0.5420740 0.5594301 #>  [199,] 0.57274545 0.7260962 0.7440049 0.7482242 0.7832437 0.8442242 0.8743571 #>  [200,] 0.21472878 0.3393775 0.4357680 0.5961560 0.6413207 0.6473117 0.6801670 #>  [201,] 0.71186889 0.7288690 0.8069348 0.8224667 1.1552856 1.2262614 1.2449175 #>  [202,] 0.32050574 0.3337549 0.4940733 0.6227784 0.6271494 0.6581667 0.6793984 #>  [203,] 0.35771010 0.3825818 0.3923413 0.4208666 0.4261663 0.4992121 0.5456999 #>  [204,] 0.75924608 0.8665322 1.0565891 1.1317184 1.1613763 1.1993853 1.2169592 #>  [205,] 1.23858684 1.5171744 1.7487213 1.8748342 1.9045844 1.9264777 1.9468479 #>  [206,] 0.26780405 0.3084474 0.4916846 0.5134707 0.5176944 0.5206713 0.5394292 #>  [207,] 0.24638563 0.3939455 0.3987328 0.4039412 0.4857725 0.5482301 0.5744782 #>  [208,] 0.24313366 0.3839502 0.4288310 0.4944697 0.5065014 0.5176481 0.5880595 #>  [209,] 0.41703370 0.7069654 0.7399889 0.7448465 0.7580006 0.7898350 0.7965212 #>  [210,] 0.38587184 0.4975631 0.5594510 0.6326412 0.6597140 0.6672836 0.6732248 #>  [211,] 1.24422973 1.2786736 1.3715459 1.4806201 1.5267689 1.5286590 1.5433729 #>  [212,] 0.70954159 0.7412521 0.7424398 0.7461115 0.7506821 0.7928971 0.8237864 #>  [213,] 0.74141024 0.7546082 0.9585443 1.0428205 1.0983664 1.1202161 1.1269039 #>  [214,] 0.13904093 0.4522702 0.4983274 0.5700029 0.5975394 0.6806852 0.8249728 #>  [215,] 0.43326589 0.6411276 0.6834629 0.7205418 0.7251965 0.7591151 0.7901431 #>  [216,] 0.28858662 0.4970802 0.5083395 0.6022775 0.7461951 0.7610566 0.7669707 #>  [217,] 0.33486494 0.3717531 0.3984501 0.4593153 0.4670918 0.4699170 0.5092941 #>  [218,] 0.84984832 0.9047142 1.0059428 1.0462504 1.0763196 1.1725214 1.1988895 #>  [219,] 0.56062714 0.6276588 0.6828559 0.7049275 0.7707003 0.8094828 0.8113266 #>  [220,] 0.58793500 0.6670721 0.7185845 0.7357600 0.8015458 0.8078165 0.8603771 #>  [221,] 0.18013526 0.3704731 0.6120133 0.6604803 0.7079778 0.7145227 0.7187308 #>  [222,] 0.66779022 0.6869281 0.8172175 0.8365964 0.8599619 0.9535106 0.9848579 #>  [223,] 0.29650164 0.4610676 0.4832860 0.4923617 0.5353100 0.5497003 0.5619143 #>  [224,] 1.20222048 1.3727464 1.4854362 1.4902847 1.5955406 1.6575207 1.6746017 #>  [225,] 0.37771248 0.4804653 0.4986226 0.5152624 0.5672420 0.6674126 0.6776456 #>  [226,] 0.59942135 0.6546835 0.7880145 0.8058012 0.8429035 0.8465317 0.8674869 #>  [227,] 0.36641994 0.4357680 0.4633839 0.4639479 0.4693584 0.5126482 0.5128345 #>  [228,] 0.61304012 0.7119856 0.7455963 0.7735822 0.7824257 0.7828968 0.8753107 #>  [229,] 0.68757988 0.8065900 0.8845088 0.9054058 0.9125156 0.9198210 0.9628631 #>  [230,] 0.20000492 0.2384277 0.3585345 0.4087444 0.4245112 0.5068568 0.5240756 #>  [231,] 0.56885825 0.5715856 0.6165661 0.7218372 0.7906669 0.8122972 0.8441366 #>  [232,] 0.71572490 0.7642984 0.9378846 1.0588150 1.0688866 1.1198065 1.1491633 #>  [233,] 0.47763385 0.4797836 0.5104001 0.5988339 0.6127841 0.6350583 0.6418602 #>  [234,] 0.59892192 0.6139956 0.6491442 0.6976818 0.6983015 0.7386737 0.7565132 #>  [235,] 0.64099106 0.7177148 0.7538726 0.8015458 0.8345369 0.8733538 0.9699346 #>  [236,] 0.38610709 0.4008743 0.4136998 0.5332662 0.5381345 0.5704168 0.6657183 #>  [237,] 0.84983696 0.8586996 1.0738222 1.1530405 1.1678819 1.2576083 1.2958749 #>  [238,] 0.32956002 0.3940419 0.4693793 0.5317511 0.6308598 0.6641704 0.6983086 #>  [239,] 0.66905318 0.6785268 0.7599306 0.8700268 0.8908215 0.9088285 0.9549943 #>  [240,] 0.30931680 0.5203144 0.5216290 0.5318545 0.5420474 0.6642372 0.6644111 #>  [241,] 0.40127694 0.5105350 0.5684965 0.5763716 0.5990375 0.6510221 0.6652866 #>  [242,] 0.37901107 0.4866599 0.5087568 0.5342810 0.5606271 0.6380582 0.6521944 #>  [243,] 0.67691313 0.7012143 0.7525811 0.7862250 0.8136232 0.8237864 0.8585687 #>  [244,] 0.58998716 0.6345945 0.6721443 0.7031739 0.7565083 0.7659594 0.7755620 #>  [245,] 0.50639228 0.5423040 0.5919427 0.6056507 0.6201841 0.7244920 0.7364956 #>  [246,] 0.48899784 0.5099924 0.5304571 0.6156194 0.6342366 0.7273355 0.8129587 #>  [247,] 0.83347350 0.9325508 0.9808844 0.9923914 1.0237412 1.0639629 1.0813860 #>  [248,] 0.29391951 0.4717049 0.6299487 0.6556254 0.7245437 0.7898350 0.8217511 #>  [249,] 0.41683776 0.5962302 0.6669037 0.6901070 0.7025320 0.7523450 0.8018750 #>  [250,] 1.21166288 1.2294056 1.2509839 1.2674258 1.3260661 1.3444372 1.4390961 #>  [251,] 0.52906397 0.5426104 0.5877009 0.6842077 0.7569454 0.8216116 0.8229070 #>  [252,] 1.21518246 1.6197748 1.6598146 1.6952379 1.7601753 1.7737064 1.9771299 #>  [253,] 0.22047455 0.2611233 0.3774742 0.4322265 0.4684449 0.4887826 0.5065395 #>  [254,] 0.58946217 1.0513826 1.0520304 1.0542315 1.1893098 1.2351798 1.2734196 #>  [255,] 0.08551787 0.3252085 0.4097797 0.4338313 0.5597723 0.6249364 0.6318772 #>  [256,] 0.38258829 0.4579993 0.5345361 0.5610336 0.6120133 0.7436644 0.7465897 #>  [257,] 0.43031041 0.5497444 0.5521676 0.6688059 0.7208413 0.8118281 0.8168851 #>  [258,] 0.55121589 0.6485464 0.6858611 0.7505180 0.7848223 0.8771457 0.8978137 #>  [259,] 0.26956496 0.8147315 0.9095093 0.9144601 0.9358312 0.9531234 0.9747795 #>  [260,] 1.28338506 1.7764107 1.8023658 1.8967842 1.9080833 1.9829430 2.0239790 #>  [261,] 0.56054171 0.6238260 0.7594736 0.7609070 0.7762419 0.7825435 0.8131707 #>  [262,] 0.20386375 0.2894980 0.5014639 0.5317128 0.5389260 0.5404083 0.5769577 #>  [263,] 0.39404185 0.4011199 0.4710589 0.4949200 0.5165640 0.5427113 0.5808416 #>  [264,] 0.59342678 0.6662673 0.6955228 0.8457980 0.9130582 0.9248700 0.9811662 #>  [265,] 0.35188854 0.4413836 0.6151514 0.6217122 0.7083897 0.7695969 0.8029376 #>  [266,] 0.40778994 0.5975137 0.6944126 0.6956455 0.6962288 0.8199660 0.9895106 #>  [267,] 0.28557816 0.3657849 0.4267636 0.4291062 0.4985506 0.5251761 0.5381624 #>  [268,] 0.21727980 0.3531541 0.4289352 0.4339720 0.4406686 0.4887455 0.5069494 #>  [269,] 0.43534290 0.5898221 0.6022775 0.6294779 0.6655560 0.6799997 0.7664075 #>  [270,] 0.55810737 0.5891235 0.6006815 0.6165661 0.6484500 0.6647712 0.7563848 #>  [271,] 0.81651345 0.9643287 0.9677141 1.0810313 1.1658729 1.1887008 1.2135606 #>  [272,] 0.26026174 0.5380415 0.7469310 0.7652901 0.7713135 0.8104013 0.8131707 #>  [273,] 0.50024718 0.5243151 0.6254142 0.6587210 0.7286231 0.8836161 0.8869014 #>  [274,] 0.33137370 0.3358853 0.4015201 0.4659702 0.5578032 0.6054457 0.6084786 #>  [275,] 0.55844154 0.6875799 0.7551750 0.7720374 0.7771288 0.8117078 0.8346682 #>  [276,] 0.61599421 0.9854010 1.0290453 1.0593234 1.3344945 1.3489911 1.3506421 #>  [277,] 0.19484835 0.3543807 0.3548574 0.4050111 0.4546856 0.4923291 0.5261272 #>  [278,] 1.10729674 1.1853797 1.2004013 1.2797400 1.3119256 1.3159201 1.3192099 #>  [279,] 0.41107031 0.4316017 0.4766862 0.4916033 0.5123082 0.5255391 0.5330666 #>  [280,] 0.22766851 0.3132526 0.3408474 0.4639939 0.5203137 0.5247737 0.5420218 #>  [281,] 0.16992806 0.2420129 0.2994975 0.4218153 0.4656619 0.5660513 0.5740398 #>  [282,] 0.46035510 0.4611113 0.4814347 0.5466499 0.5853492 0.5876585 0.6241569 #>  [283,] 0.52947069 0.6197363 0.7916820 0.8509321 0.8983430 0.9008699 0.9058150 #>  [284,] 0.35770762 0.4833269 0.5302368 0.5997357 0.6832954 0.7496746 0.7581900 #>  [285,] 0.37091313 0.3719896 0.4568346 0.4632408 0.5208225 0.5646419 0.5887753 #>  [286,] 0.37175308 0.3849084 0.3963773 0.4067629 0.4309658 0.4644801 0.4651885 #>  [287,] 0.28858662 0.4353429 0.5452345 0.5803351 0.7704363 0.8070511 0.8566027 #>  [288,] 0.53011055 0.5805749 0.6361523 0.7466841 0.7649024 0.8000256 0.8005046 #>  [289,] 0.46679256 0.6034228 0.7086978 0.7599640 0.8815497 0.9097066 0.9192341 #>  [290,] 0.48149613 0.5005688 0.5063163 0.5682086 0.6571252 0.7471739 0.7773060 #>  [291,] 0.65258652 0.7388078 0.7399706 0.7499713 0.7580006 0.7717950 0.8064043 #>  [292,] 0.30231904 0.3348649 0.4415725 0.4583920 0.4765848 0.4837072 0.4887826 #>  [293,] 0.27011389 0.3438977 0.4255804 0.4997053 0.5256825 0.5290668 0.5315624 #>  [294,] 0.20184663 0.4167902 0.4518392 0.4690126 0.5373669 0.5568693 0.5662645 #>  [295,] 0.27473942 0.8162747 0.8527524 0.8612523 0.8668324 0.8920183 0.9058150 #>  [296,] 0.44900317 0.4493876 0.5293741 0.6437868 0.6882445 0.6935936 0.6964255 #>  [297,] 0.19001988 0.3533672 0.4542226 0.4711553 0.5672505 0.5941687 0.6204520 #>  [298,] 0.19781634 0.3821711 0.4491683 0.4584128 0.4639479 0.4738210 0.5176944 #>  [299,] 0.77389249 0.8696867 0.8979825 0.9275306 0.9471746 0.9756299 0.9800021 #>  [300,] 0.33248540 0.3366895 0.4040801 0.4073470 0.4408097 0.5429953 0.5654190 #>  [301,] 0.57960198 0.7738925 0.8987480 0.9527630 0.9669431 0.9821260 0.9847550 #>  [302,] 0.60849289 0.6405020 0.6634108 0.6842995 0.6999846 0.7160324 0.8142133 #>  [303,] 0.32778020 0.3825694 0.4279165 0.4769811 0.6253705 0.6481501 0.6658579 #>  [304,] 0.67761263 0.7900411 0.8224570 0.8930972 0.9097738 0.9277988 0.9704154 #>  [305,] 0.30127508 0.3203079 0.3666278 0.3728496 0.5056536 0.6256642 0.6431401 #>  [306,] 0.53789777 0.6647837 0.8510780 0.8753737 0.9529782 1.0084163 1.0419023 #>  [307,] 0.45572107 0.5709510 0.6918727 0.9127637 0.9149750 0.9481829 0.9778297 #>  [308,] 0.65993860 0.6637175 0.7099439 0.7212062 0.8731649 0.9998810 1.0348141 #>  [309,] 0.39431712 0.4816355 0.4997697 0.5624893 0.5708168 0.5751171 0.5831899 #>  [310,] 0.63773860 0.6751415 0.6965160 0.7180837 0.7277565 0.7521209 0.7757006 #>  [311,] 0.32832891 0.3763102 0.4364114 0.4687094 0.5127298 0.5490327 0.5873198 #>  [312,] 0.54457525 0.5568382 0.5719386 0.6054965 0.6269027 0.7570178 0.7835987 #>  [313,] 0.35852339 0.3970127 0.5043570 0.5926795 0.5973222 0.6713057 0.7088751 #>  [314,] 0.29869490 0.4050321 0.5588210 0.6373195 0.6716763 0.6874708 0.7098606 #>  [315,] 0.10703625 0.3120711 0.4565264 0.4639676 0.4678737 0.4736157 0.4784113 #>  [316,] 0.66626727 0.8263012 0.8736679 0.9085505 0.9975550 1.0182086 1.0461780 #>  [317,] 0.14644027 0.2897663 0.3245218 0.3317929 0.3771291 0.3913380 0.4649052 #>  [318,] 0.35890780 0.4177575 0.4351121 0.4831061 0.4896734 0.5528471 0.5891893 #>  [319,] 0.54773425 0.8312438 0.8319873 0.9041896 0.9175260 0.9271209 0.9294561 #>  [320,] 0.28242921 0.4875531 0.5423291 0.5655464 0.6020892 0.6535911 0.6672805 #>  [321,] 0.35569337 0.4493876 0.4685769 0.4890031 0.5073405 0.5654476 0.6063604 #>  [322,] 0.41701475 0.4227815 0.4558231 0.4685458 0.4884780 0.4891648 0.5302586 #>  [323,] 0.32444853 0.3522360 0.3657849 0.5025019 0.5162817 0.5247918 0.6237221 #>  [324,] 0.39445494 0.4501696 0.4651665 0.5568693 0.5973222 0.6052589 0.6248924 #>  [325,] 0.26958030 0.3733315 0.3752093 0.3984501 0.4573811 0.4651885 0.4657123 #>  [326,] 0.35332061 0.3897748 0.4561825 0.4766862 0.5685745 0.6914093 0.6930869 #>  [327,] 0.25382708 0.4709134 0.5051585 0.5345975 0.5349636 0.5495654 0.5645974 #>  [328,] 0.38941890 0.4797836 0.4958289 0.5585444 0.5586989 0.5945452 0.6745505 #>  [329,] 0.65717654 0.8219947 0.8586754 0.8665322 0.8869342 0.8926854 1.0021505 #>  [330,] 0.25890945 0.3114668 0.3344297 0.3346954 0.4415133 0.4756494 0.4923617 #>  [331,] 0.74836579 0.8146890 0.8612523 1.0359420 1.0367497 1.0818234 1.1672308 #>  [332,] 0.68692814 0.9739637 1.1744392 1.3050302 1.3088869 1.3556043 1.4608639 #>  [333,] 0.63259672 0.7321876 1.0575390 1.2210131 1.2674258 1.3615457 1.3773606 #>  [334,] 0.54060538 0.6456163 0.7090011 0.7280781 0.7551603 0.7719512 0.8049644 #>  [335,] 0.34954486 0.3847488 0.4369691 0.4639756 0.4685769 0.4827117 0.5843821 #>  [336,] 0.66371751 0.6969766 0.7131800 0.8011269 0.8462605 0.8968729 0.9142923 #>  [337,] 0.46865196 0.4935436 0.4942628 0.5252806 0.5300798 0.5700029 0.5831899 #>  [338,] 0.57193855 0.6858549 0.6883190 0.7293401 0.7666079 0.7949877 0.8049425 #>  [339,] 0.64319859 0.6677902 0.6687857 0.6825838 0.7042280 0.7464974 0.7779685 #>  [340,] 0.64522884 0.7134803 0.7372167 0.8764077 0.9741486 1.0392974 1.0905848 #>  [341,] 0.17318192 0.4344757 0.4857725 0.5291707 0.5988933 0.6229404 0.6277977 #>  [342,] 0.40224149 0.4833269 0.5042339 0.5669015 0.5804446 0.6034721 0.6113145 #>  [343,] 0.25732828 0.3229172 0.4931602 0.5142644 0.5404666 0.5586184 0.5758649 #>  [344,] 0.44118523 0.4563260 0.4840751 0.7578517 0.8152281 0.8183491 0.8857718 #>  [345,] 0.42810590 0.4563260 0.4631437 0.6417617 0.6659502 0.7062909 0.7676711 #>  [346,] 0.17136703 0.5031950 0.5225606 0.5601168 0.5906645 0.5996671 0.6072727 #>  [347,] 0.35005205 0.5655464 0.6819647 0.7029357 0.7174457 0.7187308 0.7246776 #>  [348,] 0.37528063 0.3943171 0.4269992 0.5615495 0.6119267 0.6167704 0.6321606 #>  [349,] 0.84500529 0.9724347 1.0467427 1.1489887 1.1878251 1.2489750 1.2511756 #>  [350,] 0.38763149 0.4407847 0.4545905 0.4624659 0.4684449 0.4732793 0.5228951 #>  [351,] 0.95764644 1.3615457 1.4108821 1.5248635 1.5860636 1.6217466 1.7271510 #>  [352,] 0.60043966 0.6230444 0.6888276 0.7829242 0.8064713 0.8338613 0.8362069 #>  [353,] 0.36055055 0.3836838 0.5176481 0.5203137 0.6071910 0.6135362 0.6698722 #>  [354,] 0.49138077 0.6208565 0.7221109 0.7496356 0.7578517 0.7949448 0.8029376 #>  [355,] 0.61429030 0.6211695 0.6563429 0.6982256 0.7521475 0.8270865 0.9149978 #>  [356,] 0.95925206 1.1608518 1.2249716 1.2282700 1.4298206 1.4418256 1.4505299 #>  [357,] 0.34641275 0.4071556 0.6277187 0.6635607 0.6948244 0.7417024 0.7925903 #>  [358,] 0.37198962 0.3864031 0.5176666 0.5225606 0.5545292 0.5870995 0.5888366 #>  [359,] 0.58627170 0.6230444 0.6452471 0.7015320 0.8733523 0.9777953 0.9926123 #>  [360,] 0.24157650 0.2608568 0.3075040 0.3657443 0.4325758 0.4459570 0.4491683 #>  [361,] 0.53927956 0.5756609 0.6593261 0.7103708 0.7414109 0.7523980 0.8006531 #>  [362,] 0.43391574 0.5693601 0.6460765 0.7042639 0.7397000 0.8173817 0.8190748 #>  [363,] 0.35015508 0.3741200 0.4603551 0.5231295 0.5704168 0.5704249 0.5882026 #>  [364,] 0.64462719 0.7330033 0.9043918 0.9179242 0.9336096 0.9827761 1.0148085 #>  [365,] 0.75628496 0.8495078 0.8670282 0.8689152 0.9749622 0.9766779 0.9823692 #>  [366,] 0.74788077 0.8463139 0.8623662 0.8945547 0.8995558 1.0413868 1.0545975 #>  [367,] 0.26780405 0.3895409 0.4636101 0.4719325 0.4929738 0.5305033 0.5307431 #>  [368,] 0.49382892 0.5619761 0.6593261 0.6713175 0.6902761 0.6966789 0.7094681 #>  [369,] 0.61716276 0.6508003 0.6563429 0.7798511 0.7808489 0.7866576 0.7933238 #>  [370,] 0.34177648 0.6633839 0.7720374 0.8266824 0.8908372 0.9699346 0.9966640 #>  [371,] 0.33801447 0.4201246 0.4578096 0.4819769 0.5250051 0.5423291 0.5546237 #>  [372,] 0.41875004 0.4763184 0.5126225 0.5720617 0.6169266 0.6461097 0.6978403 #>  [373,] 0.76800561 0.7840686 0.8045325 0.8838494 0.8901628 0.8990052 0.9572398 #>  [374,] 0.75136221 0.9362715 1.1261287 1.1379489 1.1497601 1.1953332 1.2592386 #>  [375,] 0.29373044 0.4296327 0.4595382 0.4677693 0.5287560 0.6074936 0.6420046 #>  [376,] 0.46217533 0.4942628 0.4983274 0.5462977 0.6161980 0.7013665 0.7015580 #>  [377,] 0.30844740 0.3693023 0.3821711 0.4636101 0.4790694 0.4981114 0.5151640 #>  [378,] 0.24850381 0.3664199 0.4109456 0.4889477 0.5860767 0.5870995 0.6048515 #>  [379,] 0.79189538 0.8983704 0.9497039 1.0040368 1.0284043 1.0573054 1.0605671 #>  [380,] 0.20888352 0.3245844 0.4696115 0.5492670 0.5495654 0.5981923 0.6411276 #>  [381,] 0.45820339 0.4759318 0.4868108 0.4929879 0.4947816 0.4981386 0.5029787 #>  [382,] 0.36615464 0.4987424 0.4997815 0.5633176 0.5914730 0.5923912 0.6362516 #>  [383,] 0.91391626 0.9598573 1.0016504 1.0582589 1.1089170 1.1709128 1.2265636 #>  [384,] 0.27473942 0.7483658 0.8248381 0.8581475 0.8649329 0.9528830 1.0264302 #>  [385,] 0.25564934 0.2769709 0.3777125 0.4305316 0.5313647 0.6546921 0.7354276 #>  [386,] 0.29230067 0.3286251 0.5559795 0.6936359 0.7016651 0.7514979 0.7932342 #>  [387,] 0.44118523 0.4631437 0.6503266 0.7698617 0.9740158 0.9956570 1.0132370 #>  [388,] 0.49097643 0.5506696 0.6139956 0.6312037 0.6453357 0.6668508 0.6731733 #>  [389,] 0.41166195 0.4404673 0.5056536 0.5149787 0.5154467 0.5406022 0.5520172 #>  [390,] 0.26610248 0.2839152 0.4449723 0.5425900 0.5578180 0.6219528 0.6370323 #>  [391,] 0.75517504 0.7723181 0.8065900 0.8502117 0.8545616 0.9260004 0.9826079 #>  [392,] 0.31499425 0.5347940 0.6426890 0.6429713 0.6450839 0.6669177 0.6844864 #>  [393,] 0.43705634 0.5903262 0.6009966 0.7913458 0.8672894 0.9413523 1.0223127 #>  [394,] 0.64483600 0.6525865 0.6976818 0.7363154 0.8002869 0.8361220 0.8563938 #>  [395,] 0.31559434 0.6643795 0.6787231 0.7690992 0.8116862 0.8468605 0.8698276 #>  [396,] 0.20550343 0.3668317 0.4101305 0.4245112 0.4463518 0.4708458 0.4916165 #>  [397,] 0.18697600 0.2695803 0.3702227 0.4699170 0.5993502 0.5994176 0.5998461 #>  [398,] 0.29373044 0.3446270 0.4562323 0.5497444 0.6459957 0.6490334 0.6603118 #>  [399,] 0.65400625 0.7646623 0.7971747 0.8008353 0.8227845 0.8449739 0.8771934 #>  [400,] 0.38474883 0.4423559 0.5199864 0.5621799 0.5631742 0.5685745 0.5844964 #>  [401,] 0.37334771 0.5669541 0.6266748 0.6299624 0.7621527 0.7819104 0.7840686 #>  [402,] 0.28546131 0.4554618 0.4667941 0.5038547 0.5436614 0.5531315 0.6262212 #>  [403,] 0.49423771 0.7807277 0.7911324 0.7919207 0.8096671 0.8209923 0.8406419 #>  [404,] 0.36148249 0.3900983 0.4678737 0.4936388 0.5221780 0.5552746 0.5760931 #>  [405,] 0.35822829 0.6776126 0.7094866 0.7466841 0.7533527 0.7584077 0.7897788 #>  [406,] 0.84310984 0.8798585 0.9394858 0.9404797 0.9633205 0.9670616 1.0002061 #>  [407,] 0.42070511 0.4933400 0.5002472 0.5159829 0.6180409 0.6266748 0.6488143 #>  [408,] 0.62489237 0.6897379 0.7172686 0.7569454 0.7891132 0.7993421 0.8153877 #>  [409,] 0.81276323 0.8777608 0.9701075 0.9812265 1.0211290 1.0222164 1.1265965 #>  [410,] 0.55541501 0.6258560 0.8165134 1.0588150 1.1575399 1.1592611 1.1922072 #>  [411,] 0.79675070 0.8238955 0.8742803 0.8873789 0.9189333 0.9364915 0.9376060 #>  [412,] 0.76769489 0.8519251 0.9727588 1.0397466 1.3176880 1.3264168 1.3444716 #>  [413,] 0.45445774 0.6036394 0.6252131 0.6419102 0.6715846 0.6956225 0.7056913 #>  [414,] 0.49126617 0.6060959 0.6448073 0.6448360 0.6983015 0.7197324 0.7206705 #>  [415,] 0.39445494 0.4495041 0.4690126 0.5584415 0.5865362 0.6718452 0.7108417 #>  [416,] 0.50296629 0.5399085 0.5501971 0.6113103 0.6376368 0.6393994 0.7081441 #>  [417,] 0.25732828 0.3315103 0.5014639 0.5025302 0.5417839 0.5508617 0.5514610 #>  [418,] 0.42249267 0.8382128 0.8608219 0.9061576 0.9111203 0.9813843 0.9871218 #>  [419,] 0.20000492 0.3494797 0.3931327 0.4028479 0.4357955 0.4389403 0.4553270 #>  [420,] 0.29650164 0.4415133 0.4561043 0.4634407 0.5303329 0.5754762 0.6538907 #>  [421,] 0.67714969 0.8733538 0.8964939 1.0016504 1.1087119 1.2251280 1.2383282 #>  [422,] 0.35747588 0.4573762 0.4773304 0.5291707 0.6414353 0.6787061 0.6913417 #>  [423,] 0.41775747 0.4701926 0.4709967 0.5130926 0.6422240 0.6423078 0.6524806 #>  [424,] 0.85021170 0.9728832 1.0085030 1.0395545 1.0446848 1.0557861 1.0672304 #>  [425,] 0.35054712 0.4248052 0.5334679 0.5454910 0.5981923 0.6602953 0.7033212 #>  [426,] 0.41601608 0.4272115 0.4892146 0.5011020 0.5342211 0.5525882 0.6483288 #>  [427,] 0.35167193 0.3733621 0.4570082 0.5634618 0.5692287 0.5722573 0.6132824 #>  [428,] 0.34462700 0.3836838 0.4595382 0.4928038 0.5100259 0.6198197 0.6951443 #>  [429,] 0.29391951 0.5339224 0.7037705 0.7121532 0.7338909 0.7851809 0.8006531 #>  [430,] 0.36043811 0.6064083 0.7853899 0.8334970 0.8662027 0.8897205 0.8938963 #>  [431,] 0.69292063 0.7131670 0.7286231 0.8173009 0.9194374 0.9255504 0.9522368 #>  [432,] 0.61405593 0.7787198 0.9140566 1.0095770 1.1735254 1.2790258 1.3064622 #>  [433,] 0.52465819 0.6363106 0.6834310 0.7514513 0.8576450 0.8863310 0.9435758 #>  [434,] 0.18697600 0.3659917 0.3752093 0.4533781 0.5092941 0.6135531 0.6642841 #>  [435,] 0.38127462 0.5385692 0.6714740 0.7091851 0.7471739 0.7515485 0.7722963 #>  [436,] 0.34177648 0.4401600 0.7538726 0.8199839 0.8787511 0.8875912 0.9009039 #>  [437,] 0.28557816 0.2896119 0.2988628 0.3573544 0.3796977 0.3850855 0.4271373 #>  [438,] 0.35747588 0.4741428 0.5949773 0.6330370 0.6389746 0.6567827 0.6588133 #>  [439,] 1.11715622 1.2476346 1.2790258 1.3322719 1.4284007 1.4460941 1.4593562 #>  [440,] 0.11940893 0.5011020 0.5222349 0.5430692 0.5802624 0.6448649 0.6919374 #>  [441,] 0.34097264 0.5361913 0.6298053 0.6322302 0.6828277 0.7277178 0.7280781 #>  [442,] 0.28774145 0.4354041 0.4620837 0.5106507 0.6132689 0.6619993 0.6923399 #>  [443,] 0.46908262 0.6585486 0.7191727 0.7277080 0.8305145 0.8662027 0.8669034 #>  [444,] 0.36240687 0.5905339 0.5981160 0.6319032 0.6667065 0.6669177 0.6675078 #>  [445,] 0.77231811 0.9851261 1.0446848 1.1979251 1.2501236 1.4380549 1.4687189 #>  [446,] 0.44743584 0.5909966 0.6482640 0.6963227 0.7409194 0.7768567 0.8147315 #>  [447,] 0.57541405 0.6355147 0.7665603 0.7821943 0.7862931 0.8678232 0.8827589 #>  [448,] 0.45453513 0.5413250 0.5980285 0.6237221 0.6581594 0.6992777 0.7011031 #>  [449,] 0.32669064 0.7596226 0.7720966 0.7916820 0.9185841 0.9267801 0.9452282 #>  [450,] 0.37347159 0.5049356 0.5772835 0.7066247 0.7169133 0.7222277 0.8114842 #>  [451,] 0.36215703 0.3940541 0.5945117 0.6844643 0.7008188 0.7054963 0.7775904 #>  [452,] 0.56233697 0.7042639 0.8251752 0.8698567 0.9224027 0.9595984 0.9610544 #>  [453,] 0.38287441 0.4239390 0.6482640 0.7196261 0.8009001 0.8270137 0.9095490 #>  [454,] 0.83916131 1.0889476 1.2226140 1.3123556 1.4498936 1.5065588 1.5238987 #>  [455,] 0.57055542 0.7676949 1.0241772 1.0286185 1.1045690 1.1336047 1.2588105 #>  [456,] 0.33668945 0.3923662 0.4449353 0.4792366 0.5534742 0.5785733 0.6042255 #>  [457,] 1.53647431 1.6178615 1.6512543 1.7226223 1.7756641 1.8627478 1.8805088 #>  [458,] 0.61727290 0.8220140 0.8445695 0.8508129 0.8528987 0.8639137 0.9325485 #>  [459,] 0.34846949 0.5709510 0.6599498 0.7078336 0.7330033 0.8075759 0.8636713 #>  [460,] 1.14524212 1.2188654 1.2781857 1.3542194 1.4079681 1.6090034 1.7945939 #>  [461,] 0.22123491 0.3114668 0.3538130 0.5207228 0.5209862 0.5731625 0.5754762 #>  [462,] 0.61973630 0.9494569 1.1121380 1.1394969 1.2118634 1.2288078 1.2462952 #>  [463,] 0.29210316 0.4480716 0.5063163 0.5477193 0.6207600 0.7244920 0.7657549 #>  [464,] 0.66905318 0.6708937 0.6978460 0.7040336 0.7308514 0.7986751 0.8245491 #>  [465,] 0.71348035 0.7509035 0.7551603 0.9717438 0.9837804 0.9838602 1.0819567 #>  [466,] 0.75905191 0.8779168 0.9910372 1.0471405 1.0749886 1.1187961 1.1271064 #>  [467,] 0.54210870 0.6165977 0.6643747 0.7111712 0.7175497 0.7301004 0.7730969 #>  [468,] 0.56514304 0.6161242 0.7971747 0.8047540 0.9143065 0.9356823 0.9619047 #>  [469,] 0.62116951 0.6643985 0.6672218 0.6680482 0.6795948 0.7160144 0.7334433 #>  [470,] 0.43893707 0.4639676 0.5049658 0.5277332 0.6142903 0.6366302 0.6449385 #>  [471,] 0.70994389 0.9184007 0.9739637 1.1212719 1.1400991 1.1452421 1.1734676 #>  [472,] 0.10703625 0.3975268 0.4220027 0.4389371 0.5158890 0.5206218 0.5221780 #>  [473,] 0.56702327 0.8752330 0.9027604 0.9080641 0.9129220 0.9322507 0.9333638 #>  [474,] 0.45659317 0.4655799 0.4964106 0.6962288 0.7009999 0.7060645 0.7146333 #>  [475,] 0.45618254 0.5506696 0.5612420 0.6094576 0.6540806 0.6955831 0.7139990 #>  [476,] 0.88441993 1.0570602 1.0968792 1.1582658 1.2374673 1.2634697 1.2973450 #>  [477,] 0.64691897 0.9631873 0.9639582 1.0711266 1.0808411 1.1130650 1.1240179 #>  [478,] 0.26417802 0.2705644 0.3783726 0.3830392 0.3922052 0.3971396 0.4311260 #>  [479,] 0.57318548 0.5984288 0.5989313 0.6090431 0.6154716 0.6323436 0.6563010 #>  [480,] 0.35054712 0.3832952 0.5962302 0.7402190 0.7525725 0.7581105 0.7622566 #>  [481,] 0.52763527 0.6398665 0.6921861 0.7184366 0.7369236 0.7906425 0.8131480 #>  [482,] 0.65993860 0.7131800 0.7988633 0.8641216 0.8992590 0.9042614 0.9184007 #>  [483,] 0.42775260 0.5363482 0.6042255 0.6578652 0.7411959 0.7546979 0.7636264 #>  [484,] 0.44881683 0.5539141 0.6750129 0.6972536 0.7514615 0.7645972 0.7669418 #>  [485,] 0.43464182 0.4790119 0.5216290 0.6956134 0.7012143 0.7698489 0.7879565 #>  [486,] 0.43963382 0.4814051 0.5578032 0.5737495 0.5750448 0.6033637 0.6368990 #>  [487,] 0.30418521 0.3983786 0.4279165 0.6400764 0.7708698 0.7755620 0.8200295 #>  [488,] 1.40983907 1.4360926 1.4830111 1.4998200 1.6123649 1.6836294 1.7509359 #>  [489,] 0.68425947 0.7312608 0.8825166 0.9258225 1.0277990 1.1349683 1.1463213 #>  [490,] 0.32772639 0.4307908 0.4446180 0.4459570 0.4625440 0.4914491 0.5342600 #>  [491,] 0.24201294 0.3362537 0.3983924 0.4597303 0.4711941 0.4876246 0.5080557 #>  [492,] 0.16369180 0.2759465 0.2813778 0.2896119 0.3495367 0.3643278 0.3971396 #>  [493,] 0.11974982 0.2956964 0.3531541 0.4497023 0.4809946 0.4956834 0.5731456 #>  [494,] 0.54281586 0.7507016 0.7520920 0.7609070 0.7646252 0.8153496 0.9107875 #>  [495,] 0.34084741 0.4138856 0.4271373 0.4681658 0.4789620 0.5049328 0.5065014 #>  [496,] 0.38672767 0.4379395 0.4994565 0.5671212 0.6149567 0.6448073 0.6677660 #>  [497,] 0.39321579 0.4929879 0.5363539 0.5680632 0.6139790 0.6212663 0.6483283 #>  [498,] 0.35065148 0.4970802 0.5264252 0.5447677 0.5803351 0.7658133 0.8221483 #>  [499,] 1.06072712 1.1588054 1.2317703 1.2682641 1.2683999 1.2692907 1.3062797 #>  [500,] 0.39405412 0.4983954 0.5166758 0.5894445 0.6710525 0.7275147 0.7867517 #>  [501,] 0.18013526 0.3331009 0.5610336 0.5680026 0.6396652 0.6588329 0.7003871 #>  [502,] 0.46557987 0.5038547 0.5827236 0.6261052 0.6821761 0.6849759 0.6956455 #>  [503,] 0.34040762 0.4913808 0.5344756 0.6127803 0.6496542 0.7339786 0.7746826 #>  [504,] 0.48992050 0.8142854 0.8621548 0.8672894 0.8954281 0.9149062 1.0569230 #>  [505,] 0.23394394 0.3861071 0.4703700 0.5677295 0.6015055 0.6103876 0.6467122 #>  [506,] 0.66906314 0.6751415 0.6801455 0.7045991 0.8085477 0.8327391 0.8770906 #>  [507,] 0.88737890 1.0997228 1.1164011 1.1833907 1.1974072 1.2169764 1.2212561 #>  [508,] 0.31159392 0.3641150 0.4516517 0.4625440 0.4664921 0.5404303 0.5411897 #>  [509,] 0.27697085 0.2929649 0.4804653 0.5107848 0.5279865 0.6191184 0.6193931 #>  [510,] 0.76429843 0.9493937 0.9743492 0.9810488 1.0498775 1.1592611 1.1662370 #>  [511,] 0.32520845 0.3613223 0.3947316 0.4747412 0.5125007 0.5654712 0.5759288 #>  [512,] 0.32543437 0.4204392 0.5645974 0.5981146 0.6117691 0.6236082 0.6353335 #>  [513,] 0.88125608 0.9071713 0.9611344 1.0245191 1.0361278 1.0738697 1.1334215 #>  [514,] 0.39234127 0.4096973 0.4201246 0.4251943 0.4520400 0.4843802 0.5522855 #>  [515,] 0.44900317 0.4634407 0.5407477 0.5763734 0.6063604 0.7260918 0.7378094 #>  [516,] 0.36293547 0.4296327 0.4518987 0.4562323 0.4843977 0.5100259 0.6071910 #>  [517,] 0.26438244 0.6084929 0.7254217 0.7848867 0.8226275 0.8640242 0.8751965 #>  [518,] 0.28532947 0.3825694 0.3983786 0.6118515 0.6412445 0.6581594 0.6789707 #>  [519,] 0.32759879 0.3507520 0.4067639 0.5318545 0.5661919 0.6069266 0.6157666 #>  [520,] 0.26048530 0.5466924 0.5810058 0.6052335 0.6171628 0.6665280 0.6717407 #>  [521,] 0.76002877 0.8116333 0.8681844 0.9847550 1.0297510 1.1525605 1.1676207 #>  [522,] 0.24638563 0.3025758 0.3703916 0.4344757 0.4553944 0.4747810 0.4826182 #>  [523,] 0.12389484 0.3666278 0.4249845 0.5154467 0.5207309 0.6082847 0.6412380 #>  [524,] 0.57615778 0.7666079 0.7936587 0.8298455 0.9375756 0.9452178 0.9544123 #>  [525,] 0.76292567 1.0017774 1.0155551 1.0711266 1.0855124 1.0911613 1.0962031 #>  [526,] 0.31159392 0.3951564 0.3960281 0.4761596 0.4801395 0.5216214 0.5379774 #>  [527,] 0.43717820 0.5997357 0.6919621 0.7533527 0.7699842 0.7783428 0.7790400 #>  [528,] 0.49334000 0.5409595 0.5992381 0.6254142 0.7008422 0.7321424 0.7746440 #>  [529,] 0.49144906 0.5028006 0.5434673 0.5663814 0.6315573 0.6550502 0.6569037 #>  [530,] 0.24194670 0.4787234 0.5458883 0.5572480 0.5682598 0.6450839 0.7090014 #>  [531,] 0.31559434 0.4700441 0.4920963 0.8560473 0.8674704 0.9069346 0.9150298 #>  [532,] 0.38127462 0.6867009 0.7131149 0.7168554 0.7773060 0.8560473 0.8856886 #>  [533,] 0.17136703 0.4616882 0.4786221 0.4792738 0.4854285 0.5760725 0.5791022 #>  [534,] 0.28821340 0.3768929 0.5380466 0.6219728 0.6568379 0.7456289 0.7775904 #>  [535,] 0.39470899 0.4204392 0.5349636 0.5472957 0.5779398 0.6335998 0.6427310 #>  [536,] 0.51754813 0.7124520 0.7636264 0.7825435 0.8405046 0.8440759 0.8661887 #>  [537,] 0.40909039 0.5246958 0.5651156 0.6064765 0.6252988 0.6312036 0.6583789 #>  [538,] 0.29043581 0.4312964 0.4446180 0.4936077 0.5146938 0.5663736 0.5736590 #>  [539,] 0.51122266 0.5207689 0.5231295 0.5250051 0.5336354 0.5510590 0.5539141 #>  [540,] 0.47662270 0.5458427 0.5899411 0.6103175 0.6908952 0.7519298 0.7807606 #>  [541,] 0.56702327 0.6437868 0.8377289 0.8580207 0.9081185 0.9103294 0.9143065 #>  [542,] 0.26026174 0.5530942 0.5781695 0.6322190 0.6525015 0.6896952 0.7040240 #>  [543,] 0.56075937 0.6478335 0.8085477 0.8549279 0.8553429 0.8742056 0.9153164 #>  [544,] 0.29949752 0.3275517 0.4118724 0.5236165 0.5337389 0.5607139 0.5792362 #>  [545,] 0.50560827 0.5427254 0.5801038 0.5834891 0.5915343 0.6578652 0.6644083 #>  [546,] 0.43611091 0.5118791 0.5381446 0.5429688 0.5436614 0.5680632 0.6222292 #>  [547,] 0.27593383 0.3507520 0.5341641 0.5342211 0.5964515 0.6052395 0.6113120 #>  [548,] 0.69252124 0.7358341 0.7741121 0.8321165 0.8716701 0.9199923 0.9224866 #>  [549,] 0.33402327 0.4071556 0.5345361 0.5720158 0.6157051 0.6270832 0.6422392 #>  [550,] 0.44917351 0.5287560 0.5495031 0.5982677 0.6198197 0.6899744 0.7156261 #>  [551,] 0.24484892 0.4229555 0.4706235 0.4888860 0.5952771 0.6075180 0.6261479 #>  [552,] 0.80598612 0.8186194 0.8298941 0.8409931 0.8992710 0.9329099 1.0199448 #>  [553,] 0.64524708 0.8064713 0.8498483 0.8668415 1.0083146 1.0547074 1.1871046 #>  [554,] 0.50644169 0.5141749 0.5935717 0.6518540 0.6573349 0.6734925 0.6900354 #>  [555,] 0.45677254 0.5049356 0.5425401 0.5692287 0.6681154 0.6937356 0.7005976 #>  [556,] 0.45339887 0.5601268 0.6451748 0.6455267 0.6911587 0.7347924 0.7906423 #>  [557,] 0.46626237 0.4922907 0.5264252 0.6229340 0.6291464 0.6451748 0.6832727 #>  [558,] 0.44497231 0.4513298 0.4550514 0.5012718 0.5181469 0.5512114 0.5602011 #>  [559,] 0.52850017 0.5787957 0.5862767 0.6128468 0.6680522 0.6883190 0.7183996 #>  [560,] 0.42775260 0.5175481 0.5427254 0.6569535 0.6595359 0.6716049 0.6951443 #>  [561,] 0.51318954 0.5725280 0.5818517 0.6370323 0.7450875 0.7688468 0.8700146 #>  [562,] 0.58701516 0.6260463 0.6361523 0.6709515 0.7497361 0.7564475 0.7741619 #>  [563,] 0.27593383 0.3275988 0.3528415 0.4144384 0.4468093 0.5622781 0.5683815 #>  [564,] 0.26610248 0.4597773 0.5715856 0.5793379 0.5818517 0.6203012 0.6210819 #>  [565,] 0.37147684 0.3752806 0.3934733 0.4135453 0.5751171 0.6213779 0.6596234 #>  [566,] 0.54281586 0.6851990 0.7100188 0.7281727 0.7723297 0.7762419 0.7806314 #>  [567,] 0.24194670 0.5803009 0.6556549 0.7138727 0.7512776 0.7777793 0.7880474 #>  [568,] 0.55425317 0.6050939 0.6900354 0.7301004 0.7440049 0.7911462 0.8406484 #>  [569,] 0.35117481 0.4135453 0.5370229 0.5708168 0.6115714 0.6197958 0.6321606 #>  [570,] 0.27230569 0.3643249 0.3669649 0.4022015 0.4583033 0.4885882 0.5631478 #>  [571,] 1.52219912 1.5991783 1.6265690 1.6332291 1.7718006 1.7995502 1.8059868 #>  [572,] 0.35336720 0.4104462 0.4903238 0.5547930 0.6229684 0.6276588 0.6484134 #>  [573,] 0.47572834 0.5138600 0.6628875 0.6715846 0.6752892 0.6896397 0.6963227 #>  [574,] 0.39337545 0.4766227 0.5465063 0.7848223 0.7978571 0.8648717 0.8689152 #>  [575,] 0.41995504 0.5411832 0.5961560 0.6551350 0.6795948 0.7011057 0.7237330 #>  [576,] 0.50515850 0.5130918 0.6018444 0.6241627 0.6418602 0.6743052 0.6760620 #>  [577,] 0.67328649 0.9962225 0.9997117 1.0569230 1.0815491 1.0855475 1.1632995 #>  [578,] 0.95985729 1.1399182 1.1683508 1.3167519 1.3226590 1.3408213 1.3578525 #>  [579,] 0.49945652 0.5253220 0.5400124 0.5755419 0.5785828 0.5802624 0.6464493 #>  [580,] 0.52087241 0.7222377 0.8345813 0.8493777 0.8671070 0.8681844 0.8689148 #>  [581,] 0.35059583 0.3569313 0.4266498 0.5035998 0.5427113 0.5480638 0.5841539 #>  [582,] 0.57722521 0.6280891 0.6690631 0.6821761 0.6965160 0.7168962 0.7217612 #>  [583,] 0.26048530 0.4633839 0.5860767 0.6152366 0.6390107 0.6814921 0.6887560 #>  [584,] 0.34713540 0.4612195 0.5077196 0.5162817 0.5165609 0.5298608 0.5530475 #>  [585,] 0.49126617 0.5235448 0.6407572 0.6713175 0.6942876 0.7152187 0.7480074 #>  [586,] 0.26417802 0.2726058 0.3378259 0.4724146 0.4765816 0.5521425 0.5559430 #>  [587,] 0.70078136 0.7673578 0.7735822 0.8120287 0.9098886 0.9867142 1.0066147 #>  [588,] 0.45517425 0.5006976 0.6219728 0.7522038 0.7879565 0.7905780 0.8161483 #>  [589,] 0.56075937 0.6112078 0.6166349 0.6680324 0.7212062 0.8641216 1.0098390 #>  [590,] 0.44016004 0.5879350 0.6409911 0.6633839 0.7013665 0.7365333 0.8646713 #>  [591,] 0.26581135 0.3838820 0.3923662 0.4073470 0.4117534 0.4710219 0.4826182 #>  [592,] 0.37835990 0.5750448 0.6003493 0.7276730 0.7580303 0.7829242 0.7939919 #>  [593,] 0.58717444 0.6531673 0.6819751 0.7169133 0.7244539 0.7933092 0.8267837 #>  [594,] 0.36559143 0.4600776 0.4618041 0.5112227 0.5233516 0.5413442 0.5466924 #>  [595,] 0.69531890 0.7414102 0.9132096 0.9178658 1.0431061 1.0441048 1.0491834 #>  [596,] 0.47599965 0.6277012 0.7521209 0.7765854 0.7842128 0.7972031 0.8009001 #>  [597,] 0.55704178 0.6662763 0.6846241 0.8698158 0.9377401 0.9706901 0.9908796 #>  [598,] 0.36615464 0.5073405 0.5765950 0.6437456 0.6775580 0.6891600 0.6925212 #>  [599,] 0.50253020 0.5064417 0.5805766 0.5901949 0.5996534 0.6243219 0.6364947 #>  [600,] 0.61080837 0.6437033 0.8239138 0.8515289 0.8579575 0.8858618 0.8970477 #>  [601,] 0.42810590 0.4840751 0.5547930 0.5941687 0.6468280 0.6503266 0.6786053 #>  [602,] 0.75734933 0.8359095 0.8621293 0.8892553 1.0036065 1.0220619 1.0341512 #>  [603,] 0.33194133 0.4390823 0.5142644 0.5246958 0.5371209 0.5924642 0.6076156 #>  [604,] 0.35005205 0.5042339 0.5851365 0.6014279 0.6778602 0.6832954 0.7194450 #>  [605,] 0.58631958 0.7011057 0.7133602 0.7140281 0.7304903 0.7913458 0.8065874 #>  [606,] 0.35693126 0.4758364 0.4855275 0.5165640 0.5534744 0.5652265 0.5785209 #>  [607,] 0.33402327 0.3464128 0.4882385 0.4991503 0.5688758 0.6882857 0.7094866 #>  [608,] 0.68014551 0.7796754 1.0083438 1.0134183 1.0373805 1.0799154 1.1043739 #>  [609,] 0.61659766 0.6700545 0.6748007 0.8019752 0.8034199 0.8052899 0.8076963 #>  [610,] 0.75628496 0.9300235 0.9356196 0.9854565 0.9867142 1.0350879 1.0450867 #>  [611,] 0.30182090 0.6412445 0.6762218 0.7456638 0.8059456 0.8382252 0.8800025 #>  [612,] 0.19781634 0.3693023 0.5049697 0.5125122 0.5126482 0.5134707 0.5231141 #>  [613,] 1.11103741 1.1243815 1.2427253 1.3327939 1.3873190 1.4263606 1.4356633 #>  [614,] 0.65430105 0.7090011 0.7821943 0.7830770 0.7949184 0.8327096 0.8971017 #>  [615,] 1.16085181 1.2859226 1.3526999 1.5955760 1.6109844 1.6332728 1.6563566 #>  [616,] 0.38941890 0.4369691 0.4423559 0.4501769 0.4776339 0.5766717 0.5818154 #>  [617,] 0.44353495 0.4887455 0.5184546 0.5484931 0.5603051 0.5654712 0.5731456 #>  [618,] 0.37347159 0.4060493 0.6681154 0.6917392 0.7569415 0.8130419 0.8267837 #>  [619,] 0.33704530 0.4303420 0.4497023 0.4685197 0.5818527 0.6229340 0.7207835 #>  [620,] 0.48688762 0.6054965 0.6092661 0.7047627 0.7446502 0.7838449 0.8227845 #>  [621,] 0.41673703 0.4268768 0.4798343 0.5300798 0.5462977 0.5646419 0.6556597 #>  [622,] 0.40517404 0.4575139 0.6930866 0.7210628 0.7251965 0.7387124 0.7868618 #>  [623,] 0.38258829 0.4731610 0.5569863 0.6157051 0.6252131 0.6478287 0.6604803 #>  [624,] 0.58770085 0.6187128 0.6947591 0.6950184 0.7045991 0.7217612 0.7796754 #>  [625,] 0.39284474 0.6933015 0.8586996 0.8749933 0.9644550 1.0213235 1.0611433 #>  [626,] 0.52240618 0.6043040 0.6452288 0.6933099 0.8085487 0.8203647 0.8754795 #>  [627,] 0.38124697 0.5285796 0.5662645 0.6465648 0.6913787 0.6913790 0.7277080 #>  [628,] 0.29276087 0.5224062 0.5618018 0.6918037 0.7569125 0.7779511 0.8019763 #>  [629,] 0.35822829 0.4788052 0.4882385 0.5720158 0.5805749 0.6948244 0.7154066 #>  [630,] 0.28973643 0.3741200 0.4546856 0.4703700 0.5332662 0.5412440 0.5534393 #>  [631,] 0.36043811 0.5863196 0.6166146 0.6964786 0.7153669 0.7249852 0.7456496 #>  [632,] 0.56885825 0.5793379 0.5870513 0.6847814 0.7078320 0.7168971 0.7217780 #>  [633,] 0.23394394 0.2897364 0.4008743 0.5261272 0.5704249 0.6020420 0.6054547 #>  [634,] 0.70065121 0.7332669 0.7438053 0.8209904 0.8607592 0.8812561 0.9160570 #>  [635,] 0.45663568 0.4993909 0.5168119 0.5888597 0.6414985 0.6428881 0.6480470 #>  [636,] 0.25174739 0.5628008 0.6683239 0.7042280 0.7507016 0.8120287 0.8629716 #>  [637,] 0.52431506 0.8462950 0.8556250 0.8844199 0.9179171 0.9784026 1.0083105 #>  [638,] 0.54279192 0.6317799 0.6812063 0.7363367 0.8187412 0.8359095 0.8441111 #>  [639,] 0.25412577 0.4885882 0.5103241 0.5320953 0.5772348 0.6050261 0.6340830 #>  [640,] 0.42086663 0.4339720 0.4515892 0.4608961 0.4993909 0.5031950 0.5054139 #>  [641,] 0.60609586 0.6571765 0.6880096 0.7103708 0.7152187 0.7239493 0.7395066 #>  [642,] 0.92658774 1.1198464 1.1418314 1.1727680 1.3286506 1.3550099 1.4614772 #>  [643,] 0.36634528 0.3858718 0.4736195 0.4978277 0.5854625 0.6658579 0.6687472 #>  [644,] 0.66164744 0.8528987 0.8680384 0.8805055 0.9147241 0.9345116 0.9602465 #>  [645,] 0.45799933 0.4757283 0.4788052 0.5569863 0.5619245 0.6270832 0.7448518 #>  [646,] 0.66297591 0.6812063 0.7722963 0.9831027 1.0036065 1.0342122 1.0733090 #>  [647,] 0.34148306 0.4550514 0.5049729 0.5311704 0.5612501 0.6435010 0.6442239 #>  [648,] 0.32956002 0.4488782 0.4599426 0.4710589 0.6576819 0.6880245 0.6885462 #>  [649,] 0.88677453 0.9134603 0.9140566 0.9419955 0.9779157 1.1620484 1.2224709 #>  [650,] 0.64174675 0.6595560 0.6728136 0.7282510 0.7297418 0.7498807 0.7915471 #>  [651,] 0.38287441 0.4759996 0.5405602 0.6758481 0.7408762 0.7970889 0.9203363 #>  [652,] 0.22123491 0.2589094 0.3983924 0.4373618 0.4510537 0.4656619 0.5003712 #>  [653,] 0.66478370 1.1009156 1.1142933 1.1206992 1.1564630 1.2080584 1.2118634 #>  [654,] 0.28851935 0.4479613 0.5022706 0.5099924 0.6336428 0.7175314 0.7450791 #>  [655,] 0.26085680 0.3121599 0.3277264 0.3641150 0.3960281 0.4142606 0.4520506 #>  [656,] 0.24012601 0.3429393 0.3608692 0.4197467 0.4502519 0.4709967 0.4831061 #>  [657,] 1.14394853 1.1478046 1.2508148 1.2728986 1.3873491 1.3940187 1.4076489 #>  [658,] 0.73218764 0.9131417 0.9576464 1.1022390 1.2016048 1.2294056 1.2593992 #>  [659,] 0.59942135 0.7333890 0.7489757 0.7624862 0.8017545 0.8098474 0.8100819 #>  [660,] 0.56145841 0.6002499 0.6186135 0.6469190 0.7218695 0.7858630 0.8358559 #>  [661,] 0.62866194 0.6355147 0.8187250 0.8504182 0.8796054 0.8796343 0.8873856 #>  [662,] 0.71446560 0.9643287 1.0446029 1.0533370 1.1020664 1.1439485 1.2627950 #>  [663,] 0.33356608 0.4067639 0.4468093 0.4595977 0.4811096 0.5049732 0.5314677 #>  [664,] 0.34998465 0.4492794 0.5677012 0.6092661 0.6555657 0.6608266 0.6680522 #>  [665,] 0.48359199 0.4958289 0.6119267 0.6455267 0.6566531 0.6743180 0.6832727 #>  [666,] 0.66106908 0.9239632 0.9755952 1.0259270 1.0284271 1.0455506 1.0461768 #>  [667,] 0.34329496 0.3547318 0.4491735 0.6157474 0.7113231 0.7210238 0.7565083 #>  [668,] 0.48626450 0.6887247 0.7824257 0.8457980 0.9576185 0.9847045 1.0068689 #>  [669,] 0.34040762 0.6502751 0.7221109 0.7603506 0.7637373 0.7804353 0.8364945 #>  [670,] 0.36240687 0.4329632 0.5166781 0.5823979 0.5898221 0.6420975 0.7214171 #>  [671,] 0.64209755 0.6534237 0.6655560 0.7459050 0.8070511 0.8130369 0.8187250 #>  [672,] 0.17318192 0.4553944 0.4773304 0.5518361 0.5964734 0.6204008 0.6292526 #>  [673,] 0.33442966 0.4152467 0.4493383 0.4510537 0.4597303 0.5780735 0.6118547 #>  [674,] 0.34155495 0.3637277 0.3835472 0.4558231 0.4730177 0.4997876 0.5042114 #>  [675,] 0.31630371 0.3989766 0.5586184 0.5779398 0.5808416 0.5841539 0.6066485 #>  [676,] 0.11131967 0.2919546 0.4170147 0.4405195 0.4475242 0.4644801 0.4765848 #>  [677,] 0.56690154 0.6542839 0.7602277 0.7725507 0.7965212 0.8031524 0.8165751 #>  [678,] 0.40517404 0.4675344 0.6912767 0.8071477 0.8463139 0.8829152 0.8855257 #>  [679,] 0.32270638 0.3614825 0.4518970 0.4565264 0.5158890 0.5217519 0.5573268 #>  [680,] 0.46688452 0.5167508 0.5228851 0.5342897 0.5926795 0.5968356 0.6075152 #>  [681,] 0.36293547 0.4924199 0.4944697 0.5271496 0.5293862 0.5826599 0.5841860 #>  [682,] 0.54060538 0.7314902 0.7461115 0.7830770 0.8759649 0.8784282 0.9291199 #>  [683,] 0.32669064 0.6612046 0.7604295 0.8185375 0.8191296 0.8510780 0.8704606 #>  [684,] 0.43963382 0.5049732 0.5457092 0.6039191 0.6261896 0.6589133 0.7060820 #>  [685,] 0.47694982 0.5290640 0.7646844 0.8459208 0.8956212 0.9304820 0.9355625 #>  [686,] 0.38645058 0.4554910 0.5136182 0.5317034 0.6530180 0.7270387 0.7544350 #>  [687,] 0.35352044 0.4533781 0.5536697 0.5850655 0.5935717 0.5998461 0.6267351 #>  [688,] 0.16005995 0.2759465 0.2852025 0.2963973 0.3850855 0.4040801 0.4106404 #>  [689,] 0.72751468 0.7394909 0.8209923 0.8321165 0.8553546 0.8564536 0.8759223 #>  [690,] 0.84255293 0.9266826 1.0670871 1.2097252 1.2309256 1.2572768 1.2859596 #>  [691,] 0.61080837 0.6543010 0.9088477 0.9112849 0.9266826 0.9416712 0.9784726 #>  [692,] 0.29889180 0.3962974 0.4501769 0.4696115 0.4709134 0.5035998 0.5104001 #>  [693,] 0.53789777 0.7237297 0.7847008 0.8212229 0.8616711 0.8622247 0.8704606 #>  [694,] 0.47181807 0.6117691 0.7275827 0.7593611 0.7652019 0.7745349 0.7901431 #>  [695,] 0.35117481 0.3714768 0.4269992 0.4711332 0.4997697 0.5585444 0.5751053 #>  [696,] 0.30072160 0.3166425 0.3947316 0.4205612 0.4261663 0.4293017 0.4338313 #>  [697,] 0.68343095 0.7027524 0.7172097 0.7984283 0.8341679 0.8410788 0.8848979 #>  [698,] 0.12538428 0.2506452 0.3831456 0.3982250 0.4017587 0.4223222 0.4958255 #>  [699,] 0.35479316 0.4986226 0.5043588 0.5313647 0.6459516 0.7200898 0.7308514 #>  [700,] 0.54539001 0.5671212 0.5852646 0.5853492 0.6141009 0.6343111 0.6699257 #>  [701,] 0.45736723 0.5903262 0.7472407 0.7505180 0.7827151 0.8057490 0.8142854 #>  [702,] 0.34954486 0.3505958 0.4758364 0.4890031 0.4890486 0.4993365 0.5293741 #>  [703,] 0.51610225 1.0267961 1.0959316 1.1320192 1.3344945 1.4097979 1.4244303 #>  [704,] 0.55863325 0.8814798 0.9797329 0.9823797 1.0197228 1.0890111 1.1004447 #>  [705,] 0.35774466 0.4032576 0.4684372 0.4687094 0.4692074 0.4992121 0.5502237 #>  [706,] 0.20888352 0.3067290 0.3962974 0.5334679 0.5345975 0.5818154 0.5866596 #>  [707,] 0.33263549 0.4339157 0.5919427 0.5975394 0.6445842 0.6627853 0.6986410 #>  [708,] 0.37565769 0.5452041 0.5473182 0.5700936 0.6286015 0.6322190 0.6706868 #>  [709,] 0.37901107 0.4707106 0.4787234 0.4894403 0.5386406 0.5530942 0.5803009 #>  [710,] 0.14669973 0.2787914 0.4357955 0.4426173 0.5324888 0.5748610 0.6180380 #>  [711,] 0.49032379 0.5042372 0.5282224 0.5506099 0.5533816 0.5672505 0.6115304 #>  [712,] 0.34715580 0.3693359 0.5220574 0.5568382 0.5795153 0.7027524 0.7446502 #>  [713,] 0.45437109 0.5187645 0.5207228 0.5407477 0.5942655 0.6559608 0.6607864 #>  [714,] 0.26202615 0.4752905 0.4900548 0.5389260 0.5802730 0.5915257 0.6031179 #>  [715,] 0.32862509 0.5573268 0.5909023 0.5984288 0.6345245 0.6761820 0.7425614 #>  [716,] 1.02433032 1.0286185 1.3176880 1.5036463 1.5327795 1.6170477 1.6534214 #>  [717,] 0.50635260 0.6863917 0.7760290 0.8401606 0.8544909 0.8860551 1.0409387 #>  [718,] 0.32543437 0.3947090 0.3994445 0.5791632 0.6268271 0.6676544 0.6941255 #>  [719,] 0.25074555 0.4716839 0.5934938 0.7438635 0.8711604 0.8877085 0.9479475 #>  [720,] 0.33375488 0.5161639 0.5344756 0.5654631 0.5841860 0.6113934 0.6502751 #>  [721,] 0.52528065 0.6567433 0.6806852 0.7202064 0.7506226 0.8184130 0.8643049 #>  [722,] 0.47353190 0.5570418 0.6328771 1.1101781 1.1375539 1.1672308 1.2502036 #>  [723,] 0.26202615 0.4399604 0.4584128 0.4630024 0.4765231 0.4768761 0.4908760 #>  [724,] 0.45445774 0.6011990 0.7961897 0.8062714 0.8208983 0.8302785 0.8807189 #>  [725,] 0.53011055 0.5910516 0.6260463 0.7790400 0.8751965 0.8966681 0.9031294 #>  [726,] 0.72997800 0.8873856 0.9786215 1.1409917 1.1480994 1.1567272 1.1947779 #>  [727,] 0.44743584 0.5138600 0.5619245 0.7154066 0.7277129 0.7900411 0.8194933 #>  [728,] 0.52797333 0.5973966 0.6093643 0.7074128 0.7755693 0.8231754 0.8415867 #>  [729,] 0.40977967 0.4796084 0.5276353 0.5484931 0.5759288 0.6546835 0.6992192 #>  [730,] 0.35065148 0.4662624 0.5083395 0.5452345 0.5765576 0.6294779 0.6437033 #>  [731,] 0.31164690 0.3465442 0.3692782 0.3971645 0.3982250 0.4322265 0.4408097 #>  [732,] 0.41974673 0.4573762 0.4741428 0.5130926 0.5506081 0.5559430 0.5682598 #>  [733,] 0.23960045 0.3231343 0.4142606 0.4307306 0.4516517 0.4708458 0.4768761 #>  [734,] 0.20668934 0.2204746 0.3352395 0.3552241 0.3692782 0.4017587 0.4837072 #>  [735,] 0.40604925 0.5772835 0.5871744 0.7115746 0.7379574 0.7826453 0.7971534 #>  [736,] 0.38889572 0.4677693 0.4843977 0.5536697 0.5846864 0.6243219 0.6490334 #>  [737,] 0.47752675 0.5530309 0.5581074 0.6595254 0.6926248 0.7199403 0.8012651 #>  [738,] 0.35250389 0.3755863 0.3931327 0.4087444 0.4408868 0.4457550 0.4489236 #>  [739,] 0.50823618 0.5647361 0.5791632 0.5981146 0.6185078 0.6224050 0.7008235 #>  [740,] 0.57615778 0.6107461 0.6300107 0.8809123 0.9191083 0.9838289 1.0757796 #>  [741,] 0.42295551 0.4263607 0.4597089 0.4651665 0.5079031 0.5708228 0.6315573 #>  [742,] 0.29569639 0.3370453 0.3773546 0.3883122 0.4692074 0.5069494 0.5603051 #>  [743,] 0.43053157 0.4444031 0.5043588 0.5107848 0.5748610 0.5845553 0.6213120 #>  [744,] 0.47631836 0.4888860 0.5042114 0.5897586 0.6199403 0.6267215 0.6363372 #>  [745,] 0.60043966 0.6600636 0.8608219 0.9534265 0.9968662 1.0249290 1.0752448 #>  [746,] 0.36618627 0.3849084 0.3876315 0.4573811 0.4583033 0.4792738 0.4872928 #>  [747,] 0.50635260 0.5456036 0.5959394 0.6901070 0.9303365 0.9326100 0.9362715 #>  [748,] 0.66297591 0.7124520 0.7373227 0.7515485 0.7730969 0.7893731 0.8215301 #>  [749,] 1.14780457 1.6038861 1.8427790 1.9416874 1.9693325 2.0760822 2.0910741 #>  [750,] 0.39695292 0.4444031 0.4611113 0.5279865 0.6027009 0.6323436 0.6546921 #>  [751,] 0.52045984 0.8425529 1.0905442 1.1022602 1.1422607 1.1599784 1.2385868 #>  [752,] 0.56514304 0.7646623 0.7864618 0.8056535 0.8064677 0.8099435 0.8292952 #>  [753,] 0.43160166 0.4962557 0.5111905 0.5796677 0.5931478 0.6608780 0.6750129 #>  [754,] 0.35223605 0.5361913 0.5683477 0.6095777 0.6110790 0.6117159 0.6456163 #>  [755,] 0.66164744 0.7342847 0.7698617 0.8366933 0.9201586 0.9338262 0.9637788 #>  [756,] 0.94725699 1.1891447 1.3003933 1.4143057 1.4376412 1.5155486 1.6426305 #>  [757,] 0.71754967 0.7903283 0.8224968 0.8620429 0.9027133 0.9107875 0.9494858 #>  [758,] 0.40917951 0.5975137 0.6568544 0.6947591 0.7792013 0.8059861 0.8423392 #>  [759,] 0.76292567 1.1601558 1.1844603 1.2223999 1.2355192 1.2621326 1.2788077 #>  [760,] 0.61074612 0.6227784 0.6319838 0.7613379 0.7655260 0.7840758 0.7997061 #>  [761,] 0.27138544 0.3593593 0.3756577 0.5547267 0.5722622 0.6039047 0.6336948 #>  [762,] 0.41601608 0.4262079 0.4863711 0.5306412 0.5341641 0.5389558 0.5780735 #>  [763,] 0.37505725 0.3783283 0.4389403 0.4426173 0.4457550 0.5106507 0.5499238 #>  [764,] 0.82216152 0.8777608 0.9803811 1.0854935 1.1054741 1.1261287 1.1391287 #>  [765,] 0.54205914 0.6933015 0.7207835 0.7806046 0.8362905 0.8498370 0.8642246 #>  [766,] 1.30797205 1.3096376 1.3186475 1.4244420 1.4557399 1.4739963 1.5201327 #>  [767,] 0.11940893 0.5525882 0.5744406 0.5921864 0.6151514 0.6451292 0.6464493 #>  [768,] 0.49097643 0.5776895 0.6003493 0.6491442 0.7279610 0.7851036 0.8484805 #>  [769,] 0.76658008 0.8331004 0.8411093 0.8521470 0.8621548 0.8661589 0.8811937 #>  [770,] 0.23960045 0.3162256 0.4101305 0.4399604 0.5207913 0.5219402 0.5379774 #>  [771,] 0.35935930 0.4333277 0.4565932 0.4834678 0.5158029 0.5452041 0.6261052 #>  [772,] 0.37689287 0.4770330 0.7522038 0.7636929 0.8536118 0.8807189 0.9742971 #>  [773,] 0.45572107 0.8277994 0.8563715 0.9333638 0.9915184 0.9987359 1.0148538 #>  [774,] 0.26711949 0.3417279 0.4480716 0.4814961 0.5423040 0.5762949 0.7686097 #>  [775,] 0.45453513 0.6045534 0.6267140 0.6597671 0.7095416 0.7620320 0.7922083 #>  [776,] 0.30574429 0.4288310 0.5429100 0.6269027 0.6721443 0.6732248 0.6761699 #>  [777,] 0.48626450 0.5934268 0.7119856 0.8024217 0.8263012 0.8447904 0.8683187 #>  [778,] 0.58627170 0.7455531 0.7848867 0.8061131 0.8142133 0.8556844 0.9675981 #>  [779,] 0.45549100 0.4693793 0.4949200 0.6013482 0.6262245 0.6912767 0.7079499 #>  [780,] 0.27752957 0.3913380 0.4493383 0.4863711 0.4984892 0.5005513 0.5047864 #>  [781,] 1.01240504 1.0842512 1.1865323 1.2009058 1.2029245 1.2630841 1.2975388 #>  [782,] 0.34042616 0.3897748 0.4110703 0.5165421 0.5221900 0.5621799 0.6023652 #>  [783,] 0.21845515 0.3747031 0.4325758 0.4741816 0.4821145 0.5874376 0.5879229 #>  [784,] 0.21845515 0.3121599 0.3657443 0.3951564 0.4367433 0.5411897 0.5780953 #>  [785,] 0.43464182 0.5222593 0.6861310 0.6971393 0.7525811 0.8890549 0.9045178 #>  [786,] 0.22218065 0.3213256 0.6166349 0.6286015 0.6672124 0.7085727 0.7784858 #>  [787,] 0.34042616 0.3533206 0.4667926 0.5255391 0.6302666 0.6955831 0.7403501 #>  [788,] 0.44950410 0.4497899 0.4518392 0.4974701 0.5228851 0.5787882 0.5993098 #>  [789,] 0.40262400 0.4118724 0.4915695 0.5691353 0.5719801 0.5894445 0.5945117 #>  [790,] 0.31096021 0.3245218 0.3321369 0.3830392 0.4363952 0.4724146 0.4876246 #>  [791,] 0.72542166 0.8213870 0.8966681 1.0124895 1.0738002 1.1702486 1.1708256 #>  [792,] 0.33116647 0.4207051 0.4345261 0.5404123 0.5413857 0.5669541 0.6217337 #>  [793,] 0.27752957 0.2897663 0.2952101 0.3532739 0.3573544 0.4138856 0.4698365 #>  [794,] 0.33300185 0.3973417 0.4570082 0.4889477 0.5004074 0.5395369 0.5425401 #>  [795,] 0.41703370 0.5672420 0.6953189 0.8589529 0.8708676 0.8828636 0.9012297 #>  [796,] 0.26314586 0.3008637 0.3106681 0.3415550 0.4684444 0.4770600 0.5115793 #>  [797,] 0.50952156 0.5614584 0.5834634 0.6182936 0.6822003 0.7237330 0.7294409 #>  [798,] 0.77871976 0.8867745 0.9966640 1.0166002 1.0685822 1.0862960 1.1061301 #>  [799,] 0.35352044 0.3888957 0.5420740 0.5504663 0.5996534 0.6135531 0.6573349 #>  [800,] 0.57960198 0.8116333 0.9280811 0.9849208 1.1029505 1.1457090 1.1467080 #>  [801,] 0.32444853 0.3471354 0.4419613 0.4561043 0.4610676 0.4756494 0.4985506 #>  [802,] 0.35852339 0.4263607 0.4501696 0.5036597 0.6829681 0.6945506 0.7397598 #>  [803,] 0.51610225 0.7456638 0.9104393 1.0046194 1.0561417 1.1022630 1.1054157 #>  [804,] 0.76784621 0.8185375 0.9267801 0.9956467 1.0370397 1.2436124 1.2737303 #>  [805,] 0.44059220 0.5839564 0.6095878 0.6395483 0.6588329 0.6668508 0.6669111 #>  [806,] 0.33290079 0.5193202 0.5221833 0.5366964 0.5837792 0.5887753 0.6184469 #>  [807,] 0.26314586 0.3624926 0.4364114 0.4959404 0.4980540 0.4997876 0.5316095 #>  [808,] 0.43217442 0.5934938 0.6682075 0.7869955 0.7905780 0.9970243 1.0038611 #>  [809,] 1.16137639 1.2833851 1.3552978 1.5082891 1.6002515 1.7377789 1.7802452 #>  [810,] 0.35569337 0.4041247 0.4827117 0.4993365 0.5187645 0.5209862 0.5440199 #>  [811,] 0.21472878 0.4199550 0.4447574 0.5128345 0.6052335 0.6152366 0.6508003 #>  [812,] 0.28440992 0.3864506 0.4816355 0.6013482 0.6167704 0.6319032 0.6340830 #>  [813,] 0.70403357 0.9088285 0.9344096 0.9434363 0.9481525 0.9686601 0.9941508 #>  [814,] 1.10927189 1.2595713 1.2709843 1.3773606 1.3937384 1.3938095 1.4948830 #>  [815,] 0.36555032 0.4293017 0.4488711 0.4987424 0.5095843 0.5597723 0.5709205 #>  [816,] 0.56473612 0.6027353 0.6236082 0.6676544 0.6732865 0.8516135 0.8527875 #>  [817,] 0.45339887 0.4835920 0.5448988 0.5586989 0.7127515 0.7260867 0.7858630 #>  [818,] 0.66439847 0.8182388 0.9010624 0.9197660 0.9299567 0.9463128 0.9464726 #>  [819,] 0.33116647 0.3525039 0.3750573 0.4354041 0.4982236 0.5135838 0.5290668 #>  [820,] 0.71446560 0.8777564 0.9746028 0.9913176 1.0798188 1.1143837 1.1963472 #>  [821,] 0.14644027 0.3109602 0.3495367 0.3526669 0.3532739 0.3765656 0.4218332 #>  [822,] 0.15233236 0.3831456 0.4298587 0.4731351 0.5403333 0.5661614 0.5728284 #>  [823,] 0.58239787 0.7289464 0.7899618 0.8130369 0.8198325 0.8214114 0.8635750 #>  [824,] 0.62994871 0.7121532 0.8768730 0.9413705 0.9629408 1.0152308 1.1142352 #>  [825,] 0.57274545 0.7940196 0.8173817 0.8281173 0.9179836 0.9211146 0.9610544 #>  [826,] 0.24157650 0.3226832 0.3747031 0.4367433 0.4722681 0.4738210 0.4786221 #>  [827,] 0.30182090 0.6118515 0.7849604 0.8406419 0.8407028 0.8462045 0.8906206 #>  [828,] 0.34172795 0.5005688 0.5569271 0.5660536 0.6011946 0.6173882 0.6207600 #>  [829,] 0.95925206 1.3367526 1.4134495 1.4266580 1.4488678 1.5053736 1.5656336 #>  [830,] 0.14669973 0.3783283 0.3901603 0.4553270 0.5845553 0.6058406 0.6131547 #>  [831,] 0.53804149 0.5605417 0.6525015 0.6687857 0.7095232 0.7520920 0.8004521 #>  [832,] 0.34550017 0.4012769 0.4759318 0.5598117 0.5834369 0.5841545 0.6259169 #>  [833,] 0.16824860 0.4958255 0.5343016 0.5661614 0.5754340 0.6228073 0.6620431 #>  [834,] 0.27230569 0.3661863 0.3703916 0.3796669 0.3963773 0.3987328 0.4109428 #>  [835,] 0.76002877 0.8322685 0.9894998 1.2930661 1.3584155 1.3612673 1.3776066 #>  [836,] 0.24049238 0.5870513 0.7183615 0.7199403 0.7563848 0.7906669 0.9041896 #>  [837,] 0.46844439 0.5148053 0.5341162 0.5570542 0.5576495 0.5746542 0.5807157 #>  [838,] 0.61547163 0.7361889 0.7438053 0.9040108 0.9288750 0.9411601 0.9432134 #>  [839,] 0.71572490 0.7363154 0.7755693 0.9810488 1.0028669 1.0251768 1.0374264 #>  [840,] 0.24012601 0.3033335 0.3537112 0.3920492 0.4475242 0.4866599 0.5029787 #>  [841,] 0.40180906 0.5467499 0.6659502 0.7118689 0.7160324 0.7170773 0.7361901 #>  [842,] 0.47115533 0.5282224 0.5380951 0.5840682 0.6589651 0.6740432 0.6791516 #>  [843,] 0.63001065 0.7936587 0.8936931 0.9466404 1.0086060 1.1030572 1.1301727 #>  [844,] 0.39337545 0.5899411 0.6485464 0.7574435 0.7779471 0.8100517 0.8635750 #>  [845,] 0.44278904 0.4978277 0.5024221 0.5177153 0.5238067 0.5352654 0.5497003 #>  [846,] 0.75460822 1.1162043 1.1209585 1.2100491 1.3018919 1.3113957 1.3299731 #>  [847,] 0.20184663 0.3003824 0.4497899 0.5837792 0.5865362 0.6109501 0.6113103 #>  [848,] 0.64919255 0.8345369 0.8603771 0.9169258 0.9355625 1.0967533 1.1375266 #>  [849,] 0.19484835 0.3702368 0.3830447 0.3838986 0.4317216 0.4376664 0.4600776 #>  [850,] 0.28242921 0.3380145 0.4520400 0.5971396 0.6046006 0.6394313 0.6563004 #>  [851,] 0.40778994 0.4091795 0.7182944 0.8115553 0.8323121 0.8492034 0.8562963 #>  [852,] 0.44066863 0.4435350 0.4492541 0.4608961 0.4766352 0.5125007 0.5127298 #>  [853,] 0.40503205 0.5851365 0.6034721 0.6103412 0.6728448 0.6740432 0.7029357 #>  [854,] 0.51262245 0.5870152 0.5897586 0.6377386 0.7180589 0.7785425 0.8273197 #>  [855,] 0.34329496 0.4394551 0.5569271 0.5590979 0.6313286 0.6698343 0.7432620 #>  [856,] 0.57055542 0.8519251 1.0243303 1.0813860 1.4919775 1.5085276 1.5340665 #>  [857,] 0.34226539 0.3548574 0.3838986 0.4214968 0.5029903 0.5165421 0.5330666 #>  [858,] 0.49271844 0.5472957 0.6027353 0.6268271 0.6353335 0.7008235 0.7388877 #>  [859,] 0.75136221 0.9455791 0.9464726 1.1567508 1.2555792 1.2561584 1.2815779 #>  [860,] 0.48745778 0.5318891 0.6182936 0.6608780 0.6869719 0.7033212 0.7370191 #>  [861,] 0.32832891 0.3624926 0.3865429 0.5455971 0.6094534 0.6258549 0.6567186 #>  [862,] 0.30750399 0.3226832 0.4307908 0.4508884 0.4520506 0.4616882 0.4657123 #>  [863,] 0.41683776 0.5403055 0.5456036 0.6863917 0.6983057 0.7204711 0.8022711 #>  [864,] 0.24049238 0.5530309 0.6006815 0.6612791 0.6847814 0.7218372 0.9166190 #>  [865,] 0.19200385 0.2919546 0.3429393 0.3537112 0.5008478 0.5074334 0.5190257 #>  [866,] 0.38666463 0.4312964 0.4513298 0.5072282 0.5180780 0.5357130 0.5559795 #>  [867,] 0.37091313 0.4741816 0.5221833 0.5545292 0.5563664 0.5825139 0.6037188 #>  [868,] 0.46908262 0.5043570 0.5342897 0.5411612 0.6318017 0.7345150 0.7541224 #>  [869,] 0.85684074 0.8654049 0.8804955 0.9058943 0.9491224 0.9716836 0.9835710 #>  [870,] 0.63034356 0.6595254 0.7121853 0.9210040 0.9926003 1.0069212 1.0417054 #>  [871,] 0.29869490 0.3665855 0.5895732 0.6103412 0.6108661 0.6151418 0.6267215 #>  [872,] 0.26337288 0.4333595 0.4892146 0.5306412 0.5430692 0.5457092 0.5685390 #>  [873,] 0.50823618 0.5155998 0.7098535 0.7334433 0.8251752 0.8327274 0.8500911 #>  [874,] 0.29878435 0.3989766 0.4266498 0.4855275 0.5751053 0.5814230 0.5988339 #>  [875,] 0.29122779 0.3414831 0.4236301 0.5131387 0.5181273 0.5685564 0.6180097 #>  [876,] 0.68882763 0.7269549 0.7279610 0.8237203 0.8870050 0.9534265 0.9646766 #>  [877,] 0.36599172 0.3702227 0.3733315 0.4508884 0.4713784 0.5504663 0.5514610 #>  [878,] 0.51417490 0.5421087 0.5542532 0.5846864 0.6267351 0.6512617 0.7271366 #>  [879,] 0.30281588 0.4751087 0.4814347 0.5453900 0.5917332 0.6027009 0.6193931 #>  [880,] 0.39860713 0.4940733 0.5414637 0.5654190 0.5654631 0.5695065 0.5921115 #>  [881,] 0.47170494 0.5339224 0.6333174 0.8356014 0.8513966 0.8768730 0.8902373 #>  [882,] 0.22955788 0.2295866 0.3335661 0.4144384 0.4212690 0.4449730 0.5551526 #>  [883,] 0.22766851 0.4396996 0.4424427 0.4681658 0.4716342 0.5296945 0.5776378 #>  [884,] 0.55526788 0.6187128 0.6526257 0.6568544 0.6700545 0.7005156 0.7951226 #>  [885,] 0.77043081 0.7891132 0.8423980 0.9730631 0.9834802 1.0345704 1.0997228 #>  [886,] 0.31066809 0.3184818 0.4069020 0.4542226 0.4730177 0.5329278 0.5341162 #>  [887,] 0.40412472 0.4639756 0.4890486 0.4922907 0.5447677 0.5654476 0.5765576 #>  [888,] 0.41807414 0.5534742 0.7487783 0.7620320 0.7718291 0.7918954 0.7973109 #>  [889,] 0.38672767 0.4272115 0.4333595 0.5222349 0.5389558 0.5400124 0.5500092 #>  [890,] 0.29276087 0.5157372 0.6043040 0.7372167 0.8139813 0.8226545 0.8431098 #>  [891,] 0.20386375 0.2521463 0.4761596 0.4946957 0.5404303 0.5963738 0.6426769 #>  [892,] 0.92630687 1.1684450 1.4102346 1.4348467 1.4440150 1.4469043 1.5028845 #>  [893,] 0.48674489 0.6396652 0.6971069 0.7079778 0.8517127 0.8918529 0.9071284 #>  [894,] 0.72213147 0.8645228 0.8805288 0.9050049 0.9131692 0.9148125 0.9165667 #>  [895,] 0.66120457 0.7678462 0.7720966 0.9775638 1.1237605 1.1904550 1.2243181 #>  [896,] 0.83916131 0.8645228 0.9394858 1.2287851 1.3550099 1.4421083 1.4604315 #>  [897,] 0.35853453 0.3668317 0.3963896 0.4408868 0.4490219 0.4518970 0.4911514 #>  [898,] 0.32291723 0.3315103 0.3319413 0.4090904 0.4629466 0.5934038 0.6035091 #>  [899,] 0.23842769 0.3494797 0.3755863 0.3963896 0.4255804 0.4463518 0.5135838 #>  [900,] 0.49641060 0.5158029 0.5772252 0.5827236 0.6526257 0.6944126 0.6950184 #>  [901,] 0.55018191 0.7170773 0.8069348 0.9131417 0.9184734 0.9366011 0.9470807 #>  [902,] 0.48105557 0.8430040 0.8863310 0.9244996 0.9988390 1.0035136 1.0888905 #>  [903,] 0.28851935 0.3047962 0.4889978 0.5497547 0.6844864 0.7932388 0.8007578 #>  [904,] 0.53860920 0.6895357 0.7704833 0.8116862 0.8325388 0.8661887 0.8677415 #>  [905,] 0.33720097 0.6073710 0.6752892 0.7433016 0.7637077 0.7855943 0.7961897 #>  [906,] 0.20550343 0.3162256 0.3231343 0.4765917 0.5016970 0.5240756 0.5242504 #>  [907,] 0.52947069 0.5818527 0.6799997 0.7492848 0.7519298 0.7574435 0.7635241 #>  [908,] 0.58608702 0.8652922 0.8711604 0.8814015 0.9142923 0.9985972 1.0040368 #>  [909,] 0.57704765 0.6217122 0.6941189 0.9046879 0.9101487 0.9483313 0.9782553 #>  [910,] 0.40180906 0.5501819 0.6862257 0.6999846 0.7212574 0.7288690 0.7676711 #>  [911,] 0.32778020 0.6110790 0.6400764 0.6789707 0.6961660 0.7094063 0.7154041 #>  [912,] 0.35623223 0.4283759 0.5181273 0.5330261 0.5758649 0.5766391 0.6054547 #>  [913,] 0.86228610 0.9093107 1.0241086 1.0487301 1.1730124 1.1963472 1.2320405 #>  [914,] 0.44138360 0.6941189 0.6971731 0.7590519 0.8381876 0.8414685 0.8560164 #>  [915,] 0.61727290 0.6492930 0.7107481 0.7115891 0.7376989 0.7997061 0.8383983 #>  [916,] 0.57951533 0.6361834 0.7817506 0.8348247 0.8926854 0.8961640 0.9057307 #>  [917,] 0.29142265 0.7594736 0.8224968 0.8334246 0.8632394 0.9266422 0.9408426 #>  [918,] 0.63287706 0.6846241 0.8225368 0.9670616 1.1380926 1.2644008 1.4143197 #>  [919,] 0.60024993 0.6360042 0.7608358 0.7738620 0.8100819 0.8136884 0.8429035 #>  [920,] 0.34846949 0.5590979 0.6011946 0.6446272 0.6918727 0.7168554 0.7934441 #>  [921,] 0.51318954 0.5383672 0.7098535 0.7109050 0.7153044 0.7297890 0.7365039 #>  [922,] 0.62585597 0.7102808 0.8279595 0.8410550 0.9667986 0.9738688 0.9760638 #>  [923,] 0.25214626 0.2894980 0.4664921 0.5357130 0.5529807 0.5602011 0.5916762 #>  [924,] 0.40501106 0.4214968 0.5052356 0.5325935 0.5619761 0.5677012 0.5765305 #>  [925,] 0.32132559 0.4834678 0.5155723 0.5473182 0.5722622 0.6112078 0.6478335 #>  [926,] 0.53170338 0.7569125 0.8139813 0.8168034 0.8345459 0.8475698 0.8776862 #>  [927,] 0.27879142 0.3901603 0.4028479 0.4158157 0.4899760 0.5300574 0.5720617 #>  [928,] 0.47019257 0.4707106 0.4857358 0.5074334 0.5781695 0.5960032 0.6078338 #>  [929,] 0.36651583 0.3866646 0.5012718 0.5131387 0.5311704 0.5731855 0.6103436 #>  [930,] 0.45677254 0.5501971 0.6075152 0.6136652 0.6249506 0.6737893 0.6778467 #>  [931,] 0.35770762 0.4371782 0.5688758 0.5804446 0.6143706 0.6422392 0.6971069 #>  [932,] 0.61405593 1.0862960 1.0873228 1.1620484 1.2114551 1.2664690 1.3771769 #>  [933,] 0.16992806 0.3275517 0.3362537 0.3531328 0.4626128 0.5551526 0.5576495 #>  [934,] 0.29521010 0.3771291 0.3796977 0.4247537 0.4267636 0.4424427 0.4427890 #>  [935,] 0.16824860 0.5240899 0.5765566 0.5870448 0.5921115 0.6160924 0.6271494 #>  [936,] 0.24484892 0.4534269 0.4597089 0.6136652 0.6162311 0.6739171 0.6742549 #>  [937,] 0.35473182 0.4394551 0.5982677 0.6317799 0.7091851 0.7573493 0.7706572 #>  [938,] 0.34389771 0.3730292 0.4761306 0.4899760 0.5114681 0.5290308 0.5324888 #>  [939,] 0.40111986 0.4599426 0.5317511 0.6817764 0.7078336 0.7079499 0.7822935 #>  [940,] 0.51165768 0.5723981 0.5839564 0.6249364 0.6510966 0.6891600 0.7598562 #>  [941,] 0.26706143 0.3674355 0.4268768 0.4329526 0.4403338 0.4632408 0.5366964 #>  [942,] 0.82524433 0.8481422 0.8642787 0.8796054 0.9386571 0.9577445 0.9854139 #>  [943,] 0.41862677 0.4329526 0.4798343 0.5313529 0.6161980 0.6683239 0.6884613 #>  [944,] 0.33184275 0.3639448 0.3728496 0.4249845 0.4262079 0.5149787 0.6483288 #>  [945,] 0.67480073 0.6982753 0.7107481 0.7840758 0.8343006 0.9174380 0.9417480 #>  [946,] 0.27390118 0.3471558 0.5246582 0.5666508 0.7172097 0.7239493 0.7817506 #>  [947,] 1.65936247 1.7255408 1.8943405 1.9096007 1.9672099 1.9679604 2.0199665 #>  [948,] 0.41875004 0.5114681 0.5281373 0.6199403 0.6277187 0.7168522 0.7223796 #>  [949,] 0.33300185 0.4515892 0.4578096 0.5468248 0.5931289 0.6025360 0.6072727 #>  [950,] 0.21374845 0.7023600 0.7131670 0.7621527 1.0695233 1.0826475 1.1905860 #>  [951,] 1.14574483 1.1537377 1.2407244 1.3347764 1.3528933 1.4244303 1.4760178 #>  [952,] 0.30127508 0.3318427 0.4404673 0.4565016 0.5207309 0.5381345 0.5500092 #>  [953,] 1.59447438 1.7938527 1.8327666 1.9184266 1.9509554 2.0098241 2.0136447 #>  [954,] 0.45517425 0.4679749 0.5380466 0.6844643 0.7220621 0.7698489 0.7869955 #>  [955,] 0.42249267 0.6600636 0.6772170 0.8140324 0.8338613 0.8364318 1.0932709 #>  [956,] 0.50280056 0.5506099 0.6082847 0.6136635 0.6194494 0.6621470 0.6682736 #>  [957,] 0.25564934 0.2929649 0.5152624 0.6213120 0.7342847 0.7385585 0.7878627 #>  [958,] 0.30194272 0.3166425 0.3577101 0.3763102 0.4032576 0.4251943 0.4747412 #>  [959,] 0.26956496 0.7066247 0.7244539 0.7277129 0.7409194 0.9277988 0.9367336 #>  [960,] 0.25382708 0.2988918 0.3067290 0.3245844 0.6018444 0.6566472 0.6602953 #>  [961,] 0.38124697 0.3970127 0.4668845 0.5373669 0.5411612 0.5993098 0.6344204 #>  [962,] 0.27390118 0.3693359 0.6361834 0.6363106 0.7848330 0.7984283 0.8219947 #>  [963,] 0.44927939 0.4868876 0.5841146 0.6195960 0.6846143 0.6929486 0.7288326 #>  [964,] 0.36555032 0.4182599 0.4915695 0.5231800 0.5452290 0.5502237 0.5607139 #>  [965,] 0.31325256 0.3605506 0.4518987 0.4716342 0.4928038 0.5271496 0.5495031 #>  [966,] 1.05138257 1.1606901 1.1789849 1.1835452 1.2242864 1.2689624 1.2708109 #>  [967,] 0.34998465 0.5787957 0.6669037 0.6846143 0.7047627 0.7094681 0.7414109 #>  [968,] 0.42393900 0.5405602 0.5909966 0.6628875 0.6955228 0.8194933 0.8345780 #>  [969,] 0.28391516 0.4136343 0.4597773 0.5181469 0.5537717 0.5651156 0.6035091 #>  [970,] 0.85684074 0.8848979 0.8860551 0.9751930 1.0879892 1.1442476 1.1731443 #>  [971,] 0.56346178 0.6644473 0.7254369 0.7466141 0.7608358 0.7811852 0.7980730 #>  [972,] 0.82524433 0.9265877 0.9359427 0.9633205 1.0196004 1.1069919 1.1295258 #>  [973,] 0.30281588 0.4136998 0.5140202 0.5687824 0.5862767 0.5882026 0.5894320 #>  [974,] 0.24311166 0.3702368 0.4609947 0.4618041 0.4819769 0.4962557 0.5123082 #>  [975,] 0.43296317 0.5157372 0.5449681 0.5618018 0.6534237 0.6911553 0.7208816 #>  [976,] 0.54489884 0.5601268 0.6254444 0.7466141 0.7665801 0.7738620 0.8248381 #>  [977,] 0.43031041 0.5435702 0.6953609 0.6982753 0.7118375 0.7369195 0.7613379 #>  [978,] 1.05658905 1.1189617 1.4692204 1.5074885 1.5790060 1.6337460 1.7105836 #>  [979,] 0.22958661 0.3851255 0.4279359 0.4595977 0.5545906 0.5801462 0.5945252 #>  [980,] 0.72223769 0.8322685 0.8500288 0.8677896 0.9455791 0.9548179 0.9678827 #>  [981,] 0.81357368 0.8486657 0.8809123 0.9175260 1.0507398 1.1301727 1.1645617 #>  [982,] 0.31499425 0.3455002 0.5180486 0.5319553 0.5905339 0.6233546 0.6773759 #>  [983,] 0.43705634 0.4573672 0.8550436 0.8954281 0.9139163 0.9425114 1.1433109 #>  [984,] 0.47181807 0.4899205 0.7472407 0.8411093 0.9364010 0.9413523 0.9425114 #>  [985,] 0.53337590 0.5910516 0.6589651 0.7219842 0.7475867 0.7895464 0.8146919 #>  [986,] 0.78036460 0.8707426 0.9027133 0.9539329 1.0253069 1.0255073 1.0693003 #>  [987,] 0.32050574 0.5414637 0.5765566 0.6113934 0.6319838 0.6397676 0.6468781 #>  [988,] 0.29122779 0.3665158 0.4348192 0.4936077 0.5049729 0.5072282 0.5330261 #>  [989,] 0.46865196 0.6438130 0.6596234 0.6656801 0.6669171 0.6858611 0.7202064 #>  [990,] 0.39760685 0.6836013 0.7204711 0.7330919 0.7833529 0.8258210 0.8460676 #>  [991,] 0.48105557 0.6093643 0.6208565 0.7745014 0.7984159 0.8000553 0.8100549 #>  [992,] 0.27011389 0.3730292 0.5409595 0.5413857 0.5478643 0.5552956 0.6014279 #>  [993,] 0.47529054 0.4908760 0.5539483 0.5664712 0.5810069 0.5963738 0.6090675 #>  [994,] 0.52045984 0.8089790 0.8738416 0.8753737 0.9914109 1.0087482 1.0670871 #>  [995,] 0.35188854 0.5770477 0.5921864 0.6919374 0.6971731 0.8057086 0.8127165 #>  [996,] 0.33263549 0.4522702 0.5077706 0.6056507 0.6460765 0.7043686 0.7650220 #>  [997,] 0.57566088 0.6333174 0.7245437 0.7338909 0.8584998 0.9629408 0.9812265 #>  [998,] 0.55632795 0.8814015 0.9569690 1.0284043 1.2735349 1.4201331 1.4244367 #>  [999,] 0.53860920 0.5762949 0.6173882 0.6571252 0.7221315 0.7364956 0.7801887 #> [1000,] 0.21374845 0.6299624 0.6674950 0.8173009 0.9344096 0.9970338 1.0825339 #>              [,8]      [,9]     [,10] #>    [1,] 0.5080557 0.5276249 0.5337389 #>    [2,] 0.7074128 0.7333377 0.7395066 #>    [3,] 0.5996369 0.6178832 0.6364947 #>    [4,] 0.6294593 0.6412215 0.6414985 #>    [5,] 0.6272283 0.6620371 0.6937356 #>    [6,] 0.5920410 0.6162311 0.6432074 #>    [7,] 0.5404083 0.5508617 0.5760931 #>    [8,] 0.9030304 0.9169258 0.9187177 #>    [9,] 0.6796995 0.6798185 0.6882096 #>   [10,] 0.5952771 0.6108661 0.6444149 #>   [11,] 1.1515974 1.1585714 1.1764944 #>   [12,] 0.6344104 0.6344204 0.6544046 #>   [13,] 1.3734810 1.3737147 1.3859828 #>   [14,] 0.9936946 0.9948671 1.0736996 #>   [15,] 1.2826945 1.3215186 1.3690838 #>   [16,] 0.8651911 0.8869985 0.9134283 #>   [17,] 0.5533816 0.5570542 0.6293590 #>   [18,] 1.0297665 1.0658929 1.0793955 #>   [19,] 1.0815234 1.0850919 1.1513881 #>   [20,] 1.1861404 1.1980848 1.2415036 #>   [21,] 0.9224027 0.9262830 0.9529141 #>   [22,] 0.9118904 0.9361001 0.9581702 #>   [23,] 0.9605426 0.9889294 1.0033541 #>   [24,] 0.8545195 0.8885775 0.9031294 #>   [25,] 1.3421264 1.3528933 1.3689558 #>   [26,] 0.5700936 0.5763236 0.5987912 #>   [27,] 0.9870573 0.9948477 1.1168059 #>   [28,] 0.9608363 0.9699667 0.9919009 #>   [29,] 0.5862364 0.6154337 0.6187765 #>   [30,] 0.9450211 0.9907834 1.0232153 #>   [31,] 0.7959124 0.8398739 0.8462045 #>   [32,] 0.5343016 0.5406186 0.5439941 #>   [33,] 0.7023936 0.7280959 0.7383516 #>   [34,] 1.2014335 1.2157381 1.2321383 #>   [35,] 0.8235722 0.8731829 0.8779245 #>   [36,] 0.9101487 0.9766236 0.9924294 #>   [37,] 0.6601854 0.6663551 0.6740048 #>   [38,] 0.4309658 0.4329583 0.4407847 #>   [39,] 0.6811694 0.6966789 0.6972536 #>   [40,] 0.7183615 0.7217780 0.7669109 #>   [41,] 0.8224173 0.8298455 0.8696873 #>   [42,] 0.7993482 0.8049644 0.8086437 #>   [43,] 0.6407572 0.6814056 0.6930869 #>   [44,] 0.5814230 0.5956360 0.6016379 #>   [45,] 0.6181526 0.6403005 0.6544046 #>   [46,] 0.8002856 0.8064043 0.8103385 #>   [47,] 1.3102151 1.3637129 1.3749191 #>   [48,] 0.7686097 0.7900123 0.7911462 #>   [49,] 0.5750444 0.5755871 0.5990375 #>   [50,] 0.6453357 0.6540806 0.6563004 #>   [51,] 1.0329458 1.0838374 1.0983250 #>   [52,] 0.5155253 0.5320130 0.5421736 #>   [53,] 0.6470461 0.6551350 0.6680482 #>   [54,] 0.4980540 0.5808584 0.5910474 #>   [55,] 0.6760620 0.6836013 0.6941255 #>   [56,] 1.0557861 1.0576671 1.1017859 #>   [57,] 1.0050945 1.0421926 1.0590219 #>   [58,] 0.6706848 0.8074650 0.8298261 #>   [59,] 0.8464529 0.8810010 0.9620947 #>   [60,] 0.4366093 0.4396996 0.4545905 #>   [61,] 0.9353369 0.9993647 1.0092564 #>   [62,] 0.7037705 0.7555856 0.7575959 #>   [63,] 0.8992710 1.0743661 1.0752524 #>   [64,] 1.7470827 1.7579438 1.7593070 #>   [65,] 1.0584227 1.0642055 1.0855475 #>   [66,] 1.8898611 1.9768267 2.0916113 #>   [67,] 1.0385676 1.0765273 1.1149711 #>   [68,] 1.4407721 1.5182663 1.5433729 #>   [69,] 0.7806314 0.8556603 0.8655124 #>   [70,] 0.5658269 0.5660513 0.5683815 #>   [71,] 0.8199538 0.8199899 0.8376181 #>   [72,] 0.5957826 0.6060273 0.6236403 #>   [73,] 0.6468280 0.6857229 0.7658867 #>   [74,] 0.6461097 0.6635607 0.7326811 #>   [75,] 1.5193302 1.5227179 1.6178223 #>   [76,] 1.5158562 1.5701660 1.5814253 #>   [77,] 0.5277332 0.5552746 0.5755592 #>   [78,] 0.6520442 0.7005156 0.7072381 #>   [79,] 1.4551196 1.4618644 1.5376717 #>   [80,] 0.8445137 0.8900952 0.8976119 #>   [81,] 0.7893731 0.8060993 0.8405046 #>   [82,] 0.7212222 0.7331050 0.7646248 #>   [83,] 1.3916332 1.4546393 1.4559839 #>   [84,] 0.7412521 0.7590833 0.7979991 #>   [85,] 0.8091812 0.8101159 0.8366933 #>   [86,] 0.5993512 0.6157499 0.6350583 #>   [87,] 0.7657549 0.7837344 0.8639420 #>   [88,] 0.7323194 0.7432620 0.7482892 #>   [89,] 0.4260973 0.5047487 0.5053205 #>   [90,] 1.2301855 1.3045251 1.3132172 #>   [91,] 0.7801887 0.7967628 0.8281173 #>   [92,] 0.8193655 0.8201218 0.8698567 #>   [93,] 1.1954961 1.1962214 1.2376784 #>   [94,] 0.8279595 0.8777564 0.9069167 #>   [95,] 0.8441366 0.9015529 0.9358159 #>   [96,] 0.7004701 0.7026138 0.7266044 #>   [97,] 0.8461678 0.8648717 0.8776659 #>   [98,] 0.4543711 0.4832860 0.5047864 #>   [99,] 1.2298503 1.2376851 1.2397138 #>  [100,] 0.9082196 0.9929584 0.9970243 #>  [101,] 0.5834634 0.6298161 0.6545335 #>  [102,] 1.1456485 1.1671503 1.1907138 #>  [103,] 0.7111230 0.7175314 0.7322923 #>  [104,] 0.6743699 0.6875476 0.6939073 #>  [105,] 0.7597750 0.8190446 0.8936931 #>  [106,] 0.5578180 0.5841146 0.5894138 #>  [107,] 0.4363057 0.4748232 0.5302414 #>  [108,] 0.6789403 0.7354276 0.7723596 #>  [109,] 0.9890113 1.0111142 1.0241772 #>  [110,] 0.4363057 0.4372892 0.4698365 #>  [111,] 1.0998304 1.1007903 1.1193233 #>  [112,] 1.2768919 1.3087673 1.3460148 #>  [113,] 0.5332060 0.5685390 0.5854549 #>  [114,] 1.2298503 1.2404983 1.3232201 #>  [115,] 0.6978123 0.7445224 0.7589983 #>  [116,] 0.7385585 0.7871817 0.7949877 #>  [117,] 0.8161993 0.8500288 0.8948250 #>  [118,] 0.8424284 0.8469029 0.8660082 #>  [119,] 0.7489264 0.7502431 0.7545002 #>  [120,] 0.9010624 0.9329894 1.0209371 #>  [121,] 1.0531867 1.0838350 1.0918795 #>  [122,] 0.7312861 0.7487063 0.7560838 #>  [123,] 0.8550436 0.8701907 0.8808099 #>  [124,] 1.2303376 1.2304767 1.2727536 #>  [125,] 0.6592235 0.6682473 0.6688940 #>  [126,] 0.8074650 0.8548906 0.8826178 #>  [127,] 0.9312320 0.9598662 0.9763838 #>  [128,] 0.8647986 0.9012468 0.9498584 #>  [129,] 0.9529782 0.9605236 0.9741826 #>  [130,] 0.5546237 0.5631742 0.5950487 #>  [131,] 0.9115275 0.9784889 0.9918894 #>  [132,] 0.8332822 0.8800038 0.9207668 #>  [133,] 0.6196387 0.6761820 0.7433681 #>  [134,] 0.5454920 0.5527264 0.5728284 #>  [135,] 0.8636828 0.8749933 0.9185172 #>  [136,] 0.7870375 0.7925053 0.8454470 #>  [137,] 0.7173027 0.7332669 0.7487080 #>  [138,] 1.1408286 1.1849486 1.2182944 #>  [139,] 0.7153244 0.8187454 0.8449739 #>  [140,] 0.7994577 0.8086749 0.8538193 #>  [141,] 0.7869069 0.8148103 0.8491471 #>  [142,] 0.6258908 0.6261896 0.6448649 #>  [143,] 0.7513867 0.7552259 0.7580303 #>  [144,] 0.4720235 0.4792366 0.5213524 #>  [145,] 0.6551473 0.6958704 0.7223629 #>  [146,] 0.8362069 0.8405536 0.8565929 #>  [147,] 0.8738416 0.8971017 0.9103595 #>  [148,] 1.0889241 1.1320192 1.1368238 #>  [149,] 0.7323186 0.7336180 0.8134327 #>  [150,] 0.6669111 0.6677252 0.6852465 #>  [151,] 0.6550502 0.6577029 0.6880727 #>  [152,] 1.0158847 1.0640336 1.0951134 #>  [153,] 0.6744438 0.7048592 0.7068142 #>  [154,] 0.6227925 0.6495350 0.6716401 #>  [155,] 0.7716304 0.7823896 0.7859023 #>  [156,] 0.6427310 0.6938234 0.6986410 #>  [157,] 2.2243953 2.2818069 2.3548247 #>  [158,] 0.5961741 0.6022288 0.6058505 #>  [159,] 0.8131157 0.8137214 0.8466601 #>  [160,] 1.2868713 1.2899822 1.3025716 #>  [161,] 1.3146021 1.3353001 1.3368493 #>  [162,] 0.6946327 0.7012835 0.7251204 #>  [163,] 0.6127803 0.6431774 0.7204136 #>  [164,] 0.7545672 0.7593611 0.7826182 #>  [165,] 1.3952458 1.4271346 1.4625213 #>  [166,] 0.8901617 0.9050034 0.9516254 #>  [167,] 0.9036075 0.9154107 0.9331740 #>  [168,] 0.9185183 0.9200200 0.9326100 #>  [169,] 0.9120973 0.9143072 0.9214732 #>  [170,] 0.6429713 0.7280959 0.7596716 #>  [171,] 1.0246371 1.0345012 1.0557454 #>  [172,] 1.0018301 1.0084624 1.0100844 #>  [173,] 1.0143576 1.0216621 1.0684191 #>  [174,] 1.1942019 1.2136506 1.2568399 #>  [175,] 0.9811516 1.1636346 1.1644887 #>  [176,] 1.0806422 1.2234049 1.2690338 #>  [177,] 0.6972208 0.6990434 0.7036953 #>  [178,] 1.0457525 1.0838359 1.1088034 #>  [179,] 1.1015694 1.1211389 1.2049402 #>  [180,] 1.7213170 1.7851067 1.8574547 #>  [181,] 0.6492943 0.6555657 0.6556211 #>  [182,] 0.6691152 0.6699257 0.6803000 #>  [183,] 0.9723774 0.9728730 0.9739049 #>  [184,] 0.8704720 0.8774337 0.8858468 #>  [185,] 0.7312861 0.7849494 0.7938089 #>  [186,] 0.8680248 0.9116079 0.9157186 #>  [187,] 0.5008478 0.5075463 0.5559240 #>  [188,] 0.6262245 0.6273307 0.6587450 #>  [189,] 0.6069190 0.6181006 0.6233546 #>  [190,] 0.7438293 0.7749785 0.8191296 #>  [191,] 0.5184546 0.6050622 0.6428881 #>  [192,] 0.7455963 0.7483005 0.7627564 #>  [193,] 0.6634177 0.6760532 0.6854905 #>  [194,] 0.7095232 0.7155607 0.7240736 #>  [195,] 0.6898289 0.6977017 0.7063082 #>  [196,] 0.6864827 0.7155607 0.7228114 #>  [197,] 0.5242706 0.5645764 0.5754340 #>  [198,] 0.5673655 0.5984235 0.6069294 #>  [199,] 0.9184426 0.9331691 0.9448668 #>  [200,] 0.7085544 0.7213221 0.7586902 #>  [201,] 1.2643054 1.2731112 1.2795868 #>  [202,] 0.6934890 0.6939073 0.6953294 #>  [203,] 0.5490327 0.5874233 0.6097186 #>  [204,] 1.2689624 1.2937247 1.3199985 #>  [205,] 1.9484012 1.9743326 2.0799893 #>  [206,] 0.5412440 0.5681761 0.5704542 #>  [207,] 0.5809373 0.6050261 0.6399953 #>  [208,] 0.6083842 0.6924729 0.7020541 #>  [209,] 0.8460950 0.8572993 0.8829110 #>  [210,] 0.6993888 0.7020541 0.7051902 #>  [211,] 1.5547211 1.5975276 1.6310009 #>  [212,] 0.8422099 0.8773511 0.8789763 #>  [213,] 1.1392924 1.1563075 1.2215164 #>  [214,] 0.8370229 0.8646713 0.8731582 #>  [215,] 0.8611776 0.8726212 0.8774227 #>  [216,] 0.8281654 0.8488380 0.8623662 #>  [217,] 0.5346914 0.5454920 0.5642485 #>  [218,] 1.2164695 1.2387679 1.2547277 #>  [219,] 0.8229731 0.8343546 0.8362686 #>  [220,] 0.8731582 0.8916319 0.9009039 #>  [221,] 0.7524220 0.7561979 0.7610670 #>  [222,] 1.0412500 1.0446721 1.0565529 #>  [223,] 0.5763734 0.6147375 0.6382505 #>  [224,] 1.6878967 1.7302500 1.7399488 #>  [225,] 0.7448465 0.7894852 0.8954691 #>  [226,] 0.8687264 0.8814779 0.8976119 #>  [227,] 0.5151640 0.5243583 0.5810058 #>  [228,] 0.9085505 0.9730838 0.9862231 #>  [229,] 0.9851261 0.9910822 1.0011635 #>  [230,] 0.5300574 0.5315624 0.5783893 #>  [231,] 0.8977692 0.9271209 0.9371086 #>  [232,] 1.1986902 1.1987326 1.2547277 #>  [233,] 0.6509163 0.6764662 0.6791010 #>  [234,] 0.7674119 0.7678589 0.7860771 #>  [235,] 0.9755952 1.1601576 1.2227501 #>  [236,] 0.6677660 0.6691152 0.6887232 #>  [237,] 1.3410361 1.3547734 1.3622604 #>  [238,] 0.7153244 0.7154041 0.7571962 #>  [239,] 0.9664334 0.9744362 0.9782915 #>  [240,] 0.6971393 0.7295374 0.8410550 #>  [241,] 0.6722334 0.6769558 0.6783899 #>  [242,] 0.6658708 0.6731826 0.6766597 #>  [243,] 0.8889693 0.9273866 0.9729789 #>  [244,] 0.8260102 0.8616595 0.8654049 #>  [245,] 0.7471159 0.7681191 0.7822935 #>  [246,] 0.8699080 0.8776659 0.9367706 #>  [247,] 1.1068650 1.1109713 1.1309259 #>  [248,] 0.8235722 0.8580807 0.9456406 #>  [249,] 0.8211332 0.8212621 0.8401606 #>  [250,] 1.4703698 1.5218513 1.5253210 #>  [251,] 0.8756437 0.8903666 0.8960529 #>  [252,] 1.9901936 2.0015273 2.0393377 #>  [253,] 0.5242706 0.5696508 0.5743931 #>  [254,] 1.3229827 1.3272193 1.3612673 #>  [255,] 0.6529944 0.6591772 0.6768424 #>  [256,] 0.7605011 0.8114450 0.8392380 #>  [257,] 0.8268119 0.8712144 0.8712788 #>  [258,] 0.9908796 0.9956447 1.0367497 #>  [259,] 1.0208277 1.0702586 1.1417724 #>  [260,] 2.1297518 2.1890842 2.1998888 #>  [261,] 0.8951290 0.8981277 0.9625495 #>  [262,] 0.5867843 0.5911418 0.6090675 #>  [263,] 0.6470041 0.6918925 0.7094913 #>  [264,] 0.9862231 0.9893178 1.0507357 #>  [265,] 0.8458345 0.8589800 0.9129090 #>  [266,] 0.9931099 1.0004020 1.0178100 #>  [267,] 0.5492920 0.5579753 0.5780854 #>  [268,] 0.5168119 0.5719328 0.5722573 #>  [269,] 0.7899618 0.8212229 0.8221483 #>  [270,] 0.7783004 0.8741039 0.9137974 #>  [271,] 1.3229581 1.4403607 1.4674235 #>  [272,] 0.8327822 0.8563464 0.8678232 #>  [273,] 0.9275306 0.9488989 0.9594895 #>  [274,] 0.6176430 0.6367721 0.6426869 #>  [275,] 0.8479561 0.8787511 0.9242614 #>  [276,] 1.3874072 1.3965994 1.3980224 #>  [277,] 0.5412672 0.5413442 0.5450219 #>  [278,] 1.3346748 1.3455890 1.3965806 #>  [279,] 0.5478162 0.5806486 0.6010023 #>  [280,] 0.5880595 0.5979649 0.6005933 #>  [281,] 0.5923437 0.6121432 0.6209169 #>  [282,] 0.6363827 0.7094409 0.7399889 #>  [283,] 0.9931211 1.0242778 1.0797293 #>  [284,] 0.8031524 0.8739472 0.8832235 #>  [285,] 0.6162078 0.6181526 0.6213779 #>  [286,] 0.4800265 0.5105350 0.5482301 #>  [287,] 0.8995558 0.9071393 0.9150336 #>  [288,] 0.8154512 0.8270137 0.8705957 #>  [289,] 0.9320773 0.9862201 0.9971606 #>  [290,] 0.8392597 0.9297457 0.9426545 #>  [291,] 0.8222482 0.8627887 0.9631315 #>  [292,] 0.5029804 0.5302586 0.5391368 #>  [293,] 0.5404123 0.5992381 0.6343732 #>  [294,] 0.6184469 0.6393994 0.6778467 #>  [295,] 0.9111369 0.9344715 0.9935865 #>  [296,] 0.7161360 0.7342103 0.7550921 #>  [297,] 0.6296916 0.6348889 0.6423764 #>  [298,] 0.5644425 0.5733509 0.5805444 #>  [299,] 1.0282836 1.0531133 1.0744547 #>  [300,] 0.5792694 0.5817220 0.6017946 #>  [301,] 1.0035618 1.0340226 1.0792533 #>  [302,] 0.8224667 0.8474627 0.8527090 #>  [303,] 0.6762218 0.7225982 0.7662210 #>  [304,] 0.9747795 1.0537804 1.0914642 #>  [305,] 0.6431774 0.6553777 0.6572575 #>  [306,] 1.0650431 1.0761388 1.0905442 #>  [307,] 1.0065705 1.0188044 1.0438174 #>  [308,] 1.0359633 1.0556539 1.0981911 #>  [309,] 0.6669171 0.6750496 0.6973854 #>  [310,] 0.8167783 0.8308105 0.8781047 #>  [311,] 0.5961741 0.6152930 0.6406947 #>  [312,] 0.8341679 0.8718684 0.8802096 #>  [313,] 0.7219223 0.7548472 0.7609749 #>  [314,] 0.7278945 0.7369752 0.7540295 #>  [315,] 0.5273665 0.7113929 0.7347455 #>  [316,] 1.0936329 1.1280078 1.1830340 #>  [317,] 0.4684957 0.4748232 0.4827794 #>  [318,] 0.5944924 0.6127464 0.6165768 #>  [319,] 0.9386948 0.9655460 1.0449539 #>  [320,] 0.6945784 0.7080052 0.7128778 #>  [321,] 0.6420715 0.6607864 0.6618692 #>  [322,] 0.5527264 0.5642485 0.5750444 #>  [323,] 0.6253705 0.6298053 0.6449690 #>  [324,] 0.6618842 0.6718443 0.7074430 #>  [325,] 0.5228951 0.5673655 0.5804400 #>  [326,] 0.7086978 0.7214121 0.7630708 #>  [327,] 0.6581721 0.7298017 0.7378522 #>  [328,] 0.6779486 0.6818557 0.7243537 #>  [329,] 1.0166501 1.0266741 1.0931595 #>  [330,] 0.5005513 0.5077196 0.5268218 #>  [331,] 1.1891447 1.3063215 1.3144014 #>  [332,] 1.4941467 1.5413041 1.5447015 #>  [333,] 1.3987059 1.4154231 1.4236448 #>  [334,] 0.9010323 0.9278341 0.9555620 #>  [335,] 0.5945452 0.5950487 0.5956360 #>  [336,] 0.9479475 1.0912605 1.1025084 #>  [337,] 0.6990434 0.7391738 0.7650220 #>  [338,] 0.8100549 0.8834843 0.8877525 #>  [339,] 0.8085043 0.8153496 0.8869985 #>  [340,] 1.0942887 1.1542061 1.2101805 #>  [341,] 0.6281034 0.6294544 0.6632975 #>  [342,] 0.6477788 0.6819647 0.6882857 #>  [343,] 0.5805766 0.6020253 0.6395995 #>  [344,] 0.9300626 0.9874764 0.9895243 #>  [345,] 0.7791843 0.7993172 0.8103385 #>  [346,] 0.6091768 0.6211957 0.6449905 #>  [347,] 0.7399706 0.7433385 0.7513867 #>  [348,] 0.6656801 0.7373986 0.7468133 #>  [349,] 1.2823180 1.2845878 1.3149303 #>  [350,] 0.5302414 0.5484530 0.5681435 #>  [351,] 1.7907100 1.7921945 1.8377308 #>  [352,] 0.9061576 1.0582734 1.1120492 #>  [353,] 0.6761699 0.6839403 0.6897820 #>  [354,] 0.8381876 0.8488140 0.8490278 #>  [355,] 0.9250963 0.9810414 0.9927565 #>  [356,] 1.4752122 1.4901066 1.5325369 #>  [357,] 0.8046926 0.8114842 0.8124883 #>  [358,] 0.6051121 0.6572348 0.6655885 #>  [359,] 1.0249290 1.0991059 1.1072275 #>  [360,] 0.4630024 0.5181561 0.5216214 #>  [361,] 0.8127632 0.8513966 0.8580807 #>  [362,] 0.8331608 0.8370229 0.8507488 #>  [363,] 0.5917332 0.6284460 0.6343111 #>  [364,] 1.0438174 1.0521465 1.0817482 #>  [365,] 0.9854139 0.9945519 1.0125231 #>  [366,] 1.0550523 1.0727685 1.1101781 #>  [367,] 0.5534393 0.5632414 0.5663736 #>  [368,] 0.7334309 0.7360284 0.7392629 #>  [369,] 0.8079707 0.8220060 0.8315265 #>  [370,] 1.0404540 1.0562614 1.0582589 #>  [371,] 0.5802714 0.6141619 0.6155760 #>  [372,] 0.7286655 0.7564475 0.7614687 #>  [373,] 0.9648955 1.0308733 1.0531133 #>  [374,] 1.3375373 1.3407626 1.3484463 #>  [375,] 0.6512617 0.6688059 0.6716049 #>  [376,] 0.7506226 0.7537856 0.8069588 #>  [377,] 0.5216893 0.5242504 0.5478584 #>  [378,] 0.6109501 0.6295589 0.6360508 #>  [379,] 1.1294462 1.1818391 1.1908946 #>  [380,] 0.6930866 0.7109143 0.7224012 #>  [381,] 0.5319553 0.5381446 0.5421736 #>  [382,] 0.6367721 0.6397702 0.6494582 #>  [383,] 1.2828530 1.2914719 1.3340556 #>  [384,] 1.0627043 1.1022313 1.1061595 #>  [385,] 0.8647540 0.8706249 0.8708676 #>  [386,] 0.8043476 0.8290090 0.8392421 #>  [387,] 1.0206989 1.0221908 1.0498775 #>  [388,] 0.7269549 0.7276730 0.8333923 #>  [389,] 0.5766391 0.5826599 0.5996369 #>  [390,] 0.6779006 0.6782037 0.7011281 #>  [391,] 1.0167261 1.0364106 1.0601456 #>  [392,] 0.6913417 0.7027843 0.7450791 #>  [393,] 1.0521463 1.0729956 1.0796489 #>  [394,] 0.9547871 0.9644787 0.9662885 #>  [395,] 0.9693171 0.9812911 0.9873352 #>  [396,] 0.4981114 0.5632414 0.5704542 #>  [397,] 0.6290962 0.6539551 0.6598012 #>  [398,] 0.6606966 0.6698722 0.6861729 #>  [399,] 0.8796215 0.8804955 0.8840630 #>  [400,] 0.6277674 0.6366864 0.6420715 #>  [401,] 0.8869014 0.9172616 0.9255504 #>  [402,] 0.6786759 0.7158590 0.7345220 #>  [403,] 0.8613869 0.8716701 0.9437147 #>  [404,] 0.6165712 0.6347951 0.6351871 #>  [405,] 0.8637331 0.9164881 0.9376060 #>  [406,] 1.0513574 1.1198464 1.1210114 #>  [407,] 0.7013993 0.7273121 0.8556250 #>  [408,] 0.8459208 0.8509803 0.8607299 #>  [409,] 1.1396785 1.1401010 1.1652299 #>  [410,] 1.2097029 1.3290838 1.3451194 #>  [411,] 0.9441122 0.9507034 0.9537932 #>  [412,] 1.4317888 1.4433019 1.4710430 #>  [413,] 0.7196664 0.8004471 0.8052453 #>  [414,] 0.8496712 0.8825974 0.8869342 #>  [415,] 0.7172686 0.7347804 0.7382020 #>  [416,] 0.7531827 0.7545002 0.7651596 #>  [417,] 0.5817903 0.5915257 0.6054770 #>  [418,] 1.0763196 1.1326925 1.1734889 #>  [419,] 0.4761306 0.4965961 0.5256825 #>  [420,] 0.6556727 0.6559608 0.6839239 #>  [421,] 1.2620790 1.3099540 1.3257610 #>  [422,] 0.7063542 0.7228114 0.7665603 #>  [423,] 0.6716094 0.6731826 0.6744110 #>  [424,] 1.0776125 1.1139243 1.2586460 #>  [425,] 0.7403501 0.7788079 0.7884644 #>  [426,] 0.6504663 0.6934103 0.6993888 #>  [427,] 0.6625744 0.6668379 0.6800288 #>  [428,] 0.7026138 0.7504933 0.7546979 #>  [429,] 0.8460950 0.9243577 0.9531442 #>  [430,] 0.9037120 0.9053061 0.9134603 #>  [431,] 0.9812076 0.9912094 1.0083105 #>  [432,] 1.3412830 1.3857169 1.4068716 #>  [433,] 1.0016601 1.0417702 1.0662256 #>  [434,] 0.6905879 0.6924633 0.7100188 #>  [435,] 0.7991004 0.8187412 0.8537889 #>  [436,] 0.9030304 0.9382107 0.9832149 #>  [437,] 0.4283122 0.4366093 0.4684957 #>  [438,] 0.6701868 0.7081910 0.7180709 #>  [439,] 1.4632844 1.4724457 1.4883183 #>  [440,] 0.7083897 0.7234269 0.7371691 #>  [441,] 0.8041308 0.8191224 0.8224202 #>  [442,] 0.7190115 0.7433681 0.7614164 #>  [443,] 0.8990052 0.9183955 0.9380971 #>  [444,] 0.6911553 0.6964381 0.7110337 #>  [445,] 1.4704173 1.5295277 1.5601437 #>  [446,] 0.8930972 0.8996214 0.9441122 #>  [447,] 0.8850028 0.9007028 0.9156353 #>  [448,] 0.7191633 0.7424398 0.7752480 #>  [449,] 0.9494569 0.9854761 0.9857833 #>  [450,] 0.8145610 0.8546957 0.9358312 #>  [451,] 0.8063634 0.8089790 0.8610168 #>  [452,] 0.9826243 1.0796544 1.0939217 #>  [453,] 0.9130582 0.9868831 0.9989299 #>  [454,] 1.5872252 1.6623733 1.6843201 #>  [455,] 1.2656468 1.2688334 1.3397707 #>  [456,] 0.6045534 0.6502464 0.6544195 #>  [457,] 1.9113821 1.9187778 1.9312155 #>  [458,] 0.9338262 0.9614959 0.9776963 #>  [459,] 0.8856886 0.8872872 0.8934997 #>  [460,] 1.8802027 1.8868771 1.8992628 #>  [461,] 0.5773265 0.5961714 0.6014012 #>  [462,] 1.2513282 1.3591731 1.3751743 #>  [463,] 0.7940196 0.8396341 0.8743571 #>  [464,] 1.0110325 1.0461453 1.0806862 #>  [465,] 1.1113875 1.1308214 1.2066376 #>  [466,] 1.1466837 1.1576865 1.1682958 #>  [467,] 0.8268119 0.8284297 0.8470166 #>  [468,] 0.9633828 0.9747335 0.9775836 #>  [469,] 0.7659789 0.7661747 0.8289834 #>  [470,] 0.6630733 0.6821130 0.7134559 #>  [471,] 1.2063782 1.3495357 1.3682984 #>  [472,] 0.5644148 0.6982256 0.7198100 #>  [473,] 0.9747335 0.9772767 0.9900802 #>  [474,] 0.7323186 0.7439912 0.7779685 #>  [475,] 0.7341867 0.7410779 0.7704776 #>  [476,] 1.3458587 1.3727904 1.3788387 #>  [477,] 1.1467471 1.1954367 1.2805326 #>  [478,] 0.4821627 0.5285974 0.5298608 #>  [479,] 0.6700257 0.6881802 0.7063082 #>  [480,] 0.7830573 0.8000627 0.8019101 #>  [481,] 0.8465317 0.8475198 0.9171021 #>  [482,] 0.9455813 0.9475736 0.9681680 #>  [483,] 0.7636855 0.7690992 0.7718291 #>  [484,] 0.8188366 0.8248050 0.8290967 #>  [485,] 0.8982082 0.9226149 0.9604672 #>  [486,] 0.6440883 0.6924096 0.7192804 #>  [487,] 0.8382252 0.8428737 0.8618445 #>  [488,] 1.7686903 1.7759033 1.8134459 #>  [489,] 1.1530405 1.1610048 1.1894465 #>  [490,] 0.5587740 0.6151418 0.6158542 #>  [491,] 0.5236165 0.5268218 0.5527841 #>  [492,] 0.4281768 0.4291062 0.4649052 #>  [493,] 0.5888597 0.5992826 0.6908952 #>  [494,] 0.9329583 0.9860497 0.9918414 #>  [495,] 0.5337777 0.5364558 0.5538004 #>  [496,] 0.6795043 0.7112654 0.7247807 #>  [497,] 0.6552232 0.6758481 0.7765854 #>  [498,] 0.8412021 0.8515289 0.8669860 #>  [499,] 1.3470363 1.3484786 1.3838270 #>  [500,] 0.8131157 0.8554573 0.8907300 #>  [501,] 0.7075458 0.7246776 0.8418232 #>  [502,] 0.7255162 0.7331211 0.7373494 #>  [503,] 0.7984159 0.8152281 0.8400921 #>  [504,] 1.1459536 1.1576783 1.1819146 #>  [505,] 0.6523330 0.6836872 0.6839593 #>  [506,] 0.9088440 0.9180842 1.0171838 #>  [507,] 1.2479393 1.2540928 1.2571894 #>  [508,] 0.5663814 0.5713216 0.5954806 #>  [509,] 0.7200898 0.7755270 0.8240567 #>  [510,] 1.1720804 1.2210900 1.2883394 #>  [511,] 0.6058505 0.6095878 0.6350539 #>  [512,] 0.6566472 0.6738409 0.6938234 #>  [513,] 1.1485640 1.1888977 1.2175160 #>  [514,] 0.5835475 0.6020892 0.6055015 #>  [515,] 0.7601323 0.7645733 0.7732410 #>  [516,] 0.6106645 0.6452197 0.6538771 #>  [517,] 0.8874708 0.9275270 1.0081139 #>  [518,] 0.7504317 0.7506821 0.7552770 #>  [519,] 0.6718746 0.6861310 0.6956134 #>  [520,] 0.7405547 0.7483216 0.7514615 #>  [521,] 1.2501587 1.2950181 1.2985500 #>  [522,] 0.4867347 0.5193953 0.5473474 #>  [523,] 0.6834661 0.7380807 0.7463566 #>  [524,] 0.9655460 0.9670665 1.0386871 #>  [525,] 1.1022313 1.1700955 1.1797428 #>  [526,] 0.5389069 0.5529807 0.5664712 #>  [527,] 0.7955551 0.8000256 0.8768765 #>  [528,] 0.7964439 0.8171075 0.8462950 #>  [529,] 0.6831450 0.7077967 0.7216140 #>  [530,] 0.7174759 0.7496967 0.7590659 #>  [531,] 0.9839412 1.0451429 1.0477765 #>  [532,] 0.8868258 0.9018225 0.9723774 #>  [533,] 0.6008911 0.6218564 0.6311324 #>  [534,] 0.8302785 0.8543320 0.8915927 #>  [535,] 0.6470041 0.6817764 0.6886861 #>  [536,] 0.9173063 0.9356378 0.9539329 #>  [537,] 0.6670649 0.6782037 0.7153044 #>  [538,] 0.5916762 0.5954806 0.6082973 #>  [539,] 0.5593284 0.5658413 0.5931478 #>  [540,] 0.8223406 0.8224401 0.8362905 #>  [541,] 0.9263552 0.9502146 0.9703050 #>  [542,] 0.7174759 0.7461806 0.7492793 #>  [543,] 0.9344584 0.9403150 0.9632919 #>  [544,] 0.5801462 0.6144611 0.6456883 #>  [545,] 0.6837112 0.6851990 0.6933130 #>  [546,] 0.6815153 0.7107531 0.7268409 #>  [547,] 0.6389565 0.6741184 0.6786053 #>  [548,] 0.9676630 0.9849359 1.0101607 #>  [549,] 0.7075458 0.7326811 0.7433385 #>  [550,] 0.7174452 0.7221767 0.7240606 #>  [551,] 0.6820651 0.6831450 0.7044299 #>  [552,] 1.0209482 1.0601143 1.0651295 #>  [553,] 1.2108689 1.2140743 1.2581239 #>  [554,] 0.7112818 0.7165507 0.7266928 #>  [555,] 0.7226369 0.7417024 0.7454752 #>  [556,] 0.8162747 0.8245005 0.8259692 #>  [557,] 0.7360234 0.7635241 0.7968344 #>  [558,] 0.5625142 0.5685564 0.5736590 #>  [559,] 0.7570178 0.7838449 0.8231215 #>  [560,] 0.7455113 0.7623644 0.8010221 #>  [561,] 0.8748225 0.9038319 0.9071713 #>  [562,] 0.7757006 0.7842128 0.8643986 #>  [563,] 0.5740398 0.5934170 0.5945252 #>  [564,] 0.6392571 0.6484500 0.7720673 #>  [565,] 0.6655885 0.6743180 0.6779486 #>  [566,] 0.7901173 0.7981712 0.7983230 #>  [567,] 0.8048408 0.8283223 0.8807517 #>  [568,] 0.9075695 0.9715642 1.0255073 #>  [569,] 0.6473657 0.6495350 0.6693262 #>  [570,] 0.5744782 0.5836626 0.6190405 #>  [571,] 1.8366485 2.0437603 2.0583096 #>  [572,] 0.6620431 0.6791516 0.6920234 #>  [573,] 0.7196261 0.7938160 0.7962969 #>  [574,] 0.8917535 0.9155725 0.9166543 #>  [575,] 0.7866576 0.7894378 0.8291971 #>  [576,] 0.6940847 0.7062356 0.7102649 #>  [577,] 1.2078249 1.2095564 1.2261157 #>  [578,] 1.3634891 1.3939749 1.4634599 #>  [579,] 0.6586737 0.7197324 0.7435609 #>  [580,] 0.8987480 0.9849208 0.9894998 #>  [581,] 0.5843821 0.5862364 0.6218803 #>  [582,] 0.7262026 0.7468419 0.7559365 #>  [583,] 0.7072772 0.7365678 0.7406846 #>  [584,] 0.5763827 0.5824663 0.5867722 #>  [585,] 0.7523980 0.7808821 0.8365417 #>  [586,] 0.5610655 0.5982099 0.6204008 #>  [587,] 1.0259270 1.0733800 1.0869446 #>  [588,] 0.8940600 0.9045178 0.9746028 #>  [589,] 1.1134729 1.1138260 1.1172608 #>  [590,] 0.9187177 0.9239632 0.9346137 #>  [591,] 0.5056083 0.5363482 0.5403131 #>  [592,] 0.8237203 0.8269712 0.8364318 #>  [593,] 0.8447904 0.9095093 0.9798450 #>  [594,] 0.5478584 0.6437780 0.6693342 #>  [595,] 1.0675974 1.1307489 1.1384189 #>  [596,] 0.8273197 0.8955224 0.8992590 #>  [597,] 0.9980729 1.0299264 1.1693013 #>  [598,] 0.7007785 0.7038253 0.7045636 #>  [599,] 0.6676725 0.6821830 0.7095360 #>  [600,] 0.9103595 0.9218361 0.9419876 #>  [601,] 0.6985503 0.7149939 0.7318860 #>  [602,] 1.0677413 1.1122509 1.1378047 #>  [603,] 0.6156719 0.6270104 0.6743052 #>  [604,] 0.7388078 0.7629217 0.7805969 #>  [605,] 0.8331004 0.8508775 0.8805920 #>  [606,] 0.5923856 0.6066485 0.6619116 #>  [607,] 0.7168522 0.7448518 0.7496746 #>  [608,] 1.1280078 1.1565525 1.1846627 #>  [609,] 0.8185754 0.8285489 0.8409931 #>  [610,] 1.0622050 1.1009614 1.1097394 #>  [611,] 0.9129220 0.9854010 0.9935101 #>  [612,] 0.5460570 0.5993512 0.6187765 #>  [613,] 1.4569998 1.4910143 1.5370926 #>  [614,] 0.9829298 0.9941992 1.0308866 #>  [615,] 1.7164762 1.7424494 1.7875236 #>  [616,] 0.6274774 0.6558855 0.6949051 #>  [617,] 0.6378134 0.6412215 0.6591772 #>  [618,] 0.9170868 0.9362229 0.9367336 #>  [619,] 0.7369236 0.7566563 0.7596226 #>  [620,] 0.8348247 0.8585611 0.8863906 #>  [621,] 0.6750496 0.7033319 0.7279254 #>  [622,] 0.7897586 0.8119954 0.8189538 #>  [623,] 0.7003871 0.7068142 0.7748512 #>  [624,] 0.8199660 0.8323121 0.8419069 #>  [625,] 1.1045690 1.2107562 1.2319602 #>  [626,] 0.9131692 0.9397806 0.9731951 #>  [627,] 0.7548472 0.7704308 0.7772167 #>  [628,] 0.8481422 0.8764077 0.8798585 #>  [629,] 0.7297793 0.7436644 0.7783428 #>  [630,] 0.5593284 0.5765305 0.6118864 #>  [631,] 0.8001993 0.8151127 0.8444979 #>  [632,] 0.7320196 0.7783004 0.8161769 #>  [633,] 0.6433447 0.6608266 0.6614136 #>  [634,] 0.9531442 0.9916023 0.9964517 #>  [635,] 0.6572348 0.6574776 0.6675078 #>  [636,] 0.9157394 0.9359427 0.9523184 #>  [637,] 1.0496276 1.0996977 1.1340951 #>  [638,] 0.8471146 0.8570708 0.8719575 #>  [639,] 0.6530180 0.7088556 0.7194892 #>  [640,] 0.5395369 0.5621974 0.5835475 #>  [641,] 0.7401197 0.8393856 0.8616473 #>  [642,] 1.4867030 1.6342627 1.6478050 #>  [643,] 0.6713796 0.7251204 0.7504317 #>  [644,] 1.0470515 1.0659459 1.1190495 #>  [645,] 0.7554322 0.7649024 0.7897788 #>  [646,] 1.0739251 1.0857340 1.1143712 #>  [647,] 0.6448016 0.6595560 0.7197847 #>  [648,] 0.6993334 0.7309225 0.7396918 #>  [649,] 1.2662849 1.2703515 1.2805022 #>  [650,] 0.7955320 0.8429453 0.8486657 #>  [651,] 0.9248700 0.9551500 0.9671923 #>  [652,] 0.5244229 0.5530475 0.5709205 #>  [653,] 1.2183134 1.2446512 1.2838131 #>  [654,] 0.7541218 0.7621194 0.7637077 #>  [655,] 0.4722681 0.4765917 0.4821145 #>  [656,] 0.4857358 0.4894403 0.5059064 #>  [657,] 1.4709740 1.5184150 1.5206989 #>  [658,] 1.2673450 1.2883394 1.3357529 #>  [659,] 0.8102039 0.8171075 0.8342683 #>  [660,] 0.8685055 0.9161996 0.9339830 #>  [661,] 0.8966339 0.9491244 0.9558303 #>  [662,] 1.2754416 1.3446697 1.3470734 #>  [663,] 0.5420474 0.5658269 0.6113120 #>  [664,] 0.6887232 0.7025320 0.7381261 #>  [665,] 0.7466126 0.8016505 0.8125555 #>  [666,] 1.0510379 1.0926036 1.1250276 #>  [667,] 0.7591156 0.7732638 0.7934441 #>  [668,] 1.0182086 1.0198852 1.1025823 #>  [669,] 0.8404265 0.8747672 0.9387730 #>  [670,] 0.7610566 0.7704363 0.7913307 #>  [671,] 0.9161187 0.9619424 0.9691255 #>  [672,] 0.6322302 0.6446386 0.6517912 #>  [673,] 0.6184963 0.6202510 0.6209169 #>  [674,] 0.5895732 0.6075180 0.6133875 #>  [675,] 0.6156719 0.6429881 0.6453184 #>  [676,] 0.4947816 0.5059064 0.5075463 #>  [677,] 0.8168232 0.8627887 0.8716503 #>  [678,] 0.8859470 0.9134393 0.9377686 #>  [679,] 0.5884108 0.6076743 0.6090431 #>  [680,] 0.6344104 0.6390107 0.6583607 #>  [681,] 0.5997981 0.6005933 0.6392775 #>  [682,] 0.9837804 1.0038611 1.0098063 #>  [683,] 0.9256998 0.9498782 0.9931211 #>  [684,] 0.7062909 0.7212574 0.7234269 #>  [685,] 0.9382107 0.9614998 0.9633979 #>  [686,] 0.7759727 0.7779511 0.8106796 #>  [687,] 0.6882096 0.7066970 0.7106976 #>  [688,] 0.4111247 0.4117534 0.5193953 #>  [689,] 0.9774032 1.0328941 1.0434686 #>  [690,] 1.3356433 1.4051511 1.4272016 #>  [691,] 0.9941043 1.0140997 1.0319565 #>  [692,] 0.5785209 0.6021086 0.6033697 #>  [693,] 0.8950361 0.8970477 0.9119953 #>  [694,] 0.8057063 0.8319142 0.8398148 #>  [695,] 0.6127841 0.6218803 0.6227925 #>  [696,] 0.4843802 0.5452290 0.5517548 #>  [697,] 0.9701075 1.0124050 1.0210424 #>  [698,] 0.5099480 0.5240899 0.5391368 #>  [699,] 0.7321030 0.7612548 0.7813795 #>  [700,] 0.6746993 0.7069654 0.7391829 #>  [701,] 0.8205810 0.8521470 1.0573798 #>  [702,] 0.5942655 0.6033697 0.6189313 #>  [703,] 1.4374229 1.5353338 1.5725754 #>  [704,] 1.1130497 1.1627276 1.1796942 #>  [705,] 0.5517548 0.5719328 0.5940707 #>  [706,] 0.6756711 0.6918201 0.6940847 #>  [707,] 0.7886001 0.8296601 0.8322916 #>  [708,] 0.7090457 0.7469310 0.7521583 #>  [709,] 0.5849814 0.6638989 0.6706868 #>  [710,] 0.6789403 0.6796824 0.7129410 #>  [711,] 0.6345210 0.6487710 0.6687342 #>  [712,] 0.7514513 0.8167949 0.8724405 #>  [713,] 0.6722705 0.6867958 0.6919834 #>  [714,] 0.6033282 0.6356714 0.6426769 #>  [715,] 0.7745157 0.7782376 0.7807583 #>  [716,] 1.6760356 1.7165422 1.7553438 #>  [717,] 1.0456645 1.0700162 1.0810532 #>  [718,] 0.7081499 0.7275827 0.7483928 #>  [719,] 1.0598507 1.0799537 1.0848679 #>  [720,] 0.6985512 0.7246897 0.7333440 #>  [721,] 0.9183454 0.9274102 0.9377401 #>  [722,] 1.2815371 1.3336700 1.3469360 #>  [723,] 0.5049697 0.5389069 0.5557634 #>  [724,] 0.8928643 0.9083218 0.9173306 #>  [725,] 0.9064235 0.9720465 0.9739652 #>  [726,] 1.1990616 1.2500721 1.2840976 #>  [727,] 0.8922805 0.9144601 0.9164881 #>  [728,] 0.8430040 0.8447580 0.9277927 #>  [729,] 0.7347924 0.7671882 0.7958384 #>  [730,] 0.6668138 0.7719728 0.8596274 #>  [731,] 0.4415725 0.4710219 0.5262583 #>  [732,] 0.5770843 0.6119340 0.6292526 #>  [733,] 0.4801395 0.4929738 0.5181561 #>  [734,] 0.5594301 0.5728300 0.6118946 #>  [735,] 0.8128546 0.8161219 0.8226355 #>  [736,] 0.6876277 0.7077507 0.7578045 #>  [737,] 0.9616543 0.9846436 1.0074764 #>  [738,] 0.4620837 0.6096883 0.6418558 #>  [739,] 0.7297890 0.8182388 0.8289834 #>  [740,] 1.0767159 1.0794434 1.1015694 #>  [741,] 0.6713057 0.7840297 0.8121408 #>  [742,] 0.6291464 0.6786938 0.6987714 #>  [743,] 0.6544143 0.6776456 0.7130871 #>  [744,] 0.6446493 0.6709515 0.6742549 #>  [745,] 1.0925961 1.1753125 1.1968564 #>  [746,] 0.4931023 0.5470389 0.5511702 #>  [747,] 1.1081919 1.1151940 1.1648702 #>  [748,] 0.8590732 0.8620429 0.8707426 #>  [749,] 2.1235457 2.1551517 2.2172282 #>  [750,] 0.7274885 0.7314188 0.7612548 #>  [751,] 1.2563893 1.2794365 1.2917452 #>  [752,] 0.8353474 0.8692183 0.8894801 #>  [753,] 0.6914093 0.7098420 0.7184492 #>  [754,] 0.6481501 0.7411144 0.7562251 #>  [755,] 0.9768049 0.9806201 0.9909178 #>  [756,] 1.7163732 1.7541153 1.8457823 #>  [757,] 0.9624285 0.9707040 0.9715642 #>  [758,] 0.9784889 0.9891589 0.9942499 #>  [759,] 1.2930295 1.3189623 1.3296776 #>  [760,] 0.8508129 0.9489323 0.9814693 #>  [761,] 0.6463231 0.6483283 0.6637134 #>  [762,] 0.5834604 0.6088368 0.6383551 #>  [763,] 0.6066992 0.6217337 0.6294513 #>  [764,] 1.1734119 1.1893098 1.2072435 #>  [765,] 0.8825166 0.8862550 0.9008699 #>  [766,] 1.5346162 1.5430535 1.5995332 #>  [767,] 0.7367394 0.7563018 0.7785785 #>  [768,] 0.8556421 0.8607998 0.8825974 #>  [769,] 0.8978137 0.9593798 0.9594456 #>  [770,] 0.5539483 0.5704797 0.5787882 #>  [771,] 0.6280613 0.6608675 0.6786759 #>  [772,] 1.0121614 1.0158847 1.0193493 #>  [773,] 1.0163836 1.0384575 1.0633730 #>  [774,] 0.7826744 0.7886001 0.8163242 #>  [775,] 0.8129792 0.8195663 0.8242172 #>  [776,] 0.8049425 0.8191020 0.8345838 #>  [777,] 0.8699080 0.9120973 0.9217011 #>  [778,] 1.0405190 1.0507727 1.0508686 #>  [779,] 0.7202987 0.7344837 0.7531549 #>  [780,] 0.5066802 0.5189158 0.5352654 #>  [781,] 1.3021742 1.3134598 1.3477393 #>  [782,] 0.7139990 0.7365014 0.7515671 #>  [783,] 0.5994176 0.5994369 0.6214478 #>  [784,] 0.5825139 0.5987487 0.5993502 #>  [785,] 0.9108976 0.9218970 0.9281638 #>  [786,] 0.8189061 0.8553429 0.8632394 #>  [787,] 0.7447475 0.8019101 0.8062966 #>  [788,] 0.6052589 0.6623913 0.6730858 #>  [789,] 0.6503719 0.6567827 0.6780329 #>  [790,] 0.5066802 0.5221259 0.5439227 #>  [791,] 1.1745096 1.2105194 1.2921329 #>  [792,] 0.6619993 0.6665641 0.6781264 #>  [793,] 0.5053420 0.5056296 0.5100396 #>  [794,] 0.5475722 0.5884176 0.5888366 #>  [795,] 0.9243577 0.9310811 0.9413705 #>  [796,] 0.5455971 0.5891893 0.5945936 #>  [797,] 0.7375290 0.7669405 0.8136884 #>  [798,] 1.1152411 1.1188415 1.1472062 #>  [799,] 0.6719767 0.6851759 0.6852865 #>  [800,] 1.1934423 1.2281478 1.2291469 #>  [801,] 0.5053420 0.5206923 0.5220304 #>  [802,] 0.7426401 0.7521436 0.7586472 #>  [803,] 1.1442447 1.1596929 1.1981744 #>  [804,] 1.3081984 1.3090885 1.3596680 #>  [805,] 0.6768424 0.6959722 0.7028574 #>  [806,] 0.6376368 0.7855045 0.8009395 #>  [807,] 0.5329278 0.5807157 0.6997274 #>  [808,] 1.1180750 1.1250380 1.1307023 #>  [809,] 1.8299338 1.8368054 1.8644294 #>  [810,] 0.5854856 0.6038059 0.6097186 #>  [811,] 0.7160144 0.7371898 0.7868989 #>  [812,] 0.7208816 0.7214171 0.7698611 #>  [813,] 1.0012189 1.0124799 1.0343231 #>  [814,] 1.5140191 1.5390155 1.6060393 #>  [815,] 0.5719801 0.5765950 0.6014012 #>  [816,] 0.8583850 0.8702248 0.8822194 #>  [817,] 0.8611776 0.8649329 0.8661589 #>  [818,] 0.9625194 0.9716051 0.9724347 #>  [819,] 0.5584441 0.6213532 0.6241279 #>  [820,] 1.3111551 1.3331311 1.3696013 #>  [821,] 0.4247537 0.4283122 0.4311260 #>  [822,] 0.6406493 0.6500004 0.6727601 #>  [823,] 0.8670282 0.9150336 0.9179197 #>  [824,] 1.2345009 1.2796798 1.2904966 #>  [825,] 0.9741229 1.0226902 1.0481047 #>  [826,] 0.5161449 0.5231141 0.5607576 #>  [827,] 0.8977731 0.9104393 0.9676630 #>  [828,] 0.6599498 0.6714740 0.7131149 #>  [829,] 1.5671280 1.5958666 1.6843121 #>  [830,] 0.6459516 0.6481295 0.6749395 #>  [831,] 0.8295159 0.9107007 0.9118904 #>  [832,] 0.6426890 0.6431015 0.6812781 #>  [833,] 0.6999043 0.7187784 0.7244061 #>  [834,] 0.4329583 0.4946602 0.5577018 #>  [835,] 1.3801660 1.3814285 1.3985668 #>  [836,] 0.9609607 1.1151065 1.1232381 #>  [837,] 0.6084786 0.6156311 0.6416995 #>  [838,] 0.9678764 0.9762165 0.9855130 #>  [839,] 1.0501064 1.0597368 1.0667170 #>  [840,] 0.5174615 0.5386406 0.5547267 #>  [841,] 0.7475867 0.7701968 0.7852482 #>  [842,] 0.7059222 0.7497361 0.7501835 #>  [843,] 1.1844298 1.3052446 1.3078718 #>  [844,] 0.8742576 0.9196237 0.9594456 #>  [845,] 0.5652265 0.6257288 0.6326412 #>  [846,] 1.3386203 1.3839337 1.3856525 #>  [847,] 0.6249506 0.6402600 0.6403005 #>  [848,] 1.1466205 1.1948941 1.1975840 #>  [849,] 0.5274160 0.5325935 0.5510590 #>  [850,] 0.6577861 0.6664406 0.6716763 #>  [851,] 0.9115275 0.9304820 0.9591916 #>  [852,] 0.5456999 0.5468248 0.5475722 #>  [853,] 0.7099608 0.7129410 0.7162967 #>  [854,] 0.8730761 0.8787716 0.9189333 #>  [855,] 0.7826744 0.7991004 0.8075759 #>  [856,] 1.5524143 1.5976263 1.6098767 #>  [857,] 0.6015055 0.6157499 0.6335730 #>  [858,] 0.7644309 0.7681191 0.8258210 #>  [859,] 1.2846227 1.2930661 1.2943769 #>  [860,] 0.7384802 0.7630708 0.7935590 #>  [861,] 0.6653476 0.6956442 0.6961646 #>  [862,] 0.4732793 0.5404666 0.5470389 #>  [863,] 0.8035524 0.8252103 0.8335693 #>  [864,] 0.9294561 1.0775018 1.0955893 #>  [865,] 0.5849814 0.5944924 0.6007946 #>  [866,] 0.5825964 0.5989313 0.6345245 #>  [867,] 0.6115714 0.6295589 0.6551473 #>  [868,] 0.7557889 0.7664958 0.7772167 #>  [869,] 0.9967808 1.0041083 1.0863151 #>  [870,] 1.0598272 1.0974567 1.1192879 #>  [871,] 0.6621470 0.6820651 0.7049392 #>  [872,] 0.5755419 0.5777749 0.6033637 #>  [873,] 0.9195576 0.9463128 0.9612616 #>  [874,] 0.6008911 0.6189313 0.6234639 #>  [875,] 0.6308935 0.6519247 0.7282510 #>  [876,] 0.9926123 1.0486008 1.0497778 #>  [877,] 0.5810066 0.5841283 0.5850655 #>  [878,] 0.7373227 0.7900123 0.8185754 #>  [879,] 0.6256642 0.6412380 0.6585862 #>  [880,] 0.6076184 0.6496542 0.6502464 #>  [881,] 0.9518128 0.9529206 0.9678827 #>  [882,] 0.5661919 0.5927913 0.6121432 #>  [883,] 0.6395726 0.6623249 0.6656604 #>  [884,] 0.8115553 0.8343006 0.8529159 #>  [885,] 1.1111980 1.1254821 1.1605266 #>  [886,] 0.5581127 0.5840682 0.6036394 #>  [887,] 0.6566531 0.6818557 0.7025152 #>  [888,] 0.8286382 0.8352073 0.9095717 #>  [889,] 0.5531305 0.5744406 0.6258908 #>  [890,] 0.8642787 0.8796343 0.9094020 #>  [891,] 0.6839282 0.6939164 0.7095014 #>  [892,] 1.5317893 1.5489303 1.5740127 #>  [893,] 0.9103780 0.9194374 0.9423361 #>  [894,] 0.9404797 1.0293842 1.0889476 #>  [895,] 1.2558508 1.2565452 1.2787837 #>  [896,] 1.4650669 1.5067914 1.5598404 #>  [897,] 0.4965961 0.5016970 0.5149963 #>  [898,] 0.6054276 0.6429881 0.6928614 #>  [899,] 0.5167508 0.5733566 0.6112863 #>  [900,] 0.7144465 0.7182944 0.8127992 #>  [901,] 0.9493937 1.0475107 1.0996935 #>  [902,] 1.1299976 1.1337776 1.1521135 #>  [903,] 0.8950361 0.9143072 0.9585323 #>  [904,] 0.8763269 0.8805288 0.8934997 #>  [905,] 0.8014286 0.8203869 0.8247256 #>  [906,] 0.5307431 0.5394292 0.5587740 #>  [907,] 0.7646705 0.7859571 0.8214114 #>  [908,] 1.0180352 1.0458498 1.0981911 #>  [909,] 1.0016601 1.0336192 1.0345606 #>  [910,] 0.8727917 0.9071608 0.9743492 #>  [911,] 0.7396918 0.7742714 0.8059456 #>  [912,] 0.6082973 0.6442239 0.6659218 #>  [913,] 1.2593992 1.2683980 1.2741215 #>  [914,] 0.9763766 1.0066649 1.0644944 #>  [915,] 0.8406561 0.8529159 0.8624085 #>  [916,] 0.9508022 0.9921804 1.0059785 #>  [917,] 0.9615050 0.9926525 1.0428204 #>  [918,] 1.4158221 1.4554805 1.4594704 #>  [919,] 0.8878980 0.9639582 1.0028009 #>  [920,] 0.8355546 0.8800045 0.8941680 #>  [921,] 0.7608756 0.7742453 0.8035524 #>  [922,] 1.0076073 1.0131699 1.0232153 #>  [923,] 0.6538371 0.6542717 0.6630137 #>  [924,] 0.6020420 0.6241627 0.6839593 #>  [925,] 0.7009999 0.7144465 0.7890546 #>  [926,] 0.8945547 0.9134393 0.9165667 #>  [927,] 0.6294513 0.6728448 0.6882586 #>  [928,] 0.6415186 0.6521944 0.6672577 #>  [929,] 0.6645064 0.6728136 0.6931976 #>  [930,] 0.6801378 0.6989154 0.7222277 #>  [931,] 0.7297793 0.7584077 0.7629217 #>  [932,] 1.4149121 1.4187559 1.4436164 #>  [933,] 0.5934170 0.6082230 0.6135332 #>  [934,] 0.4789620 0.5189158 0.5420218 #>  [935,] 0.6406493 0.7072381 0.7370671 #>  [936,] 0.7101963 0.7128224 0.7176614 #>  [937,] 0.8050569 0.8177715 0.8355546 #>  [938,] 0.5499238 0.5733566 0.5783893 #>  [939,] 0.8099435 0.8120634 0.8306977 #>  [940,] 0.8018398 0.8032656 0.8158670 #>  [941,] 0.6893857 0.7015580 0.7885166 #>  [942,] 0.9854565 1.0132067 1.0143681 #>  [943,] 0.6972208 0.7271152 0.8156688 #>  [944,] 0.6561348 0.7102944 0.7204136 #>  [945,] 0.9598662 0.9753323 0.9797329 #>  [946,] 0.7835987 0.8586754 0.8794943 #>  [947,] 2.0655328 2.0983987 2.1680872 #>  [948,] 0.7474080 0.7694710 0.7785425 #>  [949,] 0.6337819 0.6501910 0.6693342 #>  [950,] 1.2143293 1.2326695 1.2333050 #>  [951,] 1.5127487 1.5175339 1.5451652 #>  [952,] 0.5687824 0.5834604 0.6075109 #>  [953,] 2.0680514 2.1032104 2.1127819 #>  [954,] 0.8536118 0.8737991 0.8843137 #>  [955,] 1.1355357 1.1414634 1.1447818 #>  [956,] 0.6731743 0.6833588 0.6846343 #>  [957,] 0.8210491 0.8680384 0.9074814 #>  [958,] 0.4766352 0.5231800 0.5971396 #>  [959,] 0.9884408 0.9945522 1.0507357 #>  [960,] 0.6764662 0.6949051 0.6990531 #>  [961,] 0.6402600 0.6618842 0.6737893 #>  [962,] 0.8616473 0.8718684 0.9045195 #>  [963,] 0.7323194 0.7523450 0.7679169 #>  [964,] 0.5694063 0.6622882 0.6736840 #>  [965,] 0.5915993 0.6074936 0.6083842 #>  [966,] 1.3336842 1.3983629 1.4072210 #>  [967,] 0.7494199 0.8467284 0.8489341 #>  [968,] 0.9219765 0.9923914 1.0021881 #>  [969,] 0.6448016 0.6556211 0.6559817 #>  [970,] 1.1830361 1.2009058 1.2622430 #>  [971,] 0.8130419 0.8161219 0.8887966 #>  [972,] 1.1412514 1.1639985 1.1699191 #>  [973,] 0.6141009 0.6363827 0.6433447 #>  [974,] 0.5336354 0.5450219 0.5844964 #>  [975,] 0.7270387 0.7289464 0.8203647 #>  [976,] 0.8358559 0.8444300 0.9344715 #>  [977,] 0.8260109 0.8284297 0.8353497 #>  [978,] 1.7207541 1.7237456 1.7472047 #>  [979,] 0.6082230 0.6542949 0.6644111 #>  [980,] 1.0109498 1.0531495 1.0648398 #>  [981,] 1.1983752 1.2002157 1.2047966 #>  [982,] 0.6815153 0.6864827 0.7006269 #>  [983,] 1.1585249 1.1864220 1.1868981 #>  [984,] 0.9450763 0.9884720 0.9997117 #>  [985,] 0.8474627 0.8545195 0.8580885 #>  [986,] 1.1036654 1.1774915 1.2023256 #>  [987,] 0.7187784 0.7369195 0.7448406 #>  [988,] 0.5512114 0.5520172 0.7349225 #>  [989,] 0.7279254 0.7797859 0.8205810 #>  [990,] 0.8681607 0.9293016 0.9463183 #>  [991,] 0.8403195 0.8624474 0.8803382 #>  [992,] 0.6113145 0.6488143 0.6873503 #>  [993,] 0.6404178 0.6471349 0.7015847 #>  [994,] 1.0865217 1.0932648 1.1152656 #>  [995,] 0.8488140 0.8588565 0.8678095 #>  [996,] 0.7967628 0.8420562 0.9025528 #>  [997,] 1.0771834 1.0982860 1.1054741 #>  [998,] 1.5101174 1.5594214 1.5999814 #>  [999,] 0.8416457 0.8636713 0.9527628 #> [1000,] 1.1018125 1.1059846 1.1261027 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure CyTOF panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) CyTOF panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   rsplit_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `rsplit_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 0"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 1e-10"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample   cd45 pstat5   cd34 outcome class  multiclass event time_to_event #>    <chr>   <dbl>  <dbl>  <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 91     0.713   0.712 0.117     5.74 class1 class3         1          6.67 #>  2 88     0.658   0.174 0.971     3.31 class2 class3         1          8.51 #>  3 72     0.304   0.815 0.856     2.95 class2 class3         1          8.87 #>  4 30     0.660   0.584 0.411     3.41 class2 class1         0         10.5  #>  5 8      0.947   0.716 0.354     5.76 class1 class1         0         10.5  #>  6 3      0.0229  0.373 0.0687    1.00 class2 class1         0          9.62 #>  7 53     0.241   0.979 0.733     3.81 class1 class2         1         11.3  #>  8 4      0.550   0.849 0.144     3.94 class1 class1         0         11.1  #>  9 48     0.380   0.192 0.910     2.79 class2 class2         1          8.81 #> 10 44     0.268   0.318 0.0435    1.02 class2 class2         1         12.9  #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>               cd45       pstat5        cd34 #>   [1,] -0.72543123 -0.343235098 -0.23316340 #>   [2,] -1.57628830 -0.236041014  0.23702346 #>   [3,]  1.19331347 -1.811005740 -1.58216480 #>   [4,] -1.52697253 -1.359871748 -0.77457165 #>   [5,] -0.44004105  1.084408981 -0.62234559 #>   [6,]  0.83939510 -1.415722153 -1.75644481 #>   [7,] -1.37585887  0.655704727  0.17308201 #>   [8,] -0.01669310  1.931789184 -1.09779958 #>   [9,] -0.78972994  0.956127897  1.53829142 #>  [10,] -1.22963768  0.249973613  1.01645057 #>  [11,]  0.68150045 -0.463319791 -0.02935546 #>  [12,]  0.33521831 -0.204638344  0.92034202 #>  [13,] -0.34833280  1.653665313  0.01527100 #>  [14,]  1.57759772 -1.016229470  0.35894356 #>  [15,]  1.25357198 -0.265394579  0.52057898 #>  [16,] -1.30054589  0.287953709  0.59364460 #>  [17,] -0.08436566  1.994336500 -0.52756767 #>  [18,]  0.65493026  1.575287318  1.09101449 #>  [19,] -0.41952720 -0.782257466 -0.37615182 #>  [20,]  1.34741207 -0.276313324 -0.15021812 #>  [21,] -0.54648016  0.376544594  1.25933794 #>  [22,] -0.85960073 -0.162761387  1.20750804 #>  [23,] -1.01783381 -0.843240626 -1.50019467 #>  [24,]  0.11302937  0.060219901  0.34716204 #>  [25,]  0.27523313  1.797720683 -1.70518915 #>  [26,] -0.31925966 -1.000106706  0.89479361 #>  [27,] -0.68369260 -0.726888795 -1.10880490 #>  [28,] -0.15347183  1.213205005  0.28172055 #>  [29,] -0.10994212  0.424762830  1.16022530 #>  [30,] -0.07162291  0.191382850  1.26121579 #>  [31,]  0.13188557 -1.503301386  0.87683848 #>  [32,]  0.30645938  0.276729141 -0.50550360 #>  [33,]  0.86848488  0.621131487  0.21593985 #>  [34,]  0.96901918 -1.765394222 -0.78448199 #>  [35,] -0.02397263  0.710668159 -0.62801171 #>  [36,] -0.48922041  1.305332530  0.52546854 #>  [37,]  0.20867105  0.662915265  0.37980836 #>  [38,] -0.81950216 -0.634718114 -0.22431095 #>  [39,]  0.91717229 -0.534200432 -0.52068393 #>  [40,]  0.99440355 -0.323644417 -1.88950808 #>  [41,]  1.38355277  0.342644935  0.60320367 #>  [42,] -0.29860107  0.182325181 -0.39182660 #>  [43,] -1.12843674  1.284315583  0.65434335 #>  [44,] -0.07281327 -1.449078773 -1.31075852 #>  [45,] -1.04458895  1.644612719  1.60701921 #>  [46,]  1.55547222  1.679299762  1.60498559 #>  [47,] -1.12298904  1.709889949 -0.95000891 #>  [48,]  1.45768087  0.395969864  0.41520072 #>  [49,]  1.45692104 -1.117692396  0.29266089 #>  [50,] -0.53301063  0.321811849 -1.69173417 #>  [51,]  0.73080318 -1.636975816  1.35437352 #>  [52,] -0.80707319  0.695360807 -0.25198510 #>  [53,]  1.46909119  0.501709463 -1.25524721 #>  [54,]  1.36662605 -0.007679129  0.39889732 #>  [55,]  1.53433073 -0.532318273 -1.91645419 #>  [56,]  1.55461587 -1.800656817 -0.69924110 #>  [57,] -0.13184983 -0.429532517  0.19482883 #>  [58,] -0.53681242 -1.030654672  0.76300928 #>  [59,] -0.91973378  0.189807017 -0.66750900 #>  [60,] -0.43379035 -1.235512520  1.59921806 #>  [61,]  1.28618706 -0.849903508 -1.57175518 #>  [62,] -0.36540405 -0.244199305  1.32179497 #>  [63,] -1.39613304 -0.082722763 -0.22569055 #>  [64,] -1.03146691  0.431541834 -1.89772698 #>  [65,]  1.40711452  0.619511178 -0.46931775 #>  [66,] -0.24839355 -1.158870093  0.90402530 #>  [67,] -1.07643986 -1.652439360  1.19337843 #>  [68,]  1.61214309 -1.533153227  1.34158771 #>  [69,]  0.54549544 -0.411924776 -0.25733601 #>  [70,]  0.50041575 -0.334606710  0.62334712 #>  [71,] -1.53278211 -0.186980695  0.50220931 #>  [72,]  1.16828318  0.194487884 -0.73684698 #>  [73,] -1.32869059 -0.064496003 -0.65619971 #>  [74,]  0.04183397  0.175344704  0.13435395 #>  [75,]  1.52027454  0.818386912  0.94398459 #>  [76,] -1.08319809 -0.401098388  0.13300280 #>  [77,] -1.59956994  0.050490487 -1.36287229 #>  [78,]  1.41439667  1.433257500 -0.86790527 #>  [79,]  0.89086542  0.946490169 -0.06331417 #>  [80,]  0.61593927  0.973154190  1.33699053 #>  [81,]  0.70545890  0.275930902  1.21202419 #>  [82,] -0.65315244  0.482065738  1.28018900 #>  [83,]  1.45803748  1.118496261 -0.62718056 #>  [84,]  1.23001479 -0.503078801 -0.84879019 #>  [85,]  0.75734764 -1.369101930 -1.66603536 #>  [86,]  0.15872754  1.345648390 -0.76418201 #>  [87,] -1.33660050 -0.471592220 -1.08772363 #>  [88,] -1.50055848  1.262550419  0.46818093 #>  [89,] -0.49159562 -1.227663140  1.13903843 #>  [90,]  1.19836814 -0.590514037  0.98207860 #>  [91,] -1.63705739  0.020308157  0.83591618 #>  [92,] -1.64314730 -0.681587354 -1.29192729 #>  [93,] -0.10351368 -1.755108757  1.61939981 #>  [94,] -0.96341010  1.091187450 -1.18146893 #>  [95,]  0.43269857 -1.495646131  0.52905222 #>  [96,] -0.20194147  0.920664170  0.87825443 #>  [97,]  0.82752539  1.350593649  0.88232053 #>  [98,] -0.86748183 -1.341333353 -0.76120267 #>  [99,] -0.42136892  0.476623591  0.32597401 #> [100,] -1.50789066  0.300065875 -1.46079192"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  4.7045725 -0.3076685  2.7729305  5.2087277  4.1898952  3.7998869 #>   [7]  3.9412673  4.5475575  0.9653002  1.1304605  2.8758784  3.8395193 #>  [13]  4.1938064  2.0620011  4.7442448  1.4623367  6.1014799  5.9950353 #>  [19]  1.3606358  3.9204755  6.8475283 -0.4556057  5.3461829  2.6052097 #>  [25]  1.6416097  6.7126333  3.7498088  3.2440015  5.1437946  3.8685888 #>  [31]  5.4486184  4.2381895  4.2221662  4.9768264  2.7901242  2.2080438 #>  [37]  4.5738440  3.2019016  2.1178716  0.2237773  4.5392904  2.9590192 #>  [43]  3.4199830  7.6574931  1.3881337  4.3542148  4.2519858  6.3288218 #>  [49]  3.2836105  3.8214378  5.7601024  1.2372285  3.3957448  6.6741492 #>  [55]  2.0872555  0.7125558  4.0409229  2.6011710  3.0517876  1.6981925 #>  [61]  4.6042773  2.4328681  3.0043954  4.3505517  2.6627092  1.3991347 #>  [67]  4.2702162  5.0010833  3.4046163  3.6121506  5.7314418  2.2054295 #>  [73]  2.6909126  4.0648235  5.2992085  4.2689171  3.7797170  0.1864928 #>  [79]  2.4990238  3.8501298  5.7738339  4.2258925  0.9311647  1.4839254 #>  [85]  3.7289173  6.6798630  2.9899115  3.6221257  5.6664784  2.4929275 #>  [91]  3.7741038  1.3628345  3.5353793  0.5262128  3.8031595  2.0565587 #>  [97]  2.8986348  1.5152303  6.0377491  6.1031122"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # … with 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode CyTOF measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing CyTOF data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"      ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction  )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>      cd45    cd38   cd34    cd19 cluster_id .flowsom_metacluster #>     <dbl>   <dbl>  <dbl>   <dbl> <chr>      <chr>                #>  1  0.477 -1.23   -0.477  0.420  i          2                    #>  2 -0.268  0.932  -1.46   0.939  z          1                    #>  3  0.254  0.599   0.595 -0.146  c          2                    #>  4  0.862  0.401   1.52   1.24   w          1                    #>  5 -0.809 -1.90    0.536  1.48   i          2                    #>  6 -0.505 -0.566  -0.353  0.687  j          2                    #>  7 -1.22  -0.710  -1.52  -0.955  m          2                    #>  8 -1.37   0.630   0.435  2.08   s          3                    #>  9  1.06  -0.0863 -2.08  -0.0217 d          1                    #> 10 -0.968 -0.363  -1.89   0.664  h          2                    #> # … with 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>      cd45    cd38   cd34    cd19 cluster_id .phenograph_metacluster #>     <dbl>   <dbl>  <dbl>   <dbl> <chr>      <chr>                   #>  1  0.477 -1.23   -0.477  0.420  i          3                       #>  2 -0.268  0.932  -1.46   0.939  z          2                       #>  3  0.254  0.599   0.595 -0.146  c          3                       #>  4  0.862  0.401   1.52   1.24   w          4                       #>  5 -0.809 -1.90    0.536  1.48   i          3                       #>  6 -0.505 -0.566  -0.353  0.687  j          3                       #>  7 -1.22  -0.710  -1.52  -0.955  m          3                       #>  8 -1.37   0.630   0.435  2.08   s          1                       #>  9  1.06  -0.0863 -2.08  -0.0217 d          2                       #> 10 -0.968 -0.363  -1.89   0.664  h          4                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 1                      #>  2 4                      #>  3 4                      #>  4 7                      #>  5 9                      #>  6 7                      #>  7 9                      #>  8 1                      #>  9 7                      #> 10 7                      #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 2                    #>  2 2                    #>  3 3                    #>  4 5                    #>  5 2                    #>  6 1                    #>  7 1                    #>  8 3                    #>  9 3                    #> 10 1                    #> # … with 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 5                    #>  2 5                    #>  3 2                    #>  4 3                    #>  5 1                    #>  6 4                    #>  7 4                    #>  8 2                    #>  9 2                    #> 10 4                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 5                         #>  2 1                         #>  3 1                         #>  4 2                         #>  5 6                         #>  6 4                         #>  7 9                         #>  8 7                         #>  9 7                         #> 10 6                         #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 9                   #>  2 6                   #>  3 3                   #>  4 7                   #>  5 1                   #>  6 5                   #>  7 5                   #>  8 6                   #>  9 8                   #> 10 8                   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 1                       #>  2 2                       #>  3 2                       #>  4 1                       #>  5 3                       #>  6 4                       #>  7 4                       #>  8 3                       #>  9 1                       #> 10 2                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   point_alpha = 1,   theme = ggplot2::theme_bw(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `...`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (pass tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". point_alpha numeric value 0 1 set transparency (alpha) point scatterplot. theme ggplot2 theme apply scatterplot. Defaults theme_bw ... Optional additional arguments pass tof_reduce_dimensions.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         pca_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"tsne\",         tsne_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments pass ggraph","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"tof_plot_cluster_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_cluster_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"tof_plot_cluster_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... currently used.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )   # use the same layout as the plot above to color the same  # tree using a different marker  layout_cd45 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"tof_plot_cluster_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )   attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"   # create the volcano plot  volcano <- tof_plot_cluster_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(        tof_tibble = sim_data,        cluster_col = cluster_id,        group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1 0.898 #>  2 0.706 #>  3 4.32  #>  4 4.39  #>  5 4.07  #>  6 2.02  #>  7 5.24  #>  8 3.10  #>  9 1.98  #> 10 2.61  #> 11 2.07  #> 12 6.48  #> 13 2.28  #> 14 4.76  #> 15 3.84  #> 16 3.46  #> 17 3.51  #> 18 2.76  #> 19 1.08  #> 20 4.26"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw CyTOF data. — tof_preprocess","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts directly measured mass cytometer using user-provided function. can used perform standard pre-processing steps CyTOF data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector non-quoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read CyTOF data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing CyTOF data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents CyTOF measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads CyTOF data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read CyTOF data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction single-cell data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>      cd45   cd38   cd34    cd19   .pc1   .pc2   .pc3    .pc4 #>     <dbl>  <dbl>  <dbl>   <dbl>  <dbl>  <dbl>  <dbl>   <dbl> #>  1  0.155  1.57   1.37   0.358  -0.401  1.76  -1.02   0.792  #>  2  0.441  1.14  -0.162 -0.959   0.761  0.204 -1.21  -0.0295 #>  3 -1.70   0.350 -0.274 -0.265  -0.793  0.240 -0.314 -1.50   #>  4  0.223  0.301  0.801 -1.09   -0.299 -0.148 -0.898  0.670  #>  5 -0.150 -1.15  -0.675  0.712   0.213 -0.186  1.50  -0.523  #>  6  0.754  0.719  0.127 -0.755   0.666  0.143 -0.828  0.460  #>  7 -1.32  -1.45   0.443  0.530  -1.47  -0.164  1.32  -0.454  #>  8  0.789  0.475  0.787  0.0188  0.174  0.683 -0.311  0.983  #>  9 -0.776 -0.897  0.789 -0.274  -1.24  -0.300  0.395  0.125  #> 10  0.503  0.484 -0.660 -0.746   1.01  -0.186 -0.514 -0.261  #> # … with 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>      cd45   cd38   cd34    cd19 .tsne_1 .tsne_2 #>     <dbl>  <dbl>  <dbl>   <dbl>   <dbl>   <dbl> #>  1  0.155  1.57   1.37   0.358     4.34  -0.464 #>  2  0.441  1.14  -0.162 -0.959     3.10  -1.84  #>  3 -1.70   0.350 -0.274 -0.265    -2.64   1.60  #>  4  0.223  0.301  0.801 -1.09      2.68   0.518 #>  5 -0.150 -1.15  -0.675  0.712    -2.56  -1.29  #>  6  0.754  0.719  0.127 -0.755     2.65  -1.46  #>  7 -1.32  -1.45   0.443  0.530    -3.67   2.40  #>  8  0.789  0.475  0.787  0.0188    2.58  -0.472 #>  9 -0.776 -0.897  0.789 -0.274    -1.20   2.29  #> 10  0.503  0.484 -0.660 -0.746     1.81  -2.35  #> # … with 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>      cd45   cd38   cd34    cd19 .umap1 .umap2 #>     <dbl>  <dbl>  <dbl>   <dbl>  <dbl>  <dbl> #>  1  0.155  1.57   1.37   0.358  -3.36  -0.716 #>  2  0.441  1.14  -0.162 -0.959  -2.28  -1.34  #>  3 -1.70   0.350 -0.274 -0.265   0.927  2.25  #>  4  0.223  0.301  0.801 -1.09   -2.04  -2.46  #>  5 -0.150 -1.15  -0.675  0.712   1.45   0.344 #>  6  0.754  0.719  0.127 -0.755  -1.54  -2.43  #>  7 -1.32  -1.45   0.443  0.530   2.64  -0.445 #>  8  0.789  0.475  0.787  0.0188 -0.792 -2.97  #>  9 -0.776 -0.897  0.789 -0.274   2.79   0.716 #> 10  0.503  0.484 -0.660 -0.746  -1.96  -0.694 #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on single-cell data — tof_reduce_pca","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>      .pc1   .pc2 #>     <dbl>  <dbl> #>  1  1.96   0.303 #>  2  0.819 -1.38  #>  3  0.758 -1.59  #>  4 -0.339  1.86  #>  5 -0.201 -1.77  #>  6 -0.992  0.931 #>  7  0.952  1.96  #>  8 -1.48  -0.847 #>  9 -1.28  -0.443 #> 10  0.468  0.119 #> # … with 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>        PC1    PC2    PC3    PC4 #>      <dbl>  <dbl>  <dbl>  <dbl> #>  1 -0.0834 -0.401  0.428  1.22  #>  2 -1.42    1.71   1.14  -0.480 #>  3  1.49   -0.262 -0.422 -0.117 #>  4 -0.285  -1.28   0.568  1.53  #>  5  2.50    1.62   0.921  0.756 #>  6  0.977   0.655  0.159  0.734 #>  7 -1.87   -0.749 -0.353  0.484 #>  8 -1.14    0.804 -1.28  -0.832 #>  9 -1.36    1.07   0.663 -0.485 #> 10  2.26   -0.266 -1.08  -0.244 #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -6.41   -5.09  #>  2   0.162  -7.62  #>  3  -4.06    0.532 #>  4  -4.26    6.31  #>  5   0.726  -6.76  #>  6   2.77    6.56  #>  7  -1.39    1.31  #>  8  -5.50    3.68  #>  9  -1.32    6.77  #> 10   6.66    0.554 #> # … with 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   -1.72   5.17  #>  2   -3.50   6.54  #>  3   -7.56   3.09  #>  4   -6.81   3.74  #>  5   -4.58   3.76  #>  6    8.83  -4.14  #>  7    5.01  -0.679 #>  8  -11.1    3.55  #>  9  -11.9    1.12  #> 10    4.49  -7.60  #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1   1.65  3.25  #>  2  -4.43 -1.01  #>  3  -1.42  2.48  #>  4  -2.93 -0.265 #>  5  -1.85  3.33  #>  6   2.23  2.14  #>  7   2.32  1.32  #>  8   2.29  1.95  #>  9  -3.27  0.745 #> 10  -2.16 -0.150 #> # … with 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   5.03   -0.436 #>  2  -3.64   -6.17  #>  3   0.355  -1.66  #>  4  -4.59   -3.69  #>  5   5.63    7.24  #>  6   3.21    0.735 #>  7   4.35    1.65  #>  8   3.02    1.91  #>  9  -5.82   -2.64  #> 10  -1.60   -1.72  #> # … with 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>      UMAP1  UMAP2 #>      <dbl>  <dbl> #>  1  0.602  -1.07  #>  2  3.45    0.949 #>  3 -3.66   -1.37  #>  4  0.983  -2.82  #>  5 -2.76    2.24  #>  6  0.0924  0.578 #>  7 -2.85   -0.776 #>  8 -1.89   -1.19  #>  9  1.27    3.79  #> 10 -3.18    1.87  #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing CyTOF data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              0 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # … with 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.7 #>  2            0.9 #>  3            0.8 #>  4            0.4 #>  5            0.3 #>  6            0.6 #>  7            0.6 #>  8            0.5 #>  9            0.2 #> 10            0.3 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.4 #>  2            0.7 #>  3            1   #>  4            0   #>  5            0   #>  6            0.4 #>  7            1   #>  8            1   #>  9            0.9 #> 10            0.2 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split CyTOF data into a training and test set — tof_split_data","title":"Split CyTOF data into a training and test set — tof_split_data","text":"Split CyTOF data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split CyTOF data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split CyTOF data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/38]> Bootstrap01 #>  2 <split [100/36]> Bootstrap02 #>  3 <split [100/39]> Bootstrap03 #>  4 <split [100/37]> Bootstrap04 #>  5 <split [100/35]> Bootstrap05 #>  6 <split [100/37]> Bootstrap06 #>  7 <split [100/38]> Bootstrap07 #>  8 <split [100/37]> Bootstrap08 #>  9 <split [100/34]> Bootstrap09 #> 10 <split [100/35]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Analysis/Assess/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 0.75 and a penalty parameter (lambda) of 3.162e-08  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)       3.60  #> 2 pstat5            1.25  #> 3 cd45              0.834 #> 4 cd34             -0.149  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 pstat5          -2.28   #> 2 cd45            -1.36   #> 3 (Intercept)      0.0579 #> 4 cd34             0.0140  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 3 × 2 #>   feature coefficient #>   <chr>         <dbl> #> 1 pstat5      -0.0958 #> 2 cd34        -0.0662 #> 3 cd45         0.0308"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>      cd45    cd38    cd34    cd19 .upsample_cluster #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>             #>  1  1.13  -1.22    1.64    1.68   a                 #>  2 -1.55   1.76    0.924  -0.346  a                 #>  3  0.945 -0.0907 -1.60    0.989  a                 #>  4 -0.163  1.20    0.675  -0.789  a                 #>  5 -0.838 -1.90   -0.209  -0.121  a                 #>  6  0.871 -0.0791  0.568  -0.0890 a                 #>  7 -1.29   0.168  -0.0522  1.74   b                 #>  8 -0.312 -0.611  -0.117  -0.492  b                 #>  9  0.676 -0.785  -0.996  -0.878  b                 #> 10  1.06  -0.817  -1.16    0.185  b                 #> # … with 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>      cd45    cd38    cd34    cd19 .upsample_cluster #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>             #>  1  1.13  -1.22    1.64    1.68   a                 #>  2 -1.55   1.76    0.924  -0.346  b                 #>  3  0.945 -0.0907 -1.60    0.989  b                 #>  4 -0.163  1.20    0.675  -0.789  b                 #>  5 -0.838 -1.90   -0.209  -0.121  a                 #>  6  0.871 -0.0791  0.568  -0.0890 b                 #>  7 -1.29   0.168  -0.0522  1.74   a                 #>  8 -0.312 -0.611  -0.117  -0.492  b                 #>  9  0.676 -0.785  -0.996  -0.878  a                 #> 10  1.06  -0.817  -1.16    0.185  b                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 a                 #>  3 b                 #>  4 a                 #>  5 b                 #>  6 a                 #>  7 a                 #>  8 b                 #>  9 b                 #> 10 b                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 b                 #>  4 a                 #>  5 b                 #>  6 b                 #>  7 a                 #>  8 b                 #>  9 b                 #> 10 b                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 a                 #>  4 a                 #>  5 a                 #>  6 a                 #>  7 a                 #>  8 a                 #>  9 b                 #> 10 a                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 b                 #>  3 b                 #>  4 a                 #>  5 a                 #>  6 b                 #>  7 a                 #>  8 a                 #>  9 b                 #> 10 b                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write cytof data to a file or to a directory of files — tof_write_data","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""}]
