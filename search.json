[{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidytof","title":"Contributing to tidytof","text":"outlines propose change tidytof. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidytof","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidytof","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidytof","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"keyes-timothy/tidytof\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidytof","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidytof","text":"Please note tidytof project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = starts_with(\"cd\"),      num_neighbors = 50L,      distance_function = \"cosine\",      method = \"phenograph\"   ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster,     metacluster_cols = starts_with(\"cd\"),     num_metaclusters = 3L,     method = \"kmeans\"   )  phenograph_clusters %>%   dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) %>%   head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 5                   2                   #> 2 H1_PhenoGraph_cluster1 5                   2                   #> 3 H1_PhenoGraph_cluster1 5                   2                   #> 4 H1_PhenoGraph_cluster1 5                   2                   #> 5 H1_PhenoGraph_cluster1 5                   2                   #> 6 H1_PhenoGraph_cluster1 5                   2 phenograph_clusters %>%    dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster1           2                    1000 #> 2 cluster3           2                    1000 #> 3 cluster2           3                     517 #> 4 cluster2           1                     483 # use the kmeans algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\"   )  # use the flowsom algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"flowsom\"   ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\",      augment = FALSE   ) %>%    head()  #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 4               #> 2 18              #> 3 4               #> 4 14              #> 5 4               #> 6 15"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"example, wanted write tidytof-style interface new clustering algorithm “supercluster”, might write something like :","code":"tof_cluster_supercluster <-    function(tof_tibble, cluster_cols, ...) {      cluster_data <- dplyr::select(tof_tibble, {{cluster_cols}})          result <-        cluster_data %>%        do_something(...) %>%        do_something_else(...)   }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"’s possible algorithm doesn’t…","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_daa","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_daa()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest","code":"daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )   significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_dea","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_dea()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_dea_* function family member: tof_dea_diffcyt tof_dea_lmm tof_dea_ttest","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     method = \"ttest\",      cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-    dea_result %>%    mutate(     log2_fc = log(mean_fc, base = 2),      log_p = -log(p_adj),      significance =        case_when(         p_adj < 0.05 & mean_fc > 1 ~ \"increased\",          p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",         TRUE ~ NA_character_       ),      marker =        str_extract(marker, \".+_\") %>%        str_remove(\"_\"),      pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")   )  volcano_data %>%    ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +    geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +    geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +   geom_point(shape = 21, size = 2) +    ggrepel::geom_text_repel(     aes(label = pair),      data = slice_head(volcano_data, n = 10L),      size = 2   ) +    scale_fill_manual(     values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),      na.value = \"#cdcdcd\"   ) +    labs(     x = \"log2(Fold-change)\",      y = \"-log10(p-value)\",      fill = NULL,      caption = \"Labels indicate the 10 most significant marker-cluster pairs\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-    phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1   16.0     1.26 #> 2    8.34   -9.99 #> 3   31.6   -16.9  #> 4   18.5   -11.1  #> 5   19.3    -2.44 #> 6   15.7   -19.2 phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   13.7   16.4   #>  2   15.5   11.0   #>  3   36.6    8.18  #>  4   17.2   -0.481 #>  5   16.6   14.3   #>  6   24.0    3.87  #>  7   17.1    9.52  #>  8   27.9    8.61  #>  9   21.0    3.58  #> 10    8.02  12.8   #> # … with 2,990 more rows phenograph_data %>%    tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1  9.43   -4.44 #>  2  8.36   -3.90 #>  3  6.99   -2.56 #>  4  3.27    2.19 #>  5  9.44   -4.19 #>  6  0.691   3.41 #>  7  9.46   -3.82 #>  8  2.25    1.71 #>  9  5.78   -1.15 #> 10  8.06   -6.03 #> # … with 2,990 more rows  phenograph_data %>%    tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23     0.868  0.978   3.49  #>  2 -0.969  -1.02     0.787  1.22    0.329 #>  3 -2.36    2.54     1.95  -0.882  -1.30  #>  4 -3.68   -0.00565 -0.962  0.410   0.788 #>  5 -4.03    2.07     0.829  1.59    5.39  #>  6 -2.59   -0.108   -1.32  -1.41   -1.24  #>  7 -1.55   -0.651    0.233  1.08    0.129 #>  8 -1.18   -0.446   -0.134 -0.771  -0.932 #>  9 -2.00   -0.485   -0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924    0.692  1.45    0.270 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # … with 2,990 more rows # 3 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23     0.868 #>  2 -0.969  -1.02     0.787 #>  3 -2.36    2.54     1.95  #>  4 -3.68   -0.00565 -0.962 #>  5 -4.03    2.07     0.829 #>  6 -2.59   -0.108   -1.32  #>  7 -1.55   -0.651    0.233 #>  8 -1.18   -0.446   -0.134 #>  9 -2.00   -0.485   -0.593 #> 10 -0.0356 -0.924    0.692 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = phenograph_cluster   ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = cd11b   ) +    ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data %>%    dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     group_cols = phenograph_cluster,      method = \"constant\",     num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     group_cols = phenograph_cluster,      method = \"prop\",     prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-    function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {      x/from[2] * to[2]   }  phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +   scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)   ) +    labs(     fill = \"relative density\"   ) phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)     ) +    labs(     fill = \"relative density\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = function(x) quantile(x = x, probs = 0.75)   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          5.18           1.32               4.32 #> 2 patient1 BCR-XL                         5.30          -0.0186             4.70 #> 3 patient2 Basal                          5.28           1.39               4.21 #> 4 patient2 BCR-XL                         5.41          -0.0201             4.36 #> 5 patient3 Basal                          5.41           1.27               4.28 #> 6 patient3 BCR-XL                         5.42          -0.0362             4.46 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # … with 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    dplyr::left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns  ddpr_patients %>%    dplyr::select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor   # and create the time_to_event and event columns for survival modeling   dplyr::mutate(     relapse_status = as.factor(relapse_status),      time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients %>%    dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-    ddpr_patients %>%    dplyr::filter(is.na(relapse_status))  ddpr_patients <-    ddpr_patients %>%    dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-    ddpr_patients %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 10,      strata = relapse_status   )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # … with 18 more rows training_classifier_metrics <-    class_mod %>%    tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod %>%    tof_plot_model() cv_classifier_metrics <-    class_mod %>%    tof_assess_model(new_data = \"tuning\")  class_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      time_col = time_to_event,      event_col = event,      model_type = \"survival\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # … with 30 more rows survival_metrics <-    survival_mod %>%    tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # … with 51 more rows survival_mod %>%    tof_plot_model() cv_survival_metrics <-   survival_mod %>%   tof_assess_model(new_data = \"tuning\") survival_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows phenograph_data %>%    # perform preprocessing   tof_preprocess() %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # … with 2 more rows phenograph_data %>%    # preprocess   tof_preprocess(transform_fun = scale) %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows  # after preprocessing and post-processing, the data are the same  # except that the re-added noise component is different for each value  phenograph_data %>%    tof_preprocess() %>%    tof_postprocess(redo_noise = TRUE) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34   cd38 #>   <dbl>  <dbl>  <dbl> #> 1  130.  2.71   0.792 #> 2  229. -0.701 10.7   #> 3  293.  4.75   1.16  #> 4  431. -0.599 12.9   #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files \"phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class()  #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show    # that the columns have been changed   select(where(is.character))  #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # … with 296 more rows phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data() %>%    tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble  # to tof_read_data phenograph_panel <-    phenograph %>%    tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data(panel_info = phenograph_panel) %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%    # create a variable representing if a cell is above or below    # the median expression level of pstat5   mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   ) phenograph_data %>%    mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting started with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"Getting started with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied CyTOF data tof_metacluster() agglomerates clusters smaller number metaclusters tof_daa() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_dea() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"Getting started with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (%>%) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers. Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data %>%    tof_preprocess() %>%   tof_cluster(     cluster_cols = starts_with(\"cd\"), # column specification     method = \"phenograph\", # method specification,    ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster, # column specification     num_metaclusters = 4, # method specification     method = \"kmeans\" # method specification   ) %>%    tof_downsample(     group_cols = .kmeans_metacluster, # column specification     num_cells = 200, # method specification     method = \"constant\" # method specification   ) %>%   tof_plot_cells_layout(     knn_cols = starts_with(\"cd\"), # column specification     color_col = .kmeans_metacluster, # column specification     num_neighbors = 7L, # method specification     node_size = 2L # method specification   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Getting started with tidytof","text":"tidytof verbs can used combination one another using pipe (%>%) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data %>%    # step 1   tof_preprocess() %>%    # step 2   tof_cluster(     cluster_cols = starts_with(\"cd\"),      method = \"phenograph\",      #num_metaclusters = 4L,      seed = 2020L   ) %>%   # step 3   tof_downsample(     group_cols = .phenograph_cluster,      method = \"constant\",      num_cells = 400   ) %>%    # step 4   tof_reduce_dimensions(method = \"tsne\") %>%    # step 5   tof_plot_cells_embedding(     embedding_cols = contains(\"tsne\"),     color_col = .phenograph_cluster    ) +    ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"Getting started with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every CyTOF analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T (2022). tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles. R package version 0.0.0, https://keyes-timothy.github.io/tidytof.","code":"@Manual{,   title = {tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles},   author = {Timothy Keyes},   year = {2022},   note = {R package version 0.0.0},   url = {https://keyes-timothy.github.io/tidytof}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-highly-reproducible-mass-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze Mass Cytometry Data Using Tidy Data Principles","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis mass cytometry (CyTOF) data. Specifically, tidytof provides easy--use pipeline handling CyTOF data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels CyTOF data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if(!require(devtools)) install.packages(\"devtools\")  devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if(!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if(!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #>  [1] \"aml\"                  \"ddpr\"                 \"ddpr_metadata.csv\"    #>  [4] \"mix\"                  \"mix2\"                 \"phenograph\"           #>  [7] \"phenograph_csv\"       \"scaffold\"             \"statistical_scaffold\" #> [10] \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.1/Resources/library/tidytof/extdata/phenograph\" phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show that the columns have been changed   select(where(is.character)) %>%    head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() %>%    head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-    phenograph %>%    tof_preprocess()  # inspect new values phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Often, CyTOF experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"phenograph_data %>%    count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     method = \"constant\",      group_cols = phenograph_cluster,      num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     method = \"prop\",     group_cols = phenograph_cluster,      prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # make a scatterplot   ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw() phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(     density_cols = c(cd34, cd38),      target_prop_cells = 0.25,      method = \"density\",    ) %>%    ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple CyTOF runs.","code":"# when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    # create a variable representing if a cell is above or below the median    # expression level of pstat5   mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters %>%    select(sample_name, .flowsom_metacluster, everything()) %>%    head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacl… phenograph_clus…    cd19 cd11b    cd34  cd45 #>   <chr>            <chr>            <chr>              <dbl> <dbl>   <dbl> <dbl> #> 1 H1_PhenoGraph_c… 7                cluster1         -0.0336 2.46   0.608   3.96 #> 2 H1_PhenoGraph_c… 7                cluster1          0.324  0.856 -0.116   4.52 #> 3 H1_PhenoGraph_c… 3                cluster1          0.532  2.67   0.909   4.76 #> 4 H1_PhenoGraph_c… 2                cluster1          0.0163 2.97   0.0725  5.15 #> 5 H1_PhenoGraph_c… 4                cluster1          0.144  2.98   0.128   4.52 #> 6 H1_PhenoGraph_c… 2                cluster1          0.742  3.41   0.336   5.71 #> # … with 19 more variables: cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, cd7 <dbl>, #> #   cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, #> #   pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, #> #   pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters %>%    count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 24 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster2           12                     334 #>  2 cluster3           16                     304 #>  3 cluster3           15                     300 #>  4 cluster2           13                     257 #>  5 cluster3           11                     221 #>  6 cluster1           2                      204 #>  7 cluster1           5                      194 #>  8 cluster1           4                      176 #>  9 cluster1           6                      166 #> 10 cluster2           18                     145 #> # … with 14 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) %>%    head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 14                   #> 2 13                   #> 3 14                   #> 4 19                   #> 5 18                   #> 6 19"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-    phenograph_clusters %>%    tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1  -2.68    -13.3 #> 2   1.54    -12.3 #> 3   2.20    -33.8 #> 4   9.08    -17.8 #> 5  -0.737   -12.1 #> 6  15.6     -18.1 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = phenograph_cluster)) +    geom_point(shape = 21) +    theme_bw() +    labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = cd11b)) +    geom_point(shape = 21) +    scale_fill_viridis_c() +   theme_bw() +    labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_daa-and-tof_dea","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_daa and tof_dea","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many CyTOF users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_daa tof_dea verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = str_extract(file_name, \"patient[:digit:]\"),      stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\") daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )  significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-    dea_result %>%    tof_plot_cluster_volcano(     use_ggrepel = TRUE   )   volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[kind preamble]","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing CyTOF data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, … # Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, … citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"# link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients %>%    select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor first,    # which is something we'll want for fitting the model later   # and create the time_to_event and event columns for survival modeling   mutate(     relapse_status = as.factor(relapse_status),      time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-    ddpr_patients %>%    dplyr::filter(cohort == \"Training\")   ddpr_validation <-    ddpr_patients %>%    dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training %>%    dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-    ddpr_training %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 5,      strata = relapse_status   )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN7           0.474     0.966    0.124      1.24        2.59     0.243 #> 6 UPN9          15.6       0.446    0.0445     0.163       2.86     0.434 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62        0.550  0.00374      0.622      2.86     0.342 #> 2 UPN8          0.951       0.958  0.161        0.556      3.18     0.556 #> 3 UPN10         0.00374     0.761  0.000696     0.829      3.19     0.886 #> 4 UPN22-Rx      0.0643      1.68   0.0804       1.56       3.06     0.529 #> 5 UPN24         0.0989      0.196  0.0198       0.210      2.36     0.382 #> 6 UPN35-Rx      0          NA     NA           NA         NA       NA     #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-    training_split %>%    tof_train_model(     predictor_cols = contains(\"Pop2\"),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = tof_create_grid(mixture_values = 1),      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # … with 15 more rows class_predictions <-    class_mod %>%    tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions %>%    dplyr::mutate(     truth = ddpr_validation$relapse_status   ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-    class_mod %>%    tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # … with 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod %>%    tof_plot_model() +    labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-    class_mod %>%    tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod %>%    tof_plot_model(new_data = ddpr_validation) +    labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. important principles illustrated following picture: [picture] [construction]","code":"tof_extract_features(   tof_tibble = ___,    cluster_col = ___,    group_cols = ___,   stimulation_col = ___,   lineage_cols = ___,   signaling_cols = ___,   central_tendency_function = ___,   signaling_method = ___,   basal_level = ___, )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path %>%    # step 1   tof_read_data() %>%    # step 2   tof_preprocess() %>%    # step 3   tof_cluster(method = \"phenograph\") %>%   # step 4   tof_downsample(     group_cols = .phenograph_cluster,      num_cells = 100,     method = \"constant\"    ) %>%    # step 5   tof_reduce_dimensions(perplexity = 50, method = \"tsne\") %>%    # step 6   tof_plot_cells_embedding(     embedding_cols = starts_with(\".tsne\"),     color_col = .phenograph_cluster   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for flowSet as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang .data, := tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1/5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    0.552 #> 2 mae    0.616 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster CyTOF data. — tof_cluster","title":"Cluster CyTOF data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster CyTOF data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster CyTOF data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>      cd45    cd38   cd34   cd19 .kmeans_cluster #>     <dbl>   <dbl>  <dbl>  <dbl> <chr>           #>  1 -0.427 -0.204  -1.68  -0.646 7               #>  2 -0.876 -0.525  -0.566  0.714 17              #>  3  0.362 -0.925  -1.17   2.04  15              #>  4 -0.499 -0.133  -0.380 -1.19  7               #>  5 -0.438  0.0838  0.701  0.706 16              #>  6  0.735  0.0791 -1.85   0.157 13              #>  7 -0.584  0.0798 -0.521 -1.50  7               #>  8 -1.46   1.33   -1.14   1.38  19              #>  9  1.53  -0.240  -1.17  -1.07  14              #> 10 -1.66  -1.31   -1.63  -0.588 17              #> # … with 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>      cd45    cd38   cd34   cd19 .phenograph_cluster #>     <dbl>   <dbl>  <dbl>  <dbl> <chr>               #>  1 -0.427 -0.204  -1.68  -0.646 5                   #>  2 -0.876 -0.525  -0.566  0.714 2                   #>  3  0.362 -0.925  -1.17   2.04  2                   #>  4 -0.499 -0.133  -0.380 -1.19  5                   #>  5 -0.438  0.0838  0.701  0.706 8                   #>  6  0.735  0.0791 -1.85   0.157 6                   #>  7 -0.584  0.0798 -0.521 -1.50  5                   #>  8 -1.46   1.33   -1.14   1.38  6                   #>  9  1.53  -0.240  -1.17  -1.07  5                   #> 10 -1.66  -1.31   -1.63  -0.588 2                   #> # … with 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"function performs distance-based clustering CyTOF data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.distance_function_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.distance_function_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 b                    #>  2 b                    #>  3 a                    #>  4 b                    #>  5 b                    #>  6 b                    #>  7 a                    #>  8 a                    #>  9 b                    #> 10 b                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"function performs FlowSOM clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 14                   #>  2 11                   #>  3 19                   #>  4 11                   #>  5 20                   #>  6 7                    #>  7 9                    #>  8 12                   #>  9 11                   #> 10 20                   #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"function performs k-means clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 7               #>  2 7               #>  3 3               #>  4 1               #>  5 18              #>  6 14              #>  7 14              #>  8 1               #>  9 4               #> 10 10              #> # … with 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 2               #>  2 5               #>  3 6               #>  4 2               #>  5 8               #>  6 1               #>  7 17              #>  8 18              #>  9 11              #> 10 8               #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering CyTOF data using user-specified selection input variables/CyTOF measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 3                   #>  2 10                  #>  3 12                  #>  4 2                   #>  5 12                  #>  6 9                   #>  7 1                   #>  8 6                   #>  9 7                   #> 10 6                   #> # … with 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 2                   #>  2 1                   #>  3 9                   #>  4 10                  #>  5 3                   #>  6 5                   #>  7 10                  #>  8 1                   #>  9 6                   #> 10 2                   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # … with 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # … with 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_daa_*` function family: tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"tof_daa(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_daa_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tibble nested tibble containing differential abundance results chosen method. See tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"tof_daa_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"tof_daa_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"tof_daa_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_dea_*` function family: tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"tof_dea(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_dea_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tibble nested tibble containing differential abundance results chosen method. See tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"tof_dea_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"tof_dea_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"tof_dea_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data. — tof_downsample","title":"Downsample CyTOF data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>       cd45    cd38    cd34   cd19 cluster_id #>      <dbl>   <dbl>   <dbl>  <dbl> <chr>      #>  1  0.418  -0.503  -0.850   0.926 p          #>  2  0.212   0.861  -1.10   -1.40  h          #>  3 -1.54    0.0774  1.58    0.212 n          #>  4 -0.233   2.21    0.426   1.14  o          #>  5 -0.289  -0.845   0.757   0.286 u          #>  6  0.662   0.972  -0.185   0.142 d          #>  7 -0.192   1.53   -0.0557  0.625 t          #>  8  0.441  -0.574   0.427  -0.920 e          #>  9  0.619   1.15    0.342   0.218 c          #> 10 -0.0816  0.639  -0.552  -0.224 r          #> # … with 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>       cd45    cd38    cd34    cd19 cluster_id #>      <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1  2.15    0.255   0.187   0.454  g          #>  2 -0.938  -0.731  -0.808  -1.25   o          #>  3 -0.194   1.04   -0.435  -0.337  h          #>  4 -1.48   -0.754   0.0792 -0.593  n          #>  5 -0.919  -2.30    0.345  -0.906  d          #>  6  0.354  -0.573  -0.514   1.12   k          #>  7 -0.0520  0.0111 -0.340   0.0578 k          #>  8 -0.901  -1.87    0.771  -0.418  y          #>  9 -3.08   -0.404   0.363  -0.569  a          #> 10  0.0240 -0.288  -0.632  -0.260  w          #> # … with 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 99 × 5 #>      cd45    cd38    cd34   cd19 cluster_id #>     <dbl>   <dbl>   <dbl>  <dbl> <chr>      #>  1  0.682  0.573  -0.281  -1.09  c          #>  2 -0.715  0.631  -0.387  -0.311 i          #>  3 -1.54   0.0774  1.58    0.212 n          #>  4 -0.184  0.110   1.23   -0.904 b          #>  5  0.364 -1.20   -0.131  -0.568 v          #>  6  0.629  0.643   0.0336  1.29  h          #>  7 -1.15   0.244  -1.44   -1.82  v          #>  8 -1.04   0.927  -1.96   -0.932 k          #>  9  0.247 -1.14    0.985   0.272 s          #> 10 -1.44  -0.286  -0.227  -0.410 c          #> # … with 89 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>      cd45    cd38   cd34    cd19 cluster_id #>     <dbl>   <dbl>  <dbl>   <dbl> <chr>      #>  1  0.806 -0.167  -2.31   1.41   c          #>  2  0.676 -0.476   0.624 -0.0517 o          #>  3  1.13  -1.36   -0.297 -0.814  i          #>  4  0.198 -0.720  -0.256 -1.62   s          #>  5 -1.33  -0.751  -0.762 -1.63   h          #>  6  0.800  1.33   -0.973 -0.463  g          #>  7  2.52   0.666  -1.99  -0.540  u          #>  8 -0.277  0.232   0.852  0.0242 d          #>  9 -1.35   0.0410 -0.528  0.876  l          #> 10  1.97   0.723  -0.449  0.937  w          #> # … with 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>      cd45   cd38    cd34    cd19 cluster_id #>     <dbl>  <dbl>   <dbl>   <dbl> <chr>      #>  1  0.976  1.29  -1.57   -0.368  f          #>  2 -0.520 -2.59   1.58   -0.995  w          #>  3  0.806 -0.167 -2.31    1.41   c          #>  4 -0.324 -2.16  -0.965   0.0625 o          #>  5  1.17   1.33   0.0535  0.809  m          #>  6  0.676 -0.476  0.624  -0.0517 o          #>  7  1.13  -1.36  -0.297  -0.814  i          #>  8  0.198 -0.720 -0.256  -1.62   s          #>  9 -0.137 -0.756 -0.988  -0.362  y          #> 10  2.52   0.666 -1.99   -0.540  u          #> # … with 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 473 × 4 #>      cd45    cd38   cd34   cd19 #>     <dbl>   <dbl>  <dbl>  <dbl> #>  1 -0.169 -0.0367  0.604 -0.838 #>  2  0.515 -0.234   0.122  1.19  #>  3  0.212  0.144  -0.617  0.466 #>  4  0.127  0.330   0.633  0.155 #>  5 -0.887 -0.364  -0.102 -0.785 #>  6 -1.27  -0.452   0.643 -1.04  #>  7 -0.584  0.0275  1.03   1.65  #>  8 -1.15  -0.893   0.167 -0.374 #>  9  2.28  -1.04   -2.35   0.509 #> 10 -1.64   1.87   -1.95   1.48  #> # … with 463 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 197 × 4 #>      cd45    cd38   cd34     cd19 #>     <dbl>   <dbl>  <dbl>    <dbl> #>  1 -0.724  1.70   -0.318  0.604   #>  2 -0.294  0.990   0.845 -0.348   #>  3  2.28  -1.04   -2.35   0.509   #>  4  0.428 -1.49   -0.599  0.505   #>  5  2.12   1.01   -0.362 -0.00609 #>  6 -0.938 -0.0724 -0.731 -0.0652  #>  7  1.19  -1.17    0.330  2.42    #>  8  0.428  0.489  -0.108 -1.73    #>  9 -1.24  -0.977   0.616  1.05    #> 10 -2.55   0.147  -1.73  -1.22    #> # … with 187 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 186 × 4 #>       cd45   cd38    cd34     cd19 #>      <dbl>  <dbl>   <dbl>    <dbl> #>  1  0.127   0.330  0.633   0.155   #>  2 -1.64    1.87  -1.95    1.48    #>  3 -1.40    1.68  -1.81   -0.0182  #>  4  1.22   -0.868  0.0152 -0.124   #>  5  0.0781  1.03   0.467   0.679   #>  6  2.12    1.01  -0.362  -0.00609 #>  7 -1.41   -0.472 -0.187  -1.97    #>  8  0.428   0.489 -0.108  -1.73    #>  9 -0.449   0.102  2.16   -0.715   #> 10 -2.70   -0.472  0.678  -1.19    #> # … with 176 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>      cd45   cd38   cd34   cd19 cluster_id #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>      #>  1 -0.962  0.968 -1.48  -0.670 l          #>  2 -1.24  -0.430  0.764  0.352 u          #>  3 -0.269  1.52  -0.678  0.602 u          #>  4  1.37  -1.14  -0.793 -0.243 t          #>  5 -0.660 -0.116  0.213 -0.209 d          #>  6 -0.796 -0.124 -0.783 -1.01  y          #>  7 -0.623 -0.629 -1.40  -0.232 b          #>  8  0.689  0.647 -0.432  0.217 f          #>  9 -0.542 -1.75   2.52   0.428 j          #> 10 -0.724  1.77   0.256 -1.09  f          #> # … with 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 86 × 5 #>        cd45   cd38   cd34   cd19 cluster_id #>       <dbl>  <dbl>  <dbl>  <dbl> <chr>      #>  1  0.853   -0.732 -1.05  -0.424 a          #>  2  0.559   -1.02   0.771 -1.51  a          #>  3 -0.273    0.279  0.664 -0.616 a          #>  4 -0.563    0.406  0.445 -0.602 a          #>  5 -0.776   -0.219  1.26  -1.60  b          #>  6 -0.433   -2.40  -0.291  1.17  b          #>  7 -1.89    -1.15  -0.935 -0.300 b          #>  8 -0.791   -0.652  0.262  0.657 c          #>  9 -0.00616 -0.294 -0.576 -1.49  c          #> 10 -0.996   -0.443 -0.291  0.358 c          #> # … with 76 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation CyTOF data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>       cd45   cd38    cd34   cd19 .spade_density #>      <dbl>  <dbl>   <dbl>  <dbl>          <dbl> #>  1  0.181  -0.279 -0.623  -1.10               1 #>  2 -1.54    1.04  -0.0345 -1.03               1 #>  3  0.553   0.122 -1.29   -0.246              1 #>  4  0.160  -0.377 -0.442   0.586              1 #>  5  1.83    2.04   0.592  -1.01               1 #>  6 -1.22    2.96  -0.143   0.498              1 #>  7  0.667  -0.164 -1.15   -0.557              1 #>  8 -0.418   1.94  -0.252   0.150              1 #>  9  0.0877  0.155  0.795  -0.524              1 #> 10 -0.605  -0.183  0.129   1.97               1 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>       cd45   cd38    cd34   cd19 .spade_density #>      <dbl>  <dbl>   <dbl>  <dbl>          <dbl> #>  1  0.181  -0.279 -0.623  -1.10             1   #>  2 -1.54    1.04  -0.0345 -1.03             1   #>  3  0.553   0.122 -1.29   -0.246            1   #>  4  0.160  -0.377 -0.442   0.586            1   #>  5  1.83    2.04   0.592  -1.01             0   #>  6 -1.22    2.96  -0.143   0.498            0.1 #>  7  0.667  -0.164 -1.15   -0.557            1   #>  8 -0.418   1.94  -0.252   0.150            0.6 #>  9  0.0877  0.155  0.795  -0.524            1   #> 10 -0.605  -0.183  0.129   1.97             0.8 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby        0.146       -0.223       0.417      -0.284     -0.542  #> 2 mario       -0.0361       0.127      -0.158       0.234      0.0367 #> # … with 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, #> #   `cd19@b_ct` <dbl>, `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, #> #   `cd19@c_ct` <dbl>, `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, #> #   `cd19@d_ct` <dbl>, `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, #> #   `cd19@e_ct` <dbl>, `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, #> #   `cd19@f_ct` <dbl>, `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, #> #   `cd19@g_ct` <dbl>, `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel  values #>    <chr>   <chr>      <chr>     <dbl> #>  1 kirby   a          cd45     0.146  #>  2 kirby   a          cd38    -0.223  #>  3 kirby   a          cd34     0.417  #>  4 kirby   a          cd19    -0.284  #>  5 kirby   b          cd45    -0.542  #>  6 kirby   b          cd38    -0.0323 #>  7 kirby   b          cd34    -0.422  #>  8 kirby   b          cd19    -0.375  #>  9 kirby   c          cd45    -0.675  #> 10 kirby   c          cd38    -0.159  #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@t_emd` `stim_cd38@t_emd` `stim_cd34@t_emd` `stim_cd19@t_e…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 mario                  NA                NA                NA               NA #> 2 kirby                  NA                NA                NA               NA #> # … with 100 more variables: `stim_cd45@e_emd` <dbl>, `stim_cd38@e_emd` <dbl>, #> #   `stim_cd34@e_emd` <dbl>, `stim_cd19@e_emd` <dbl>, `stim_cd45@n_emd` <dbl>, #> #   `stim_cd38@n_emd` <dbl>, `stim_cd34@n_emd` <dbl>, `stim_cd19@n_emd` <dbl>, #> #   `stim_cd45@a_emd` <dbl>, `stim_cd38@a_emd` <dbl>, `stim_cd34@a_emd` <dbl>, #> #   `stim_cd19@a_emd` <dbl>, `stim_cd45@h_emd` <dbl>, `stim_cd38@h_emd` <dbl>, #> #   `stim_cd34@h_emd` <dbl>, `stim_cd19@h_emd` <dbl>, `stim_cd45@b_emd` <dbl>, #> #   `stim_cd38@b_emd` <dbl>, `stim_cd34@b_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 t          cd45   stim         5.42 #>  2 t          cd38   stim         6.17 #>  3 t          cd34   stim         3.81 #>  4 t          cd19   stim        10.1  #>  5 e          cd45   stim         7.74 #>  6 e          cd38   stim         6.21 #>  7 e          cd34   stim         7.5  #>  8 e          cd19   stim         3.80 #>  9 n          cd45   stim         6.99 #> 10 n          cd38   stim         7.88 #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0305   0.0427   0.0366   0.0407   0.0386   0.0407   0.0427 #> 2 mario     0.0354   0.0354   0.0315   0.0236   0.0394   0.0472   0.0374 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0305   0.0427   0.0366   0.0407   0.0386   0.0407   0.0427 #> 2 mario     0.0354   0.0354   0.0315   0.0236   0.0394   0.0472   0.0374 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@s_jsd` `stim_cd38@s_jsd` `stim_cd34@s_jsd` `stim_cd19@s_j…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 kirby               0.636             0.909                 1                1 #> 2 mario              NA                NA                    NA               NA #> # … with 100 more variables: `stim_cd45@j_jsd` <dbl>, `stim_cd38@j_jsd` <dbl>, #> #   `stim_cd34@j_jsd` <dbl>, `stim_cd19@j_jsd` <dbl>, `stim_cd45@b_jsd` <dbl>, #> #   `stim_cd38@b_jsd` <dbl>, `stim_cd34@b_jsd` <dbl>, `stim_cd19@b_jsd` <dbl>, #> #   `stim_cd45@c_jsd` <dbl>, `stim_cd38@c_jsd` <dbl>, `stim_cd34@c_jsd` <dbl>, #> #   `stim_cd19@c_jsd` <dbl>, `stim_cd45@t_jsd` <dbl>, `stim_cd38@t_jsd` <dbl>, #> #   `stim_cd34@t_jsd` <dbl>, `stim_cd19@t_jsd` <dbl>, `stim_cd45@e_jsd` <dbl>, #> #   `stim_cd38@e_jsd` <dbl>, `stim_cd34@e_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   jsd #>    <chr>      <chr>  <chr>       <dbl> #>  1 s          cd45   stim        0.635 #>  2 s          cd38   stim        0.886 #>  3 s          cd34   stim        0.771 #>  4 s          cd19   stim        0.864 #>  5 j          cd45   stim        0.947 #>  6 j          cd38   stim        0.810 #>  7 j          cd34   stim        0.790 #>  8 j          cd19   stim        0.590 #>  9 b          cd45   stim        0.628 #> 10 b          cd38   stim        0.560 #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0550   0.0398   0.0455   0.0417   0.0380   0.0436   0.0285 #> 2 mario     0.0486   0.0275   0.0444   0.0465   0.0402   0.0423   0.0465 #> # … with 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0550 #>  2 kirby   b          0.0398 #>  3 kirby   c          0.0455 #>  4 kirby   d          0.0417 #>  5 kirby   e          0.0380 #>  6 kirby   f          0.0436 #>  7 kirby   g          0.0285 #>  8 kirby   h          0.0342 #>  9 kirby   i          0.0493 #> 10 kirby   j          0.0380 #> # … with 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_thresho…` `cd34@a_thresh…` `cd19@a_thresh…` #>   <chr>                <dbl>             <dbl>            <dbl>            <dbl> #> 1 kirby                0.286             0.143           0.0714           0.0714 #> 2 mario                0.273             0               0.0909           0.0909 #> # … with 100 more variables: `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0.286  #>  2 kirby   a          cd38    0.143  #>  3 kirby   a          cd34    0.0714 #>  4 kirby   a          cd19    0.0714 #>  5 kirby   b          cd45    0.333  #>  6 kirby   b          cd38    0.25   #>  7 kirby   b          cd34    0      #>  8 kirby   b          cd19    0.0833 #>  9 kirby   c          cd45    0.0526 #> 10 kirby   c          cd38    0.0526 #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   rsplit_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `rsplit_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"Find k-nearest neighbors cell CyTOF dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents CyTOF measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional arguments pass RANN::nn2","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  984  110  759  320  371  904  899  332  240   291 #>    [2,]  422  263  704  954  886  528  585  854  713   946 #>    [3,]  467  676  185  498  317  873  340  925  710   680 #>    [4,]   85  541  934  137   50  601  388  572  860    73 #>    [5,]  870  459  386  584  602  585  187  373  905   298 #>    [6,]  403  223  917  782  753  226  367  607  177   730 #>    [7,]   10  777   40  988   73  465   63  270  840   903 #>    [8,]  749  692  143  931  404  231  995  591  742   733 #>    [9,]  165  303  119  812  533  691  609  470  313   229 #>   [10,]   40  903  270  840    7  988  777  358  465   544 #>   [11,]  786  564  516  115  117   46  930  333  965   836 #>   [12,]  413  936  431  942  495  369  321   61  822   316 #>   [13,]  546   23  240  410  734  850  560  764  478    78 #>   [14,]  326  615  366  206  831  157  501   35   44    18 #>   [15,]  516  528  243   46  178   94   11  887  117   172 #>   [16,]  164  832  852  997  999  133  723  328  780   920 #>   [17,]   91  906  968  762  121  757  980   53  697    23 #>   [18,]   54  474  831  417  326   14  287  914   44   206 #>   [19,]  301  834   74  371  569  197  780  674  240   289 #>   [20,]  702   39  439  100  219  882  888  592  544   814 #>   [21,]  282  129  329  853  686  448  144  452  136   184 #>   [22,]  334  636  526  124  814  641  207  316  503   318 #>   [23,]   13  121  697  197  734  850  546  410  478   240 #>   [24,]  756  227  881  737  447  430  284  664  160   710 #>   [25,]  950  156  690  510  355  300  896  603  162   470 #>   [26,]  148  535  252  722  365  582  844  152  885   839 #>   [27,]  973  517  283  575  790  753  448  829  442   560 #>   [28,]  701  370   59  648  880  341  876  855  536   257 #>   [29,]  497  474  616   35  366  740   34  107  767   838 #>   [30,]  104  920  922  908  274  427  101  164  577   801 #>   [31,]  573  451  751  183   93  783  654  398  901   890 #>   [32,]   58  746  118  899  664  803  291  771  929   611 #>   [33,]  218   68  460  137    4  686  658  985   85   934 #>   [34,]  914  850  452  448  697  790   27  831  517   560 #>   [35,]   72   82  157  513  289  294  673  838  150   276 #>   [36,]  446  280  302  181 1000  268  673  773  600   111 #>   [37,]  671  419  861  463  171   47  189  444  307   122 #>   [38,]  457  232  682  963  464  698  849  965  353   930 #>   [39,]  592  702   20  888  219  439  544  747  924   360 #>   [40,]   10  903  270  840  827    7  188  544  358   747 #>   [41,]  859  331  650  985  938  391  387  977  755   514 #>   [42,]  202  657  889  134  435  760  407  131   55   716 #>   [43,]  733  153   70  252  931  995  437  620  675     8 #>   [44,]  501  326  166  846  150  324  952  674  417   367 #>   [45,]  100  810  216  219   20  888  948  377  824   136 #>   [46,]  528  661  516  117   15  116  243  466  564   172 #>   [47,]  393  307  253  419  672  649  671  953  445   324 #>   [48,]   87  376  443  426  806  476  504  204  389   729 #>   [49,]  461  782  730  522  223  122  145  233  444   192 #>   [50,]  601   85    4  688  805  388  541  570  353    33 #>   [51,]  863  473  754  238  825  512  604  210  361   383 #>   [52,]  724  241  807  828  275  830  534  321  868   773 #>   [53,]  349  219  329  436  697  970  132   20  242     7 #>   [54,]  474   18  497  287   29  831   14  326  968   767 #>   [55,]  428  435  766  125  401  108  198  793  845   940 #>   [56,]  726  789  752  614  887  333   11  634  983   951 #>   [57,]  823  194  750   80  952  604  442  308  210   150 #>   [58,]  899  332  881  611   32  664  320  291  746   961 #>   [59,]  958  217  382  478  536  394   28  764  701   771 #>   [60,]  644  729  412  443  943  518  965  115  415   663 #>   [61,]  126  936  369  431  483   12  942  309  480   319 #>   [62,]  458  124  167   63  988   22  527  732  840   566 #>   [63,]  167  458   62  988  882  205  966  814  566   840 #>   [64,]  668  884  910  135  506  943  576  415  609   812 #>   [65,]  871  147   92  350  800  127  245  155  363   461 #>   [66,]  768  651  875  980  810  785  824  272  499   948 #>   [67,]  550  532  845  480  125  143  595  828  931   198 #>   [68,]  218  658   33  617  650  460  985  835  805   686 #>   [69,]  840  124  641  270  456  439  587  964  199   544 #>   [70,]  733  252  153  795  113  318  479  231  152   327 #>   [71,]  221  815  628  476  625  811  699  947  736   672 #>   [72,]   82   35  513  157  294  673  276  150  289   838 #>   [73,]  436  934  388    4   85  777  541  137  144     7 #>   [74,]  301   19  569  834  289  780  371  491  394   589 #>   [75,]  648  370  188  718  664   28  737  227  385   447 #>   [76,]  921  856  820  869  297  481  626  667  992   543 #>   [77,]  144  184   78  492  747   89  799  727  207   924 #>   [78,]  492   77   84  829  144  560  799  747  349   546 #>   [79,]  162  809  603  954  987  355   25  426  523   690 #>   [80,]  462   57  604  183  750  823  308  654  194   776 #>   [81,]  927  485  345  459  719  445  996  967  230   593 #>   [82,]   72  673  157  513  150   35  276  294  101   838 #>   [83,]  158  523  162  236  239  989  160  949  774   470 #>   [84,]  560  799   90  244  618  790  709   78  546    89 #>   [85,]    4  601  541   50  934  388  137   73  635    33 #>   [86,]  579  266  163  667  468  854  247  696  869   585 #>   [87,]   48  476  858  443  204  518  372  409  818   925 #>   [88,]  683  581  781  175  538  502  662  107  531   151 #>   [89,]  618  295   90  727  201  720  503  799  244   779 #>   [90,]  618  244  727   84   89  720  799  295  560   909 #>   [91,]   17  970   53  757  762  219  638  121  697    45 #>   [92,]  147  350  238   65  387  894  342  155  444   998 #>   [93,]  161  398   31  573   97  556  554  451  801   890 #>   [94,]  180  178  176   15  926  359  608  422  528   173 #>   [95,]  643  773  714  817  302  276  101  280  673    82 #>   [96,]  640  695  421  434  953  234  956  908  716   872 #>   [97,]  161  398  556  257  330   93  339  855  529   878 #>   [98,]  608  520  755  631  475  578  558  423  977   369 #>   [99,]  433  838  294  289  513  491  920  922   74   497 #>  [100,]   45   20  888  882  219  439  200   39  702   885 #>  [101,]  643   95  908  922  276  838   82  562  104   179 #>  [102,]  475  524  553  201  347  636  423  826  173   847 #>  [103,]  635  930  786  572  570  601  860  679  541     4 #>  [104,]  922   30  920  908  427  101  274  164  801   491 #>  [105,]  381  163  266  247  380  418  304   86  521   962 #>  [106,]  994  514  985  424  679  314  586  363  642   983 #>  [107,]  616  662  581  538  268   29  895  683  502   739 #>  [108,]  339  428  766  468  579  667  401   55  845   319 #>  [109,]  666  170  175  249  997  781   16  999  277   151 #>  [110,]  984    1  775  341  371   19  212  240  899   834 #>  [111,]  741  639  181  957  280  924  944  503  302   822 #>  [112,]  969  414  346  298  521  125  140  595  397   657 #>  [113,]  318  795  684  941  900  911  334  976  375   293 #>  [114,]  171  189  159  463  660  998  210  868  823   147 #>  [115,]  965  516  537   11  778  930  243  117  572   412 #>  [116,]  847  661  117  172  466  939  528   46  475   704 #>  [117,]  116  172  661  564   46  528  516  243  939   466 #>  [118,]  929  803   32  235  798  772  813  763  296   131 #>  [119,]    9  165  563  351  263  440  609  812  482   229 #>  [120,]  685  554  308  562  935  654  451  166  150    80 #>  [121,]  829   23  697  349  410   13  913  417   78   971 #>  [122,]  444  671  991  730  442  823  194  367  461   147 #>  [123,]  396  495  944  264  473  490  696  862  413   344 #>  [124,]  456   69  641   22   62  334  840  636  458   142 #>  [125,]  845  579  435  532  468   55  480  657  667   738 #>  [126,]   61  480  369  431  936  667  488  319  471   344 #>  [127,]  154  703  245  871  350  155  363  195  897   214 #>  [128,]  449  708  693  511  603  548  279  690  987   156 #>  [129,]   21  448  282  897  972  600  686  184  144   924 #>  [130,]  512  825  770  752  564  361  238  342  836   466 #>  [131,]  772  813  763  982  760   42  202  889  211   484 #>  [132,]  590  388  913  688  436  551   53  857  349    73 #>  [133,]  278  400  958  878  362  997  164  832  723   378 #>  [134,]  657  407  435   42  380  521  889  125   55   760 #>  [135,]  884  777  509  465   64  668  229  576  943    10 #>  [136,]  272  282  853  450  686   21  810  702  637   452 #>  [137,]  934  553  572    4  541   85  860  972  144    33 #>  [138,]  653  215  505  640  689  947  685  611  815   628 #>  [139,]  153  402  327  620   43  273  309  744  338   743 #>  [140,]  346  738  532  112  761  125  580  547  841   134 #>  [141,]  331  897  972  453  248  822  288  859  600   770 #>  [142,]  630  942  636  316  990  791  456   22  124   319 #>  [143,]  931    8  936  828  995  431  692  976   67   742 #>  [144,]   77  184  492  282  329   78   21  448  924   129 #>  [145,]  871  971  127  154  245  525  745   49  461    65 #>  [146,]  267  855  257  878   97  251  211  598  330   813 #>  [147,]   92  350   65  122  238  444  114  210  171   998 #>  [148,]   26  844  535  819  722  365  312  839  582   885 #>  [149,]  633  237  785  745  406  767  617  875  865   245 #>  [150,]  501  673   82  157  952   57   72   44  120   790 #>  [151,]  277  502  948  781  581  591  499  170  768   213 #>  [152,]  365  203  732  566  379  200  966  458  252   839 #>  [153,]   70  252  848  733  152   43  327  190  365   479 #>  [154,]  214  127  860  725  669  973  857  288  570   986 #>  [155,]  951  836  220  800  350  342  333  195  127   363 #>  [156,]  690   25  563  511  950  510  603  128  300   449 #>  [157,]  673   82   72   35  150  513  615  366   57   276 #>  [158,]  523  236  989   83  162  774  259  355  160   627 #>  [159,]  114  463  189  336  660  171  157  294  513   956 #>  [160,]  447  912  523  411  315  627  158  540  989   774 #>  [161,]   93   97  398  257  335  425  771  556  890   855 #>  [162,]   79  523  355  158  236   25  886  808  809    83 #>  [163,]  266  105   86  247  380  381  808  521  259   854 #>  [164,]   16  832  133  852  920  104   30  101  597   723 #>  [165,]    9  303  119  313  691  533  470  229  563   482 #>  [166,]  324   44  501  308  685  120  150  253  952   336 #>  [167,]  566   63  814   62   22  375  260  458  882   207 #>  [168,]  993  571  962  628  285  811  246  221  621   407 #>  [169,]  623  176  784  926  390  977  178  975  173   635 #>  [170,]  997  213  277  852  582  249  591  151  781   999 #>  [171,]  114  189  998  660  868  281  210  463  159   823 #>  [172,]  347  116  847  117  466  475  173  528  423   786 #>  [173,]  347  524  102  475  847  172  423  946  174   178 #>  [174,]  482  826  347  636  874  263  524  527  142   946 #>  [175,]  781  328  581  852   88  502  591  832   16   683 #>  [176,]  169  679  975  623  424  178   94  180  926   608 #>  [177,]  612  607  916  565  687  220  634  333  917   729 #>  [178,]  926  180   94  623  975  176  169  748  173    15 #>  [179,]  429  957  643  217  360  741  554  536  271   837 #>  [180,]  178   94  975  926  176  545  797  623   15   169 #>  [181,]  639  268  111   36  280 1000  446  302  741   600 #>  [182,]  712  378  197  508  382  638  780  341  834   757 #>  [183,]  451  783   31  901  909  751   80  462  654   554 #>  [184,]  924  144   77  503  282  207  814  702  129    21 #>  [185,]  677  409  925  896  759  467  625  613  891   265 #>  [186,]  208  577  940  477  198  395  404  793  231   852 #>  [187,]    5  228  870  602  937  713  386  593  681   596 #>  [188,]  322  341   75  827   40   28  385  701  734   648 #>  [189,]  660  171  114  868  463  998  210  159  807   823 #>  [190,]  299  744  848  479  626  153  820  416  792   981 #>  [191,]  695  336  463  159  419  253   96  872  421    37 #>  [192,]  367  326   44  324  730  223  461  952  501   122 #>  [193,]  540  510  315  300  718   25  765  758  470   896 #>  [194,]  750   57  823  952  308  442  324  463  604   367 #>  [195,]  514  558  770  703  331  387  586  786  363   248 #>  [196,]  835   68  391  620  918  650  658  327  406    41 #>  [197,]  382  478  569  341  734   23   13  394  780    19 #>  [198,]  477  577  742  186  940   55  208  923  428   928 #>  [199,]  655  290  310  670  641  270  544   69  867   840 #>  [200,]  882  885  900  439  375  377  100  941  637   312 #>  [201,]  874  826  636  102  295  503  316  264   89   526 #>  [202,]   42  889  254  657  134  760  435  716  131   407 #>  [203,]  152  379  966  377  200  821  312  535  885   365 #>  [204,]  818  858  372  649  230   87  177  967  687   729 #>  [205,]  260  966  458  566   62  390   63  167  732   327 #>  [206,]  245  767  615  366  517   14  871  831  745   442 #>  [207,]  814  503  544  526  184  924  270  641   22   295 #>  [208,]  793  940  976  911  186  395  692  577  231   428 #>  [209,]  974  106  735  994  907  975  805  424  679   642 #>  [210,]  823  863  868   57  998  604   51  807  446   189 #>  [211,]  395  878  940  813  146   97  598  911  793   278 #>  [212,]  622  322  827  385  224  340  794  970  110   864 #>  [213,]  684  900  591  439  170  200  610  885  948   832 #>  [214,]  486  154  288  537  283  575  860  986  669   916 #>  [215,]  611  505  717  291  653  320  759  265  935   332 #>  [216,]  242  377  821  824  875   45  460  853  948   100 #>  [217,]  536  360  957   59  271  179  425  478  701   764 #>  [218,]   33   68  460  658  686  617  650  985  853   972 #>  [219,]  888   39   20  702  100   53  734  592  747    45 #>  [220,]  333  836  951  155  916  965  634  486   11   214 #>  [221,]  628   71  699  811  625  993  815  571  476   978 #>  [222,]  938  269  392  391  406 1000  600  500   41   616 #>  [223,]    6  782  403  367  730  917  753  192  233   846 #>  [224,]  622  891  877  493  804  794  624  715  873   465 #>  [225,]  405  359  472  373  356  599  422  870  787    94 #>  [226,]  788  917  494  607  565  283  403  750  486   575 #>  [227,]  737  881  756   24  664  447   75  718  899   648 #>  [228,]  681  187  787  937  659  602  397  870    5   343 #>  [229,]  313  482  691  563  777  165  527    9  300   119 #>  [230,]  967  927   81  345  887  596  649  593  445   818 #>  [231,]  437  404  976  208  692    8  795  733  911   186 #>  [232,]  457   38  963  644  518  965   60  682  687   669 #>  [233,]  522  223  393  671  367  192   47  730  444   461 #>  [234,]  716  427  640  801  285  685  908  407  215   562 #>  [235,]  723  929  803  118  771  296  427  958   32   880 #>  [236,]  989  523  774  158  355  627  259  728  808   162 #>  [237,]  745  149  245  857  767  725   21  127  697   871 #>  [238,]  770  342  350   51  453  130  512  825  248   361 #>  [239,]   83  158  484  481  763  523  772  992  605   236 #>  [240,]  764  546   13  371  709  478  560  271  394   734 #>  [241,]   52  828  321  724  280  807  534  302  817   275 #>  [242,]  216  377  460  821  329  853  686  551  875    20 #>  [243,]  516  528   15  511  117   46  661  128  115   172 #>  [244,]   90  618   84  783  909  901   89  727  295   799 #>  [245,]  871  206  745  767  127  517  237  831  971   350 #>  [246,]  953  304  247  285  719  168  962  485  996   407 #>  [247,]  163  304   86  266  105  380  246  521  345   854 #>  [248,]  423  453  331  141  770  466  558  939  475   822 #>  [249,]  883  170  404  606  395  437  354  186  852   997 #>  [250,]  539  583  867  456  527  964  992  124  313   990 #>  [251,]  411  879  855  774  146  718  664  257  765   370 #>  [252,]   70  153  733  437  152  113   26  792  365   379 #>  [253,]  324  393  166   47  336  419  308  463  194   750 #>  [254,]  202  716   42  507  519  915  134  234  407   889 #>  [255,]  833  678  485  647  996  580  969  459   81   841 #>  [256,]  491  589  685  294  562  908  289  427  166   104 #>  [257,]  855  335  161   97  370  771  876  267  146   425 #>  [258,]  337  674  846  166  680  653  324  253   44   505 #>  [259,]  236  989  978  808  774  523  158  163  627   571 #>  [260,]  390  784  566  205  327  167  977   62  169   458 #>  [261,]   92  894  647  851  147  171  769  998  281   754 #>  [262,]  748  797  623  926  609  169  975  178  635   601 #>  [263,]  886  511    2  174  347  119  563  809  946   243 #>  [264,]  316  826  201  123  874  495  396  741  990   944 #>  [265,]  717  736  707  611  978  759  935  890  505   896 #>  [266,]  163   86  105  521  869  921  247  298  380   381 #>  [267,]  878  146  855  257  598  278  587  311  655   199 #>  [268,] 1000  181  739  639  450  600   36  616  895   446 #>  [269,]  392  938  222  107  383  769  391  538 1000   500 #>  [270,]  840  544   69  207  641   10  199  814  655    40 #>  [271,]  837  394  799  560  957  217  850  764  536   478 #>  [272,]  136  810  651  450  499  739  452  853  282   948 #>  [273,]  842  416  743  848  744  323  933  364  632   567 #>  [274,]  920  328   30  104  922  531  164  928   16   198 #>  [275,]  761  830  281  866   52  724  754  241  841   828 #>  [276,]  838  513  773   95   82   72  597  101  673   643 #>  [277,]  151  502  170  582  948  591  781  213  379   535 #>  [278,]  878  429  133  311  598  267  395  217  940   179 #>  [279,]  128  409  449  708  925  443  511  565  690   325 #>  [280,]  302   36  446  241  181  714  111  639   95   895 #>  [281,]  830  275  841  998  868  660  580  761   52   807 #>  [282,]   21  924  184  129  136  702  329  144  853   686 #>  [283,]  575  494   27  720  486  753  790  214  973   226 #>  [284,]  559  912   24  160  756  455  447  758  949   540 #>  [285,]  953  407  573  654   31  571  736  246  234   168 #>  [286,]  779  670  804  295  715  310  618  244   90   747 #>  [287,]  745  767   18  831   54  971  474  206  237   245 #>  [288,]  453  720  486  494  214  141  575  939  564   248 #>  [289,]  569  394  491   72   74   82   35  838  101   837 #>  [290,]  310  655  670  199  370  335  950  779  855   867 #>  [291,]  320  215  899  611  505  332  771  653  717   935 #>  [292,]  803  362  400  146  878  929  648  267  723   211 #>  [293,]  911  543  792  479  793  113  976  208  883   992 #>  [294,]   72   82  513   35  336  256  491  157  289   908 #>  [295,]  779   89  874  201  618  826  360  503  286   207 #>  [296,]  723  354  803  929  292  235  362  400  118   880 #>  [297,]  856   76  921  945  667  886  992  319  869    86 #>  [298,]  386  471  397  266  579  905  584  585  667    86 #>  [299,]  190  744  626  820  479  848  567   76  416   630 #>  [300,]  510  950  670  156   25  313  715  193  690   286 #>  [301,]  834   19   74  780  371  569  589  197  289   491 #>  [302,]  280  817   95   36  643  714  446  741  241   111 #>  [303,]  533    9  165  470  700  812  313  119  691   945 #>  [304,]  996  247  246  485  105  927   81  962  266   298 #>  [305,]  414  969  595  346  112   67  550  532  140   594 #>  [306,]  858  680    6  223  815  233  393  476  204   687 #>  [307,]  649  719  445   47  861  672   81  953  393   204 #>  [308,]  750  194  120   57  336  324   80  166  654   952 #>  [309,]  384   61  483  578  338  936  632  369  126   567 #>  [310,]  670  290  655  199  286  779  370  544  360   295 #>  [311,]  598  278  456  429  526  334  911  318  267   641 #>  [312,]  885  722  200  732  568  882  819  365  203   458 #>  [313,]  229  165  527  867  691  482  300  470    9   533 #>  [314,]  424  755  642  994  106  514  586  387  679   520 #>  [315,]  540  470  765  193  533  758  949  303  160    25 #>  [316,]  636  942  334  264  201  990  874  526  413   826 #>  [317,]  467  873  663  613  910  925  676  510  185   412 #>  [318,]  795  334  941  113  375   22  684  976  942   316 #>  [319,]  369  946  396  942  524  630  413  142  483   126 #>  [320,]  899  291  876  611  771  717  935  425  215   505 #>  [321,]  932  828  241  431  383  495  724   12  866    52 #>  [322,]  827  188  341  385  734  794   40  701  508   747 #>  [323,]  842  583  552  527  691  539  348  416  848   945 #>  [324,]  166  952  253  367  194  308  750  501  393    44 #>  [325,]  652  693  565  279  449  443  128  708  788   661 #>  [326,]   14   44  501   35   18  615  192  150  831   157 #>  [327,]  260  402  390  566  784  205  152   70  153   977 #>  [328,]  274  852  175  920   16  164  531  781   30   832 #>  [329,]   21  282  144  853  184  857  686   20  702   697 #>  [330,]  529  990  398   97  339  598  556  728  161   257 #>  [331,]  141  859  972  248  897  822  453  423  770   195 #>  [332,]  904  653   58  961  611  291  899  215    1   320 #>  [333,]  220  836  951  965  634   11  752  155  564   177 #>  [334,]   22  318  526  316  941  636  456  375  311   641 #>  [335,]  876  257  370  855  425  290  890  161  536   310 #>  [336,]  463  308  419  294  159  194  324  166  695   253 #>  [337,]  258  674   44  371  846  166  589   19  653    74 #>  [338,]  620  520  309  578  755  645   98  936  384   424 #>  [339,]  398  428  401  108  330  598  429  766   97   529 #>  [340,]  794  385  710  873  827  212  467  663  864   193 #>  [341,]  734  382  701  478  322  188   28  197  764   546 #>  [342,]  238  453  361  836  770  494  130  604  350   721 #>  [343,]  599  659  187  228  787    5  937  225  870   405 #>  [344,]  816  471  866  396  488  468  704  696  473   905 #>  [345,]  593  596  927  585  459   81  711  967  854   373 #>  [346,]  140  738  532  112  761  841  969  125  580   547 #>  [347,]  173  172  847  524  102  475  174  116  826   263 #>  [348,]  839  365  583  848  323  964  732  842  919   539 #>  [349,]  436  493  492   78  465  877   53  829   77    73 #>  [350,]  238  342  155  127  453  147   92  770  141   575 #>  [351,]  542  504  119  809  415  440  426  389  263   960 #>  [352,]  574  619  132  551  590  907  913  688  388   353 #>  [353,]  688  698  570   50  930  541  682  669  860     4 #>  [354,]  296  292  929  803  798  249  723  883  362   400 #>  [355,]  728  774  236  808  950   25  523  989  162   529 #>  [356,]  472  373  405  359  512  130  825  631  422   752 #>  [357,]  737  508  385   75  638  188  432  227  648   756 #>  [358,]  646  840  964  988   10   69  819   40  903   587 #>  [359,]  373  225  422  472  405  356  870   94  488   602 #>  [360,]  217  536  957  592  295  799  179  310  526   271 #>  [361,]  939  564  490  466  512  130  453  661  342   116 #>  [362,]  400  378  133  997  723  292  958  880  878   382 #>  [363,]  800  586  703  387  195  514  127  155  614   951 #>  [364,]  545  797  926  180  440  178   94  975  609   119 #>  [365,]  732  839  152  458  348  722  964  113  312   885 #>  [366,]  615   14  206  157  517  210  767  442   35   673 #>  [367,]  952  324  192  750  194  917  403  730  501   442 #>  [368,]  441  919  481  420  792  992  293  239  479   543 #>  [369,]  319   61  483  126  413  396  431  488  942   936 #>  [370,]  876  335  855  290  257   28  701  310  718   670 #>  [371,]  674  240   19  569  764   74  834  394    1   301 #>  [372,]  818  204  476   87  796  719  307   48  811   858 #>  [373,]  422  359  870  356  459  585  405    5  816   345 #>  [374,]  192  444  122  461   14  522  326   49  233   367 #>  [375,]  941  566  900  334  637  318   22  167  684   882 #>  [376,]   48  230  389  596  426   87  713  887  593   504 #>  [377,]  216  821  242  637  200  460  966  948  203   882 #>  [378,]  400  362  997  133  382  999  780  958  723   197 #>  [379,]  203  152  948  637  200  941  375   70  684   918 #>  [380,]  521  163  407  657  134  489  247  418  266    86 #>  [381,]  105  163  266  921  694  808  898  418  259   247 #>  [382,]  478  197   59  341  734  958  701  394   28   764 #>  [383,]  446  321   51  863  822  754  241   36  932  1000 #>  [384,]  632  483  309  567  791  520  369  946   98   488 #>  [385,]  322  188  827  794   75  508  357  340  638   710 #>  [386,]  584  298    5  397  602  905  870  471  585   459 #>  [387,]  586  195  363  770   41  514  238  894  614   331 #>  [388,]  590   85   73    4  132  688   50  541  436   857 #>  [389,]  504  542  351  426  415  960  806   60  561   809 #>  [390,]  784  260  977  566  169  167  327  173  205    62 #>  [391,]  650  406  500  658   41  938  835  902  617   222 #>  [392,]  269  222  938  500  391  406  107  650  616   769 #>  [393,]   47  253  324  367  750  672  403  419  947     6 #>  [394,]  569  271  837  478   59  289  764  217  382   240 #>  [395,]  211  940  208  911  186  278  793  577  311   976 #>  [396,]  123  704  319  344  524  413  847  495  369   264 #>  [397,]  937  386  298  681  414  969  602  584    5   266 #>  [398,]   93  161   97  339  556  330  529  573   31   901 #>  [399,]  731  628  571  221  625  699  746  978  611   689 #>  [400,]  362  378  133  723  958  292  997  880  878   382 #>  [401,]  766  428  339  495  429  714  108  793   55   643 #>  [402,]  327  205  260  966  152  390  566  784  153   735 #>  [403,]    6  917  753  226  846  367  223  952  607   788 #>  [404,]  231  437  186    8  591  692  208  852  577   976 #>  [405,]  225  359  356  373  472  459  422  599  870     5 #>  [406,]  391  785  650  450  686  918  218  853  739   617 #>  [407,]  134  380  889  285  657  573   42  716  521   556 #>  [408,]  999  499  740  597  980  651  780  810   29   838 #>  [409,]  925  279  443  677  185  708  613  690  128   325 #>  [410,]   13  546   78  709  560  240   84  753   23   846 #>  [411,]  251  879  774  765  447  718  664  160  989   236 #>  [412,]  778  715  663  873  943  804  563  115  279    60 #>  [413,]   12  524  942  396  475  369  316  495  102   431 #>  [414,]  969  112  397  937  298  681  305  386  346   418 #>  [415,]  960  561  351  910  542  119  504  389    9    60 #>  [416,]  552  744  567  848  273  626  632  323  945   842 #>  [417,]  831  914  846   44  973   18  501  971  753   410 #>  [418,]  521  489  380  266  869  921  657  105  163   481 #>  [419,]  463  194  336  308  695  750  189  253   47    37 #>  [420,]  441  792  883  368  479  293  606  477  231   208 #>  [421,]   96  640  695  953  246  138  285  234  168   191 #>  [422,]  373    2  359  870  585  704  528  593   46   596 #>  [423,]  475  553  248  102  847  466  172  558  524   173 #>  [424,]  994  679  755  176  314  520  514  985  106   608 #>  [425,]  536  935  335  764  876  161  890  217  701   257 #>  [426,]  809  954  504  542  351  443   79  603  389   243 #>  [427,]  801  908  234  716  104   30  922  562  101   554 #>  [428,]   55  793  401  339  108  766  940  208  976   543 #>  [429,]  179  278  598  339  311  401  957  217  878   360 #>  [430,]   24  756  881  227  737   32   58  447  664   803 #>  [431,]  936   61   12  495  126  321  480  932  828   369 #>  [432,]  638  508  188  357   40  888  358  970  646   322 #>  [433,]   99  497   74  920  491  274  256  589  104   294 #>  [434,]  956  547  893  802  872  928  922  908  830   660 #>  [435,]  657   55  134  125   42  521  760  845  428   889 #>  [436,]  349  492   73  493  877  857  725  388  590   465 #>  [437,]  231  404  733  252  113    8   70  684  795   792 #>  [438,]  981  557  979  299  309  744   43  190  659   139 #>  [439,]  900  882  592   39   20  814  702   69  526   200 #>  [440,]  119  945  351  886  263    9  542  713  165   364 #>  [441,]  368  420  792  481  131  919  479  293  883   543 #>  [442,]  952  823   57  575  517  194  750  494  615   283 #>  [443,]  729  279  325  409  925  426  128   60  612   243 #>  [444,]  122  671  991  147  461  522  730  233   49    92 #>  [445,]  649  719  672  307  652   81  711  967  927   751 #>  [446,]   36  280 1000  302  181  383  822  268  600   241 #>  [447,]  718  664  411  160  227  627  251  193  881    24 #>  [448,]  129   21  850  144   34  282  790  897   27   452 #>  [449,]  128  693  708  548  511  603  279  690  987   652 #>  [450,]  739  686  853  136  272  268  616  406  918    21 #>  [451,]  183  783   31  909  901  890  751  654  554    93 #>  [452,]  697   34   21  810  272  448  136  850  980   282 #>  [453,]  141  288  248  770  939  494  342  720  361   564 #>  [454,]  843  846  410  753  223  525  782  986    6   622 #>  [455,]  912  160  158   83  523  284  665  989  605   559 #>  [456,]  641  124  990   69  334  311  526   22  142   598 #>  [457,]   38  232  963  682  965  464  698  644  849   669 #>  [458,]  732   62   63  124  988  167  964  365  205   840 #>  [459,]  927    5  373  345  585   81  870  593  596   905 #>  [460,]  853  686   33  218  637  282  377   68  242   329 #>  [461,]   49  730  782  522  122  192  223  367  871   444 #>  [462,]   80  944  494  939  183  604  720   57  361   123 #>  [463,]  336  419  159  189  194  114  308  823  660    57 #>  [464,]   38  682  457  849  353  698  907  983  232   570 #>  [465,]  493  804  827  349  877  715  436   10   40    73 #>  [466,]  564  939  116  248  361  847  172  475  423    46 #>  [467,]  317  613  185    3  676  873  925  409  663   677 #>  [468,]  579  667  696  471  344  480   86  108  766   125 #>  [469,]  645  994  424  314  338  106  642  520  755   835 #>  [470,]  533  303  315  765  165  540  313    9   25   867 #>  [471,]  344  480  468  905  866  579  816  667  584   488 #>  [472,]  356  359  225  405  520  755  373  631  488   578 #>  [473,]   51  490  631  512  825  123  754  344  361   863 #>  [474,]   54   18   29  497   35  914  831   14  326    34 #>  [475,]  847  423  524  102  173  172  347  466  413   553 #>  [476,]   71  811  221  815   87  628  858  372  699   672 #>  [477,]  198  186   55  208  940  577  793  428  595   435 #>  [478,]  382  734  764  197   59  394  701  341  217   271 #>  [479,]  543  293  792  299  911  795  630   70  976   848 #>  [480,]  471  126  431  468  845  866  579  828  344   667 #>  [481,]   76  921  869  820  992  368  418  856  626   297 #>  [482,]  174  527  229  563  313  691  165  347  826   636 #>  [483,]  791  369  630  384  567  632  946   61  319   309 #>  [484,]  605  239  481  131  982  418  763  772  489   368 #>  [485,]   81  996  927  833  304  678  719  580  459   246 #>  [486,]  537  214  607  288  727  283  720  494  565   575 #>  [487,]   64  506  576  943  910  884  705  682  668   960 #>  [488,]  344  369  584  126  471  631  905  816  704   578 #>  [489,]  418  380  521  657  134  407   42  112  435   266 #>  [490,]  711  862  361  473  661  939  704  512  116   123 #>  [491,]  256  562  289  685  589  294  101   74  908   104 #>  [492,]   78   77  829  144  436  725  877  349  857   727 #>  [493,]  465  877  804  349  436  224  715  827  622   891 #>  [494,]  575  720  283  453  462  788  288  939  486   226 #>  [495,]  123  431  401  396  264  413  766  942  316    12 #>  [496,]  879  892  411  251  765  250  146  772  919   867 #>  [497,]   29  474   54   35  838   99  513  408   72    18 #>  [498,]  624  224  622  873  663  963  576  877    3   676 #>  [499,]  651  272  740  810  597  136  408  999  980   213 #>  [500,]  391  650  392  902  938  222  617  406   41   658 #>  [501,]   44  150  952  166  324  846  367  326  442   194 #>  [502,]  591  781  662  151  581  749  277  895    8   175 #>  [503,]  207  924  814  184  201  526  295   89   22   636 #>  [504,]  389  351  426  542  809  806   79  954  415   561 #>  [505,]  215  717  935  759  611  685  947  291  265   320 #>  [506,]  960  415  561  849   64  797  609  542  812   943 #>  [507,]  746  716  234  254  961  640  138  731  215    32 #>  [508,]  638  188  322  341  712  357  385  432  182   734 #>  [509,]  903   10  135   40  827  758  794  465  646   313 #>  [510,]  300   25  156  690  193  950  677  563  896   715 #>  [511,]  128  449  156  243  603  563  693  263  809   279 #>  [512,]  825  130  361  473  490  631   51  721  356   770 #>  [513,]  276   72   82   35  838  157  773  294  673    95 #>  [514,]  679  195  985  586  558  103  424  635  106   983 #>  [515,]  358  819  646  312  432  964  568  988  722   844 #>  [516,]  243   15  528   46  117   11  115  172  661   511 #>  [517,]   27  973  575  442  245  615  206  283  831   448 #>  [518,]  644  729   60  687  232  612  443  177  676   965 #>  [519,]  915  595  477  802  202  274  928  198  254    30 #>  [520,]  755   98  608  578  424  176  338  384  472   631 #>  [521,]  380  657  418  266  869  435  134  489  163    86 #>  [522,]  233   49  461  782  730  223  444  192  122   671 #>  [523,]  158  236  989  774  162  355  627   83  728    79 #>  [524,]  847  475  102  347  173  413  396  826  636   319 #>  [525,]  843  971  145  782  454  973  417  461  831    49 #>  [526,]  334  641  814  207   22  503  316  201  636   311 #>  [527,]  691  482  583  313  539   62  174  124  165   229 #>  [528,]   46  661  516  243   15  117  116  172  466   704 #>  [529,]  330  728  398  556  990  355   97  339  901   950 #>  [530,]  515  706    7  970  432  568  312  551  242   132 #>  [531,]  274  928  328  955  923  802  920  893  519   922 #>  [532,]   67  125  346  738  550  140  761  480  595   547 #>  [533,]  303  470    9  165  315  313  691  812  700   765 #>  [534,]  742  714  241  895  828   52  724  280  773    95 #>  [535,]  582   26  203  379  885  148  152  722  277   200 #>  [536,]  217  360  425  701  764   59  957  335  271   310 #>  [537,]  486  727  572  115  214  288  607  986  669   877 #>  [538,]  662  107  683  581   88  955  895  534  749   773 #>  [539,]  250  583  867  527  456  964  313  552  124   142 #>  [540,]  315  765  193  758  470  718  160  533  300   447 #>  [541,]    4  572  860  934   85  137  725  857  688   103 #>  [542,]  351  389  504  426  809  415  119  440  243    15 #>  [543,]  793  911  479  293  992  428  108  976  208   845 #>  [544,]  270  747  207  592  814   39  641  199  655   310 #>  [545,]  180  364  797   94  178  926  975   15  542   440 #>  [546,]  709   13  764  240  734   84  560  410  478   701 #>  [547,]  802  434  956  928  893  923  532  830  140   346 #>  [548,]  693  987  449  708  128  603  854  652  751   511 #>  [549,]  594  830  841  851  724  281  547   52  923   538 #>  [550,]   67  845  480  532  125  143  126  979  471   828 #>  [551,]  805  132  242  388   50  907  688  821   85   590 #>  [552,]  945  323  416  539  700  297  583  856  250   303 #>  [553,]  423  102  137  475  934  172  972  503  248    89 #>  [554,]  654  562  120  451   93  801  183  179  817    80 #>  [555,]  147  114  366  159  171   92  206   14  615   444 #>  [556,]   97  398  529  760  889  330   93  161  573   728 #>  [557,]  309  438  981  126  979  584   61  787  550   602 #>  [558,]  786  608  248  770  466  195  423   98  514   564 #>  [559,]  912  160  284  193  949  315  540  447  613   467 #>  [560,]   84  790  799  850  271  546   78   13  618    90 #>  [561,]  960  415  351  910  504  949  542  389  806     9 #>  [562,]  685  554  120  935  801  491  101  425  394   256 #>  [563,]  156  511  482  119  229  778  165  174  263   510 #>  [564,]  466  361  117  939  836   46  130   11  786   453 #>  [565,]  607  486  612  788  279  325  226  537  909   917 #>  [566,]  260  167  375  390  941   62   22  205  458   784 #>  [567,]  632  483  630  384  791  744  946  416  126   820 #>  [568,]  966  205  312  732  458  365  152   63  203   839 #>  [569,]  394  289   74  780  197   19  371  478  382   240 #>  [570,]  930  103  860  353  983  541  703  698   50   572 #>  [571,]  168  993  628  259  285  221  978  399  407   621 #>  [572,]  860  541  934  137  537  103    4  930  288   553 #>  [573,]   31   93  398  556  751  451  285  987  654   529 #>  [574,]  352  132  551  913  762  633   91  590  688    53 #>  [575,]  283  494  720   27  442  517  288  214  453   486 #>  [576,]  884  705  135  943  864  498   64  663  590   873 #>  [577,]  940  186  198  742  208  714  692  643  395   793 #>  [578,]  932  631   98  520  936  488  369  309  608    61 #>  [579,]  468  667   86  125  471  696  108  480  845   766 #>  [580,]  738  761  281  841  275  660  140  485  866   830 #>  [581,]  683  781  502  107   88  662  175  538  151   499 #>  [582,]  535  277  170   26  437  379  151  666  885   213 #>  [583,]  539  527  964  250  323  691  348  124  867   313 #>  [584,]  386  905  602  870  488  471    5  585  816   298 #>  [585,]  870  816  345  593  373  905  459  422    5   344 #>  [586,]  363  387  800  614  514  195  703  314  726   106 #>  [587,]  610   69  267  199  655  840  358  646  964   456 #>  [588,]  454  223  306  525  680  782  258  843    6   192 #>  [589,]  256  491   74  653  371  291  685  301  834   562 #>  [590,]  388  132  436  688  913   73  349  493  465   698 #>  [591,]  502  781  404    8  895  749  852  213  662   692 #>  [592,]   39  702  360  544  439  526  957  207  924   217 #>  [593,]  596  345  585  927  954  713  422  459    2   854 #>  [594,]  851  841  549  830  281  346  580  761  547   678 #>  [595,]  532   67  435  125  477  112  346  550  140    55 #>  [596,]  593  345  927  713  954  585  459  422    2   854 #>  [597,]  838  740  832  276  837  101  499  895  181   164 #>  [598,]  311  429  330  339  267  456  990  278   97   911 #>  [599,]  225  343  405  359  187    5  373  870  459   787 #>  [600,] 1000  897  129  739  141  268  972  181  448   446 #>  [601,]   85   50    4  635  103  541  570  805  623   934 #>  [602,]  870  584  386    5  488  585  787  632  187   567 #>  [603,]  128  548  690  987  708  809  449  156  511   693 #>  [604,]  823   80   57  462  750  342  863  210   51   194 #>  [605,]  484  239  772  982  763  131  118  813  455   411 #>  [606,]  883  792  293  919   26  249  420  437  252   368 #>  [607,]  565  486  612  917  177  226  916  537  788   986 #>  [608,]   98  558  755  520  631  423  475  248  466   176 #>  [609,]  812  691    9  119  165  229  303  262  533   748 #>  [610,]  587  439  900   69  885  722  888  267  311   592 #>  [611,]  717  215  265  505  320  291  759  899   58   332 #>  [612,]  177  607  565  916  925  729  443  279  486   325 #>  [613,]  409  317   79  806  467  510  925  690  185   677 #>  [614,]  726  586  195  514  983  752  951  387  363   155 #>  [615,]  366   14  206  157  442  517  673  150  210   823 #>  [616,]  739  450  268  107  272  651   29 1000  600   406 #>  [617,]  658  650  218   68  902  985   33  391  406   805 #>  [618,]   90  244   89   84  727  295  799  720  779   783 #>  [619,]  907  352  590  682  705  464  576  388  551   530 #>  [620,]  338  196  995  675  327  309  936  835  578   645 #>  [621,]  699  993  811  259  962  978  628  571   79   168 #>  [622,]  224  493  891  212  877  410  794  827  498   804 #>  [623,]  169  975  926  176  748  635  178  262  679   797 #>  [624,]  986  669  877  916  224  537  498  492  963   698 #>  [625,]   71  221  185  759  628  815  399  717  699   265 #>  [626,]  820  299   76  744  567  416  921  481  856   694 #>  [627,]  978  774  989  236  896  523  355  718  265   259 #>  [628,]  221   71  571  993  811  168  699  399  621   625 #>  [629,]  811  621   48  699  476   87  796  993  372   806 #>  [630,]  791  142  483  942  319  946  369  567   61   126 #>  [631,]  473   98  608  578  344  512  754  488  825   932 #>  [632,]  567  384  483  791  946  602  309  488  630   369 #>  [633,]  149  237  785  865  745  875  617  406  902   767 #>  [634,]  836  752  333  564  721  220   46  729  967   325 #>  [635,]  103  601  623  679  786  169  176   85  934     4 #>  [636,]  201  826  874  316   22  102  142  641  990   334 #>  [637,]  375  460  941  918  136  377  853  686  948   450 #>  [638,]  508  432  322  188  357  385  712  341  757   970 #>  [639,]  111  181  280  741  268  895  957  924  302   714 #>  [640,]  234   96  716  953  421  695  285  685  427   908 #>  [641,]  456  526  124   69  874   22  207  270  636   990 #>  [642,]  314  424  726  614  176  106  180  679  975   514 #>  [643,]   95  714  101  817  302  179  401  773  429   280 #>  [644,]  729   60  965  518  232  115  443  516  243   612 #>  [645,]  469  994  424  338  314  520  755  835  620   106 #>  [646,]  358  903  964  840  819  587   40   10  515   892 #>  [647,]  255  261  833  678  594  851  580  841  485   281 #>  [648,]   75   28  880  855  370  267  146  257  292   664 #>  [649,]  445  307  721  861  967  719  230  672   81   991 #>  [650,]  391  658  617  985   41   68  406  835  218   902 #>  [651,]  272  810  980  499   66  136  452  616  739   450 #>  [652,]  325  751  693  711  548  449  708  661  987   862 #>  [653,]  215  332  291  505  138  611  961  904  589   717 #>  [654,]  554  776   31  451  183   80  120  308   93   285 #>  [655,]  199  290  310  670  641  544  270  867  370   267 #>  [656,]  357  354  892  737  296  292  803  362  648   756 #>  [657,]  435  134  521   42  380  760  125   55  407   889 #>  [658,]  617   68  650  218  985  835  902  391   33   805 #>  [659,]  787  228  343  602    5  187  937  386  870   584 #>  [660,]  189  868  171  281  807  998  114  830  956   863 #>  [661,]  116   46  528  117  693  490  704  361  466   939 #>  [662,]  895  749  107  502  538  591  534  581  268   742 #>  [663,]  873  412  943  715  317  510  794  910  804   778 #>  [664,]  718  447  876  370  899  251  227   75  881   335 #>  [665,]  912  455  949  559  806  284  160   83  561   629 #>  [666,]  582  170  535  109  277  148  997  151  249    26 #>  [667,]  579  468   86  869  471  845  126  108  480   319 #>  [668,]   64  884  135  910  509  812  609  533  691   903 #>  [669,]  916  624  986  214  537  698  930  154  486   220 #>  [670,]  310  290  286  655  779  199  300  295  370   747 #>  [671,]  991  444  122   37  419  861  233   47  649   721 #>  [672,]  445  947  953  815  307   47  652  393  751   707 #>  [673,]   82  157  150   72  302   95  276   36  837    57 #>  [674,]  371  846  240   44  166  501  685  258  337     1 #>  [675,]  995  620  749  196  379  733  502    8   43   918 #>  [676,]  925  467    3  317  873  518  612  498  409   858 #>  [677,]  896  690  185  891  510  279  409  708  300   156 #>  [678,]  833  255  485  996  580  304  140  346   81   969 #>  [679,]  514  176  985  424  635  103  558  169  623   977 #>  [680,]  815  306  258  625  904  858   71    6  759     3 #>  [681,]  937  228  397  187  626  820  602  898  386   414 #>  [682,]  698   38  849  353  457  963  464  943  232   930 #>  [683,]   88  581  538  107  175  662  781  955  502   497 #>  [684,]  900  213  941  318  113  375  692  795  334   311 #>  [685,]  562  120  505  166  256  935  491  554  308   215 #>  [686,]  853  450  460   21  282  136  129  218  739   637 #>  [687,]  177  518  612  916  232  204  333  858  220   729 #>  [688,]  353   50  388  541  857  698    4  725  570   132 #>  [689,]  731  628  221  399  138  625   71  815  476   904 #>  [690,]  156  603   25  896  677  708  510  128  950   449 #>  [691,]  527  229  165  313    9  812  482  609  583   988 #>  [692,]  976  795    8  208  231  318  684  793  577   742 #>  [693,]  449  548  128  652  661  708  511  116  603   987 #>  [694,]  898  921  381   76  297  856  945  626  820   552 #>  [695,]   96  419  336  953  640  463  308  421  253   191 #>  [696,]  862  468  776  344  711  579  123  490  766   396 #>  [697,]  452   34   21  329  829   23  121  850  810   980 #>  [698,]  353  682  930  688  541  570  669  849  572     4 #>  [699,]  621  978  221  628  811  993   71  627  259   571 #>  [700,]  303  533  945  552    9  470  165  323  440   812 #>  [701,]   28  764  536  734  370  478  341  217   59   425 #>  [702,]   39   20  924  592  282  184  439  814  136   544 #>  [703,]  363  195  127  570  800  586  514  860  985   154 #>  [704,]  396  847  344  661  116  490  528    2  524   862 #>  [705,]  864  576  706  590  884  135  970  619  498    64 #>  [706,]  530  432  970  509  864  705  515  638    7   135 #>  [707,]  736  909  947  265  890  717  451  935  708    31 #>  [708,]  449  128  548  603  987  693  690  909  279   736 #>  [709,]  546   84  764  891  244  240  560   90  701   410 #>  [710,]  881  227  340  385  447   58  664   24  899   794 #>  [711,]  862  490  751  652  661  696  693  854  345   361 #>  [712,]  182  508  378  638  197  757  341  382  362   400 #>  [713,]  954  596  593    2  426  440  422  542  809   504 #>  [714,]  643   95  534  280  895  302  742  401  577   773 #>  [715,]  804  412  286  891  778  300  877  663  493   465 #>  [716,]  234  427  801  889  407  202  640   42  134   285 #>  [717,]  265  611  759  505  215  707  935  320  736   947 #>  [718,]  447  664  370  896  193   75  876  251  411   540 #>  [719,]  307  445   81  649  246  485  927  672  796   996 #>  [720,]  494  288  575  727  283  939   90   89  618   486 #>  [721,]  991  342  512  361  130  825  634  649  752   604 #>  [722,]  885  819  610  312  365  732  200  882  964   113 #>  [723,]  400  296  362  133  235  958   16  292  164   997 #>  [724,]   52  828  241  275  830  321  534  932  807   383 #>  [725,]  857  860  492  541  829  144  154  436  572   329 #>  [726,]  614   56  983  586  951  642  800  752  789   155 #>  [727,]   90  618  537  720   89  486  244  288   77   286 #>  [728,]  355  529  808  774  330  950  236  556   25   989 #>  [729,]  644  443   60  634  965  518  243  516  612   325 #>  [730,]  461  782  917   49  367  753  442  973  223   991 #>  [731,]  399  746  689  628  625   58  221  611  571   332 #>  [732,]  458  365  839   62  152  964  124  722  566   205 #>  [733,]   70  437   43  231  252    8  931  995  795   143 #>  [734,]  341  478  546  701  764   13  382  197  747   709 #>  [735,]  974  805  907  601  966   85   68  205   50   623 #>  [736,]  707  265  708  987  978  890  909   31  717   573 #>  [737,]  227  756  881   75   24  648  357  664  447   880 #>  [738,]  140  761  580  346  532  125  275  776  866   471 #>  [739,]  450  616  268  600  272  686  136  853  452   129 #>  [740,]  597  837  499  838  394  452  850  271  272   999 #>  [741,]  111  944  957  264  302   89  639  201  280   179 #>  [742,]  534  714  577  198  923  692  895    8  828   143 #>  [743,]  273  933  842  364  402  926  797  139  974   262 #>  [744,]  299  416  848  567  190  626  632  273  820   483 #>  [745,]  237  767  245  871  287  206  971  149  831   127 #>  [746,]   32  507  731   58  961  399  611  215  332   291 #>  [747,]  544   77  207  270  286   78   39  184  310   702 #>  [748,]  262  623  926  178  797  635  169  173  975   347 #>  [749,]    8  995  662  895  591  502  534  692  742   143 #>  [750,]  194  952   57  823  308   80  604  324  367   442 #>  [751,]  652   31  711  862  548  183  451  987  693   854 #>  [752,]  130  634  836  333  564  721   56   11  512   614 #>  [753,]  973  283  403   27  846  917  575  410  226   730 #>  [754,]   51  866  473  932  275  863  631  321  825   383 #>  [755,]  520  608   98  424  314  176  558  578   41   679 #>  [756,]   24  737  227  881  447   75  430  664  758   718 #>  [757,]  638  712  432   91  508  182  970  219   45   888 #>  [758,]  540  315  765  193  509  470  533  903  718   447 #>  [759,]  717  505  611  265    1  947  707  215  935   984 #>  [760,]  889  556  763   42   97  813  435  657   55   211 #>  [761,]  275  738  841  866  580  471  905  281  532   830 #>  [762,]  875  216  242   45   53   91  824  551  821    66 #>  [763,]  813  772  760  131  889  556  146  251  211    97 #>  [764,]  240  546  701  478  425  536  709  734   59   271 #>  [765,]  540  470  315  867  411  251  879  718  758   950 #>  [766,]  401  428  495  108  339   55  468  696  579   776 #>  [767,]  206  745  245  237  366  871  831  287  615   517 #>  [768,]   66  651  151  499  980  824  875  408  810   272 #>  [769,]  894  938  338  269  314   41  387  755  578   645 #>  [770,]  248  238  558  453  130  195  466  564  331   342 #>  [771,]  257  161  958   59  425  855  320  878   97   335 #>  [772,]  813  763  131  760  146  211  118  879  251   929 #>  [773,]   95  276  817  513  807  302  714  643  280    36 #>  [774,]  989  236  627  523  355  728  978  251  158   411 #>  [775,]  110    1  984  904  332  834   19  301  371   653 #>  [776,]  696  654  862   80   31  751  766  711  183   817 #>  [777,]  988  229   10    7   73  270  465  135  482    63 #>  [778,]  412  563  715  115  511  804  243  229  286   537 #>  [779,]  295  286  874  826  670  901  201  618   89   244 #>  [780,]  569  958   74  394  382  834   59  301  197   378 #>  [781,]  175  502  591  581  852  328  662  404  151    88 #>  [782,]  730  223  461   49    6  753  917  973  522   367 #>  [783,]  901  451  183  890  909  244   31  618  779   264 #>  [784,]  390  977  260  169  566  173  623  167  327   102 #>  [785,]  406  875  853  450  686  918  739  216  149   651 #>  [786,]  558   11  172  466  103  564  635  248  423    46 #>  [787,]  659  602  870  228  359  584  225    5  632   187 #>  [788,]  226  494  917  565  607  909  486  720  283   750 #>  [789,]   56  752  726  333  634  951  614  836  887   220 #>  [790,]  560  850   84  799   27  283  448  271  914    78 #>  [791,]  630  483  946  142  319  369  567  524  384   173 #>  [792,]  293  479  420  883  606  231  437  911  252   543 #>  [793,]  208  911  428  976  940  543  401  395  692   339 #>  [794,]  827  891  715  300  224  322  873  804  385   193 #>  [795,]  318  976  692  113  334  942  941  911  684    70 #>  [796,]  962  811  719  993  372  168  996  246  476   621 #>  [797,]  926  262  748  975  178  180  623  364  545   849 #>  [798,]  982  118  929  131  354  772  296  803  813   915 #>  [799,]   84  560  618  790  957  271   89  850   90   244 #>  [800,]  363  586  155  703  614  951  387  127  195    65 #>  [801,]  427  562   93  554  908  234  161  716  771   101 #>  [802,]  547  434  872  928  893  923  956  519  955   531 #>  [803,]  929  292  118  296  880  235  723   32  648   400 #>  [804,]  715  877  286  493  891  465  224   77  747   412 #>  [805,]   50  735  601   85   33  907   68  551  658     4 #>  [806,]  504  613   79  389  561  949  162  426  351   960 #>  [807,]  868  863  817  241   52  773  660  302  210   998 #>  [808,]  728  355  854  163  236  259  987  886  162    86 #>  [809,]  954  426  603   79  511  128  886  351  263   504 #>  [810,]  272  651  980  136  452   45  499  697  702   853 #>  [811,]  993  621  476  628  221   71  699  962  168   796 #>  [812,]  609    9  691  165  119  303  533  229  313   527 #>  [813,]  772  763  131  211  760  146  889   97  556   251 #>  [814,]  207  503  526   22  924  184  544  167  439   641 #>  [815,]   71  947  221  672  476  625  628  707  858   680 #>  [816,]  905  344  866  471  585  473  696  488  490   631 #>  [817,]  302   95  807  643  773  280  241  554  714    80 #>  [818,]  204  372  230  858  649  967   87  307  861   687 #>  [819,]  722  358  964  646  885  839  312  587  515   365 #>  [820,]  626   76  299  921  869  567  856  481  297   667 #>  [821,]  377  966  216  242  203  824  460  637   68    63 #>  [822,]  331  859  141  944 1000  248  423  446  111   972 #>  [823,]   57  194  604  442  750  210  952   80  462   308 #>  [824,]  948  216  377  918   45  875  821  637  203   785 #>  [825,]  512  130  473  361   51  631  490  754  721   356 #>  [826,]  874  201  636  779  264  102  990  524  295   174 #>  [827,]  322  794  465   40  493  188  891  385   10   804 #>  [828,]  241  321  724  431   52  932  534  480  275   495 #>  [829,]  492   78  725  121   27  857  349  697  448   144 #>  [830,]  281  275  841   52  724  868  761  660  998   807 #>  [831,]  417  914  973  971  517   34  206   27   18    14 #>  [832,]  852  164  597   16  133  278  997  999  577   591 #>  [833,]  255  678  485  996   81  459  927  580  304   969 #>  [834,]  301   19   74  780  371  569  589  197  382   291 #>  [835,]  196  658  650   68  391  985  902  994   41   617 #>  [836,]  220  333  564  634  342  752  130  155   11   951 #>  [837,]  271  394  957  850  740  799  217  179  181   560 #>  [838,]  276  597  513  101   72   82   35  289  740    95 #>  [839,]  365  348  732  964  458  819  722  583  152   844 #>  [840,]  270   69  988  358  124   10  964  641  544   199 #>  [841,]  830  761  281  275  580  346  738  532  594   724 #>  [842,]  323  273  848  933  348  416  552  583  839   691 #>  [843,]  525  959  454  971  913  121  145  782  624   986 #>  [844,]  148  839  365   26  568  819  312  515  732   722 #>  [845,]  125  480  667  579  550  468  869  108   55    67 #>  [846,]  674  753  403   44  501  410  417  367  952   166 #>  [847,]  475  524  116  347  172  466  102  704  173   423 #>  [848,]  744  348  416  190  842  273  299  630  323   479 #>  [849,]  682  698  943   38  115  797  930  748  601   965 #>  [850,]  560  790   34  799  271  914  448  837   13   452 #>  [851,]  594  549  281  841  830  171  261  998  114   660 #>  [852,]  832   16  164  577  591  328  997  186  781   404 #>  [853,]  686  460   21  450  136  282  329  129  637   739 #>  [854,]  548  987  954  808  693  751  862  603   86   711 #>  [855,]  257  335  370  146  267  876   97  290  251   648 #>  [856,]  297   76  921  992  667  869  945  319  886   108 #>  [857,]  725  541  860  492  329  436  829  144  688     4 #>  [858,]  204   87  177  306  815  476    6  818  612   925 #>  [859,]  331   41  822  972  977  248  423  141  608   558 #>  [860,]  572  541  725  570  857  214    4  930  288   103 #>  [861,]  649  307  671   37   47  445  719  818  721   991 #>  [862,]  711  696  490  751  123  661  704  854  652   396 #>  [863,]   51  868  807  210  998  473  754  604  383   462 #>  [864,]  705  576  340  212  498  970  706  622  827   385 #>  [865,]  902  785  633  149  406  617  391  658  500   650 #>  [866,]  344  471  816  932  905  275  754  761  480   473 #>  [867,]  250  950  539  313  765  199  655  290  470   300 #>  [868,]  998  807  863  660  189  210  281   51  171   275 #>  [869,]  921   76  667  521  266  579  845   86  856   418 #>  [870,]  602    5  585  373  584  422  359  386  459   488 #>  [871,]  245  127  206  745  145  971  517   65  767   154 #>  [872,]  802  434  547  956  893   96  955  695  928   191 #>  [873,]  663  317  412  715  224  794  943  891  925   677 #>  [874,]  826  201  636  779  295  990  264  641  316   526 #>  [875,]  785  216  762   66  242  824  810  651  853    45 #>  [876,]  335  370  425  257  320  664  855   28  701   899 #>  [877,]  804  493  224  492  624  986  436  715  465   349 #>  [878,]  278  267  133  211  958   97  257  429  146   598 #>  [879,]  496  411  892  251  146  765  648  867   75   855 #>  [880,]  648   28  958  400  803   59  771  362  292   899 #>  [881,]  227   58  710  737  664  899   24  756  447    75 #>  [882,]  200  439  900  885   20  375  100  814  167    69 #>  [883,]  606  249  395  293  792  911  211  208  231   420 #>  [884,]  135   64  943  668  576  910  663  777  229   509 #>  [885,]  722  200  882  312  900  610  439  100  819   732 #>  [886,]  263  954  809  945    2  603  808  297  162   854 #>  [887,]   15  967  634  752   56   46  230  422  729   516 #>  [888,]  219   39  100   20  439  592  610  702  544   882 #>  [889,]  760  556   42  407  716  134  657   97  763   202 #>  [890,]  901  783  335  909  451  425  707  161  244   935 #>  [891,]  804  224  709  715  794  677  286  670  877   827 #>  [892,]  496  879  648  646  587   75  765  146  411   251 #>  [893,]  956  434  955  547  773  928  513  923  802    52 #>  [894,]  769  387  755  314  754  238  938   41  383   578 #>  [895,]  662  714  534  280  639  268  742  181  749   591 #>  [896,]  677  690   25  950  627  718  510  890  300   335 #>  [897,]  972  141  129  600  331  448  453  288  248   822 #>  [898,]  694  381  921   76   83  626  681  105  481   187 #>  [899,]  320   58  291  664  876  611  881  332    1   880 #>  [900,]  439  882  684  200  375  941  213  526  610   592 #>  [901,]  783  890  451  779  183  244  909  295  264   618 #>  [902,]  658  617  650  391  835  865  500   68  406   196 #>  [903,]   10  509   40  646  313  358  840  988  300   270 #>  [904,]  332    1  653  759  984  611  775  625  215    58 #>  [905,]  816  471  584  866  344  585  488  386  761   298 #>  [906,]  287   66   17  980   54  768  968  474  875   149 #>  [907,]  805   50  735  601  974  551   85  388  619     4 #>  [908,]  922  104  427   30  801  101  643  554  920   562 #>  [909,]  451  783  707  708  244  890  183  901  449    90 #>  [910,]  415  960   64  317  561  663  884  668  943   193 #>  [911,]  793  976  293  208  395  543  311  598  795   940 #>  [912,]  559  949  160  284  315  455  540  806  665   193 #>  [913,]  132  590  436  688  349  121  857  829  624   725 #>  [914,]   34  850  831  417  790   27  560   13  501   150 #>  [915,]  519  920   30  274  202  477  235  328  104   254 #>  [916,]  669  986  607  612  624  220  214  177  486   537 #>  [917,]  226  403  788  607    6  753  730  367  283   565 #>  [918,]  637  948  450  785  406  824  853  686  136   272 #>  [919,]  368  348  293  792  606  496  250  992  583   539 #>  [920,]  104   30  274  922  164  908  328  427   16   101 #>  [921,]   76  869  856  297  266  481  820   86  667   694 #>  [922,]  104  908   30  920  101  274  427  276  643    95 #>  [923,]  928  742  534  547  198  724  893  532   52   802 #>  [924,]  184  503  282  702  814  207  526  111  144   592 #>  [925,]  409  279  185  443  677  612  565  613  676   873 #>  [926,]  178  623  975  180  797  169  748  262  176    94 #>  [927,]   81  345  459  593  596  485  967  585  230   445 #>  [928,]  923  547  802  893  198  742  531  274  434   534 #>  [929,]  803  118  296  292  235  798  723  813  772    32 #>  [930,]  570  103  115  860  698  572   11  965  983   541 #>  [931,]  143    8  995  733  231  404   67  742  749   550 #>  [932,]  321  866  431  578  754  828  936  631  275   344 #>  [933,]  842  743  273  323  812  609  364  262  568   205 #>  [934,]  137    4  572  541   85  553   73  860  144   635 #>  [935,]  425  505  562  120  707  717  890  685  161    93 #>  [936,]   61  431   12  126  369  932  578  143  321   413 #>  [937,]  397  681  228  187  414  386    5  969  298   602 #>  [938,]  222  269   41  391  392  383  650  859  500  1000 #>  [939,]  361  466  116  564  453  720  117  490  944   494 #>  [940,]  577  208  793  395  186  428  211  976  401   911 #>  [941,]  375  318  334  684  900   22  566  637  795   526 #>  [942,]  316  142  413  319  630   12  495  369  431   334 #>  [943,]  663  412  884  873   60  849  778  135  682   576 #>  [944,]  741  123  462  939  822  264   89  111  720   475 #>  [945,]  552  886  440  297  856  303  165  700  539     9 #>  [946,]  791  319  483  524  630  369  173  174  347   263 #>  [947,]  707  815  672  505  759  717  736  120  909   935 #>  [948,]  824  918  637  377  272  216  136  200   45   213 #>  [949,]  912  315  561  559  160  470  806  540   83   533 #>  [950,]   25  156  867  300  355  690  728  510  290   896 #>  [951,]  155  220  333  836  614  800  930  983  726    11 #>  [952,]  194  750  367  442  501   57  823  324  150   308 #>  [953,]  246  285  672  654  695  640  308  419  445   776 #>  [954,]  809  426  854    2  886  603  987  548  713   263 #>  [955,]  893  531  928  538  434  923  513  956  802   547 #>  [956,]  434  893  547  660  773  807  830  908  817    52 #>  [957,]  360  179  799  217  741  271  837  111  592   536 #>  [958,]   59  133  771  878  382  400  217  880  780    28 #>  [959,]  843  963  498  454  913  525  624  669  916   986 #>  [960,]  561  415  351  910  542  504  389  506  119   806 #>  [961,]  332  653  291  746   58  215  899   32  611   589 #>  [962,]  993  168  621  811  796  304  247  105  571   246 #>  [963,]  232  457   38  669  682  624  698  916  498   353 #>  [964,]  583  358  840   69  458  527  124  646  732   839 #>  [965,]  115  333  644   11  930  220  729  516  634    60 #>  [966,]  205  821  568  377  203   63  566  152  260   167 #>  [967,]  230  345  634  887  649  927  721  445  596    81 #>  [968,]   54   18  474   17  417  287   19  906   23   121 #>  [969,]  414  112  298  397  346  386  937  140  738   761 #>  [970,]   53  349  432  465   91  212  322  638    7   590 #>  [971,]  973  831  525  871  417  145  745  245  517    27 #>  [972,]  897  141  331  129  859  553  248  137  600   423 #>  [973,]   27  753  517  283  971  831  575  214  829   442 #>  [974,]  735  623  975  209  601  169  805  679  994   176 #>  [975,]  623  926  180  176  178  169  797  635  679    94 #>  [976,]  692  793  795  208  911  318  231  940  428   543 #>  [977,]  784  390  859  423  169  553  260   98  608   679 #>  [978,]  627  989  774  259  736  265  236  699  896   355 #>  [979,]  981  550   67  557  299  931  845  143  438   479 #>  [980,]  651  810  452  697  272  499   66   34  739   740 #>  [981,]  979  438  557  299  190   43  550  744  820   931 #>  [982,]  131  798  772  484  605  813  118  763  202    42 #>  [983,]  570  930  103  514  726  614  951   11  679   195 #>  [984,]    1  110  759  240  371  320  904  674  899   775 #>  [985,]  679  514  658  650   41  218   68   33  617   977 #>  [986,]  624  669  916  877  214  537  492  607  486   753 #>  [987,]  548  603  708  854  128  693  449  751  652   736 #>  [988,]  840  777   62   10   63  458  270  358  527     7 #>  [989,]  236  774  523  627  158  978  259  355  728   808 #>  [990,]  874  316  330  456  636  826  641  529  142   264 #>  [991,]  721  342  671  122  604  730  836  917  226   444 #>  [992,]  543  856  297  250   76  539  481  293  108   330 #>  [993,]  168  811  962  571  621  628  221  699  259    71 #>  [994,]  424  645  106  314  835  985  679  469  755   176 #>  [995,]  749    8  143  931  936  733  620  675   12   828 #>  [996,]  304  485   81  833  927  678  247  246  719   459 #>  [997,]  133  362  999  378   16  400  170  852  832   723 #>  [998,]  868  171  863  281  210  189  660  807  114    51 #>  [999,]  408  997   16  832  378  740  499  164  597   780 #> [1000,]  268  600  446   36  181  822  280  639  739   111 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.16464834 0.6961714 0.7172087 0.7836990 0.8296052 0.8383418 0.8648237 #>    [2,] 0.49477380 0.5711163 0.5973763 0.5974632 0.6496536 0.6917008 0.7002145 #>    [3,] 0.86961137 0.9254196 1.1205039 1.1841235 1.2348780 1.2423987 1.2658056 #>    [4,] 0.24334511 0.2829114 0.4400788 0.5214110 0.5262908 0.5328506 0.5855788 #>    [5,] 0.42830424 0.5390614 0.5509676 0.6199954 0.6548853 0.6807978 0.6837389 #>    [6,] 0.43748296 0.4446368 0.5999810 0.7869795 0.8181038 0.8366814 0.8450701 #>    [7,] 0.57395510 0.6403181 0.6791375 0.6974353 0.7264497 0.7657190 0.7825720 #>    [8,] 0.53512120 0.6095643 0.6285900 0.6289312 0.6478455 0.6734987 0.6784235 #>    [9,] 0.19315210 0.3455428 0.4205658 0.5048724 0.5075274 0.5674844 0.5949242 #>   [10,] 0.24084246 0.4462027 0.5422454 0.5653496 0.5739551 0.5904740 0.6051189 #>   [11,] 0.37793008 0.5451290 0.5625144 0.5760614 0.6346099 0.6363264 0.6457022 #>   [12,] 0.37384739 0.4579567 0.4599599 0.5567736 0.5998382 0.6358950 0.6433436 #>   [13,] 0.37183782 0.4233476 0.4848306 0.5275233 0.5700364 0.5711195 0.5950557 #>   [14,] 0.47373927 0.4803706 0.5887377 0.6834126 0.8020734 0.8655146 0.8860401 #>   [15,] 0.34729316 0.4530333 0.4696739 0.4939460 0.6642093 0.6689797 0.6842359 #>   [16,] 0.38386639 0.6351146 0.6635499 0.7010966 0.7496675 0.7576663 0.8091816 #>   [17,] 0.91503334 1.5064512 1.5782863 1.8069881 1.8587935 1.8637992 1.8924326 #>   [18,] 0.66722745 0.6709875 0.7984856 0.8356182 0.8460182 0.9072663 0.9898709 #>   [19,] 0.41592094 0.4907001 0.5619449 0.6601319 0.6782467 0.8420174 0.8856733 #>   [20,] 0.36470650 0.4517709 0.5265508 0.5365436 0.5626089 0.5969058 0.6016457 #>   [21,] 0.30736409 0.3869857 0.3896754 0.4699849 0.4862872 0.5164959 0.5497035 #>   [22,] 0.30018606 0.3830789 0.4030674 0.4116959 0.4366822 0.4799538 0.5259052 #>   [23,] 0.42334761 0.7091858 0.7235837 0.7262605 0.7322873 0.7454407 0.7508082 #>   [24,] 0.40789365 0.6825085 0.8070360 0.8258309 0.8306010 1.0448212 1.0502608 #>   [25,] 0.33982051 0.3849576 0.4123737 0.4130222 0.5281775 0.5759512 0.5824385 #>   [26,] 0.63788846 0.7487080 0.9172868 0.9174509 0.9282266 0.9826809 1.0326897 #>   [27,] 0.37917177 0.3931635 0.4337569 0.4834340 0.5077420 0.6058215 0.6330119 #>   [28,] 0.33196298 0.5091326 0.5872882 0.5952990 0.6191701 0.6395511 0.6448378 #>   [29,] 0.72301580 0.7490924 0.8629877 0.8898348 0.9682805 0.9744020 1.0171518 #>   [30,] 0.33563523 0.4512064 0.4789341 0.5908040 0.6454767 0.6715761 0.7940804 #>   [31,] 0.30459140 0.3857096 0.4281213 0.5022500 0.5180524 0.5632561 0.5645913 #>   [32,] 0.76184440 0.8075007 0.8513452 0.9081671 0.9178498 0.9918165 1.0365303 #>   [33,] 0.22013873 0.5107915 0.5507144 0.6548283 0.6833267 0.7112002 0.7174742 #>   [34,] 0.40088801 0.4793743 0.5171175 0.5835634 0.6712633 0.6992624 0.7170819 #>   [35,] 0.31939785 0.5291617 0.5529781 0.5716671 0.7088658 0.7190559 0.7219221 #>   [36,] 0.16642668 0.3496355 0.4773581 0.4904159 0.5409065 0.6267008 0.6916397 #>   [37,] 0.73671374 0.8621744 0.9759354 1.0786660 1.0956052 1.1243111 1.1607490 #>   [38,] 0.30845086 0.6245585 0.6901269 0.8201462 0.8567963 0.9468507 0.9616841 #>   [39,] 0.29387133 0.3410406 0.4517709 0.4984357 0.5091772 0.5256291 0.5567886 #>   [40,] 0.24084246 0.4997507 0.6024243 0.6394867 0.6619020 0.6791375 0.6949572 #>   [41,] 0.44094798 0.6343445 0.6448699 0.6477847 0.6962288 0.7138864 0.7194455 #>   [42,] 0.34707999 0.5286882 0.5462935 0.5959750 0.6013225 0.6105727 0.7720752 #>   [43,] 0.73065790 0.9782040 0.9897422 1.0774977 1.1847967 1.1947594 1.3023717 #>   [44,] 0.29023565 0.5980090 0.5982993 0.6543033 0.6567802 0.6935538 0.7231174 #>   [45,] 0.39700979 0.6839490 0.7436483 0.8153795 0.8226358 0.8449527 0.8598487 #>   [46,] 0.15731943 0.3765062 0.4394362 0.4503461 0.4939460 0.5073311 0.5194960 #>   [47,] 0.50267678 0.6949920 0.8032029 0.8239424 0.8336523 0.9610692 0.9965373 #>   [48,] 0.48843080 0.9683850 1.0138308 1.1518965 1.1578829 1.1660987 1.1740803 #>   [49,] 0.28236883 0.6356028 0.6465128 0.7200232 1.0687737 1.1078364 1.1387106 #>   [50,] 0.48324749 0.5214226 0.5262908 0.6126128 0.6248762 0.6659119 0.6765966 #>   [51,] 0.31288933 0.4155183 0.5524264 0.5934302 0.6158018 0.6166146 0.6427064 #>   [52,] 0.30264243 0.3764663 0.5407363 0.5425612 0.5453472 0.5644349 0.6480187 #>   [53,] 0.69611107 0.7657587 0.8226691 0.8584003 0.8727013 0.8771693 0.8947969 #>   [54,] 0.46883675 0.6672274 0.9532210 1.0522233 1.1037502 1.2668989 1.3149105 #>   [55,] 0.38311365 0.4842305 0.5842990 0.6429351 0.6612194 0.6728767 0.6787602 #>   [56,] 0.65481314 0.7046197 0.7524719 0.8508672 0.8548777 1.0076838 1.0594079 #>   [57,] 0.23106474 0.3473076 0.4225965 0.4510731 0.5008082 0.5232824 0.5281050 #>   [58,] 0.59921092 0.6919050 0.7346080 0.7465740 0.7618444 0.8024771 0.8730806 #>   [59,] 0.29810547 0.4978462 0.5046157 0.5378877 0.5748470 0.5754165 0.5872882 #>   [60,] 0.52180552 0.7142839 0.7906931 0.8288101 0.8389482 0.8392117 0.8914123 #>   [61,] 0.32514717 0.3278057 0.4355327 0.4493299 0.5848716 0.6438615 0.6460145 #>   [62,] 0.33689236 0.4487314 0.5092996 0.5809886 0.5849494 0.5861431 0.6146280 #>   [63,] 0.48082706 0.5793828 0.5809886 0.5905196 0.7288206 0.7337677 0.7559830 #>   [64,] 0.55661137 0.6652639 0.8572748 0.8990448 1.1364118 1.1519858 1.1726166 #>   [65,] 0.87520863 0.9067886 0.9288955 0.9397843 0.9542046 0.9944418 1.0444336 #>   [66,] 0.56869969 0.7350032 0.8359232 0.9066305 1.0572057 1.0646581 1.1515106 #>   [67,] 0.24165860 0.5816378 0.7026527 0.7646808 0.7708295 0.7797628 0.8775587 #>   [68,] 0.40536556 0.4279020 0.5107915 0.6806155 0.6807108 0.6850440 0.7183149 #>   [69,] 0.33253883 0.3911188 0.4424147 0.4805005 0.4998998 0.5958527 0.6052702 #>   [70,] 0.50218625 0.6738753 0.6741109 0.6891179 0.8110796 0.8787373 0.8847877 #>   [71,] 0.33779326 0.5409359 0.5715736 0.5720451 0.7479068 0.7574055 0.8474943 #>   [72,] 0.27502464 0.3193979 0.4276745 0.4499817 0.4979119 0.5598570 0.6383549 #>   [73,] 0.55301622 0.5580194 0.5740192 0.6254647 0.6479538 0.6497451 0.6634349 #>   [74,] 0.53722476 0.5619449 0.5905038 0.6520662 0.6879832 0.7265033 0.7987878 #>   [75,] 0.49006846 0.6394181 0.6713121 0.6718749 0.7336282 0.7425097 0.7531800 #>   [76,] 0.33260011 0.4469061 0.4588044 0.4813455 0.5052785 0.6234528 0.6860114 #>   [77,] 0.24052376 0.3802063 0.4308678 0.4707250 0.5023793 0.5773656 0.6113547 #>   [78,] 0.42178032 0.4308678 0.5090026 0.5432507 0.5438314 0.5618666 0.5711478 #>   [79,] 0.45746267 0.5336108 0.5806200 0.7012472 0.7030041 0.7088307 0.7143547 #>   [80,] 0.42027149 0.4510731 0.4847198 0.5402080 0.5664358 0.5955280 0.6274769 #>   [81,] 0.25877334 0.4892417 0.6544191 0.6683874 0.7623330 0.7738578 0.8413232 #>   [82,] 0.27502464 0.3206093 0.3887504 0.5215600 0.5226246 0.5291617 0.5648844 #>   [83,] 0.48498289 0.6378486 0.7501935 0.8588803 0.8771701 0.9551075 0.9893648 #>   [84,] 0.25720415 0.3278489 0.3874233 0.3878139 0.3984012 0.4600519 0.4820576 #>   [85,] 0.24334511 0.4327957 0.5063394 0.5214226 0.5321686 0.5677245 0.6381351 #>   [86,] 0.46749307 0.4970890 0.5155398 0.5442580 0.5501279 0.6551967 0.6561717 #>   [87,] 0.48843080 0.9081595 0.9384899 0.9761018 0.9988404 1.1244528 1.1392229 #>   [88,] 0.60347310 0.8062327 1.0059715 1.0121904 1.0562971 1.1912528 1.2460376 #>   [89,] 0.31169468 0.3616799 0.4597241 0.4749561 0.4982801 0.5142627 0.5214540 #>   [90,] 0.18601227 0.2113961 0.3475942 0.3874233 0.4597241 0.5030347 0.5570741 #>   [91,] 0.91503334 1.1640820 1.1846178 1.2803936 1.2954550 1.5403791 1.5651761 #>   [92,] 0.41557834 0.7919105 0.8863537 0.9288955 1.0262572 1.1437903 1.1574792 #>   [93,] 0.31759081 0.3259659 0.5180524 0.5250534 0.5532245 0.5792122 0.5863690 #>   [94,] 0.43876553 0.4571204 0.6446268 0.6689797 0.6943452 0.7740258 0.7929957 #>   [95,] 0.30134733 0.3899182 0.4202556 0.4239172 0.4369306 0.4954367 0.5713134 #>   [96,] 0.62177708 0.7459948 0.8428684 1.0580256 1.0694814 1.0894757 1.1475952 #>   [97,] 0.37517394 0.4014768 0.4242089 0.4870426 0.4936564 0.5532245 0.5799257 #>   [98,] 0.18280805 0.4372617 0.5259614 0.5635615 0.6195011 0.6236231 0.6333104 #>   [99,] 0.98663669 1.0440155 1.1402103 1.1696935 1.1711947 1.1778480 1.1811293 #>  [100,] 0.39700979 0.5365436 0.5483818 0.6365686 0.6696204 0.6886177 0.7163106 #>  [101,] 0.50594859 0.5713134 0.6195753 0.6221504 0.6405807 0.6510229 0.6555262 #>  [102,] 0.36738351 0.3698023 0.3832512 0.4042771 0.4223787 0.4363457 0.4476355 #>  [103,] 0.29962323 0.5206740 0.5422024 0.5771239 0.5812003 0.6064883 0.6364283 #>  [104,] 0.27875495 0.3356352 0.3711834 0.4637339 0.6516187 0.6825673 0.7094994 #>  [105,] 0.41732757 0.5039363 0.5324029 0.6761268 0.8169803 0.8693629 0.8809098 #>  [106,] 0.74189004 0.7444919 0.7726483 0.7991191 0.8161936 0.8305014 0.8759180 #>  [107,] 0.66646809 0.7053552 0.7970489 0.8495925 0.9095541 1.0275553 1.0520577 #>  [108,] 0.46123456 0.4729633 0.5681569 0.5738325 0.5811879 0.6113438 0.6435044 #>  [109,] 1.52448525 1.6225418 1.7511003 1.7995223 1.8969201 1.9585169 1.9914059 #>  [110,] 0.63194654 0.6961714 0.7928847 1.1009734 1.1194917 1.1241383 1.1733222 #>  [111,] 0.29873064 0.3178282 0.4542132 0.5389952 0.5576769 0.5683972 0.5980938 #>  [112,] 0.68180349 0.7811011 0.8072307 0.8111868 0.8139516 0.8382867 0.8536828 #>  [113,] 0.51143075 0.5454901 0.5479119 0.7227222 0.7347467 0.7364359 0.7648786 #>  [114,] 0.39879045 0.4658660 0.5749353 0.7174277 0.7239041 0.7454463 0.7854594 #>  [115,] 0.54005297 0.5679658 0.5698263 0.5760614 0.5947842 0.6107975 0.6636570 #>  [116,] 0.32779088 0.3648790 0.3713812 0.3769083 0.3894559 0.3967151 0.4710685 #>  [117,] 0.37138116 0.4277536 0.4344987 0.4406565 0.4503461 0.4591152 0.4823878 #>  [118,] 0.45378403 0.6935282 0.8513452 0.8612417 0.9648979 0.9835546 1.0282307 #>  [119,] 0.42056575 0.4503433 0.5194018 0.5471780 0.6330285 0.6573317 0.6685777 #>  [120,] 0.51416385 0.5319674 0.5632969 0.5810847 0.6146498 0.6549053 0.6696103 #>  [121,] 0.65736236 0.7091858 0.7410284 0.9071756 0.9177773 0.9642162 0.9978253 #>  [122,] 0.40297615 0.7084110 0.7558188 0.8677079 0.8721158 0.8809972 0.8965874 #>  [123,] 0.33638599 0.3999161 0.4377156 0.4621420 0.5437185 0.5828323 0.5862059 #>  [124,] 0.37320461 0.3911188 0.4067909 0.4116959 0.4487314 0.5531944 0.5532625 #>  [125,] 0.50117412 0.5140597 0.5540494 0.6362864 0.6367564 0.6429351 0.6842168 #>  [126,] 0.32514717 0.4662731 0.4851922 0.5120088 0.5812764 0.6044210 0.6122187 #>  [127,] 0.55914200 0.6477647 0.6548927 0.6575639 0.7588284 0.7984418 0.8143448 #>  [128,] 0.14294877 0.3193055 0.3218339 0.3295669 0.3393076 0.3668148 0.4432354 #>  [129,] 0.38698569 0.4031281 0.4305024 0.4530690 0.5031422 0.5033797 0.5768957 #>  [130,] 0.37202275 0.4421644 0.4870051 0.5120154 0.5222103 0.5399520 0.6204289 #>  [131,] 0.58925593 0.6113323 0.6434003 0.7612337 0.8472176 0.8804295 0.9204533 #>  [132,] 0.57896524 0.6261334 0.7865381 0.7957353 0.8370713 0.8674669 0.8947969 #>  [133,] 0.49607054 0.5237846 0.5653175 0.5706711 0.5961695 0.6425521 0.6610093 #>  [134,] 0.38931716 0.4796074 0.5081664 0.5959750 0.6254278 0.6344261 0.7316500 #>  [135,] 0.32351332 0.7728951 0.8167850 0.8427778 0.8990448 0.9218280 0.9268563 #>  [136,] 0.31342900 0.4680809 0.4903084 0.5247609 0.5663500 0.5871851 0.5892093 #>  [137,] 0.18954821 0.4218518 0.4842403 0.5214110 0.5503489 0.6381351 0.6396177 #>  [138,] 0.84380876 0.8771531 0.9805048 1.0831619 1.1233589 1.1236108 1.1450523 #>  [139,] 1.20383843 1.3125640 1.3862863 1.4073290 1.4474013 1.4902378 1.5504087 #>  [140,] 0.31322272 0.5040235 0.7293563 0.8536828 0.8719708 0.8873366 0.8894643 #>  [141,] 0.30484209 0.3282175 0.3518609 0.3830630 0.4135591 0.5466086 0.5473317 #>  [142,] 0.44448819 0.4560937 0.4689268 0.5211919 0.5455615 0.5551341 0.5567607 #>  [143,] 0.60120864 0.6285900 0.6851235 0.7086146 0.7096816 0.7143675 0.7224924 #>  [144,] 0.24052376 0.3106433 0.4968764 0.5019234 0.5081184 0.5438314 0.5497035 #>  [145,] 0.76562058 0.8873257 1.0108983 1.0314492 1.0440874 1.0467573 1.0976879 #>  [146,] 0.46732186 0.4755679 0.5802241 0.6318489 0.6404908 0.6480766 0.6747756 #>  [147,] 0.41557834 0.7667516 0.9067886 0.9678681 1.0031303 1.0237443 1.0290167 #>  [148,] 0.63788846 0.8638121 1.1002687 1.1093182 1.1492689 1.2890151 1.3068725 #>  [149,] 0.37224233 0.7942606 0.9367795 0.9408431 1.1159566 1.1634702 1.1933719 #>  [150,] 0.45364884 0.4555137 0.5226246 0.5688056 0.6196022 0.6212031 0.6502783 #>  [151,] 0.31722578 0.7350048 0.9919050 1.0051943 1.0555950 1.0656588 1.0799066 #>  [152,] 0.54012990 0.5934630 0.6474317 0.8006736 0.8314792 0.8575095 0.8682241 #>  [153,] 0.67411089 0.7008831 0.9334194 0.9663088 0.9706877 0.9782040 1.0005449 #>  [154,] 0.43505960 0.5591420 0.6411140 0.6935582 0.7487361 0.8133481 0.8190363 #>  [155,] 0.40650084 0.6426489 0.6520318 0.7300444 0.7327240 0.7674695 0.7743443 #>  [156,] 0.35692745 0.3849576 0.4254910 0.4494458 0.4503996 0.4656161 0.4820837 #>  [157,] 0.37651899 0.3887504 0.4499817 0.5529781 0.5688056 0.5955532 0.6167856 #>  [158,] 0.26085256 0.4175160 0.4848114 0.4849829 0.6409944 0.6426980 0.7528288 #>  [159,] 0.57493531 0.6073269 0.7147667 0.7521357 0.8775717 0.8837379 0.9586417 #>  [160,] 0.73253956 0.7331691 0.7465925 0.7855124 0.7882302 0.8000355 0.8010676 #>  [161,] 0.31759081 0.3751739 0.3761625 0.4694312 0.5237629 0.5369371 0.5619283 #>  [162,] 0.45746267 0.5054876 0.6011279 0.6409944 0.6559524 0.6594166 0.7142818 #>  [163,] 0.44766781 0.5039363 0.5155398 0.5223042 0.5563329 0.6117914 0.6166969 #>  [164,] 0.38386639 0.4999664 0.6610093 0.6728641 0.7750397 0.7927239 0.7954449 #>  [165,] 0.19315210 0.4120762 0.4503433 0.4857236 0.5087867 0.5413974 0.5720861 #>  [166,] 0.41018798 0.5982993 0.6059503 0.6403885 0.6653122 0.6910223 0.7167947 #>  [167,] 0.40638957 0.4808271 0.5061003 0.5092996 0.5532954 0.5693659 0.5906993 #>  [168,] 0.40972994 0.4360248 0.6424416 0.7258391 0.8713289 0.8787107 0.8852177 #>  [169,] 0.36444964 0.4607595 0.4708045 0.5432609 0.6097293 0.6166729 0.6347170 #>  [170,] 0.77515452 0.8376337 0.9374548 0.9657661 0.9682057 1.0410493 1.0830722 #>  [171,] 0.39879045 0.4119482 0.5834789 0.5998045 0.6963949 0.8428431 0.8456697 #>  [172,] 0.37013807 0.3769083 0.3928123 0.4277536 0.4639353 0.4827762 0.5162545 #>  [173,] 0.27190044 0.4304209 0.4521732 0.4660418 0.4810174 0.5162545 0.5830079 #>  [174,] 0.33058705 0.5110546 0.5111193 0.5306206 0.6013928 0.6016348 0.6231840 #>  [175,] 0.38780816 0.8162056 0.8193690 0.9148779 1.0121904 1.0127711 1.0287083 #>  [176,] 0.46075954 0.4914107 0.5270825 0.5486014 0.5840154 0.6004881 0.6446268 #>  [177,] 0.37528214 0.5915580 0.7234958 0.7390981 0.7657111 0.7825389 0.8204156 #>  [178,] 0.35090362 0.4149985 0.4571204 0.5810372 0.5994186 0.6004881 0.6347170 #>  [179,] 0.36679922 0.4766070 0.5522334 0.5632660 0.6041422 0.6308292 0.6479470 #>  [180,] 0.41499848 0.4387655 0.5065696 0.5121081 0.6500462 0.7203823 0.7300003 #>  [181,] 0.40063059 0.4305852 0.4542132 0.4904159 0.5281374 0.5588485 0.5805486 #>  [182,] 0.28785119 1.0672119 1.1413971 1.1567045 1.2805708 1.3033285 1.3465785 #>  [183,] 0.24229384 0.3691416 0.5022500 0.5153704 0.5241157 0.5268087 0.5402080 #>  [184,] 0.29278000 0.3106433 0.3802063 0.3864961 0.3866091 0.4413974 0.4907600 #>  [185,] 0.56696211 0.6732215 0.6771911 0.7522433 0.8008312 0.8023477 0.8591651 #>  [186,] 0.49263565 0.5187702 0.5396631 0.6070164 0.6273648 0.6284411 0.6293192 #>  [187,] 0.68373893 0.7717644 0.7759052 0.8199615 0.9210780 1.0210338 1.0216858 #>  [188,] 0.45706073 0.6262618 0.6713121 0.6871362 0.6949572 0.7149119 0.7322242 #>  [189,] 0.31058601 0.4119482 0.4658660 0.5254999 0.6154161 0.6398861 0.7135669 #>  [190,] 0.54951736 0.7395617 0.8070140 0.9525524 1.0509650 1.1085620 1.1606913 #>  [191,] 1.04762293 1.2189971 1.2963540 1.3510386 1.3921506 1.4209926 1.4341379 #>  [192,] 0.64026079 0.8770549 0.9084544 0.9111320 0.9287991 0.9329802 0.9435184 #>  [193,] 0.43046718 0.5937305 0.6207222 0.6450644 0.6675939 0.7433801 0.7836248 #>  [194,] 0.28766833 0.3473076 0.3540537 0.3706108 0.5322835 0.5899733 0.5979536 #>  [195,] 0.52696211 0.5530794 0.5585371 0.6051547 0.6274238 0.6639179 0.6732496 #>  [196,] 0.61802421 0.8670053 0.8689674 0.8821511 0.9430326 0.9705938 1.0187471 #>  [197,] 0.44640576 0.4925380 0.6619467 0.6624980 0.6858805 0.7262605 0.7633431 #>  [198,] 0.52302729 0.5275619 0.6069065 0.6273648 0.6769934 0.6787602 0.7821569 #>  [199,] 0.08544083 0.3637887 0.3644345 0.5220205 0.5534120 0.5576728 0.5767967 #>  [200,] 0.30585138 0.4545532 0.5207692 0.6025136 0.6300371 0.6622486 0.7163106 #>  [201,] 0.22066642 0.2335392 0.2994692 0.4042771 0.4125418 0.4312274 0.4435025 #>  [202,] 0.34707999 0.7683396 0.8318000 0.8435130 0.8516292 0.8521290 0.8627990 #>  [203,] 0.59346299 0.7325719 0.7406831 0.7597613 0.7907066 0.8524562 0.9147752 #>  [204,] 0.34734509 0.7727191 0.9660692 0.9735843 0.9903615 0.9988404 1.0157676 #>  [205,] 0.51084800 0.6294084 0.6711959 0.6786597 0.7034560 0.7310952 0.7337677 #>  [206,] 0.49469363 0.5422872 0.5864271 0.5928920 0.6754280 0.6834126 0.6921565 #>  [207,] 0.20161447 0.2953250 0.3825511 0.4024048 0.4413974 0.4499986 0.4815605 #>  [208,] 0.30309278 0.4015759 0.4355615 0.4766639 0.4926356 0.5255987 0.6121251 #>  [209,] 0.89914861 1.2496961 1.2637194 1.3025453 1.4065634 1.5001550 1.5115877 #>  [210,] 0.50776902 0.5114489 0.5387586 0.6080363 0.6341971 0.6404446 0.6439962 #>  [211,] 0.48974189 0.6087190 0.6213628 0.6614269 0.6747756 0.7464291 0.7526782 #>  [212,] 0.76540185 0.9715836 1.0448846 1.0581048 1.0590952 1.1420422 1.1518342 #>  [213,] 0.48258267 0.5898018 0.7625122 0.7917676 0.8376337 0.8604243 0.8665662 #>  [214,] 0.43417599 0.4350596 0.5253211 0.5722172 0.5812580 0.5879211 0.6221411 #>  [215,] 0.38484051 0.3877222 0.5488137 0.5677858 0.6143621 0.7468042 0.7589933 #>  [216,] 0.46374536 0.4756211 0.6731753 0.6755831 0.7426730 0.7436483 0.7797788 #>  [217,] 0.24846187 0.3230476 0.4934067 0.4978462 0.5215294 0.5632660 0.5781694 #>  [218,] 0.22013873 0.4053656 0.5529884 0.5864665 0.6146972 0.6652084 0.6925414 #>  [219,] 0.47466013 0.5091772 0.5626089 0.6597312 0.6696204 0.7657587 0.7927157 #>  [220,] 0.24326356 0.4248690 0.4859930 0.6520318 0.7122625 0.7199898 0.7243822 #>  [221,] 0.25339212 0.3377933 0.7254055 0.7292472 0.7693976 0.7785578 0.7801072 #>  [222,] 0.54184591 0.7168669 0.7580354 0.8492810 0.8588818 0.8929889 0.9182487 #>  [223,] 0.44463682 0.5493058 0.6951118 0.7796674 0.8157095 0.8314284 0.8983395 #>  [224,] 0.33092590 0.5308274 0.5452690 0.6092266 0.6509513 0.7563836 0.7737065 #>  [225,] 0.43517885 0.5087678 0.7282037 0.8200445 0.8396680 0.8686894 0.9728831 #>  [226,] 0.23658899 0.3044992 0.5807326 0.5925684 0.6057019 0.6149485 0.6160011 #>  [227,] 0.37596713 0.3933752 0.5142227 0.6825085 0.7313129 0.7618979 0.7673341 #>  [228,] 0.69245767 0.7717644 0.9120658 0.9180017 0.9352097 0.9648538 1.0952829 #>  [229,] 0.45157227 0.4716023 0.5069476 0.5268980 0.5584983 0.5858423 0.6400774 #>  [230,] 0.35974218 0.8313922 0.8628527 0.8646783 0.8717237 0.8897654 0.8966186 #>  [231,] 0.44364810 0.5048276 0.5901147 0.6158981 0.6337690 0.6734987 0.7088919 #>  [232,] 0.36962117 0.6245585 0.6797841 0.8876926 0.9055940 0.9135052 1.0387586 #>  [233,] 0.53665353 0.9483992 0.9718769 0.9866953 1.0357904 1.0548761 1.0823586 #>  [234,] 0.38360427 0.5865048 0.6213855 0.6354869 0.8512808 0.9046319 0.9179908 #>  [235,] 0.78576890 0.8165920 0.8506474 0.8612417 0.9690140 1.0047367 1.0375403 #>  [236,] 0.18982483 0.2666116 0.2862749 0.4175160 0.4600286 0.5304585 0.5571561 #>  [237,] 0.53229894 0.7942606 0.8205240 0.8573099 0.8816813 0.8818032 0.9404553 #>  [238,] 0.44466937 0.4668766 0.5499636 0.5934302 0.6065100 0.6204289 0.7020074 #>  [239,] 0.87717006 0.9613261 1.0157382 1.0488862 1.0497764 1.0822524 1.0914078 #>  [240,] 0.35149711 0.4025749 0.4848306 0.5963490 0.6252183 0.6430889 0.6754856 #>  [241,] 0.37646628 0.3891824 0.4232284 0.5151719 0.5240277 0.5367195 0.5693103 #>  [242,] 0.46374536 0.6548861 0.6851550 0.7288418 0.7816090 0.8054915 0.9232704 #>  [243,] 0.22273120 0.4423237 0.4696739 0.4800354 0.5012625 0.5194960 0.6429660 #>  [244,] 0.21139607 0.2383821 0.3878139 0.4923408 0.4979119 0.5250017 0.5425701 #>  [245,] 0.32751396 0.4946936 0.6076163 0.6543563 0.6548927 0.6668197 0.8205240 #>  [246,] 0.62159062 0.7308569 0.8243590 0.8490200 0.8651248 0.8852177 0.9857375 #>  [247,] 0.52230423 0.5494814 0.6561717 0.6605992 0.6761268 0.6977966 0.8243590 #>  [248,] 0.39391905 0.4027707 0.4074459 0.4135591 0.4232486 0.4259465 0.4633913 #>  [249,] 0.78033293 1.0410493 1.1502997 1.1597130 1.1756759 1.1785044 1.1898994 #>  [250,] 0.20650975 0.4989027 0.5023611 0.6857673 0.7166549 0.7267525 0.7697537 #>  [251,] 0.30348827 0.5797437 0.6223265 0.6411611 0.6480766 0.6979193 0.7294407 #>  [252,] 0.67387525 0.7008831 0.7639954 0.8237211 0.8949076 0.9168696 0.9172868 #>  [253,] 0.55626011 0.6122196 0.7272570 0.8032029 0.8042928 0.8153559 0.8263047 #>  [254,] 0.83179999 1.0840953 1.0855801 1.2907480 1.3097720 1.3618624 1.3708990 #>  [255,] 0.50261406 0.8005655 1.1137873 1.1764441 1.2693534 1.2709762 1.3305967 #>  [256,] 0.26636460 0.6420917 0.6714672 0.7383588 0.7674452 0.8564979 0.8896941 #>  [257,] 0.18510757 0.3605198 0.4694312 0.4870426 0.5029063 0.5188186 0.5375569 #>  [258,] 0.71567183 0.9076684 1.0496038 1.1186526 1.1637118 1.1724750 1.2064308 #>  [259,] 0.55715612 0.5666285 0.6341428 0.6408059 0.7280033 0.7486569 0.7528288 #>  [260,] 0.29491535 0.3943401 0.4024379 0.5108480 0.5629277 0.5906993 0.6986046 #>  [261,] 1.37277239 1.3942597 1.4841804 1.6193172 1.6325120 1.6507373 1.6649446 #>  [262,] 0.38618794 0.6122966 0.6346027 0.6644866 0.8610130 0.8649136 0.8823493 #>  [263,] 0.40458422 0.5554042 0.5711163 0.6016348 0.6198054 0.6330285 0.6332772 #>  [264,] 0.43778734 0.4488100 0.4565748 0.4621420 0.4652422 0.5075853 0.5385498 #>  [265,] 0.34781374 0.4657270 0.5333996 0.5652736 0.6452286 0.6859595 0.7065587 #>  [266,] 0.44766781 0.4970890 0.5324029 0.5858714 0.6223161 0.6480566 0.6605992 #>  [267,] 0.44977931 0.4673219 0.4972498 0.5487329 0.5511995 0.5996822 0.6303056 #>  [268,] 0.40763358 0.4305852 0.5217794 0.5888938 0.6189898 0.6249196 0.6267008 #>  [269,] 0.61813142 0.6442385 0.7168669 1.1352459 1.1598181 1.1866112 1.1901971 #>  [270,] 0.32404982 0.3486690 0.4805005 0.4815605 0.4873079 0.5422454 0.5576728 #>  [271,] 0.28092925 0.4334924 0.5043499 0.5165928 0.5189948 0.5215294 0.5316358 #>  [272,] 0.31342900 0.4749614 0.4900850 0.5440540 0.5746407 0.6059702 0.6371389 #>  [273,] 0.74039655 0.8427370 0.8515108 0.8541618 0.9270140 1.0849768 1.1057439 #>  [274,] 0.47763270 0.4821175 0.6454767 0.7094994 0.7422601 0.8159047 0.8957855 #>  [275,] 0.48341376 0.5050641 0.5268730 0.5310282 0.5453472 0.5655272 0.6078280 #>  [276,] 0.40282053 0.4069622 0.4636614 0.4954367 0.5648844 0.6383549 0.6402971 #>  [277,] 0.31722578 0.7589751 0.9374548 0.9500280 0.9744066 0.9790199 1.0198717 #>  [278,] 0.42189081 0.4655403 0.4960705 0.5238633 0.5986994 0.5996822 0.6408661 #>  [279,] 0.44323537 0.4782744 0.4964384 0.5195418 0.5729531 0.5890486 0.5934236 #>  [280,] 0.29358749 0.3496355 0.3966701 0.5240277 0.5281374 0.5296953 0.5576769 #>  [281,] 0.39914055 0.5268730 0.5709033 0.5854514 0.6095902 0.6200753 0.6768372 #>  [282,] 0.30736409 0.3803616 0.3866091 0.4305024 0.4680809 0.4684802 0.4799874 #>  [283,] 0.29973131 0.4280147 0.4337569 0.4629733 0.5229637 0.5419846 0.5766850 #>  [284,] 0.90249736 0.9904744 1.0502608 1.2882511 1.3947978 1.4147610 1.4876842 #>  [285,] 0.66199563 0.7059281 0.7146127 0.7288623 0.7621752 0.8067230 0.8193273 #>  [286,] 0.37771991 0.4224858 0.4674113 0.5173656 0.5233893 0.5588752 0.5866050 #>  [287,] 0.82191443 0.9578488 0.9898709 1.0383954 1.0522233 1.1659882 1.1957745 #>  [288,] 0.38359639 0.4452496 0.4854474 0.5219584 0.5253211 0.5473317 0.5609559 #>  [289,] 0.50154443 0.6111563 0.6607979 0.6671793 0.6879832 0.6948621 0.7088658 #>  [290,] 0.22481533 0.2864627 0.3220688 0.3637887 0.4686737 0.5089231 0.6060020 #>  [291,] 0.45110154 0.5677858 0.6109160 0.6317960 0.7180520 0.7577249 0.7778794 #>  [292,] 0.66537816 0.7015691 0.7160165 0.7498045 0.7943488 0.8128808 0.8168187 #>  [293,] 0.44503790 0.6320336 0.6655045 0.6737555 0.7616690 0.7774944 0.7945480 #>  [294,] 0.49791189 0.6468371 0.6719717 0.7190559 0.7379339 0.7383588 0.7399317 #>  [295,] 0.33436469 0.3616799 0.3939860 0.4125418 0.4192498 0.4991595 0.5087284 #>  [296,] 0.69546496 0.7427748 0.7741157 0.7840753 0.9600928 1.0047367 1.0532644 #>  [297,] 0.08865645 0.5052785 0.5132412 0.6940295 0.7014264 0.7116780 0.7586518 #>  [298,] 0.54828792 0.6264587 0.6880316 0.6890794 0.6960610 0.7558442 0.7558630 #>  [299,] 0.54951736 0.5975897 0.6375701 0.6581530 0.7857778 0.9041100 0.9187875 #>  [300,] 0.38455357 0.5217026 0.5525568 0.5683892 0.5759512 0.5869550 0.6050294 #>  [301,] 0.18186047 0.4159209 0.5372248 0.8142865 0.8338241 0.8693982 1.0318687 #>  [302,] 0.29358749 0.3758895 0.4369306 0.4773581 0.5402376 0.5407572 0.5476024 #>  [303,] 0.29508847 0.3455428 0.4120762 0.4367117 0.6152680 0.7078623 0.7243431 #>  [304,] 0.50984310 0.5494814 0.7308569 0.7967745 0.8809098 0.9133581 0.9305192 #>  [305,] 1.25848536 1.3590137 1.3905277 1.4323380 1.5112455 1.6365571 1.6480437 #>  [306,] 0.94731565 1.0083020 1.2768913 1.2956221 1.3740039 1.3889939 1.5250941 #>  [307,] 0.52293158 0.5898728 0.6252020 0.6949920 0.7802318 0.8161899 1.0868555 #>  [308,] 0.52026295 0.5322835 0.5632969 0.6000400 0.6063725 0.6269754 0.6274769 #>  [309,] 0.60540436 0.6530787 0.6603580 0.7302909 0.7556337 0.7647195 0.7922720 #>  [310,] 0.19888002 0.2248153 0.2933482 0.3644345 0.5588752 0.5637778 0.5684917 #>  [311,] 0.31893583 0.5238633 0.5240137 0.5332746 0.5359288 0.5439539 0.6213267 #>  [312,] 0.66275747 0.7238546 0.7602312 0.7858214 0.8483713 0.8514094 0.8707663 #>  [313,] 0.45157227 0.4857236 0.5328718 0.5622567 0.5643357 0.5802565 0.5869550 #>  [314,] 0.59029505 0.6640392 0.7893794 0.8276673 0.8305014 0.8334632 0.8486760 #>  [315,] 0.32023580 0.4410900 0.5138488 0.6207222 0.6330890 0.6644397 0.7572525 #>  [316,] 0.36584829 0.4103399 0.4115522 0.4377873 0.4435025 0.4512224 0.4808933 #>  [317,] 0.53744974 0.6468342 0.6858901 0.7396922 0.8609900 0.9341045 0.9370971 #>  [318,] 0.29855574 0.3330557 0.4377573 0.5114308 0.5431299 0.5431350 0.5433775 #>  [319,] 0.41527602 0.4640816 0.4664254 0.4896145 0.5400638 0.5753246 0.6098741 #>  [320,] 0.38282631 0.4511015 0.5424029 0.6047744 0.6740299 0.6879002 0.6966126 #>  [321,] 0.30315863 0.4160594 0.4232284 0.5204466 0.6162431 0.6384256 0.6394497 #>  [322,] 0.45125763 0.4570607 0.6241201 0.6394016 0.7338989 0.8091899 0.8268297 #>  [323,] 0.52917074 0.6227357 0.6505910 0.7866345 0.7956717 0.8390291 0.8393977 #>  [324,] 0.41018798 0.5534408 0.5562601 0.5632503 0.5979536 0.6269754 0.6307715 #>  [325,] 0.40131670 0.5780193 0.6048515 0.6203862 0.6347322 0.6349914 0.6543468 #>  [326,] 0.47373927 0.5980090 0.7219958 0.8415517 0.8460182 0.8530573 0.8770549 #>  [327,] 0.56292769 0.6550234 0.6939653 0.7360457 0.7788283 0.7917854 0.9247668 #>  [328,] 0.48211749 0.7561875 0.8162056 0.8532300 0.8693338 0.8922194 0.9208336 #>  [329,] 0.38967545 0.4799874 0.5081184 0.6177762 0.6205066 0.6545760 0.6912725 #>  [330,] 0.20614471 0.4526554 0.4733109 0.4936564 0.5054186 0.5132988 0.5528495 #>  [331,] 0.30484209 0.3302644 0.3559538 0.4074459 0.4898260 0.5104181 0.5939905 #>  [332,] 0.63312760 0.6716419 0.6919050 0.7333568 0.7520420 0.7577249 0.8016593 #>  [333,] 0.24326356 0.4514502 0.5357807 0.5639170 0.6020131 0.6468355 0.7210900 #>  [334,] 0.30018606 0.3330557 0.3402789 0.4115522 0.4972025 0.5048579 0.5082967 #>  [335,] 0.31933515 0.3605198 0.3627244 0.4317372 0.4782301 0.5089231 0.5132106 #>  [336,] 0.47990529 0.6063725 0.7062426 0.7379339 0.7521357 0.7683727 0.7728023 #>  [337,] 0.71567183 0.9212094 1.2302806 1.2533878 1.2619910 1.2840362 1.3255634 #>  [338,] 0.58573286 0.7355680 0.7556337 0.7759102 0.8753656 0.9437206 0.9987041 #>  [339,] 0.43309804 0.4406152 0.4481228 0.4612346 0.5054186 0.5189211 0.5301312 #>  [340,] 0.85828964 0.9909640 1.0009898 1.0891385 1.1301733 1.1420422 1.1620402 #>  [341,] 0.39079975 0.5608860 0.5666743 0.5687094 0.6241201 0.6262618 0.6395511 #>  [342,] 0.46687657 0.5229469 0.5576258 0.5730138 0.6231951 0.6285918 0.6293371 #>  [343,] 0.89994434 1.0116924 1.1623026 1.2105522 1.2885752 1.3445865 1.4313436 #>  [344,] 0.42354191 0.4462946 0.4537034 0.4676192 0.4820405 0.5097054 0.5442765 #>  [345,] 0.38634214 0.4432289 0.4466909 0.5723630 0.6390739 0.6544191 0.6756743 #>  [346,] 0.31322272 0.6236608 0.6749445 0.8072307 0.8096432 0.8478643 0.9124112 #>  [347,] 0.27190044 0.3701381 0.3863718 0.4114053 0.4223787 0.4856249 0.5111193 #>  [348,] 0.51011101 0.7135485 0.7301039 0.7613872 0.8393977 0.8427964 0.8523312 #>  [349,] 0.33059804 0.5589844 0.5877086 0.6452686 0.6786523 0.6853755 0.6961111 #>  [350,] 0.54996359 0.6459004 0.7327240 0.7588284 0.7609852 0.7667516 0.7919105 #>  [351,] 0.34240678 0.5278629 0.5471780 0.6187785 0.6387934 0.6903683 0.7039184 #>  [352,] 1.08649474 1.4916059 1.6415259 1.6847031 1.7991980 1.8224499 1.8308876 #>  [353,] 0.45901826 0.5138933 0.5999945 0.7692451 0.7913226 0.8172726 0.8423590 #>  [354,] 0.74277478 1.0460092 1.0895955 1.1592723 1.1883595 1.1898994 1.1928941 #>  [355,] 0.23685811 0.4546499 0.4600286 0.4948303 0.5224993 0.5281775 0.5571291 #>  [356,] 0.58983446 0.6247298 0.6438044 0.6805424 0.6884261 0.6905193 0.6922020 #>  [357,] 0.92360417 0.9380717 0.9628370 0.9919639 1.0135525 1.0225747 1.0417221 #>  [358,] 0.41496202 0.5379615 0.5514382 0.6630005 0.7009980 0.7103077 0.7217690 #>  [359,] 0.49339825 0.5087678 0.5674265 0.6107994 0.6329909 0.6805424 0.6825860 #>  [360,] 0.32304757 0.3266174 0.3492895 0.4752273 0.5087284 0.5674459 0.6041422 #>  [361,] 0.33709856 0.3880099 0.4131012 0.4473798 0.5032318 0.5399520 0.5430934 #>  [362,] 0.15455940 0.4517945 0.5961695 0.6752880 0.6998271 0.7015691 0.8203890 #>  [363,] 0.31532870 0.3526403 0.5244507 0.6642565 0.6760321 0.8142287 0.8143448 #>  [364,] 0.74315943 0.8440829 0.8702620 0.9251501 0.9332727 1.0355034 1.1063873 #>  [365,] 0.36871653 0.3849620 0.5401299 0.6701620 0.7135485 0.7318974 0.8526867 #>  [366,] 0.27773913 0.5887377 0.5928920 0.6893556 0.8741367 0.8922216 0.8948148 #>  [367,] 0.44558319 0.5632503 0.6402608 0.6450464 0.6652509 0.6673185 0.6701417 #>  [368,] 0.63373452 0.7781214 0.9031730 1.0671591 1.0750368 1.0889169 1.1425191 #>  [369,] 0.41527602 0.4355327 0.4441690 0.4851922 0.5145197 0.5150884 0.5441191 #>  [370,] 0.33955523 0.3627244 0.4499187 0.4686737 0.5029063 0.5091326 0.5456831 #>  [371,] 0.56727156 0.5963490 0.6601319 0.6976048 0.7741481 0.7987878 0.8072460 #>  [372,] 0.85210909 0.9660692 1.0295636 1.1392229 1.1745562 1.1924214 1.2168266 #>  [373,] 0.34864295 0.4933982 0.5515686 0.6247298 0.6338178 0.6347652 0.6624234 #>  [374,] 1.02542636 1.2020065 1.2350178 1.2598053 1.3603711 1.3803752 1.4010163 #>  [375,] 0.16440238 0.5126355 0.5224715 0.5408611 0.5419830 0.5431299 0.5595660 #>  [376,] 0.96838503 1.1796422 1.2959327 1.3009343 1.3715982 1.4001222 1.4010182 #>  [377,] 0.47562106 0.5468792 0.6548861 0.6570822 0.6622486 0.6772271 0.7287152 #>  [378,] 0.44947649 0.4517945 0.7010190 0.7211464 0.7255035 0.8618691 0.8812412 #>  [379,] 0.73257190 0.8314792 0.8864307 0.9013588 0.9043477 0.9158549 0.9304078 #>  [380,] 0.40173365 0.5563329 0.6054581 0.6067249 0.6254278 0.6726014 0.6977966 #>  [381,] 0.41732757 0.6117914 0.7069229 0.8782804 0.9190227 0.9301519 0.9323600 #>  [382,] 0.31686333 0.4464058 0.5046157 0.5608860 0.6248389 0.6538886 0.6612310 #>  [383,] 0.58760281 0.6162431 0.6637183 0.6737283 0.6813766 0.7182501 0.7353313 #>  [384,] 0.48130343 0.4819970 0.6054044 0.6840700 0.7065491 0.7414489 0.7792486 #>  [385,] 0.63940157 0.7322242 0.7533099 0.8381376 0.8434874 0.9424063 0.9628370 #>  [386,] 0.35827579 0.5482879 0.5509676 0.6307365 0.6356705 0.6571526 0.6893279 #>  [387,] 0.51676533 0.6639179 0.6642565 0.6979675 0.7194455 0.7725162 0.7783629 #>  [388,] 0.55001713 0.5677245 0.5740192 0.5855788 0.6261334 0.6273204 0.6659119 #>  [389,] 0.48036041 0.4891977 0.7126879 0.7708979 0.8930630 0.9359729 0.9656245 #>  [390,] 0.22222826 0.2949154 0.5436591 0.5701223 0.6097293 0.6852872 0.6939653 #>  [391,] 0.33669177 0.6086104 0.6861840 0.7116193 0.7138864 0.7238799 0.7357277 #>  [392,] 0.61813142 0.7580354 0.8771006 0.9165938 1.0552147 1.1989874 1.3516979 #>  [393,] 0.50267678 0.6122196 0.6864259 0.7509585 0.8437341 0.8977770 0.9250809 #>  [394,] 0.41785115 0.4334924 0.4930073 0.5397692 0.5754165 0.6111563 0.6378049 #>  [395,] 0.48974189 0.4922030 0.5255987 0.5688177 0.6284411 0.6408661 0.6563155 #>  [396,] 0.33638599 0.4377779 0.4664254 0.4676192 0.4745771 0.4892575 0.4993086 #>  [397,] 0.60932515 0.6307365 0.6880316 0.7463931 0.8144743 0.8684860 0.9141359 #>  [398,] 0.32596590 0.3761625 0.4014768 0.4330980 0.4397551 0.4733109 0.4990049 #>  [399,] 0.43013314 0.8559376 0.9266001 0.9348294 0.9755043 1.0007465 1.0152451 #>  [400,] 0.15455940 0.4494765 0.5237846 0.6465924 0.6705592 0.7160165 0.7360651 #>  [401,] 0.39986030 0.4053543 0.4481228 0.4841836 0.5954711 0.6308744 0.6435044 #>  [402,] 0.65502344 0.8593899 0.9753322 1.0209966 1.0769750 1.1774054 1.1836772 #>  [403,] 0.43748296 0.4744987 0.5502167 0.6160011 0.6372165 0.6701417 0.6951118 #>  [404,] 0.50482756 0.6209307 0.6293192 0.6478455 0.7056536 0.7798818 0.7942724 #>  [405,] 0.43517885 0.6329909 0.6438044 0.6624234 0.7317535 0.9096225 0.9333072 #>  [406,] 0.60861038 0.6519408 0.6840093 0.6913729 0.7411212 0.8208012 0.8284698 #>  [407,] 0.47960739 0.6054581 0.6410571 0.7059281 0.7397902 0.7641115 0.7720752 #>  [408,] 0.62339703 0.8651838 0.8904077 1.0866857 1.1371650 1.1416621 1.1863606 #>  [409,] 0.41423436 0.4782744 0.6515418 0.6708195 0.6732215 0.6745043 0.6777493 #>  [410,] 0.52752332 0.5813641 0.6638017 0.6871469 0.6949365 0.7140714 0.7196438 #>  [411,] 0.30348827 0.5529016 0.6533055 0.6644278 0.6911139 0.7032547 0.7789289 #>  [412,] 0.41113854 0.5001766 0.5340676 0.6634010 0.6917132 0.7219760 0.7388487 #>  [413,] 0.37384739 0.4459946 0.4638711 0.4892575 0.4994762 0.5145197 0.5179499 #>  [414,] 0.59913257 0.7811011 0.8144743 0.9779571 1.1523637 1.2373662 1.2584854 #>  [415,] 0.48320314 0.5569586 0.6387934 0.6927926 0.7487837 0.7934415 0.8753570 #>  [416,] 0.68162610 0.6947712 0.7767022 0.7883295 0.8427370 0.8641736 0.8642841 #>  [417,] 0.53037714 0.6427524 0.7929727 0.8000000 0.8122235 0.8356182 0.8734652 #>  [418,] 0.52313560 0.6394833 0.6992650 0.7159324 0.7405781 0.8096684 0.8389357 #>  [419,] 0.52880820 0.7045602 0.7062426 0.7134749 0.7618934 0.7638330 0.7972931 #>  [420,] 0.70141468 0.7524955 1.0565042 1.0671591 1.1831748 1.1947141 1.2228223 #>  [421,] 0.84286837 0.9171867 1.0008873 1.0782596 1.1697256 1.3834793 1.4183284 #>  [422,] 0.34864295 0.4947738 0.5674265 0.6512449 0.6691722 0.6893260 0.7248399 #>  [423,] 0.26754334 0.3539340 0.3939191 0.4476355 0.4835243 0.5094878 0.5320598 #>  [424,] 0.49746970 0.5578627 0.5723091 0.5840154 0.5902951 0.6993343 0.7007910 #>  [425,] 0.40094256 0.4508608 0.4782301 0.4968684 0.5365636 0.5369371 0.5621301 #>  [426,] 0.39032932 0.4386891 0.5361647 0.6525173 0.7039184 0.7294747 0.7354045 #>  [427,] 0.32610793 0.5130830 0.5865048 0.6099702 0.6516187 0.6715761 0.7867861 #>  [428,] 0.38311365 0.3998966 0.4053543 0.4406152 0.4729633 0.5212349 0.5587910 #>  [429,] 0.36679922 0.4655403 0.4771287 0.5301312 0.5332746 0.5954711 0.6157507 #>  [430,] 1.04482123 1.0680677 1.1476210 1.1572944 1.1830841 1.2849024 1.2870248 #>  [431,] 0.37346705 0.4493299 0.4599599 0.4838920 0.5120088 0.5204466 0.5287165 #>  [432,] 0.82408575 0.9733748 1.0149745 1.0417221 1.0624933 1.0766247 1.1143713 #>  [433,] 0.98663669 1.8312466 1.8358587 1.8497730 1.9755393 1.9772803 1.9958560 #>  [434,] 0.35100129 0.5104199 0.5964356 0.6872063 0.8097277 0.9540321 1.0380990 #>  [435,] 0.25604212 0.4842305 0.5081664 0.5540494 0.6013225 0.6273253 0.6770216 #>  [436,] 0.33059804 0.5080819 0.5530162 0.6000992 0.6242807 0.6583143 0.6993927 #>  [437,] 0.44364810 0.6209307 0.7052823 0.8237211 0.8507127 0.8788010 0.9518068 #>  [438,] 0.89114662 0.9589670 1.3627977 1.6661671 1.6905759 1.7214371 1.7384644 #>  [439,] 0.27342108 0.3539013 0.4822139 0.5256291 0.5265508 0.5422367 0.5822481 #>  [440,] 0.65733166 0.6860780 0.6903683 0.7565848 0.7662454 0.8079483 0.8429920 #>  [441,] 0.63373452 0.7014147 1.1283165 1.1357762 1.2847036 1.3230669 1.4014832 #>  [442,] 0.44570704 0.4660460 0.5281050 0.5353446 0.5756786 0.5899733 0.6483932 #>  [443,] 0.51744606 0.5890486 0.6349914 0.6515418 0.7163328 0.7294747 0.8180184 #>  [444,] 0.40297615 0.6703717 0.8982055 1.0237443 1.0469004 1.0825213 1.1127470 #>  [445,] 0.48792994 0.6063047 0.6196114 0.6252020 0.7605335 0.7738578 0.8217821 #>  [446,] 0.16642668 0.3966701 0.4856220 0.5476024 0.5805486 0.5876028 0.6211888 #>  [447,] 0.40679149 0.4799699 0.6911139 0.7325396 0.7618979 0.8136443 0.8147225 #>  [448,] 0.40312812 0.5164959 0.5606413 0.5752305 0.5835634 0.5909260 0.5971114 #>  [449,] 0.14294877 0.2507592 0.2995908 0.3495992 0.3871001 0.4388965 0.4964384 #>  [450,] 0.33718787 0.4295153 0.4701307 0.5247609 0.5440540 0.6189898 0.6504794 #>  [451,] 0.24229384 0.3251583 0.3857096 0.4520079 0.4712512 0.5241228 0.5449501 #>  [452,] 0.45529962 0.5171175 0.5535719 0.6078770 0.6371389 0.6430337 0.6450724 #>  [453,] 0.38306299 0.3835964 0.4027707 0.4809781 0.4827385 0.4913768 0.5229469 #>  [454,] 1.00433114 1.0590352 1.0709853 1.0971496 1.1009593 1.1018219 1.1427318 #>  [455,] 1.06294555 1.0909938 1.2242817 1.2694997 1.3995380 1.4147610 1.4153072 #>  [456,] 0.34582608 0.3732046 0.4747576 0.4998998 0.5082967 0.5240137 0.5449667 #>  [457,] 0.30845086 0.3696212 0.6953520 0.8573370 1.0449803 1.1027795 1.1111772 #>  [458,] 0.30986002 0.3368924 0.5793828 0.5846537 0.6099341 0.6324417 0.6514002 #>  [459,] 0.53762233 0.5390614 0.6338178 0.6390739 0.6483701 0.6683874 0.7165318 #>  [460,] 0.44969791 0.4574674 0.5507144 0.5529884 0.5643167 0.6660890 0.6772271 #>  [461,] 0.28236883 0.5012582 0.6041251 0.8037298 0.9348752 0.9435184 1.0100291 #>  [462,] 0.42027149 0.4630865 0.5090040 0.5595546 0.5672563 0.5697903 0.5700772 #>  [463,] 0.47990529 0.5288082 0.6073269 0.6154161 0.6443693 0.7174277 0.7948248 #>  [464,] 0.85679627 0.9187407 1.1027795 1.1875140 1.2926214 1.3359048 1.3597712 #>  [465,] 0.25267575 0.5790197 0.6044928 0.6786523 0.6842886 0.6898931 0.7094532 #>  [466,] 0.37507104 0.3850426 0.3894559 0.4259465 0.4473798 0.4538972 0.4639353 #>  [467,] 0.53744974 0.7987312 0.8023477 0.8696114 0.8752043 0.9148207 0.9240605 #>  [468,] 0.18871180 0.3749199 0.4531979 0.4538038 0.5097054 0.5487001 0.5501279 #>  [469,] 0.43686997 0.9136104 1.2057897 1.2502352 1.3398909 1.4724672 1.4820539 #>  [470,] 0.42431380 0.4367117 0.4410900 0.5101491 0.5720861 0.5827444 0.6207984 #>  [471,] 0.44629465 0.4523429 0.4538038 0.4634493 0.4691419 0.5182528 0.5513062 #>  [472,] 0.58983446 0.6107994 0.7282037 0.7317535 0.7869180 0.8552425 0.8641399 #>  [473,] 0.41551827 0.4219723 0.4496466 0.5040671 0.5409830 0.5437185 0.5615950 #>  [474,] 0.46883675 0.6709875 0.7490924 0.7494805 0.9651321 1.0197696 1.0421093 #>  [475,] 0.25415830 0.2675433 0.3191782 0.3673835 0.4660418 0.4827762 0.4856249 #>  [476,] 0.57204507 0.6690113 0.8114975 0.8297121 0.9081595 0.9604512 0.9964504 #>  [477,] 0.52302729 0.6070164 0.7768221 0.7834745 0.7913235 0.8416858 0.9138914 #>  [478,] 0.31686333 0.4246311 0.4638688 0.4925380 0.5378877 0.5397692 0.5491864 #>  [479,] 0.61879814 0.6737555 0.6956635 0.7857778 0.8626442 0.8659622 0.8839317 #>  [480,] 0.45234292 0.4662731 0.5287165 0.5487001 0.5692838 0.5876105 0.6208925 #>  [481,] 0.62345283 0.6940337 0.7888679 0.8304257 0.8428927 0.9031730 0.9191398 #>  [482,] 0.33058705 0.4573864 0.4716023 0.5135103 0.5802565 0.5823923 0.6175645 #>  [483,] 0.39467336 0.4441690 0.4663683 0.4819970 0.4827227 0.4866123 0.5318164 #>  [484,] 0.97828220 1.0157382 1.0666033 1.0711030 1.0742056 1.1509920 1.1925331 #>  [485,] 0.48924165 0.5812876 0.6816875 0.7382198 0.7967745 0.8554493 0.8879051 #>  [486,] 0.37879206 0.4341760 0.4477177 0.4854474 0.4962561 0.5229637 0.5306463 #>  [487,] 1.79186858 1.8371319 2.0342211 2.1398394 2.1763759 2.2023516 2.2673151 #>  [488,] 0.48204054 0.5636039 0.5883087 0.6122187 0.6256169 0.6303851 0.6510461 #>  [489,] 0.63948334 0.6726014 0.6848153 0.8156051 0.8628035 0.9459363 0.9541629 #>  [490,] 0.39085261 0.3956817 0.4131012 0.4219723 0.4688037 0.5241246 0.5575092 #>  [491,] 0.26636460 0.6470767 0.6607979 0.7166713 0.7271400 0.7399317 0.8157675 #>  [492,] 0.42178032 0.4707250 0.4953969 0.4968764 0.5080819 0.5346383 0.5515136 #>  [493,] 0.25267575 0.4758310 0.4916948 0.5589844 0.6000992 0.6092266 0.6746278 #>  [494,] 0.30232145 0.3055537 0.4280147 0.4913768 0.5090040 0.5197249 0.5219584 #>  [495,] 0.39991614 0.4838920 0.4841836 0.5027871 0.5075853 0.5272402 0.5346140 #>  [496,] 0.41339320 0.5148138 0.8896415 0.9342725 0.9499283 0.9758696 0.9840147 #>  [497,] 0.72301580 0.7494805 0.9532210 0.9986879 1.1719611 1.1891575 1.2479271 #>  [498,] 0.85527993 0.8940447 0.9031098 0.9199382 1.0664099 1.0938258 1.1370353 #>  [499,] 0.55475865 0.5746407 0.6593784 0.7403527 0.8072281 0.8416950 0.8651838 #>  [500,] 0.68618403 0.8162630 0.9165938 0.9578636 0.9749614 0.9781661 1.0745522 #>  [501,] 0.29023565 0.4536488 0.4796495 0.6059503 0.6364103 0.6597332 0.6936586 #>  [502,] 0.53733812 0.6696849 0.7130093 0.7350048 0.7536862 0.7580771 0.7589751 #>  [503,] 0.29532503 0.3334548 0.3410214 0.3864961 0.4312274 0.4313606 0.5144084 #>  [504,] 0.48036041 0.5278629 0.5361647 0.5419283 0.6593597 0.6627225 0.7851681 #>  [505,] 0.38772222 0.4579625 0.5391286 0.5654577 0.5712837 0.6160763 0.7141653 #>  [506,] 0.94454801 0.9495346 1.0633881 1.1178005 1.1364118 1.1444150 1.1752234 #>  [507,] 0.85469525 1.1803373 1.2075141 1.2907480 1.3638668 1.3661028 1.4195369 #>  [508,] 0.31108466 0.8753184 0.8878696 0.9046052 0.9269673 0.9380717 0.9424063 #>  [509,] 0.49722244 0.8029435 0.8167850 0.8364622 0.8617024 0.9190203 0.9261387 #>  [510,] 0.38455357 0.4130222 0.4656161 0.4989613 0.5937305 0.5972669 0.6177792 #>  [511,] 0.32956685 0.3871001 0.4494458 0.4800354 0.4898814 0.5048420 0.5079077 #>  [512,] 0.13061122 0.3720227 0.5032318 0.5040671 0.5633009 0.6152639 0.6166146 #>  [513,] 0.40696225 0.4276745 0.5215600 0.5716671 0.5810858 0.5955532 0.6257787 #>  [514,] 0.34342133 0.5269621 0.5614093 0.6416871 0.6463301 0.6766475 0.7007910 #>  [515,] 0.82552967 0.9122565 0.9255566 0.9391851 1.1556043 1.1568003 1.1628984 #>  [516,] 0.22273120 0.3472932 0.4064602 0.4394362 0.4823878 0.5625144 0.5679658 #>  [517,] 0.39316352 0.5024879 0.5545968 0.5756786 0.6668197 0.6728291 0.6754280 #>  [518,] 0.69080134 0.7937504 0.8392117 0.8679775 0.9055940 1.0187672 1.0214631 #>  [519,] 0.89487149 1.1709849 1.1732449 1.1800110 1.2391330 1.2473899 1.2994791 #>  [520,] 0.34935521 0.4372617 0.5065555 0.6340392 0.6993343 0.7237911 0.7355680 #>  [521,] 0.40173365 0.4507683 0.5231356 0.5858714 0.6192745 0.6273253 0.6344261 #>  [522,] 0.53665353 0.7200232 0.8037298 0.9355013 0.9819570 0.9974956 1.0825213 #>  [523,] 0.26085256 0.2666116 0.3648616 0.4472674 0.5054876 0.5571291 0.6340425 #>  [524,] 0.30026040 0.3191782 0.3698023 0.4114053 0.4304209 0.4459946 0.4745771 #>  [525,] 0.69535619 0.6978772 1.0467573 1.0552778 1.1018219 1.1922648 1.1962325 #>  [526,] 0.34027889 0.3863638 0.3989702 0.4024048 0.4030674 0.4313606 0.5146430 #>  [527,] 0.40508723 0.4573864 0.4818782 0.5328718 0.5665792 0.6146280 0.6276516 #>  [528,] 0.15731943 0.3916305 0.4064602 0.4423237 0.4530333 0.4591152 0.4710685 #>  [529,] 0.20614471 0.3804686 0.4990049 0.5217977 0.5253350 0.6020452 0.6038542 #>  [530,] 1.28147277 1.2867421 1.2990673 1.4622168 1.4806866 1.5319218 1.5468904 #>  [531,] 0.81590473 0.9139913 0.9208336 0.9360585 1.1365384 1.2036518 1.2156433 #>  [532,] 0.58163779 0.6362864 0.6749445 0.6779852 0.6931391 0.7293563 0.7405964 #>  [533,] 0.29508847 0.4243138 0.5075274 0.5413974 0.6330890 0.6635042 0.7476459 #>  [534,] 0.32139332 0.5161111 0.5693103 0.5703191 0.5831915 0.6480187 0.6790055 #>  [535,] 0.46447433 0.7487080 0.9732370 0.9975785 1.0135068 1.1002687 1.1415680 #>  [536,] 0.24846187 0.3266174 0.4009426 0.4642986 0.5147970 0.5748470 0.5867213 #>  [537,] 0.37879206 0.4408829 0.5289164 0.5698263 0.5722172 0.6240448 0.6306941 #>  [538,] 0.73515051 0.8495925 0.9406855 1.0526488 1.0562971 1.0819894 1.1192026 #>  [539,] 0.20650975 0.3994535 0.5437859 0.5665792 0.7133366 0.7398393 0.7550707 #>  [540,] 0.32023580 0.4269869 0.4304672 0.5361953 0.5827444 0.7280906 0.8048877 #>  [541,] 0.28291139 0.4065042 0.4075831 0.4779620 0.5063394 0.5503489 0.5693330 #>  [542,] 0.34240678 0.4891977 0.5419283 0.6525173 0.7432952 0.7487837 0.7822400 #>  [543,] 0.52499783 0.5778158 0.6187981 0.6320336 0.6371931 0.6887836 0.7042461 #>  [544,] 0.34866896 0.3616812 0.3825511 0.4773891 0.5023045 0.5567886 0.5615960 #>  [545,] 0.72038230 0.7431594 0.9036787 0.9943253 1.0233516 1.0338298 1.0754702 #>  [546,] 0.36457262 0.3718378 0.3956874 0.4025749 0.4594928 0.5349021 0.5497516 #>  [547,] 0.46716596 0.5104199 0.6837723 0.6886995 0.7689377 0.7778398 0.8467664 #>  [548,] 0.30325774 0.3048262 0.3495992 0.3643191 0.3668148 0.3842687 0.4337196 #>  [549,] 1.05130943 1.1159268 1.1369643 1.1565434 1.3135553 1.3285582 1.4253205 #>  [550,] 0.24165860 0.6235538 0.6698254 0.6931391 0.7500664 0.8279883 0.9380138 #>  [551,] 0.85619088 0.8674669 0.9287437 0.9715110 1.0624140 1.1565356 1.2197037 #>  [552,] 0.42113276 0.6505910 0.6816261 0.7620724 0.8167748 0.8602753 0.8633028 #>  [553,] 0.35393398 0.3832512 0.4218518 0.5042761 0.5506531 0.5581659 0.5780268 #>  [554,] 0.45477461 0.5238625 0.5319674 0.5779095 0.5863690 0.6025080 0.6418303 #>  [555,] 1.25902206 1.3229412 1.4870050 1.5181519 1.5429555 1.5670651 1.6610485 #>  [556,] 0.42420889 0.4397551 0.5217977 0.5274575 0.5420996 0.5528495 0.5792122 #>  [557,] 0.93403322 0.9589670 1.0090208 1.1576201 1.1608667 1.1749919 1.1935316 #>  [558,] 0.34264737 0.4613004 0.4633913 0.4691448 0.5222115 0.5530794 0.5642744 #>  [559,] 0.57007312 0.8654109 0.9024974 0.9467025 0.9606214 1.0548680 1.0627894 #>  [560,] 0.25720415 0.2594789 0.3311112 0.4520382 0.5165928 0.5497516 0.5618666 #>  [561,] 0.13417734 0.5569586 0.8207290 0.8645129 0.9287802 0.9494851 0.9655449 #>  [562,] 0.49845342 0.5238625 0.5810847 0.5825721 0.5895697 0.6470767 0.6749313 #>  [563,] 0.42549102 0.5048420 0.5135103 0.5194018 0.5268980 0.5314275 0.6087205 #>  [564,] 0.37507104 0.3880099 0.4406565 0.4549890 0.4871213 0.5213529 0.5222103 #>  [565,] 0.31553848 0.5672706 0.5785520 0.5869583 0.6029509 0.6048515 0.6057019 #>  [566,] 0.40243787 0.4063896 0.5126355 0.5701223 0.5912974 0.6503623 0.6610116 #>  [567,] 0.27573818 0.4827227 0.6563291 0.6840700 0.6966287 0.7229740 0.7303646 #>  [568,] 0.67766120 0.8480815 0.8483713 0.8781584 0.9624458 0.9739285 1.0083676 #>  [569,] 0.41785115 0.5015444 0.5905038 0.5966504 0.6619467 0.6782467 0.6976048 #>  [570,] 0.42241803 0.5812003 0.5822986 0.5999945 0.6510407 0.6694870 0.6732422 #>  [571,] 0.43602481 0.5710183 0.6067150 0.7992546 0.8067230 0.8099444 0.8999700 #>  [572,] 0.38233230 0.4065042 0.4581064 0.4842403 0.5289164 0.5771239 0.5955602 #>  [573,] 0.30459140 0.5250534 0.5625160 0.5968549 0.6399047 0.6683726 0.7146127 #>  [574,] 1.08649474 1.5646571 1.6486037 1.7516448 1.7688186 1.8727673 1.9124014 #>  [575,] 0.29973131 0.3023215 0.4487712 0.4834340 0.5353446 0.5545968 0.5609559 #>  [576,] 0.87947133 0.9065514 0.9553053 1.0116575 1.0293066 1.1370353 1.1726166 #>  [577,] 0.37159041 0.5187702 0.5275619 0.5590130 0.6123364 0.6361442 0.6918395 #>  [578,] 0.55014216 0.5868728 0.6236231 0.6340392 0.6734542 0.6966672 0.7083988 #>  [579,] 0.18871180 0.3429692 0.4674931 0.5140597 0.5182528 0.5635872 0.5811879 #>  [580,] 0.61510891 0.6318824 0.6768372 0.7808688 0.8082989 0.8737461 0.8894643 #>  [581,] 0.74431259 0.7532233 0.7536862 0.7970489 0.8062327 0.8069091 0.8193690 #>  [582,] 0.46447433 0.9500280 0.9682057 0.9826809 1.1364517 1.1625969 1.2434843 #>  [583,] 0.39945351 0.4818782 0.4971412 0.4989027 0.6227357 0.7219158 0.7301039 #>  [584,] 0.35827579 0.4873718 0.5352591 0.5537315 0.5883087 0.6143539 0.6199954 #>  [585,] 0.54196698 0.5672865 0.5723630 0.6283531 0.6347652 0.6407934 0.6483701 #>  [586,] 0.35264028 0.5167653 0.5307206 0.5917791 0.6416871 0.6732496 0.7462097 #>  [587,] 0.42846122 0.6052702 0.6303056 0.6462678 0.7156329 0.7661073 0.7913077 #>  [588,] 1.36872737 1.5124443 1.6300139 1.6697704 1.7089104 1.7215760 1.7704119 #>  [589,] 0.64209168 0.7271400 0.9525371 0.9707910 1.0013507 1.0067834 1.0215131 #>  [590,] 0.55001713 0.5789652 0.7063320 0.8015997 0.8133781 0.8500430 0.9084828 #>  [591,] 0.53733812 0.6890628 0.7056536 0.7068837 0.7313563 0.7327711 0.7491104 #>  [592,] 0.29387133 0.4398223 0.4752273 0.4773891 0.4822139 0.5621342 0.5744590 #>  [593,] 0.11535823 0.3863421 0.6283531 0.6568282 0.7012333 0.7227883 0.7300131 #>  [594,] 0.90704551 0.9497637 1.0513094 1.2565172 1.2708629 1.3666404 1.4498376 #>  [595,] 0.82254504 0.8775587 0.8996195 0.9089381 0.9693169 0.9730782 0.9819594 #>  [596,] 0.11535823 0.4432289 0.6710638 0.7112927 0.7153526 0.7407685 0.7785675 #>  [597,] 0.48091233 0.4861806 0.5807119 0.6402971 0.7312346 0.8064493 0.8072281 #>  [598,] 0.31893583 0.4771287 0.5132988 0.5189211 0.5511995 0.5586493 0.5601007 #>  [599,] 0.86868941 0.8999443 0.9421143 1.1347023 1.1379155 1.1478498 1.1919285 #>  [600,] 0.46864103 0.4716000 0.5033797 0.5791356 0.6167056 0.6249196 0.6448055 #>  [601,] 0.43279567 0.4832475 0.5328506 0.5330563 0.6064883 0.7136706 0.7795614 #>  [602,] 0.39853643 0.5352591 0.6356705 0.6548853 0.7314152 0.7520256 0.7601323 #>  [603,] 0.33930765 0.3842687 0.3998397 0.4061321 0.4224923 0.4284649 0.4388965 #>  [604,] 0.45139826 0.4847198 0.5232824 0.5697903 0.5948764 0.6338327 0.6391319 #>  [605,] 0.97828220 1.1290419 1.1409881 1.1762431 1.2371514 1.3420283 1.3965136 #>  [606,] 0.69695618 0.8470422 1.0791481 1.0989287 1.1028773 1.1597130 1.2228223 #>  [607,] 0.31553848 0.4477177 0.4805899 0.5896980 0.5915580 0.5925684 0.6177790 #>  [608,] 0.18280805 0.4613004 0.4836059 0.5065555 0.5838226 0.5966250 0.6271297 #>  [609,] 0.16929811 0.5835169 0.5949242 0.6685777 0.7002070 0.7798164 0.8457446 #>  [610,] 0.42846122 0.6290846 0.6515039 0.6869030 0.7132418 0.7164118 0.7363081 #>  [611,] 0.37594573 0.3848405 0.5652736 0.5712837 0.6047744 0.6317960 0.6431094 #>  [612,] 0.37528214 0.4805899 0.5785520 0.6536458 0.7652011 0.8395698 0.8453205 #>  [613,] 0.67774927 0.7396922 0.7638219 0.7639473 0.7987312 0.8331766 0.8445445 #>  [614,] 0.46353982 0.5917791 0.7847545 0.7891066 0.7916557 0.8009135 0.8076426 #>  [615,] 0.27773913 0.4803706 0.5864271 0.6167856 0.6709305 0.6728291 0.8122926 #>  [616,] 0.48637182 0.6504794 0.6541596 0.6664681 0.8263667 0.8338196 0.8629877 #>  [617,] 0.33868478 0.5263012 0.6652084 0.6806155 0.7362757 0.7473767 0.7910825 #>  [618,] 0.18601227 0.2383821 0.3116947 0.3984012 0.4170912 0.4192498 0.4526704 #>  [619,] 1.29778750 1.4916059 1.6763049 1.6894556 1.6896972 1.7717039 1.7783649 #>  [620,] 0.58573286 0.8821511 0.9638192 1.0051570 1.0348166 1.0606414 1.1592044 #>  [621,] 0.51776404 0.5901139 0.6521198 0.8322582 0.8403663 0.9286943 0.9459796 #>  [622,] 0.33092590 0.7461333 0.7630995 0.7654018 0.7962858 0.8537300 0.8650212 #>  [623,] 0.36444964 0.4147339 0.4277021 0.5486014 0.5547869 0.5574164 0.5810372 #>  [624,] 0.42158735 0.5257558 0.6112225 0.7010940 0.7737065 0.8313015 0.8552799 #>  [625,] 0.74790676 0.7693976 0.8591651 0.9287261 0.9563030 0.9641251 0.9755043 #>  [626,] 0.33092947 0.6375701 0.6860114 0.8014848 0.8432941 0.8641736 0.9264584 #>  [627,] 0.35600550 0.3758511 0.4043751 0.5304585 0.6148055 0.6340425 0.6522771 #>  [628,] 0.25339212 0.5715736 0.6067150 0.6261677 0.7237275 0.7258391 0.7825964 #>  [629,] 1.32184016 1.3292565 1.3452973 1.4239215 1.4826011 1.5111019 1.5584390 #>  [630,] 0.35897409 0.4444882 0.4663683 0.5533426 0.5753246 0.5872614 0.6555460 #>  [631,] 0.44964658 0.5635615 0.5838226 0.5868728 0.5905398 0.6152639 0.6264800 #>  [632,] 0.27573818 0.4813034 0.4866123 0.7280764 0.7285102 0.7896278 0.7922720 #>  [633,] 0.37224233 1.0735777 1.1529215 1.1774157 1.2061133 1.2913495 1.3231232 #>  [634,] 0.54678002 0.5583359 0.6020131 0.6681976 0.7106085 0.7243822 0.7357971 #>  [635,] 0.29962323 0.5330563 0.5574164 0.5604170 0.6316153 0.6817282 0.6896799 #>  [636,] 0.29946918 0.3313922 0.3413211 0.3658483 0.3830789 0.4363457 0.4689268 #>  [637,] 0.54198304 0.5643167 0.6285037 0.6347492 0.6356934 0.6570822 0.6608001 #>  [638,] 0.31108466 0.8240857 0.9553075 1.0058238 1.0135525 1.0202775 1.0591494 #>  [639,] 0.31782818 0.4006306 0.5644081 0.5781872 0.5888938 0.5926168 0.6363925 #>  [640,] 0.62138550 0.6217771 0.8765006 0.8901125 0.9171867 0.9175227 0.9355375 #>  [641,] 0.34582608 0.3863638 0.4067909 0.4424147 0.4699783 0.4799538 0.4865405 #>  [642,] 0.78937937 0.9309806 0.9683655 1.0193555 1.0625110 1.0747684 1.1110893 #>  [643,] 0.30134733 0.3694050 0.5059486 0.5069794 0.5402376 0.5522334 0.6612277 #>  [644,] 0.48767053 0.5218055 0.6098160 0.6908013 0.8876926 0.9061944 0.9086679 #>  [645,] 0.43686997 0.6339125 0.8956064 0.9437206 1.0225190 1.1503580 1.1527300 #>  [646,] 0.41496202 0.6481584 0.6884299 0.8013656 0.8149187 0.8230886 0.8333445 #>  [647,] 1.17644407 1.4841804 1.5363792 1.8060969 1.8534263 1.8981949 2.0992999 #>  [648,] 0.49006846 0.5952990 0.6083849 0.6344628 0.6845512 0.7283313 0.7478223 #>  [649,] 0.48792994 0.5229316 0.7252673 0.7599689 0.8061995 0.8243765 0.8966186 #>  [650,] 0.33669177 0.4466004 0.5263012 0.6040227 0.6448699 0.6807108 0.6840093 #>  [651,] 0.49008505 0.5151476 0.5421475 0.5547587 0.7350032 0.7789432 0.8268002 #>  [652,] 0.40131670 0.4117065 0.4324225 0.4942985 0.5157322 0.5906525 0.5917148 #>  [653,] 0.61436212 0.6716419 0.8010496 0.8137124 0.8438088 0.8700235 0.8895823 #>  [654,] 0.45477461 0.5434670 0.5645913 0.5718318 0.6272494 0.6419691 0.6549053 #>  [655,] 0.08544083 0.2864627 0.2933482 0.4568293 0.5479543 0.5785703 0.5819753 #>  [656,] 1.53213531 1.5909445 1.7397002 1.7628477 1.8084856 1.8330736 1.8642106 #>  [657,] 0.25604212 0.3893172 0.4507683 0.5286882 0.6067249 0.6788000 0.7001325 #>  [658,] 0.33868478 0.4279020 0.4466004 0.5864665 0.6027740 0.6528855 0.6888400 #>  [659,] 0.65558853 0.9352097 1.0116924 1.2201629 1.2826413 1.3037514 1.3138671 #>  [660,] 0.31058601 0.4631771 0.5998045 0.6200753 0.6420782 0.6462257 0.7239041 #>  [661,] 0.36487903 0.3765062 0.3916305 0.4344987 0.4411883 0.4688037 0.5442770 #>  [662,] 0.48932844 0.6722302 0.7053552 0.7130093 0.7351505 0.7762959 0.8048912 #>  [663,] 0.26006760 0.5340676 0.6346499 0.6680478 0.6858901 0.8505587 0.8597710 #>  [664,] 0.47354357 0.4799699 0.5731372 0.6339035 0.6343330 0.7294407 0.7313129 #>  [665,] 1.18424966 1.4153072 1.4254611 1.5788336 1.5920200 1.6353545 1.8414840 #>  [666,] 1.26177834 1.2902591 1.4468127 1.5244852 1.6526686 1.7412011 1.7522779 #>  [667,] 0.34296919 0.3749199 0.5442580 0.5504247 0.5675077 0.5868875 0.6044210 #>  [668,] 0.55661137 0.8643764 0.9218280 1.0155976 1.0720536 1.0788072 1.1006608 #>  [669,] 0.43806191 0.5257558 0.5530351 0.6670700 0.6846644 0.7360550 0.7481727 #>  [670,] 0.19888002 0.3220688 0.4224858 0.4568293 0.4975911 0.5220205 0.5525568 #>  [671,] 0.66323646 0.6703717 0.7084110 0.7367137 0.9102710 0.9611981 0.9866953 #>  [672,] 0.61961135 0.7080261 0.7366693 0.8136697 0.8161899 0.8336523 0.8675669 #>  [673,] 0.32060926 0.3765190 0.4555137 0.5598570 0.6572207 0.6746397 0.6905925 #>  [674,] 0.56727156 0.6241039 0.7528377 0.7549295 0.8217054 0.8609326 0.9002340 #>  [675,] 0.99137983 1.0051570 1.0096141 1.1411890 1.2252998 1.2776198 1.3064138 #>  [676,] 0.85066899 0.8752043 0.9254196 0.9370971 1.0638980 1.0942173 1.1145150 #>  [677,] 0.41935706 0.4673104 0.5669621 0.5979694 0.6177792 0.6335641 0.6708195 #>  [678,] 0.72479909 0.8005655 0.8554493 0.9230772 1.1029632 1.2397212 1.2942483 #>  [679,] 0.34342133 0.4914107 0.5501300 0.5578627 0.5604170 0.6415046 0.7023179 #>  [680,] 0.99756444 1.0083020 1.1637118 1.2293886 1.2318559 1.3209446 1.3238034 #>  [681,] 0.63416530 0.6924577 0.7463931 1.0511642 1.0839281 1.1188125 1.1747184 #>  [682,] 0.60865976 0.6901269 0.7063177 0.8423590 0.8573370 0.9099810 0.9187407 #>  [683,] 0.60347310 0.7443126 0.9406855 1.0662126 1.1703859 1.2169423 1.2414309 #>  [684,] 0.44890223 0.4825827 0.5327789 0.5433775 0.5479119 0.5987656 0.6546952 #>  [685,] 0.49845342 0.5141639 0.6160763 0.6653122 0.6714672 0.6766853 0.7166713 #>  [686,] 0.16296593 0.4295153 0.4574674 0.4862872 0.5436167 0.5663500 0.5768957 #>  [687,] 0.76571114 0.8679775 0.9630949 1.0834806 1.0854836 1.0903934 1.1163656 #>  [688,] 0.45901826 0.6126128 0.6273204 0.6492554 0.6927204 0.7121796 0.7264718 #>  [689,] 0.92053063 1.0746196 1.1098600 1.1175455 1.1233589 1.1897465 1.2171665 #>  [690,] 0.35692745 0.3998397 0.4123737 0.4414963 0.4673104 0.4799266 0.4989613 #>  [691,] 0.40508723 0.5069476 0.5087867 0.5643357 0.5674844 0.5697032 0.5823923 #>  [692,] 0.34422652 0.5440939 0.6095643 0.6121251 0.6337690 0.6394821 0.6546952 #>  [693,] 0.25075919 0.3032577 0.3218339 0.4324225 0.4411883 0.4500234 0.5079077 #>  [694,] 0.38598789 0.8090152 0.9190227 0.9215204 0.9344241 0.9585200 0.9698787 #>  [695,] 0.74599476 0.7618934 0.7994912 0.8186244 0.9175227 0.9655382 0.9840933 #>  [696,] 0.36608229 0.4531979 0.5164233 0.5453938 0.5625212 0.5635872 0.5862059 #>  [697,] 0.45529962 0.6712633 0.7004517 0.7049389 0.7164892 0.7235837 0.7410284 #>  [698,] 0.51389332 0.6086598 0.6278528 0.7121796 0.7147530 0.7238799 0.7360550 #>  [699,] 0.51776404 0.7016802 0.7254055 0.7825964 0.8039683 0.8191021 0.8474943 #>  [700,] 0.61526802 0.7870254 0.8008392 0.8167748 0.8584861 0.9338985 0.9679854 #>  [701,] 0.33196298 0.4631748 0.4642986 0.5035784 0.5456831 0.5491864 0.5666743 #>  [702,] 0.34104055 0.3647065 0.4134996 0.4398223 0.4684802 0.4946221 0.5822481 #>  [703,] 0.52445070 0.6051547 0.6477647 0.6732422 0.7320013 0.7462097 0.7731437 #>  [704,] 0.43777788 0.4753383 0.5442765 0.5442770 0.5489369 0.5575092 0.5901530 #>  [705,] 0.89125995 0.9065514 1.5325166 1.6441944 1.6545995 1.6553271 1.6667017 #>  [706,] 1.28674213 1.3154743 1.3392652 1.4918531 1.4962550 1.5325166 1.6092563 #>  [707,] 0.34766500 0.4846139 0.5325019 0.5333996 0.5889499 0.6063497 0.6144228 #>  [708,] 0.29959076 0.3193055 0.3643191 0.4224923 0.4270246 0.4500234 0.4799266 #>  [709,] 0.36457262 0.4820576 0.5448162 0.5486485 0.5764444 0.6252183 0.6460175 #>  [710,] 0.73816862 0.9822703 1.0009898 1.0223311 1.0812478 1.1391381 1.1522637 #>  [711,] 0.27239906 0.3908526 0.4554391 0.4942985 0.5593375 0.5625212 0.6547009 #>  [712,] 0.28785119 0.9269673 0.9986696 1.0591494 1.1310162 1.1978062 1.2158564 #>  [713,] 0.69887035 0.7112927 0.7227883 0.7232366 0.8035284 0.8662747 0.8706408 #>  [714,] 0.36940497 0.4202556 0.5161111 0.5296953 0.5384689 0.5407572 0.5518570 #>  [715,] 0.32970004 0.5001766 0.5233893 0.5533357 0.5805031 0.6050294 0.6396351 #>  [716,] 0.38360427 0.6099702 0.7144482 0.7262614 0.7751843 0.8754865 0.8765006 #>  [717,] 0.34781374 0.3759457 0.4035013 0.4579625 0.5488137 0.6063497 0.6167342 #>  [718,] 0.40679149 0.4735436 0.6078496 0.6442137 0.6675939 0.6718749 0.6935111 #>  [719,] 0.58987284 0.6063047 0.7623330 0.8243765 0.8651248 0.8879051 0.8948496 #>  [720,] 0.30555370 0.4452496 0.4487712 0.4500631 0.4629733 0.4929008 0.5030347 #>  [721,] 0.58788433 0.6494120 0.6649972 0.6765891 0.6893882 0.6904323 0.7106085 #>  [722,] 0.39623116 0.4775935 0.7164118 0.7238546 0.7318974 0.7669144 0.7753440 #>  [723,] 0.64659236 0.6954650 0.6998271 0.7016749 0.7857689 0.8019921 0.8091816 #>  [724,] 0.30264243 0.4766088 0.5151719 0.5655272 0.6311530 0.6394497 0.6790055 #>  [725,] 0.14461188 0.4917350 0.5346383 0.5693330 0.6334309 0.6772253 0.6935582 #>  [726,] 0.46353982 0.6548131 0.7732120 0.8709850 0.8781655 0.9683655 0.9762255 #>  [727,] 0.34759417 0.4170912 0.4408829 0.4500631 0.4749561 0.4962561 0.5443088 #>  [728,] 0.23685811 0.3804686 0.4838184 0.5604097 0.5690710 0.5691706 0.5839470 #>  [729,] 0.48767053 0.5174461 0.7142839 0.7358804 0.7824395 0.7937504 0.8078596 #>  [730,] 0.50125819 0.5401884 0.6394719 0.6465128 0.6844208 0.7762748 0.7856213 #>  [731,] 0.43013314 0.9006101 0.9205306 1.0894392 1.1220984 1.1260277 1.1725851 #>  [732,] 0.30986002 0.3687165 0.5708244 0.6268780 0.6474317 0.6910187 0.7635431 #>  [733,] 0.50218625 0.7052823 0.7306579 0.7330173 0.7639954 0.8009995 0.8679856 #>  [734,] 0.39079975 0.4246311 0.4594928 0.5035784 0.5584804 0.5700364 0.6248389 #>  [735,] 0.69271422 0.7027731 0.9237683 1.0799884 1.1532653 1.1534479 1.1556570 #>  [736,] 0.34766500 0.4657270 0.5916418 0.6222117 0.6404003 0.6538468 0.6614503 #>  [737,] 0.37596713 0.4782657 0.7474394 0.7531800 0.8258309 0.8355531 0.9236042 #>  [738,] 0.50402351 0.5080027 0.6151089 0.6236608 0.6779852 0.7445699 0.7575674 #>  [739,] 0.33718787 0.4863718 0.5217794 0.5791356 0.6059702 0.6270969 0.6513659 #>  [740,] 0.48618060 0.6126578 0.6593784 0.7981197 0.8126673 0.8127698 0.8350854 #>  [741,] 0.29873064 0.3934025 0.4989346 0.5432454 0.5484948 0.5764887 0.5781872 #>  [742,] 0.32139332 0.5518570 0.5590130 0.6069065 0.7020956 0.7022401 0.7158041 #>  [743,] 0.85151083 1.0007385 1.2722068 1.2880500 1.3717955 1.5311802 1.5782508 #>  [744,] 0.59758969 0.6947712 0.7181151 0.7229740 0.7395617 0.8014848 0.8404344 #>  [745,] 0.53229894 0.6019804 0.6076163 0.7263098 0.8219144 0.8579549 0.8994181 #>  [746,] 0.80750069 0.8546952 0.9006101 0.9766960 0.9922516 1.0152451 1.1055486 #>  [747,] 0.36168124 0.5023793 0.6000704 0.6088082 0.6276368 0.6287242 0.6373739 #>  [748,] 0.38618794 0.5547869 0.5585734 0.6521396 0.6643771 0.7072909 0.7384947 #>  [749,] 0.53512120 0.6364434 0.6722302 0.7289870 0.7327711 0.7580771 0.8592331 #>  [750,] 0.28766833 0.3849572 0.4225965 0.4781089 0.5202629 0.5664358 0.5948764 #>  [751,] 0.41170654 0.4281213 0.4554391 0.4564311 0.5258425 0.5268087 0.5449501 #>  [752,] 0.51201544 0.5583359 0.5735417 0.7210900 0.7244777 0.7346327 0.7524719 #>  [753,] 0.45807248 0.5419846 0.5502167 0.6058215 0.6313465 0.6343352 0.7500511 #>  [754,] 0.55242643 0.5591005 0.5615950 0.5695412 0.6078280 0.6264794 0.6264800 #>  [755,] 0.34935521 0.4836059 0.5259614 0.5723091 0.6640392 0.7356758 0.7388085 #>  [756,] 0.40789365 0.4782657 0.5142227 0.8133001 0.9089069 1.0253268 1.0680677 #>  [757,] 1.16974809 1.1978062 1.2759090 1.2803936 1.3477496 1.3924978 1.6409317 #>  [758,] 0.53619531 0.6644397 0.7799036 0.8085255 0.9190203 0.9890679 1.0162845 #>  [759,] 0.40350135 0.5654577 0.6431094 0.6859595 0.7172087 0.7465174 0.7509740 #>  [760,] 0.40751523 0.5274575 0.5970436 0.6105727 0.6632292 0.6759128 0.6770216 #>  [761,] 0.48341376 0.5080027 0.5455660 0.5625967 0.6318824 0.7240737 0.7274239 #>  [762,] 0.76966248 1.0272301 1.0680424 1.1705416 1.2579621 1.2954550 1.3155902 #>  [763,] 0.34503482 0.3893773 0.5970436 0.6434003 0.7457160 0.7973839 0.8978470 #>  [764,] 0.35149711 0.3956874 0.4631748 0.4638688 0.4968684 0.5147970 0.5448162 #>  [765,] 0.42698693 0.5101491 0.5138488 0.6084074 0.6644278 0.7655895 0.7711291 #>  [766,] 0.39986030 0.5212349 0.5346140 0.5681569 0.5798351 0.5842990 0.6116459 #>  [767,] 0.54228723 0.6019804 0.6543563 0.8816813 0.8948148 0.9123096 0.9262917 #>  [768,] 0.56869969 0.9802294 1.1659774 1.2019583 1.2555447 1.3350349 1.3537606 #>  [769,] 0.68203050 0.9993307 1.1852454 1.1866112 1.2478162 1.2573530 1.2648291 #>  [770,] 0.42324862 0.4446694 0.4691448 0.4809781 0.4870051 0.5585371 0.5912269 #>  [771,] 0.51881861 0.5619283 0.5927246 0.6249742 0.6457572 0.6526989 0.6740299 #>  [772,] 0.31148671 0.3893773 0.5892559 0.9092230 0.9502996 0.9555825 0.9835546 #>  [773,] 0.38991822 0.4636614 0.6148532 0.6257787 0.6377575 0.6554038 0.6566848 #>  [774,] 0.24075777 0.2862749 0.3758511 0.4472674 0.4546499 0.5604097 0.6185100 #>  [775,] 0.79288469 0.9780627 1.0106272 1.0664593 1.1014515 1.2244247 1.2538885 #>  [776,] 0.51642327 0.5434670 0.6602556 0.6903387 0.6976195 0.7169774 0.7306912 #>  [777,] 0.54462848 0.5584983 0.6051189 0.6403181 0.6497451 0.7497108 0.7661711 #>  [778,] 0.41113854 0.5314275 0.5805031 0.5947842 0.6477404 0.7224203 0.7266646 #>  [779,] 0.33436469 0.3777199 0.3912774 0.4467585 0.4975911 0.4977365 0.5232031 #>  [780,] 0.59665038 0.7221702 0.7265033 0.7361184 0.7421352 0.7817140 0.7955522 #>  [781,] 0.38780816 0.6696849 0.6890628 0.7532233 0.8284561 0.9346521 0.9750500 #>  [782,] 0.54018842 0.5493058 0.6041251 0.6356028 0.7869795 0.8439238 0.8790677 #>  [783,] 0.16619941 0.3251583 0.3691416 0.3957091 0.4698955 0.4923408 0.5632561 #>  [784,] 0.22222826 0.3714490 0.3943401 0.4708045 0.7087844 0.7169522 0.7631104 #>  [785,] 0.65194080 0.7095791 0.7222136 0.7406387 0.7671723 0.8072467 0.8993701 #>  [786,] 0.34264737 0.3779301 0.5333373 0.5372271 0.5422024 0.5606503 0.6316153 #>  [787,] 0.65558853 0.7601323 0.8827590 0.9120658 0.9375547 0.9996079 1.0352256 #>  [788,] 0.23658899 0.5197249 0.5357461 0.5869583 0.6606142 0.6677110 0.6687063 #>  [789,] 0.70461973 0.8027005 0.9957575 1.0527347 1.0778273 1.1238892 1.1399878 #>  [790,] 0.25947894 0.4578047 0.4600519 0.4685664 0.5077420 0.5766850 0.5971114 #>  [791,] 0.35897409 0.3946734 0.4229827 0.5551341 0.6546106 0.6600438 0.6966287 #>  [792,] 0.66550452 0.6956635 0.7524955 0.8395049 0.8470422 0.9272315 0.9793392 #>  [793,] 0.30309278 0.3980626 0.3998966 0.3999201 0.4481610 0.5249978 0.6438697 #>  [794,] 0.47881843 0.5652814 0.7424189 0.7514239 0.7563836 0.8091899 0.8092447 #>  [795,] 0.29855574 0.4308553 0.5440939 0.5454901 0.6045832 0.6196849 0.6345182 #>  [796,] 0.91882628 0.9785736 0.9861428 1.1249035 1.1745562 1.2488798 1.3422482 #>  [797,] 0.53713931 0.6122966 0.6643771 0.6702381 0.7231840 0.7300003 0.7397143 #>  [798,] 0.91400900 0.9648979 0.9757097 1.1671053 1.1883595 1.2474017 1.2952700 #>  [799,] 0.32784893 0.3311112 0.4526704 0.4685664 0.4835808 0.5043499 0.5231695 #>  [800,] 0.31532870 0.5307206 0.7300444 0.7320013 0.8428777 0.8445635 0.8767427 #>  [801,] 0.32610793 0.5895697 0.5913918 0.6025080 0.6113589 0.6354869 0.7005309 #>  [802,] 0.46716596 0.6872063 0.7794306 0.8037309 0.9727051 0.9915576 0.9920253 #>  [803,] 0.34050849 0.6653782 0.6935282 0.7741157 0.7834199 0.8506474 0.8991211 #>  [804,] 0.32970004 0.3983763 0.4674113 0.4916948 0.5122911 0.5790197 0.6509513 #>  [805,] 0.62487619 0.7027731 0.7864133 0.8078630 0.8335805 0.8431260 0.8511216 #>  [806,] 0.66272253 0.7639473 0.8725997 0.9656245 1.0260372 1.0277987 1.0501029 #>  [807,] 0.38480755 0.4741289 0.4925790 0.5367195 0.5407363 0.6377575 0.6420782 #>  [808,] 0.48381839 0.4948303 0.5992748 0.6166969 0.6225700 0.6408059 0.6438269 #>  [809,] 0.38932568 0.3903293 0.4284649 0.5336108 0.5736041 0.5839698 0.6148612 #>  [810,] 0.47496143 0.5151476 0.5883969 0.5892093 0.6078770 0.6839490 0.7403527 #>  [811,] 0.53453228 0.6521198 0.6690113 0.7237275 0.7292472 0.7574055 0.8039683 #>  [812,] 0.16929811 0.5048724 0.5697032 0.6345628 0.6739372 0.7078623 0.7510540 #>  [813,] 0.31148671 0.3450348 0.6113323 0.6614269 0.6759128 0.7463110 0.8799760 #>  [814,] 0.20161447 0.3410214 0.3989702 0.4366822 0.4374332 0.4907600 0.5023045 #>  [815,] 0.54093591 0.6212609 0.7801072 0.8136697 0.8297121 0.9641251 0.9725615 #>  [816,] 0.34129910 0.4235419 0.4955260 0.5513062 0.5672865 0.6010068 0.6457096 #>  [817,] 0.37588952 0.4239172 0.4925790 0.5069794 0.6148532 0.6175874 0.6530589 #>  [818,] 0.34734509 0.8521091 0.9827832 1.0568555 1.0586294 1.1642416 1.1772764 #>  [819,] 0.47759346 0.7217690 0.7665979 0.8149187 0.8321415 0.8610583 0.8707663 #>  [820,] 0.33092947 0.4588044 0.6581530 0.7408282 0.7588632 0.8032727 0.8043457 #>  [821,] 0.54687917 0.6620229 0.6731753 0.7288418 0.8524562 0.9416253 0.9859991 #>  [822,] 0.51041807 0.5119024 0.5466086 0.5565633 0.5662752 0.5729808 0.6050286 #>  [823,] 0.23106474 0.3540537 0.4513983 0.4660460 0.4781089 0.5077690 0.5488143 #>  [824,] 0.54457109 0.6755831 0.8032048 0.8338446 0.9319528 0.9413638 0.9416253 #>  [825,] 0.13061122 0.4421644 0.5409830 0.6151400 0.6158018 0.6435954 0.6551620 #>  [826,] 0.17419950 0.2335392 0.3313922 0.4467585 0.4488100 0.4513248 0.4962471 #>  [827,] 0.45125763 0.4788184 0.6044928 0.6619020 0.6746946 0.6871362 0.7430178 #>  [828,] 0.38918244 0.4160594 0.4766088 0.5337112 0.5425612 0.5700284 0.5831915 #>  [829,] 0.49539689 0.5432507 0.6334309 0.6573624 0.6754067 0.6822000 0.7126731 #>  [830,] 0.39914055 0.5050641 0.5272820 0.5644349 0.6311530 0.7475012 0.7583889 #>  [831,] 0.53037714 0.6030567 0.6761925 0.6956814 0.7064371 0.7391641 0.7654889 #>  [832,] 0.44382305 0.4999664 0.5807119 0.6351146 0.6746498 0.7429804 0.7916758 #>  [833,] 0.50261406 0.7247991 0.7382198 0.8741562 1.0439954 1.1704855 1.1914338 #>  [834,] 0.18186047 0.4907001 0.6520662 0.7817140 0.8072460 0.8941462 1.0391488 #>  [835,] 0.61802421 0.6528855 0.6895849 0.7304002 0.7357277 0.7880458 0.8251498 #>  [836,] 0.42486898 0.4514502 0.4871213 0.5467800 0.5730138 0.5735417 0.6347118 #>  [837,] 0.28092925 0.4930073 0.5349896 0.5614835 0.6126578 0.6511429 0.6534424 #>  [838,] 0.40282053 0.4809123 0.5810858 0.6510229 0.6685825 0.6732356 0.7383942 #>  [839,] 0.38496196 0.5101110 0.5708244 0.7221789 0.7948805 0.8610583 0.8658206 #>  [840,] 0.32404982 0.3325388 0.4864943 0.5379615 0.5532625 0.5653496 0.5829375 #>  [841,] 0.52728204 0.5455660 0.5709033 0.6738098 0.7808688 0.8478643 0.8606728 #>  [842,] 0.52917074 0.7403966 0.8248379 0.8544181 0.9160643 0.9793376 1.0406982 #>  [843,] 0.69535619 0.8523020 1.0043311 1.0832496 1.2217769 1.3204309 1.3344112 #>  [844,] 0.86381210 0.9042188 1.0028138 1.0326897 1.1110176 1.1530363 1.1814741 #>  [845,] 0.50117412 0.5692838 0.5868875 0.6218197 0.6235538 0.6792255 0.6812418 #>  [846,] 0.62410394 0.6313465 0.6372165 0.6543033 0.6597332 0.7686738 0.7929727 #>  [847,] 0.25415830 0.3002604 0.3277909 0.3863718 0.3928123 0.4538972 0.4623607 #>  [848,] 0.71811509 0.7613872 0.7883295 0.8070140 0.8248379 0.8541618 0.9041100 #>  [849,] 0.70631771 0.8118967 0.9042310 0.9616841 0.9694936 0.9729601 0.9963350 #>  [850,] 0.45203818 0.4578047 0.4793743 0.5281111 0.5316358 0.5545999 0.5606413 #>  [851,] 0.90704551 1.1565434 1.4445215 1.4585118 1.5185738 1.5224158 1.6193172 #>  [852,] 0.44382305 0.6635499 0.6728641 0.7384286 0.7491104 0.7561875 0.7915871 #>  [853,] 0.16296593 0.4496979 0.4699849 0.4701307 0.4903084 0.5257289 0.6177762 #>  [854,] 0.43371962 0.4502945 0.5124457 0.5992748 0.6186316 0.6313232 0.6324682 #>  [855,] 0.18510757 0.4317372 0.4499187 0.4755679 0.4972498 0.5764910 0.5940908 #>  [856,] 0.08865645 0.4469061 0.4768325 0.6858781 0.6892686 0.7108557 0.7326769 #>  [857,] 0.14461188 0.5811624 0.5873168 0.5959760 0.6545760 0.6583143 0.6822000 #>  [858,] 0.77271915 0.9384899 0.9422325 0.9473157 0.9927875 0.9964504 1.0463418 #>  [859,] 0.33026440 0.4409480 0.5119024 0.5539936 0.5710827 0.5747487 0.5976508 #>  [860,] 0.38233230 0.4075831 0.4917350 0.5822986 0.5873168 0.6221411 0.6227682 #>  [861,] 0.75996892 0.7802318 0.9611981 0.9759354 1.1592731 1.1670774 1.1727666 #>  [862,] 0.27239906 0.3660823 0.3956817 0.4564311 0.5942647 0.6047820 0.6221293 #>  [863,] 0.31288933 0.3911555 0.4741289 0.5114489 0.5847135 0.5944485 0.6264794 #>  [864,] 0.89125995 1.0293066 1.1681514 1.2172460 1.4157763 1.4910354 1.4962550 #>  [865,] 0.89436729 1.1765847 1.1774157 1.2373248 1.2544635 1.3502429 1.4108525 #>  [866,] 0.45370339 0.4691419 0.4955260 0.5115096 0.5139471 0.5310282 0.5591005 #>  [867,] 0.50236109 0.5133701 0.5437859 0.5622567 0.6084074 0.6196434 0.6238583 #>  [868,] 0.34798686 0.3848075 0.3911555 0.4631771 0.5254999 0.5387586 0.6095902 #>  [869,] 0.45584320 0.4813455 0.5504247 0.6192745 0.6223161 0.6729321 0.6812418 #>  [870,] 0.39853643 0.4283042 0.5419670 0.5515686 0.5537315 0.6512449 0.6825860 #>  [871,] 0.32751396 0.6575639 0.6921565 0.7263098 0.7656206 0.8224695 0.8267659 #>  [872,] 0.77943056 0.8097277 1.0271117 1.1320131 1.1773237 1.1932501 1.3438871 #>  [873,] 0.26006760 0.6468342 0.6634010 0.7407962 0.7841265 0.8092447 0.8172907 #>  [874,] 0.17419950 0.2206664 0.3413211 0.3912774 0.3939860 0.4177423 0.4652422 #>  [875,] 0.70957910 0.7426730 0.7696625 0.8359232 0.9395566 0.9413638 0.9888923 #>  [876,] 0.31933515 0.3395552 0.5365636 0.5375569 0.5424029 0.5731372 0.5764910 #>  [877,] 0.39837631 0.4758310 0.5452690 0.5515136 0.6112225 0.6200715 0.6242807 #>  [878,] 0.42189081 0.4497793 0.5706711 0.6087190 0.6102396 0.6106182 0.6155770 #>  [879,] 0.41339320 0.5529016 0.5719970 0.5797437 0.7620724 0.7711291 0.8491100 #>  [880,] 0.60838494 0.6191701 0.7167455 0.7462867 0.7834199 0.8031892 0.8252856 #>  [881,] 0.39337518 0.7346080 0.7381686 0.7474394 0.7526839 0.7765238 0.8070360 #>  [882,] 0.30585138 0.3539013 0.4039438 0.5645623 0.5969058 0.6010691 0.6365686 #>  [883,] 0.69695618 0.7803329 0.7999596 0.8245752 0.8395049 0.9599190 0.9910540 #>  [884,] 0.32351332 0.6652639 0.7571346 0.8643764 0.8794713 0.9388867 0.9555171 #>  [885,] 0.39623116 0.4545532 0.5645623 0.6627575 0.6636398 0.7132418 0.7333471 #>  [886,] 0.40458422 0.6074109 0.6148612 0.6491762 0.6496536 0.6741421 0.6947118 #>  [887,] 0.75636479 0.7737925 0.8356718 0.8479164 0.8548777 0.8710037 0.8717237 #>  [888,] 0.47466013 0.4984357 0.5483818 0.6016457 0.6430138 0.6951886 0.7363081 #>  [889,] 0.40751523 0.5420996 0.5462935 0.6410571 0.7262614 0.7316500 0.7407469 #>  [890,] 0.36837762 0.3957091 0.5132106 0.5193425 0.5241228 0.5621301 0.5889499 #>  [891,] 0.51229112 0.5308274 0.5486485 0.5533357 0.5652814 0.5979694 0.6465118 #>  [892,] 0.51481384 0.5719970 0.9448014 0.9484384 1.0120554 1.0351282 1.0440186 #>  [893,] 0.54759637 0.5964356 0.6465546 0.7689377 0.7732639 0.8298100 0.9111386 #>  [894,] 0.68203050 0.7929424 0.9255919 0.9710789 1.0196532 1.0707450 1.0731006 #>  [895,] 0.48932844 0.5384689 0.5703191 0.5795418 0.5926168 0.6554560 0.7158041 #>  [896,] 0.41935706 0.4414963 0.5824385 0.6073647 0.6148055 0.6442137 0.6581417 #>  [897,] 0.29686819 0.3282175 0.4530690 0.4716000 0.4898260 0.6205103 0.6347273 #>  [898,] 0.38598789 0.9323600 1.0397674 1.1881514 1.2021272 1.2035443 1.2273501 #>  [899,] 0.38282631 0.5992109 0.6109160 0.6343330 0.6809517 0.7243183 0.7765238 #>  [900,] 0.27342108 0.4039438 0.4489022 0.5207692 0.5224715 0.5819676 0.5898018 #>  [901,] 0.16619941 0.3683776 0.4712512 0.4977365 0.5153704 0.5250017 0.5564521 #>  [902,] 0.68884001 0.7362757 0.7845469 0.7904778 0.8251498 0.8943673 0.9578636 #>  [903,] 0.44620272 0.4972224 0.4997507 0.6481584 0.7004271 0.7352577 0.7767997 #>  [904,] 0.63312760 0.8383418 0.8974325 0.9239665 0.9271229 1.0429186 1.0664593 #>  [905,] 0.34129910 0.4634493 0.4873718 0.5139471 0.5860312 0.6407934 0.6510461 #>  [906,] 1.45295954 1.4887502 1.5064512 1.5724571 1.5896610 1.7145102 1.7294127 #>  [907,] 0.84312602 0.9208767 0.9237683 1.0049540 1.1363785 1.1565356 1.1626590 #>  [908,] 0.39275083 0.4637339 0.5130830 0.5908040 0.6113589 0.6195753 0.8044636 #>  [909,] 0.45200792 0.4698955 0.4846139 0.4856988 0.4979119 0.5193425 0.5241157 #>  [910,] 0.69279264 0.8375868 0.8572748 0.8609900 0.8645129 0.8727318 0.9388867 #>  [911,] 0.39806256 0.4382318 0.4450379 0.4766639 0.5688177 0.5778158 0.6213267 #>  [912,] 0.57007312 0.6574393 0.7331691 0.9904744 1.0299464 1.0629456 1.1707534 #>  [913,] 0.78653811 0.8133781 0.8487048 0.8751884 0.9283864 0.9978253 1.0508848 #>  [914,] 0.40088801 0.5545999 0.6030567 0.6427524 0.6467848 0.7043779 0.7757043 #>  [915,] 0.89487149 1.1011420 1.1726639 1.1928695 1.2053707 1.2453603 1.2459359 #>  [916,] 0.43806191 0.6123746 0.6177790 0.6536458 0.7010940 0.7122625 0.7231514 #>  [917,] 0.30449916 0.4744987 0.5357461 0.5896980 0.5999810 0.6343352 0.6394719 #>  [918,] 0.63474919 0.6574398 0.7088033 0.8072467 0.8208012 0.8338446 0.8512357 #>  [919,] 0.77812140 0.9212891 1.0209035 1.0832076 1.0989287 1.1015341 1.1377266 #>  [920,] 0.37118335 0.4512064 0.4776327 0.5564610 0.7750397 0.8205560 0.8532300 #>  [921,] 0.33260011 0.4558432 0.4768325 0.5132412 0.6480566 0.6940337 0.7408282 #>  [922,] 0.27875495 0.3927508 0.4789341 0.5564610 0.6221504 0.7422601 0.7867861 #>  [923,] 0.28051215 0.7020956 0.7732736 0.7778398 0.7838152 0.9475432 0.9475533 #>  [924,] 0.29278000 0.3334548 0.3803616 0.4134996 0.4374332 0.4499986 0.5680964 #>  [925,] 0.41423436 0.5729531 0.6771911 0.7163328 0.7634408 0.7652011 0.7838578 #>  [926,] 0.35090362 0.4277021 0.4813194 0.5121081 0.5371393 0.5432609 0.5585734 #>  [927,] 0.25877334 0.4466909 0.5376223 0.6568282 0.6710638 0.6816875 0.8070628 #>  [928,] 0.28051215 0.6886995 0.8037309 0.8298100 0.8389792 0.8633688 0.9139913 #>  [929,] 0.34050849 0.4537840 0.7840753 0.8128808 0.8165920 0.9757097 0.9921556 #>  [930,] 0.42241803 0.5206740 0.6107975 0.6265487 0.6278528 0.6299555 0.6457022 #>  [931,] 0.60120864 0.6289312 0.7691775 0.8679856 0.8965588 0.9315520 0.9652184 #>  [932,] 0.30315863 0.5115096 0.5310637 0.5501422 0.5695412 0.5700284 0.6252500 #>  [933,] 0.85441813 1.0007385 1.1057439 1.2406684 1.4952066 1.5112340 1.5649304 #>  [934,] 0.18954821 0.4400788 0.4581064 0.4779620 0.5321686 0.5506531 0.5580194 #>  [935,] 0.45086075 0.5391286 0.5825721 0.6146498 0.6151400 0.6167342 0.6366187 #>  [936,] 0.32780566 0.3734671 0.4579567 0.5812764 0.5959434 0.6252500 0.6734542 #>  [937,] 0.60932515 0.6341653 0.9180017 0.9210780 0.9779571 0.9926173 1.0760066 #>  [938,] 0.54184591 0.6442385 0.6962288 0.7238799 0.8771006 0.8886901 0.9363524 #>  [939,] 0.33709856 0.3850426 0.3967151 0.4549890 0.4827385 0.4929008 0.5110704 #>  [940,] 0.37159041 0.4015759 0.4481610 0.4922030 0.5396631 0.5587910 0.6213628 #>  [941,] 0.16440238 0.4377573 0.4972025 0.5327789 0.5819676 0.5855889 0.5912974 #>  [942,] 0.41033990 0.4560937 0.4638711 0.4896145 0.5533426 0.5567736 0.5723309 #>  [943,] 0.63464989 0.6917132 0.7571346 0.8172907 0.8389482 0.9042310 0.9526830 #>  [944,] 0.39340247 0.4377156 0.4630865 0.5292047 0.5565633 0.5589373 0.5637778 #>  [945,] 0.42113276 0.6491762 0.6860780 0.6940295 0.7326769 0.7615042 0.7994460 #>  [946,] 0.42298267 0.4640816 0.5318164 0.5430737 0.5872614 0.6142304 0.6231820 #>  [947,] 0.53250192 0.6212609 0.7080261 0.7141653 0.7465174 0.7545394 0.7693997 #>  [948,] 0.54457109 0.6574398 0.6728436 0.7454765 0.7545013 0.7821927 0.7852584 #>  [949,] 0.65743929 0.7572525 0.9494851 0.9606214 0.9705066 0.9855039 1.0277987 #>  [950,] 0.33982051 0.4503996 0.5133701 0.5217026 0.5224993 0.5379800 0.5691706 #>  [951,] 0.40650084 0.4859930 0.5357807 0.6655568 0.8076426 0.8445635 0.8514808 #>  [952,] 0.37061082 0.3849572 0.4455832 0.4457070 0.4796495 0.5008082 0.5488143 #>  [953,] 0.62159062 0.6619956 0.7366693 0.8020595 0.8186244 0.8901125 0.9576301 #>  [954,] 0.38932568 0.4386891 0.5124457 0.5974632 0.6074109 0.6196999 0.6700945 #>  [955,] 0.64655464 0.9360585 0.9966562 1.0819894 1.1055858 1.1618209 1.1634431 #>  [956,] 0.35100129 0.5475964 0.6837723 0.7879706 0.8156548 0.8346429 0.9005669 #>  [957,] 0.34928954 0.4766070 0.4835808 0.4934067 0.4989346 0.5189948 0.5349896 #>  [958,] 0.29810547 0.5653175 0.5927246 0.6102396 0.6538886 0.6705592 0.6953920 #>  [959,] 0.85230199 1.3438460 1.3690244 1.4043253 1.4459740 1.4662375 1.5127898 #>  [960,] 0.13417734 0.4832031 0.8156262 0.8375868 0.9235648 0.9343321 0.9359729 #>  [961,] 0.73335684 0.8895823 0.9210773 0.9922516 1.0022040 1.1238444 1.1480400 #>  [962,] 0.56045946 0.6424416 0.8403663 0.8652024 0.9188263 0.9354940 0.9505046 #>  [963,] 0.67978413 0.6953520 0.8201462 0.8765495 0.9099810 0.9100607 0.9642193 #>  [964,] 0.49714121 0.5514382 0.5829375 0.6064596 0.6514002 0.6801863 0.6810759 #>  [965,] 0.54005297 0.5639170 0.6098160 0.6483709 0.6800834 0.7199898 0.7824395 #>  [966,] 0.62940836 0.6620229 0.6776612 0.7287152 0.7406831 0.7559830 0.8605819 #>  [967,] 0.35974218 0.7029345 0.7371566 0.7737925 0.8061995 0.8070628 0.8251921 #>  [968,] 1.34538911 1.4557695 1.5287479 1.5782863 1.6545708 1.6857459 1.7090493 #>  [969,] 0.59913257 0.6818035 0.8608874 0.8684860 0.9124112 0.9872350 1.0973231 #>  [970,] 0.87716931 1.1304390 1.1389029 1.1612022 1.1640820 1.1651125 1.1739176 #>  [971,] 0.64906992 0.6956814 0.6978772 0.8224695 0.8865358 0.8873257 0.8994181 #>  [972,] 0.29686819 0.3518609 0.3559538 0.5031422 0.5539936 0.5780268 0.5870625 #>  [973,] 0.37917177 0.4580725 0.5024879 0.6111457 0.6490699 0.6761925 0.6822385 #>  [974,] 0.69271422 0.8233154 0.8236943 0.8991486 0.9726483 1.0218446 1.0219743 #>  [975,] 0.41473389 0.4813194 0.5065696 0.5270825 0.5994186 0.6401257 0.6702381 #>  [976,] 0.34422652 0.3999201 0.4308553 0.4355615 0.4382318 0.5804314 0.5901147 #>  [977,] 0.37144900 0.5436591 0.5710827 0.6098501 0.6166729 0.6768413 0.6986046 #>  [978,] 0.35600550 0.5634790 0.6185100 0.6341428 0.6404003 0.6452286 0.6706725 #>  [979,] 0.55833091 0.9757880 1.0863770 1.1608667 1.1903898 1.2072188 1.3093006 #>  [980,] 0.54214751 0.5883969 0.6567473 0.7911501 0.8045326 0.8973000 0.9066305 #>  [981,] 0.55833091 0.8911466 1.0090208 1.1222108 1.2686456 1.4013452 1.4052067 #>  [982,] 0.76123372 0.9140090 1.0734375 1.0742056 1.1762431 1.2406350 1.2424162 #>  [983,] 0.65104074 0.6824915 0.7276243 0.7634516 0.7732120 0.7916557 0.8565127 #>  [984,] 0.16464834 0.6319465 0.7876736 0.8784906 0.8835694 0.9026935 0.9271229 #>  [985,] 0.55013004 0.5614093 0.6027740 0.6040227 0.6477847 0.6944172 0.7183149 #>  [986,] 0.42158735 0.5530351 0.6123746 0.6200715 0.6408325 0.6456776 0.6993294 #>  [987,] 0.30482619 0.4061321 0.4270246 0.4502945 0.5432724 0.5713607 0.5735803 #>  [988,] 0.48649429 0.5446285 0.5849494 0.5904740 0.5905196 0.6099341 0.6272804 #>  [989,] 0.18982483 0.2407578 0.3648616 0.4043751 0.4848114 0.5634790 0.5666285 #>  [990,] 0.41774230 0.4512224 0.4526554 0.4747576 0.4950259 0.4962471 0.5199294 #>  [991,] 0.58788433 0.6570406 0.6632365 0.7558188 0.7708658 0.8567764 0.8821065 #>  [992,] 0.63719312 0.6858781 0.7586518 0.7697537 0.7778660 0.8237044 0.8428927 #>  [993,] 0.40972994 0.5345323 0.5604595 0.5710183 0.5901139 0.6261677 0.7785578 #>  [994,] 0.49746970 0.6339125 0.7418900 0.8276673 0.8428925 0.8698881 0.8965638 #>  [995,] 0.63644344 0.6784235 0.7096816 0.7691775 0.8019993 0.8756039 0.9638192 #>  [996,] 0.50984310 0.5812876 0.8413232 0.8741562 0.9086377 0.9230772 0.9953073 #>  [997,] 0.64255209 0.6752880 0.7002823 0.7010190 0.7010966 0.7360651 0.7751545 #>  [998,] 0.34798686 0.5834789 0.5847135 0.5854514 0.6341971 0.6398861 0.6462257 #>  [999,] 0.62339703 0.7002823 0.7496675 0.7953128 0.8618691 0.8678183 0.8949250 #> [1000,] 0.40763358 0.4686410 0.4856220 0.5409065 0.5588485 0.5662752 0.6545916 #>              [,8]      [,9]     [,10] #>    [1,] 0.8927189 0.9030118 0.9418266 #>    [2,] 0.7105112 0.7232366 0.7279517 #>    [3,] 1.2773293 1.3509836 1.3558816 #>    [4,] 0.5955602 0.6227682 0.6254647 #>    [5,] 0.7744306 0.8322494 0.8534751 #>    [6,] 0.8528728 0.8849913 0.9151362 #>    [7,] 0.8861835 0.8969208 0.9304180 #>    [8,] 0.7068837 0.7368597 0.8009995 #>    [9,] 0.6246630 0.6474195 0.6987600 #>   [10,] 0.7009980 0.7168761 0.7372100 #>   [11,] 0.6468355 0.6483709 0.6566393 #>   [12,] 0.6438615 0.6853852 0.7209821 #>   [13,] 0.6336399 0.6531395 0.6939607 #>   [14,] 0.8899094 0.9009305 0.9072663 #>   [15,] 0.7563648 0.7604059 0.7790705 #>   [16,] 0.8693338 0.9536063 0.9659702 #>   [17,] 1.9121570 1.9966690 2.0041151 #>   [18,] 1.0774676 1.1362082 1.2009990 #>   [19,] 0.9925070 1.0058924 1.0227263 #>   [20,] 0.6261803 0.6272579 0.6314240 #>   [21,] 0.5535719 0.5871851 0.5997428 #>   [22,] 0.5263538 0.5314990 0.5431350 #>   [23,] 0.7658195 0.8486879 0.8607429 #>   [24,] 1.1111090 1.1401007 1.1573095 #>   [25,] 0.5905296 0.6594166 0.6737689 #>   [26,] 1.0566070 1.0610318 1.0702450 #>   [27,] 0.6754067 0.7003173 0.7029050 #>   [28,] 0.6449613 0.6653410 0.6712134 #>   [29,] 1.0275553 1.0287297 1.0432425 #>   [30,] 0.7954449 0.8406880 0.8548065 #>   [31,] 0.5990968 0.6285287 0.6552363 #>   [32,] 1.0397031 1.0555033 1.0677572 #>   [33,] 0.7262799 0.7364555 0.7514416 #>   [34,] 0.7391641 0.8071017 0.8350555 #>   [35,] 0.7383942 0.7776086 0.7979229 #>   [36,] 0.7153060 0.7175468 0.7182982 #>   [37,] 1.1996284 1.2087352 1.2675946 #>   [38,] 1.0093539 1.0663329 1.1072867 #>   [39,] 0.6373739 0.6867918 0.7180383 #>   [40,] 0.6951065 0.7240170 0.7267384 #>   [41,] 0.7853839 0.7940940 0.8346553 #>   [42,] 0.8804295 0.8899651 0.8904091 #>   [43,] 1.3258213 1.3285560 1.3939091 #>   [44,] 0.7549295 0.8000000 0.8166898 #>   [45,] 0.9222423 0.9319528 0.9476406 #>   [46,] 0.5197247 0.5213529 0.5795948 #>   [47,] 1.0346121 1.0446909 1.0643879 #>   [48,] 1.1826585 1.1848987 1.2134766 #>   [49,] 1.1448946 1.1462286 1.1709233 #>   [50,] 0.7466090 0.7692451 0.8720607 #>   [51,] 0.6439962 0.6494935 0.6637183 #>   [52,] 0.6678805 0.7153243 0.7205874 #>   [53,] 0.9583261 1.0132275 1.0326008 #>   [54,] 1.3214081 1.3453891 1.3686957 #>   [55,] 0.6789169 0.6955658 0.7042320 #>   [56,] 1.0824619 1.1060922 1.1091222 #>   [57,] 0.6000400 0.6080363 0.6212031 #>   [58,] 0.9170066 0.9766960 1.0022040 #>   [59,] 0.5895822 0.5964750 0.6249742 #>   [60,] 0.9096065 0.9291502 0.9731414 #>   [61,] 0.6530787 0.6744409 0.6983547 #>   [62,] 0.6268780 0.6376063 0.6503623 #>   [63,] 0.7672967 0.7731489 0.7752880 #>   [64,] 1.1774664 1.2146329 1.2480713 #>   [65,] 1.0476303 1.1084877 1.1790269 #>   [66,] 1.1824542 1.1875058 1.3029222 #>   [67,] 0.9241340 0.9652184 0.9770449 #>   [68,] 0.7304002 0.8511216 0.8635171 #>   [69,] 0.6064596 0.6119468 0.6179706 #>   [70,] 0.9272250 0.9345161 0.9511354 #>   [71,] 0.9476194 0.9693228 0.9776377 #>   [72,] 0.6502783 0.6671793 0.6685825 #>   [73,] 0.7058573 0.7145643 0.7264497 #>   [74,] 0.8245319 0.9487075 0.9525371 #>   [75,] 0.7673341 0.8434874 0.8538367 #>   [76,] 0.7305204 0.7778660 0.8706246 #>   [77,] 0.6215611 0.6297340 0.6327830 #>   [78,] 0.6287242 0.6452686 0.6580720 #>   [79,] 0.7354045 0.7450369 0.7521367 #>   [80,] 0.6419691 0.6782263 0.6903387 #>   [81,] 0.8546077 0.8628527 0.9088118 #>   [82,] 0.6468371 0.6555262 0.6732356 #>   [83,] 1.0451430 1.0657881 1.1036074 #>   [84,] 0.5090026 0.5349021 0.6311597 #>   [85,] 0.6479538 0.6936756 0.7364555 #>   [86,] 0.6763415 0.6950469 0.7092378 #>   [87,] 1.1632983 1.1772764 1.1887831 #>   [88,] 1.3067264 1.5009727 1.5075826 #>   [89,] 0.5231695 0.5425701 0.5620121 #>   [90,] 0.5883993 0.6056343 0.6070608 #>   [91,] 1.5662376 1.6128200 1.6278271 #>   [92,] 1.1817892 1.1948017 1.2001777 #>   [93,] 0.5905927 0.5913918 0.6425568 #>   [94,] 0.8054876 0.8106428 0.8112691 #>   [95,] 0.5714576 0.6746397 0.6888394 #>   [96,] 1.1724529 1.1863347 1.1932501 #>   [97,] 0.5940908 0.6038542 0.6106182 #>   [98,] 0.6361320 0.7218856 0.7280847 #>   [99,] 1.1822503 1.1852998 1.1891575 #>  [100,] 0.7401682 0.7947712 0.7977414 #>  [101,] 0.6749313 0.6825673 0.6969455 #>  [102,] 0.4513248 0.4521732 0.4623607 #>  [103,] 0.6415046 0.6561704 0.6690488 #>  [104,] 0.7927239 0.8522886 0.9031203 #>  [105,] 0.8972355 0.9047032 0.9580713 #>  [106,] 1.0551165 1.0747684 1.0878345 #>  [107,] 1.0662126 1.0770381 1.0799847 #>  [108,] 0.6728767 0.6832730 0.6911667 #>  [109,] 2.0253759 2.0599071 2.0852260 #>  [110,] 1.1743948 1.1946266 1.2247380 #>  [111,] 0.5983810 0.6135573 0.6348840 #>  [112,] 0.9730782 0.9864752 0.9874657 #>  [113,] 0.7748200 0.7753238 0.7774944 #>  [114,] 0.8024641 0.9088583 1.0290167 #>  [115,] 0.6817976 0.6866208 0.7424819 #>  [116,] 0.5073311 0.5234406 0.5489369 #>  [117,] 0.5012625 0.5110704 0.5206599 #>  [118,] 1.1613326 1.1735156 1.1913454 #>  [119,] 0.6739372 0.7211054 0.7285344 #>  [120,] 0.6910223 0.6919817 0.7429380 #>  [121,] 1.0112800 1.0142438 1.0245301 #>  [122,] 0.9059686 0.9348752 0.9678681 #>  [123,] 0.5942647 0.5964991 0.6245972 #>  [124,] 0.5828777 0.5846537 0.6041280 #>  [125,] 0.7001325 0.7196576 0.7445699 #>  [126,] 0.6308300 0.6313394 0.6651485 #>  [127,] 0.8476315 0.8507573 0.8649082 #>  [128,] 0.4993928 0.5432724 0.5569409 #>  [129,] 0.5845527 0.5903141 0.6130468 #>  [130,] 0.6293371 0.6347118 0.6365529 #>  [131,] 1.0304726 1.0389347 1.0711030 #>  [132,] 0.9826933 0.9897692 1.0157284 #>  [133,] 0.6746498 0.7016749 0.7211464 #>  [134,] 0.8216153 0.8354586 0.8459255 #>  [135,] 0.9553053 0.9659400 0.9822215 #>  [136,] 0.6065467 0.6356934 0.6450724 #>  [137,] 0.6399047 0.6535907 0.6548283 #>  [138,] 1.1603851 1.1890854 1.1939152 #>  [139,] 1.5669469 1.5675908 1.5812839 #>  [140,] 0.9769707 0.9882885 0.9884872 #>  [141,] 0.6112564 0.6167056 0.6343110 #>  [142,] 0.5979028 0.6041280 0.6099982 #>  [143,] 0.7467561 0.7797628 0.7860680 #>  [144,] 0.5752305 0.5772207 0.5903141 #>  [145,] 1.1387106 1.1408727 1.2057733 #>  [146,] 0.6942106 0.7420446 0.7463110 #>  [147,] 1.0429835 1.0597557 1.1240057 #>  [148,] 1.3102800 1.3437016 1.3529708 #>  [149,] 1.2178284 1.2373248 1.3296948 #>  [150,] 0.6567802 0.6919817 0.7107572 #>  [151,] 1.1065983 1.1659774 1.1723164 #>  [152,] 0.8729460 0.8949076 0.8994216 #>  [153,] 1.1085620 1.1692791 1.1737787 #>  [154,] 0.8226554 0.8570100 0.8598740 #>  [155,] 0.7960557 0.7984418 0.8161327 #>  [156,] 0.5569409 0.5683892 0.6141386 #>  [157,] 0.6893556 0.7303320 0.7309991 #>  [158,] 0.7893140 0.8010676 0.8096823 #>  [159,] 1.0166461 1.0231983 1.0613228 #>  [160,] 0.8048877 0.8076845 0.8282423 #>  [161,] 0.5812438 0.5999032 0.6425820 #>  [162,] 0.7181062 0.7186574 0.7501935 #>  [163,] 0.7080237 0.7540376 0.7567049 #>  [164,] 0.8078121 0.8517177 0.8646630 #>  [165,] 0.5858423 0.6087205 0.6175645 #>  [166,] 0.7272570 0.7603230 0.7776989 #>  [167,] 0.6324417 0.6453442 0.6695652 #>  [168,] 0.9413063 0.9685038 1.0030157 #>  [169,] 0.6401257 0.6659694 0.6817282 #>  [170,] 1.1065983 1.1178919 1.1596473 #>  [171,] 0.8601932 0.8837379 0.9906256 #>  [172,] 0.5238466 0.5320598 0.5333373 #>  [173,] 0.6231820 0.6336550 0.6583086 #>  [174,] 0.6276516 0.6278280 0.6278653 #>  [175,] 1.1172018 1.1244201 1.1703859 #>  [176,] 0.6500462 0.6702855 0.6792673 #>  [177,] 0.8209966 0.8212458 0.8816123 #>  [178,] 0.6521396 0.6583086 0.6642093 #>  [179,] 0.6513789 0.6579306 0.6738679 #>  [180,] 0.7544317 0.8085145 0.8516961 #>  [181,] 0.6179837 0.6460345 0.6554223 #>  [182,] 1.3514340 1.3790288 1.3924978 #>  [183,] 0.5672563 0.6272494 0.6418303 #>  [184,] 0.4946221 0.5845527 0.5997428 #>  [185,] 0.8656060 0.9110182 0.9297759 #>  [186,] 0.7633547 0.7835618 0.8168341 #>  [187,] 1.0245451 1.0511642 1.0548346 #>  [188,] 0.7457180 0.7984508 0.8552969 #>  [189,] 0.7147667 0.7615940 0.7678190 #>  [190,] 1.2067381 1.2333636 1.2686456 #>  [191,] 1.4770672 1.4887750 1.5138759 #>  [192,] 0.9478164 0.9621129 0.9890204 #>  [193,] 0.8085255 0.8118103 0.8120580 #>  [194,] 0.6443693 0.6624336 0.6652509 #>  [195,] 0.6758416 0.6760321 0.6858377 #>  [196,] 1.0648769 1.0706434 1.1011819 #>  [197,] 0.7642906 0.8270278 0.8420174 #>  [198,] 0.7838152 0.8251377 0.8389792 #>  [199,] 0.6119468 0.6196434 0.6353546 #>  [200,] 0.7481074 0.7598536 0.7602312 #>  [201,] 0.4565748 0.4982801 0.5156192 #>  [202,] 0.8754865 0.9204533 1.0096803 #>  [203,] 0.9732370 0.9980648 0.9993515 #>  [204,] 1.0807828 1.0903934 1.1044800 #>  [205,] 0.7646535 0.7736387 0.7917854 #>  [206,] 0.7654889 0.8579549 0.9887318 #>  [207,] 0.4865405 0.5259052 0.5289989 #>  [208,] 0.6123364 0.6158981 0.6354650 #>  [209,] 1.5679325 1.6198494 1.6393847 #>  [210,] 0.6636486 0.6867334 0.7135669 #>  [211,] 0.7529773 0.7588514 0.7635599 #>  [212,] 1.1651125 1.1733222 1.2172460 #>  [213,] 0.8671135 0.8843708 0.8987683 #>  [214,] 0.6408325 0.6670700 0.7231514 #>  [215,] 0.7950835 0.7976207 0.8132946 #>  [216,] 0.7820191 0.7821927 0.8416377 #>  [217,] 0.5826916 0.5876793 0.6106895 #>  [218,] 0.6944172 0.7137607 0.7771882 #>  [219,] 0.7951970 0.7978245 0.8153795 #>  [220,] 0.7598761 0.7632896 0.7740798 #>  [221,] 0.8099444 0.8114975 0.9184330 #>  [222,] 0.9781661 0.9924087 0.9928935 #>  [223,] 0.9329802 0.9483992 0.9844696 #>  [224,] 0.7810784 0.7841265 0.8170481 #>  [225,] 1.0231359 1.0352256 1.1114420 #>  [226,] 0.6492125 0.6760139 0.6971834 #>  [227,] 0.9410366 0.9576092 0.9604322 #>  [228,] 1.1785381 1.1818300 1.2105522 #>  [229,] 0.6987600 0.7176492 0.7285344 #>  [230,] 0.9544056 0.9567821 0.9827832 #>  [231,] 0.7330173 0.7520910 0.7835618 #>  [232,] 1.0730128 1.0854836 1.1750287 #>  [233,] 1.1158178 1.1394598 1.1405670 #>  [234,] 0.9343042 0.9429827 0.9705366 #>  [235,] 1.0419995 1.1180737 1.1406418 #>  [236,] 0.5839470 0.6225700 0.6559524 #>  [237,] 0.9845864 0.9846161 1.0006728 #>  [238,] 0.7022571 0.7350886 0.7458561 #>  [239,] 1.1065436 1.1290419 1.1468979 #>  [240,] 0.6914231 0.6934227 0.7126023 #>  [241,] 0.6103412 0.6530589 0.6711086 #>  [242,] 0.9287437 0.9395566 0.9530355 #>  [243,] 0.6542943 0.6636570 0.6637297 #>  [244,] 0.5443088 0.5518160 0.5618176 #>  [245,] 0.8996831 0.9075436 0.9339411 #>  [246,] 1.0027892 1.0039180 1.0131049 #>  [247,] 0.8328350 0.8372267 0.8515093 #>  [248,] 0.5558115 0.5606200 0.5729808 #>  [249,] 1.1935756 1.2766048 1.2872832 #>  [250,] 0.8050750 0.8417535 0.8440584 #>  [251,] 0.7427923 0.7655895 0.8066340 #>  [252,] 0.9980792 1.0081732 1.0342928 #>  [253,] 0.9670783 0.9747480 0.9839222 #>  [254,] 1.3741592 1.3886282 1.4082109 #>  [255,] 1.4399188 1.4454795 1.5004346 #>  [256,] 0.9403991 0.9494045 0.9915771 #>  [257,] 0.5487329 0.5802241 0.6138454 #>  [258,] 1.2272742 1.2298194 1.2341700 #>  [259,] 0.7540376 0.7854716 0.7992546 #>  [260,] 0.7232006 0.7905349 0.8373029 #>  [261,] 1.6817526 1.7450432 1.7566366 #>  [262,] 0.9047791 0.9565220 0.9779323 #>  [263,] 0.6471857 0.6598246 0.6910255 #>  [264,] 0.5432454 0.5571458 0.5589373 #>  [265,] 0.7336463 0.7455223 0.7530329 #>  [266,] 0.6890794 0.7037603 0.7069229 #>  [267,] 0.6390574 0.6525004 0.6545056 #>  [268,] 0.6541596 0.6554560 0.6807287 #>  [269,] 1.2321096 1.2606886 1.2806653 #>  [270,] 0.5645523 0.5819753 0.6024243 #>  [271,] 0.5990645 0.6049805 0.6082367 #>  [272,] 0.6782560 0.7466752 0.7545013 #>  [273,] 1.2536929 1.2845350 1.3013138 #>  [274,] 0.9440980 1.0223326 1.0368204 #>  [275,] 0.6711086 0.6738098 0.6746888 #>  [276,] 0.6405807 0.6905925 0.7116043 #>  [277,] 1.0461872 1.0903181 1.1546129 #>  [278,] 0.6733279 0.6999587 0.7351953 #>  [279,] 0.6029509 0.6052960 0.6203862 #>  [280,] 0.5644081 0.5714576 0.5795418 #>  [281,] 0.7292886 0.8053415 0.8254373 #>  [282,] 0.5019234 0.5257289 0.5436167 #>  [283,] 0.5812580 0.6111457 0.6149485 #>  [284,] 1.4879493 1.5368694 1.6257881 #>  [285,] 0.8490200 0.8512808 0.8713289 #>  [286,] 0.6186876 0.6215930 0.6276368 #>  [287,] 1.2095962 1.2412433 1.2540480 #>  [288,] 0.5749025 0.5862150 0.5964074 #>  [289,] 0.7490708 0.7886837 0.8180894 #>  [290,] 0.6093314 0.6138926 0.6407208 #>  [291,] 0.8010496 0.8491691 0.8669617 #>  [292,] 0.8221279 0.8361915 0.8432542 #>  [293,] 0.8014712 0.8245752 0.8497099 #>  [294,] 0.8357633 0.8592164 0.8789741 #>  [295,] 0.5144084 0.5173656 0.5289989 #>  [296,] 1.0680536 1.1735156 1.2412015 #>  [297,] 0.7590935 0.7613386 0.7776379 #>  [298,] 0.7596313 0.7650537 0.7801289 #>  [299,] 1.0521485 1.0593119 1.1151585 #>  [300,] 0.6450644 0.6622785 0.6646838 #>  [301,] 1.0885046 1.1616061 1.1914069 #>  [302,] 0.5484948 0.6103412 0.6135573 #>  [303,] 0.7358345 0.7458181 0.7615042 #>  [304,] 0.9354940 0.9721444 0.9799670 #>  [305,] 1.6503012 1.7115245 1.7211651 #>  [306,] 1.5392512 1.5643792 1.6098860 #>  [307,] 1.0958942 1.1086173 1.1350647 #>  [308,] 0.6403885 0.6732760 0.7103015 #>  [309,] 0.8066598 0.8195925 0.8504648 #>  [310,] 0.5846566 0.6101469 0.6130500 #>  [311,] 0.6385890 0.6390574 0.6486285 #>  [312,] 0.8728819 0.9147752 0.9224989 #>  [313,] 0.6207984 0.6474195 0.6635042 #>  [314,] 0.8666880 0.9257067 0.9280143 #>  [315,] 0.7691439 0.7882302 0.8698915 #>  [316,] 0.5146430 0.5179499 0.5201035 #>  [317,] 1.0479969 1.0492729 1.0498054 #>  [318,] 0.5804314 0.6256844 0.6272511 #>  [319,] 0.6099982 0.6161210 0.6308300 #>  [320,] 0.6975265 0.7468042 0.7477434 #>  [321,] 0.6433436 0.6553970 0.6678805 #>  [322,] 0.8733401 0.8878696 0.9478095 #>  [323,] 0.9098418 0.9147983 0.9230936 #>  [324,] 0.6364103 0.6864259 0.6935538 #>  [325,] 0.6618017 0.6933342 0.7424718 #>  [326,] 0.9153062 0.9634461 0.9754045 #>  [327,] 0.9511354 1.0005449 1.0255887 #>  [328,] 0.9346521 0.9857938 0.9954160 #>  [329,] 0.7020412 0.7031974 0.7049389 #>  [330,] 0.5690710 0.6475884 0.6875207 #>  [331,] 0.5987940 0.6083474 0.6274238 #>  [332,] 0.8132946 0.8927189 0.9093618 #>  [333,] 0.7743443 0.8071325 0.8209966 #>  [334,] 0.5408611 0.5439539 0.5453024 #>  [335,] 0.5237629 0.6045987 0.6456133 #>  [336,] 0.7776989 0.7994912 0.8042928 #>  [337,] 1.3430309 1.3791320 1.4014177 #>  [338,] 1.0322829 1.0522587 1.0524332 #>  [339,] 0.5798351 0.5799257 0.6119724 #>  [340,] 1.1671423 1.1681514 1.1766076 #>  [341,] 0.6624980 0.7514918 0.7720994 #>  [342,] 0.6338327 0.6459004 0.6494120 #>  [343,] 1.5099132 1.5340211 1.5849000 #>  [344,] 0.5453938 0.5726657 0.5860312 #>  [345,] 0.7029345 0.7076663 0.7833420 #>  [346,] 0.9441979 0.9565685 0.9812704 #>  [347,] 0.5590512 0.5700577 0.6198054 #>  [348,] 0.9160643 0.9212891 0.9452166 #>  [349,] 0.7126731 0.7431994 0.7515022 #>  [350,] 0.7972733 0.8313231 0.8808616 #>  [351,] 0.7126879 0.7740399 0.8156262 #>  [352,] 1.8900570 1.9951661 2.0050316 #>  [353,] 0.8591237 0.9082399 0.9382262 #>  [354,] 1.2918068 1.3002847 1.3864792 #>  [355,] 0.5766040 0.6011279 0.6020452 #>  [356,] 0.7778841 0.7968811 0.8141868 #>  [357,] 1.1324759 1.1513995 1.1698412 #>  [358,] 0.7240170 0.7352577 0.7913077 #>  [359,] 0.7740258 0.8680395 0.9106803 #>  [360,] 0.6101469 0.6180777 0.6239697 #>  [361,] 0.5488322 0.5576258 0.5877844 #>  [362,] 0.8522810 0.8939468 0.9439882 #>  [363,] 0.8161327 0.8223143 0.9533068 #>  [364,] 1.1389949 1.1758649 1.2065216 #>  [365,] 0.8632421 0.8728819 0.8806927 #>  [366,] 0.9183984 0.9255783 0.9334064 #>  [367,] 0.6844208 0.6936586 0.7293329 #>  [368,] 1.2016730 1.2415358 1.2456289 #>  [369,] 0.5636039 0.5797207 0.5959434 #>  [370,] 0.5684917 0.6078496 0.6313302 #>  [371,] 0.8113735 0.8296052 0.8338241 #>  [372,] 1.2333638 1.2448207 1.2613573 #>  [373,] 0.7744306 0.7799076 0.7833420 #>  [374,] 1.4265951 1.5261962 1.5658244 #>  [375,] 0.5693659 0.5987656 0.6010691 #>  [376,] 1.4080171 1.4149844 1.4263841 #>  [377,] 0.7454765 0.7597613 0.7727678 #>  [378,] 0.8889286 0.9544087 0.9611887 #>  [379,] 0.9559625 0.9823035 0.9830274 #>  [380,] 0.6992650 0.7037603 0.7808561 #>  [381,] 0.9521244 0.9769486 0.9937875 #>  [382,] 0.6647734 0.6870297 0.6950227 #>  [383,] 0.7409478 0.7434898 0.7505541 #>  [384,] 0.8110135 0.8186376 0.8526858 #>  [385,] 0.9909640 1.0202775 1.0223311 #>  [386,] 0.7249780 0.7960242 0.9062364 #>  [387,] 0.7929424 0.8116916 0.8307409 #>  [388,] 0.6838727 0.7039011 0.8397589 #>  [389,] 0.9783472 0.9875705 1.0021312 #>  [390,] 0.7273335 0.7310952 0.7550310 #>  [391,] 0.7904778 0.7976340 0.8492810 #>  [392,] 1.3573765 1.4240890 1.4315219 #>  [393,] 0.9254254 0.9344048 0.9645807 #>  [394,] 0.6506064 0.6647734 0.6934227 #>  [395,] 0.7298212 0.7486156 0.7597063 #>  [396,] 0.5027871 0.5150884 0.5385498 #>  [397,] 0.9295142 0.9822285 0.9824659 #>  [398,] 0.5625160 0.5990968 0.6156331 #>  [399,] 1.0812443 1.1084715 1.1175455 #>  [400,] 0.7462867 0.8090319 0.8329501 #>  [401,] 0.6438697 0.6612194 0.6612277 #>  [402,] 1.2073453 1.2216444 1.2296051 #>  [403,] 0.7919395 0.8097274 0.8162088 #>  [404,] 0.8307326 0.8697828 0.9017258 #>  [405,] 0.9421143 0.9773914 1.0381096 #>  [406,] 0.8317776 0.8457447 0.8580147 #>  [407,] 0.7751843 0.8711752 0.9053046 #>  [408,] 1.2402192 1.2549629 1.2618434 #>  [409,] 0.7458246 0.7674911 0.7822541 #>  [410,] 0.7513120 0.7658195 0.7686738 #>  [411,] 0.7855124 0.7900905 0.8382827 #>  [412,] 0.7424819 0.7733757 0.7906931 #>  [413,] 0.5272402 0.5773138 0.5952611 #>  [414,] 1.2585154 1.3120980 1.3829779 #>  [415,] 0.8930630 0.9290091 0.9291502 #>  [416,] 0.9098418 0.9365636 0.9793376 #>  [417,] 0.8865358 0.9056959 0.9407039 #>  [418,] 0.8693629 0.8895348 0.9191398 #>  [419,] 0.8153559 0.8239424 0.8621744 #>  [420,] 1.2828793 1.2924807 1.2945508 #>  [421,] 1.4683736 1.4761357 1.4887750 #>  [422,] 0.7300131 0.7416619 0.7870007 #>  [423,] 0.5642744 0.5667281 0.5830079 #>  [424,] 0.7760025 0.7991191 0.8787659 #>  [425,] 0.5781694 0.6027861 0.6138454 #>  [426,] 0.7540405 0.7708979 0.7966783 #>  [427,] 0.7893507 0.8482610 0.8791010 #>  [428,] 0.6354650 0.6724805 0.6887836 #>  [429,] 0.6165873 0.6237321 0.6352772 #>  [430,] 1.5636751 1.5670940 1.6080562 #>  [431,] 0.5310637 0.5337112 0.5441191 #>  [432,] 1.1389029 1.1409249 1.1424219 #>  [433,] 2.0013914 2.0037759 2.0058777 #>  [434,] 1.0391571 1.0547441 1.0561820 #>  [435,] 0.7842182 0.7904993 0.8262060 #>  [436,] 0.7039011 0.7063320 0.7094532 #>  [437,] 0.9690051 0.9725236 0.9793392 #>  [438,] 1.7666511 1.7784949 1.7898011 #>  [439,] 0.5958527 0.5995105 0.6025136 #>  [440,] 0.8662747 0.8891012 0.9332727 #>  [441,] 1.4286644 1.4596347 1.4619272 #>  [442,] 0.6575214 0.6709305 0.6838037 #>  [443,] 0.8288101 0.8453205 0.8560781 #>  [444,] 1.1394598 1.1462286 1.1948017 #>  [445,] 0.8288244 0.8571546 0.8867899 #>  [446,] 0.6807287 0.6811809 0.6864332 #>  [447,] 0.8248689 0.8297257 0.8306010 #>  [448,] 0.6205103 0.6330119 0.6430337 #>  [449,] 0.5612784 0.5735803 0.5906525 #>  [450,] 0.6913729 0.7088033 0.7125517 #>  [451,] 0.5718318 0.5779095 0.5905927 #>  [452,] 0.6564586 0.6567473 0.6691612 #>  [453,] 0.5392171 0.5430934 0.5673800 #>  [454,] 1.1570226 1.1598664 1.1828201 #>  [455,] 1.4290380 1.4492034 1.4735287 #>  [456,] 0.5519660 0.5567607 0.5586493 #>  [457,] 1.1308213 1.1313811 1.2465631 #>  [458,] 0.6701620 0.6711959 0.6731356 #>  [459,] 0.7306821 0.7785675 0.7840584 #>  [460,] 0.6850440 0.6851550 0.7156117 #>  [461,] 1.0239648 1.0296602 1.0469004 #>  [462,] 0.6221535 0.6641502 0.6695150 #>  [463,] 0.7999176 0.8283256 0.8473034 #>  [464,] 1.4116312 1.4560751 1.5013619 #>  [465,] 0.7168761 0.7470398 0.7471359 #>  [466,] 0.4903770 0.5094878 0.5197247 #>  [467,] 1.0610511 1.0680075 1.1325634 #>  [468,] 0.5738325 0.6116459 0.6367564 #>  [469,] 1.4978124 1.5056059 1.5096114 #>  [470,] 0.6246630 0.6737689 0.7032690 #>  [471,] 0.5675077 0.6143539 0.6256169 #>  [472,] 0.9089090 0.9405040 0.9492062 #>  [473,] 0.5726657 0.5896075 0.5944485 #>  [474,] 1.0656409 1.0815559 1.1287553 #>  [475,] 0.4903770 0.4994762 0.5042761 #>  [476,] 1.0295636 1.0893184 1.1398172 #>  [477,] 0.9608363 0.9693169 0.9776705 #>  [478,] 0.5687094 0.5826916 0.6082367 #>  [479,] 0.8847877 0.9125202 0.9171428 #>  [480,] 0.6467186 0.6471985 0.6490860 #>  [481,] 0.9559011 0.9728621 1.0291915 #>  [482,] 0.6842128 0.6849020 0.7048226 #>  [483,] 0.5848716 0.6161210 0.6603580 #>  [484,] 1.2202514 1.3041569 1.3679917 #>  [485,] 0.9086375 0.9370205 1.0027892 #>  [486,] 0.5630418 0.5672706 0.6054707 #>  [487,] 2.2742698 2.2832555 2.3066759 #>  [488,] 0.6623890 0.6639131 0.6966672 #>  [489,] 0.9894934 1.0389007 1.1040362 #>  [490,] 0.5633009 0.5745667 0.5828323 #>  [491,] 0.8245319 0.8294225 0.9031203 #>  [492,] 0.5877086 0.5959760 0.6693129 #>  [493,] 0.6746946 0.7461333 0.7735700 #>  [494,] 0.5413553 0.5630418 0.5807326 #>  [495,] 0.5723309 0.5766018 0.5998382 #>  [496,] 1.0508685 1.1015341 1.1079540 #>  [497,] 1.2668559 1.2686389 1.3477609 #>  [498,] 1.1456899 1.1841235 1.1848830 #>  [499,] 0.8949250 0.8973000 0.9627077 #>  [500,] 1.0874986 1.1209306 1.1438863 #>  [501,] 0.7219958 0.7360073 0.7558427 #>  [502,] 0.9508601 1.0010645 1.0127711 #>  [503,] 0.5214540 0.5314990 0.5804831 #>  [504,] 0.8450990 0.8753570 0.9287802 #>  [505,] 0.7180520 0.7455223 0.7477434 #>  [506,] 1.2410810 1.2544737 1.2702082 #>  [507,] 1.4250004 1.4464558 1.4920611 #>  [508,] 0.9733748 1.1567045 1.2541269 #>  [509,] 1.0108935 1.0116285 1.0200115 #>  [510,] 0.6388687 0.6581417 0.7100195 #>  [511,] 0.5554042 0.5736041 0.5934236 #>  [512,] 0.6649972 0.6884261 0.6922855 #>  [513,] 0.6719717 0.7480965 0.7819155 #>  [514,] 0.7437315 0.7444919 0.7634516 #>  [515,] 1.1901215 1.2164966 1.2268415 #>  [516,] 0.6184352 0.6753585 0.6783491 #>  [517,] 0.6892400 0.7064371 0.7907826 #>  [518,] 1.0701120 1.0942173 1.1216369 #>  [519,] 1.3001204 1.3097720 1.3098733 #>  [520,] 0.7414489 0.7869180 0.8238282 #>  [521,] 0.6848153 0.7080237 0.7274516 #>  [522,] 1.1168519 1.1553410 1.1952236 #>  [523,] 0.6378486 0.7232189 0.7450369 #>  [524,] 0.4966354 0.5053054 0.5400638 #>  [525,] 1.2186346 1.2307672 1.2912529 #>  [526,] 0.5156192 0.5308909 0.5359288 #>  [527,] 0.6330636 0.6385034 0.6400774 #>  [528,] 0.5238466 0.5700692 0.5901530 #>  [529,] 0.6119724 0.6612272 0.6895505 #>  [530,] 1.6403612 1.6546351 1.6696848 #>  [531,] 1.2698874 1.3262861 1.3622612 #>  [532,] 0.8109076 0.8225450 0.8467664 #>  [533,] 0.7510540 0.7870254 0.7947237 #>  [534,] 0.7074446 0.7415416 0.7659078 #>  [535,] 1.1467103 1.1546129 1.1745578 #>  [536,] 0.6045987 0.6049805 0.6141728 #>  [537,] 0.6456776 0.6846644 0.6885775 #>  [538,] 1.1227578 1.1648342 1.1662119 #>  [539,] 0.7620724 0.7660879 0.8021156 #>  [540,] 0.8087352 0.8193517 0.8352797 #>  [541,] 0.5811624 0.6492554 0.6561704 #>  [542,] 0.8429920 0.8433500 0.8731627 #>  [543,] 0.7044865 0.7339677 0.7482119 #>  [544,] 0.5767967 0.5785703 0.5846566 #>  [545,] 1.1365400 1.2090178 1.2924551 #>  [546,] 0.5813641 0.6135999 0.6473184 #>  [547,] 0.9074003 0.9769707 0.9812704 #>  [548,] 0.5157322 0.5258425 0.6007616 #>  [549,] 1.4360102 1.4781141 1.4849550 #>  [550,] 0.9757880 0.9847689 0.9849001 #>  [551,] 1.2208843 1.2353069 1.2595382 #>  [552,] 0.8712443 0.9063633 0.9188950 #>  [553,] 0.5994011 0.6239643 0.6253430 #>  [554,] 0.6479470 0.6602995 0.7266577 #>  [555,] 1.6616270 1.6814172 1.7293731 #>  [556,] 0.5812438 0.5968549 0.6732649 #>  [557,] 1.2415982 1.2500955 1.2598164 #>  [558,] 0.6333104 0.6463301 0.6494163 #>  [559,] 1.1169114 1.1199772 1.1614623 #>  [560,] 0.5950557 0.5984715 0.6056343 #>  [561,] 0.9875705 1.0260372 1.0329327 #>  [562,] 0.7339090 0.7442057 0.7674452 #>  [563,] 0.6326636 0.6332772 0.6388687 #>  [564,] 0.5451290 0.5606503 0.5673800 #>  [565,] 0.6952334 0.6994380 0.7191611 #>  [566,] 0.6786597 0.6864246 0.7087844 #>  [567,] 0.7767022 0.7931516 0.8032727 #>  [568,] 1.0217755 1.0697870 1.0759041 #>  [569,] 0.7263514 0.7622287 0.7872198 #>  [570,] 0.7238799 0.7466090 0.7785804 #>  [571,] 0.9266001 0.9361348 0.9563530 #>  [572,] 0.6299555 0.6312492 0.6536638 #>  [573,] 0.7449420 0.7474457 0.7499366 #>  [574,] 1.9804501 2.0388511 2.0639861 #>  [575,] 0.5879211 0.5977450 0.6054707 #>  [576,] 1.1835993 1.2368279 1.2750218 #>  [577,] 0.7271087 0.7298212 0.7310846 #>  [578,] 0.7302909 0.7529853 0.7531065 #>  [579,] 0.6208925 0.6218197 0.6712677 #>  [580,] 0.9086375 0.9145764 0.9293133 #>  [581,] 1.0526488 1.0555950 1.0598168 #>  [582,] 1.2617783 1.2711162 1.2924759 #>  [583,] 0.7709695 0.8165408 0.8168773 #>  [584,] 0.6989107 0.7469578 0.7558630 #>  [585,] 0.6691722 0.6807978 0.6933590 #>  [586,] 0.8486760 0.8709850 0.8759180 #>  [587,] 0.8230886 0.8270430 0.8334284 #>  [588,] 1.7726587 1.7998777 1.9173435 #>  [589,] 1.0318687 1.0391488 1.1551574 #>  [590,] 0.9194131 0.9320500 1.0149495 #>  [591,] 0.7625122 0.7762959 0.7947036 #>  [592,] 0.5925395 0.5995440 0.6251292 #>  [593,] 0.7306821 0.7399927 0.7704841 #>  [594,] 1.4587606 1.4607145 1.5524792 #>  [595,] 0.9994972 1.0378930 1.0390585 #>  [596,] 0.7870007 0.8104563 0.8340707 #>  [597,] 0.8251114 0.8459388 0.8517177 #>  [598,] 0.5986994 0.6169060 0.6417677 #>  [599,] 1.1977508 1.2267468 1.2711779 #>  [600,] 0.6554223 0.6630011 0.6811809 #>  [601,] 0.7864133 0.7996736 0.8222919 #>  [602,] 0.7896278 0.8199615 0.8435412 #>  [603,] 0.4820837 0.4898814 0.5549555 #>  [604,] 0.6404446 0.6427064 0.6624336 #>  [605,] 1.4129664 1.4492034 1.4961759 #>  [606,] 1.3107597 1.3122570 1.3477266 #>  [607,] 0.6306941 0.6606142 0.7021955 #>  [608,] 0.6493528 0.6594134 0.6792673 #>  [609,] 0.8610130 0.8877610 0.9141532 #>  [610,] 0.7580145 0.7710950 0.7977790 #>  [611,] 0.7243183 0.7465740 0.7520420 #>  [612,] 0.8552194 0.8599294 0.8755996 #>  [613,] 0.8582253 0.8656060 0.8697213 #>  [614,] 0.8116916 0.8223143 0.8378630 #>  [615,] 0.8310521 0.8384971 0.8404166 #>  [616,] 0.9038108 0.9058411 0.9626132 #>  [617,] 0.7976340 0.8580147 0.9227845 #>  [618,] 0.5255145 0.5255565 0.5790212 #>  [619,] 1.8230185 1.8405052 1.8770438 #>  [620,] 1.1979172 1.2095856 1.2317905 #>  [621,] 0.9563530 0.9681916 0.9685038 #>  [622,] 0.8678765 0.9031098 0.9241020 #>  [623,] 0.6346027 0.7299605 0.7397143 #>  [624,] 0.9098889 0.9100607 0.9267201 #>  [625,] 0.9782613 1.0094718 1.0221434 #>  [626,] 0.9728621 0.9751020 0.9792484 #>  [627,] 0.7675965 0.7750511 0.7854716 #>  [628,] 0.8559376 0.9459796 0.9563030 #>  [629,] 1.6006762 1.6654096 1.6939038 #>  [630,] 0.6563291 0.7114117 0.8045930 #>  [631,] 0.6303851 0.6435954 0.6471911 #>  [632,] 0.8066990 0.8095410 0.8237339 #>  [633,] 1.3891879 1.4962024 1.5006125 #>  [634,] 0.7358804 0.7371566 0.7582706 #>  [635,] 0.6936756 0.6944819 0.6955791 #>  [636,] 0.4877309 0.4950259 0.5048579 #>  [637,] 0.6669019 0.6728436 0.7230440 #>  [638,] 1.0987865 1.1697481 1.1792622 #>  [639,] 0.6751534 0.6861963 0.6878755 #>  [640,] 1.0164836 1.0200735 1.0652147 #>  [641,] 0.4873079 0.4877309 0.5199294 #>  [642,] 1.1144746 1.1162529 1.1232110 #>  [643,] 0.6663310 0.6894606 0.7025278 #>  [644,] 0.9445534 0.9942883 1.0146450 #>  [645,] 1.1620623 1.2317905 1.2850490 #>  [646,] 0.8499187 0.9255566 0.9484384 #>  [647,] 2.1268440 2.1298514 2.2261668 #>  [648,] 0.7842931 0.8168187 0.8313719 #>  [649,] 0.9153131 0.9430354 0.9518168 #>  [650,] 0.6895849 0.6925414 0.7845469 #>  [651,] 0.8338196 0.8344514 0.8430541 #>  [652,] 0.6073724 0.6083881 0.6373880 #>  [653,] 0.8974325 0.9707910 1.0639261 #>  [654,] 0.6732760 0.7085715 0.7288623 #>  [655,] 0.6238583 0.6392257 0.6525004 #>  [656,] 1.9255805 1.9764222 1.9977782 #>  [657,] 0.7084756 0.7397902 0.7407469 #>  [658,] 0.7116193 0.7174742 0.8637432 #>  [659,] 1.3207007 1.3354938 1.3481226 #>  [660,] 0.7776864 0.7879706 0.8033435 #>  [661,] 0.5488322 0.5498867 0.5584080 #>  [662,] 0.8069091 0.8282145 0.9466194 #>  [663,] 0.8727318 0.9072632 0.9145405 #>  [664,] 0.7336282 0.7526839 0.7699880 #>  [665,] 1.8748532 1.9839778 2.0369310 #>  [666,] 1.7728759 1.8166392 1.8226993 #>  [667,] 0.6113438 0.6490860 0.6651802 #>  [668,] 1.1834109 1.3015450 1.3227732 #>  [669,] 0.7487361 0.8126464 0.8436556 #>  [670,] 0.6274410 0.6313302 0.6691137 #>  [671,] 0.9965373 1.0373411 1.0613230 #>  [672,] 0.8977770 0.8985597 0.9071667 #>  [673,] 0.6916397 0.7042355 0.7159718 #>  [674,] 0.9076684 0.9212094 0.9693076 #>  [675,] 1.3176082 1.3285560 1.3436729 #>  [676,] 1.1848830 1.2017079 1.2161931 #>  [677,] 0.6893625 0.7005656 0.7288527 #>  [678,] 1.2957955 1.3383302 1.3428888 #>  [679,] 0.7215987 0.7299605 0.7474796 #>  [680,] 1.3258192 1.3394276 1.3558816 #>  [681,] 1.2273501 1.2367561 1.2373662 #>  [682,] 0.9860714 1.0730128 1.1059249 #>  [683,] 1.2464573 1.3977077 1.4809606 #>  [684,] 0.6731501 0.6826138 0.6942837 #>  [685,] 0.7599894 0.7946153 0.8485032 #>  [686,] 0.6146972 0.6270969 0.6669019 #>  [687,] 1.1232144 1.1394327 1.1747459 #>  [688,] 0.7398998 0.7882569 0.7957353 #>  [689,] 1.3808420 1.4320687 1.4831381 #>  [690,] 0.4993928 0.5379800 0.5612784 #>  [691,] 0.5835169 0.7219158 0.7291555 #>  [692,] 0.6624003 0.6918395 0.7022401 #>  [693,] 0.5517119 0.5549555 0.5713607 #>  [694,] 0.9792484 1.0686900 1.0929574 #>  [695,] 1.0008873 1.0347581 1.0476229 #>  [696,] 0.6309598 0.6375568 0.6432169 #>  [697,] 0.7470749 0.7748944 0.7911501 #>  [698,] 0.8118967 0.8572417 0.8578211 #>  [699,] 0.9491550 0.9575634 0.9717111 #>  [700,] 0.9809906 0.9843450 1.0302807 #>  [701,] 0.5876793 0.5964750 0.6027861 #>  [702,] 0.6030477 0.6065467 0.6100962 #>  [703,] 0.8201226 0.8974278 0.9048950 #>  [704,] 0.5973763 0.6010464 0.6221293 #>  [705,] 1.6896972 1.7333506 1.7968269 #>  [706,] 1.6476157 1.6888696 1.6956957 #>  [707,] 0.6151400 0.6795651 0.7272303 #>  [708,] 0.4856988 0.5195418 0.5916418 #>  [709,] 0.6699054 0.6844002 0.6871469 #>  [710,] 1.1573095 1.1615694 1.1923514 #>  [711,] 0.6681860 0.6756743 0.7117213 #>  [712,] 1.2235118 1.3435602 1.3488864 #>  [713,] 0.9331682 0.9426020 0.9609666 #>  [714,] 0.6308744 0.6361442 0.6566848 #>  [715,] 0.6680478 0.6746278 0.6898931 #>  [716,] 0.8904091 0.9658846 0.9899954 #>  [717,] 0.6879002 0.7081354 0.7545394 #>  [718,] 0.6979193 0.7032547 0.7280906 #>  [719,] 0.9122217 0.9861428 1.0666545 #>  [720,] 0.5142627 0.5255145 0.5306463 #>  [721,] 0.7252673 0.7346327 0.7372291 #>  [722,] 0.8202429 0.8449212 0.8526367 #>  [723,] 0.8361915 0.8646630 0.8983690 #>  [724,] 0.7524836 0.8214975 0.8660564 #>  [725,] 0.6993927 0.7265696 0.7384092 #>  [726,] 0.9834846 0.9957575 1.0565096 #>  [727,] 0.6019851 0.6215611 0.6443228 #>  [728,] 0.6732649 0.6897068 0.7027155 #>  [729,] 0.8145484 0.8395698 0.8692704 #>  [730,] 0.7960620 0.8157095 0.8567764 #>  [731,] 1.1845081 1.2075733 1.2570001 #>  [732,] 0.7669144 0.7729525 0.7736387 #>  [733,] 0.8756039 0.8806378 0.9560957 #>  [734,] 0.6858805 0.6885965 0.6986326 #>  [735,] 1.1610768 1.1830858 1.2019735 #>  [736,] 0.7019351 0.7081354 0.7593299 #>  [737,] 0.9252548 0.9762581 1.0347079 #>  [738,] 0.7684800 0.7777152 0.7974465 #>  [739,] 0.6684937 0.6756897 0.6922567 #>  [740,] 0.8452776 0.8573676 0.8678183 #>  [741,] 0.6101897 0.6197037 0.6308292 #>  [742,] 0.7368597 0.7668243 0.7860680 #>  [743,] 1.5812839 1.5880560 1.5920455 #>  [744,] 0.9270140 0.9502228 1.0317402 #>  [745,] 0.9408431 0.9459247 1.0569429 #>  [746,] 1.1591349 1.2031207 1.2371920 #>  [747,] 0.6376675 0.6413042 0.6505893 #>  [748,] 0.8134993 0.8406186 0.8681015 #>  [749,] 0.9098287 0.9562284 0.9735381 #>  [750,] 0.6307715 0.6450464 0.6483932 #>  [751,] 0.5913746 0.5941672 0.6313232 #>  [752,] 0.7856537 0.7867156 0.8009135 #>  [753,] 0.7513120 0.7666058 0.7762748 #>  [754,] 0.6835155 0.6871826 0.7182501 #>  [755,] 0.7802737 0.7940940 0.8072487 #>  [756,] 1.0761243 1.1395628 1.1693025 #>  [757,] 1.7716789 1.7821399 1.8064867 #>  [758,] 1.0266813 1.0794480 1.0800108 #>  [759,] 0.7589933 0.7862352 0.7876736 #>  [760,] 0.6788000 0.7116037 0.7740322 #>  [761,] 0.7292886 0.7405964 0.7583889 #>  [762,] 1.3193242 1.3358821 1.3798242 #>  [763,] 0.9103102 0.9171977 0.9339476 #>  [764,] 0.5584804 0.5895822 0.5990645 #>  [765,] 0.7759052 0.7799036 0.7804236 #>  [766,] 0.6375568 0.6712677 0.7306912 #>  [767,] 0.9578488 0.9752916 1.0073106 #>  [768,] 1.3695081 1.3731623 1.4229423 #>  [769,] 1.2648835 1.3359841 1.3656926 #>  [770,] 0.5950503 0.6083474 0.6231951 #>  [771,] 0.6873963 0.6903051 0.7069673 #>  [772,] 1.0101643 1.0217014 1.0461687 #>  [773,] 0.6663310 0.6778389 0.7153060 #>  [774,] 0.6411611 0.6426980 0.6533055 #>  [775,] 1.2710302 1.2934064 1.3184550 #>  [776,] 0.7377428 0.7425023 0.7682670 #>  [777,] 0.7728951 0.8016879 0.8137259 #>  [778,] 0.7441279 0.7486385 0.7504243 #>  [779,] 0.5255565 0.5620121 0.5628167 #>  [780,] 0.8142865 0.8270278 0.8812412 #>  [781,] 1.0048685 1.0051943 1.0059715 #>  [782,] 0.9345732 0.9355013 0.9428723 #>  [783,] 0.5790212 0.6220507 0.6292105 #>  [784,] 0.7707201 0.7788283 0.8007401 #>  [785,] 0.9024453 0.9367795 0.9458530 #>  [786,] 0.6443180 0.6565538 0.6669758 #>  [787,] 1.0378719 1.0651434 1.1149690 #>  [788,] 0.6740109 0.6792038 0.6922579 #>  [789,] 1.1527113 1.1716164 1.1914989 #>  [790,] 0.6202613 0.6467848 0.6875823 #>  [791,] 0.7055993 0.7065491 0.7224866 #>  [792,] 0.9939603 0.9980792 1.0293396 #>  [793,] 0.6563155 0.6624003 0.6671060 #>  [794,] 0.8357378 0.8381376 0.8442522 #>  [795,] 0.6613804 0.6731501 0.6891179 #>  [796,] 1.3452466 1.3666160 1.3793040 #>  [797,] 0.8440829 0.9036787 0.9729601 #>  [798,] 1.3030815 1.3430183 1.4164737 #>  [799,] 0.5281111 0.5570741 0.5618176 #>  [800,] 0.8832021 0.8930343 0.9542046 #>  [801,] 0.7144482 0.7619296 0.7754437 #>  [802,] 1.1800110 1.1806315 1.2036518 #>  [803,] 0.9918165 1.0164030 1.0469583 #>  [804,] 0.7105517 0.7160750 0.7219760 #>  [805,] 0.8561909 0.8637432 0.9188877 #>  [806,] 1.0649214 1.0674772 1.0691898 #>  [807,] 0.6574349 0.6636486 0.6891970 #>  [808,] 0.6947118 0.7181062 0.7273966 #>  [809,] 0.6187785 0.6471857 0.6593597 #>  [810,] 0.7748944 0.8467078 0.8574250 #>  [811,] 0.8652024 0.8787107 0.9785736 #>  [812,] 0.8203804 0.9456437 0.9475005 #>  [813,] 0.9113414 0.9322911 0.9674622 #>  [814,] 0.5061003 0.5422367 0.5466152 #>  [815,] 0.9851159 0.9927875 0.9975644 #>  [816,] 0.6623890 0.6768821 0.6794389 #>  [817,] 0.6602995 0.6723447 0.6960416 #>  [818,] 1.1800491 1.2111610 1.2734991 #>  [819,] 0.8915345 0.9122565 0.9255466 #>  [820,] 0.8304257 0.8395527 0.9174342 #>  [821,] 1.1138766 1.1168845 1.1270536 #>  [822,] 0.6211888 0.6348840 0.6570579 #>  [823,] 0.5955280 0.7137306 0.7587246 #>  [824,] 1.0498509 1.0578762 1.0583134 #>  [825,] 0.6871826 0.6904323 0.6922020 #>  [826,] 0.4966354 0.4991595 0.5110546 #>  [827,] 0.7533099 0.7893116 0.8268468 #>  [828,] 0.6467186 0.6746888 0.6923579 #>  [829,] 0.7164892 0.7232794 0.7533515 #>  [830,] 0.7776864 0.7785975 0.7939624 #>  [831,] 0.7686240 0.7984856 0.8020734 #>  [832,] 0.7953128 0.8127969 0.8731880 #>  [833,] 1.2490233 1.3011226 1.4011109 #>  [834,] 1.0601015 1.1131425 1.1491622 #>  [835,] 0.8428925 0.9513904 0.9573118 #>  [836,] 0.6426489 0.6566393 0.6655568 #>  [837,] 0.6738679 0.6987565 0.7037876 #>  [838,] 0.7490708 0.7981197 0.8056896 #>  [839,] 0.8711019 0.8994216 0.9042188 #>  [840,] 0.5926717 0.5978070 0.6353546 #>  [841,] 0.8998563 0.9497637 0.9650785 #>  [842,] 1.0484261 1.0703024 1.2122652 #>  [843,] 1.4163332 1.4200381 1.4528447 #>  [844,] 1.2268415 1.2414976 1.2765179 #>  [845,] 0.6832730 0.6955658 0.7026527 #>  [846,] 0.8887236 0.9221448 0.9297085 #>  [847,] 0.4753383 0.4810174 0.4835243 #>  [848,] 0.9142808 0.9147983 0.9171428 #>  [849,] 1.0036584 1.0052086 1.0355480 #>  [850,] 0.5614835 0.5711195 0.6564586 #>  [851,] 1.6661781 1.6969894 1.7030036 #>  [852,] 0.8168341 0.8284561 0.8307326 #>  [853,] 0.6601173 0.6608001 0.6684937 #>  [854,] 0.6486138 0.6551967 0.6681860 #>  [855,] 0.6138926 0.6223265 0.6344628 #>  [856,] 0.7769851 0.7786130 0.7834470 #>  [857,] 0.6864370 0.6927204 0.7139085 #>  [858,] 1.0568555 1.0719599 1.1229902 #>  [859,] 0.6112564 0.7279746 0.7294684 #>  [860,] 0.6265487 0.6285262 0.6364283 #>  [861,] 1.2111610 1.2275521 1.2474183 #>  [862,] 0.6324682 0.6373880 0.6520730 #>  [863,] 0.6391319 0.6737283 0.6770419 #>  [864,] 1.6023483 1.6570091 1.6677551 #>  [865,] 1.4163735 1.4802700 1.4892336 #>  [866,] 0.5625967 0.5876105 0.6226472 #>  [867,] 0.6407208 0.7032690 0.7559448 #>  [868,] 0.6667857 0.6963949 0.6989417 #>  [869,] 0.6950469 0.7108557 0.7405781 #>  [870,] 0.6893279 0.7165318 0.7406254 #>  [871,] 0.8752086 0.9123096 0.9246563 #>  [872,] 1.4578910 1.4583682 1.4770672 #>  [873,] 0.8328629 0.8723170 0.8872531 #>  [874,] 0.4699783 0.4808933 0.5598451 #>  [875,] 1.0032747 1.0719340 1.0907543 #>  [876,] 0.6448378 0.6486994 0.6809517 #>  [877,] 0.6396351 0.6842886 0.6853755 #>  [878,] 0.6237321 0.6318489 0.6566461 #>  [879,] 0.9501720 0.9552900 0.9623112 #>  [880,] 0.8522810 0.8565377 0.8673705 #>  [881,] 0.8133001 0.8297257 1.0224619 #>  [882,] 0.6367533 0.6453442 0.6693684 #>  [883,] 1.0255194 1.0407552 1.0565042 #>  [884,] 0.9771703 1.0253986 1.0386725 #>  [885,] 0.7977414 0.8321415 0.8383061 #>  [886,] 0.7116780 0.7142818 0.7359876 #>  [887,] 0.8782568 0.8881701 0.9119187 #>  [888,] 0.7635810 0.7903238 0.7921704 #>  [889,] 0.7429628 0.7457160 0.7683396 #>  [890,] 0.5999032 0.6115695 0.6366187 #>  [891,] 0.6716809 0.7229573 0.7430178 #>  [892,] 1.0762477 1.0881044 1.1068912 #>  [893,] 0.9475533 0.9727051 0.9885702 #>  [894,] 1.0755523 1.0823449 1.1074235 #>  [895,] 0.7279188 0.7289870 0.7313563 #>  [896,] 0.6726538 0.7013520 0.7169060 #>  [897,] 0.6453565 0.7139216 0.7510039 #>  [898,] 1.2619073 1.2675795 1.2769936 #>  [899,] 0.8016593 0.8648237 0.8673705 #>  [900,] 0.6490617 0.6515039 0.6608807 #>  [901,] 0.5734995 0.5786583 0.5949234 #>  [902,] 0.9881925 0.9950551 1.1367108 #>  [903,] 0.8061903 0.8435364 0.8446566 #>  [904,] 1.0790447 1.1016083 1.1419747 #>  [905,] 0.6571526 0.7274239 0.7558442 #>  [906,] 1.8174448 1.8900225 1.8929027 #>  [907,] 1.1969669 1.2977875 1.3232133 #>  [908,] 0.8143408 0.8205560 0.8280257 #>  [909,] 0.5564521 0.6015952 0.6070608 #>  [910,] 1.0155976 1.0261451 1.0475595 #>  [911,] 0.6417677 0.6613804 0.6728076 #>  [912,] 1.1824521 1.1842497 1.2155137 #>  [913,] 1.0638309 1.0673601 1.0942580 #>  [914,] 0.7874002 0.8159161 0.8169891 #>  [915,] 1.3365391 1.3453056 1.3618624 #>  [916,] 0.7234958 0.7731331 0.8201789 #>  [917,] 0.6673185 0.6872136 0.7191611 #>  [918,] 0.8539832 0.9270490 0.9271492 #>  [919,] 1.1401190 1.2028107 1.2152314 #>  [920,] 0.9306644 0.9659702 0.9843739 #>  [921,] 0.7676589 0.7700038 0.8090152 #>  [922,] 0.8191192 0.8356145 0.8568672 #>  [923,] 0.9501547 0.9534876 0.9915576 #>  [924,] 0.5683972 0.5772207 0.5995440 #>  [925,] 0.8445445 0.8506690 0.8723170 #>  [926,] 0.6644866 0.6702855 0.6943452 #>  [927,] 0.8303137 0.8313922 0.8571546 #>  [928,] 0.9440980 0.9540321 0.9554515 #>  [929,] 1.0285618 1.0461687 1.0555033 #>  [930,] 0.6800834 0.6824915 0.7135039 #>  [931,] 1.0087596 1.0238514 1.0594525 #>  [932,] 0.6471911 0.6788550 0.6808746 #>  [933,] 1.5650032 1.5708298 1.5728826 #>  [934,] 0.6748942 0.6806146 0.6944819 #>  [935,] 0.6766853 0.6808966 0.6893937 #>  [936,] 0.6851235 0.6917219 0.7120598 #>  [937,] 1.0973231 1.1277311 1.1989834 #>  [938,] 0.9423955 0.9749614 0.9772198 #>  [939,] 0.5241246 0.5292047 0.5413553 #>  [940,] 0.6499742 0.6660072 0.6728076 #>  [941,] 0.6285037 0.6345182 0.6965337 #>  [942,] 0.5797207 0.5907571 0.6153566 #>  [943,] 0.9659400 0.9860714 1.0116575 #>  [944,] 0.5980938 0.6148939 0.6525344 #>  [945,] 0.8008392 0.8100044 0.8181654 #>  [946,] 0.6278653 0.6568074 0.6598246 #>  [947,] 0.8041155 0.8501530 0.8592448 #>  [948,] 0.8360947 0.8598487 0.8843708 #>  [949,] 1.0333642 1.0451430 1.0613800 #>  [950,] 0.5972669 0.6060020 0.6073647 #>  [951,] 0.8565127 0.8781655 0.8935626 #>  [952,] 0.5534408 0.6196022 0.7103015 #>  [953,] 0.9711019 0.9832292 0.9971279 #>  [954,] 0.6721965 0.6988704 0.7011845 #>  [955,] 1.1711173 1.1806315 1.1929786 #>  [956,] 0.9283836 0.9427301 0.9523940 #>  [957,] 0.5389952 0.5744590 0.5867213 #>  [958,] 0.7167455 0.7221702 0.7324981 #>  [959,] 1.7036430 1.7373106 1.7493559 #>  [960,] 0.9445480 1.0425375 1.0691898 #>  [961,] 1.1572591 1.1864229 1.2587043 #>  [962,] 0.9580713 0.9655681 0.9857375 #>  [963,] 1.0152634 1.0938258 1.1049358 #>  [964,] 0.6884299 0.6910187 0.7221789 #>  [965,] 0.7984554 0.8689290 0.8914123 #>  [966,] 0.8682241 0.8956803 0.9047013 #>  [967,] 0.8288244 0.8521816 0.8546077 #>  [968,] 1.7294127 1.7852821 1.8088838 #>  [969,] 1.0987206 1.1664261 1.1743363 #>  [970,] 1.1792622 1.1935430 1.2072617 #>  [971,] 0.9075436 0.9237505 0.9440712 #>  [972,] 0.6399047 0.6448055 0.6492129 #>  [973,] 0.7544302 0.7659372 0.7852115 #>  [974,] 1.0289258 1.0559064 1.0845825 #>  [975,] 0.7863454 0.7900198 0.8203958 #>  [976,] 0.6499742 0.6724805 0.7044865 #>  [977,] 0.7218856 0.7326800 0.7474796 #>  [978,] 0.7016802 0.7529936 0.7869967 #>  [979,] 1.3407632 1.3627977 1.3977031 #>  [980,] 0.9569316 0.9693567 1.0013603 #>  [981,] 1.4747614 1.5010097 1.5350157 #>  [982,] 1.2490680 1.2632721 1.3562377 #>  [983,] 0.8667383 0.8893668 0.8943507 #>  [984,] 0.9795242 0.9830783 1.0106272 #>  [985,] 0.7262799 0.7473767 0.7587196 #>  [986,] 0.7021955 0.7061400 0.7900433 #>  [987,] 0.5913746 0.6083881 0.6222117 #>  [988,] 0.6630005 0.6647008 0.6974353 #>  [989,] 0.5766040 0.7027155 0.7749031 #>  [990,] 0.5253350 0.5455615 0.5571458 #>  [991,] 0.8832783 0.8950708 0.8982055 #>  [992,] 0.8497099 0.8701832 0.8708907 #>  [993,] 0.8191021 0.9252142 0.9930309 #>  [994,] 0.9136104 0.9892838 1.0029848 #>  [995,] 0.9913798 0.9942286 1.0184711 #>  [996,] 1.0039180 1.0666545 1.1694326 #>  [997,] 0.7915871 0.7916758 0.8983690 #>  [998,] 0.6891970 0.7454463 0.7543404 #>  [999,] 0.9167021 0.9168488 0.9207296 #> [1000,] 0.7020710 0.7042679 0.7080646 #>   # Find the 10 approximate nearest neighbors (see RANN::nn2) tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\",     eps = 0.3 ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  984  110  759  320  371  904  899  240  291   505 #>    [2,]  422  263  704  954  886  528  585  854  713   946 #>    [3,]  467  676  185  498  317  873  340  925  710   680 #>    [4,]   85  541  934  137   50  601  388  572  860    73 #>    [5,]  870  459  386  584  602  585  187  373  905   298 #>    [6,]  403  223  917  782  753  226  367  607  177   730 #>    [7,]   10  777   40  988   73  465   63  270  840   903 #>    [8,]  749  692  143  931  404  231  995  591  742   733 #>    [9,]  165  303  119  812  533  691  609  470  313   229 #>   [10,]   40  903  270  840    7  988  777  358  465   544 #>   [11,]  786  564  516  115  117   46  930  965  836   558 #>   [12,]  413  936  431  942  495  369  321   61  822   932 #>   [13,]  546   23  240  410  734  850  560  764  478    78 #>   [14,]  326  615  366  206  831  157  501   35   18   442 #>   [15,]  516  528  243   46  178   94   11  887  117   172 #>   [16,]  164  832  852  997  999  133  723  328  780   920 #>   [17,]   91  906  968  762  121  757  980   53  697    23 #>   [18,]   54  474  831  417  326   14  287  914   44   206 #>   [19,]  301  834   74  371  569  197  780  674  289   394 #>   [20,]  702   39  439  100  219  882  888  592  544   814 #>   [21,]  282  129  329  853  686  448  144  452  136   184 #>   [22,]  334  636  526  124  814  207  316  503  318   456 #>   [23,]   13  121  697  197  734  850  546  410  478   240 #>   [24,]  756  227  881  737  447  430  284  664  160   710 #>   [25,]  950  156  690  510  355  300  896  603  162   470 #>   [26,]  148  535  252  722  365  582  844  152  885   839 #>   [27,]  973  517  283  575  790  753  448  829  442   560 #>   [28,]  701  370   59  648  880  341  876  855  536   257 #>   [29,]  497  474  616   35  366  740  107  838  597   980 #>   [30,]  104  920  922  908  274  427  101  164  577   801 #>   [31,]  573  451  751  183   93  783  654  398  901   890 #>   [32,]   58  746  118  899  664  803  291  771  929   611 #>   [33,]  218   68  460  137    4  686  658  985   85   934 #>   [34,]  914  850  452  448  697  790   27  831  517   560 #>   [35,]   72   82  157  513  289  294  673  838  150   276 #>   [36,]  446  280  302  181 1000  268  673  773  600   111 #>   [37,]  671  419  861  463  171  189  444  307  122   649 #>   [38,]  457  232  682  963  464  698  849  965  353   930 #>   [39,]  592  702   20  888  219  439  544  747  924   360 #>   [40,]   10  903  270  840  827    7  188  544  358   747 #>   [41,]  859  331  650  985  938  391  387  977  755   514 #>   [42,]  202  657  889  134  435  760  407  131   55   716 #>   [43,]  733  153   70  252  931  995  437  620  675     8 #>   [44,]  501  326  166  846  150  324  952  674  417   367 #>   [45,]  100  810  216  219   20  888  377  824  136   272 #>   [46,]  528  661  516  117   15  116  243  466  564    11 #>   [47,]  393  307  253  419  672  649  671  953  445   324 #>   [48,]   87  376  443  426  806  476  504  204  389   729 #>   [49,]  461  782  730  522  223  122  145  233  444   192 #>   [50,]  601   85    4  688  805  388  541  570  353    33 #>   [51,]  863  473  754  238  825  512  604  210  383   868 #>   [52,]  724  241  807  828  275  830  534  321  868   773 #>   [53,]  349  219  329  436  697  970  132  242   73   121 #>   [54,]  474   18  497  287   29   14  326  968  767    35 #>   [55,]  428  435  766  125  401  108  198  793  845   940 #>   [56,]  726  789  752  614  887  333   11  634  983   951 #>   [57,]  823  194  750   80  952  604  442  308  210   150 #>   [58,]  899  332  881  611   32  664  320  291  746   961 #>   [59,]  958  217  382  478  536  394   28  764  701   771 #>   [60,]  644  729  412  443  943  518  965  115  415   663 #>   [61,]  126  936  369  431  483   12  942  309  480   319 #>   [62,]  458  124  167   63  988   22  527  732  840   566 #>   [63,]  167  458   62  988  882  205  966  814  566   840 #>   [64,]  668  884  910  135  506  943  576  415  609   812 #>   [65,]  871  147   92  350  800  127  245  155  363   461 #>   [66,]  768  651  875  980  810  785  824  272  499   948 #>   [67,]  550  532  845  480  125  143  595  828  931   198 #>   [68,]  218  658   33  617  650  460  985  805  686   196 #>   [69,]  840  124  641  270  456  587  964  199  544   526 #>   [70,]  733  252  153  795  113  318  479  231  152   327 #>   [71,]  221  815  628  476  625  811  699  947  736   672 #>   [72,]   82   35  513  157  294  673  276  150  289   838 #>   [73,]  436  934  388    4   85  777  541  137  144    77 #>   [74,]  301   19  569  834  289  780  371  491  394   589 #>   [75,]  648  370  188  718  664   28  737  227  385   447 #>   [76,]  921  856  820  869  297  481  626  667  992   543 #>   [77,]  144  184   78  492  747   89  799  727  207   924 #>   [78,]  492   77   84  829  144  560  799  747  349   546 #>   [79,]  162  809  603  954  987  355   25  426  523   690 #>   [80,]  462   57  604  183  750  823  308  654  194   776 #>   [81,]  927  485  345  459  719  445  996  230  593   596 #>   [82,]   72  673  157  513  150   35  276  294  101   838 #>   [83,]  158  523  162  236  239  989  160  949  470   355 #>   [84,]  560  799   90  244  618  790  709   78  546    89 #>   [85,]    4  601  541   50  934  388  137   73  635    33 #>   [86,]  579  266  163  667  468  854  247  696  869   585 #>   [87,]   48  476  858  443  204  518  372  409  818   925 #>   [88,]  683  581  781  175  538  502  662  107  531   151 #>   [89,]  618  295   90  727  201  720  503  799  244   779 #>   [90,]  618  244  727   84   89  720  799  295  560   909 #>   [91,]   17  970   53  757  762  219  638  121  697    45 #>   [92,]  147  350  238   65  387  894  342  155  444   122 #>   [93,]  161  398   31  573   97  556  554  451  801   890 #>   [94,]  180  178  176   15  926  359  422  528  173   975 #>   [95,]  643  773  714  817  302  276  101  280  673    82 #>   [96,]  640  695  421  434  953  234  956  908  716   872 #>   [97,]  161  398  556  257  330   93  339  855  529   878 #>   [98,]  608  520  755  631  475  578  558  423  977   369 #>   [99,]  433  838  294  289  513  491  920  922   74   497 #>  [100,]   45   20  888  882  219  439  200   39  702   885 #>  [101,]  643   95  908  922  276  838   82  562  104   179 #>  [102,]  475  524  553  201  347  636  423  826  173   847 #>  [103,]  635  930  786  572  570  601  860  679  541     4 #>  [104,]  922   30  920  908  427  101  274  164  801   491 #>  [105,]  381  163  266  247  380  418  304   86  521   962 #>  [106,]  994  514  985  424  679  314  586  363  642   983 #>  [107,]  616  662  581  538  268   29  895  683  502   739 #>  [108,]  339  428  766  468  579  667  401   55  845   319 #>  [109,]  666  170  175  249  997  781   16  999  277   582 #>  [110,]  984    1  775  341  371   19  212  240  899   322 #>  [111,]  741  639  181  957  280  924  944  503  302   822 #>  [112,]  969  414  346  298  521  125  140  595  397   657 #>  [113,]  318  795  684  941  900  334  976  375  293   231 #>  [114,]  171  189  159  463  660  998  210  868  823   147 #>  [115,]  965  516  537   11  778  930  243  117  572   172 #>  [116,]  847  661  117  172  466  939  528   46  475   704 #>  [117,]  116  172  661  564   46  528  516  243  939   466 #>  [118,]  929  803   32  235  798  772  813  763  296   131 #>  [119,]    9  165  563  351  263  440  609  812  482   229 #>  [120,]  685  554  308  562  935  654  451  166  150    80 #>  [121,]  829   23  697  349  410   13  913  417   78   971 #>  [122,]  444  671  991  730  442  823  194  367  461   147 #>  [123,]  396  495  944  264  473  490  696  862  413   344 #>  [124,]  456   69  641   22   62  334  840  636  458   142 #>  [125,]  845  579  435  532  468   55  480  657  667   738 #>  [126,]   61  480  369  431  936  667  488  319  471   344 #>  [127,]  154  703  245  871  350  155  363  195  897   214 #>  [128,]  449  708  693  511  603  548  279  690  987   156 #>  [129,]   21  448  282  897  972  600  686  184  144   924 #>  [130,]  512  825  770  752  564  361  238  342  836   466 #>  [131,]  772  813  763  982  760   42  202  889  211   484 #>  [132,]  590  388  913  688  436  551   53  857  349    73 #>  [133,]  278  400  958  878  362  997  164  832  723   378 #>  [134,]  657  407  435   42  380  521  889  125   55   760 #>  [135,]  884  777  509  465   64  668  229  576  943    10 #>  [136,]  272  282  853  450  686   21  810  702  637   452 #>  [137,]  934  553  572    4  541   85  860  972  144    33 #>  [138,]  653  215  505  640  689  685  611  815  628   717 #>  [139,]  153  402  327  620   43  273  309  744  338   743 #>  [140,]  346  738  532  112  761  125  580  841  134   595 #>  [141,]  331  897  972  453  248  822  288  859  600   770 #>  [142,]  630  942  636  316  990  791  456   22  124   319 #>  [143,]  931    8  936  828  995  431  692  976   67   742 #>  [144,]   77  184  492  282  329   78   21  448  924   129 #>  [145,]  871  971  127  154  245  525  745   49  461    65 #>  [146,]  267  855  257  878   97  251  211  598  330   813 #>  [147,]   92  350   65  122  238  444  114  210  171   998 #>  [148,]   26  844  535  819  722  365  312  839  582   885 #>  [149,]  633  237  785  745  406  767  617  875  865   245 #>  [150,]  501  673   82  157  952   57   72   44  120   790 #>  [151,]  277  502  948  781  581  591  499  170  768   213 #>  [152,]  365  203  732  566  379  200  966  458  839   205 #>  [153,]   70  252  848  733  152   43  327  190  365   479 #>  [154,]  214  127  860  725  669  973  857  288  570   986 #>  [155,]  951  836  220  800  350  342  333  195  127   363 #>  [156,]  690   25  563  511  950  510  603  128  300   449 #>  [157,]  673   82   72   35  150  513  615  366   57    36 #>  [158,]  523  236  989   83  162  774  259  355  160   627 #>  [159,]  114  463  189  336  660  171  157  513  956    72 #>  [160,]  447  912  523  411  315  627  158  540  989   774 #>  [161,]   93   97  398  257  335  425  771  556  890   855 #>  [162,]   79  523  355  158  236   25  886  808  809    83 #>  [163,]  266  105   86  247  380  381  808  521  259   921 #>  [164,]   16  832  133  852  920  104   30  101  597   723 #>  [165,]    9  303  119  313  691  533  470  229  563   482 #>  [166,]  324   44  501  308  685  120  150  253  952   336 #>  [167,]  566   63  814   62   22  375  260  458  882   207 #>  [168,]  993  571  962  628  285  811  246  221  621   407 #>  [169,]  623  176  784  926  390  977  178  975  173   635 #>  [170,]  997  213  277  852  582  249  591  151  781   999 #>  [171,]  114  189  998  660  868  281  210  463  159   823 #>  [172,]  347  116  847  117  466  475  173  528  423   786 #>  [173,]  347  524  102  475  847  172  423  946  174   178 #>  [174,]  482  826  347  636  874  263  524  527  142   946 #>  [175,]  781  328  581  852   88  502  591  832   16   683 #>  [176,]  169  679  975  623  424  178   94  180  926   635 #>  [177,]  612  607  916  565  687  220  634  333  917   729 #>  [178,]  926  180   94  623  975  176  169  748  173    15 #>  [179,]  429  957  643  217  360  741  554  536  271   837 #>  [180,]  178   94  975  926  176  545  797  623   15   169 #>  [181,]  639  268  111   36  280 1000  446  302  741   600 #>  [182,]  712  378  197  508  382  638  780  834  757    19 #>  [183,]  451  783   31  901  909  751   80  462  654   554 #>  [184,]  924  144   77  503  282  207  814  702  129    21 #>  [185,]  677  409  925  896  759  467  625  613  891   279 #>  [186,]  208  577  940  477  198  395  404  793  231   852 #>  [187,]    5  228  870  602  937  713  386  593  596   459 #>  [188,]  322  341   75  827   40   28  385  701  734   648 #>  [189,]  660  171  114  868  463  998  210  159  807   823 #>  [190,]  299  744  848  479  626  153  820  416  792   981 #>  [191,]  695  336  463  159  419  253   96  872  421    37 #>  [192,]  367  326   44  730  223  461  952  501  122   782 #>  [193,]  540  510  315  300  718   25  765  758  470   896 #>  [194,]  750   57  823  952  308  442  324  463  604   367 #>  [195,]  514  558  770  703  331  387  586  786  363   248 #>  [196,]  835   68  391  620  918  650  327  406   41   637 #>  [197,]  382  478  569  341  734   23   13  394  780    19 #>  [198,]  477  577  742  186  940   55  208  923  428   928 #>  [199,]  655  290  310  670  641  270  544   69  840   587 #>  [200,]  882  885  900  439  375  377  100  941  637   312 #>  [201,]  874  826  636  102  295  503  316  264   89   526 #>  [202,]   42  889  254  657  134  760  435  716  131   407 #>  [203,]  152  379  966  377  200  821  312  535  885   365 #>  [204,]  818  858  372  649  230   87  177  967  687   729 #>  [205,]  260  966  458  566   62  390   63  167  732   327 #>  [206,]  245  767  615  366  517   14  871  831  745   442 #>  [207,]  814  503  544  526  184  924  270  641   22   295 #>  [208,]  793  940  976  911  186  395  692  577  231   428 #>  [209,]  974  106  735  994  907  975  805  424  679   601 #>  [210,]  823  863  868   57  998  604  807  446  189    36 #>  [211,]  395  878  940  813  146   97  598  911  793   760 #>  [212,]  622  322  827  385  224  340  794  970  110   864 #>  [213,]  684  900  591  439  170  200  610  885  948   832 #>  [214,]  486  154  288  537  283  575  860  986  669   916 #>  [215,]  611  505  717  291  653  320  759  265  935   332 #>  [216,]  242  377  821  824  875   45  460  853  100   637 #>  [217,]  536  360  957   59  271  179  425  478  701   764 #>  [218,]   33   68  460  658  686  617  650  985  853   972 #>  [219,]  888   39   20  702  100   53  734  592  747    45 #>  [220,]  333  836  951  155  965  634  486   11  214   177 #>  [221,]  628   71  699  811  625  993  815  571  476   736 #>  [222,]  938  269  392  391  406 1000  600  500  616   383 #>  [223,]    6  782  403  367  730  917  753  192  233   846 #>  [224,]  622  891  877  493  804  794  624  715  873   465 #>  [225,]  405  359  472  373  356  599  422  870  787    94 #>  [226,]  788  917  494  607  565  283  403  750  486   575 #>  [227,]  737  881  756   24  664  447   75  718  899   648 #>  [228,]  681  187  787  937  659  602  397  870    5   343 #>  [229,]  313  482  691  563  777  165  527    9  300   119 #>  [230,]  967  927   81  345  887  596  649  593  445   818 #>  [231,]  437  404  976  208  692    8  795  733  911   186 #>  [232,]  457   38  963  644  518  965   60  682  687   698 #>  [233,]  522  223  393  671  367  192   47  730  444   461 #>  [234,]  716  427  640  801  285  685  908  407  215   562 #>  [235,]  723  929  803  118  771  296  427  958   32   880 #>  [236,]  989  523  774  158  355  627  259  728  808   162 #>  [237,]  745  149  245  857  767  725   21  127  697   871 #>  [238,]  770  342  350   51  453  130  512  825  248   361 #>  [239,]   83  158  484  481  763  772  992  605  236   496 #>  [240,]  764  546   13  371  709  478  560  271  734   410 #>  [241,]   52  828  321  724  280  807  534  302  817   275 #>  [242,]  216  377  460  821  329  853  686  551  875    20 #>  [243,]  516  528   15  511  117   46  661  128  115   172 #>  [244,]   90  618   84  783  909  901   89  727  295   799 #>  [245,]  871  206  745  767  127  517  237  831  971   350 #>  [246,]  953  304  247  285  719  168  962  996  407   445 #>  [247,]  163  304   86  266  105  380  246  521  345   927 #>  [248,]  423  453  331  141  770  466  558  939  475   822 #>  [249,]  883  170  404  606  395  437  354  186  852   997 #>  [250,]  539  583  867  456  527  964  992  124  313   990 #>  [251,]  411  879  855  774  146  718  664  257  765   370 #>  [252,]   70  153  733  437  152  113   26  792  365   379 #>  [253,]  324  393  166   47  336  419  308  463  194   750 #>  [254,]  202  716   42  507  519  915  134  234  407   889 #>  [255,]  833  678  485  647  996  580  969  459   81   761 #>  [256,]  491  589  685  294  562  908  289  427  166   801 #>  [257,]  855  335  161   97  370  771  876  267  146   425 #>  [258,]  337  674  846  166  680  653  324  253   44   505 #>  [259,]  236  989  978  808  774  523  158  163  627   571 #>  [260,]  390  784  566  205  327  167  977   62  169   458 #>  [261,]   92  894  647  851  147  171  769  998  281   754 #>  [262,]  748  797  623  926  609  169  178  635  601   691 #>  [263,]  886  511    2  174  347  119  563  809  946   243 #>  [264,]  316  826  201  123  874  495  396  990  944   901 #>  [265,]  717  736  707  611  978  759  935  890  505   896 #>  [266,]  163   86  105  521  869  921  247  298  380   381 #>  [267,]  878  146  855  257  598  278  587  311  655   199 #>  [268,] 1000  181  739  639  450  600   36  616  895   446 #>  [269,]  392  938  222  107  383  769  391  538 1000   500 #>  [270,]  840  544   69  207  641   10  199  814  655    40 #>  [271,]  837  394  799  560  957  217  850  764  536   478 #>  [272,]  136  810  651  450  499  739  452  853  282   948 #>  [273,]  842  416  743  848  744  323  933  364  632   567 #>  [274,]  920  328   30  104  922  531  164  928   16   852 #>  [275,]  761  830  281  866   52  724  754  241  841   828 #>  [276,]  838  513  773   95   82   72  597  101  673   643 #>  [277,]  151  502  170  582  948  591  781  213  379   535 #>  [278,]  878  429  133  311  598  267  217  940  179   832 #>  [279,]  128  409  449  708  925  443  511  565  690   325 #>  [280,]  302   36  446  241  181  714  111  639   95   895 #>  [281,]  830  275  841  998  868  660  580  761   52   807 #>  [282,]   21  924  184  129  136  702  329  144  853   686 #>  [283,]  575  494   27  720  486  753  790  214  973   226 #>  [284,]  559  912   24  160  756  455  447  758  949   540 #>  [285,]  953  407  573  654   31  571  736  246  234   168 #>  [286,]  779  670  804  295  715  310  618  244   90   747 #>  [287,]  745  767   18  831   54  971  474  206  237   245 #>  [288,]  453  720  486  494  214  141  575  939  564   248 #>  [289,]  569  394  491   72   74   82   35  838  101   837 #>  [290,]  310  655  670  199  370  335  950  779  855   867 #>  [291,]  320  215  899  611  505  332  771  653  717   935 #>  [292,]  803  362  400  146  878  929  648  723  211   880 #>  [293,]  911  543  792  479  793  113  976  208  883   992 #>  [294,]   72   82  513   35  336  256  491  157  289   908 #>  [295,]  779   89  874  201  618  826  360  503  286   207 #>  [296,]  723  354  803  929  292  235  362  400  118   880 #>  [297,]  856   76  921  945  667  886  992  319  869    86 #>  [298,]  386  471  397  266  579  905  584  585  667    86 #>  [299,]  190  744  626  820  479  848  567   76  630   981 #>  [300,]  510  950  670  156   25  313  715  193  690   286 #>  [301,]  834   19   74  780  371  569  589  197  289   491 #>  [302,]  280  817   95   36  643  714  741  241  111   181 #>  [303,]  533    9  165  470  700  812  313  119  691   945 #>  [304,]  996  247  246  485  105  927   81  962  266   298 #>  [305,]  414  969  595  346  112   67  550  532  140   594 #>  [306,]  858  680    6  223  815  233  393  476  204   687 #>  [307,]  649  719  445   47  861  672   81  953  393   204 #>  [308,]  750  194  120   57  336  324   80  166  654   952 #>  [309,]  384   61  483  578  338  936  632  369  126   567 #>  [310,]  670  290  655  199  286  779  370  544  360   295 #>  [311,]  598  278  456  429  526  334  911  318  267   641 #>  [312,]  885  722  200  732  568  882  819  365  203   458 #>  [313,]  229  165  527  867  691  482  300  470    9   533 #>  [314,]  424  755  642  994  106  514  586  387  679   520 #>  [315,]  540  470  765  193  533  758  949  303  160    25 #>  [316,]  636  942  334  264  201  990  874  526  413   826 #>  [317,]  467  873  663  613  910  925  676  510  185   412 #>  [318,]  795  334  941  113  375   22  684  976  942   316 #>  [319,]  369  946  396  942  524  630  413  142  483   704 #>  [320,]  899  291  876  611  771  717  935  425  215   505 #>  [321,]  932  828  241  431  383  495  724   12  866    52 #>  [322,]  827  188  341  385  734  794   40  701  508   747 #>  [323,]  842  583  552  527  691  539  348  416  848   945 #>  [324,]  166  952  253  367  194  308  750  501  393    44 #>  [325,]  652  693  565  279  449  443  128  708  788   661 #>  [326,]   14   44  501   35   18  615  192  150  157    72 #>  [327,]  260  402  390  566  784  205  152   70  153   977 #>  [328,]  274  852  175  920   16  164  531  781   30   832 #>  [329,]   21  282  144  853  184  857   20  702  697   129 #>  [330,]  529  990  398   97  339  598  556  728  161   257 #>  [331,]  141  859  972  248  897  822  453  423  770    41 #>  [332,]  904  653   58  961  611  291  899  215    1   320 #>  [333,]  220  836  951  965  634   11  752  155  564   177 #>  [334,]   22  318  526  316  941  636  456  375  311   124 #>  [335,]  876  257  370  855  425  290  890  161  536   310 #>  [336,]  463  308  419  294  159  194  324  166  695   253 #>  [337,]  258  674   44  371  846  166   19  653  775   501 #>  [338,]  620  520  309  578  755  645   98  936  384    41 #>  [339,]  398  428  401  108  330  598  766   97  529   990 #>  [340,]  794  385  710  873  827  663  864  193  509   317 #>  [341,]  734  382  701  478  322  188   28  197  764   546 #>  [342,]  238  453  361  836  770  494  130  604  350   721 #>  [343,]  599  659  187  228  787    5  937  225  870   405 #>  [344,]  816  471  866  396  488  468  704  696  473   905 #>  [345,]  593  596  927  585  459   81  711  967  854   373 #>  [346,]  140  738  532  112  761  841  969  125  580   595 #>  [347,]  173  172  847  524  102  475  174  116  826   263 #>  [348,]  839  365  583  848  323  964  732  842  919   539 #>  [349,]  436  493  492   78  465  877   53  829   77    73 #>  [350,]  238  342  155  127  453  147   92  770  141   575 #>  [351,]  542  504  119  809  415  440  389  263  960   561 #>  [352,]  574  619  132  551  590  907  913  688  388   353 #>  [353,]  688  698  570   50  930  541  682  669  860   388 #>  [354,]  296  292  929  803  798  249  723  883  362   400 #>  [355,]  728  774  236  808  950   25  523  989  162   529 #>  [356,]  472  373  405  359  512  130  825  631  422   752 #>  [357,]  737  508  385   75  638  188  432  227  648   756 #>  [358,]  646  840  964  988   10   69  819   40  903   587 #>  [359,]  373  225  422  472  405  356  870   94  488   602 #>  [360,]  217  536  957  592  295  799  179  310  526   271 #>  [361,]  939  564  490  466  512  130  453  661  342   116 #>  [362,]  400  378  133  997  723  292  958  880  878   382 #>  [363,]  800  586  703  387  195  514  127  155  614   951 #>  [364,]  545  797  926  180  440  178   94  975  609   119 #>  [365,]  732  839  152  458  348  722  964  113  312   885 #>  [366,]  615   14  206  157  517  210  767  442   35   673 #>  [367,]  952  324  192  750  194  917  403  730  501   442 #>  [368,]  441  919  481  420  792  992  293  239  479   543 #>  [369,]  319   61  483  126  413  396  431  488  942   936 #>  [370,]  876  335  855  290  257   28  701  310  718   670 #>  [371,]  674  240   19  569  764   74  834  394    1   301 #>  [372,]  818  204  476   87  796  719  307   48  811   858 #>  [373,]  422  359  870  356  459  585  405    5  816   345 #>  [374,]  192  444  122  461   14  522   49  233  367   730 #>  [375,]  941  566  900  334  637  318   22  167  684   882 #>  [376,]   48  230  389  596  426  713  887  593  504   967 #>  [377,]  216  821  242  637  200  460  966  948  203   882 #>  [378,]  400  362  997  133  382  999  780  958  723   197 #>  [379,]  203  152  948  637  200  941  375   70  684   918 #>  [380,]  521  163  407  657  134  489  247  418  266    86 #>  [381,]  105  163  266  921  694  808  898  259  247   380 #>  [382,]  478  197   59  341  734  958  701  394   28   764 #>  [383,]  446  321   51  863  822  754  241   36  932  1000 #>  [384,]  632  483  309  567  791  520  369  946   98   488 #>  [385,]  322  188  827  794   75  508  357  340  638   710 #>  [386,]  584  298    5  397  602  905  870  471  585   459 #>  [387,]  586  195  363  770   41  514  238  894  614   331 #>  [388,]  590   85   73    4  132  688   50  541  436   857 #>  [389,]  504  542  351  426  415  960  806   60  561   809 #>  [390,]  784  260  977  566  169  167  327  173  205    62 #>  [391,]  650  406  500  658   41  938  835  902  617   222 #>  [392,]  269  222  938  500  391  406  107  650  616   769 #>  [393,]   47  253  324  367  750  672  403  419  947     6 #>  [394,]  569  271  837  478   59  289  764  217  382   780 #>  [395,]  211  940  208  911  186  278  793  577  311   976 #>  [396,]  123  704  319  344  524  413  847  495  369   264 #>  [397,]  937  386  298  681  414  969  602  584    5   266 #>  [398,]   93  161   97  339  556  330  529  573   31   901 #>  [399,]  731  628  571  221  625  699  746  978  611   689 #>  [400,]  362  378  133  723  958  292  997  880  878   382 #>  [401,]  766  428  339  495  429  714  108  793   55   643 #>  [402,]  327  205  260  966  152  390  566  784  153   735 #>  [403,]    6  917  753  226  846  367  223  952  607   788 #>  [404,]  231  437  186    8  591  692  208  852  577   931 #>  [405,]  225  359  356  373  472  459  422  599  870     5 #>  [406,]  391  785  650  450  686  918  218  853  739   617 #>  [407,]  134  380  889  285  657  573   42  716  521   556 #>  [408,]  999  499  740  597  980  651  780  810   29   838 #>  [409,]  925  279  443  677  185  708  613  690  128   325 #>  [410,]   13  546   78  709  560  240   84  753   23   846 #>  [411,]  251  879  774  765  447  718  664  160  989   236 #>  [412,]  778  715  663  873  943  804  563  115  279    60 #>  [413,]   12  524  942  396  475  369  316  495  102   431 #>  [414,]  969  112  397  937  298  681  305  386  346   418 #>  [415,]  960  561  351  910  542  119  504  389   60   506 #>  [416,]  552  744  567  848  273  626  632  323  945   842 #>  [417,]  831  914  846   44  973   18  501  971  753   410 #>  [418,]  521  489  380  266  869  921  657  105  163   481 #>  [419,]  463  194  336  308  695  750  189  253   47    37 #>  [420,]  441  792  883  368  479  293  606  477  231   208 #>  [421,]   96  640  695  953  246  138  285  234  168   253 #>  [422,]  373    2  359  870  585  704  528  593   46   596 #>  [423,]  475  553  248  102  847  466  172  558  524   173 #>  [424,]  994  679  755  176  314  520  514  985  106   169 #>  [425,]  536  935  335  764  876  161  890  217  701   257 #>  [426,]  809  954  504  542  351  443   79  603  389   243 #>  [427,]  801  908  234  716  104   30  922  562  101   554 #>  [428,]   55  793  401  339  108  766  940  208  976   543 #>  [429,]  179  278  598  339  311  401  957  217  878   360 #>  [430,]   24  756  881  227  737   32   58  447  664   803 #>  [431,]  936   61   12  495  126  321  480  932  828   369 #>  [432,]  638  508  188  357   40  888  358  970  646   322 #>  [433,]   99  497   74  920  491  274  256  589  104   294 #>  [434,]  956  547  893  802  872  928  922  908  660    96 #>  [435,]  657   55  134  125   42  521  760  845  428   889 #>  [436,]  349  492   73  493  877  725  388  590  465   144 #>  [437,]  231  404  733  252  113    8   70  795  692   976 #>  [438,]  981  557  979  299  309  744   43  190  659   139 #>  [439,]  900  882  592   39   20  814  702   69  526   200 #>  [440,]  119  945  351  886  263    9  542  713  165   364 #>  [441,]  368  420  792  481  131  919  479  883  543   484 #>  [442,]  952  823   57  575  517  194  750  494  615   283 #>  [443,]  729  279  325  409  925  426  128   60  612   243 #>  [444,]  122  671  991  147  461  522  730  233   49    92 #>  [445,]  649  719  672  307  652   81  711  967  927   751 #>  [446,]   36  280 1000  302  181  383  822  600  241   210 #>  [447,]  718  664  411  160  227  627  251  193  881    24 #>  [448,]  129   21  850  144   34  282  790  897   27   799 #>  [449,]  128  693  708  548  511  603  279  690  987   652 #>  [450,]  739  686  853  136  272  268  616  406  918   637 #>  [451,]  183  783   31  909  901  890  751  654  554    93 #>  [452,]  697   34   21  810  272  448  136  850  980   282 #>  [453,]  141  288  248  770  939  494  342  361  564   466 #>  [454,]  843  846  410  753  223  525  782  986    6   622 #>  [455,]  912  160  158   83  523  284  665  989  605   949 #>  [456,]  641  124  990   69  334  311  526   22  142   598 #>  [457,]   38  232  963  682  965  464  698  644  849   518 #>  [458,]  732   62   63  124  988  167  964  365  205   840 #>  [459,]  927    5  373  345  585   81  870  593  596   905 #>  [460,]  853  686   33  218  637  282  377   68  242   329 #>  [461,]   49  730  782  522  122  192  223  367  871   444 #>  [462,]   80  944  494  939  183  604  720   57  123   863 #>  [463,]  336  419  159  189  194  114  823  660   57   171 #>  [464,]   38  682  457  849  353  698  907  983  232   570 #>  [465,]  493  804  827  349  877  715  436   10   40    73 #>  [466,]  564  939  116  248  361  847  172  475   46   117 #>  [467,]  317  613  185    3  676  873  925  409  663   677 #>  [468,]  579  667  696  471  344  480   86  108  766   845 #>  [469,]  645  994  424  314  338  106  642  520  755   835 #>  [470,]  533  303  315  765  165  540  313    9   25   867 #>  [471,]  344  480  468  905  866  579  816  667  488   298 #>  [472,]  356  359  225  405  520  373  631  488  578   608 #>  [473,]   51  490  631  512  825  123  754  344  863   816 #>  [474,]   54   18   29  497   35  914  831   14  326   417 #>  [475,]  847  423  524  102  173  172  347  466  413   553 #>  [476,]   71  811  221  815   87  628  858  372  699   672 #>  [477,]  198  186   55  208  940  577  793  428  595   435 #>  [478,]  382  734  764  197   59  394  701  341  217   271 #>  [479,]  543  293  792  299  911  795  630   70  976   848 #>  [480,]  471  126  431  468  845  866  579  828  344   667 #>  [481,]   76  921  869  820  992  368  418  856  626   297 #>  [482,]  174  527  229  563  313  691  165  347  826   119 #>  [483,]  791  369  630  384  567  632  946   61  319   309 #>  [484,]  605  239  481  131  982  418  763  772  489   368 #>  [485,]   81  996  927  833  304  678  719  580  459   445 #>  [486,]  537  214  607  288  727  283  720  494  565   575 #>  [487,]   64  506  576  943  910  884  682  668  960   457 #>  [488,]  344  369  584  126  471  631  905  816  704   578 #>  [489,]  418  380  521  657  134  407   42  112  435   266 #>  [490,]  711  862  361  473  661  939  704  512  116   123 #>  [491,]  256  562  289  685  589  294  101   74  908   427 #>  [492,]   78   77  829  144  436  725  877  349  857   727 #>  [493,]  465  877  804  349  436  224  715  827  622   891 #>  [494,]  575  720  283  453  462  788  288  939  486   226 #>  [495,]  123  431  401  396  264  413  766  942  316    12 #>  [496,]  879  892  411  251  765  250  146  772  919   867 #>  [497,]   29  474   54   35  838   99  513  408   72    18 #>  [498,]  624  224  622  873  663  963  576  877    3   676 #>  [499,]  651  272  740  810  597  136  408  999  980   213 #>  [500,]  391  650  392  902  938  222  617  406   41   658 #>  [501,]   44  150  952  166  324  846  367  326  442   194 #>  [502,]  591  781  662  151  581  749  277  895    8   175 #>  [503,]  207  924  814  184  201  526  295   89   22   636 #>  [504,]  389  351  426  542  809  806   79  954  415   561 #>  [505,]  215  717  935  759  611  685  947  291  265   320 #>  [506,]  960  415  561  849   64  797  609  542  812   943 #>  [507,]  746  716  234  254  961  640  138  731  215    32 #>  [508,]  638  188  322  341  712  357  385  432  182   734 #>  [509,]  903   10  135   40  827  758  794  465  313   193 #>  [510,]  300   25  156  690  193  950  677  563  896   715 #>  [511,]  128  449  156  243  603  693  263  809  279   690 #>  [512,]  825  130  361  473  490  631   51  721  356   770 #>  [513,]  276   72   82   35  838  157  773  294  673    95 #>  [514,]  679  195  985  586  558  103  424  635  106   983 #>  [515,]  358  819  646  312  432  964  568  988  722     7 #>  [516,]  243   15  528   46  117   11  115  172  661   511 #>  [517,]   27  973  575  442  245  615  206  283  831   790 #>  [518,]  644  729   60  687  232  612  443  177  676   965 #>  [519,]  915  595  477  802  202  274  928  254   30   531 #>  [520,]  755   98  608  578  424  176  338  384  472   631 #>  [521,]  380  657  418  266  869  435  134  489  163    86 #>  [522,]  233   49  461  782  730  223  444  192  122   671 #>  [523,]  158  236  989  774  162  355  627  728   79   259 #>  [524,]  847  475  102  347  173  413  396  826  636   319 #>  [525,]  843  971  145  782  454  973  417  461  831    49 #>  [526,]  334  641  814  207   22  503  316  201  636   311 #>  [527,]  691  482  583  313  539   62  174  124  165   229 #>  [528,]   46  661  516  243   15  117  116  172  466   847 #>  [529,]  330  728  398  556  990  355   97  339  901   950 #>  [530,]  515  706    7  970  432  568  312  551  242   132 #>  [531,]  274  928  328  955  923  802  920  893  519   175 #>  [532,]   67  125  346  738  550  140  761  480  595   547 #>  [533,]  303  470    9  165  315  313  691  812  700   765 #>  [534,]  742  714  241  895  828   52  724  280  773    95 #>  [535,]  582   26  203  379  885  148  152  722  277   200 #>  [536,]  217  360  425  701  764   59  335  271  310   257 #>  [537,]  486  727  572  115  214  288  607  986  669   877 #>  [538,]  662  107  683  581   88  955  895  534  749   773 #>  [539,]  250  583  867  527  456  964  313  552  124   142 #>  [540,]  315  765  193  758  470  718  160  533  300   447 #>  [541,]    4  572  860  934   85  137  725  857  688   103 #>  [542,]  351  389  504  426  809  415  119  440  243    15 #>  [543,]  793  911  479  293  992  428  108  976  208   845 #>  [544,]  270  747  207  592  814   39  641  199  655   310 #>  [545,]  180  364  797   94  178  926  975   15  542   440 #>  [546,]  709   13  764  240  734   84  560  410  478   701 #>  [547,]  802  434  956  928  893  923  532  140  346   872 #>  [548,]  693  987  449  708  128  603  854  652  751   511 #>  [549,]  594  830  841  851  724  281  547   52  923   538 #>  [550,]   67  845  480  532  125  143  126  979  471   828 #>  [551,]  805  132  242  388   50  907  688   85  590    33 #>  [552,]  945  323  416  539  700  297  583  856  250   303 #>  [553,]  423  102  137  475  934  172  972  503  248    89 #>  [554,]  654  562  120  451   93  801  183  179  817    80 #>  [555,]  147  114  366  159  171   92  206   14  615   122 #>  [556,]   97  398  529  760  889  330   93  161  573   728 #>  [557,]  309  438  981  126  979  584   61  787  550   602 #>  [558,]  786  608  248  770  466  195  423   98  514   564 #>  [559,]  912  160  284  193  949  315  540  447  613   467 #>  [560,]   84  790  799  850  271  546   78   13  709   240 #>  [561,]  960  415  351  910  504  949  542  389  806     9 #>  [562,]  685  554  120  935  801  491  101  425  394   256 #>  [563,]  156  511  482  119  229  778  165  174  263   510 #>  [564,]  466  361  117  939  836   46  130   11  786   453 #>  [565,]  607  486  612  788  279  325  226  537  909   917 #>  [566,]  260  167  375  390  941   62   22  205  458   784 #>  [567,]  632  483  630  384  791  744  946  416  126   820 #>  [568,]  966  205  312  732  458  365  152   63  203   839 #>  [569,]  394  289   74  780  197   19  371  478  382   271 #>  [570,]  930  103  860  353  983  541  703  698   50   572 #>  [571,]  168  993  628  259  285  221  978  399  407   621 #>  [572,]  860  541  934  137  537  103    4  930  288   553 #>  [573,]   31   93  398  556  751  451  285  987  654   161 #>  [574,]  352  132  551  913  762  633   91  590  688    53 #>  [575,]  283  494  720   27  442  517  288  214  453   486 #>  [576,]  884  705  135  943  864  498   64  663  590   873 #>  [577,]  940  186  198  742  208  714  692  643  395   793 #>  [578,]  932  631   98  520  936  488  369  309  608    61 #>  [579,]  468  667   86  125  471  108  480  845  766   869 #>  [580,]  738  761  281  841  275  660  140  485  866   830 #>  [581,]  683  781  502  107   88  662  175  538  151   499 #>  [582,]  535  277  170   26  437  379  151  666  885   213 #>  [583,]  539  527  964  250  323  691  348  124  867   313 #>  [584,]  386  905  602  870  488  471    5  585  816   298 #>  [585,]  870  816  345  593  373  905  459  422    5   344 #>  [586,]  363  387  800  614  514  195  703  314  726   106 #>  [587,]  610   69  267  199  655  840  358  646  964   456 #>  [588,]  454  223  306  525  680  782  258  843    6   192 #>  [589,]  256  491   74  653  371  291  685  301  834   562 #>  [590,]  388  132  436  688  913   73  349  493  465   698 #>  [591,]  502  781  404    8  895  749  852  213  662   684 #>  [592,]   39  702  360  544  439  526  957  207  924   217 #>  [593,]  596  345  585  927  954  713  422  459    2   854 #>  [594,]  851  841  549  830  281  346  580  761  678   255 #>  [595,]  532   67  435  125  477  112  346  550  140    55 #>  [596,]  593  345  927  713  954  585  459  422    2   854 #>  [597,]  838  740  832  276  837  101  499  895  181   164 #>  [598,]  311  429  330  339  267  456  990   97  911   878 #>  [599,]  225  343  405  359  187    5  373  870  459   787 #>  [600,] 1000  897  129  739  141  268  972  181  446   331 #>  [601,]   85   50    4  635  103  541  570  805  623   934 #>  [602,]  870  584  386    5  488  585  787  632  187   567 #>  [603,]  128  548  690  987  708  809  449  156  511   693 #>  [604,]  823   80   57  462  750  342  863  210   51   194 #>  [605,]  484  239  772  982  763  131  118  813  455   411 #>  [606,]  883  792  293  919   26  249  420  437  252   368 #>  [607,]  565  486  612  917  177  226  916  537  788   986 #>  [608,]   98  558  755  520  631  423  475  248  466   176 #>  [609,]  812  691    9  119  165  229  303  262  533   748 #>  [610,]  587  439  900   69  885  722  888  267  311   592 #>  [611,]  717  215  265  505  320  291  759  899   58   332 #>  [612,]  177  607  565  916  925  729  443  279  486   325 #>  [613,]  409  317   79  467  510  925  690  185  677   279 #>  [614,]  726  586  195  514  983  752  951  387  363   800 #>  [615,]  366   14  206  157  442  517  673  150  210   326 #>  [616,]  739  450  268  107  272  651   29 1000  600   406 #>  [617,]  658  650  218   68  902  985   33  391  406   805 #>  [618,]   90  244   89   84  727  295  799  720  779   783 #>  [619,]  907  352  590  682  464  576  551  530  132   884 #>  [620,]  338  196  995  675  327  309  936  835  578   645 #>  [621,]  699  993  811  259  962  978  628  571   79   168 #>  [622,]  224  493  891  212  877  410  794  827  498   804 #>  [623,]  169  975  926  176  748  635  178  262  679   797 #>  [624,]  986  669  877  916  224  498  492  698  622   607 #>  [625,]   71  221  185  759  628  815  399  717  699   265 #>  [626,]  820  299   76  744  567  416  921  481  856   694 #>  [627,]  978  774  989  236  896  523  355  718  265   259 #>  [628,]  221   71  571  993  811  168  699  399  621   625 #>  [629,]  811  621   48  699  476   87  796  993  372   806 #>  [630,]  791  142  483  942  319  946  369  567   61   632 #>  [631,]  473   98  608  578  344  512  754  488  825   932 #>  [632,]  567  384  483  791  946  602  309  488  630   369 #>  [633,]  149  237  785  865  745  875  617  406  902   767 #>  [634,]  836  752  333  564  721  220   46  729  967   325 #>  [635,]  103  601  623  679  786  169  176   85  934     4 #>  [636,]  201  826  874  316   22  102  142  641  990   334 #>  [637,]  375  460  941  918  136  377  853  686  948   450 #>  [638,]  508  432  322  188  357  385  712  341  757   970 #>  [639,]  111  181  280  741  268  895  957  924  302   714 #>  [640,]  234   96  716  953  421  695  285  685  427   908 #>  [641,]  456  526  124   69  874   22  207  270  636   990 #>  [642,]  314  424  726  614  176  106  180  679  975   514 #>  [643,]   95  714  101  817  302  179  401  773  429   280 #>  [644,]  729   60  965  518  232  115  443  516  243   612 #>  [645,]  469  994  424  338  314  520  755  835  620   106 #>  [646,]  358  903  964  840  819  587   40   10  515   892 #>  [647,]  255  261  833  678  594  851  580  485  405   459 #>  [648,]   75   28  880  855  370  267  146  257  664   737 #>  [649,]  445  307  721  861  967  719  230  672   81   991 #>  [650,]  391  658  617  985   41   68  406  835  218   902 #>  [651,]  272  810  980  499   66  136  452  616  739   450 #>  [652,]  325  751  693  711  548  449  708  661  987   862 #>  [653,]  215  332  291  505  138  611  961  904  589   717 #>  [654,]  554  776   31  451  183   80  120  308   93   285 #>  [655,]  199  290  310  670  641  544  270  867  370   267 #>  [656,]  357  354  892  737  296  292  803  362  648   929 #>  [657,]  435  134  521   42  380  760  125   55  407   889 #>  [658,]  617   68  650  218  985  835  902  391   33   805 #>  [659,]  787  228  343  602    5  187  386  870  584   557 #>  [660,]  189  868  171  281  807  998  114  830  956   863 #>  [661,]  116   46  528  117  693  490  704  361  466   939 #>  [662,]  895  749  107  502  538  591  534  581  268   742 #>  [663,]  873  412  943  715  317  510  794  910  804   891 #>  [664,]  718  447  876  370  899  251  227   75  335   411 #>  [665,]  912  455  949  559  806  284  160   83  561   629 #>  [666,]  582  170  535  109  277  148  997  249  885   213 #>  [667,]  579  468   86  869  471  845  126  108  480   319 #>  [668,]   64  884  135  910  509  812  609  533  903   229 #>  [669,]  916  624  986  214  537  698  930  154  486   220 #>  [670,]  310  290  286  655  779  199  300  370  747   891 #>  [671,]  991  444  122   37  419  861  233  649  721   194 #>  [672,]  445  947  953  815  307   47  652  393  751   707 #>  [673,]   82  157  150   72  302   95   36  837   57    35 #>  [674,]  371  846  240   44  166  501  685  258  337     1 #>  [675,]  995  620  749  196  379  733  502    8   43   918 #>  [676,]  925  467    3  317  873  518  612  409  858   185 #>  [677,]  896  690  185  891  510  279  409  708  300   156 #>  [678,]  833  255  485  996  580  304  140  346   81   969 #>  [679,]  514  176  985  424  635  103  558  169  623   977 #>  [680,]  815  306  258  625  904  858   71    6  759     3 #>  [681,]  937  228  397  187  626  820  602  898  386   414 #>  [682,]  698   38  849  353  457  963  464  232  930   570 #>  [683,]   88  581  538  107  175  662  781  955  502   497 #>  [684,]  900  213  941  318  113  375  692  795  334   311 #>  [685,]  562  120  505  166  256  935  491  554  308   215 #>  [686,]  853  450  460   21  282  136  129  218  739   637 #>  [687,]  177  518  612  232  204  333  858  220  729   644 #>  [688,]  353   50  388  541  857  698  725  570  132   590 #>  [689,]  731  628  221  399  138  625   71  815  476   904 #>  [690,]  156  603   25  896  677  708  510  128  950   449 #>  [691,]  527  229  165  313    9  812  482  609  988   303 #>  [692,]  976  795    8  208  231  318  684  793  577   742 #>  [693,]  449  548  128  652  661  708  511  116  603   987 #>  [694,]  898  921  381   76  945  626  820  552   83   481 #>  [695,]   96  419  336  953  640  463  308  421  253   191 #>  [696,]  862  468  776  344  711  579  123  490  766   396 #>  [697,]  452   34   21  329  829   23  121  850  810   980 #>  [698,]  353  682  930  688  541  570  669  849  572     4 #>  [699,]  621  978  221  628  811  993   71  627  259   571 #>  [700,]  303  533  945  552    9  470  165  323  440   812 #>  [701,]   28  764  536  734  370  478  341  217   59   425 #>  [702,]   39   20  924  592  282  184  439  814  136   544 #>  [703,]  363  195  127  570  800  586  514  860  985   154 #>  [704,]  396  847  344  661  116  490  528    2  524   862 #>  [705,]  864  576  706  590  884  135  970  619  498    64 #>  [706,]  530  432  970  509  864  705  515  638    7   135 #>  [707,]  736  909  947  265  890  717  451  935  708    31 #>  [708,]  449  128  548  603  987  693  690  909  279   736 #>  [709,]  546   84  764  891  244  240  560  701  410   734 #>  [710,]  881  227  340  385  447   58  664   24  899   794 #>  [711,]  862  490  751  652  661  696  693  854  345   361 #>  [712,]  182  508  378  638  197  757  341  382  362   400 #>  [713,]  954  596  593    2  426  440  422  542  809   504 #>  [714,]  643   95  534  280  895  302  742  401  577   773 #>  [715,]  804  412  286  891  778  300  877  663  493   465 #>  [716,]  234  427  801  889  407  202  640   42  134   285 #>  [717,]  265  611  759  505  215  707  935  320  736   947 #>  [718,]  447  664  370  896  193   75  876  251  411   540 #>  [719,]  307  445   81  649  246  485  927  672  796   996 #>  [720,]  494  288  575  727  283  939   90  618  486   453 #>  [721,]  991  342  512  361  130  825  634  649  752   604 #>  [722,]  885  819  610  312  365  732  200  882  964   113 #>  [723,]  400  296  362  133  235  958   16  292  164   997 #>  [724,]   52  828  241  275  830  321  534  932  807   281 #>  [725,]  857  860  492  541  829  144  154  436  572   329 #>  [726,]  614   56  983  586  951  642  800  752  789   514 #>  [727,]   90  618  537  720   89  486  244  288   77   286 #>  [728,]  355  529  808  774  330  950  236  556   25   989 #>  [729,]  644  443   60  634  965  518  243  516  612   325 #>  [730,]  461  782  917   49  367  753  442  973  223   991 #>  [731,]  399  746  689  628  625   58  221  611  571   332 #>  [732,]  458  365  839   62  152  964  124  722  566   205 #>  [733,]   70  437   43  231  252    8  931  995  795   143 #>  [734,]  341  478  546  701  764   13  382  197  747   709 #>  [735,]  974  805  907  601  966   85   68  205   50   623 #>  [736,]  707  265  708  987  978  890  909   31  717   573 #>  [737,]  227  756  881   75   24  648  357  664  447   880 #>  [738,]  140  761  580  346  532  125  275  776  866   471 #>  [739,]  450  616  268  600  272  686  136  853  452   129 #>  [740,]  597  837  499  838  394  452  850  271  272   999 #>  [741,]  111  944  957  264  302   89  639  201  280   179 #>  [742,]  534  714  577  198  923  692  895    8  828   643 #>  [743,]  273  933  842  364  402  926  797  139  974   262 #>  [744,]  299  416  848  567  190  626  632  273  820   483 #>  [745,]  237  767  245  871  287  206  971  149  831   127 #>  [746,]   32  507  731   58  961  399  611  215  332   291 #>  [747,]  544   77  207  270  286   78   39  184  310   702 #>  [748,]  262  623  926  178  797  635  169  347  482   601 #>  [749,]    8  995  662  895  591  502  534  692  742   143 #>  [750,]  194  952   57  823  308   80  604  324  367   442 #>  [751,]  652   31  711  862  548  183  451  987  693   854 #>  [752,]  130  634  836  333  564  721   56   11  512   614 #>  [753,]  973  283  403   27  846  917  575  410  730   986 #>  [754,]   51  866  473  932  275  863  631  321  825   383 #>  [755,]  520  608   98  424  314  176  558  578   41   679 #>  [756,]   24  737  227  881  447   75  430  664  718   357 #>  [757,]  638  712  432   91  508  182  970  219   45   888 #>  [758,]  540  315  765  193  509  470  533  903  718   447 #>  [759,]  717  505  611  265    1  947  707  215  935   984 #>  [760,]  889  556  763   42   97  813  435  657   55   211 #>  [761,]  275  738  841  866  580  471  905  281  532   830 #>  [762,]  875  216  242   45   53   91  824  551  821    66 #>  [763,]  813  772  760  131  889  556  146  251  211   992 #>  [764,]  240  546  701  478  425  536  709  734   59   271 #>  [765,]  540  470  315  867  411  251  879  718  758   950 #>  [766,]  401  428  495  108  339   55  468  696  579   776 #>  [767,]  206  745  245  237  366  871  831  287  615   517 #>  [768,]   66  651  151  499  980  824  408  810  272   948 #>  [769,]  894  938  338  269  314   41  387  755  578   645 #>  [770,]  248  238  558  453  130  195  466  564  331   342 #>  [771,]  257  161  958   59  425  855  320  878   97   335 #>  [772,]  813  763  131  760  146  211  118  879  251   929 #>  [773,]   95  276  817  513  807  302  714  643  280    36 #>  [774,]  989  236  627  523  355  728  978  251  158   411 #>  [775,]  110    1  984  904  332  834   19  301  371   653 #>  [776,]  696  654  862   80   31  751  766  711  183   817 #>  [777,]  988  229   10    7   73  465  135  482   63   691 #>  [778,]  412  563  715  115  511  804  243  229  286   537 #>  [779,]  295  286  874  826  670  901  201  618   89   244 #>  [780,]  569  958   74  394  382  834   59  301  197   378 #>  [781,]  175  502  591  581  852  328  662  404  151    88 #>  [782,]  730  223  461   49    6  753  917  973  367   916 #>  [783,]  901  451  183  890  909  244   31  618  779   264 #>  [784,]  390  977  260  169  566  173  623  167  327   102 #>  [785,]  406  875  853  450  686  918  739  216  149   651 #>  [786,]  558   11  172  466  103  564  635  248  423    46 #>  [787,]  659  602  870  228  359  584  225    5  632   187 #>  [788,]  226  494  917  565  607  909  486  720  283   750 #>  [789,]   56  752  726  333  634  951  614  836  887   220 #>  [790,]  560  850   84  799   27  283  448  271  914    78 #>  [791,]  630  483  946  142  319  369  567  524  384   173 #>  [792,]  293  479  420  883  606  231  437  911  252   543 #>  [793,]  208  911  428  976  940  543  401  395  692   339 #>  [794,]  827  891  715  300  224  873  804  385  193   465 #>  [795,]  318  976  692  113  334  942  941  684   70   231 #>  [796,]  962  811  719  993  372  168  996  246  476   621 #>  [797,]  926  262  748  975  178  180  623  364  545   849 #>  [798,]  982  118  929  131  354  772  296  803  813   915 #>  [799,]   84  560  618  790  957  271   89  850  244   295 #>  [800,]  363  586  155  703  614  951  387  127  195    65 #>  [801,]  427  562   93  554  908  234  161  716  771   101 #>  [802,]  547  434  872  928  893  923  956  519  955   531 #>  [803,]  929  292  118  296  880  235  723   32  648   400 #>  [804,]  715  877  286  493  891  465  224   77  747   412 #>  [805,]   50  735  601   85   33  907   68  551  658     4 #>  [806,]  504  613   79  389  561  949  351  960  809   415 #>  [807,]  868  863  817  241   52  773  660  302  210   998 #>  [808,]  728  355  854  163  236  259  987  886  162    86 #>  [809,]  954  426  603   79  511  128  886  351  263   504 #>  [810,]  272  651  980  136  452   45  499  697  702   853 #>  [811,]  993  621  476  628  221   71  699  962  168   796 #>  [812,]  609    9  691  165  119  303  533  229  313   527 #>  [813,]  772  763  131  211  760  146  889   97  556   251 #>  [814,]  207  503  526   22  924  184  544  167  439   641 #>  [815,]   71  947  221  672  476  625  628  707  858   680 #>  [816,]  905  344  866  471  585  473  696  488  490   631 #>  [817,]  302   95  807  643  773  280  241  714   80   673 #>  [818,]  204  372  230  858  649  967   87  307  861   687 #>  [819,]  722  358  964  646  885  839  312  587  365   610 #>  [820,]  626   76  299  921  869  567  856  481  297   667 #>  [821,]  377  966  216  242  203  824  460  637   68    63 #>  [822,]  331  859  141  944 1000  248  423  446  111   972 #>  [823,]   57  194  604  442  750  210  952   80  462   189 #>  [824,]  948  216  377  918   45  875  821  637  203   785 #>  [825,]  512  130  473  361   51  631  490  754  721   356 #>  [826,]  874  201  636  779  264  102  990  524  295   174 #>  [827,]  322  794  465   40  493  188  891  385   10   804 #>  [828,]  241  321  724  431   52  932  534  480  275   495 #>  [829,]  492   78  725  121   27  857  349  697  448   144 #>  [830,]  281  275  841   52  724  868  761  660  998   807 #>  [831,]  417  914  973  971  517   34  206   27   18    14 #>  [832,]  852  164  597   16  133  278  997  999  577   591 #>  [833,]  255  678  485  996   81  459  927  580  969     5 #>  [834,]  301   19   74  780  371  569  589  197  382   958 #>  [835,]  196  658  650   68  391  985  902  994   41   617 #>  [836,]  220  333  564  634  342  752  130  155   11   951 #>  [837,]  271  394  957  850  740  799  217  179  181   673 #>  [838,]  276  597  513  101   72   82   35  289  740    95 #>  [839,]  365  348  732  964  458  819  722  583  152   844 #>  [840,]  270   69  988  358  124   10  964  641  544   199 #>  [841,]  830  761  281  275  580  346  738  532  594   724 #>  [842,]  323  273  848  933  348  416  552  583  839   691 #>  [843,]  525  959  454  971  913  121  145  782  624   986 #>  [844,]  148  839  365   26  568  819  312  515  732   722 #>  [845,]  125  480  667  579  550  468  869  108   55    67 #>  [846,]  674  753  403   44  501  410  417  367  952   240 #>  [847,]  475  524  116  347  172  466  102  704  173   423 #>  [848,]  744  348  416  190  842  273  299  630  323   479 #>  [849,]  682  698   38  115  797  930  748  601  965   635 #>  [850,]  560  790   34  799  271  914  448  837   13   452 #>  [851,]  594  549  281  841  830  171  261  998  114   660 #>  [852,]  832   16  164  577  591  328  997  186  781   404 #>  [853,]  686  460   21  450  136  282  329  129  637   739 #>  [854,]  548  987  954  808  693  751  862  603   86   711 #>  [855,]  257  335  370  146  267  876   97  290  251   648 #>  [856,]  297   76  921  992  667  869  945  319  108    86 #>  [857,]  725  541  860  492  329  436  829  144  688    21 #>  [858,]  204   87  177  306  815  476    6  818  612   925 #>  [859,]  331   41  822  972  977  248  423  141  608   558 #>  [860,]  572  541  725  570  857  214    4  930  288   103 #>  [861,]  649  307  671   37   47  445  719  818  721   991 #>  [862,]  711  696  490  751  123  661  704  854  652   396 #>  [863,]   51  868  807  210  998  473  754  604  383   462 #>  [864,]  705  576  340  212  498  970  706  622  827   385 #>  [865,]  902  785  633  149  406  617  391  658  500   650 #>  [866,]  344  471  816  932  905  275  754  761  480   473 #>  [867,]  250  950  539  313  765  199  655  290  470   300 #>  [868,]  998  807  863  660  189  210  281   51  171   275 #>  [869,]  921   76  667  521  266  579  845   86  856   418 #>  [870,]  602    5  585  373  584  422  359  386  459   488 #>  [871,]  245  127  206  745  145  971  517   65  767   154 #>  [872,]  802  434  547  956  893   96  955  695  928   191 #>  [873,]  663  317  412  715  224  794  943  891  925   677 #>  [874,]  826  201  636  779  295  990  264  641  316   526 #>  [875,]  785  216  762   66  242  824  810  651  853    45 #>  [876,]  335  370  425  257  320  664  855   28  701   899 #>  [877,]  804  493  224  492  624  986  436  715  465   349 #>  [878,]  278  267  133  211  958   97  257  429  146   598 #>  [879,]  496  411  892  251  146  765  648  867   75   855 #>  [880,]  648   28  958  400  803   59  771  362  292   899 #>  [881,]  227   58  710  737  664  899   24  756  447    75 #>  [882,]  200  439  900  885   20  375  100  814  167    69 #>  [883,]  606  249  395  293  792  911  211  208  231   420 #>  [884,]  135   64  943  668  576  910  663  777  229   509 #>  [885,]  722  200  882  312  900  610  439  100  819   732 #>  [886,]  263  954  809  945    2  603  808  297  162   854 #>  [887,]   15  967  634  752   56   46  230  422  729   516 #>  [888,]  219   39  100   20  439  592  610  702  544   882 #>  [889,]  760  556   42  407  716  134  657   97  763   202 #>  [890,]  901  783  335  909  451  425  707  161  244   935 #>  [891,]  804  224  709  715  794  677  286  670  877   622 #>  [892,]  496  879  648  646  587   75  765  146  411   251 #>  [893,]  956  434  955  547  773  928  513  923  802    52 #>  [894,]  769  387  755  314  754  238  938   41  383   578 #>  [895,]  662  714  534  280  639  268  742  181  749   591 #>  [896,]  677  690   25  950  627  718  510  890  300   335 #>  [897,]  972  141  129  600  331  448  453  288  248   822 #>  [898,]  694  381  921   76   83  626  681  105  481   187 #>  [899,]  320   58  291  664  876  611  881  332    1   880 #>  [900,]  439  882  684  200  375  941  213  526  610   592 #>  [901,]  783  890  451  779  183  244  909  295  264   618 #>  [902,]  658  617  650  391  835  865  500   68  406   196 #>  [903,]   10  509   40  646  313  358  840  988  300   270 #>  [904,]  332    1  653  759  984  775  625   58  717   505 #>  [905,]  816  471  584  866  344  585  488  386  761   298 #>  [906,]  287   66   17  980   54  768  968  474  875   149 #>  [907,]  805   50  735  601  974  551   85  388  619     4 #>  [908,]  922  104  427   30  801  101  554  920  562   491 #>  [909,]  451  783  707  708  244  890  183  901  449    90 #>  [910,]  415  960   64  317  561  663  884  668  943   193 #>  [911,]  793  976  293  208  395  543  311  598  795   940 #>  [912,]  559  949  160  284  315  455  540  806  665   193 #>  [913,]  132  590  436  688  349  121  829  624  388   353 #>  [914,]   34  850  831  417  790   27  560   13  501   150 #>  [915,]  519  920   30  274  202  477  235  328  104   254 #>  [916,]  669  986  607  612  624  220  214  177  486   537 #>  [917,]  226  403  788  607    6  753  730  367  283   952 #>  [918,]  637  948  450  785  406  824  853  686  136   272 #>  [919,]  368  348  293  792  606  496  250  992  583   539 #>  [920,]  104   30  274  922  164  908  328  427   16   101 #>  [921,]   76  869  856  297  266  481  820   86  667   694 #>  [922,]  104  908   30  920  101  274  427  276   95   838 #>  [923,]  928  742  534  547  198  724  893  532   52   802 #>  [924,]  184  503  282  702  814  207  526  111  144   592 #>  [925,]  409  279  185  443  677  612  565  613  676   873 #>  [926,]  178  623  975  180  797  169  748  262  176    94 #>  [927,]   81  345  459  593  596  485  585  230  445   719 #>  [928,]  923  547  802  893  198  742  531  274  434   534 #>  [929,]  803  118  296  292  235  798  723  813  772    32 #>  [930,]  570  103  115  860  698  572   11  965  983   541 #>  [931,]  143    8  995  733  231  404   67  742  749   550 #>  [932,]  321  866  431  578  754  828  936  631  275   344 #>  [933,]  842  743  273  323  812  609  364  262  568   691 #>  [934,]  137    4  572  541   85  553   73  860  144   635 #>  [935,]  425  505  562  120  707  717  890  685  161    93 #>  [936,]   61  431   12  126  369  932  578  143  321   413 #>  [937,]  397  681  228  187  414  386    5  969  602   266 #>  [938,]  222  269   41  391  392  383  650  859  500  1000 #>  [939,]  361  466  116  564  453  720  117  490  944   494 #>  [940,]  577  208  793  395  186  428  211  976  401   911 #>  [941,]  375  318  334  684  900   22  566  637  795   526 #>  [942,]  316  142  413  319  630   12  495  369  431   334 #>  [943,]  663  412  884  873   60  849  135  682  576   715 #>  [944,]  741  123  462  939  822  264   89  111  720   475 #>  [945,]  552  886  440  297  856  303  165  700  539     9 #>  [946,]  791  319  483  524  630  369  173  174  347   263 #>  [947,]  707  815  672  505  759  717  736  120  909   265 #>  [948,]  824  918  637  377  272  216  136  200   45   213 #>  [949,]  912  315  561  559  160  470  806  540   83   533 #>  [950,]   25  156  867  300  355  690  728  510  290   896 #>  [951,]  155  220  333  836  614  800  930  983  726    11 #>  [952,]  194  750  367  442  501   57  823  324  150    44 #>  [953,]  246  285  672  654  695  640  308  419  445   776 #>  [954,]  809  426  854    2  886  603  987  548  713   263 #>  [955,]  893  531  928  538  434  923  513  956  802   547 #>  [956,]  434  893  547  660  773  807  908  817   52   922 #>  [957,]  360  179  799  217  741  271  837  111  592   536 #>  [958,]   59  133  771  878  382  400  217  880  780    28 #>  [959,]  843  963  498  454  913  525  624  669  916   986 #>  [960,]  561  415  351  910  542  504  389  506  119   806 #>  [961,]  332  653  291  746   58  215  899   32  589   320 #>  [962,]  993  168  621  811  796  304  247  105  571   246 #>  [963,]  232  457   38  669  682  624  698  916  498   353 #>  [964,]  583  358  840   69  458  527  124  646  732   839 #>  [965,]  115  333  644   11  930  220  729  516  634    60 #>  [966,]  205  821  568  377  203   63  566  152  260   167 #>  [967,]  230  345  634  887  649  927  721  445  596   593 #>  [968,]   54   18  474   17  417  287   19  906   23   121 #>  [969,]  414  112  298  397  346  386  937  140  125   304 #>  [970,]   53  432  465   91  212  322  638    7  590   493 #>  [971,]  973  831  525  871  417  145  745  245  517   829 #>  [972,]  897  141  331  129  859  553  248  137  600   288 #>  [973,]   27  753  517  283  971  831  575  214  442   730 #>  [974,]  735  623  975  209  601  169  679  994  176   262 #>  [975,]  623  926  180  176  178  169  797  635  679    94 #>  [976,]  692  793  795  208  911  318  231  940  428   543 #>  [977,]  784  390  859  423  169  553  260   98  679   985 #>  [978,]  627  989  774  259  736  265  236  699  896   355 #>  [979,]  981  550   67  557  299  931  845  143  438   479 #>  [980,]  651  810  452  697  272  499   66  739  740   136 #>  [981,]  979  438  557  299  190   43  550  744  820   931 #>  [982,]  131  798  772  484  605  813  118  763  202    42 #>  [983,]  570  930  103  514  726  614  951   11  679   195 #>  [984,]    1  110  759  240  371  320  904  674  899   775 #>  [985,]  679  514  658  650   41  218   68   33  617   977 #>  [986,]  624  669  916  877  214  537  492  607  486   753 #>  [987,]  548  603  708  854  128  693  449  751  652   736 #>  [988,]  840  777   62   10   63  458  270  358  527     7 #>  [989,]  236  774  523  627  158  978  259  355  728   808 #>  [990,]  874  316  330  456  636  826  641  529  142   264 #>  [991,]  721  342  671  122  604  730  836  917  226   444 #>  [992,]  543  856  297  250   76  539  481  293  108   330 #>  [993,]  168  811  962  571  621  628  221  699  259    71 #>  [994,]  424  645  106  314  835  985  679  469  755   176 #>  [995,]  749    8  143  931  936  733  620  675   12   828 #>  [996,]  304  485   81  833  927  678  247  246  719   459 #>  [997,]  133  362  999  378   16  400  170  852  832   723 #>  [998,]  868  171  863  281  210  189  660  807  114    51 #>  [999,]  408  997   16  832  378  740  499  164  597   780 #> [1000,]  268  600  446   36  181  822  280  639  739   111 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.16464834 0.6961714 0.7172087 0.7836990 0.8296052 0.8383418 0.8648237 #>    [2,] 0.49477380 0.5711163 0.5973763 0.5974632 0.6496536 0.6917008 0.7002145 #>    [3,] 0.86961137 0.9254196 1.1205039 1.1841235 1.2348780 1.2423987 1.2658056 #>    [4,] 0.24334511 0.2829114 0.4400788 0.5214110 0.5262908 0.5328506 0.5855788 #>    [5,] 0.42830424 0.5390614 0.5509676 0.6199954 0.6548853 0.6807978 0.6837389 #>    [6,] 0.43748296 0.4446368 0.5999810 0.7869795 0.8181038 0.8366814 0.8450701 #>    [7,] 0.57395510 0.6403181 0.6791375 0.6974353 0.7264497 0.7657190 0.7825720 #>    [8,] 0.53512120 0.6095643 0.6285900 0.6289312 0.6478455 0.6734987 0.6784235 #>    [9,] 0.19315210 0.3455428 0.4205658 0.5048724 0.5075274 0.5674844 0.5949242 #>   [10,] 0.24084246 0.4462027 0.5422454 0.5653496 0.5739551 0.5904740 0.6051189 #>   [11,] 0.37793008 0.5451290 0.5625144 0.5760614 0.6346099 0.6363264 0.6457022 #>   [12,] 0.37384739 0.4579567 0.4599599 0.5567736 0.5998382 0.6358950 0.6433436 #>   [13,] 0.37183782 0.4233476 0.4848306 0.5275233 0.5700364 0.5711195 0.5950557 #>   [14,] 0.47373927 0.4803706 0.5887377 0.6834126 0.8020734 0.8655146 0.8860401 #>   [15,] 0.34729316 0.4530333 0.4696739 0.4939460 0.6642093 0.6689797 0.6842359 #>   [16,] 0.38386639 0.6351146 0.6635499 0.7010966 0.7496675 0.7576663 0.8091816 #>   [17,] 0.91503334 1.5064512 1.5782863 1.8069881 1.8587935 1.8637992 1.8924326 #>   [18,] 0.66722745 0.6709875 0.7984856 0.8356182 0.8460182 0.9072663 0.9898709 #>   [19,] 0.41592094 0.4907001 0.5619449 0.6601319 0.6782467 0.8420174 0.8856733 #>   [20,] 0.36470650 0.4517709 0.5265508 0.5365436 0.5626089 0.5969058 0.6016457 #>   [21,] 0.30736409 0.3869857 0.3896754 0.4699849 0.4862872 0.5164959 0.5497035 #>   [22,] 0.30018606 0.3830789 0.4030674 0.4116959 0.4366822 0.5259052 0.5263538 #>   [23,] 0.42334761 0.7091858 0.7235837 0.7262605 0.7322873 0.7454407 0.7508082 #>   [24,] 0.40789365 0.6825085 0.8070360 0.8258309 0.8306010 1.0448212 1.0502608 #>   [25,] 0.33982051 0.3849576 0.4123737 0.4130222 0.5281775 0.5759512 0.5824385 #>   [26,] 0.63788846 0.7487080 0.9172868 0.9174509 0.9282266 0.9826809 1.0326897 #>   [27,] 0.37917177 0.3931635 0.4337569 0.4834340 0.5077420 0.6058215 0.6330119 #>   [28,] 0.33196298 0.5091326 0.5872882 0.5952990 0.6191701 0.6395511 0.6448378 #>   [29,] 0.72301580 0.7490924 0.8629877 0.8898348 0.9682805 0.9744020 1.0275553 #>   [30,] 0.33563523 0.4512064 0.4789341 0.5908040 0.6454767 0.6715761 0.7940804 #>   [31,] 0.30459140 0.3857096 0.4281213 0.5022500 0.5180524 0.5632561 0.5645913 #>   [32,] 0.76184440 0.8075007 0.8513452 0.9081671 0.9178498 0.9918165 1.0365303 #>   [33,] 0.22013873 0.5107915 0.5507144 0.6548283 0.6833267 0.7112002 0.7174742 #>   [34,] 0.40088801 0.4793743 0.5171175 0.5835634 0.6712633 0.6992624 0.7170819 #>   [35,] 0.31939785 0.5291617 0.5529781 0.5716671 0.7088658 0.7190559 0.7219221 #>   [36,] 0.16642668 0.3496355 0.4773581 0.4904159 0.5409065 0.6267008 0.6916397 #>   [37,] 0.73671374 0.8621744 0.9759354 1.0786660 1.0956052 1.1607490 1.1996284 #>   [38,] 0.30845086 0.6245585 0.6901269 0.8201462 0.8567963 0.9468507 0.9616841 #>   [39,] 0.29387133 0.3410406 0.4517709 0.4984357 0.5091772 0.5256291 0.5567886 #>   [40,] 0.24084246 0.4997507 0.6024243 0.6394867 0.6619020 0.6791375 0.6949572 #>   [41,] 0.44094798 0.6343445 0.6448699 0.6477847 0.6962288 0.7138864 0.7194455 #>   [42,] 0.34707999 0.5286882 0.5462935 0.5959750 0.6013225 0.6105727 0.7720752 #>   [43,] 0.73065790 0.9782040 0.9897422 1.0774977 1.1847967 1.1947594 1.3023717 #>   [44,] 0.29023565 0.5980090 0.5982993 0.6543033 0.6567802 0.6935538 0.7231174 #>   [45,] 0.39700979 0.6839490 0.7436483 0.8153795 0.8226358 0.8449527 0.9222423 #>   [46,] 0.15731943 0.3765062 0.4394362 0.4503461 0.4939460 0.5073311 0.5194960 #>   [47,] 0.50267678 0.6949920 0.8032029 0.8239424 0.8336523 0.9610692 0.9965373 #>   [48,] 0.48843080 0.9683850 1.0138308 1.1518965 1.1578829 1.1660987 1.1740803 #>   [49,] 0.28236883 0.6356028 0.6465128 0.7200232 1.0687737 1.1078364 1.1387106 #>   [50,] 0.48324749 0.5214226 0.5262908 0.6126128 0.6248762 0.6659119 0.6765966 #>   [51,] 0.31288933 0.4155183 0.5524264 0.5934302 0.6158018 0.6166146 0.6427064 #>   [52,] 0.30264243 0.3764663 0.5407363 0.5425612 0.5453472 0.5644349 0.6480187 #>   [53,] 0.69611107 0.7657587 0.8226691 0.8584003 0.8727013 0.8771693 0.8947969 #>   [54,] 0.46883675 0.6672274 0.9532210 1.0522233 1.1037502 1.3149105 1.3214081 #>   [55,] 0.38311365 0.4842305 0.5842990 0.6429351 0.6612194 0.6728767 0.6787602 #>   [56,] 0.65481314 0.7046197 0.7524719 0.8508672 0.8548777 1.0076838 1.0594079 #>   [57,] 0.23106474 0.3473076 0.4225965 0.4510731 0.5008082 0.5232824 0.5281050 #>   [58,] 0.59921092 0.6919050 0.7346080 0.7465740 0.7618444 0.8024771 0.8730806 #>   [59,] 0.29810547 0.4978462 0.5046157 0.5378877 0.5748470 0.5754165 0.5872882 #>   [60,] 0.52180552 0.7142839 0.7906931 0.8288101 0.8389482 0.8392117 0.8914123 #>   [61,] 0.32514717 0.3278057 0.4355327 0.4493299 0.5848716 0.6438615 0.6460145 #>   [62,] 0.33689236 0.4487314 0.5092996 0.5809886 0.5849494 0.5861431 0.6146280 #>   [63,] 0.48082706 0.5793828 0.5809886 0.5905196 0.7288206 0.7337677 0.7559830 #>   [64,] 0.55661137 0.6652639 0.8572748 0.8990448 1.1364118 1.1519858 1.1726166 #>   [65,] 0.87520863 0.9067886 0.9288955 0.9397843 0.9542046 0.9944418 1.0444336 #>   [66,] 0.56869969 0.7350032 0.8359232 0.9066305 1.0572057 1.0646581 1.1515106 #>   [67,] 0.24165860 0.5816378 0.7026527 0.7646808 0.7708295 0.7797628 0.8775587 #>   [68,] 0.40536556 0.4279020 0.5107915 0.6806155 0.6807108 0.6850440 0.7183149 #>   [69,] 0.33253883 0.3911188 0.4424147 0.4805005 0.4998998 0.6052702 0.6064596 #>   [70,] 0.50218625 0.6738753 0.6741109 0.6891179 0.8110796 0.8787373 0.8847877 #>   [71,] 0.33779326 0.5409359 0.5715736 0.5720451 0.7479068 0.7574055 0.8474943 #>   [72,] 0.27502464 0.3193979 0.4276745 0.4499817 0.4979119 0.5598570 0.6383549 #>   [73,] 0.55301622 0.5580194 0.5740192 0.6254647 0.6479538 0.6497451 0.6634349 #>   [74,] 0.53722476 0.5619449 0.5905038 0.6520662 0.6879832 0.7265033 0.7987878 #>   [75,] 0.49006846 0.6394181 0.6713121 0.6718749 0.7336282 0.7425097 0.7531800 #>   [76,] 0.33260011 0.4469061 0.4588044 0.4813455 0.5052785 0.6234528 0.6860114 #>   [77,] 0.24052376 0.3802063 0.4308678 0.4707250 0.5023793 0.5773656 0.6113547 #>   [78,] 0.42178032 0.4308678 0.5090026 0.5432507 0.5438314 0.5618666 0.5711478 #>   [79,] 0.45746267 0.5336108 0.5806200 0.7012472 0.7030041 0.7088307 0.7143547 #>   [80,] 0.42027149 0.4510731 0.4847198 0.5402080 0.5664358 0.5955280 0.6274769 #>   [81,] 0.25877334 0.4892417 0.6544191 0.6683874 0.7623330 0.7738578 0.8413232 #>   [82,] 0.27502464 0.3206093 0.3887504 0.5215600 0.5226246 0.5291617 0.5648844 #>   [83,] 0.48498289 0.6378486 0.7501935 0.8588803 0.8771701 0.9551075 0.9893648 #>   [84,] 0.25720415 0.3278489 0.3874233 0.3878139 0.3984012 0.4600519 0.4820576 #>   [85,] 0.24334511 0.4327957 0.5063394 0.5214226 0.5321686 0.5677245 0.6381351 #>   [86,] 0.46749307 0.4970890 0.5155398 0.5442580 0.5501279 0.6551967 0.6561717 #>   [87,] 0.48843080 0.9081595 0.9384899 0.9761018 0.9988404 1.1244528 1.1392229 #>   [88,] 0.60347310 0.8062327 1.0059715 1.0121904 1.0562971 1.1912528 1.2460376 #>   [89,] 0.31169468 0.3616799 0.4597241 0.4749561 0.4982801 0.5142627 0.5214540 #>   [90,] 0.18601227 0.2113961 0.3475942 0.3874233 0.4597241 0.5030347 0.5570741 #>   [91,] 0.91503334 1.1640820 1.1846178 1.2803936 1.2954550 1.5403791 1.5651761 #>   [92,] 0.41557834 0.7919105 0.8863537 0.9288955 1.0262572 1.1437903 1.1574792 #>   [93,] 0.31759081 0.3259659 0.5180524 0.5250534 0.5532245 0.5792122 0.5863690 #>   [94,] 0.43876553 0.4571204 0.6446268 0.6689797 0.6943452 0.7740258 0.8054876 #>   [95,] 0.30134733 0.3899182 0.4202556 0.4239172 0.4369306 0.4954367 0.5713134 #>   [96,] 0.62177708 0.7459948 0.8428684 1.0580256 1.0694814 1.0894757 1.1475952 #>   [97,] 0.37517394 0.4014768 0.4242089 0.4870426 0.4936564 0.5532245 0.5799257 #>   [98,] 0.18280805 0.4372617 0.5259614 0.5635615 0.6195011 0.6236231 0.6333104 #>   [99,] 0.98663669 1.0440155 1.1402103 1.1696935 1.1711947 1.1778480 1.1811293 #>  [100,] 0.39700979 0.5365436 0.5483818 0.6365686 0.6696204 0.6886177 0.7163106 #>  [101,] 0.50594859 0.5713134 0.6195753 0.6221504 0.6405807 0.6510229 0.6555262 #>  [102,] 0.36738351 0.3698023 0.3832512 0.4042771 0.4223787 0.4363457 0.4476355 #>  [103,] 0.29962323 0.5206740 0.5422024 0.5771239 0.5812003 0.6064883 0.6364283 #>  [104,] 0.27875495 0.3356352 0.3711834 0.4637339 0.6516187 0.6825673 0.7094994 #>  [105,] 0.41732757 0.5039363 0.5324029 0.6761268 0.8169803 0.8693629 0.8809098 #>  [106,] 0.74189004 0.7444919 0.7726483 0.7991191 0.8161936 0.8305014 0.8759180 #>  [107,] 0.66646809 0.7053552 0.7970489 0.8495925 0.9095541 1.0275553 1.0520577 #>  [108,] 0.46123456 0.4729633 0.5681569 0.5738325 0.5811879 0.6113438 0.6435044 #>  [109,] 1.52448525 1.6225418 1.7511003 1.7995223 1.8969201 1.9585169 1.9914059 #>  [110,] 0.63194654 0.6961714 0.7928847 1.1009734 1.1194917 1.1241383 1.1733222 #>  [111,] 0.29873064 0.3178282 0.4542132 0.5389952 0.5576769 0.5683972 0.5980938 #>  [112,] 0.68180349 0.7811011 0.8072307 0.8111868 0.8139516 0.8382867 0.8536828 #>  [113,] 0.51143075 0.5454901 0.5479119 0.7227222 0.7347467 0.7648786 0.7748200 #>  [114,] 0.39879045 0.4658660 0.5749353 0.7174277 0.7239041 0.7454463 0.7854594 #>  [115,] 0.54005297 0.5679658 0.5698263 0.5760614 0.5947842 0.6107975 0.6636570 #>  [116,] 0.32779088 0.3648790 0.3713812 0.3769083 0.3894559 0.3967151 0.4710685 #>  [117,] 0.37138116 0.4277536 0.4344987 0.4406565 0.4503461 0.4591152 0.4823878 #>  [118,] 0.45378403 0.6935282 0.8513452 0.8612417 0.9648979 0.9835546 1.0282307 #>  [119,] 0.42056575 0.4503433 0.5194018 0.5471780 0.6330285 0.6573317 0.6685777 #>  [120,] 0.51416385 0.5319674 0.5632969 0.5810847 0.6146498 0.6549053 0.6696103 #>  [121,] 0.65736236 0.7091858 0.7410284 0.9071756 0.9177773 0.9642162 0.9978253 #>  [122,] 0.40297615 0.7084110 0.7558188 0.8677079 0.8721158 0.8809972 0.8965874 #>  [123,] 0.33638599 0.3999161 0.4377156 0.4621420 0.5437185 0.5828323 0.5862059 #>  [124,] 0.37320461 0.3911188 0.4067909 0.4116959 0.4487314 0.5531944 0.5532625 #>  [125,] 0.50117412 0.5140597 0.5540494 0.6362864 0.6367564 0.6429351 0.6842168 #>  [126,] 0.32514717 0.4662731 0.4851922 0.5120088 0.5812764 0.6044210 0.6122187 #>  [127,] 0.55914200 0.6477647 0.6548927 0.6575639 0.7588284 0.7984418 0.8143448 #>  [128,] 0.14294877 0.3193055 0.3218339 0.3295669 0.3393076 0.3668148 0.4432354 #>  [129,] 0.38698569 0.4031281 0.4305024 0.4530690 0.5031422 0.5033797 0.5768957 #>  [130,] 0.37202275 0.4421644 0.4870051 0.5120154 0.5222103 0.5399520 0.6204289 #>  [131,] 0.58925593 0.6113323 0.6434003 0.7612337 0.8472176 0.8804295 0.9204533 #>  [132,] 0.57896524 0.6261334 0.7865381 0.7957353 0.8370713 0.8674669 0.8947969 #>  [133,] 0.49607054 0.5237846 0.5653175 0.5706711 0.5961695 0.6425521 0.6610093 #>  [134,] 0.38931716 0.4796074 0.5081664 0.5959750 0.6254278 0.6344261 0.7316500 #>  [135,] 0.32351332 0.7728951 0.8167850 0.8427778 0.8990448 0.9218280 0.9268563 #>  [136,] 0.31342900 0.4680809 0.4903084 0.5247609 0.5663500 0.5871851 0.5892093 #>  [137,] 0.18954821 0.4218518 0.4842403 0.5214110 0.5503489 0.6381351 0.6396177 #>  [138,] 0.84380876 0.8771531 0.9805048 1.0831619 1.1233589 1.1450523 1.1603851 #>  [139,] 1.20383843 1.3125640 1.3862863 1.4073290 1.4474013 1.4902378 1.5504087 #>  [140,] 0.31322272 0.5040235 0.7293563 0.8536828 0.8719708 0.8873366 0.8894643 #>  [141,] 0.30484209 0.3282175 0.3518609 0.3830630 0.4135591 0.5466086 0.5473317 #>  [142,] 0.44448819 0.4560937 0.4689268 0.5211919 0.5455615 0.5551341 0.5567607 #>  [143,] 0.60120864 0.6285900 0.6851235 0.7086146 0.7096816 0.7143675 0.7224924 #>  [144,] 0.24052376 0.3106433 0.4968764 0.5019234 0.5081184 0.5438314 0.5497035 #>  [145,] 0.76562058 0.8873257 1.0108983 1.0314492 1.0440874 1.0467573 1.0976879 #>  [146,] 0.46732186 0.4755679 0.5802241 0.6318489 0.6404908 0.6480766 0.6747756 #>  [147,] 0.41557834 0.7667516 0.9067886 0.9678681 1.0031303 1.0237443 1.0290167 #>  [148,] 0.63788846 0.8638121 1.1002687 1.1093182 1.1492689 1.2890151 1.3068725 #>  [149,] 0.37224233 0.7942606 0.9367795 0.9408431 1.1159566 1.1634702 1.1933719 #>  [150,] 0.45364884 0.4555137 0.5226246 0.5688056 0.6196022 0.6212031 0.6502783 #>  [151,] 0.31722578 0.7350048 0.9919050 1.0051943 1.0555950 1.0656588 1.0799066 #>  [152,] 0.54012990 0.5934630 0.6474317 0.8006736 0.8314792 0.8575095 0.8682241 #>  [153,] 0.67411089 0.7008831 0.9334194 0.9663088 0.9706877 0.9782040 1.0005449 #>  [154,] 0.43505960 0.5591420 0.6411140 0.6935582 0.7487361 0.8133481 0.8190363 #>  [155,] 0.40650084 0.6426489 0.6520318 0.7300444 0.7327240 0.7674695 0.7743443 #>  [156,] 0.35692745 0.3849576 0.4254910 0.4494458 0.4503996 0.4656161 0.4820837 #>  [157,] 0.37651899 0.3887504 0.4499817 0.5529781 0.5688056 0.5955532 0.6167856 #>  [158,] 0.26085256 0.4175160 0.4848114 0.4849829 0.6409944 0.6426980 0.7528288 #>  [159,] 0.57493531 0.6073269 0.7147667 0.7521357 0.8775717 0.8837379 0.9586417 #>  [160,] 0.73253956 0.7331691 0.7465925 0.7855124 0.7882302 0.8000355 0.8010676 #>  [161,] 0.31759081 0.3751739 0.3761625 0.4694312 0.5237629 0.5369371 0.5619283 #>  [162,] 0.45746267 0.5054876 0.6011279 0.6409944 0.6559524 0.6594166 0.7142818 #>  [163,] 0.44766781 0.5039363 0.5155398 0.5223042 0.5563329 0.6117914 0.6166969 #>  [164,] 0.38386639 0.4999664 0.6610093 0.6728641 0.7750397 0.7927239 0.7954449 #>  [165,] 0.19315210 0.4120762 0.4503433 0.4857236 0.5087867 0.5413974 0.5720861 #>  [166,] 0.41018798 0.5982993 0.6059503 0.6403885 0.6653122 0.6910223 0.7167947 #>  [167,] 0.40638957 0.4808271 0.5061003 0.5092996 0.5532954 0.5693659 0.5906993 #>  [168,] 0.40972994 0.4360248 0.6424416 0.7258391 0.8713289 0.8787107 0.8852177 #>  [169,] 0.36444964 0.4607595 0.4708045 0.5432609 0.6097293 0.6166729 0.6347170 #>  [170,] 0.77515452 0.8376337 0.9374548 0.9657661 0.9682057 1.0410493 1.0830722 #>  [171,] 0.39879045 0.4119482 0.5834789 0.5998045 0.6963949 0.8428431 0.8456697 #>  [172,] 0.37013807 0.3769083 0.3928123 0.4277536 0.4639353 0.4827762 0.5162545 #>  [173,] 0.27190044 0.4304209 0.4521732 0.4660418 0.4810174 0.5162545 0.5830079 #>  [174,] 0.33058705 0.5110546 0.5111193 0.5306206 0.6013928 0.6016348 0.6231840 #>  [175,] 0.38780816 0.8162056 0.8193690 0.9148779 1.0121904 1.0127711 1.0287083 #>  [176,] 0.46075954 0.4914107 0.5270825 0.5486014 0.5840154 0.6004881 0.6446268 #>  [177,] 0.37528214 0.5915580 0.7234958 0.7390981 0.7657111 0.7825389 0.8204156 #>  [178,] 0.35090362 0.4149985 0.4571204 0.5810372 0.5994186 0.6004881 0.6347170 #>  [179,] 0.36679922 0.4766070 0.5522334 0.5632660 0.6041422 0.6308292 0.6479470 #>  [180,] 0.41499848 0.4387655 0.5065696 0.5121081 0.6500462 0.7203823 0.7300003 #>  [181,] 0.40063059 0.4305852 0.4542132 0.4904159 0.5281374 0.5588485 0.5805486 #>  [182,] 0.28785119 1.0672119 1.1413971 1.1567045 1.2805708 1.3033285 1.3465785 #>  [183,] 0.24229384 0.3691416 0.5022500 0.5153704 0.5241157 0.5268087 0.5402080 #>  [184,] 0.29278000 0.3106433 0.3802063 0.3864961 0.3866091 0.4413974 0.4907600 #>  [185,] 0.56696211 0.6732215 0.6771911 0.7522433 0.8008312 0.8023477 0.8591651 #>  [186,] 0.49263565 0.5187702 0.5396631 0.6070164 0.6273648 0.6284411 0.6293192 #>  [187,] 0.68373893 0.7717644 0.7759052 0.8199615 0.9210780 1.0210338 1.0216858 #>  [188,] 0.45706073 0.6262618 0.6713121 0.6871362 0.6949572 0.7149119 0.7322242 #>  [189,] 0.31058601 0.4119482 0.4658660 0.5254999 0.6154161 0.6398861 0.7135669 #>  [190,] 0.54951736 0.7395617 0.8070140 0.9525524 1.0509650 1.1085620 1.1606913 #>  [191,] 1.04762293 1.2189971 1.2963540 1.3510386 1.3921506 1.4209926 1.4341379 #>  [192,] 0.64026079 0.8770549 0.9084544 0.9287991 0.9329802 0.9435184 0.9478164 #>  [193,] 0.43046718 0.5937305 0.6207222 0.6450644 0.6675939 0.7433801 0.7836248 #>  [194,] 0.28766833 0.3473076 0.3540537 0.3706108 0.5322835 0.5899733 0.5979536 #>  [195,] 0.52696211 0.5530794 0.5585371 0.6051547 0.6274238 0.6639179 0.6732496 #>  [196,] 0.61802421 0.8670053 0.8689674 0.8821511 0.9430326 0.9705938 1.0648769 #>  [197,] 0.44640576 0.4925380 0.6619467 0.6624980 0.6858805 0.7262605 0.7633431 #>  [198,] 0.52302729 0.5275619 0.6069065 0.6273648 0.6769934 0.6787602 0.7821569 #>  [199,] 0.08544083 0.3637887 0.3644345 0.5220205 0.5534120 0.5576728 0.5767967 #>  [200,] 0.30585138 0.4545532 0.5207692 0.6025136 0.6300371 0.6622486 0.7163106 #>  [201,] 0.22066642 0.2335392 0.2994692 0.4042771 0.4125418 0.4312274 0.4435025 #>  [202,] 0.34707999 0.7683396 0.8318000 0.8435130 0.8516292 0.8521290 0.8627990 #>  [203,] 0.59346299 0.7325719 0.7406831 0.7597613 0.7907066 0.8524562 0.9147752 #>  [204,] 0.34734509 0.7727191 0.9660692 0.9735843 0.9903615 0.9988404 1.0157676 #>  [205,] 0.51084800 0.6294084 0.6711959 0.6786597 0.7034560 0.7310952 0.7337677 #>  [206,] 0.49469363 0.5422872 0.5864271 0.5928920 0.6754280 0.6834126 0.6921565 #>  [207,] 0.20161447 0.2953250 0.3825511 0.4024048 0.4413974 0.4499986 0.4815605 #>  [208,] 0.30309278 0.4015759 0.4355615 0.4766639 0.4926356 0.5255987 0.6121251 #>  [209,] 0.89914861 1.2496961 1.2637194 1.3025453 1.4065634 1.5001550 1.5115877 #>  [210,] 0.50776902 0.5114489 0.5387586 0.6080363 0.6341971 0.6404446 0.6636486 #>  [211,] 0.48974189 0.6087190 0.6213628 0.6614269 0.6747756 0.7464291 0.7526782 #>  [212,] 0.76540185 0.9715836 1.0448846 1.0581048 1.0590952 1.1420422 1.1518342 #>  [213,] 0.48258267 0.5898018 0.7625122 0.7917676 0.8376337 0.8604243 0.8665662 #>  [214,] 0.43417599 0.4350596 0.5253211 0.5722172 0.5812580 0.5879211 0.6221411 #>  [215,] 0.38484051 0.3877222 0.5488137 0.5677858 0.6143621 0.7468042 0.7589933 #>  [216,] 0.46374536 0.4756211 0.6731753 0.6755831 0.7426730 0.7436483 0.7797788 #>  [217,] 0.24846187 0.3230476 0.4934067 0.4978462 0.5215294 0.5632660 0.5781694 #>  [218,] 0.22013873 0.4053656 0.5529884 0.5864665 0.6146972 0.6652084 0.6925414 #>  [219,] 0.47466013 0.5091772 0.5626089 0.6597312 0.6696204 0.7657587 0.7927157 #>  [220,] 0.24326356 0.4248690 0.4859930 0.6520318 0.7199898 0.7243822 0.7598761 #>  [221,] 0.25339212 0.3377933 0.7254055 0.7292472 0.7693976 0.7785578 0.7801072 #>  [222,] 0.54184591 0.7168669 0.7580354 0.8492810 0.8588818 0.8929889 0.9182487 #>  [223,] 0.44463682 0.5493058 0.6951118 0.7796674 0.8157095 0.8314284 0.8983395 #>  [224,] 0.33092590 0.5308274 0.5452690 0.6092266 0.6509513 0.7563836 0.7737065 #>  [225,] 0.43517885 0.5087678 0.7282037 0.8200445 0.8396680 0.8686894 0.9728831 #>  [226,] 0.23658899 0.3044992 0.5807326 0.5925684 0.6057019 0.6149485 0.6160011 #>  [227,] 0.37596713 0.3933752 0.5142227 0.6825085 0.7313129 0.7618979 0.7673341 #>  [228,] 0.69245767 0.7717644 0.9120658 0.9180017 0.9352097 0.9648538 1.0952829 #>  [229,] 0.45157227 0.4716023 0.5069476 0.5268980 0.5584983 0.5858423 0.6400774 #>  [230,] 0.35974218 0.8313922 0.8628527 0.8646783 0.8717237 0.8897654 0.8966186 #>  [231,] 0.44364810 0.5048276 0.5901147 0.6158981 0.6337690 0.6734987 0.7088919 #>  [232,] 0.36962117 0.6245585 0.6797841 0.8876926 0.9055940 0.9135052 1.0387586 #>  [233,] 0.53665353 0.9483992 0.9718769 0.9866953 1.0357904 1.0548761 1.0823586 #>  [234,] 0.38360427 0.5865048 0.6213855 0.6354869 0.8512808 0.9046319 0.9179908 #>  [235,] 0.78576890 0.8165920 0.8506474 0.8612417 0.9690140 1.0047367 1.0375403 #>  [236,] 0.18982483 0.2666116 0.2862749 0.4175160 0.4600286 0.5304585 0.5571561 #>  [237,] 0.53229894 0.7942606 0.8205240 0.8573099 0.8816813 0.8818032 0.9404553 #>  [238,] 0.44466937 0.4668766 0.5499636 0.5934302 0.6065100 0.6204289 0.7020074 #>  [239,] 0.87717006 0.9613261 1.0157382 1.0488862 1.0497764 1.0914078 1.1065436 #>  [240,] 0.35149711 0.4025749 0.4848306 0.5963490 0.6252183 0.6430889 0.6754856 #>  [241,] 0.37646628 0.3891824 0.4232284 0.5151719 0.5240277 0.5367195 0.5693103 #>  [242,] 0.46374536 0.6548861 0.6851550 0.7288418 0.7816090 0.8054915 0.9232704 #>  [243,] 0.22273120 0.4423237 0.4696739 0.4800354 0.5012625 0.5194960 0.6429660 #>  [244,] 0.21139607 0.2383821 0.3878139 0.4923408 0.4979119 0.5250017 0.5425701 #>  [245,] 0.32751396 0.4946936 0.6076163 0.6543563 0.6548927 0.6668197 0.8205240 #>  [246,] 0.62159062 0.7308569 0.8243590 0.8490200 0.8651248 0.8852177 0.9857375 #>  [247,] 0.52230423 0.5494814 0.6561717 0.6605992 0.6761268 0.6977966 0.8243590 #>  [248,] 0.39391905 0.4027707 0.4074459 0.4135591 0.4232486 0.4259465 0.4633913 #>  [249,] 0.78033293 1.0410493 1.1502997 1.1597130 1.1756759 1.1785044 1.1898994 #>  [250,] 0.20650975 0.4989027 0.5023611 0.6857673 0.7166549 0.7267525 0.7697537 #>  [251,] 0.30348827 0.5797437 0.6223265 0.6411611 0.6480766 0.6979193 0.7294407 #>  [252,] 0.67387525 0.7008831 0.7639954 0.8237211 0.8949076 0.9168696 0.9172868 #>  [253,] 0.55626011 0.6122196 0.7272570 0.8032029 0.8042928 0.8153559 0.8263047 #>  [254,] 0.83179999 1.0840953 1.0855801 1.2907480 1.3097720 1.3618624 1.3708990 #>  [255,] 0.50261406 0.8005655 1.1137873 1.1764441 1.2693534 1.2709762 1.3305967 #>  [256,] 0.26636460 0.6420917 0.6714672 0.7383588 0.7674452 0.8564979 0.8896941 #>  [257,] 0.18510757 0.3605198 0.4694312 0.4870426 0.5029063 0.5188186 0.5375569 #>  [258,] 0.71567183 0.9076684 1.0496038 1.1186526 1.1637118 1.1724750 1.2064308 #>  [259,] 0.55715612 0.5666285 0.6341428 0.6408059 0.7280033 0.7486569 0.7528288 #>  [260,] 0.29491535 0.3943401 0.4024379 0.5108480 0.5629277 0.5906993 0.6986046 #>  [261,] 1.37277239 1.3942597 1.4841804 1.6193172 1.6325120 1.6507373 1.6649446 #>  [262,] 0.38618794 0.6122966 0.6346027 0.6644866 0.8610130 0.8649136 0.9047791 #>  [263,] 0.40458422 0.5554042 0.5711163 0.6016348 0.6198054 0.6330285 0.6332772 #>  [264,] 0.43778734 0.4488100 0.4565748 0.4621420 0.4652422 0.5075853 0.5385498 #>  [265,] 0.34781374 0.4657270 0.5333996 0.5652736 0.6452286 0.6859595 0.7065587 #>  [266,] 0.44766781 0.4970890 0.5324029 0.5858714 0.6223161 0.6480566 0.6605992 #>  [267,] 0.44977931 0.4673219 0.4972498 0.5487329 0.5511995 0.5996822 0.6303056 #>  [268,] 0.40763358 0.4305852 0.5217794 0.5888938 0.6189898 0.6249196 0.6267008 #>  [269,] 0.61813142 0.6442385 0.7168669 1.1352459 1.1598181 1.1866112 1.1901971 #>  [270,] 0.32404982 0.3486690 0.4805005 0.4815605 0.4873079 0.5422454 0.5576728 #>  [271,] 0.28092925 0.4334924 0.5043499 0.5165928 0.5189948 0.5215294 0.5316358 #>  [272,] 0.31342900 0.4749614 0.4900850 0.5440540 0.5746407 0.6059702 0.6371389 #>  [273,] 0.74039655 0.8427370 0.8515108 0.8541618 0.9270140 1.0849768 1.1057439 #>  [274,] 0.47763270 0.4821175 0.6454767 0.7094994 0.7422601 0.8159047 0.8957855 #>  [275,] 0.48341376 0.5050641 0.5268730 0.5310282 0.5453472 0.5655272 0.6078280 #>  [276,] 0.40282053 0.4069622 0.4636614 0.4954367 0.5648844 0.6383549 0.6402971 #>  [277,] 0.31722578 0.7589751 0.9374548 0.9500280 0.9744066 0.9790199 1.0198717 #>  [278,] 0.42189081 0.4655403 0.4960705 0.5238633 0.5986994 0.5996822 0.6733279 #>  [279,] 0.44323537 0.4782744 0.4964384 0.5195418 0.5729531 0.5890486 0.5934236 #>  [280,] 0.29358749 0.3496355 0.3966701 0.5240277 0.5281374 0.5296953 0.5576769 #>  [281,] 0.39914055 0.5268730 0.5709033 0.5854514 0.6095902 0.6200753 0.6768372 #>  [282,] 0.30736409 0.3803616 0.3866091 0.4305024 0.4680809 0.4684802 0.4799874 #>  [283,] 0.29973131 0.4280147 0.4337569 0.4629733 0.5229637 0.5419846 0.5766850 #>  [284,] 0.90249736 0.9904744 1.0502608 1.2882511 1.3947978 1.4147610 1.4876842 #>  [285,] 0.66199563 0.7059281 0.7146127 0.7288623 0.7621752 0.8067230 0.8193273 #>  [286,] 0.37771991 0.4224858 0.4674113 0.5173656 0.5233893 0.5588752 0.5866050 #>  [287,] 0.82191443 0.9578488 0.9898709 1.0383954 1.0522233 1.1659882 1.1957745 #>  [288,] 0.38359639 0.4452496 0.4854474 0.5219584 0.5253211 0.5473317 0.5609559 #>  [289,] 0.50154443 0.6111563 0.6607979 0.6671793 0.6879832 0.6948621 0.7088658 #>  [290,] 0.22481533 0.2864627 0.3220688 0.3637887 0.4686737 0.5089231 0.6060020 #>  [291,] 0.45110154 0.5677858 0.6109160 0.6317960 0.7180520 0.7577249 0.7778794 #>  [292,] 0.66537816 0.7015691 0.7160165 0.7498045 0.7943488 0.8128808 0.8168187 #>  [293,] 0.44503790 0.6320336 0.6655045 0.6737555 0.7616690 0.7774944 0.7945480 #>  [294,] 0.49791189 0.6468371 0.6719717 0.7190559 0.7379339 0.7383588 0.7399317 #>  [295,] 0.33436469 0.3616799 0.3939860 0.4125418 0.4192498 0.4991595 0.5087284 #>  [296,] 0.69546496 0.7427748 0.7741157 0.7840753 0.9600928 1.0047367 1.0532644 #>  [297,] 0.08865645 0.5052785 0.5132412 0.6940295 0.7014264 0.7116780 0.7586518 #>  [298,] 0.54828792 0.6264587 0.6880316 0.6890794 0.6960610 0.7558442 0.7558630 #>  [299,] 0.54951736 0.5975897 0.6375701 0.6581530 0.7857778 0.9041100 0.9187875 #>  [300,] 0.38455357 0.5217026 0.5525568 0.5683892 0.5759512 0.5869550 0.6050294 #>  [301,] 0.18186047 0.4159209 0.5372248 0.8142865 0.8338241 0.8693982 1.0318687 #>  [302,] 0.29358749 0.3758895 0.4369306 0.4773581 0.5402376 0.5407572 0.5484948 #>  [303,] 0.29508847 0.3455428 0.4120762 0.4367117 0.6152680 0.7078623 0.7243431 #>  [304,] 0.50984310 0.5494814 0.7308569 0.7967745 0.8809098 0.9133581 0.9305192 #>  [305,] 1.25848536 1.3590137 1.3905277 1.4323380 1.5112455 1.6365571 1.6480437 #>  [306,] 0.94731565 1.0083020 1.2768913 1.2956221 1.3740039 1.3889939 1.5250941 #>  [307,] 0.52293158 0.5898728 0.6252020 0.6949920 0.7802318 0.8161899 1.0868555 #>  [308,] 0.52026295 0.5322835 0.5632969 0.6000400 0.6063725 0.6269754 0.6274769 #>  [309,] 0.60540436 0.6530787 0.6603580 0.7302909 0.7556337 0.7647195 0.7922720 #>  [310,] 0.19888002 0.2248153 0.2933482 0.3644345 0.5588752 0.5637778 0.5684917 #>  [311,] 0.31893583 0.5238633 0.5240137 0.5332746 0.5359288 0.5439539 0.6213267 #>  [312,] 0.66275747 0.7238546 0.7602312 0.7858214 0.8483713 0.8514094 0.8707663 #>  [313,] 0.45157227 0.4857236 0.5328718 0.5622567 0.5643357 0.5802565 0.5869550 #>  [314,] 0.59029505 0.6640392 0.7893794 0.8276673 0.8305014 0.8334632 0.8486760 #>  [315,] 0.32023580 0.4410900 0.5138488 0.6207222 0.6330890 0.6644397 0.7572525 #>  [316,] 0.36584829 0.4103399 0.4115522 0.4377873 0.4435025 0.4512224 0.4808933 #>  [317,] 0.53744974 0.6468342 0.6858901 0.7396922 0.8609900 0.9341045 0.9370971 #>  [318,] 0.29855574 0.3330557 0.4377573 0.5114308 0.5431299 0.5431350 0.5433775 #>  [319,] 0.41527602 0.4640816 0.4664254 0.4896145 0.5400638 0.5753246 0.6098741 #>  [320,] 0.38282631 0.4511015 0.5424029 0.6047744 0.6740299 0.6879002 0.6966126 #>  [321,] 0.30315863 0.4160594 0.4232284 0.5204466 0.6162431 0.6384256 0.6394497 #>  [322,] 0.45125763 0.4570607 0.6241201 0.6394016 0.7338989 0.8091899 0.8268297 #>  [323,] 0.52917074 0.6227357 0.6505910 0.7866345 0.7956717 0.8390291 0.8393977 #>  [324,] 0.41018798 0.5534408 0.5562601 0.5632503 0.5979536 0.6269754 0.6307715 #>  [325,] 0.40131670 0.5780193 0.6048515 0.6203862 0.6347322 0.6349914 0.6543468 #>  [326,] 0.47373927 0.5980090 0.7219958 0.8415517 0.8460182 0.8530573 0.8770549 #>  [327,] 0.56292769 0.6550234 0.6939653 0.7360457 0.7788283 0.7917854 0.9247668 #>  [328,] 0.48211749 0.7561875 0.8162056 0.8532300 0.8693338 0.8922194 0.9208336 #>  [329,] 0.38967545 0.4799874 0.5081184 0.6177762 0.6205066 0.6545760 0.7020412 #>  [330,] 0.20614471 0.4526554 0.4733109 0.4936564 0.5054186 0.5132988 0.5528495 #>  [331,] 0.30484209 0.3302644 0.3559538 0.4074459 0.4898260 0.5104181 0.5939905 #>  [332,] 0.63312760 0.6716419 0.6919050 0.7333568 0.7520420 0.7577249 0.8016593 #>  [333,] 0.24326356 0.4514502 0.5357807 0.5639170 0.6020131 0.6468355 0.7210900 #>  [334,] 0.30018606 0.3330557 0.3402789 0.4115522 0.4972025 0.5048579 0.5082967 #>  [335,] 0.31933515 0.3605198 0.3627244 0.4317372 0.4782301 0.5089231 0.5132106 #>  [336,] 0.47990529 0.6063725 0.7062426 0.7379339 0.7521357 0.7683727 0.7728023 #>  [337,] 0.71567183 0.9212094 1.2302806 1.2533878 1.2619910 1.2840362 1.3430309 #>  [338,] 0.58573286 0.7355680 0.7556337 0.7759102 0.8753656 0.9437206 0.9987041 #>  [339,] 0.43309804 0.4406152 0.4481228 0.4612346 0.5054186 0.5189211 0.5798351 #>  [340,] 0.85828964 0.9909640 1.0009898 1.0891385 1.1301733 1.1671423 1.1681514 #>  [341,] 0.39079975 0.5608860 0.5666743 0.5687094 0.6241201 0.6262618 0.6395511 #>  [342,] 0.46687657 0.5229469 0.5576258 0.5730138 0.6231951 0.6285918 0.6293371 #>  [343,] 0.89994434 1.0116924 1.1623026 1.2105522 1.2885752 1.3445865 1.4313436 #>  [344,] 0.42354191 0.4462946 0.4537034 0.4676192 0.4820405 0.5097054 0.5442765 #>  [345,] 0.38634214 0.4432289 0.4466909 0.5723630 0.6390739 0.6544191 0.6756743 #>  [346,] 0.31322272 0.6236608 0.6749445 0.8072307 0.8096432 0.8478643 0.9124112 #>  [347,] 0.27190044 0.3701381 0.3863718 0.4114053 0.4223787 0.4856249 0.5111193 #>  [348,] 0.51011101 0.7135485 0.7301039 0.7613872 0.8393977 0.8427964 0.8523312 #>  [349,] 0.33059804 0.5589844 0.5877086 0.6452686 0.6786523 0.6853755 0.6961111 #>  [350,] 0.54996359 0.6459004 0.7327240 0.7588284 0.7609852 0.7667516 0.7919105 #>  [351,] 0.34240678 0.5278629 0.5471780 0.6187785 0.6387934 0.6903683 0.7126879 #>  [352,] 1.08649474 1.4916059 1.6415259 1.6847031 1.7991980 1.8224499 1.8308876 #>  [353,] 0.45901826 0.5138933 0.5999945 0.7692451 0.7913226 0.8172726 0.8423590 #>  [354,] 0.74277478 1.0460092 1.0895955 1.1592723 1.1883595 1.1898994 1.1928941 #>  [355,] 0.23685811 0.4546499 0.4600286 0.4948303 0.5224993 0.5281775 0.5571291 #>  [356,] 0.58983446 0.6247298 0.6438044 0.6805424 0.6884261 0.6905193 0.6922020 #>  [357,] 0.92360417 0.9380717 0.9628370 0.9919639 1.0135525 1.0225747 1.0417221 #>  [358,] 0.41496202 0.5379615 0.5514382 0.6630005 0.7009980 0.7103077 0.7217690 #>  [359,] 0.49339825 0.5087678 0.5674265 0.6107994 0.6329909 0.6805424 0.6825860 #>  [360,] 0.32304757 0.3266174 0.3492895 0.4752273 0.5087284 0.5674459 0.6041422 #>  [361,] 0.33709856 0.3880099 0.4131012 0.4473798 0.5032318 0.5399520 0.5430934 #>  [362,] 0.15455940 0.4517945 0.5961695 0.6752880 0.6998271 0.7015691 0.8203890 #>  [363,] 0.31532870 0.3526403 0.5244507 0.6642565 0.6760321 0.8142287 0.8143448 #>  [364,] 0.74315943 0.8440829 0.8702620 0.9251501 0.9332727 1.0355034 1.1063873 #>  [365,] 0.36871653 0.3849620 0.5401299 0.6701620 0.7135485 0.7318974 0.8526867 #>  [366,] 0.27773913 0.5887377 0.5928920 0.6893556 0.8741367 0.8922216 0.8948148 #>  [367,] 0.44558319 0.5632503 0.6402608 0.6450464 0.6652509 0.6673185 0.6701417 #>  [368,] 0.63373452 0.7781214 0.9031730 1.0671591 1.0750368 1.0889169 1.1425191 #>  [369,] 0.41527602 0.4355327 0.4441690 0.4851922 0.5145197 0.5150884 0.5441191 #>  [370,] 0.33955523 0.3627244 0.4499187 0.4686737 0.5029063 0.5091326 0.5456831 #>  [371,] 0.56727156 0.5963490 0.6601319 0.6976048 0.7741481 0.7987878 0.8072460 #>  [372,] 0.85210909 0.9660692 1.0295636 1.1392229 1.1745562 1.1924214 1.2168266 #>  [373,] 0.34864295 0.4933982 0.5515686 0.6247298 0.6338178 0.6347652 0.6624234 #>  [374,] 1.02542636 1.2020065 1.2350178 1.2598053 1.3603711 1.3803752 1.4265951 #>  [375,] 0.16440238 0.5126355 0.5224715 0.5408611 0.5419830 0.5431299 0.5595660 #>  [376,] 0.96838503 1.1796422 1.2959327 1.3009343 1.3715982 1.4010182 1.4080171 #>  [377,] 0.47562106 0.5468792 0.6548861 0.6570822 0.6622486 0.6772271 0.7287152 #>  [378,] 0.44947649 0.4517945 0.7010190 0.7211464 0.7255035 0.8618691 0.8812412 #>  [379,] 0.73257190 0.8314792 0.8864307 0.9013588 0.9043477 0.9158549 0.9304078 #>  [380,] 0.40173365 0.5563329 0.6054581 0.6067249 0.6254278 0.6726014 0.6977966 #>  [381,] 0.41732757 0.6117914 0.7069229 0.8782804 0.9190227 0.9301519 0.9323600 #>  [382,] 0.31686333 0.4464058 0.5046157 0.5608860 0.6248389 0.6538886 0.6612310 #>  [383,] 0.58760281 0.6162431 0.6637183 0.6737283 0.6813766 0.7182501 0.7353313 #>  [384,] 0.48130343 0.4819970 0.6054044 0.6840700 0.7065491 0.7414489 0.7792486 #>  [385,] 0.63940157 0.7322242 0.7533099 0.8381376 0.8434874 0.9424063 0.9628370 #>  [386,] 0.35827579 0.5482879 0.5509676 0.6307365 0.6356705 0.6571526 0.6893279 #>  [387,] 0.51676533 0.6639179 0.6642565 0.6979675 0.7194455 0.7725162 0.7783629 #>  [388,] 0.55001713 0.5677245 0.5740192 0.5855788 0.6261334 0.6273204 0.6659119 #>  [389,] 0.48036041 0.4891977 0.7126879 0.7708979 0.8930630 0.9359729 0.9656245 #>  [390,] 0.22222826 0.2949154 0.5436591 0.5701223 0.6097293 0.6852872 0.6939653 #>  [391,] 0.33669177 0.6086104 0.6861840 0.7116193 0.7138864 0.7238799 0.7357277 #>  [392,] 0.61813142 0.7580354 0.8771006 0.9165938 1.0552147 1.1989874 1.3516979 #>  [393,] 0.50267678 0.6122196 0.6864259 0.7509585 0.8437341 0.8977770 0.9250809 #>  [394,] 0.41785115 0.4334924 0.4930073 0.5397692 0.5754165 0.6111563 0.6378049 #>  [395,] 0.48974189 0.4922030 0.5255987 0.5688177 0.6284411 0.6408661 0.6563155 #>  [396,] 0.33638599 0.4377779 0.4664254 0.4676192 0.4745771 0.4892575 0.4993086 #>  [397,] 0.60932515 0.6307365 0.6880316 0.7463931 0.8144743 0.8684860 0.9141359 #>  [398,] 0.32596590 0.3761625 0.4014768 0.4330980 0.4397551 0.4733109 0.4990049 #>  [399,] 0.43013314 0.8559376 0.9266001 0.9348294 0.9755043 1.0007465 1.0152451 #>  [400,] 0.15455940 0.4494765 0.5237846 0.6465924 0.6705592 0.7160165 0.7360651 #>  [401,] 0.39986030 0.4053543 0.4481228 0.4841836 0.5954711 0.6308744 0.6435044 #>  [402,] 0.65502344 0.8593899 0.9753322 1.0209966 1.0769750 1.1774054 1.1836772 #>  [403,] 0.43748296 0.4744987 0.5502167 0.6160011 0.6372165 0.6701417 0.6951118 #>  [404,] 0.50482756 0.6209307 0.6293192 0.6478455 0.7056536 0.7798818 0.7942724 #>  [405,] 0.43517885 0.6329909 0.6438044 0.6624234 0.7317535 0.9096225 0.9333072 #>  [406,] 0.60861038 0.6519408 0.6840093 0.6913729 0.7411212 0.8208012 0.8284698 #>  [407,] 0.47960739 0.6054581 0.6410571 0.7059281 0.7397902 0.7641115 0.7720752 #>  [408,] 0.62339703 0.8651838 0.8904077 1.0866857 1.1371650 1.1416621 1.1863606 #>  [409,] 0.41423436 0.4782744 0.6515418 0.6708195 0.6732215 0.6745043 0.6777493 #>  [410,] 0.52752332 0.5813641 0.6638017 0.6871469 0.6949365 0.7140714 0.7196438 #>  [411,] 0.30348827 0.5529016 0.6533055 0.6644278 0.6911139 0.7032547 0.7789289 #>  [412,] 0.41113854 0.5001766 0.5340676 0.6634010 0.6917132 0.7219760 0.7388487 #>  [413,] 0.37384739 0.4459946 0.4638711 0.4892575 0.4994762 0.5145197 0.5179499 #>  [414,] 0.59913257 0.7811011 0.8144743 0.9779571 1.1523637 1.2373662 1.2584854 #>  [415,] 0.48320314 0.5569586 0.6387934 0.6927926 0.7487837 0.7934415 0.8753570 #>  [416,] 0.68162610 0.6947712 0.7767022 0.7883295 0.8427370 0.8641736 0.8642841 #>  [417,] 0.53037714 0.6427524 0.7929727 0.8000000 0.8122235 0.8356182 0.8734652 #>  [418,] 0.52313560 0.6394833 0.6992650 0.7159324 0.7405781 0.8096684 0.8389357 #>  [419,] 0.52880820 0.7045602 0.7062426 0.7134749 0.7618934 0.7638330 0.7972931 #>  [420,] 0.70141468 0.7524955 1.0565042 1.0671591 1.1831748 1.1947141 1.2228223 #>  [421,] 0.84286837 0.9171867 1.0008873 1.0782596 1.1697256 1.3834793 1.4183284 #>  [422,] 0.34864295 0.4947738 0.5674265 0.6512449 0.6691722 0.6893260 0.7248399 #>  [423,] 0.26754334 0.3539340 0.3939191 0.4476355 0.4835243 0.5094878 0.5320598 #>  [424,] 0.49746970 0.5578627 0.5723091 0.5840154 0.5902951 0.6993343 0.7007910 #>  [425,] 0.40094256 0.4508608 0.4782301 0.4968684 0.5365636 0.5369371 0.5621301 #>  [426,] 0.39032932 0.4386891 0.5361647 0.6525173 0.7039184 0.7294747 0.7354045 #>  [427,] 0.32610793 0.5130830 0.5865048 0.6099702 0.6516187 0.6715761 0.7867861 #>  [428,] 0.38311365 0.3998966 0.4053543 0.4406152 0.4729633 0.5212349 0.5587910 #>  [429,] 0.36679922 0.4655403 0.4771287 0.5301312 0.5332746 0.5954711 0.6157507 #>  [430,] 1.04482123 1.0680677 1.1476210 1.1572944 1.1830841 1.2849024 1.2870248 #>  [431,] 0.37346705 0.4493299 0.4599599 0.4838920 0.5120088 0.5204466 0.5287165 #>  [432,] 0.82408575 0.9733748 1.0149745 1.0417221 1.0624933 1.0766247 1.1143713 #>  [433,] 0.98663669 1.8312466 1.8358587 1.8497730 1.9755393 1.9772803 1.9958560 #>  [434,] 0.35100129 0.5104199 0.5964356 0.6872063 0.8097277 0.9540321 1.0380990 #>  [435,] 0.25604212 0.4842305 0.5081664 0.5540494 0.6013225 0.6273253 0.6770216 #>  [436,] 0.33059804 0.5080819 0.5530162 0.6000992 0.6242807 0.6993927 0.7039011 #>  [437,] 0.44364810 0.6209307 0.7052823 0.8237211 0.8507127 0.8788010 0.9518068 #>  [438,] 0.89114662 0.9589670 1.3627977 1.6661671 1.6905759 1.7214371 1.7384644 #>  [439,] 0.27342108 0.3539013 0.4822139 0.5256291 0.5265508 0.5422367 0.5822481 #>  [440,] 0.65733166 0.6860780 0.6903683 0.7565848 0.7662454 0.8079483 0.8429920 #>  [441,] 0.63373452 0.7014147 1.1283165 1.1357762 1.2847036 1.3230669 1.4014832 #>  [442,] 0.44570704 0.4660460 0.5281050 0.5353446 0.5756786 0.5899733 0.6483932 #>  [443,] 0.51744606 0.5890486 0.6349914 0.6515418 0.7163328 0.7294747 0.8180184 #>  [444,] 0.40297615 0.6703717 0.8982055 1.0237443 1.0469004 1.0825213 1.1127470 #>  [445,] 0.48792994 0.6063047 0.6196114 0.6252020 0.7605335 0.7738578 0.8217821 #>  [446,] 0.16642668 0.3966701 0.4856220 0.5476024 0.5805486 0.5876028 0.6211888 #>  [447,] 0.40679149 0.4799699 0.6911139 0.7325396 0.7618979 0.8136443 0.8147225 #>  [448,] 0.40312812 0.5164959 0.5606413 0.5752305 0.5835634 0.5909260 0.5971114 #>  [449,] 0.14294877 0.2507592 0.2995908 0.3495992 0.3871001 0.4388965 0.4964384 #>  [450,] 0.33718787 0.4295153 0.4701307 0.5247609 0.5440540 0.6189898 0.6504794 #>  [451,] 0.24229384 0.3251583 0.3857096 0.4520079 0.4712512 0.5241228 0.5449501 #>  [452,] 0.45529962 0.5171175 0.5535719 0.6078770 0.6371389 0.6430337 0.6450724 #>  [453,] 0.38306299 0.3835964 0.4027707 0.4809781 0.4827385 0.4913768 0.5229469 #>  [454,] 1.00433114 1.0590352 1.0709853 1.0971496 1.1009593 1.1018219 1.1427318 #>  [455,] 1.06294555 1.0909938 1.2242817 1.2694997 1.3995380 1.4147610 1.4153072 #>  [456,] 0.34582608 0.3732046 0.4747576 0.4998998 0.5082967 0.5240137 0.5449667 #>  [457,] 0.30845086 0.3696212 0.6953520 0.8573370 1.0449803 1.1027795 1.1111772 #>  [458,] 0.30986002 0.3368924 0.5793828 0.5846537 0.6099341 0.6324417 0.6514002 #>  [459,] 0.53762233 0.5390614 0.6338178 0.6390739 0.6483701 0.6683874 0.7165318 #>  [460,] 0.44969791 0.4574674 0.5507144 0.5529884 0.5643167 0.6660890 0.6772271 #>  [461,] 0.28236883 0.5012582 0.6041251 0.8037298 0.9348752 0.9435184 1.0100291 #>  [462,] 0.42027149 0.4630865 0.5090040 0.5595546 0.5672563 0.5697903 0.5700772 #>  [463,] 0.47990529 0.5288082 0.6073269 0.6154161 0.6443693 0.7174277 0.7999176 #>  [464,] 0.85679627 0.9187407 1.1027795 1.1875140 1.2926214 1.3359048 1.3597712 #>  [465,] 0.25267575 0.5790197 0.6044928 0.6786523 0.6842886 0.6898931 0.7094532 #>  [466,] 0.37507104 0.3850426 0.3894559 0.4259465 0.4473798 0.4538972 0.4639353 #>  [467,] 0.53744974 0.7987312 0.8023477 0.8696114 0.8752043 0.9148207 0.9240605 #>  [468,] 0.18871180 0.3749199 0.4531979 0.4538038 0.5097054 0.5487001 0.5501279 #>  [469,] 0.43686997 0.9136104 1.2057897 1.2502352 1.3398909 1.4724672 1.4820539 #>  [470,] 0.42431380 0.4367117 0.4410900 0.5101491 0.5720861 0.5827444 0.6207984 #>  [471,] 0.44629465 0.4523429 0.4538038 0.4634493 0.4691419 0.5182528 0.5513062 #>  [472,] 0.58983446 0.6107994 0.7282037 0.7317535 0.7869180 0.8641399 0.9089090 #>  [473,] 0.41551827 0.4219723 0.4496466 0.5040671 0.5409830 0.5437185 0.5615950 #>  [474,] 0.46883675 0.6709875 0.7490924 0.7494805 0.9651321 1.0197696 1.0421093 #>  [475,] 0.25415830 0.2675433 0.3191782 0.3673835 0.4660418 0.4827762 0.4856249 #>  [476,] 0.57204507 0.6690113 0.8114975 0.8297121 0.9081595 0.9604512 0.9964504 #>  [477,] 0.52302729 0.6070164 0.7768221 0.7834745 0.7913235 0.8416858 0.9138914 #>  [478,] 0.31686333 0.4246311 0.4638688 0.4925380 0.5378877 0.5397692 0.5491864 #>  [479,] 0.61879814 0.6737555 0.6956635 0.7857778 0.8626442 0.8659622 0.8839317 #>  [480,] 0.45234292 0.4662731 0.5287165 0.5487001 0.5692838 0.5876105 0.6208925 #>  [481,] 0.62345283 0.6940337 0.7888679 0.8304257 0.8428927 0.9031730 0.9191398 #>  [482,] 0.33058705 0.4573864 0.4716023 0.5135103 0.5802565 0.5823923 0.6175645 #>  [483,] 0.39467336 0.4441690 0.4663683 0.4819970 0.4827227 0.4866123 0.5318164 #>  [484,] 0.97828220 1.0157382 1.0666033 1.0711030 1.0742056 1.1509920 1.1925331 #>  [485,] 0.48924165 0.5812876 0.6816875 0.7382198 0.7967745 0.8554493 0.8879051 #>  [486,] 0.37879206 0.4341760 0.4477177 0.4854474 0.4962561 0.5229637 0.5306463 #>  [487,] 1.79186858 1.8371319 2.0342211 2.1398394 2.1763759 2.2023516 2.2742698 #>  [488,] 0.48204054 0.5636039 0.5883087 0.6122187 0.6256169 0.6303851 0.6510461 #>  [489,] 0.63948334 0.6726014 0.6848153 0.8156051 0.8628035 0.9459363 0.9541629 #>  [490,] 0.39085261 0.3956817 0.4131012 0.4219723 0.4688037 0.5241246 0.5575092 #>  [491,] 0.26636460 0.6470767 0.6607979 0.7166713 0.7271400 0.7399317 0.8157675 #>  [492,] 0.42178032 0.4707250 0.4953969 0.4968764 0.5080819 0.5346383 0.5515136 #>  [493,] 0.25267575 0.4758310 0.4916948 0.5589844 0.6000992 0.6092266 0.6746278 #>  [494,] 0.30232145 0.3055537 0.4280147 0.4913768 0.5090040 0.5197249 0.5219584 #>  [495,] 0.39991614 0.4838920 0.4841836 0.5027871 0.5075853 0.5272402 0.5346140 #>  [496,] 0.41339320 0.5148138 0.8896415 0.9342725 0.9499283 0.9758696 0.9840147 #>  [497,] 0.72301580 0.7494805 0.9532210 0.9986879 1.1719611 1.1891575 1.2479271 #>  [498,] 0.85527993 0.8940447 0.9031098 0.9199382 1.0664099 1.0938258 1.1370353 #>  [499,] 0.55475865 0.5746407 0.6593784 0.7403527 0.8072281 0.8416950 0.8651838 #>  [500,] 0.68618403 0.8162630 0.9165938 0.9578636 0.9749614 0.9781661 1.0745522 #>  [501,] 0.29023565 0.4536488 0.4796495 0.6059503 0.6364103 0.6597332 0.6936586 #>  [502,] 0.53733812 0.6696849 0.7130093 0.7350048 0.7536862 0.7580771 0.7589751 #>  [503,] 0.29532503 0.3334548 0.3410214 0.3864961 0.4312274 0.4313606 0.5144084 #>  [504,] 0.48036041 0.5278629 0.5361647 0.5419283 0.6593597 0.6627225 0.7851681 #>  [505,] 0.38772222 0.4579625 0.5391286 0.5654577 0.5712837 0.6160763 0.7141653 #>  [506,] 0.94454801 0.9495346 1.0633881 1.1178005 1.1364118 1.1444150 1.1752234 #>  [507,] 0.85469525 1.1803373 1.2075141 1.2907480 1.3638668 1.3661028 1.4195369 #>  [508,] 0.31108466 0.8753184 0.8878696 0.9046052 0.9269673 0.9380717 0.9424063 #>  [509,] 0.49722244 0.8029435 0.8167850 0.8364622 0.8617024 0.9190203 0.9261387 #>  [510,] 0.38455357 0.4130222 0.4656161 0.4989613 0.5937305 0.5972669 0.6177792 #>  [511,] 0.32956685 0.3871001 0.4494458 0.4800354 0.4898814 0.5079077 0.5554042 #>  [512,] 0.13061122 0.3720227 0.5032318 0.5040671 0.5633009 0.6152639 0.6166146 #>  [513,] 0.40696225 0.4276745 0.5215600 0.5716671 0.5810858 0.5955532 0.6257787 #>  [514,] 0.34342133 0.5269621 0.5614093 0.6416871 0.6463301 0.6766475 0.7007910 #>  [515,] 0.82552967 0.9122565 0.9255566 0.9391851 1.1556043 1.1568003 1.1628984 #>  [516,] 0.22273120 0.3472932 0.4064602 0.4394362 0.4823878 0.5625144 0.5679658 #>  [517,] 0.39316352 0.5024879 0.5545968 0.5756786 0.6668197 0.6728291 0.6754280 #>  [518,] 0.69080134 0.7937504 0.8392117 0.8679775 0.9055940 1.0187672 1.0214631 #>  [519,] 0.89487149 1.1709849 1.1732449 1.1800110 1.2391330 1.2473899 1.2994791 #>  [520,] 0.34935521 0.4372617 0.5065555 0.6340392 0.6993343 0.7237911 0.7355680 #>  [521,] 0.40173365 0.4507683 0.5231356 0.5858714 0.6192745 0.6273253 0.6344261 #>  [522,] 0.53665353 0.7200232 0.8037298 0.9355013 0.9819570 0.9974956 1.0825213 #>  [523,] 0.26085256 0.2666116 0.3648616 0.4472674 0.5054876 0.5571291 0.6340425 #>  [524,] 0.30026040 0.3191782 0.3698023 0.4114053 0.4304209 0.4459946 0.4745771 #>  [525,] 0.69535619 0.6978772 1.0467573 1.0552778 1.1018219 1.1922648 1.1962325 #>  [526,] 0.34027889 0.3863638 0.3989702 0.4024048 0.4030674 0.4313606 0.5146430 #>  [527,] 0.40508723 0.4573864 0.4818782 0.5328718 0.5665792 0.6146280 0.6276516 #>  [528,] 0.15731943 0.3916305 0.4064602 0.4423237 0.4530333 0.4591152 0.4710685 #>  [529,] 0.20614471 0.3804686 0.4990049 0.5217977 0.5253350 0.6020452 0.6038542 #>  [530,] 1.28147277 1.2867421 1.2990673 1.4622168 1.4806866 1.5319218 1.5468904 #>  [531,] 0.81590473 0.9139913 0.9208336 0.9360585 1.1365384 1.2036518 1.2156433 #>  [532,] 0.58163779 0.6362864 0.6749445 0.6779852 0.6931391 0.7293563 0.7405964 #>  [533,] 0.29508847 0.4243138 0.5075274 0.5413974 0.6330890 0.6635042 0.7476459 #>  [534,] 0.32139332 0.5161111 0.5693103 0.5703191 0.5831915 0.6480187 0.6790055 #>  [535,] 0.46447433 0.7487080 0.9732370 0.9975785 1.0135068 1.1002687 1.1415680 #>  [536,] 0.24846187 0.3266174 0.4009426 0.4642986 0.5147970 0.5748470 0.6045987 #>  [537,] 0.37879206 0.4408829 0.5289164 0.5698263 0.5722172 0.6240448 0.6306941 #>  [538,] 0.73515051 0.8495925 0.9406855 1.0526488 1.0562971 1.0819894 1.1192026 #>  [539,] 0.20650975 0.3994535 0.5437859 0.5665792 0.7133366 0.7398393 0.7550707 #>  [540,] 0.32023580 0.4269869 0.4304672 0.5361953 0.5827444 0.7280906 0.8048877 #>  [541,] 0.28291139 0.4065042 0.4075831 0.4779620 0.5063394 0.5503489 0.5693330 #>  [542,] 0.34240678 0.4891977 0.5419283 0.6525173 0.7432952 0.7487837 0.7822400 #>  [543,] 0.52499783 0.5778158 0.6187981 0.6320336 0.6371931 0.6887836 0.7042461 #>  [544,] 0.34866896 0.3616812 0.3825511 0.4773891 0.5023045 0.5567886 0.5615960 #>  [545,] 0.72038230 0.7431594 0.9036787 0.9943253 1.0233516 1.0338298 1.0754702 #>  [546,] 0.36457262 0.3718378 0.3956874 0.4025749 0.4594928 0.5349021 0.5497516 #>  [547,] 0.46716596 0.5104199 0.6837723 0.6886995 0.7689377 0.7778398 0.8467664 #>  [548,] 0.30325774 0.3048262 0.3495992 0.3643191 0.3668148 0.3842687 0.4337196 #>  [549,] 1.05130943 1.1159268 1.1369643 1.1565434 1.3135553 1.3285582 1.4253205 #>  [550,] 0.24165860 0.6235538 0.6698254 0.6931391 0.7500664 0.8279883 0.9380138 #>  [551,] 0.85619088 0.8674669 0.9287437 0.9715110 1.0624140 1.1565356 1.2197037 #>  [552,] 0.42113276 0.6505910 0.6816261 0.7620724 0.8167748 0.8602753 0.8633028 #>  [553,] 0.35393398 0.3832512 0.4218518 0.5042761 0.5506531 0.5581659 0.5780268 #>  [554,] 0.45477461 0.5238625 0.5319674 0.5779095 0.5863690 0.6025080 0.6418303 #>  [555,] 1.25902206 1.3229412 1.4870050 1.5181519 1.5429555 1.5670651 1.6610485 #>  [556,] 0.42420889 0.4397551 0.5217977 0.5274575 0.5420996 0.5528495 0.5792122 #>  [557,] 0.93403322 0.9589670 1.0090208 1.1576201 1.1608667 1.1749919 1.1935316 #>  [558,] 0.34264737 0.4613004 0.4633913 0.4691448 0.5222115 0.5530794 0.5642744 #>  [559,] 0.57007312 0.8654109 0.9024974 0.9467025 0.9606214 1.0548680 1.0627894 #>  [560,] 0.25720415 0.2594789 0.3311112 0.4520382 0.5165928 0.5497516 0.5618666 #>  [561,] 0.13417734 0.5569586 0.8207290 0.8645129 0.9287802 0.9494851 0.9655449 #>  [562,] 0.49845342 0.5238625 0.5810847 0.5825721 0.5895697 0.6470767 0.6749313 #>  [563,] 0.42549102 0.5048420 0.5135103 0.5194018 0.5268980 0.5314275 0.6087205 #>  [564,] 0.37507104 0.3880099 0.4406565 0.4549890 0.4871213 0.5213529 0.5222103 #>  [565,] 0.31553848 0.5672706 0.5785520 0.5869583 0.6029509 0.6048515 0.6057019 #>  [566,] 0.40243787 0.4063896 0.5126355 0.5701223 0.5912974 0.6503623 0.6610116 #>  [567,] 0.27573818 0.4827227 0.6563291 0.6840700 0.6966287 0.7229740 0.7303646 #>  [568,] 0.67766120 0.8480815 0.8483713 0.8781584 0.9624458 0.9739285 1.0083676 #>  [569,] 0.41785115 0.5015444 0.5905038 0.5966504 0.6619467 0.6782467 0.6976048 #>  [570,] 0.42241803 0.5812003 0.5822986 0.5999945 0.6510407 0.6694870 0.6732422 #>  [571,] 0.43602481 0.5710183 0.6067150 0.7992546 0.8067230 0.8099444 0.8999700 #>  [572,] 0.38233230 0.4065042 0.4581064 0.4842403 0.5289164 0.5771239 0.5955602 #>  [573,] 0.30459140 0.5250534 0.5625160 0.5968549 0.6399047 0.6683726 0.7146127 #>  [574,] 1.08649474 1.5646571 1.6486037 1.7516448 1.7688186 1.8727673 1.9124014 #>  [575,] 0.29973131 0.3023215 0.4487712 0.4834340 0.5353446 0.5545968 0.5609559 #>  [576,] 0.87947133 0.9065514 0.9553053 1.0116575 1.0293066 1.1370353 1.1726166 #>  [577,] 0.37159041 0.5187702 0.5275619 0.5590130 0.6123364 0.6361442 0.6918395 #>  [578,] 0.55014216 0.5868728 0.6236231 0.6340392 0.6734542 0.6966672 0.7083988 #>  [579,] 0.18871180 0.3429692 0.4674931 0.5140597 0.5182528 0.5811879 0.6208925 #>  [580,] 0.61510891 0.6318824 0.6768372 0.7808688 0.8082989 0.8737461 0.8894643 #>  [581,] 0.74431259 0.7532233 0.7536862 0.7970489 0.8062327 0.8069091 0.8193690 #>  [582,] 0.46447433 0.9500280 0.9682057 0.9826809 1.1364517 1.1625969 1.2434843 #>  [583,] 0.39945351 0.4818782 0.4971412 0.4989027 0.6227357 0.7219158 0.7301039 #>  [584,] 0.35827579 0.4873718 0.5352591 0.5537315 0.5883087 0.6143539 0.6199954 #>  [585,] 0.54196698 0.5672865 0.5723630 0.6283531 0.6347652 0.6407934 0.6483701 #>  [586,] 0.35264028 0.5167653 0.5307206 0.5917791 0.6416871 0.6732496 0.7462097 #>  [587,] 0.42846122 0.6052702 0.6303056 0.6462678 0.7156329 0.7661073 0.7913077 #>  [588,] 1.36872737 1.5124443 1.6300139 1.6697704 1.7089104 1.7215760 1.7704119 #>  [589,] 0.64209168 0.7271400 0.9525371 0.9707910 1.0013507 1.0067834 1.0215131 #>  [590,] 0.55001713 0.5789652 0.7063320 0.8015997 0.8133781 0.8500430 0.9084828 #>  [591,] 0.53733812 0.6890628 0.7056536 0.7068837 0.7313563 0.7327711 0.7491104 #>  [592,] 0.29387133 0.4398223 0.4752273 0.4773891 0.4822139 0.5621342 0.5744590 #>  [593,] 0.11535823 0.3863421 0.6283531 0.6568282 0.7012333 0.7227883 0.7300131 #>  [594,] 0.90704551 0.9497637 1.0513094 1.2565172 1.2708629 1.3666404 1.4498376 #>  [595,] 0.82254504 0.8775587 0.8996195 0.9089381 0.9693169 0.9730782 0.9819594 #>  [596,] 0.11535823 0.4432289 0.6710638 0.7112927 0.7153526 0.7407685 0.7785675 #>  [597,] 0.48091233 0.4861806 0.5807119 0.6402971 0.7312346 0.8064493 0.8072281 #>  [598,] 0.31893583 0.4771287 0.5132988 0.5189211 0.5511995 0.5586493 0.5601007 #>  [599,] 0.86868941 0.8999443 0.9421143 1.1347023 1.1379155 1.1478498 1.1919285 #>  [600,] 0.46864103 0.4716000 0.5033797 0.5791356 0.6167056 0.6249196 0.6448055 #>  [601,] 0.43279567 0.4832475 0.5328506 0.5330563 0.6064883 0.7136706 0.7795614 #>  [602,] 0.39853643 0.5352591 0.6356705 0.6548853 0.7314152 0.7520256 0.7601323 #>  [603,] 0.33930765 0.3842687 0.3998397 0.4061321 0.4224923 0.4284649 0.4388965 #>  [604,] 0.45139826 0.4847198 0.5232824 0.5697903 0.5948764 0.6338327 0.6391319 #>  [605,] 0.97828220 1.1290419 1.1409881 1.1762431 1.2371514 1.3420283 1.3965136 #>  [606,] 0.69695618 0.8470422 1.0791481 1.0989287 1.1028773 1.1597130 1.2228223 #>  [607,] 0.31553848 0.4477177 0.4805899 0.5896980 0.5915580 0.5925684 0.6177790 #>  [608,] 0.18280805 0.4613004 0.4836059 0.5065555 0.5838226 0.5966250 0.6271297 #>  [609,] 0.16929811 0.5835169 0.5949242 0.6685777 0.7002070 0.7798164 0.8457446 #>  [610,] 0.42846122 0.6290846 0.6515039 0.6869030 0.7132418 0.7164118 0.7363081 #>  [611,] 0.37594573 0.3848405 0.5652736 0.5712837 0.6047744 0.6317960 0.6431094 #>  [612,] 0.37528214 0.4805899 0.5785520 0.6536458 0.7652011 0.8395698 0.8453205 #>  [613,] 0.67774927 0.7396922 0.7638219 0.7987312 0.8331766 0.8445445 0.8582253 #>  [614,] 0.46353982 0.5917791 0.7847545 0.7891066 0.7916557 0.8009135 0.8076426 #>  [615,] 0.27773913 0.4803706 0.5864271 0.6167856 0.6709305 0.6728291 0.8122926 #>  [616,] 0.48637182 0.6504794 0.6541596 0.6664681 0.8263667 0.8338196 0.8629877 #>  [617,] 0.33868478 0.5263012 0.6652084 0.6806155 0.7362757 0.7473767 0.7910825 #>  [618,] 0.18601227 0.2383821 0.3116947 0.3984012 0.4170912 0.4192498 0.4526704 #>  [619,] 1.29778750 1.4916059 1.6763049 1.6894556 1.7717039 1.7783649 1.8405052 #>  [620,] 0.58573286 0.8821511 0.9638192 1.0051570 1.0348166 1.0606414 1.1592044 #>  [621,] 0.51776404 0.5901139 0.6521198 0.8322582 0.8403663 0.9286943 0.9459796 #>  [622,] 0.33092590 0.7461333 0.7630995 0.7654018 0.7962858 0.8537300 0.8650212 #>  [623,] 0.36444964 0.4147339 0.4277021 0.5486014 0.5547869 0.5574164 0.5810372 #>  [624,] 0.42158735 0.5257558 0.6112225 0.7010940 0.7737065 0.8552799 0.9098889 #>  [625,] 0.74790676 0.7693976 0.8591651 0.9287261 0.9563030 0.9641251 0.9755043 #>  [626,] 0.33092947 0.6375701 0.6860114 0.8014848 0.8432941 0.8641736 0.9264584 #>  [627,] 0.35600550 0.3758511 0.4043751 0.5304585 0.6148055 0.6340425 0.6522771 #>  [628,] 0.25339212 0.5715736 0.6067150 0.6261677 0.7237275 0.7258391 0.7825964 #>  [629,] 1.32184016 1.3292565 1.3452973 1.4239215 1.4826011 1.5111019 1.5584390 #>  [630,] 0.35897409 0.4444882 0.4663683 0.5533426 0.5753246 0.5872614 0.6555460 #>  [631,] 0.44964658 0.5635615 0.5838226 0.5868728 0.5905398 0.6152639 0.6264800 #>  [632,] 0.27573818 0.4813034 0.4866123 0.7280764 0.7285102 0.7896278 0.7922720 #>  [633,] 0.37224233 1.0735777 1.1529215 1.1774157 1.2061133 1.2913495 1.3231232 #>  [634,] 0.54678002 0.5583359 0.6020131 0.6681976 0.7106085 0.7243822 0.7357971 #>  [635,] 0.29962323 0.5330563 0.5574164 0.5604170 0.6316153 0.6817282 0.6896799 #>  [636,] 0.29946918 0.3313922 0.3413211 0.3658483 0.3830789 0.4363457 0.4689268 #>  [637,] 0.54198304 0.5643167 0.6285037 0.6347492 0.6356934 0.6570822 0.6608001 #>  [638,] 0.31108466 0.8240857 0.9553075 1.0058238 1.0135525 1.0202775 1.0591494 #>  [639,] 0.31782818 0.4006306 0.5644081 0.5781872 0.5888938 0.5926168 0.6363925 #>  [640,] 0.62138550 0.6217771 0.8765006 0.8901125 0.9171867 0.9175227 0.9355375 #>  [641,] 0.34582608 0.3863638 0.4067909 0.4424147 0.4699783 0.4799538 0.4865405 #>  [642,] 0.78937937 0.9309806 0.9683655 1.0193555 1.0625110 1.0747684 1.1110893 #>  [643,] 0.30134733 0.3694050 0.5059486 0.5069794 0.5402376 0.5522334 0.6612277 #>  [644,] 0.48767053 0.5218055 0.6098160 0.6908013 0.8876926 0.9061944 0.9086679 #>  [645,] 0.43686997 0.6339125 0.8956064 0.9437206 1.0225190 1.1503580 1.1527300 #>  [646,] 0.41496202 0.6481584 0.6884299 0.8013656 0.8149187 0.8230886 0.8333445 #>  [647,] 1.17644407 1.4841804 1.5363792 1.8060969 1.8534263 1.8981949 2.0992999 #>  [648,] 0.49006846 0.5952990 0.6083849 0.6344628 0.6845512 0.7283313 0.7478223 #>  [649,] 0.48792994 0.5229316 0.7252673 0.7599689 0.8061995 0.8243765 0.8966186 #>  [650,] 0.33669177 0.4466004 0.5263012 0.6040227 0.6448699 0.6807108 0.6840093 #>  [651,] 0.49008505 0.5151476 0.5421475 0.5547587 0.7350032 0.7789432 0.8268002 #>  [652,] 0.40131670 0.4117065 0.4324225 0.4942985 0.5157322 0.5906525 0.5917148 #>  [653,] 0.61436212 0.6716419 0.8010496 0.8137124 0.8438088 0.8700235 0.8895823 #>  [654,] 0.45477461 0.5434670 0.5645913 0.5718318 0.6272494 0.6419691 0.6549053 #>  [655,] 0.08544083 0.2864627 0.2933482 0.4568293 0.5479543 0.5785703 0.5819753 #>  [656,] 1.53213531 1.5909445 1.7397002 1.7628477 1.8084856 1.8330736 1.8642106 #>  [657,] 0.25604212 0.3893172 0.4507683 0.5286882 0.6067249 0.6788000 0.7001325 #>  [658,] 0.33868478 0.4279020 0.4466004 0.5864665 0.6027740 0.6528855 0.6888400 #>  [659,] 0.65558853 0.9352097 1.0116924 1.2201629 1.2826413 1.3037514 1.3207007 #>  [660,] 0.31058601 0.4631771 0.5998045 0.6200753 0.6420782 0.6462257 0.7239041 #>  [661,] 0.36487903 0.3765062 0.3916305 0.4344987 0.4411883 0.4688037 0.5442770 #>  [662,] 0.48932844 0.6722302 0.7053552 0.7130093 0.7351505 0.7762959 0.8048912 #>  [663,] 0.26006760 0.5340676 0.6346499 0.6680478 0.6858901 0.8505587 0.8597710 #>  [664,] 0.47354357 0.4799699 0.5731372 0.6339035 0.6343330 0.7294407 0.7313129 #>  [665,] 1.18424966 1.4153072 1.4254611 1.5788336 1.5920200 1.6353545 1.8414840 #>  [666,] 1.26177834 1.2902591 1.4468127 1.5244852 1.6526686 1.7412011 1.7522779 #>  [667,] 0.34296919 0.3749199 0.5442580 0.5504247 0.5675077 0.5868875 0.6044210 #>  [668,] 0.55661137 0.8643764 0.9218280 1.0155976 1.0720536 1.0788072 1.1006608 #>  [669,] 0.43806191 0.5257558 0.5530351 0.6670700 0.6846644 0.7360550 0.7481727 #>  [670,] 0.19888002 0.3220688 0.4224858 0.4568293 0.4975911 0.5220205 0.5525568 #>  [671,] 0.66323646 0.6703717 0.7084110 0.7367137 0.9102710 0.9611981 0.9866953 #>  [672,] 0.61961135 0.7080261 0.7366693 0.8136697 0.8161899 0.8336523 0.8675669 #>  [673,] 0.32060926 0.3765190 0.4555137 0.5598570 0.6572207 0.6746397 0.6916397 #>  [674,] 0.56727156 0.6241039 0.7528377 0.7549295 0.8217054 0.8609326 0.9002340 #>  [675,] 0.99137983 1.0051570 1.0096141 1.1411890 1.2252998 1.2776198 1.3064138 #>  [676,] 0.85066899 0.8752043 0.9254196 0.9370971 1.0638980 1.0942173 1.1145150 #>  [677,] 0.41935706 0.4673104 0.5669621 0.5979694 0.6177792 0.6335641 0.6708195 #>  [678,] 0.72479909 0.8005655 0.8554493 0.9230772 1.1029632 1.2397212 1.2942483 #>  [679,] 0.34342133 0.4914107 0.5501300 0.5578627 0.5604170 0.6415046 0.7023179 #>  [680,] 0.99756444 1.0083020 1.1637118 1.2293886 1.2318559 1.3209446 1.3238034 #>  [681,] 0.63416530 0.6924577 0.7463931 1.0511642 1.0839281 1.1188125 1.1747184 #>  [682,] 0.60865976 0.6901269 0.7063177 0.8423590 0.8573370 0.9099810 0.9187407 #>  [683,] 0.60347310 0.7443126 0.9406855 1.0662126 1.1703859 1.2169423 1.2414309 #>  [684,] 0.44890223 0.4825827 0.5327789 0.5433775 0.5479119 0.5987656 0.6546952 #>  [685,] 0.49845342 0.5141639 0.6160763 0.6653122 0.6714672 0.6766853 0.7166713 #>  [686,] 0.16296593 0.4295153 0.4574674 0.4862872 0.5436167 0.5663500 0.5768957 #>  [687,] 0.76571114 0.8679775 0.9630949 1.0854836 1.0903934 1.1163656 1.1232144 #>  [688,] 0.45901826 0.6126128 0.6273204 0.6492554 0.6927204 0.7121796 0.7398998 #>  [689,] 0.92053063 1.0746196 1.1098600 1.1175455 1.1233589 1.1897465 1.2171665 #>  [690,] 0.35692745 0.3998397 0.4123737 0.4414963 0.4673104 0.4799266 0.4989613 #>  [691,] 0.40508723 0.5069476 0.5087867 0.5643357 0.5674844 0.5697032 0.5823923 #>  [692,] 0.34422652 0.5440939 0.6095643 0.6121251 0.6337690 0.6394821 0.6546952 #>  [693,] 0.25075919 0.3032577 0.3218339 0.4324225 0.4411883 0.4500234 0.5079077 #>  [694,] 0.38598789 0.8090152 0.9190227 0.9215204 0.9698787 0.9792484 1.0686900 #>  [695,] 0.74599476 0.7618934 0.7994912 0.8186244 0.9175227 0.9655382 0.9840933 #>  [696,] 0.36608229 0.4531979 0.5164233 0.5453938 0.5625212 0.5635872 0.5862059 #>  [697,] 0.45529962 0.6712633 0.7004517 0.7049389 0.7164892 0.7235837 0.7410284 #>  [698,] 0.51389332 0.6086598 0.6278528 0.7121796 0.7147530 0.7238799 0.7360550 #>  [699,] 0.51776404 0.7016802 0.7254055 0.7825964 0.8039683 0.8191021 0.8474943 #>  [700,] 0.61526802 0.7870254 0.8008392 0.8167748 0.8584861 0.9338985 0.9679854 #>  [701,] 0.33196298 0.4631748 0.4642986 0.5035784 0.5456831 0.5491864 0.5666743 #>  [702,] 0.34104055 0.3647065 0.4134996 0.4398223 0.4684802 0.4946221 0.5822481 #>  [703,] 0.52445070 0.6051547 0.6477647 0.6732422 0.7320013 0.7462097 0.7731437 #>  [704,] 0.43777788 0.4753383 0.5442765 0.5442770 0.5489369 0.5575092 0.5901530 #>  [705,] 0.89125995 0.9065514 1.5325166 1.6441944 1.6545995 1.6553271 1.6667017 #>  [706,] 1.28674213 1.3154743 1.3392652 1.4918531 1.4962550 1.5325166 1.6092563 #>  [707,] 0.34766500 0.4846139 0.5325019 0.5333996 0.5889499 0.6063497 0.6144228 #>  [708,] 0.29959076 0.3193055 0.3643191 0.4224923 0.4270246 0.4500234 0.4799266 #>  [709,] 0.36457262 0.4820576 0.5448162 0.5486485 0.5764444 0.6252183 0.6460175 #>  [710,] 0.73816862 0.9822703 1.0009898 1.0223311 1.0812478 1.1391381 1.1522637 #>  [711,] 0.27239906 0.3908526 0.4554391 0.4942985 0.5593375 0.5625212 0.6547009 #>  [712,] 0.28785119 0.9269673 0.9986696 1.0591494 1.1310162 1.1978062 1.2158564 #>  [713,] 0.69887035 0.7112927 0.7227883 0.7232366 0.8035284 0.8662747 0.8706408 #>  [714,] 0.36940497 0.4202556 0.5161111 0.5296953 0.5384689 0.5407572 0.5518570 #>  [715,] 0.32970004 0.5001766 0.5233893 0.5533357 0.5805031 0.6050294 0.6396351 #>  [716,] 0.38360427 0.6099702 0.7144482 0.7262614 0.7751843 0.8754865 0.8765006 #>  [717,] 0.34781374 0.3759457 0.4035013 0.4579625 0.5488137 0.6063497 0.6167342 #>  [718,] 0.40679149 0.4735436 0.6078496 0.6442137 0.6675939 0.6718749 0.6935111 #>  [719,] 0.58987284 0.6063047 0.7623330 0.8243765 0.8651248 0.8879051 0.8948496 #>  [720,] 0.30555370 0.4452496 0.4487712 0.4500631 0.4629733 0.4929008 0.5030347 #>  [721,] 0.58788433 0.6494120 0.6649972 0.6765891 0.6893882 0.6904323 0.7106085 #>  [722,] 0.39623116 0.4775935 0.7164118 0.7238546 0.7318974 0.7669144 0.7753440 #>  [723,] 0.64659236 0.6954650 0.6998271 0.7016749 0.7857689 0.8019921 0.8091816 #>  [724,] 0.30264243 0.4766088 0.5151719 0.5655272 0.6311530 0.6394497 0.6790055 #>  [725,] 0.14461188 0.4917350 0.5346383 0.5693330 0.6334309 0.6772253 0.6935582 #>  [726,] 0.46353982 0.6548131 0.7732120 0.8709850 0.8781655 0.9683655 0.9762255 #>  [727,] 0.34759417 0.4170912 0.4408829 0.4500631 0.4749561 0.4962561 0.5443088 #>  [728,] 0.23685811 0.3804686 0.4838184 0.5604097 0.5690710 0.5691706 0.5839470 #>  [729,] 0.48767053 0.5174461 0.7142839 0.7358804 0.7824395 0.7937504 0.8078596 #>  [730,] 0.50125819 0.5401884 0.6394719 0.6465128 0.6844208 0.7762748 0.7856213 #>  [731,] 0.43013314 0.9006101 0.9205306 1.0894392 1.1220984 1.1260277 1.1725851 #>  [732,] 0.30986002 0.3687165 0.5708244 0.6268780 0.6474317 0.6910187 0.7635431 #>  [733,] 0.50218625 0.7052823 0.7306579 0.7330173 0.7639954 0.8009995 0.8679856 #>  [734,] 0.39079975 0.4246311 0.4594928 0.5035784 0.5584804 0.5700364 0.6248389 #>  [735,] 0.69271422 0.7027731 0.9237683 1.0799884 1.1532653 1.1534479 1.1556570 #>  [736,] 0.34766500 0.4657270 0.5916418 0.6222117 0.6404003 0.6538468 0.6614503 #>  [737,] 0.37596713 0.4782657 0.7474394 0.7531800 0.8258309 0.8355531 0.9236042 #>  [738,] 0.50402351 0.5080027 0.6151089 0.6236608 0.6779852 0.7445699 0.7575674 #>  [739,] 0.33718787 0.4863718 0.5217794 0.5791356 0.6059702 0.6270969 0.6513659 #>  [740,] 0.48618060 0.6126578 0.6593784 0.7981197 0.8126673 0.8127698 0.8350854 #>  [741,] 0.29873064 0.3934025 0.4989346 0.5432454 0.5484948 0.5764887 0.5781872 #>  [742,] 0.32139332 0.5518570 0.5590130 0.6069065 0.7020956 0.7022401 0.7158041 #>  [743,] 0.85151083 1.0007385 1.2722068 1.2880500 1.3717955 1.5311802 1.5782508 #>  [744,] 0.59758969 0.6947712 0.7181151 0.7229740 0.7395617 0.8014848 0.8404344 #>  [745,] 0.53229894 0.6019804 0.6076163 0.7263098 0.8219144 0.8579549 0.8994181 #>  [746,] 0.80750069 0.8546952 0.9006101 0.9766960 0.9922516 1.0152451 1.1055486 #>  [747,] 0.36168124 0.5023793 0.6000704 0.6088082 0.6276368 0.6287242 0.6373739 #>  [748,] 0.38618794 0.5547869 0.5585734 0.6521396 0.6643771 0.7072909 0.7384947 #>  [749,] 0.53512120 0.6364434 0.6722302 0.7289870 0.7327711 0.7580771 0.8592331 #>  [750,] 0.28766833 0.3849572 0.4225965 0.4781089 0.5202629 0.5664358 0.5948764 #>  [751,] 0.41170654 0.4281213 0.4554391 0.4564311 0.5258425 0.5268087 0.5449501 #>  [752,] 0.51201544 0.5583359 0.5735417 0.7210900 0.7244777 0.7346327 0.7524719 #>  [753,] 0.45807248 0.5419846 0.5502167 0.6058215 0.6313465 0.6343352 0.7500511 #>  [754,] 0.55242643 0.5591005 0.5615950 0.5695412 0.6078280 0.6264794 0.6264800 #>  [755,] 0.34935521 0.4836059 0.5259614 0.5723091 0.6640392 0.7356758 0.7388085 #>  [756,] 0.40789365 0.4782657 0.5142227 0.8133001 0.9089069 1.0253268 1.0680677 #>  [757,] 1.16974809 1.1978062 1.2759090 1.2803936 1.3477496 1.3924978 1.6409317 #>  [758,] 0.53619531 0.6644397 0.7799036 0.8085255 0.9190203 0.9890679 1.0162845 #>  [759,] 0.40350135 0.5654577 0.6431094 0.6859595 0.7172087 0.7465174 0.7509740 #>  [760,] 0.40751523 0.5274575 0.5970436 0.6105727 0.6632292 0.6759128 0.6770216 #>  [761,] 0.48341376 0.5080027 0.5455660 0.5625967 0.6318824 0.7240737 0.7274239 #>  [762,] 0.76966248 1.0272301 1.0680424 1.1705416 1.2579621 1.2954550 1.3155902 #>  [763,] 0.34503482 0.3893773 0.5970436 0.6434003 0.7457160 0.7973839 0.8978470 #>  [764,] 0.35149711 0.3956874 0.4631748 0.4638688 0.4968684 0.5147970 0.5448162 #>  [765,] 0.42698693 0.5101491 0.5138488 0.6084074 0.6644278 0.7655895 0.7711291 #>  [766,] 0.39986030 0.5212349 0.5346140 0.5681569 0.5798351 0.5842990 0.6116459 #>  [767,] 0.54228723 0.6019804 0.6543563 0.8816813 0.8948148 0.9123096 0.9262917 #>  [768,] 0.56869969 0.9802294 1.1659774 1.2019583 1.2555447 1.3350349 1.3695081 #>  [769,] 0.68203050 0.9993307 1.1852454 1.1866112 1.2478162 1.2573530 1.2648291 #>  [770,] 0.42324862 0.4446694 0.4691448 0.4809781 0.4870051 0.5585371 0.5912269 #>  [771,] 0.51881861 0.5619283 0.5927246 0.6249742 0.6457572 0.6526989 0.6740299 #>  [772,] 0.31148671 0.3893773 0.5892559 0.9092230 0.9502996 0.9555825 0.9835546 #>  [773,] 0.38991822 0.4636614 0.6148532 0.6257787 0.6377575 0.6554038 0.6566848 #>  [774,] 0.24075777 0.2862749 0.3758511 0.4472674 0.4546499 0.5604097 0.6185100 #>  [775,] 0.79288469 0.9780627 1.0106272 1.0664593 1.1014515 1.2244247 1.2538885 #>  [776,] 0.51642327 0.5434670 0.6602556 0.6903387 0.6976195 0.7169774 0.7306912 #>  [777,] 0.54462848 0.5584983 0.6051189 0.6403181 0.6497451 0.7661711 0.7728951 #>  [778,] 0.41113854 0.5314275 0.5805031 0.5947842 0.6477404 0.7224203 0.7266646 #>  [779,] 0.33436469 0.3777199 0.3912774 0.4467585 0.4975911 0.4977365 0.5232031 #>  [780,] 0.59665038 0.7221702 0.7265033 0.7361184 0.7421352 0.7817140 0.7955522 #>  [781,] 0.38780816 0.6696849 0.6890628 0.7532233 0.8284561 0.9346521 0.9750500 #>  [782,] 0.54018842 0.5493058 0.6041251 0.6356028 0.7869795 0.8439238 0.8790677 #>  [783,] 0.16619941 0.3251583 0.3691416 0.3957091 0.4698955 0.4923408 0.5632561 #>  [784,] 0.22222826 0.3714490 0.3943401 0.4708045 0.7087844 0.7169522 0.7631104 #>  [785,] 0.65194080 0.7095791 0.7222136 0.7406387 0.7671723 0.8072467 0.8993701 #>  [786,] 0.34264737 0.3779301 0.5333373 0.5372271 0.5422024 0.5606503 0.6316153 #>  [787,] 0.65558853 0.7601323 0.8827590 0.9120658 0.9375547 0.9996079 1.0352256 #>  [788,] 0.23658899 0.5197249 0.5357461 0.5869583 0.6606142 0.6677110 0.6687063 #>  [789,] 0.70461973 0.8027005 0.9957575 1.0527347 1.0778273 1.1238892 1.1399878 #>  [790,] 0.25947894 0.4578047 0.4600519 0.4685664 0.5077420 0.5766850 0.5971114 #>  [791,] 0.35897409 0.3946734 0.4229827 0.5551341 0.6546106 0.6600438 0.6966287 #>  [792,] 0.66550452 0.6956635 0.7524955 0.8395049 0.8470422 0.9272315 0.9793392 #>  [793,] 0.30309278 0.3980626 0.3998966 0.3999201 0.4481610 0.5249978 0.6438697 #>  [794,] 0.47881843 0.5652814 0.7424189 0.7514239 0.7563836 0.8092447 0.8357378 #>  [795,] 0.29855574 0.4308553 0.5440939 0.5454901 0.6045832 0.6196849 0.6345182 #>  [796,] 0.91882628 0.9785736 0.9861428 1.1249035 1.1745562 1.2488798 1.3422482 #>  [797,] 0.53713931 0.6122966 0.6643771 0.6702381 0.7231840 0.7300003 0.7397143 #>  [798,] 0.91400900 0.9648979 0.9757097 1.1671053 1.1883595 1.2474017 1.2952700 #>  [799,] 0.32784893 0.3311112 0.4526704 0.4685664 0.4835808 0.5043499 0.5231695 #>  [800,] 0.31532870 0.5307206 0.7300444 0.7320013 0.8428777 0.8445635 0.8767427 #>  [801,] 0.32610793 0.5895697 0.5913918 0.6025080 0.6113589 0.6354869 0.7005309 #>  [802,] 0.46716596 0.6872063 0.7794306 0.8037309 0.9727051 0.9915576 0.9920253 #>  [803,] 0.34050849 0.6653782 0.6935282 0.7741157 0.7834199 0.8506474 0.8991211 #>  [804,] 0.32970004 0.3983763 0.4674113 0.4916948 0.5122911 0.5790197 0.6509513 #>  [805,] 0.62487619 0.7027731 0.7864133 0.8078630 0.8335805 0.8431260 0.8511216 #>  [806,] 0.66272253 0.7639473 0.8725997 0.9656245 1.0260372 1.0277987 1.0674772 #>  [807,] 0.38480755 0.4741289 0.4925790 0.5367195 0.5407363 0.6377575 0.6420782 #>  [808,] 0.48381839 0.4948303 0.5992748 0.6166969 0.6225700 0.6408059 0.6438269 #>  [809,] 0.38932568 0.3903293 0.4284649 0.5336108 0.5736041 0.5839698 0.6148612 #>  [810,] 0.47496143 0.5151476 0.5883969 0.5892093 0.6078770 0.6839490 0.7403527 #>  [811,] 0.53453228 0.6521198 0.6690113 0.7237275 0.7292472 0.7574055 0.8039683 #>  [812,] 0.16929811 0.5048724 0.5697032 0.6345628 0.6739372 0.7078623 0.7510540 #>  [813,] 0.31148671 0.3450348 0.6113323 0.6614269 0.6759128 0.7463110 0.8799760 #>  [814,] 0.20161447 0.3410214 0.3989702 0.4366822 0.4374332 0.4907600 0.5023045 #>  [815,] 0.54093591 0.6212609 0.7801072 0.8136697 0.8297121 0.9641251 0.9725615 #>  [816,] 0.34129910 0.4235419 0.4955260 0.5513062 0.5672865 0.6010068 0.6457096 #>  [817,] 0.37588952 0.4239172 0.4925790 0.5069794 0.6148532 0.6175874 0.6530589 #>  [818,] 0.34734509 0.8521091 0.9827832 1.0568555 1.0586294 1.1642416 1.1772764 #>  [819,] 0.47759346 0.7217690 0.7665979 0.8149187 0.8321415 0.8610583 0.8707663 #>  [820,] 0.33092947 0.4588044 0.6581530 0.7408282 0.7588632 0.8032727 0.8043457 #>  [821,] 0.54687917 0.6620229 0.6731753 0.7288418 0.8524562 0.9416253 0.9859991 #>  [822,] 0.51041807 0.5119024 0.5466086 0.5565633 0.5662752 0.5729808 0.6050286 #>  [823,] 0.23106474 0.3540537 0.4513983 0.4660460 0.4781089 0.5077690 0.5488143 #>  [824,] 0.54457109 0.6755831 0.8032048 0.8338446 0.9319528 0.9413638 0.9416253 #>  [825,] 0.13061122 0.4421644 0.5409830 0.6151400 0.6158018 0.6435954 0.6551620 #>  [826,] 0.17419950 0.2335392 0.3313922 0.4467585 0.4488100 0.4513248 0.4962471 #>  [827,] 0.45125763 0.4788184 0.6044928 0.6619020 0.6746946 0.6871362 0.7430178 #>  [828,] 0.38918244 0.4160594 0.4766088 0.5337112 0.5425612 0.5700284 0.5831915 #>  [829,] 0.49539689 0.5432507 0.6334309 0.6573624 0.6754067 0.6822000 0.7126731 #>  [830,] 0.39914055 0.5050641 0.5272820 0.5644349 0.6311530 0.7475012 0.7583889 #>  [831,] 0.53037714 0.6030567 0.6761925 0.6956814 0.7064371 0.7391641 0.7654889 #>  [832,] 0.44382305 0.4999664 0.5807119 0.6351146 0.6746498 0.7429804 0.7916758 #>  [833,] 0.50261406 0.7247991 0.7382198 0.8741562 1.0439954 1.1704855 1.1914338 #>  [834,] 0.18186047 0.4907001 0.6520662 0.7817140 0.8072460 0.8941462 1.0391488 #>  [835,] 0.61802421 0.6528855 0.6895849 0.7304002 0.7357277 0.7880458 0.8251498 #>  [836,] 0.42486898 0.4514502 0.4871213 0.5467800 0.5730138 0.5735417 0.6347118 #>  [837,] 0.28092925 0.4930073 0.5349896 0.5614835 0.6126578 0.6511429 0.6534424 #>  [838,] 0.40282053 0.4809123 0.5810858 0.6510229 0.6685825 0.6732356 0.7383942 #>  [839,] 0.38496196 0.5101110 0.5708244 0.7221789 0.7948805 0.8610583 0.8658206 #>  [840,] 0.32404982 0.3325388 0.4864943 0.5379615 0.5532625 0.5653496 0.5829375 #>  [841,] 0.52728204 0.5455660 0.5709033 0.6738098 0.7808688 0.8478643 0.8606728 #>  [842,] 0.52917074 0.7403966 0.8248379 0.8544181 0.9160643 0.9793376 1.0406982 #>  [843,] 0.69535619 0.8523020 1.0043311 1.0832496 1.2217769 1.3204309 1.3344112 #>  [844,] 0.86381210 0.9042188 1.0028138 1.0326897 1.1110176 1.1530363 1.1814741 #>  [845,] 0.50117412 0.5692838 0.5868875 0.6218197 0.6235538 0.6792255 0.6812418 #>  [846,] 0.62410394 0.6313465 0.6372165 0.6543033 0.6597332 0.7686738 0.7929727 #>  [847,] 0.25415830 0.3002604 0.3277909 0.3863718 0.3928123 0.4538972 0.4623607 #>  [848,] 0.71811509 0.7613872 0.7883295 0.8070140 0.8248379 0.8541618 0.9041100 #>  [849,] 0.70631771 0.8118967 0.9616841 0.9694936 0.9729601 0.9963350 1.0036584 #>  [850,] 0.45203818 0.4578047 0.4793743 0.5281111 0.5316358 0.5545999 0.5606413 #>  [851,] 0.90704551 1.1565434 1.4445215 1.4585118 1.5185738 1.5224158 1.6193172 #>  [852,] 0.44382305 0.6635499 0.6728641 0.7384286 0.7491104 0.7561875 0.7915871 #>  [853,] 0.16296593 0.4496979 0.4699849 0.4701307 0.4903084 0.5257289 0.6177762 #>  [854,] 0.43371962 0.4502945 0.5124457 0.5992748 0.6186316 0.6313232 0.6324682 #>  [855,] 0.18510757 0.4317372 0.4499187 0.4755679 0.4972498 0.5764910 0.5940908 #>  [856,] 0.08865645 0.4469061 0.4768325 0.6858781 0.6892686 0.7108557 0.7326769 #>  [857,] 0.14461188 0.5811624 0.5873168 0.5959760 0.6545760 0.6583143 0.6822000 #>  [858,] 0.77271915 0.9384899 0.9422325 0.9473157 0.9927875 0.9964504 1.0463418 #>  [859,] 0.33026440 0.4409480 0.5119024 0.5539936 0.5710827 0.5747487 0.5976508 #>  [860,] 0.38233230 0.4075831 0.4917350 0.5822986 0.5873168 0.6221411 0.6227682 #>  [861,] 0.75996892 0.7802318 0.9611981 0.9759354 1.1592731 1.1670774 1.1727666 #>  [862,] 0.27239906 0.3660823 0.3956817 0.4564311 0.5942647 0.6047820 0.6221293 #>  [863,] 0.31288933 0.3911555 0.4741289 0.5114489 0.5847135 0.5944485 0.6264794 #>  [864,] 0.89125995 1.0293066 1.1681514 1.2172460 1.4157763 1.4910354 1.4962550 #>  [865,] 0.89436729 1.1765847 1.1774157 1.2373248 1.2544635 1.3502429 1.4108525 #>  [866,] 0.45370339 0.4691419 0.4955260 0.5115096 0.5139471 0.5310282 0.5591005 #>  [867,] 0.50236109 0.5133701 0.5437859 0.5622567 0.6084074 0.6196434 0.6238583 #>  [868,] 0.34798686 0.3848075 0.3911555 0.4631771 0.5254999 0.5387586 0.6095902 #>  [869,] 0.45584320 0.4813455 0.5504247 0.6192745 0.6223161 0.6729321 0.6812418 #>  [870,] 0.39853643 0.4283042 0.5419670 0.5515686 0.5537315 0.6512449 0.6825860 #>  [871,] 0.32751396 0.6575639 0.6921565 0.7263098 0.7656206 0.8224695 0.8267659 #>  [872,] 0.77943056 0.8097277 1.0271117 1.1320131 1.1773237 1.1932501 1.3438871 #>  [873,] 0.26006760 0.6468342 0.6634010 0.7407962 0.7841265 0.8092447 0.8172907 #>  [874,] 0.17419950 0.2206664 0.3413211 0.3912774 0.3939860 0.4177423 0.4652422 #>  [875,] 0.70957910 0.7426730 0.7696625 0.8359232 0.9395566 0.9413638 0.9888923 #>  [876,] 0.31933515 0.3395552 0.5365636 0.5375569 0.5424029 0.5731372 0.5764910 #>  [877,] 0.39837631 0.4758310 0.5452690 0.5515136 0.6112225 0.6200715 0.6242807 #>  [878,] 0.42189081 0.4497793 0.5706711 0.6087190 0.6102396 0.6106182 0.6155770 #>  [879,] 0.41339320 0.5529016 0.5719970 0.5797437 0.7620724 0.7711291 0.8491100 #>  [880,] 0.60838494 0.6191701 0.7167455 0.7462867 0.7834199 0.8031892 0.8252856 #>  [881,] 0.39337518 0.7346080 0.7381686 0.7474394 0.7526839 0.7765238 0.8070360 #>  [882,] 0.30585138 0.3539013 0.4039438 0.5645623 0.5969058 0.6010691 0.6365686 #>  [883,] 0.69695618 0.7803329 0.7999596 0.8245752 0.8395049 0.9599190 0.9910540 #>  [884,] 0.32351332 0.6652639 0.7571346 0.8643764 0.8794713 0.9388867 0.9555171 #>  [885,] 0.39623116 0.4545532 0.5645623 0.6627575 0.6636398 0.7132418 0.7333471 #>  [886,] 0.40458422 0.6074109 0.6148612 0.6491762 0.6496536 0.6741421 0.6947118 #>  [887,] 0.75636479 0.7737925 0.8356718 0.8479164 0.8548777 0.8710037 0.8717237 #>  [888,] 0.47466013 0.4984357 0.5483818 0.6016457 0.6430138 0.6951886 0.7363081 #>  [889,] 0.40751523 0.5420996 0.5462935 0.6410571 0.7262614 0.7316500 0.7407469 #>  [890,] 0.36837762 0.3957091 0.5132106 0.5193425 0.5241228 0.5621301 0.5889499 #>  [891,] 0.51229112 0.5308274 0.5486485 0.5533357 0.5652814 0.5979694 0.6465118 #>  [892,] 0.51481384 0.5719970 0.9448014 0.9484384 1.0120554 1.0351282 1.0440186 #>  [893,] 0.54759637 0.5964356 0.6465546 0.7689377 0.7732639 0.8298100 0.9111386 #>  [894,] 0.68203050 0.7929424 0.9255919 0.9710789 1.0196532 1.0707450 1.0731006 #>  [895,] 0.48932844 0.5384689 0.5703191 0.5795418 0.5926168 0.6554560 0.7158041 #>  [896,] 0.41935706 0.4414963 0.5824385 0.6073647 0.6148055 0.6442137 0.6581417 #>  [897,] 0.29686819 0.3282175 0.4530690 0.4716000 0.4898260 0.6205103 0.6347273 #>  [898,] 0.38598789 0.9323600 1.0397674 1.1881514 1.2021272 1.2035443 1.2273501 #>  [899,] 0.38282631 0.5992109 0.6109160 0.6343330 0.6809517 0.7243183 0.7765238 #>  [900,] 0.27342108 0.4039438 0.4489022 0.5207692 0.5224715 0.5819676 0.5898018 #>  [901,] 0.16619941 0.3683776 0.4712512 0.4977365 0.5153704 0.5250017 0.5564521 #>  [902,] 0.68884001 0.7362757 0.7845469 0.7904778 0.8251498 0.8943673 0.9578636 #>  [903,] 0.44620272 0.4972224 0.4997507 0.6481584 0.7004271 0.7352577 0.7767997 #>  [904,] 0.63312760 0.8383418 0.8974325 0.9239665 0.9271229 1.0664593 1.0790447 #>  [905,] 0.34129910 0.4634493 0.4873718 0.5139471 0.5860312 0.6407934 0.6510461 #>  [906,] 1.45295954 1.4887502 1.5064512 1.5724571 1.5896610 1.7145102 1.7294127 #>  [907,] 0.84312602 0.9208767 0.9237683 1.0049540 1.1363785 1.1565356 1.1626590 #>  [908,] 0.39275083 0.4637339 0.5130830 0.5908040 0.6113589 0.6195753 0.8143408 #>  [909,] 0.45200792 0.4698955 0.4846139 0.4856988 0.4979119 0.5193425 0.5241157 #>  [910,] 0.69279264 0.8375868 0.8572748 0.8609900 0.8645129 0.8727318 0.9388867 #>  [911,] 0.39806256 0.4382318 0.4450379 0.4766639 0.5688177 0.5778158 0.6213267 #>  [912,] 0.57007312 0.6574393 0.7331691 0.9904744 1.0299464 1.0629456 1.1707534 #>  [913,] 0.78653811 0.8133781 0.8487048 0.8751884 0.9283864 0.9978253 1.0638309 #>  [914,] 0.40088801 0.5545999 0.6030567 0.6427524 0.6467848 0.7043779 0.7757043 #>  [915,] 0.89487149 1.1011420 1.1726639 1.1928695 1.2053707 1.2453603 1.2459359 #>  [916,] 0.43806191 0.6123746 0.6177790 0.6536458 0.7010940 0.7122625 0.7231514 #>  [917,] 0.30449916 0.4744987 0.5357461 0.5896980 0.5999810 0.6343352 0.6394719 #>  [918,] 0.63474919 0.6574398 0.7088033 0.8072467 0.8208012 0.8338446 0.8512357 #>  [919,] 0.77812140 0.9212891 1.0209035 1.0832076 1.0989287 1.1015341 1.1377266 #>  [920,] 0.37118335 0.4512064 0.4776327 0.5564610 0.7750397 0.8205560 0.8532300 #>  [921,] 0.33260011 0.4558432 0.4768325 0.5132412 0.6480566 0.6940337 0.7408282 #>  [922,] 0.27875495 0.3927508 0.4789341 0.5564610 0.6221504 0.7422601 0.7867861 #>  [923,] 0.28051215 0.7020956 0.7732736 0.7778398 0.7838152 0.9475432 0.9475533 #>  [924,] 0.29278000 0.3334548 0.3803616 0.4134996 0.4374332 0.4499986 0.5680964 #>  [925,] 0.41423436 0.5729531 0.6771911 0.7163328 0.7634408 0.7652011 0.7838578 #>  [926,] 0.35090362 0.4277021 0.4813194 0.5121081 0.5371393 0.5432609 0.5585734 #>  [927,] 0.25877334 0.4466909 0.5376223 0.6568282 0.6710638 0.6816875 0.8303137 #>  [928,] 0.28051215 0.6886995 0.8037309 0.8298100 0.8389792 0.8633688 0.9139913 #>  [929,] 0.34050849 0.4537840 0.7840753 0.8128808 0.8165920 0.9757097 0.9921556 #>  [930,] 0.42241803 0.5206740 0.6107975 0.6265487 0.6278528 0.6299555 0.6457022 #>  [931,] 0.60120864 0.6289312 0.7691775 0.8679856 0.8965588 0.9315520 0.9652184 #>  [932,] 0.30315863 0.5115096 0.5310637 0.5501422 0.5695412 0.5700284 0.6252500 #>  [933,] 0.85441813 1.0007385 1.1057439 1.2406684 1.4952066 1.5112340 1.5649304 #>  [934,] 0.18954821 0.4400788 0.4581064 0.4779620 0.5321686 0.5506531 0.5580194 #>  [935,] 0.45086075 0.5391286 0.5825721 0.6146498 0.6151400 0.6167342 0.6366187 #>  [936,] 0.32780566 0.3734671 0.4579567 0.5812764 0.5959434 0.6252500 0.6734542 #>  [937,] 0.60932515 0.6341653 0.9180017 0.9210780 0.9779571 0.9926173 1.0760066 #>  [938,] 0.54184591 0.6442385 0.6962288 0.7238799 0.8771006 0.8886901 0.9363524 #>  [939,] 0.33709856 0.3850426 0.3967151 0.4549890 0.4827385 0.4929008 0.5110704 #>  [940,] 0.37159041 0.4015759 0.4481610 0.4922030 0.5396631 0.5587910 0.6213628 #>  [941,] 0.16440238 0.4377573 0.4972025 0.5327789 0.5819676 0.5855889 0.5912974 #>  [942,] 0.41033990 0.4560937 0.4638711 0.4896145 0.5533426 0.5567736 0.5723309 #>  [943,] 0.63464989 0.6917132 0.7571346 0.8172907 0.8389482 0.9042310 0.9659400 #>  [944,] 0.39340247 0.4377156 0.4630865 0.5292047 0.5565633 0.5589373 0.5637778 #>  [945,] 0.42113276 0.6491762 0.6860780 0.6940295 0.7326769 0.7615042 0.7994460 #>  [946,] 0.42298267 0.4640816 0.5318164 0.5430737 0.5872614 0.6142304 0.6231820 #>  [947,] 0.53250192 0.6212609 0.7080261 0.7141653 0.7465174 0.7545394 0.7693997 #>  [948,] 0.54457109 0.6574398 0.6728436 0.7454765 0.7545013 0.7821927 0.7852584 #>  [949,] 0.65743929 0.7572525 0.9494851 0.9606214 0.9705066 0.9855039 1.0277987 #>  [950,] 0.33982051 0.4503996 0.5133701 0.5217026 0.5224993 0.5379800 0.5691706 #>  [951,] 0.40650084 0.4859930 0.5357807 0.6655568 0.8076426 0.8445635 0.8514808 #>  [952,] 0.37061082 0.3849572 0.4455832 0.4457070 0.4796495 0.5008082 0.5488143 #>  [953,] 0.62159062 0.6619956 0.7366693 0.8020595 0.8186244 0.8901125 0.9576301 #>  [954,] 0.38932568 0.4386891 0.5124457 0.5974632 0.6074109 0.6196999 0.6700945 #>  [955,] 0.64655464 0.9360585 0.9966562 1.0819894 1.1055858 1.1618209 1.1634431 #>  [956,] 0.35100129 0.5475964 0.6837723 0.7879706 0.8156548 0.8346429 0.9283836 #>  [957,] 0.34928954 0.4766070 0.4835808 0.4934067 0.4989346 0.5189948 0.5349896 #>  [958,] 0.29810547 0.5653175 0.5927246 0.6102396 0.6538886 0.6705592 0.6953920 #>  [959,] 0.85230199 1.3438460 1.3690244 1.4043253 1.4459740 1.4662375 1.5127898 #>  [960,] 0.13417734 0.4832031 0.8156262 0.8375868 0.9235648 0.9343321 0.9359729 #>  [961,] 0.73335684 0.8895823 0.9210773 0.9922516 1.0022040 1.1238444 1.1480400 #>  [962,] 0.56045946 0.6424416 0.8403663 0.8652024 0.9188263 0.9354940 0.9505046 #>  [963,] 0.67978413 0.6953520 0.8201462 0.8765495 0.9099810 0.9100607 0.9642193 #>  [964,] 0.49714121 0.5514382 0.5829375 0.6064596 0.6514002 0.6801863 0.6810759 #>  [965,] 0.54005297 0.5639170 0.6098160 0.6483709 0.6800834 0.7199898 0.7824395 #>  [966,] 0.62940836 0.6620229 0.6776612 0.7287152 0.7406831 0.7559830 0.8605819 #>  [967,] 0.35974218 0.7029345 0.7371566 0.7737925 0.8061995 0.8070628 0.8251921 #>  [968,] 1.34538911 1.4557695 1.5287479 1.5782863 1.6545708 1.6857459 1.7090493 #>  [969,] 0.59913257 0.6818035 0.8608874 0.8684860 0.9124112 0.9872350 1.0973231 #>  [970,] 0.87716931 1.1389029 1.1612022 1.1640820 1.1651125 1.1739176 1.1792622 #>  [971,] 0.64906992 0.6956814 0.6978772 0.8224695 0.8865358 0.8873257 0.8994181 #>  [972,] 0.29686819 0.3518609 0.3559538 0.5031422 0.5539936 0.5780268 0.5870625 #>  [973,] 0.37917177 0.4580725 0.5024879 0.6111457 0.6490699 0.6761925 0.6822385 #>  [974,] 0.69271422 0.8233154 0.8236943 0.8991486 0.9726483 1.0218446 1.0289258 #>  [975,] 0.41473389 0.4813194 0.5065696 0.5270825 0.5994186 0.6401257 0.6702381 #>  [976,] 0.34422652 0.3999201 0.4308553 0.4355615 0.4382318 0.5804314 0.5901147 #>  [977,] 0.37144900 0.5436591 0.5710827 0.6098501 0.6166729 0.6768413 0.6986046 #>  [978,] 0.35600550 0.5634790 0.6185100 0.6341428 0.6404003 0.6452286 0.6706725 #>  [979,] 0.55833091 0.9757880 1.0863770 1.1608667 1.1903898 1.2072188 1.3093006 #>  [980,] 0.54214751 0.5883969 0.6567473 0.7911501 0.8045326 0.8973000 0.9066305 #>  [981,] 0.55833091 0.8911466 1.0090208 1.1222108 1.2686456 1.4013452 1.4052067 #>  [982,] 0.76123372 0.9140090 1.0734375 1.0742056 1.1762431 1.2406350 1.2424162 #>  [983,] 0.65104074 0.6824915 0.7276243 0.7634516 0.7732120 0.7916557 0.8565127 #>  [984,] 0.16464834 0.6319465 0.7876736 0.8784906 0.8835694 0.9026935 0.9271229 #>  [985,] 0.55013004 0.5614093 0.6027740 0.6040227 0.6477847 0.6944172 0.7183149 #>  [986,] 0.42158735 0.5530351 0.6123746 0.6200715 0.6408325 0.6456776 0.6993294 #>  [987,] 0.30482619 0.4061321 0.4270246 0.4502945 0.5432724 0.5713607 0.5735803 #>  [988,] 0.48649429 0.5446285 0.5849494 0.5904740 0.5905196 0.6099341 0.6272804 #>  [989,] 0.18982483 0.2407578 0.3648616 0.4043751 0.4848114 0.5634790 0.5666285 #>  [990,] 0.41774230 0.4512224 0.4526554 0.4747576 0.4950259 0.4962471 0.5199294 #>  [991,] 0.58788433 0.6570406 0.6632365 0.7558188 0.7708658 0.8567764 0.8821065 #>  [992,] 0.63719312 0.6858781 0.7586518 0.7697537 0.7778660 0.8237044 0.8428927 #>  [993,] 0.40972994 0.5345323 0.5604595 0.5710183 0.5901139 0.6261677 0.7785578 #>  [994,] 0.49746970 0.6339125 0.7418900 0.8276673 0.8428925 0.8698881 0.8965638 #>  [995,] 0.63644344 0.6784235 0.7096816 0.7691775 0.8019993 0.8756039 0.9638192 #>  [996,] 0.50984310 0.5812876 0.8413232 0.8741562 0.9086377 0.9230772 0.9953073 #>  [997,] 0.64255209 0.6752880 0.7002823 0.7010190 0.7010966 0.7360651 0.7751545 #>  [998,] 0.34798686 0.5834789 0.5847135 0.5854514 0.6341971 0.6398861 0.6462257 #>  [999,] 0.62339703 0.7002823 0.7496675 0.7953128 0.8618691 0.8678183 0.8949250 #> [1000,] 0.40763358 0.4686410 0.4856220 0.5409065 0.5588485 0.5662752 0.6545916 #>              [,8]      [,9]     [,10] #>    [1,] 0.9030118 0.9418266 0.9537721 #>    [2,] 0.7105112 0.7232366 0.7279517 #>    [3,] 1.2773293 1.3509836 1.3558816 #>    [4,] 0.5955602 0.6227682 0.6254647 #>    [5,] 0.7744306 0.8322494 0.8534751 #>    [6,] 0.8528728 0.8849913 0.9151362 #>    [7,] 0.8861835 0.8969208 0.9304180 #>    [8,] 0.7068837 0.7368597 0.8009995 #>    [9,] 0.6246630 0.6474195 0.6987600 #>   [10,] 0.7009980 0.7168761 0.7372100 #>   [11,] 0.6483709 0.6566393 0.6672189 #>   [12,] 0.6438615 0.6853852 0.7308131 #>   [13,] 0.6336399 0.6531395 0.6939607 #>   [14,] 0.8899094 0.9072663 0.9092028 #>   [15,] 0.7563648 0.7604059 0.7790705 #>   [16,] 0.8693338 0.9536063 0.9659702 #>   [17,] 1.9121570 1.9966690 2.0041151 #>   [18,] 1.0774676 1.1362082 1.2009990 #>   [19,] 0.9925070 1.0227263 1.0335583 #>   [20,] 0.6261803 0.6272579 0.6314240 #>   [21,] 0.5535719 0.5871851 0.5997428 #>   [22,] 0.5314990 0.5431350 0.5519660 #>   [23,] 0.7658195 0.8486879 0.8607429 #>   [24,] 1.1111090 1.1401007 1.1573095 #>   [25,] 0.5905296 0.6594166 0.6737689 #>   [26,] 1.0566070 1.0610318 1.0702450 #>   [27,] 0.6754067 0.7003173 0.7029050 #>   [28,] 0.6449613 0.6653410 0.6712134 #>   [29,] 1.0432425 1.0616475 1.0635726 #>   [30,] 0.7954449 0.8406880 0.8548065 #>   [31,] 0.5990968 0.6285287 0.6552363 #>   [32,] 1.0397031 1.0555033 1.0677572 #>   [33,] 0.7262799 0.7364555 0.7514416 #>   [34,] 0.7391641 0.8071017 0.8350555 #>   [35,] 0.7383942 0.7776086 0.7979229 #>   [36,] 0.7153060 0.7175468 0.7182982 #>   [37,] 1.2087352 1.2675946 1.2755610 #>   [38,] 1.0093539 1.0663329 1.1072867 #>   [39,] 0.6373739 0.6867918 0.7180383 #>   [40,] 0.6951065 0.7240170 0.7267384 #>   [41,] 0.7853839 0.7940940 0.8346553 #>   [42,] 0.8804295 0.8899651 0.8904091 #>   [43,] 1.3258213 1.3285560 1.3939091 #>   [44,] 0.7549295 0.8000000 0.8166898 #>   [45,] 0.9319528 0.9476406 0.9577717 #>   [46,] 0.5197247 0.5213529 0.6363264 #>   [47,] 1.0346121 1.0446909 1.0643879 #>   [48,] 1.1826585 1.1848987 1.2134766 #>   [49,] 1.1448946 1.1462286 1.1709233 #>   [50,] 0.7466090 0.7692451 0.8720607 #>   [51,] 0.6439962 0.6637183 0.6667857 #>   [52,] 0.6678805 0.7153243 0.7205874 #>   [53,] 1.0132275 1.0529475 1.0612712 #>   [54,] 1.3453891 1.3686957 1.3820859 #>   [55,] 0.6789169 0.6955658 0.7042320 #>   [56,] 1.0824619 1.1060922 1.1091222 #>   [57,] 0.6000400 0.6080363 0.6212031 #>   [58,] 0.9170066 0.9766960 1.0022040 #>   [59,] 0.5895822 0.5964750 0.6249742 #>   [60,] 0.9096065 0.9291502 0.9731414 #>   [61,] 0.6530787 0.6744409 0.6983547 #>   [62,] 0.6268780 0.6376063 0.6503623 #>   [63,] 0.7672967 0.7731489 0.7752880 #>   [64,] 1.1774664 1.2146329 1.2480713 #>   [65,] 1.0476303 1.1084877 1.1790269 #>   [66,] 1.1824542 1.1875058 1.3029222 #>   [67,] 0.9241340 0.9652184 0.9770449 #>   [68,] 0.8511216 0.8635171 0.8670053 #>   [69,] 0.6119468 0.6179706 0.6359115 #>   [70,] 0.9272250 0.9345161 0.9511354 #>   [71,] 0.9476194 0.9693228 0.9776377 #>   [72,] 0.6502783 0.6671793 0.6685825 #>   [73,] 0.7058573 0.7145643 0.7305274 #>   [74,] 0.8245319 0.9487075 0.9525371 #>   [75,] 0.7673341 0.8434874 0.8538367 #>   [76,] 0.7305204 0.7778660 0.8706246 #>   [77,] 0.6215611 0.6297340 0.6327830 #>   [78,] 0.6287242 0.6452686 0.6580720 #>   [79,] 0.7354045 0.7450369 0.7521367 #>   [80,] 0.6419691 0.6782263 0.6903387 #>   [81,] 0.8628527 0.9088118 0.9175668 #>   [82,] 0.6468371 0.6555262 0.6732356 #>   [83,] 1.0451430 1.1036074 1.1077080 #>   [84,] 0.5090026 0.5349021 0.6311597 #>   [85,] 0.6479538 0.6936756 0.7364555 #>   [86,] 0.6763415 0.6950469 0.7092378 #>   [87,] 1.1632983 1.1772764 1.1887831 #>   [88,] 1.3067264 1.5009727 1.5075826 #>   [89,] 0.5231695 0.5425701 0.5620121 #>   [90,] 0.5883993 0.6056343 0.6070608 #>   [91,] 1.5662376 1.6128200 1.6278271 #>   [92,] 1.1817892 1.1948017 1.2026715 #>   [93,] 0.5905927 0.5913918 0.6425568 #>   [94,] 0.8106428 0.8112691 0.8203958 #>   [95,] 0.5714576 0.6746397 0.6888394 #>   [96,] 1.1724529 1.1863347 1.1932501 #>   [97,] 0.5940908 0.6038542 0.6106182 #>   [98,] 0.6361320 0.7218856 0.7280847 #>   [99,] 1.1822503 1.1852998 1.1891575 #>  [100,] 0.7401682 0.7947712 0.7977414 #>  [101,] 0.6749313 0.6825673 0.6969455 #>  [102,] 0.4513248 0.4521732 0.4623607 #>  [103,] 0.6415046 0.6561704 0.6690488 #>  [104,] 0.7927239 0.8522886 0.9031203 #>  [105,] 0.8972355 0.9047032 0.9580713 #>  [106,] 1.0551165 1.0747684 1.0878345 #>  [107,] 1.0662126 1.0770381 1.0799847 #>  [108,] 0.6728767 0.6832730 0.6911667 #>  [109,] 2.0253759 2.0599071 2.0968101 #>  [110,] 1.1743948 1.1946266 1.2254924 #>  [111,] 0.5983810 0.6135573 0.6348840 #>  [112,] 0.9730782 0.9864752 0.9874657 #>  [113,] 0.7753238 0.7774944 0.7998583 #>  [114,] 0.8024641 0.9088583 1.0290167 #>  [115,] 0.6817976 0.6866208 0.7811437 #>  [116,] 0.5073311 0.5234406 0.5489369 #>  [117,] 0.5012625 0.5110704 0.5206599 #>  [118,] 1.1613326 1.1735156 1.1913454 #>  [119,] 0.6739372 0.7211054 0.7285344 #>  [120,] 0.6910223 0.6919817 0.7429380 #>  [121,] 1.0112800 1.0142438 1.0245301 #>  [122,] 0.9059686 0.9348752 0.9678681 #>  [123,] 0.5942647 0.5964991 0.6245972 #>  [124,] 0.5828777 0.5846537 0.6041280 #>  [125,] 0.7001325 0.7196576 0.7445699 #>  [126,] 0.6308300 0.6313394 0.6651485 #>  [127,] 0.8476315 0.8507573 0.8649082 #>  [128,] 0.4993928 0.5432724 0.5569409 #>  [129,] 0.5845527 0.5903141 0.6130468 #>  [130,] 0.6293371 0.6347118 0.6365529 #>  [131,] 1.0304726 1.0389347 1.0711030 #>  [132,] 0.9826933 0.9897692 1.0157284 #>  [133,] 0.6746498 0.7016749 0.7211464 #>  [134,] 0.8216153 0.8354586 0.8459255 #>  [135,] 0.9553053 0.9659400 0.9822215 #>  [136,] 0.6065467 0.6356934 0.6450724 #>  [137,] 0.6399047 0.6535907 0.6548283 #>  [138,] 1.1890854 1.1939152 1.2032192 #>  [139,] 1.5669469 1.5675908 1.5812839 #>  [140,] 0.9882885 0.9884872 1.0378930 #>  [141,] 0.6112564 0.6167056 0.6343110 #>  [142,] 0.5979028 0.6041280 0.6099982 #>  [143,] 0.7467561 0.7797628 0.7860680 #>  [144,] 0.5752305 0.5772207 0.5903141 #>  [145,] 1.1387106 1.1408727 1.2057733 #>  [146,] 0.6942106 0.7420446 0.7463110 #>  [147,] 1.0429835 1.0597557 1.1240057 #>  [148,] 1.3102800 1.3437016 1.3529708 #>  [149,] 1.2178284 1.2373248 1.3296948 #>  [150,] 0.6567802 0.6919817 0.7107572 #>  [151,] 1.1065983 1.1659774 1.1723164 #>  [152,] 0.8729460 0.8994216 0.9073234 #>  [153,] 1.1085620 1.1692791 1.1737787 #>  [154,] 0.8226554 0.8570100 0.8598740 #>  [155,] 0.7960557 0.7984418 0.8161327 #>  [156,] 0.5569409 0.5683892 0.6141386 #>  [157,] 0.6893556 0.7303320 0.7989713 #>  [158,] 0.7893140 0.8010676 0.8096823 #>  [159,] 1.0231983 1.0613228 1.0754425 #>  [160,] 0.8048877 0.8076845 0.8282423 #>  [161,] 0.5812438 0.5999032 0.6425820 #>  [162,] 0.7181062 0.7186574 0.7501935 #>  [163,] 0.7080237 0.7540376 0.8128870 #>  [164,] 0.8078121 0.8517177 0.8646630 #>  [165,] 0.5858423 0.6087205 0.6175645 #>  [166,] 0.7272570 0.7603230 0.7776989 #>  [167,] 0.6324417 0.6453442 0.6695652 #>  [168,] 0.9413063 0.9685038 1.0030157 #>  [169,] 0.6401257 0.6659694 0.6817282 #>  [170,] 1.1065983 1.1178919 1.1596473 #>  [171,] 0.8601932 0.8837379 0.9906256 #>  [172,] 0.5238466 0.5320598 0.5333373 #>  [173,] 0.6231820 0.6336550 0.6583086 #>  [174,] 0.6276516 0.6278280 0.6278653 #>  [175,] 1.1172018 1.1244201 1.1703859 #>  [176,] 0.6500462 0.6702855 0.6896799 #>  [177,] 0.8209966 0.8212458 0.8816123 #>  [178,] 0.6521396 0.6583086 0.6642093 #>  [179,] 0.6513789 0.6579306 0.6738679 #>  [180,] 0.7544317 0.8085145 0.8516961 #>  [181,] 0.6179837 0.6460345 0.6554223 #>  [182,] 1.3790288 1.3924978 1.4150606 #>  [183,] 0.5672563 0.6272494 0.6418303 #>  [184,] 0.4946221 0.5845527 0.5997428 #>  [185,] 0.8656060 0.9110182 0.9415040 #>  [186,] 0.7633547 0.7835618 0.8168341 #>  [187,] 1.0245451 1.0548346 1.0832058 #>  [188,] 0.7457180 0.7984508 0.8552969 #>  [189,] 0.7147667 0.7615940 0.7678190 #>  [190,] 1.2067381 1.2333636 1.2686456 #>  [191,] 1.4770672 1.4887750 1.5138759 #>  [192,] 0.9621129 0.9890204 1.0163363 #>  [193,] 0.8085255 0.8118103 0.8120580 #>  [194,] 0.6443693 0.6624336 0.6652509 #>  [195,] 0.6758416 0.6760321 0.6858377 #>  [196,] 1.0706434 1.1011819 1.1118594 #>  [197,] 0.7642906 0.8270278 0.8420174 #>  [198,] 0.7838152 0.8251377 0.8389792 #>  [199,] 0.6119468 0.6353546 0.6462678 #>  [200,] 0.7481074 0.7598536 0.7602312 #>  [201,] 0.4565748 0.4982801 0.5156192 #>  [202,] 0.8754865 0.9204533 1.0096803 #>  [203,] 0.9732370 0.9980648 0.9993515 #>  [204,] 1.0807828 1.0903934 1.1044800 #>  [205,] 0.7646535 0.7736387 0.7917854 #>  [206,] 0.7654889 0.8579549 0.9887318 #>  [207,] 0.4865405 0.5259052 0.5289989 #>  [208,] 0.6123364 0.6158981 0.6354650 #>  [209,] 1.5679325 1.6198494 1.6443238 #>  [210,] 0.6867334 0.7135669 0.7329088 #>  [211,] 0.7529773 0.7588514 0.7740322 #>  [212,] 1.1651125 1.1733222 1.2172460 #>  [213,] 0.8671135 0.8843708 0.8987683 #>  [214,] 0.6408325 0.6670700 0.7231514 #>  [215,] 0.7950835 0.7976207 0.8132946 #>  [216,] 0.7820191 0.8416377 0.8830885 #>  [217,] 0.5826916 0.5876793 0.6106895 #>  [218,] 0.6944172 0.7137607 0.7771882 #>  [219,] 0.7951970 0.7978245 0.8153795 #>  [220,] 0.7632896 0.7740798 0.7825389 #>  [221,] 0.8099444 0.8114975 0.9202220 #>  [222,] 0.9781661 0.9928935 1.0205065 #>  [223,] 0.9329802 0.9483992 0.9844696 #>  [224,] 0.7810784 0.7841265 0.8170481 #>  [225,] 1.0231359 1.0352256 1.1114420 #>  [226,] 0.6492125 0.6760139 0.6971834 #>  [227,] 0.9410366 0.9576092 0.9604322 #>  [228,] 1.1785381 1.1818300 1.2105522 #>  [229,] 0.6987600 0.7176492 0.7285344 #>  [230,] 0.9544056 0.9567821 0.9827832 #>  [231,] 0.7330173 0.7520910 0.7835618 #>  [232,] 1.0730128 1.0854836 1.2047983 #>  [233,] 1.1158178 1.1394598 1.1405670 #>  [234,] 0.9343042 0.9429827 0.9705366 #>  [235,] 1.0419995 1.1180737 1.1406418 #>  [236,] 0.5839470 0.6225700 0.6559524 #>  [237,] 0.9845864 0.9846161 1.0006728 #>  [238,] 0.7022571 0.7350886 0.7458561 #>  [239,] 1.1290419 1.1468979 1.1563553 #>  [240,] 0.6914231 0.7126023 0.7140714 #>  [241,] 0.6103412 0.6530589 0.6711086 #>  [242,] 0.9287437 0.9395566 0.9530355 #>  [243,] 0.6542943 0.6636570 0.6637297 #>  [244,] 0.5443088 0.5518160 0.5618176 #>  [245,] 0.8996831 0.9075436 0.9339411 #>  [246,] 1.0039180 1.0131049 1.0170771 #>  [247,] 0.8328350 0.8372267 0.8616255 #>  [248,] 0.5558115 0.5606200 0.5729808 #>  [249,] 1.1935756 1.2766048 1.2872832 #>  [250,] 0.8050750 0.8417535 0.8440584 #>  [251,] 0.7427923 0.7655895 0.8066340 #>  [252,] 0.9980792 1.0081732 1.0342928 #>  [253,] 0.9670783 0.9747480 0.9839222 #>  [254,] 1.3741592 1.3886282 1.4082109 #>  [255,] 1.4399188 1.4454795 1.5138168 #>  [256,] 0.9403991 0.9494045 1.0018473 #>  [257,] 0.5487329 0.5802241 0.6138454 #>  [258,] 1.2272742 1.2298194 1.2341700 #>  [259,] 0.7540376 0.7854716 0.7992546 #>  [260,] 0.7232006 0.7905349 0.8373029 #>  [261,] 1.6817526 1.7450432 1.7566366 #>  [262,] 0.9565220 0.9779323 0.9922685 #>  [263,] 0.6471857 0.6598246 0.6910255 #>  [264,] 0.5571458 0.5589373 0.5786583 #>  [265,] 0.7336463 0.7455223 0.7530329 #>  [266,] 0.6890794 0.7037603 0.7069229 #>  [267,] 0.6390574 0.6525004 0.6545056 #>  [268,] 0.6541596 0.6554560 0.6807287 #>  [269,] 1.2321096 1.2606886 1.2806653 #>  [270,] 0.5645523 0.5819753 0.6024243 #>  [271,] 0.5990645 0.6049805 0.6082367 #>  [272,] 0.6782560 0.7466752 0.7545013 #>  [273,] 1.2536929 1.2845350 1.3013138 #>  [274,] 0.9440980 1.0223326 1.0402295 #>  [275,] 0.6711086 0.6738098 0.6746888 #>  [276,] 0.6405807 0.6905925 0.7116043 #>  [277,] 1.0461872 1.0903181 1.1546129 #>  [278,] 0.6999587 0.7351953 0.7429804 #>  [279,] 0.6029509 0.6052960 0.6203862 #>  [280,] 0.5644081 0.5714576 0.5795418 #>  [281,] 0.7292886 0.8053415 0.8254373 #>  [282,] 0.5019234 0.5257289 0.5436167 #>  [283,] 0.5812580 0.6111457 0.6149485 #>  [284,] 1.4879493 1.5368694 1.6257881 #>  [285,] 0.8490200 0.8512808 0.8713289 #>  [286,] 0.6186876 0.6215930 0.6276368 #>  [287,] 1.2095962 1.2412433 1.2540480 #>  [288,] 0.5749025 0.5862150 0.5964074 #>  [289,] 0.7490708 0.7886837 0.8180894 #>  [290,] 0.6093314 0.6138926 0.6407208 #>  [291,] 0.8010496 0.8491691 0.8669617 #>  [292,] 0.8361915 0.8432542 0.8565377 #>  [293,] 0.8014712 0.8245752 0.8497099 #>  [294,] 0.8357633 0.8592164 0.8789741 #>  [295,] 0.5144084 0.5173656 0.5289989 #>  [296,] 1.0680536 1.1735156 1.2412015 #>  [297,] 0.7590935 0.7613386 0.7776379 #>  [298,] 0.7596313 0.7650537 0.7801289 #>  [299,] 1.0521485 1.1151585 1.1222108 #>  [300,] 0.6450644 0.6622785 0.6646838 #>  [301,] 1.0885046 1.1616061 1.1914069 #>  [302,] 0.6103412 0.6135573 0.6179837 #>  [303,] 0.7358345 0.7458181 0.7615042 #>  [304,] 0.9354940 0.9721444 0.9799670 #>  [305,] 1.6503012 1.7115245 1.7211651 #>  [306,] 1.5392512 1.5643792 1.6098860 #>  [307,] 1.0958942 1.1086173 1.1350647 #>  [308,] 0.6403885 0.6732760 0.7103015 #>  [309,] 0.8066598 0.8195925 0.8504648 #>  [310,] 0.5846566 0.6101469 0.6130500 #>  [311,] 0.6385890 0.6390574 0.6486285 #>  [312,] 0.8728819 0.9147752 0.9224989 #>  [313,] 0.6207984 0.6474195 0.6635042 #>  [314,] 0.8666880 0.9257067 0.9280143 #>  [315,] 0.7691439 0.7882302 0.8698915 #>  [316,] 0.5146430 0.5179499 0.5201035 #>  [317,] 1.0479969 1.0492729 1.0498054 #>  [318,] 0.5804314 0.6256844 0.6272511 #>  [319,] 0.6099982 0.6161210 0.6493237 #>  [320,] 0.6975265 0.7468042 0.7477434 #>  [321,] 0.6433436 0.6553970 0.6678805 #>  [322,] 0.8733401 0.8878696 0.9478095 #>  [323,] 0.9098418 0.9147983 0.9230936 #>  [324,] 0.6364103 0.6864259 0.6935538 #>  [325,] 0.6618017 0.6933342 0.7424718 #>  [326,] 0.9153062 0.9754045 0.9877624 #>  [327,] 0.9511354 1.0005449 1.0255887 #>  [328,] 0.9346521 0.9857938 0.9954160 #>  [329,] 0.7031974 0.7049389 0.7091089 #>  [330,] 0.5690710 0.6475884 0.6875207 #>  [331,] 0.5987940 0.6083474 0.6343445 #>  [332,] 0.8132946 0.8927189 0.9093618 #>  [333,] 0.7743443 0.8071325 0.8209966 #>  [334,] 0.5408611 0.5439539 0.5531944 #>  [335,] 0.5237629 0.6045987 0.6456133 #>  [336,] 0.7776989 0.7994912 0.8042928 #>  [337,] 1.3791320 1.4204828 1.4778103 #>  [338,] 1.0322829 1.0522587 1.0875220 #>  [339,] 0.5799257 0.6119724 0.6267216 #>  [340,] 1.1766076 1.1820686 1.1970099 #>  [341,] 0.6624980 0.7514918 0.7720994 #>  [342,] 0.6338327 0.6459004 0.6494120 #>  [343,] 1.5099132 1.5340211 1.5849000 #>  [344,] 0.5453938 0.5726657 0.5860312 #>  [345,] 0.7029345 0.7076663 0.7833420 #>  [346,] 0.9441979 0.9565685 0.9819594 #>  [347,] 0.5590512 0.5700577 0.6198054 #>  [348,] 0.9160643 0.9212891 0.9452166 #>  [349,] 0.7126731 0.7431994 0.7515022 #>  [350,] 0.7972733 0.8313231 0.8808616 #>  [351,] 0.7740399 0.8156262 0.8207290 #>  [352,] 1.8900570 1.9951661 2.0050316 #>  [353,] 0.8591237 0.9082399 0.9899678 #>  [354,] 1.2918068 1.3002847 1.3864792 #>  [355,] 0.5766040 0.6011279 0.6020452 #>  [356,] 0.7778841 0.7968811 0.8141868 #>  [357,] 1.1324759 1.1513995 1.1698412 #>  [358,] 0.7240170 0.7352577 0.7913077 #>  [359,] 0.7740258 0.8680395 0.9106803 #>  [360,] 0.6101469 0.6180777 0.6239697 #>  [361,] 0.5488322 0.5576258 0.5877844 #>  [362,] 0.8522810 0.8939468 0.9439882 #>  [363,] 0.8161327 0.8223143 0.9533068 #>  [364,] 1.1389949 1.1758649 1.2065216 #>  [365,] 0.8632421 0.8728819 0.8806927 #>  [366,] 0.9183984 0.9255783 0.9334064 #>  [367,] 0.6844208 0.6936586 0.7293329 #>  [368,] 1.2016730 1.2415358 1.2456289 #>  [369,] 0.5636039 0.5797207 0.5959434 #>  [370,] 0.5684917 0.6078496 0.6313302 #>  [371,] 0.8113735 0.8296052 0.8338241 #>  [372,] 1.2333638 1.2448207 1.2613573 #>  [373,] 0.7744306 0.7799076 0.7833420 #>  [374,] 1.5261962 1.5658244 1.5674553 #>  [375,] 0.5693659 0.5987656 0.6010691 #>  [376,] 1.4149844 1.4263841 1.4494663 #>  [377,] 0.7454765 0.7597613 0.7727678 #>  [378,] 0.8889286 0.9544087 0.9611887 #>  [379,] 0.9559625 0.9823035 0.9830274 #>  [380,] 0.6992650 0.7037603 0.7808561 #>  [381,] 0.9769486 0.9937875 0.9957431 #>  [382,] 0.6647734 0.6870297 0.6950227 #>  [383,] 0.7409478 0.7434898 0.7505541 #>  [384,] 0.8110135 0.8186376 0.8526858 #>  [385,] 0.9909640 1.0202775 1.0223311 #>  [386,] 0.7249780 0.7960242 0.9062364 #>  [387,] 0.7929424 0.8116916 0.8307409 #>  [388,] 0.6838727 0.7039011 0.8397589 #>  [389,] 0.9783472 0.9875705 1.0021312 #>  [390,] 0.7273335 0.7310952 0.7550310 #>  [391,] 0.7904778 0.7976340 0.8492810 #>  [392,] 1.3573765 1.4240890 1.4315219 #>  [393,] 0.9254254 0.9344048 0.9645807 #>  [394,] 0.6506064 0.6647734 0.7361184 #>  [395,] 0.7298212 0.7486156 0.7597063 #>  [396,] 0.5027871 0.5150884 0.5385498 #>  [397,] 0.9295142 0.9822285 0.9824659 #>  [398,] 0.5625160 0.5990968 0.6156331 #>  [399,] 1.0812443 1.1084715 1.1175455 #>  [400,] 0.7462867 0.8090319 0.8329501 #>  [401,] 0.6438697 0.6612194 0.6612277 #>  [402,] 1.2073453 1.2216444 1.2296051 #>  [403,] 0.7919395 0.8097274 0.8162088 #>  [404,] 0.8307326 0.8697828 0.9315520 #>  [405,] 0.9421143 0.9773914 1.0381096 #>  [406,] 0.8317776 0.8457447 0.8580147 #>  [407,] 0.7751843 0.8711752 0.9053046 #>  [408,] 1.2402192 1.2549629 1.2618434 #>  [409,] 0.7458246 0.7674911 0.7822541 #>  [410,] 0.7513120 0.7658195 0.7686738 #>  [411,] 0.7855124 0.7900905 0.8382827 #>  [412,] 0.7424819 0.7733757 0.7906931 #>  [413,] 0.5272402 0.5773138 0.5952611 #>  [414,] 1.2585154 1.3120980 1.3829779 #>  [415,] 0.8930630 0.9291502 0.9495346 #>  [416,] 0.9098418 0.9365636 0.9793376 #>  [417,] 0.8865358 0.9056959 0.9407039 #>  [418,] 0.8693629 0.8895348 0.9191398 #>  [419,] 0.8153559 0.8239424 0.8621744 #>  [420,] 1.2828793 1.2924807 1.2945508 #>  [421,] 1.4683736 1.4761357 1.5608771 #>  [422,] 0.7300131 0.7416619 0.7870007 #>  [423,] 0.5642744 0.5667281 0.5830079 #>  [424,] 0.7760025 0.7991191 0.8860012 #>  [425,] 0.5781694 0.6027861 0.6138454 #>  [426,] 0.7540405 0.7708979 0.7966783 #>  [427,] 0.7893507 0.8482610 0.8791010 #>  [428,] 0.6354650 0.6724805 0.6887836 #>  [429,] 0.6165873 0.6237321 0.6352772 #>  [430,] 1.5636751 1.5670940 1.6080562 #>  [431,] 0.5310637 0.5337112 0.5441191 #>  [432,] 1.1389029 1.1409249 1.1424219 #>  [433,] 2.0013914 2.0037759 2.0058777 #>  [434,] 1.0391571 1.0561820 1.0580256 #>  [435,] 0.7842182 0.7904993 0.8262060 #>  [436,] 0.7063320 0.7094532 0.7322000 #>  [437,] 0.9725236 0.9798767 0.9873080 #>  [438,] 1.7666511 1.7784949 1.7898011 #>  [439,] 0.5958527 0.5995105 0.6025136 #>  [440,] 0.8662747 0.8891012 0.9332727 #>  [441,] 1.4596347 1.4619272 1.4698673 #>  [442,] 0.6575214 0.6709305 0.6838037 #>  [443,] 0.8288101 0.8453205 0.8560781 #>  [444,] 1.1394598 1.1462286 1.1948017 #>  [445,] 0.8288244 0.8571546 0.8867899 #>  [446,] 0.6811809 0.6864332 0.6867334 #>  [447,] 0.8248689 0.8297257 0.8306010 #>  [448,] 0.6205103 0.6330119 0.6444821 #>  [449,] 0.5612784 0.5735803 0.5906525 #>  [450,] 0.6913729 0.7088033 0.7230440 #>  [451,] 0.5718318 0.5779095 0.5905927 #>  [452,] 0.6564586 0.6567473 0.6691612 #>  [453,] 0.5430934 0.5673800 0.5912543 #>  [454,] 1.1570226 1.1598664 1.1828201 #>  [455,] 1.4290380 1.4492034 1.5143940 #>  [456,] 0.5519660 0.5567607 0.5586493 #>  [457,] 1.1308213 1.1313811 1.2600067 #>  [458,] 0.6701620 0.6711959 0.6731356 #>  [459,] 0.7306821 0.7785675 0.7840584 #>  [460,] 0.6850440 0.6851550 0.7156117 #>  [461,] 1.0239648 1.0296602 1.0469004 #>  [462,] 0.6221535 0.6695150 0.6770419 #>  [463,] 0.8283256 0.8473034 0.8601932 #>  [464,] 1.4116312 1.4560751 1.5013619 #>  [465,] 0.7168761 0.7470398 0.7471359 #>  [466,] 0.4903770 0.5197247 0.5206599 #>  [467,] 1.0610511 1.0680075 1.1325634 #>  [468,] 0.5738325 0.6116459 0.6792255 #>  [469,] 1.4978124 1.5056059 1.5096114 #>  [470,] 0.6246630 0.6737689 0.7032690 #>  [471,] 0.5675077 0.6256169 0.6264587 #>  [472,] 0.9405040 0.9492062 0.9713946 #>  [473,] 0.5726657 0.5944485 0.6010068 #>  [474,] 1.0656409 1.0815559 1.1587848 #>  [475,] 0.4903770 0.4994762 0.5042761 #>  [476,] 1.0295636 1.0893184 1.1398172 #>  [477,] 0.9608363 0.9693169 0.9776705 #>  [478,] 0.5687094 0.5826916 0.6082367 #>  [479,] 0.8847877 0.9125202 0.9171428 #>  [480,] 0.6467186 0.6471985 0.6490860 #>  [481,] 0.9559011 0.9728621 1.0291915 #>  [482,] 0.6842128 0.6849020 0.7211054 #>  [483,] 0.5848716 0.6161210 0.6603580 #>  [484,] 1.2202514 1.3041569 1.3679917 #>  [485,] 0.9086375 0.9370205 1.0290650 #>  [486,] 0.5630418 0.5672706 0.6054707 #>  [487,] 2.2832555 2.3066759 2.3282835 #>  [488,] 0.6623890 0.6639131 0.6966672 #>  [489,] 0.9894934 1.0389007 1.1040362 #>  [490,] 0.5633009 0.5745667 0.5828323 #>  [491,] 0.8245319 0.8294225 0.9182301 #>  [492,] 0.5877086 0.5959760 0.6693129 #>  [493,] 0.6746946 0.7461333 0.7735700 #>  [494,] 0.5413553 0.5630418 0.5807326 #>  [495,] 0.5723309 0.5766018 0.5998382 #>  [496,] 1.0508685 1.1015341 1.1079540 #>  [497,] 1.2668559 1.2686389 1.3477609 #>  [498,] 1.1456899 1.1841235 1.1848830 #>  [499,] 0.8949250 0.8973000 0.9627077 #>  [500,] 1.0874986 1.1209306 1.1438863 #>  [501,] 0.7219958 0.7360073 0.7558427 #>  [502,] 0.9508601 1.0010645 1.0127711 #>  [503,] 0.5214540 0.5314990 0.5804831 #>  [504,] 0.8450990 0.8753570 0.9287802 #>  [505,] 0.7180520 0.7455223 0.7477434 #>  [506,] 1.2410810 1.2544737 1.2702082 #>  [507,] 1.4250004 1.4464558 1.4920611 #>  [508,] 0.9733748 1.1567045 1.2541269 #>  [509,] 1.0108935 1.0200115 1.0245038 #>  [510,] 0.6388687 0.6581417 0.7100195 #>  [511,] 0.5736041 0.5934236 0.5992490 #>  [512,] 0.6649972 0.6884261 0.6922855 #>  [513,] 0.6719717 0.7480965 0.7819155 #>  [514,] 0.7437315 0.7444919 0.7634516 #>  [515,] 1.1901215 1.2164966 1.2556553 #>  [516,] 0.6184352 0.6753585 0.6783491 #>  [517,] 0.6892400 0.7064371 0.8003390 #>  [518,] 1.0701120 1.0942173 1.1216369 #>  [519,] 1.3097720 1.3098733 1.3262861 #>  [520,] 0.7414489 0.7869180 0.8238282 #>  [521,] 0.6848153 0.7080237 0.7274516 #>  [522,] 1.1168519 1.1553410 1.1952236 #>  [523,] 0.7232189 0.7450369 0.7486569 #>  [524,] 0.4966354 0.5053054 0.5400638 #>  [525,] 1.2186346 1.2307672 1.2912529 #>  [526,] 0.5156192 0.5308909 0.5359288 #>  [527,] 0.6330636 0.6385034 0.6400774 #>  [528,] 0.5238466 0.5700692 0.5937938 #>  [529,] 0.6119724 0.6612272 0.6895505 #>  [530,] 1.6403612 1.6546351 1.6696848 #>  [531,] 1.2698874 1.3262861 1.3790423 #>  [532,] 0.8109076 0.8225450 0.8467664 #>  [533,] 0.7510540 0.7870254 0.7947237 #>  [534,] 0.7074446 0.7415416 0.7659078 #>  [535,] 1.1467103 1.1546129 1.1745578 #>  [536,] 0.6049805 0.6141728 0.6404802 #>  [537,] 0.6456776 0.6846644 0.6885775 #>  [538,] 1.1227578 1.1648342 1.1662119 #>  [539,] 0.7620724 0.7660879 0.8021156 #>  [540,] 0.8087352 0.8193517 0.8352797 #>  [541,] 0.5811624 0.6492554 0.6561704 #>  [542,] 0.8429920 0.8433500 0.8731627 #>  [543,] 0.7044865 0.7339677 0.7482119 #>  [544,] 0.5767967 0.5785703 0.5846566 #>  [545,] 1.1365400 1.2090178 1.2924551 #>  [546,] 0.5813641 0.6135999 0.6473184 #>  [547,] 0.9769707 0.9812704 1.0271117 #>  [548,] 0.5157322 0.5258425 0.6007616 #>  [549,] 1.4360102 1.4781141 1.4849550 #>  [550,] 0.9757880 0.9847689 0.9849001 #>  [551,] 1.2353069 1.2595382 1.2863149 #>  [552,] 0.8712443 0.9063633 0.9188950 #>  [553,] 0.5994011 0.6239643 0.6253430 #>  [554,] 0.6479470 0.6602995 0.7266577 #>  [555,] 1.6616270 1.6814172 1.7306367 #>  [556,] 0.5812438 0.5968549 0.6732649 #>  [557,] 1.2415982 1.2500955 1.2598164 #>  [558,] 0.6333104 0.6463301 0.6494163 #>  [559,] 1.1169114 1.1199772 1.1614623 #>  [560,] 0.5950557 0.6460175 0.6754856 #>  [561,] 0.9875705 1.0260372 1.0329327 #>  [562,] 0.7339090 0.7442057 0.7674452 #>  [563,] 0.6326636 0.6332772 0.6388687 #>  [564,] 0.5451290 0.5606503 0.5673800 #>  [565,] 0.6952334 0.6994380 0.7191611 #>  [566,] 0.6786597 0.6864246 0.7087844 #>  [567,] 0.7767022 0.7931516 0.8032727 #>  [568,] 1.0217755 1.0697870 1.0759041 #>  [569,] 0.7263514 0.7622287 0.7925054 #>  [570,] 0.7238799 0.7466090 0.7785804 #>  [571,] 0.9266001 0.9361348 0.9563530 #>  [572,] 0.6299555 0.6312492 0.6536638 #>  [573,] 0.7449420 0.7474457 0.7589768 #>  [574,] 1.9804501 2.0388511 2.0639861 #>  [575,] 0.5879211 0.5977450 0.6054707 #>  [576,] 1.1835993 1.2368279 1.2750218 #>  [577,] 0.7271087 0.7298212 0.7310846 #>  [578,] 0.7302909 0.7529853 0.7531065 #>  [579,] 0.6218197 0.6712677 0.6729321 #>  [580,] 0.9086375 0.9145764 0.9293133 #>  [581,] 1.0526488 1.0555950 1.0598168 #>  [582,] 1.2617783 1.2711162 1.2924759 #>  [583,] 0.7709695 0.8165408 0.8168773 #>  [584,] 0.6989107 0.7469578 0.7558630 #>  [585,] 0.6691722 0.6807978 0.6933590 #>  [586,] 0.8486760 0.8709850 0.8759180 #>  [587,] 0.8230886 0.8270430 0.8334284 #>  [588,] 1.7726587 1.7998777 1.9173435 #>  [589,] 1.0318687 1.0391488 1.1551574 #>  [590,] 0.9194131 0.9320500 1.0149495 #>  [591,] 0.7625122 0.7762959 0.8265065 #>  [592,] 0.5925395 0.5995440 0.6251292 #>  [593,] 0.7306821 0.7399927 0.7704841 #>  [594,] 1.4587606 1.5524792 1.5539511 #>  [595,] 0.9994972 1.0378930 1.0390585 #>  [596,] 0.7870007 0.8104563 0.8340707 #>  [597,] 0.8251114 0.8459388 0.8517177 #>  [598,] 0.6169060 0.6417677 0.6566461 #>  [599,] 1.1977508 1.2267468 1.2711779 #>  [600,] 0.6554223 0.6811809 0.7097727 #>  [601,] 0.7864133 0.7996736 0.8222919 #>  [602,] 0.7896278 0.8199615 0.8435412 #>  [603,] 0.4820837 0.4898814 0.5549555 #>  [604,] 0.6404446 0.6427064 0.6624336 #>  [605,] 1.4129664 1.4492034 1.4961759 #>  [606,] 1.3107597 1.3122570 1.3477266 #>  [607,] 0.6306941 0.6606142 0.7021955 #>  [608,] 0.6493528 0.6594134 0.6792673 #>  [609,] 0.8610130 0.8877610 0.9141532 #>  [610,] 0.7580145 0.7710950 0.7977790 #>  [611,] 0.7243183 0.7465740 0.7520420 #>  [612,] 0.8552194 0.8599294 0.8755996 #>  [613,] 0.8656060 0.8697213 0.9084555 #>  [614,] 0.8116916 0.8223143 0.8428777 #>  [615,] 0.8310521 0.8384971 0.8530573 #>  [616,] 0.9038108 0.9058411 0.9626132 #>  [617,] 0.7976340 0.8580147 0.9227845 #>  [618,] 0.5255145 0.5255565 0.5790212 #>  [619,] 1.8770438 1.8818791 1.8865059 #>  [620,] 1.1979172 1.2095856 1.2317905 #>  [621,] 0.9563530 0.9681916 0.9685038 #>  [622,] 0.8678765 0.9031098 0.9241020 #>  [623,] 0.6346027 0.7299605 0.7397143 #>  [624,] 0.9267201 0.9450978 0.9466798 #>  [625,] 0.9782613 1.0094718 1.0221434 #>  [626,] 0.9728621 0.9751020 0.9792484 #>  [627,] 0.7675965 0.7750511 0.7854716 #>  [628,] 0.8559376 0.9459796 0.9563030 #>  [629,] 1.6006762 1.6654096 1.6939038 #>  [630,] 0.6563291 0.7114117 0.8095410 #>  [631,] 0.6303851 0.6435954 0.6471911 #>  [632,] 0.8066990 0.8095410 0.8237339 #>  [633,] 1.3891879 1.4962024 1.5006125 #>  [634,] 0.7358804 0.7371566 0.7582706 #>  [635,] 0.6936756 0.6944819 0.6955791 #>  [636,] 0.4877309 0.4950259 0.5048579 #>  [637,] 0.6669019 0.6728436 0.7230440 #>  [638,] 1.0987865 1.1697481 1.1792622 #>  [639,] 0.6751534 0.6861963 0.6878755 #>  [640,] 1.0164836 1.0200735 1.0652147 #>  [641,] 0.4873079 0.4877309 0.5199294 #>  [642,] 1.1144746 1.1162529 1.1232110 #>  [643,] 0.6663310 0.6894606 0.7025278 #>  [644,] 0.9445534 0.9942883 1.0146450 #>  [645,] 1.1620623 1.2317905 1.2850490 #>  [646,] 0.8499187 0.9255566 0.9484384 #>  [647,] 2.1298514 2.2830355 2.2965681 #>  [648,] 0.7842931 0.8313719 0.8355531 #>  [649,] 0.9153131 0.9430354 0.9518168 #>  [650,] 0.6895849 0.6925414 0.7845469 #>  [651,] 0.8338196 0.8344514 0.8430541 #>  [652,] 0.6073724 0.6083881 0.6373880 #>  [653,] 0.8974325 0.9707910 1.0639261 #>  [654,] 0.6732760 0.7085715 0.7288623 #>  [655,] 0.6238583 0.6392257 0.6525004 #>  [656,] 1.9255805 1.9764222 2.0128410 #>  [657,] 0.7084756 0.7397902 0.7407469 #>  [658,] 0.7116193 0.7174742 0.8637432 #>  [659,] 1.3354938 1.3481226 1.3989843 #>  [660,] 0.7776864 0.7879706 0.8033435 #>  [661,] 0.5488322 0.5498867 0.5584080 #>  [662,] 0.8069091 0.8282145 0.9466194 #>  [663,] 0.8727318 0.9072632 0.9252344 #>  [664,] 0.7336282 0.7699880 0.7789289 #>  [665,] 1.8748532 1.9839778 2.0369310 #>  [666,] 1.8166392 1.8725902 1.9130834 #>  [667,] 0.6113438 0.6490860 0.6651802 #>  [668,] 1.1834109 1.3227732 1.3257784 #>  [669,] 0.7487361 0.8126464 0.8436556 #>  [670,] 0.6313302 0.6691137 0.6716809 #>  [671,] 1.0373411 1.0613230 1.0776829 #>  [672,] 0.8977770 0.8985597 0.9071667 #>  [673,] 0.7042355 0.7159718 0.7219221 #>  [674,] 0.9076684 0.9212094 0.9693076 #>  [675,] 1.3176082 1.3285560 1.3436729 #>  [676,] 1.2017079 1.2161931 1.2182598 #>  [677,] 0.6893625 0.7005656 0.7288527 #>  [678,] 1.2957955 1.3383302 1.3428888 #>  [679,] 0.7215987 0.7299605 0.7474796 #>  [680,] 1.3258192 1.3394276 1.3558816 #>  [681,] 1.2273501 1.2367561 1.2373662 #>  [682,] 1.0730128 1.1059249 1.1812854 #>  [683,] 1.2464573 1.3977077 1.4809606 #>  [684,] 0.6731501 0.6826138 0.6942837 #>  [685,] 0.7599894 0.7946153 0.8485032 #>  [686,] 0.6146972 0.6270969 0.6669019 #>  [687,] 1.1394327 1.1747459 1.1997263 #>  [688,] 0.7882569 0.7957353 0.8015997 #>  [689,] 1.3808420 1.4320687 1.4831381 #>  [690,] 0.4993928 0.5379800 0.5612784 #>  [691,] 0.5835169 0.7291555 0.7458181 #>  [692,] 0.6624003 0.6918395 0.7022401 #>  [693,] 0.5517119 0.5549555 0.5713607 #>  [694,] 1.0929574 1.1237764 1.1420449 #>  [695,] 1.0008873 1.0347581 1.0476229 #>  [696,] 0.6309598 0.6375568 0.6432169 #>  [697,] 0.7470749 0.7748944 0.7911501 #>  [698,] 0.8118967 0.8572417 0.8578211 #>  [699,] 0.9491550 0.9575634 0.9717111 #>  [700,] 0.9809906 0.9843450 1.0302807 #>  [701,] 0.5876793 0.5964750 0.6027861 #>  [702,] 0.6030477 0.6065467 0.6100962 #>  [703,] 0.8201226 0.8974278 0.9048950 #>  [704,] 0.5973763 0.6010464 0.6221293 #>  [705,] 1.6896972 1.7333506 1.7968269 #>  [706,] 1.6476157 1.6888696 1.6956957 #>  [707,] 0.6151400 0.6795651 0.7272303 #>  [708,] 0.4856988 0.5195418 0.5916418 #>  [709,] 0.6844002 0.6871469 0.6986326 #>  [710,] 1.1573095 1.1615694 1.1923514 #>  [711,] 0.6681860 0.6756743 0.7117213 #>  [712,] 1.2235118 1.3435602 1.3488864 #>  [713,] 0.9331682 0.9426020 0.9609666 #>  [714,] 0.6308744 0.6361442 0.6566848 #>  [715,] 0.6680478 0.6746278 0.6898931 #>  [716,] 0.8904091 0.9658846 0.9899954 #>  [717,] 0.6879002 0.7081354 0.7545394 #>  [718,] 0.6979193 0.7032547 0.7280906 #>  [719,] 0.9122217 0.9861428 1.0666545 #>  [720,] 0.5255145 0.5306463 0.5392171 #>  [721,] 0.7252673 0.7346327 0.7372291 #>  [722,] 0.8202429 0.8449212 0.8526367 #>  [723,] 0.8361915 0.8646630 0.8983690 #>  [724,] 0.7524836 0.8214975 0.8926097 #>  [725,] 0.6993927 0.7265696 0.7384092 #>  [726,] 0.9834846 0.9957575 1.0943117 #>  [727,] 0.6019851 0.6215611 0.6443228 #>  [728,] 0.6732649 0.6897068 0.7027155 #>  [729,] 0.8145484 0.8395698 0.8692704 #>  [730,] 0.7960620 0.8157095 0.8567764 #>  [731,] 1.1845081 1.2075733 1.2570001 #>  [732,] 0.7669144 0.7729525 0.7736387 #>  [733,] 0.8756039 0.8806378 0.9560957 #>  [734,] 0.6858805 0.6885965 0.6986326 #>  [735,] 1.1610768 1.1830858 1.2019735 #>  [736,] 0.7019351 0.7081354 0.7593299 #>  [737,] 0.9252548 0.9762581 1.0347079 #>  [738,] 0.7684800 0.7777152 0.7974465 #>  [739,] 0.6684937 0.6756897 0.6922567 #>  [740,] 0.8452776 0.8573676 0.8678183 #>  [741,] 0.6101897 0.6197037 0.6308292 #>  [742,] 0.7368597 0.7668243 0.8125313 #>  [743,] 1.5812839 1.5880560 1.5920455 #>  [744,] 0.9270140 0.9502228 1.0317402 #>  [745,] 0.9408431 0.9459247 1.0569429 #>  [746,] 1.1591349 1.2031207 1.2371920 #>  [747,] 0.6376675 0.6413042 0.6505893 #>  [748,] 0.8681015 0.8727468 0.8901747 #>  [749,] 0.9098287 0.9562284 0.9735381 #>  [750,] 0.6307715 0.6450464 0.6483932 #>  [751,] 0.5913746 0.5941672 0.6313232 #>  [752,] 0.7856537 0.7867156 0.8009135 #>  [753,] 0.7513120 0.7762748 0.7900433 #>  [754,] 0.6835155 0.6871826 0.7182501 #>  [755,] 0.7802737 0.7940940 0.8072487 #>  [756,] 1.0761243 1.1693025 1.1698412 #>  [757,] 1.7716789 1.7821399 1.8064867 #>  [758,] 1.0266813 1.0794480 1.0800108 #>  [759,] 0.7589933 0.7862352 0.7876736 #>  [760,] 0.6788000 0.7116037 0.7740322 #>  [761,] 0.7292886 0.7405964 0.7583889 #>  [762,] 1.3193242 1.3358821 1.3798242 #>  [763,] 0.9103102 0.9171977 0.9472126 #>  [764,] 0.5584804 0.5895822 0.5990645 #>  [765,] 0.7759052 0.7799036 0.7804236 #>  [766,] 0.6375568 0.6712677 0.7306912 #>  [767,] 0.9578488 0.9752916 1.0073106 #>  [768,] 1.3731623 1.4229423 1.4341625 #>  [769,] 1.2648835 1.3359841 1.3656926 #>  [770,] 0.5950503 0.6083474 0.6231951 #>  [771,] 0.6873963 0.6903051 0.7069673 #>  [772,] 1.0101643 1.0217014 1.0461687 #>  [773,] 0.6663310 0.6778389 0.7153060 #>  [774,] 0.6411611 0.6426980 0.6533055 #>  [775,] 1.2710302 1.2934064 1.3184550 #>  [776,] 0.7377428 0.7425023 0.7682670 #>  [777,] 0.8016879 0.8137259 0.8215086 #>  [778,] 0.7441279 0.7486385 0.7504243 #>  [779,] 0.5255565 0.5620121 0.5628167 #>  [780,] 0.8142865 0.8270278 0.8812412 #>  [781,] 1.0048685 1.0051943 1.0059715 #>  [782,] 0.9345732 0.9428723 0.9457746 #>  [783,] 0.5790212 0.6220507 0.6292105 #>  [784,] 0.7707201 0.7788283 0.8007401 #>  [785,] 0.9024453 0.9367795 0.9458530 #>  [786,] 0.6443180 0.6565538 0.6669758 #>  [787,] 1.0378719 1.0651434 1.1149690 #>  [788,] 0.6740109 0.6792038 0.6922579 #>  [789,] 1.1527113 1.1716164 1.1914989 #>  [790,] 0.6202613 0.6467848 0.6875823 #>  [791,] 0.7055993 0.7065491 0.7224866 #>  [792,] 0.9939603 0.9980792 1.0293396 #>  [793,] 0.6563155 0.6624003 0.6671060 #>  [794,] 0.8381376 0.8442522 0.8444746 #>  [795,] 0.6731501 0.6891179 0.7088919 #>  [796,] 1.3452466 1.3666160 1.3793040 #>  [797,] 0.8440829 0.9036787 0.9729601 #>  [798,] 1.3030815 1.3430183 1.4164737 #>  [799,] 0.5281111 0.5618176 0.5668986 #>  [800,] 0.8832021 0.8930343 0.9542046 #>  [801,] 0.7144482 0.7619296 0.7754437 #>  [802,] 1.1800110 1.1806315 1.2036518 #>  [803,] 0.9918165 1.0164030 1.0469583 #>  [804,] 0.7105517 0.7160750 0.7219760 #>  [805,] 0.8561909 0.8637432 0.9188877 #>  [806,] 1.0691898 1.1038999 1.1306177 #>  [807,] 0.6574349 0.6636486 0.6891970 #>  [808,] 0.6947118 0.7181062 0.7273966 #>  [809,] 0.6187785 0.6471857 0.6593597 #>  [810,] 0.7748944 0.8467078 0.8574250 #>  [811,] 0.8652024 0.8787107 0.9785736 #>  [812,] 0.8203804 0.9456437 0.9475005 #>  [813,] 0.9113414 0.9322911 0.9674622 #>  [814,] 0.5061003 0.5422367 0.5466152 #>  [815,] 0.9851159 0.9927875 0.9975644 #>  [816,] 0.6623890 0.6768821 0.6794389 #>  [817,] 0.6723447 0.6960416 0.7289121 #>  [818,] 1.1800491 1.2111610 1.2734991 #>  [819,] 0.8915345 0.9255466 0.9465693 #>  [820,] 0.8304257 0.8395527 0.9174342 #>  [821,] 1.1138766 1.1168845 1.1270536 #>  [822,] 0.6211888 0.6348840 0.6570579 #>  [823,] 0.5955280 0.7137306 0.7678190 #>  [824,] 1.0498509 1.0578762 1.0583134 #>  [825,] 0.6871826 0.6904323 0.6922020 #>  [826,] 0.4966354 0.4991595 0.5110546 #>  [827,] 0.7533099 0.7893116 0.8268468 #>  [828,] 0.6467186 0.6746888 0.6923579 #>  [829,] 0.7164892 0.7232794 0.7533515 #>  [830,] 0.7776864 0.7785975 0.7939624 #>  [831,] 0.7686240 0.7984856 0.8020734 #>  [832,] 0.7953128 0.8127969 0.8731880 #>  [833,] 1.2490233 1.4011109 1.4011341 #>  [834,] 1.0601015 1.1131425 1.1698979 #>  [835,] 0.8428925 0.9513904 0.9573118 #>  [836,] 0.6426489 0.6566393 0.6655568 #>  [837,] 0.6738679 0.6987565 0.7042355 #>  [838,] 0.7490708 0.7981197 0.8056896 #>  [839,] 0.8711019 0.8994216 0.9042188 #>  [840,] 0.5926717 0.5978070 0.6353546 #>  [841,] 0.8998563 0.9497637 0.9650785 #>  [842,] 1.0484261 1.0703024 1.2122652 #>  [843,] 1.4163332 1.4200381 1.4528447 #>  [844,] 1.2268415 1.2414976 1.2765179 #>  [845,] 0.6832730 0.6955658 0.7026527 #>  [846,] 0.8887236 0.9221448 0.9304033 #>  [847,] 0.4753383 0.4810174 0.4835243 #>  [848,] 0.9142808 0.9147983 0.9171428 #>  [849,] 1.0052086 1.0355480 1.1040742 #>  [850,] 0.5614835 0.5711195 0.6564586 #>  [851,] 1.6661781 1.6969894 1.7030036 #>  [852,] 0.8168341 0.8284561 0.8307326 #>  [853,] 0.6601173 0.6608001 0.6684937 #>  [854,] 0.6486138 0.6551967 0.6681860 #>  [855,] 0.6138926 0.6223265 0.6344628 #>  [856,] 0.7769851 0.7834470 0.7846261 #>  [857,] 0.6864370 0.6927204 0.7491201 #>  [858,] 1.0568555 1.0719599 1.1229902 #>  [859,] 0.6112564 0.7279746 0.7294684 #>  [860,] 0.6265487 0.6285262 0.6364283 #>  [861,] 1.2111610 1.2275521 1.2474183 #>  [862,] 0.6324682 0.6373880 0.6520730 #>  [863,] 0.6391319 0.6737283 0.6770419 #>  [864,] 1.6023483 1.6570091 1.6677551 #>  [865,] 1.4163735 1.4802700 1.4892336 #>  [866,] 0.5625967 0.5876105 0.6226472 #>  [867,] 0.6407208 0.7032690 0.7559448 #>  [868,] 0.6667857 0.6963949 0.6989417 #>  [869,] 0.6950469 0.7108557 0.7405781 #>  [870,] 0.6893279 0.7165318 0.7406254 #>  [871,] 0.8752086 0.9123096 0.9246563 #>  [872,] 1.4578910 1.4583682 1.4770672 #>  [873,] 0.8328629 0.8723170 0.8872531 #>  [874,] 0.4699783 0.4808933 0.5598451 #>  [875,] 1.0032747 1.0719340 1.0907543 #>  [876,] 0.6448378 0.6486994 0.6809517 #>  [877,] 0.6396351 0.6842886 0.6853755 #>  [878,] 0.6237321 0.6318489 0.6566461 #>  [879,] 0.9501720 0.9552900 0.9623112 #>  [880,] 0.8522810 0.8565377 0.8673705 #>  [881,] 0.8133001 0.8297257 1.0224619 #>  [882,] 0.6367533 0.6453442 0.6693684 #>  [883,] 1.0255194 1.0407552 1.0565042 #>  [884,] 0.9771703 1.0253986 1.0386725 #>  [885,] 0.7977414 0.8321415 0.8383061 #>  [886,] 0.7116780 0.7142818 0.7359876 #>  [887,] 0.8782568 0.8881701 0.9119187 #>  [888,] 0.7635810 0.7903238 0.7921704 #>  [889,] 0.7429628 0.7457160 0.7683396 #>  [890,] 0.5999032 0.6115695 0.6366187 #>  [891,] 0.6716809 0.7229573 0.7630995 #>  [892,] 1.0762477 1.0881044 1.1068912 #>  [893,] 0.9475533 0.9727051 0.9885702 #>  [894,] 1.0755523 1.0823449 1.1074235 #>  [895,] 0.7279188 0.7289870 0.7313563 #>  [896,] 0.6726538 0.7013520 0.7169060 #>  [897,] 0.6453565 0.7139216 0.7510039 #>  [898,] 1.2619073 1.2675795 1.2769936 #>  [899,] 0.8016593 0.8648237 0.8673705 #>  [900,] 0.6490617 0.6515039 0.6608807 #>  [901,] 0.5734995 0.5786583 0.5949234 #>  [902,] 0.9881925 0.9950551 1.1367108 #>  [903,] 0.8061903 0.8435364 0.8446566 #>  [904,] 1.1419747 1.1423236 1.1679489 #>  [905,] 0.6571526 0.7274239 0.7558442 #>  [906,] 1.8174448 1.8900225 1.8929027 #>  [907,] 1.1969669 1.2977875 1.3232133 #>  [908,] 0.8205560 0.8280257 0.8294225 #>  [909,] 0.5564521 0.6015952 0.6070608 #>  [910,] 1.0155976 1.0261451 1.0475595 #>  [911,] 0.6417677 0.6613804 0.6728076 #>  [912,] 1.1824521 1.1842497 1.2155137 #>  [913,] 1.0673601 1.1018711 1.1211490 #>  [914,] 0.7874002 0.8159161 0.8169891 #>  [915,] 1.3365391 1.3453056 1.3618624 #>  [916,] 0.7234958 0.7731331 0.8201789 #>  [917,] 0.6673185 0.6872136 0.7421168 #>  [918,] 0.8539832 0.9270490 0.9271492 #>  [919,] 1.1401190 1.2028107 1.2152314 #>  [920,] 0.9306644 0.9659702 0.9843739 #>  [921,] 0.7676589 0.7700038 0.8090152 #>  [922,] 0.8191192 0.8568672 0.8682336 #>  [923,] 0.9501547 0.9534876 0.9915576 #>  [924,] 0.5683972 0.5772207 0.5995440 #>  [925,] 0.8445445 0.8506690 0.8723170 #>  [926,] 0.6644866 0.6702855 0.6943452 #>  [927,] 0.8313922 0.8571546 0.8948496 #>  [928,] 0.9440980 0.9540321 0.9554515 #>  [929,] 1.0285618 1.0461687 1.0555033 #>  [930,] 0.6800834 0.6824915 0.7135039 #>  [931,] 1.0087596 1.0238514 1.0594525 #>  [932,] 0.6471911 0.6788550 0.6808746 #>  [933,] 1.5650032 1.5708298 1.6090668 #>  [934,] 0.6748942 0.6806146 0.6944819 #>  [935,] 0.6766853 0.6808966 0.6893937 #>  [936,] 0.6851235 0.6917219 0.7120598 #>  [937,] 1.0973231 1.1989834 1.2877838 #>  [938,] 0.9423955 0.9749614 0.9772198 #>  [939,] 0.5241246 0.5292047 0.5413553 #>  [940,] 0.6499742 0.6660072 0.6728076 #>  [941,] 0.6285037 0.6345182 0.6965337 #>  [942,] 0.5797207 0.5907571 0.6153566 #>  [943,] 0.9860714 1.0116575 1.0146736 #>  [944,] 0.5980938 0.6148939 0.6525344 #>  [945,] 0.8008392 0.8100044 0.8181654 #>  [946,] 0.6278653 0.6568074 0.6598246 #>  [947,] 0.8041155 0.8501530 0.8697622 #>  [948,] 0.8360947 0.8598487 0.8843708 #>  [949,] 1.0333642 1.0451430 1.0613800 #>  [950,] 0.5972669 0.6060020 0.6073647 #>  [951,] 0.8565127 0.8781655 0.8935626 #>  [952,] 0.5534408 0.6196022 0.7231174 #>  [953,] 0.9711019 0.9832292 0.9971279 #>  [954,] 0.6721965 0.6988704 0.7011845 #>  [955,] 1.1711173 1.1806315 1.1929786 #>  [956,] 0.9427301 0.9523940 0.9668906 #>  [957,] 0.5389952 0.5744590 0.5867213 #>  [958,] 0.7167455 0.7221702 0.7324981 #>  [959,] 1.7036430 1.7373106 1.7493559 #>  [960,] 0.9445480 1.0425375 1.0691898 #>  [961,] 1.1572591 1.2587043 1.2708006 #>  [962,] 0.9580713 0.9655681 0.9857375 #>  [963,] 1.0152634 1.0938258 1.1049358 #>  [964,] 0.6884299 0.6910187 0.7221789 #>  [965,] 0.7984554 0.8689290 0.8914123 #>  [966,] 0.8682241 0.8956803 0.9047013 #>  [967,] 0.8288244 0.8521816 0.8812494 #>  [968,] 1.7294127 1.7852821 1.8088838 #>  [969,] 1.0987206 1.2520798 1.2792335 #>  [970,] 1.1935430 1.2072617 1.2105219 #>  [971,] 0.9075436 0.9237505 0.9628483 #>  [972,] 0.6399047 0.6448055 0.6639197 #>  [973,] 0.7544302 0.7852115 0.7960620 #>  [974,] 1.0559064 1.0845825 1.0863054 #>  [975,] 0.7863454 0.7900198 0.8203958 #>  [976,] 0.6499742 0.6724805 0.7044865 #>  [977,] 0.7218856 0.7474796 0.7587196 #>  [978,] 0.7016802 0.7529936 0.7869967 #>  [979,] 1.3407632 1.3627977 1.3977031 #>  [980,] 0.9693567 1.0013603 1.0058949 #>  [981,] 1.4747614 1.5010097 1.5350157 #>  [982,] 1.2490680 1.2632721 1.3562377 #>  [983,] 0.8667383 0.8893668 0.8943507 #>  [984,] 0.9795242 0.9830783 1.0106272 #>  [985,] 0.7262799 0.7473767 0.7587196 #>  [986,] 0.7021955 0.7061400 0.7900433 #>  [987,] 0.5913746 0.6083881 0.6222117 #>  [988,] 0.6630005 0.6647008 0.6974353 #>  [989,] 0.5766040 0.7027155 0.7749031 #>  [990,] 0.5253350 0.5455615 0.5571458 #>  [991,] 0.8832783 0.8950708 0.8982055 #>  [992,] 0.8497099 0.8701832 0.8708907 #>  [993,] 0.8191021 0.9252142 0.9930309 #>  [994,] 0.9136104 0.9892838 1.0029848 #>  [995,] 0.9913798 0.9942286 1.0184711 #>  [996,] 1.0039180 1.0666545 1.1694326 #>  [997,] 0.7915871 0.7916758 0.8983690 #>  [998,] 0.6891970 0.7454463 0.7543404 #>  [999,] 0.9167021 0.9168488 0.9207296 #> [1000,] 0.7020710 0.7042679 0.7080646 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure CyTOF panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) CyTOF panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   rsplit_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `rsplit_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 0.003162278"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample   cd45 pstat5   cd34 outcome class  multiclass event time_to_event #>    <chr>   <dbl>  <dbl>  <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 13     0.841  0.107  0.118     2.79 class2 class1         0         12.0  #>  2 56     0.959  0.863  0.0705    5.98 class1 class2         1         14.6  #>  3 87     0.882  0.278  0.591     3.97 class1 class3         1         11.8  #>  4 20     0.0916 0.379  0.484     2.33 class2 class1         0         11.1  #>  5 69     0.836  0.172  0.379     3.44 class2 class3         1         10.2  #>  6 53     1.00   0.689  0.202     6.22 class1 class2         1          7.26 #>  7 38     0.661  0.943  0.160     5.96 class1 class2         1          5.30 #>  8 54     0.0948 0.0131 0.307     1.27 class2 class2         1          6.52 #>  9 64     0.844  0.714  0.672     3.96 class1 class3         1         11.8  #> 10 48     0.984  0.897  0.276     7.10 class1 class2         1          9.64 #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>               cd45      pstat5        cd34 #>   [1,]  0.09883894  0.95064947  0.19087744 #>   [2,] -0.43598258  0.50807953 -1.07519937 #>   [3,] -1.65188387  0.84206388  0.12744451 #>   [4,] -1.07212264 -1.19346695  0.67006505 #>   [5,] -1.09265632  0.75484829  0.56814249 #>   [6,]  0.01083246  0.78323117 -0.19103154 #>   [7,]  1.63715854 -1.07481468 -0.29004693 #>   [8,] -1.00694360 -0.04982563 -0.60583491 #>   [9,] -0.90834712  1.33215732 -1.32723405 #>  [10,]  0.35439451 -0.12930766 -0.72753447 #>  [11,]  0.59912237 -1.87526393  1.41432690 #>  [12,]  1.74420784  1.26952367  1.00272200 #>  [13,]  0.56899370 -0.28508344  0.11457376 #>  [14,]  1.51497707 -0.59794912  1.10498113 #>  [15,]  1.30603929  0.51762548  1.64160357 #>  [16,]  0.31153887  1.57920628 -1.56263334 #>  [17,]  1.70367688 -1.45583119 -1.38491309 #>  [18,] -1.58034229 -0.44927500  0.46786522 #>  [19,]  0.98100815  0.80271826 -0.04215904 #>  [20,] -1.41359685 -0.42210118 -0.55691358 #>  [21,]  1.48517934  0.27250441 -0.58902543 #>  [22,]  1.74310724  0.60826561 -1.43109720 #>  [23,] -0.51115944  1.26539303 -1.46054944 #>  [24,]  0.45433056 -1.91600539  0.06880735 #>  [25,] -0.07803070 -1.73125152  1.09461664 #>  [26,]  0.45941460  0.48356923 -0.95342989 #>  [27,]  0.41090364 -1.41315834  0.87877002 #>  [28,]  0.95093946  0.72331756  1.61636852 #>  [29,]  0.24925622 -0.98497974 -0.24902240 #>  [30,]  0.58183528 -1.52357944  0.12182477 #>  [31,] -0.92882744  0.08691565 -1.15074369 #>  [32,]  1.61292205  1.39976672 -1.50102497 #>  [33,] -1.06227758  0.65714591 -1.46831970 #>  [34,] -0.56970503  1.51216228 -1.37633744 #>  [35,] -0.15149043 -0.75414105  0.57458506 #>  [36,] -1.10516583 -1.06285369 -1.53472298 #>  [37,] -0.62591806 -1.42028586  0.64868129 #>  [38,] -0.98223503 -0.33360505  0.91651187 #>  [39,] -0.10648204  0.16409972  1.06149555 #>  [40,] -0.29716399 -1.51318944 -0.64986129 #>  [41,] -1.04486942  0.01693847 -0.06784967 #>  [42,]  0.08534298 -1.82843291  0.75506741 #>  [43,] -0.99709259  0.12731820 -0.63022671 #>  [44,] -1.38851446  0.50665940 -0.21566928 #>  [45,]  0.25454059  0.53106233  0.73862292 #>  [46,] -1.21620434 -1.33580668 -0.41339025 #>  [47,] -0.31460763 -1.71949589 -1.05279207 #>  [48,] -0.14275411 -0.22309897  1.25505996 #>  [49,]  0.37488221  1.45557066 -0.85528917 #>  [50,]  0.32118530  1.14774950 -1.13959878 #>  [51,]  1.51560675  1.25552381  1.63502380 #>  [52,] -0.21428209  0.95474548  0.72245244 #>  [53,]  1.59118573  1.04634647  0.89766586 #>  [54,] -1.04048351  0.01404118 -0.91604939 #>  [55,]  1.25910613 -1.06916267  0.04328511 #>  [56,]  1.60930955  0.36554829 -1.08925229 #>  [57,] -0.28154437 -0.78734937  0.73623322 #>  [58,] -1.35650656 -0.90546852  0.46779159 #>  [59,] -0.79250288  0.04530343  1.00988655 #>  [60,] -0.63155119 -0.19461409  1.63168172 #>  [61,]  0.67255194 -0.38314912  0.81356834 #>  [62,] -0.64032491  0.08745549  1.54306344 #>  [63,] -0.94690754  0.73256354 -1.60059665 #>  [64,]  0.58152218  1.22626257  1.20693234 #>  [65,] -0.79761936  1.38569187 -1.39597307 #>  [66,] -0.32650103  1.24037885  1.15918230 #>  [67,]  0.73697388  1.59346501 -1.35527820 #>  [68,]  0.29813199 -0.18846128  0.47784489 #>  [69,] -1.13660704  0.62175880 -0.33005915 #>  [70,] -1.10384511 -0.20098734 -0.44593042 #>  [71,]  1.13240000 -1.63368218  0.79456889 #>  [72,]  0.78854869 -0.69277449  1.50944708 #>  [73,] -1.44123141  1.31748796 -0.23399623 #>  [74,]  1.18293197 -0.45709697  1.48801937 #>  [75,] -1.27115719 -1.22946343  1.31693944 #>  [76,]  1.13805577 -1.07000911 -1.07182693 #>  [77,] -0.39184892 -0.49602189 -1.18722917 #>  [78,]  1.58407232 -1.06774096 -0.47630969 #>  [79,]  0.80945649 -0.03924940 -0.79224610 #>  [80,]  1.31626152  1.38595222  1.42783143 #>  [81,] -0.92117082 -0.67766705 -1.39253087 #>  [82,]  0.46139272  1.13599536  0.52876864 #>  [83,] -1.00826615 -0.69449940  0.13365374 #>  [84,] -0.05153207 -1.09291054  1.15703752 #>  [85,]  0.31692822 -0.79998109  0.79579647 #>  [86,]  1.11059322  0.05300838  1.59088325 #>  [87,] -0.86186511 -0.58641291  0.75151639 #>  [88,]  1.37462790  0.49408087  1.44886582 #>  [89,]  1.48291115 -0.08671660 -0.75325099 #>  [90,] -1.16946451 -0.65013822 -1.09219853 #>  [91,] -1.61840615  1.44628529 -1.40447366 #>  [92,]  0.32756860 -1.33221759  0.43676377 #>  [93,] -1.11944798 -0.50677775  0.06610700 #>  [94,]  0.92257849 -0.18172265 -0.67803386 #>  [95,] -0.37810758  1.39352696 -1.27997869 #>  [96,] -1.19132456  1.33224541 -0.30034165 #>  [97,]  0.72368749 -0.05472159  0.04862143 #>  [98,] -0.35304053  0.42425243 -0.73935768 #>  [99,] -1.59931711  1.33427487 -0.65801240 #> [100,]  0.57819831  1.18706235  0.82293104"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  2.29459449  5.02662947  4.82354367  4.37100565  4.53112747  3.47433312 #>   [7]  0.72933812  1.53017173  4.77751879  1.22922188  5.09065432  3.05801694 #>  [13]  8.15094387  6.54417245  5.23399318  6.10797884  3.09689096  3.55135604 #>  [19]  5.88996210  5.64174412  1.29637045  5.62809971  4.14358865  0.08774227 #>  [25]  1.62016357  3.89648977  3.15492567  3.32267639  6.90413398 -1.79913200 #>  [31]  5.28410643  3.99566154  6.45759694  6.84436236  4.45017086  1.99822835 #>  [37]  4.41030747  6.37667239  2.53859381  4.67328025  3.46576137  5.69332059 #>  [43]  5.01446757  1.44003844  7.96611110  4.98302620  6.04253489  1.08042236 #>  [49]  7.30437407  3.68073091  3.94445885  0.55364257  0.27987855  5.63229953 #>  [55]  4.92378858  5.20530532  4.95169244  6.19889945  3.03121332  5.06479845 #>  [61]  3.11034569  2.86903321  2.67401208  3.12012564  5.34239835  0.34229544 #>  [67]  2.29519624  3.24268620  2.62620969  2.98406867  3.09147000  4.46358554 #>  [73] -0.06673639  4.98807218  0.88365507  0.53612697  4.59851660  5.69682853 #>  [79]  2.08447760  1.32497091  3.61733855  0.40706274  4.63918676  2.38714789 #>  [85]  5.48206478  3.63116790  3.73425876  4.83810834  2.34706732  2.99811171 #>  [91]  1.57002867  0.72583210  3.56211007  0.63756713  4.11575639  4.49816992 #>  [97]  2.45183650  4.79744726  2.71340143  3.26357179"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # … with 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode CyTOF measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing CyTOF data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"      ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction  )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>       cd45    cd38    cd34    cd19 cluster_id .flowsom_metacluster #>      <dbl>   <dbl>   <dbl>   <dbl> <chr>      <chr>                #>  1  0.842   0.356   0.773   0.413  z          2                    #>  2  1.02    0.593  -2.06    0.256  w          1                    #>  3  0.0194  2.42   -1.30    0.0624 x          1                    #>  4  0.619  -1.59    1.07    0.0548 d          2                    #>  5 -0.979  -0.576   1.68    0.728  v          2                    #>  6 -0.828  -0.183  -0.0949  1.61   o          1                    #>  7 -0.384   0.321   0.437   0.515  y          1                    #>  8  1.81    0.0443  0.732   0.377  m          2                    #>  9 -0.0323 -0.0421  0.924  -2.34   m          2                    #> 10 -0.828   0.214  -0.515  -0.152  z          2                    #> # … with 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>       cd45    cd38    cd34    cd19 cluster_id .phenograph_metacluster #>      <dbl>   <dbl>   <dbl>   <dbl> <chr>      <chr>                   #>  1  0.842   0.356   0.773   0.413  z          4                       #>  2  1.02    0.593  -2.06    0.256  w          2                       #>  3  0.0194  2.42   -1.30    0.0624 x          3                       #>  4  0.619  -1.59    1.07    0.0548 d          1                       #>  5 -0.979  -0.576   1.68    0.728  v          1                       #>  6 -0.828  -0.183  -0.0949  1.61   o          2                       #>  7 -0.384   0.321   0.437   0.515  y          2                       #>  8  1.81    0.0443  0.732   0.377  m          4                       #>  9 -0.0323 -0.0421  0.924  -2.34   m          4                       #> 10 -0.828   0.214  -0.515  -0.152  z          4                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 4                      #>  2 5                      #>  3 4                      #>  4 5                      #>  5 8                      #>  6 5                      #>  7 3                      #>  8 8                      #>  9 2                      #> 10 4                      #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 4                    #>  2 1                    #>  3 4                    #>  4 2                    #>  5 2                    #>  6 5                    #>  7 4                    #>  8 1                    #>  9 2                    #> 10 2                    #> # … with 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 3                    #>  2 3                    #>  3 3                    #>  4 3                    #>  5 2                    #>  6 1                    #>  7 3                    #>  8 3                    #>  9 1                    #> 10 1                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 2                         #>  2 7                         #>  3 6                         #>  4 7                         #>  5 5                         #>  6 2                         #>  7 1                         #>  8 4                         #>  9 2                         #> 10 2                         #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 1                   #>  2 1                   #>  3 5                   #>  4 1                   #>  5 5                   #>  6 5                   #>  7 3                   #>  8 6                   #>  9 8                   #> 10 5                   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 1                       #>  2 2                       #>  3 2                       #>  4 2                       #>  5 4                       #>  6 1                       #>  7 2                       #>  8 1                       #>  9 1                       #> 10 4                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   point_alpha = 1,   theme = ggplot2::theme_bw(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `...`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (pass tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". point_alpha numeric value 0 1 set transparency (alpha) point scatterplot. theme ggplot2 theme apply scatterplot. Defaults theme_bw ... Optional additional arguments pass tof_reduce_dimensions.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         pca_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"tsne\",         tsne_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments pass ggraph","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"tof_plot_cluster_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_cluster_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"tof_plot_cluster_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... currently used.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )   # use the same layout as the plot above to color the same  # tree using a different marker  layout_cd45 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"tof_plot_cluster_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )   attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"   # create the volcano plot  volcano <- tof_plot_cluster_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(        tof_tibble = sim_data,        cluster_col = cluster_id,        group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1  3.64 #>  2  5.42 #>  3  4.04 #>  4  4.69 #>  5  1.97 #>  6  4.78 #>  7  1.52 #>  8  2.52 #>  9  3.99 #> 10  4.16 #> 11  3.77 #> 12  1.92 #> 13  4.11 #> 14  5.13 #> 15  2.59 #> 16  4.57 #> 17  4.11 #> 18  4.93 #> 19  4.56 #> 20  3.61"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw CyTOF data. — tof_preprocess","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts directly measured mass cytometer using user-provided function. can used perform standard pre-processing steps CyTOF data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector non-quoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read CyTOF data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing CyTOF data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents CyTOF measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads CyTOF data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read CyTOF data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction single-cell data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>       cd45   cd38    cd34     cd19    .pc1   .pc2   .pc3   .pc4 #>      <dbl>  <dbl>   <dbl>    <dbl>   <dbl>  <dbl>  <dbl>  <dbl> #>  1 -1.06   -1.25  -0.230  -0.613    0.353   1.38  -1.09   0.172 #>  2 -0.678   2.03  -1.04   -0.00202 -0.0409 -0.880  0.603  2.30  #>  3  0.700   0.419  0.0472 -1.08     0.959  -0.899 -0.493  0.130 #>  4 -0.0907  0.177  0.824  -0.898    0.0328 -0.638 -1.05  -0.109 #>  5 -0.627   0.934  0.143  -0.255   -0.355  -0.571 -0.312  0.936 #>  6 -2.48   -0.180  1.69    0.128   -2.21    0.569 -1.65   0.230 #>  7  1.54    0.512  0.599  -1.20     1.09   -1.57  -0.462 -0.572 #>  8  0.207   0.940  1.30    0.980   -1.34   -1.04   0.528 -0.390 #>  9  0.526  -1.97  -0.0926  0.0210   0.882   1.42  -0.161 -1.25  #> 10  0.175  -0.624 -1.38   -1.71     2.17    0.532 -0.847  0.774 #> # … with 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>       cd45   cd38    cd34     cd19 .tsne_1 .tsne_2 #>      <dbl>  <dbl>   <dbl>    <dbl>   <dbl>   <dbl> #>  1 -1.06   -1.25  -0.230  -0.613     2.80    1.05  #>  2 -0.678   2.03  -1.04   -0.00202   2.94    4.10  #>  3  0.700   0.419  0.0472 -1.08      0.140  -2.06  #>  4 -0.0907  0.177  0.824  -0.898    -0.911  -0.693 #>  5 -0.627   0.934  0.143  -0.255    -2.08   -0.137 #>  6 -2.48   -0.180  1.69    0.128    -3.25    2.57  #>  7  1.54    0.512  0.599  -1.20     -1.00   -2.34  #>  8  0.207   0.940  1.30    0.980    -3.53   -0.183 #>  9  0.526  -1.97  -0.0926  0.0210    1.34    0.156 #> 10  0.175  -0.624 -1.38   -1.71      3.15   -1.86  #> # … with 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>       cd45   cd38    cd34     cd19  .umap1 .umap2 #>      <dbl>  <dbl>   <dbl>    <dbl>   <dbl>  <dbl> #>  1 -1.06   -1.25  -0.230  -0.613   -2.55    2.51  #>  2 -0.678   2.03  -1.04   -0.00202  3.80   -2.88  #>  3  0.700   0.419  0.0472 -1.08    -0.175  -0.457 #>  4 -0.0907  0.177  0.824  -0.898   -0.826   2.42  #>  5 -0.627   0.934  0.143  -0.255    3.46   -2.50  #>  6 -2.48   -0.180  1.69    0.128    2.05   -4.13  #>  7  1.54    0.512  0.599  -1.20    -0.693  -0.405 #>  8  0.207   0.940  1.30    0.980    0.177  -2.82  #>  9  0.526  -1.97  -0.0926  0.0210  -2.04    1.78  #> 10  0.175  -0.624 -1.38   -1.71    -0.0169  0.908 #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on single-cell data — tof_reduce_pca","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>      .pc1   .pc2 #>     <dbl>  <dbl> #>  1 -1.02   0.400 #>  2  0.448  0.650 #>  3 -0.898 -2.22  #>  4 -0.632 -2.17  #>  5  1.58   0.923 #>  6  1.47   0.385 #>  7 -1.72  -0.805 #>  8  0.108  0.805 #>  9 -0.229  1.02  #> 10  1.26  -1.83  #> # … with 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>        PC1     PC2     PC3    PC4 #>      <dbl>   <dbl>   <dbl>  <dbl> #>  1 -1.23    2.71    0.0385 -1.27  #>  2  1.60   -0.220   2.08    0.971 #>  3  0.166  -0.0945  0.0430 -0.448 #>  4 -0.628   1.13   -1.94    1.15  #>  5 -1.54    0.336  -0.0514 -1.74  #>  6  0.502   0.316   0.457  -0.228 #>  7 -0.0676  0.570  -0.0453  0.391 #>  8 -0.328   0.878   0.303  -2.08  #>  9  1.03   -0.813   1.72   -1.06  #> 10 -0.267  -0.164  -0.370   0.229 #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   1.65     5.30 #>  2  -2.66     6.96 #>  3  -1.82    -1.04 #>  4  -1.67     7.59 #>  5  -6.71     4.03 #>  6   1.44     2.55 #>  7   0.813    2.24 #>  8  -0.520    7.83 #>  9  -5.37    -7.29 #> 10   3.43    -1.46 #> # … with 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -1.86   -4.65  #>  2   7.40   -1.68  #>  3  -0.861   7.87  #>  4   7.86   -0.996 #>  5   0.701  -7.14  #>  6  -1.57    0.950 #>  7  -2.56    2.68  #>  8   4.48   -4.04  #>  9  -8.11    3.71  #> 10  -8.89    1.93  #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1  3.64   0.809 #>  2  0.761  1.96  #>  3 -5.64   1.30  #>  4  1.25  -4.24  #>  5  0.217  1.50  #>  6  1.25  -3.08  #>  7  3.19  -0.453 #>  8 -1.14  -2.38  #>  9  1.99  -2.47  #> 10 -3.64   1.82  #> # … with 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   2.42    2.71  #>  2   7.36   -4.56  #>  3  -6.93   -4.48  #>  4  -8.18    1.58  #>  5   8.37   -3.69  #>  6  -4.50    0.470 #>  7   1.83    6.45  #>  8  -2.58   -1.18  #>  9  -3.90    3.78  #> 10   0.751  -2.38  #> # … with 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>     UMAP1   UMAP2 #>     <dbl>   <dbl> #>  1 -4.38   0.315  #>  2  0.680 -0.230  #>  3  1.08  -3.92   #>  4  1.58  -3.13   #>  5  3.22  -0.0899 #>  6  3.84   1.89   #>  7  3.85   2.84   #>  8  1.67   1.83   #>  9  2.03   1.76   #> 10 -2.97  -0.234  #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing CyTOF data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              1 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # … with 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.6 #>  2            0.2 #>  3            0.5 #>  4            0.6 #>  5            0.5 #>  6            0.5 #>  7            0.5 #>  8            0.8 #>  9            0.4 #> 10            0.5 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.5 #>  2            1   #>  3            0.6 #>  4            0.3 #>  5            1   #>  6            1   #>  7            0.3 #>  8            1   #>  9            1   #> 10            1   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split CyTOF data into a training and test set — tof_split_data","title":"Split CyTOF data into a training and test set — tof_split_data","text":"Split CyTOF data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split CyTOF data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split CyTOF data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/40]> Bootstrap01 #>  2 <split [100/37]> Bootstrap02 #>  3 <split [100/46]> Bootstrap03 #>  4 <split [100/35]> Bootstrap04 #>  5 <split [100/38]> Bootstrap05 #>  6 <split [100/40]> Bootstrap06 #>  7 <split [100/36]> Bootstrap07 #>  8 <split [100/36]> Bootstrap08 #>  9 <split [100/34]> Bootstrap09 #> 10 <split [100/41]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Analysis/Assess/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)      3.61   #> 2 pstat5           0.719  #> 3 cd45             0.455  #> 4 cd34            -0.0557  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 0.25 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 2 × 2 #>   feature      coefficient #>   <chr>              <dbl> #> 1 pstat5      -0.0400      #> 2 (Intercept)  0.000000744  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 0 × 2 #> # … with 2 variables: feature <chr>, coefficient <dbl>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>       cd45    cd38   cd34   cd19 .upsample_cluster #>      <dbl>   <dbl>  <dbl>  <dbl> <chr>             #>  1 -1.29    0.498   0.727  0.700 a                 #>  2 -0.302  -1.01   -0.632  1.31  a                 #>  3 -0.0495 -0.471  -1.35   0.705 b                 #>  4 -1.31   -0.103   0.873  0.304 b                 #>  5 -0.530  -0.338   0.268 -0.704 b                 #>  6 -1.52    2.17    0.227 -1.12  b                 #>  7 -1.15   -0.0777  0.661 -0.505 b                 #>  8  2.13   -0.714  -1.74  -0.337 b                 #>  9  0.439  -0.688  -1.26  -0.228 b                 #> 10  0.0886 -1.78    0.513 -1.43  b                 #> # … with 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>       cd45    cd38   cd34   cd19 .upsample_cluster #>      <dbl>   <dbl>  <dbl>  <dbl> <chr>             #>  1 -1.29    0.498   0.727  0.700 a                 #>  2 -0.302  -1.01   -0.632  1.31  b                 #>  3 -0.0495 -0.471  -1.35   0.705 a                 #>  4 -1.31   -0.103   0.873  0.304 b                 #>  5 -0.530  -0.338   0.268 -0.704 b                 #>  6 -1.52    2.17    0.227 -1.12  a                 #>  7 -1.15   -0.0777  0.661 -0.505 b                 #>  8  2.13   -0.714  -1.74  -0.337 b                 #>  9  0.439  -0.688  -1.26  -0.228 b                 #> 10  0.0886 -1.78    0.513 -1.43  b                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 a                 #>  4 b                 #>  5 b                 #>  6 b                 #>  7 b                 #>  8 a                 #>  9 b                 #> 10 b                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 a                 #>  4 a                 #>  5 b                 #>  6 b                 #>  7 b                 #>  8 a                 #>  9 a                 #> 10 a                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 a                 #>  4 a                 #>  5 a                 #>  6 b                 #>  7 b                 #>  8 b                 #>  9 a                 #> 10 b                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 a                 #>  3 a                 #>  4 a                 #>  5 a                 #>  6 b                 #>  7 b                 #>  8 a                 #>  9 a                 #> 10 a                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write cytof data to a file or to a directory of files — tof_write_data","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""}]
