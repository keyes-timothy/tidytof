[{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidytof","title":"Contributing to tidytof","text":"outlines propose change tidytof. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidytof","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidytof","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidytof","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"keyes-timothy/tidytof\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidytof","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidytof","text":"Please note tidytof project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = starts_with(\"cd\"),      num_neighbors = 50L,      distance_function = \"cosine\",      method = \"phenograph\"   ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster,     metacluster_cols = starts_with(\"cd\"),     num_metaclusters = 3L,     method = \"kmeans\"   )  phenograph_clusters %>%   dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) %>%   head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 5                   2                   #> 2 H1_PhenoGraph_cluster1 5                   2                   #> 3 H1_PhenoGraph_cluster1 5                   2                   #> 4 H1_PhenoGraph_cluster1 5                   2                   #> 5 H1_PhenoGraph_cluster1 5                   2                   #> 6 H1_PhenoGraph_cluster1 5                   2 phenograph_clusters %>%    dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster1           2                    1000 #> 2 cluster3           2                    1000 #> 3 cluster2           3                     517 #> 4 cluster2           1                     483 # use the kmeans algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\"   )  # use the flowsom algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"flowsom\"   ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\",      augment = FALSE   ) %>%    head()  #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 4               #> 2 18              #> 3 4               #> 4 14              #> 5 4               #> 6 15"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"example, wanted write tidytof-style interface new clustering algorithm “supercluster”, might write something like :","code":"tof_cluster_supercluster <-    function(tof_tibble, cluster_cols, ...) {      cluster_data <- dplyr::select(tof_tibble, {{cluster_cols}})          result <-        cluster_data %>%        do_something(...) %>%        do_something_else(...)   }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"’s possible algorithm doesn’t…","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_daa","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_daa()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest","code":"daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )   significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_dea","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_dea()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_dea_* function family member: tof_dea_diffcyt tof_dea_lmm tof_dea_ttest","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     method = \"ttest\",      cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-    dea_result %>%    mutate(     log2_fc = log(mean_fc, base = 2),      log_p = -log(p_adj),      significance =        case_when(         p_adj < 0.05 & mean_fc > 1 ~ \"increased\",          p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",         TRUE ~ NA_character_       ),      marker =        str_extract(marker, \".+_\") %>%        str_remove(\"_\"),      pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")   )  volcano_data %>%    ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +    geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +    geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +   geom_point(shape = 21, size = 2) +    ggrepel::geom_text_repel(     aes(label = pair),      data = slice_head(volcano_data, n = 10L),      size = 2   ) +    scale_fill_manual(     values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),      na.value = \"#cdcdcd\"   ) +    labs(     x = \"log2(Fold-change)\",      y = \"-log10(p-value)\",      fill = NULL,      caption = \"Labels indicate the 10 most significant marker-cluster pairs\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-    phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1  16.2      5.31 #> 2   6.23    10.9  #> 3   0.946   32.5  #> 4  12.7     17.8  #> 5  18.2     10.7  #> 6   5.61    21.8 phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   11.3    8.66  #>  2   14.1   -3.43  #>  3   35.4    6.52  #>  4   22.3    0.714 #>  5   16.1    8.07  #>  6   25.7   -7.50  #>  7   14.9   -5.15  #>  8   24.4  -12.2   #>  9   22.7   -3.64  #> 10    7.88   0.339 #> # … with 2,990 more rows phenograph_data %>%    tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1  7.52  -6.47  #>  2  7.24  -5.12  #>  3  8.87  -0.677 #>  4  7.46   0.287 #>  5  7.38  -6.41  #>  6 -0.391  4.22  #>  7  6.95  -6.15  #>  8  9.06   0.183 #>  9  6.78  -0.338 #> 10  9.22  -5.75  #> # … with 2,990 more rows  phenograph_data %>%    tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23     0.868  0.978   3.49  #>  2 -0.969  -1.02     0.787  1.22    0.329 #>  3 -2.36    2.54     1.95  -0.882  -1.30  #>  4 -3.68   -0.00565 -0.962  0.410   0.788 #>  5 -4.03    2.07     0.829  1.59    5.39  #>  6 -2.59   -0.108   -1.32  -1.41   -1.24  #>  7 -1.55   -0.651    0.233  1.08    0.129 #>  8 -1.18   -0.446   -0.134 -0.771  -0.932 #>  9 -2.00   -0.485   -0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924    0.692  1.45    0.270 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # … with 2,990 more rows # 3 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23     0.868 #>  2 -0.969  -1.02     0.787 #>  3 -2.36    2.54     1.95  #>  4 -3.68   -0.00565 -0.962 #>  5 -4.03    2.07     0.829 #>  6 -2.59   -0.108   -1.32  #>  7 -1.55   -0.651    0.233 #>  8 -1.18   -0.446   -0.134 #>  9 -2.00   -0.485   -0.593 #> 10 -0.0356 -0.924    0.692 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = phenograph_cluster   ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = cd11b   ) +    ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data %>%    dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     group_cols = phenograph_cluster,      method = \"constant\",     num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     group_cols = phenograph_cluster,      method = \"prop\",     prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-    function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {      x/from[2] * to[2]   }  phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +   scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)   ) +    labs(     fill = \"relative density\"   ) phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)     ) +    labs(     fill = \"relative density\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = function(x) quantile(x = x, probs = 0.75)   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          5.18           1.32               4.32 #> 2 patient1 BCR-XL                         5.30          -0.0186             4.70 #> 3 patient2 Basal                          5.28           1.39               4.21 #> 4 patient2 BCR-XL                         5.41          -0.0201             4.36 #> 5 patient3 Basal                          5.41           1.27               4.28 #> 6 patient3 BCR-XL                         5.42          -0.0362             4.46 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # … with 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    dplyr::left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns  ddpr_patients %>%    dplyr::select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor   # and create the time_to_event and event columns for survival modeling   dplyr::mutate(     relapse_status = as.factor(relapse_status),      time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients %>%    dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-    ddpr_patients %>%    dplyr::filter(is.na(relapse_status))  ddpr_patients <-    ddpr_patients %>%    dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-    ddpr_patients %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 10,      strata = relapse_status   )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # … with 18 more rows training_classifier_metrics <-    class_mod %>%    tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod %>%    tof_plot_model() cv_classifier_metrics <-    class_mod %>%    tof_assess_model(new_data = \"tuning\")  class_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      time_col = time_to_event,      event_col = event,      model_type = \"survival\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # … with 30 more rows survival_metrics <-    survival_mod %>%    tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # … with 51 more rows survival_mod %>%    tof_plot_model() cv_survival_metrics <-   survival_mod %>%   tof_assess_model(new_data = \"tuning\") survival_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows phenograph_data %>%    # perform preprocessing   tof_preprocess() %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # … with 2 more rows phenograph_data %>%    # preprocess   tof_preprocess(transform_fun = scale) %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows  # after preprocessing and post-processing, the data are the same  # except that the re-added noise component is different for each value  phenograph_data %>%    tof_preprocess() %>%    tof_postprocess(redo_noise = TRUE) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  130.  3.03    1.21 #> 2  229. -1.51   10.9  #> 3  292.  4.82    1.71 #> 4  431. -0.0168 12.9  #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files \"phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class()  #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show    # that the columns have been changed   select(where(is.character))  #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # … with 296 more rows phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data() %>%    tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble  # to tof_read_data phenograph_panel <-    phenograph %>%    tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data(panel_info = phenograph_panel) %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%    # create a variable representing if a cell is above or below    # the median expression level of pstat5   mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   ) phenograph_data %>%    mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting started with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"Getting started with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied CyTOF data tof_metacluster() agglomerates clusters smaller number metaclusters tof_daa() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_dea() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"Getting started with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (%>%) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers. Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data %>%    tof_preprocess() %>%   tof_cluster(     cluster_cols = starts_with(\"cd\"), # column specification     method = \"phenograph\", # method specification,    ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster, # column specification     num_metaclusters = 4, # method specification     method = \"kmeans\" # method specification   ) %>%    tof_downsample(     group_cols = .kmeans_metacluster, # column specification     num_cells = 200, # method specification     method = \"constant\" # method specification   ) %>%   tof_plot_cells_layout(     knn_cols = starts_with(\"cd\"), # column specification     color_col = .kmeans_metacluster, # column specification     num_neighbors = 7L, # method specification     node_size = 2L # method specification   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Getting started with tidytof","text":"tidytof verbs can used combination one another using pipe (%>%) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data %>%    # step 1   tof_preprocess() %>%    # step 2   tof_cluster(     cluster_cols = starts_with(\"cd\"),      method = \"phenograph\",      #num_metaclusters = 4L,      seed = 2020L   ) %>%   # step 3   tof_downsample(     group_cols = .phenograph_cluster,      method = \"constant\",      num_cells = 400   ) %>%    # step 4   tof_reduce_dimensions(method = \"tsne\") %>%    # step 5   tof_plot_cells_embedding(     embedding_cols = contains(\"tsne\"),     color_col = .phenograph_cluster    ) +    ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"Getting started with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every CyTOF analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T (2022). tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles. R package version 0.0.0, https://keyes-timothy.github.io/tidytof.","code":"@Manual{,   title = {tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles},   author = {Timothy Keyes},   year = {2022},   note = {R package version 0.0.0},   url = {https://keyes-timothy.github.io/tidytof}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-highly-reproducible-mass-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze Mass Cytometry Data Using Tidy Data Principles","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis high-dimensional cytometry data (.e. mass cytometry, full-spectrum flow cytometry, sequence-based cytometry). Specifically, tidytof provides easy--use pipeline handling high-dimensional cytometry data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels CyTOF data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if(!require(devtools)) install.packages(\"devtools\")  devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if(!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if(!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.1/Resources/library/tidytof/extdata/phenograph\" phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show that the columns have been changed   select(where(is.character)) %>%    head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() %>%    head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-    phenograph %>%    tof_preprocess()  # inspect new values phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Often, CyTOF experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"data(phenograph_data)  phenograph_data %>%    count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     method = \"constant\",      group_cols = phenograph_cluster,      num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     method = \"prop\",     group_cols = phenograph_cluster,      prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # make a scatterplot   ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw() phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(     density_cols = c(cd34, cd38),      target_prop_cells = 0.25,      method = \"density\",    ) %>%    ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple CyTOF runs.","code":"# when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    # create a variable representing if a cell is above or below the median    # expression level of pstat5   mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters %>%    select(sample_name, .flowsom_metacluster, everything()) %>%    head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacl… phenograph_clus…    cd19 cd11b    cd34  cd45 #>   <chr>            <chr>            <chr>              <dbl> <dbl>   <dbl> <dbl> #> 1 H1_PhenoGraph_c… 7                cluster1         -0.0336 2.46   0.608   3.96 #> 2 H1_PhenoGraph_c… 11               cluster1          0.324  0.856 -0.116   4.52 #> 3 H1_PhenoGraph_c… 7                cluster1          0.532  2.67   0.909   4.76 #> 4 H1_PhenoGraph_c… 3                cluster1          0.0163 2.97   0.0725  5.15 #> 5 H1_PhenoGraph_c… 8                cluster1          0.144  2.98   0.128   4.52 #> 6 H1_PhenoGraph_c… 3                cluster1          0.742  3.41   0.336   5.71 #> # … with 19 more variables: cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, cd7 <dbl>, #> #   cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, #> #   pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, #> #   pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters %>%    count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 23 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster1           7                      298 #>  2 cluster3           16                     283 #>  3 cluster2           6                      271 #>  4 cluster2           12                     264 #>  5 cluster1           8                      202 #>  6 cluster3           17                     196 #>  7 cluster2           1                      162 #>  8 cluster3           19                     161 #>  9 cluster3           15                     159 #> 10 cluster1           3                      150 #> # … with 13 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) %>%    head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 12                   #> 2 16                   #> 3 12                   #> 4 17                   #> 5 12                   #> 6 13"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-    phenograph_clusters %>%    tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1   -13.8  -11.3  #> 2   -10.2   -2.06 #> 3   -23.1   17.4  #> 4   -17.7    3.95 #> 5   -17.1  -10.4  #> 6   -24.0    2.73 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = phenograph_cluster)) +    geom_point(shape = 21) +    theme_bw() +    labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = cd11b)) +    geom_point(shape = 21) +    scale_fill_viridis_c() +   theme_bw() +    labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_daa-and-tof_dea","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_daa and tof_dea","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many CyTOF users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_daa tof_dea verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = str_extract(file_name, \"patient[:digit:]\"),      stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\") daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )  significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-    dea_result %>%    tof_plot_cluster_volcano(     use_ggrepel = TRUE   )   volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[kind preamble]","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing CyTOF data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, … # Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, … citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients %>%    select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor first,    # which is something we'll want for fitting the model later   # and create the time_to_event and event columns for survival modeling   mutate(     relapse_status = as.factor(relapse_status),      time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-    ddpr_patients %>%    dplyr::filter(cohort == \"Training\")   ddpr_validation <-    ddpr_patients %>%    dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training %>%    dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-    ddpr_training %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 5,      strata = relapse_status   )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN6           5.62      0.550    0.00374    0.622       2.86     0.342 #> 6 UPN9          15.6       0.446    0.0445     0.163       2.86     0.434 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN7           0.474     0.966    0.124       1.24       2.59     0.243 #> 2 UPN8           0.951     0.958    0.161       0.556      3.18     0.556 #> 3 UPN11          0.332     0.488    0.0146      0.598      2.16     0.320 #> 4 UPN13          0.0634    0.0300   0.0219      0.109      2.34     0.314 #> 5 UPN16          0.156     0.193    0.00407     0.951      2.87     0.254 #> 6 UPN19          2.05      0.780    0.00233     0.298      2.36     0.481 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-    training_split %>%    tof_train_model(     predictor_cols = contains(\"Pop2\"),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = tof_create_grid(mixture_values = 1),      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-08  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # … with 15 more rows class_predictions <-    class_mod %>%    tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions %>%    dplyr::mutate(     truth = ddpr_validation$relapse_status   ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-    class_mod %>%    tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # … with 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod %>%    tof_plot_model() +    labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-    class_mod %>%    tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod %>%    tof_plot_model(new_data = ddpr_validation) +    labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. important principles illustrated following picture: [picture] [construction]","code":"tof_extract_features(   tof_tibble = ___,    cluster_col = ___,    group_cols = ___,   stimulation_col = ___,   lineage_cols = ___,   signaling_cols = ___,   central_tendency_function = ___,   signaling_method = ___,   basal_level = ___, )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path %>%    # step 1   tof_read_data() %>%    # step 2   tof_preprocess() %>%    # step 3   tof_cluster(method = \"phenograph\") %>%   # step 4   tof_downsample(     group_cols = .phenograph_cluster,      num_cells = 100,     method = \"constant\"    ) %>%    # step 5   tof_reduce_dimensions(perplexity = 50, method = \"tsne\") %>%    # step 6   tof_plot_cells_embedding(     embedding_cols = starts_with(\".tsne\"),     color_col = .phenograph_cluster   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for flowSet as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang .data, := tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1/5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    0.935 #> 2 mae    0.797 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster CyTOF data. — tof_cluster","title":"Cluster CyTOF data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster CyTOF data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster CyTOF data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>       cd45   cd38    cd34    cd19 .kmeans_cluster #>      <dbl>  <dbl>   <dbl>   <dbl> <chr>           #>  1  0.871   0.473  0.981   1.11   15              #>  2 -0.217   0.924  1.21    0.623  15              #>  3 -1.09   -2.42  -0.437   2.45   5               #>  4  0.553  -0.299 -1.32   -0.149  13              #>  5 -0.893  -0.755  0.499   1.73   5               #>  6 -0.547  -1.53   0.294  -0.641  10              #>  7 -0.0870 -0.583 -0.0764  0.191  8               #>  8  0.609   0.614 -1.10    0.429  7               #>  9 -3.20   -0.485  0.441  -0.0635 3               #> 10  0.599   0.649  1.05    0.630  15              #> # … with 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>       cd45   cd38    cd34    cd19 .phenograph_cluster #>      <dbl>  <dbl>   <dbl>   <dbl> <chr>               #>  1  0.871   0.473  0.981   1.11   6                   #>  2 -0.217   0.924  1.21    0.623  7                   #>  3 -1.09   -2.42  -0.437   2.45   8                   #>  4  0.553  -0.299 -1.32   -0.149  1                   #>  5 -0.893  -0.755  0.499   1.73   5                   #>  6 -0.547  -1.53   0.294  -0.641  3                   #>  7 -0.0870 -0.583 -0.0764  0.191  8                   #>  8  0.609   0.614 -1.10    0.429  1                   #>  9 -3.20   -0.485  0.441  -0.0635 4                   #> 10  0.599   0.649  1.05    0.630  6                   #> # … with 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"function performs distance-based clustering CyTOF data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.distance_function_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.distance_function_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 b                    #>  2 a                    #>  3 b                    #>  4 a                    #>  5 a                    #>  6 a                    #>  7 b                    #>  8 b                    #>  9 b                    #> 10 a                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"function performs FlowSOM clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 19                   #>  2 14                   #>  3 10                   #>  4 10                   #>  5 7                    #>  6 11                   #>  7 7                    #>  8 7                    #>  9 17                   #> 10 7                    #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"function performs k-means clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 9               #>  2 14              #>  3 15              #>  4 13              #>  5 5               #>  6 13              #>  7 15              #>  8 14              #>  9 17              #> 10 5               #> # … with 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 13              #>  2 15              #>  3 19              #>  4 20              #>  5 6               #>  6 5               #>  7 2               #>  8 15              #>  9 14              #> 10 13              #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering CyTOF data using user-specified selection input variables/CyTOF measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 3                   #>  2 1                   #>  3 1                   #>  4 10                  #>  5 7                   #>  6 1                   #>  7 4                   #>  8 5                   #>  9 9                   #> 10 2                   #> # … with 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 1                   #>  2 2                   #>  3 5                   #>  4 11                  #>  5 4                   #>  6 11                  #>  7 5                   #>  8 4                   #>  9 8                   #> 10 3                   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # … with 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # … with 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_daa_*` function family: tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"tof_daa(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_daa_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tibble nested tibble containing differential abundance results chosen method. See tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"tof_daa_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"tof_daa_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"tof_daa_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_dea_*` function family: tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"tof_dea(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_dea_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tibble nested tibble containing differential abundance results chosen method. See tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"tof_dea_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"tof_dea_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"tof_dea_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data. — tof_downsample","title":"Downsample CyTOF data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>       cd45   cd38   cd34    cd19 cluster_id #>      <dbl>  <dbl>  <dbl>   <dbl> <chr>      #>  1 -1.33    0.484  0.128 -0.0586 v          #>  2 -0.860   0.404 -1.44  -2.08   r          #>  3 -1.33   -1.72   1.24  -0.641  h          #>  4  0.482  -2.36   0.907 -1.48   g          #>  5 -0.354  -0.249 -0.194 -0.0923 g          #>  6  1.30   -0.844  0.422 -0.692  v          #>  7  0.0613  3.12   0.213  0.236  p          #>  8 -1.29   -0.798 -1.01  -0.215  t          #>  9 -0.755  -1.24   0.558  0.0370 t          #> 10  0.0401  1.07  -1.72   0.908  x          #> # … with 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>      cd45   cd38   cd34   cd19 cluster_id #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>      #>  1 -1.39  -1.98  -1.43  -1.46  p          #>  2 -0.506 -0.356 -1.15  -1.42  w          #>  3 -1.10  -0.508 -2.06   1.40  j          #>  4 -1.60   1.73  -1.01   1.37  l          #>  5 -0.823  0.268 -1.91  -0.319 p          #>  6  0.207 -0.446  0.604 -0.304 b          #>  7 -0.248 -0.871  0.923  0.217 w          #>  8  1.44  -1.21   0.455 -2.26  g          #>  9 -0.214  0.434 -0.298  2.45  w          #> 10 -1.60  -1.44  -0.714  0.133 f          #> # … with 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 96 × 5 #>       cd45    cd38   cd34    cd19 cluster_id #>      <dbl>   <dbl>  <dbl>   <dbl> <chr>      #>  1 -0.0628  1.20    0.415 -0.0151 s          #>  2  0.459  -2.38   -0.992 -1.51   p          #>  3 -0.0562 -1.82   -0.145  0.569  n          #>  4  0.564  -0.283   1.15   0.339  v          #>  5 -1.21    0.963   0.735  1.96   n          #>  6  0.702   1.53    0.674 -0.832  e          #>  7 -0.538   0.197  -0.531 -0.372  r          #>  8  0.769  -1.17    1.60   0.370  z          #>  9  0.397  -1.01    0.975 -1.92   b          #> 10  2.57   -0.0631 -1.25   1.09   r          #> # … with 86 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>       cd45    cd38    cd34     cd19 cluster_id #>      <dbl>   <dbl>   <dbl>    <dbl> <chr>      #>  1  0.836  -0.564   0.242  -1.11    q          #>  2  1.57    0.273   1.01    0.00120 k          #>  3  0.245   0.320  -0.0935  0.650   x          #>  4  0.521  -0.0419 -0.0145 -0.656   n          #>  5 -0.0417  1.73   -0.274   0.0757  p          #>  6 -0.797  -1.81    0.454   0.380   h          #>  7 -2.22   -0.107  -1.46   -2.45    t          #>  8  0.187  -0.813  -0.133   1.05    v          #>  9 -0.0298  0.817   0.334  -0.305   x          #> 10 -0.348  -0.291   1.31    0.0435  n          #> # … with 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>       cd45   cd38    cd34     cd19 cluster_id #>      <dbl>  <dbl>   <dbl>    <dbl> <chr>      #>  1  1.57    0.273  1.01    0.00120 k          #>  2 -1.02    1.55   0.0616  0.713   b          #>  3 -0.0417  1.73  -0.274   0.0757  p          #>  4 -0.797  -1.81   0.454   0.380   h          #>  5 -2.22   -0.107 -1.46   -2.45    t          #>  6  0.187  -0.813 -0.133   1.05    v          #>  7 -0.0298  0.817  0.334  -0.305   x          #>  8 -0.389  -0.981 -1.80    0.357   b          #>  9 -0.348  -0.291  1.31    0.0435  n          #> 10  1.12    2.04   0.160   1.63    z          #> # … with 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 518 × 4 #>      cd45    cd38   cd34    cd19 #>     <dbl>   <dbl>  <dbl>   <dbl> #>  1  0.286  0.484  -0.225 -0.0184 #>  2  0.430  1.91    0.337 -0.342  #>  3 -0.469 -0.811  -0.647  0.0127 #>  4  0.297  0.341  -0.842  0.816  #>  5  0.569 -0.231  -1.03   1.80   #>  6  0.183 -1.60    0.644  1.10   #>  7  0.593  1.14    1.63  -1.38   #>  8  0.330  0.128   0.473  0.0613 #>  9 -0.287 -0.0370 -0.470 -0.451  #> 10 -0.211 -0.947  -0.836 -2.07   #> # … with 508 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 195 × 4 #>      cd45    cd38   cd34    cd19 #>     <dbl>   <dbl>  <dbl>   <dbl> #>  1  0.286  0.484  -0.225 -0.0184 #>  2  0.430  1.91    0.337 -0.342  #>  3  0.297  0.341  -0.842  0.816  #>  4  0.479  0.469  -0.891  0.263  #>  5 -0.287 -0.0370 -0.470 -0.451  #>  6 -0.200  0.0645 -0.827  0.816  #>  7 -0.171  0.310  -1.73   2.26   #>  8  1.72  -0.750  -2.34   0.487  #>  9 -1.40   2.32   -0.222  1.25   #> 10  1.23   0.122   0.310  1.03   #> # … with 185 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 199 × 4 #>       cd45   cd38   cd34   cd19 #>      <dbl>  <dbl>  <dbl>  <dbl> #>  1  0.430   1.91   0.337 -0.342 #>  2  0.569  -0.231 -1.03   1.80  #>  3  0.214   0.507 -0.202 -1.33  #>  4  0.593   1.14   1.63  -1.38  #>  5 -0.795   0.640 -1.65   1.08  #>  6 -0.120  -1.23   1.15  -0.648 #>  7  1.72   -0.750 -2.34   0.487 #>  8 -1.18    0.433 -1.52   0.311 #>  9  0.171  -1.42   0.299 -0.185 #> 10  0.0174 -0.811  1.19   0.624 #> # … with 189 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>       cd45   cd38   cd34   cd19 cluster_id #>      <dbl>  <dbl>  <dbl>  <dbl> <chr>      #>  1  0.283   0.883  0.739 -0.461 y          #>  2 -0.310  -0.344 -0.950 -1.48  s          #>  3  0.381   0.674 -2.17   0.449 r          #>  4  0.289   0.482 -0.205  2.20  g          #>  5  0.913   0.850  0.945 -0.119 a          #>  6  0.771  -0.890 -0.361  0.429 c          #>  7 -0.701   0.551 -0.332  0.200 b          #>  8 -0.578   0.451 -0.218 -0.712 d          #>  9  1.04   -1.08  -0.432  2.69  n          #> 10  0.0212  0.426 -0.111  0.271 z          #> # … with 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 89 × 5 #>       cd45    cd38   cd34     cd19 cluster_id #>      <dbl>   <dbl>  <dbl>    <dbl> <chr>      #>  1  0.0448  1.46    0.483 -0.387   a          #>  2 -0.334   0.756   0.837 -0.0352  a          #>  3 -1.08    0.313  -0.502 -0.0475  a          #>  4  1.36    0.0499 -0.250  0.687   a          #>  5  0.719   0.0584 -0.508  0.0930  b          #>  6 -1.06    0.724  -0.902  1.09    b          #>  7 -0.0633  2.27   -2.34   0.0164  c          #>  8  1.47   -0.834  -1.06   0.111   c          #>  9 -1.42   -0.504  -1.29   0.00955 c          #> 10  0.673  -0.0510 -0.576 -0.272   c          #> # … with 79 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation CyTOF data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>      cd45    cd38   cd34    cd19 .spade_density #>     <dbl>   <dbl>  <dbl>   <dbl>          <dbl> #>  1 -0.496  1.25    0.845 -1.24                1 #>  2  0.115 -0.0738 -0.590 -0.613               1 #>  3  0.291 -1.17   -0.112  0.652               1 #>  4 -0.692  0.564  -0.409 -0.128               1 #>  5 -1.78  -0.695  -1.05  -0.633               1 #>  6  1.48  -0.889  -0.696 -0.244               1 #>  7  1.77   0.599   0.884 -0.180               1 #>  8  1.53  -1.73   -1.34   0.605               1 #>  9 -0.243 -2.16    1.01   0.0206              1 #> 10  1.39  -0.510  -0.977  0.477               1 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>      cd45    cd38   cd34    cd19 .spade_density #>     <dbl>   <dbl>  <dbl>   <dbl>          <dbl> #>  1 -0.496  1.25    0.845 -1.24              1   #>  2  0.115 -0.0738 -0.590 -0.613             1   #>  3  0.291 -1.17   -0.112  0.652             1   #>  4 -0.692  0.564  -0.409 -0.128             1   #>  5 -1.78  -0.695  -1.05  -0.633             0.6 #>  6  1.48  -0.889  -0.696 -0.244             0.8 #>  7  1.77   0.599   0.884 -0.180             0.9 #>  8  1.53  -1.73   -1.34   0.605             0.4 #>  9 -0.243 -2.16    1.01   0.0206            0.4 #> 10  1.39  -0.510  -0.977  0.477             1   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby         0.310      -0.359       0.129      -0.151       0.714 #> 2 mario         0.226      -0.246      -0.185       0.602       0.155 #> # … with 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, #> #   `cd19@b_ct` <dbl>, `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, #> #   `cd19@c_ct` <dbl>, `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, #> #   `cd19@d_ct` <dbl>, `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, #> #   `cd19@e_ct` <dbl>, `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, #> #   `cd19@f_ct` <dbl>, `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, #> #   `cd19@g_ct` <dbl>, `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel   values #>    <chr>   <chr>      <chr>      <dbl> #>  1 kirby   a          cd45     0.310   #>  2 kirby   a          cd38    -0.359   #>  3 kirby   a          cd34     0.129   #>  4 kirby   a          cd19    -0.151   #>  5 kirby   b          cd45     0.714   #>  6 kirby   b          cd38     0.760   #>  7 kirby   b          cd34    -0.120   #>  8 kirby   b          cd19     0.00840 #>  9 kirby   c          cd45    -0.334   #> 10 kirby   c          cd38    -0.128   #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@o_emd` `stim_cd38@o_emd` `stim_cd34@o_emd` `stim_cd19@o_e…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 mario                  NA                NA                NA               NA #> 2 kirby                  NA                NA                NA               NA #> # … with 100 more variables: `stim_cd45@r_emd` <dbl>, `stim_cd38@r_emd` <dbl>, #> #   `stim_cd34@r_emd` <dbl>, `stim_cd19@r_emd` <dbl>, `stim_cd45@t_emd` <dbl>, #> #   `stim_cd38@t_emd` <dbl>, `stim_cd34@t_emd` <dbl>, `stim_cd19@t_emd` <dbl>, #> #   `stim_cd45@d_emd` <dbl>, `stim_cd38@d_emd` <dbl>, `stim_cd34@d_emd` <dbl>, #> #   `stim_cd19@d_emd` <dbl>, `stim_cd45@h_emd` <dbl>, `stim_cd38@h_emd` <dbl>, #> #   `stim_cd34@h_emd` <dbl>, `stim_cd19@h_emd` <dbl>, `stim_cd45@v_emd` <dbl>, #> #   `stim_cd38@v_emd` <dbl>, `stim_cd34@v_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 o          cd45   stim         5.76 #>  2 o          cd38   stim         5.68 #>  3 o          cd34   stim         5.65 #>  4 o          cd19   stim         5.51 #>  5 r          cd45   stim        13.6  #>  6 r          cd38   stim        11.2  #>  7 r          cd34   stim         5.41 #>  8 r          cd19   stim         7.38 #>  9 t          cd45   stim        12.2  #> 10 t          cd38   stim         5.26 #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0350   0.0350   0.0473   0.0247   0.0473   0.0391   0.0494 #> 2 mario     0.0370   0.0409   0.0506   0.0311   0.0311   0.0370   0.0409 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0350   0.0350   0.0473   0.0247   0.0473   0.0391   0.0494 #> 2 mario     0.0370   0.0409   0.0506   0.0311   0.0311   0.0370   0.0409 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@d_jsd` `stim_cd38@d_jsd` `stim_cd34@d_jsd` `stim_cd19@d_j…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 mario                  NA                NA                NA               NA #> 2 kirby                  NA                NA                NA               NA #> # … with 100 more variables: `stim_cd45@o_jsd` <dbl>, `stim_cd38@o_jsd` <dbl>, #> #   `stim_cd34@o_jsd` <dbl>, `stim_cd19@o_jsd` <dbl>, `stim_cd45@j_jsd` <dbl>, #> #   `stim_cd38@j_jsd` <dbl>, `stim_cd34@j_jsd` <dbl>, `stim_cd19@j_jsd` <dbl>, #> #   `stim_cd45@c_jsd` <dbl>, `stim_cd38@c_jsd` <dbl>, `stim_cd34@c_jsd` <dbl>, #> #   `stim_cd19@c_jsd` <dbl>, `stim_cd45@y_jsd` <dbl>, `stim_cd38@y_jsd` <dbl>, #> #   `stim_cd34@y_jsd` <dbl>, `stim_cd19@y_jsd` <dbl>, `stim_cd45@x_jsd` <dbl>, #> #   `stim_cd38@x_jsd` <dbl>, `stim_cd34@x_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   jsd #>    <chr>      <chr>  <chr>       <dbl> #>  1 d          cd45   stim        0.827 #>  2 d          cd38   stim        0.685 #>  3 d          cd34   stim        0.775 #>  4 d          cd19   stim        0.621 #>  5 o          cd45   stim        0.757 #>  6 o          cd38   stim        0.646 #>  7 o          cd34   stim        0.734 #>  8 o          cd19   stim        0.722 #>  9 j          cd45   stim        0.787 #> 10 j          cd38   stim        0.661 #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0328   0.0367   0.0386   0.0560   0.0347   0.0347   0.0444 #> 2 mario     0.0373   0.0519   0.0332   0.0436   0.0290   0.0332   0.0498 #> # … with 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0328 #>  2 kirby   b          0.0367 #>  3 kirby   c          0.0386 #>  4 kirby   d          0.0560 #>  5 kirby   e          0.0347 #>  6 kirby   f          0.0347 #>  7 kirby   g          0.0444 #>  8 kirby   h          0.0521 #>  9 kirby   i          0.0328 #> 10 kirby   j          0.0232 #> # … with 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_thresho…` `cd34@a_thresh…` `cd19@a_thresh…` #>   <chr>                <dbl>             <dbl>            <dbl>            <dbl> #> 1 kirby                0.111             0               0.111            0.0556 #> 2 mario                0                 0.125           0.0625           0      #> # … with 100 more variables: `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0.111  #>  2 kirby   a          cd38    0      #>  3 kirby   a          cd34    0.111  #>  4 kirby   a          cd19    0.0556 #>  5 kirby   b          cd45    0.192  #>  6 kirby   b          cd38    0.115  #>  7 kirby   b          cd34    0.0769 #>  8 kirby   b          cd19    0.115  #>  9 kirby   c          cd45    0      #> 10 kirby   c          cd38    0.0870 #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   rsplit_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `rsplit_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"Find k-nearest neighbors cell CyTOF dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents CyTOF measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional arguments pass RANN::nn2","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  238  980  757  656  390  586  888  393   35   727 #>    [2,]  180  793  438  480  142  174  789  233  868   447 #>    [3,]  189  119  295  494  437  803  217  892  322    18 #>    [4,]  941   91   12  279  313  855  237  829  673   177 #>    [5,]  710  571  165  485  975  762  863  964  851   740 #>    [6,]  698  615  361  773  515   94  201  169   31   111 #>    [7,]  374  362  641  896  237  735  214  594  452   860 #>    [8,]  231  336  562  294  201  831  428  225   31   200 #>    [9,]  574  902  282  785  154  299   50  386  506   553 #>   [10,]  690 1000  988  456  424  747  561  986  726   558 #>   [11,]  352  817  264  403  870  946   71  607   70   113 #>   [12,]    4  941  279  934  177  313  855  365   91   103 #>   [13,]  393  696  390  323  153  798  385  886  238   947 #>   [14,]  801   46  314  387  155  958  145  331   45   911 #>   [15,]  996  363  443   56  897  667  791  400  134   533 #>   [16,]  848  704  371  312  612  522  345  713  922   665 #>   [17,]  599  524  506  177  934  375  778  648  800   761 #>   [18,]  803  873  295  718  844  357  189  322  661   156 #>   [19,]  645   52  754  202  559  151  548  981  384   166 #>   [20,]  670  131  149  246  268  842  165  816  484   645 #>   [21,]  110  432  400  653  284  533  473  179  924   205 #>   [22,]  983  222   69  594  463  132  242  745   57   909 #>   [23,]  726  725   45  646  341  148   62   80  587   558 #>   [24,]  813  744  251  511  971  218  617  560  338   992 #>   [25,]  157   95  608  870  403   70  827  880   37   944 #>   [26,]  882  598  344  434   27  854  366  580  786   928 #>   [27,]  916  430  969  416  761  854   26  938  488   616 #>   [28,]  282  435  902  330  648  478  596  668    9   479 #>   [29,]  544  495  149   33  869   77  327  708  213   866 #>   [30,]  684  546  462  381  509  864  771  926  206   604 #>   [31,]  201  225  361    6  106  242    8  677  773   760 #>   [32,]  107  420  241  135  958  508  623  356  887   988 #>   [33,]  544   29  869  984  636  495  708  327  932   688 #>   [34,]  685   66   73  904  776  497  638  549  808   271 #>   [35,]  757  372  888  694  727  987  768  665  376   530 #>   [36,]  748  323   88  113  335  385  474  419  835   331 #>   [37,]   95  787  981  880  403  552  235  876  215   264 #>   [38,]  898  769  572  126  178  856  188  848  295   723 #>   [39,]  399   69  207  983  971  106  381  527  453   771 #>   [40,]  768  727  987  968  769  931  243  372  656   888 #>   [41,]  765  739  510  275  502  392  728  989  150   513 #>   [42,]  379  300  530  660  555   65  252  738  376   665 #>   [43,]  766  732  466  342   56  523  130  820  647   805 #>   [44,]   63  625  860  896  139  830  789  237  673   550 #>   [45,]  508   23   80  631  726  558  988  705  556   976 #>   [46,]  958  314   14  623  107  145  508  801  835    45 #>   [47,]  809  755  483  679  878  111  698  183  615   969 #>   [48,]   98   92  825  906  265  605  219  948  834   814 #>   [49,]  819  753  417  413  580  945  256  714  482   895 #>   [50,]  344  831  231  928  386  785  574  461  299   506 #>   [51,]  716  917  939  881  806  653   70  505  531    79 #>   [52,]  151  202   19  981  754  552  787  559  879   384 #>   [53,]  534  712  729  715  991  518   75  761  593   934 #>   [54,]  418  815   67  491  367  603  589  542  294   562 #>   [55,]  693  499  680  657  394  877  440  359  564   130 #>   [56,]   15  134  250  363  305  667  732  659  766   262 #>   [57,]  132  964  983  485  463  762  617  594   93    22 #>   [58,]  675  979  686  532  622  470  455  677  216   361 #>   [59,]  266  272  811  899  372  516  694  728  987   376 #>   [60,]  223  300  407  592  376  530  759  490  516   767 #>   [61,]  373  730  540  123  669  996  388   15  640   849 #>   [62,]  726  160  646  198  747  804   23  725  298   521 #>   [63,]   44  789  139  896  860  565  673  277  625   237 #>   [64,]  876  557  900  191  966  213  883  209  347   484 #>   [65,]  252  379  555  334  128  148   42  121  660   665 #>   [66,]  904   34   73  668  685  868  638  233  435   648 #>   [67,]  519  271  321  491  418  861  317  479  478   296 #>   [68,]  674  627  452  720  391  442  681  777  707   492 #>   [69,]  983  399   22   39  106  242  971   57  332   132 #>   [70,]   79  717   95  115  179  583  531  653  157   232 #>   [71,]  607  264  932  215  352  351  235  792  817   658 #>   [72,]  326  937  414  543  265  688  894  219  124   834 #>   [73,]  549  685  638  808  920   66  915  570  490   776 #>   [74,]  414  833  824  792  618  918  605  326  666   743 #>   [75,]  729  234  345  612  922   53  116  800  713   764 #>   [76,]  168  115  536  717   88  335  205  703  113   475 #>   [77,]  645  213  548  559  149   19  754  384  202   824 #>   [78,]  933  301  125  137  962  226  573  788  311   841 #>   [79,]  717  179  653   70  115  536  168  205   76   608 #>   [80,]  556  682  293  508   45  705  160  726  631   976 #>   [81,]  441  389  259  942  143  999  890  554  601   537 #>   [82,]  196  702  378  521  808  318  901  804  364   320 #>   [83,]  245  391  582  627  802  626  442  972  281   862 #>   [84,]  535  879  999  942  907   87  151  202  796    52 #>   [85,]  516  767  240  319  292  317  899  692  853   895 #>   [86,]  406  591  953  433  274  129  770  473  208   190 #>   [87,]  907  535  559  787  202   84  966  151   52   879 #>   [88,]  113  335  541   36   76  607  474  115  703   918 #>   [89,]  257  417  170  161  482  945   49  496  539   865 #>   [90,]  951   93  343  606  181  689  162  588   92   304 #>   [91,]  279    4  365  673   12  293  752  177  941   159 #>   [92,]  951  343  575   90   93  118  689  750  576   891 #>   [93,]  343  597   90  214  132  960  762  463  485   719 #>   [94,]  169  615  111  503  624  698  927  600  737     6 #>   [95,]   37  403  880  552  583  157   70  981  608    25 #>   [96,]  672  229  959  278  908  720  268  465  568   688 #>   [97,]  152  227  683  518  236  756  258  415  991   609 #>   [98,]  982  144  621  597  354  825  410  439  538    48 #>   [99,]  590  925  794  747  604  456  186   62  439   298 #>  [100,]  369  748  734  148  141  252   65  323  128   886 #>  [101,]  922  875  329  887  647  312  704  593  612   350 #>  [102,]  733  375  225  506  201  737  761  778   50   299 #>  [103,]  736   12  934  678  127  712  116  913  800   365 #>  [104,]  383  357  609   43  217  466  415  766  844   359 #>  [105,]  637  619  711  837  578  567  444  476  253   481 #>  [106,]  242  453   69   31   39  206  983  225  677   399 #>  [107,]  958  835   32  976  705   46  508  335  424   988 #>  [108,]  903  651  421  255  207  274  377  561  965   186 #>  [109,]  218  797  338  251  171  286  893  813  515   956 #>  [110,]   21  432  653  473  400  533  284  205  179    79 #>  [111,]   94  600  698  615  169   47  809  755  483   224 #>  [112,]  783  453  171  527  203  106  206   39  677   628 #>  [113,]   88  541   36  335  607   76  817  115  264   385 #>  [114,]  197  998  482  957  865  303  412  654  790   994 #>  [115,]  717  179   76  168   79  205  536  230  335   667 #>  [116,]  678  365  973  800  752  633  177  279  103   934 #>  [117,]  741  856  309  752  892  973  713  371  524   901 #>  [118,]  281  689  951  343  891   92  972  162   90   701 #>  [119,]    3  189  325  156  494  892  174  868  322   772 #>  [120,]  997  602  825  184  700  579  144  276  954   401 #>  [121,]  253  474  385  555  419  619  921   65  666   323 #>  [122,]  720  229  674  948   48  452  825  442   68   547 #>  [123,]  182  363  669  443  731   15  500  943  897   659 #>  [124,]  172  543  195  445  921  823  176  369  937    72 #>  [125,]  841  788  394  952  657  133  499   55  573   137 #>  [126,]  136   38  920  776  223  497  898  320  843   333 #>  [127,]  800  103  116  678  973  934   12  313  177   365 #>  [128,]   65  665  252  734  148  145  141  555  379   334 #>  [129,]  208  651  274  421  770  940  953 1000  186   629 #>  [130,]  820  877  693  766  564   55  400  499  680   647 #>  [131,]  165    5  382  273  842   20  754  950  760   663 #>  [132,]   57  983  964  594  485  214  762   93   22   463 #>  [133,]  261  394  311  788  930  952  721  642  985   226 #>  [134,]  232  531  667   56  644  583  847  963  250   996 #>  [135,]  623  612  887  345  922  764  508   32  556   356 #>  [136,]  497  776  126  795  920  843  638   38  685   808 #>  [137,]  261  283  133  788  422  311  226  952  125   655 #>  [138,]  567  350  887  694  253  551  349  619   42   704 #>  [139,]  673  160   63  198   44  789  896  378  925    62 #>  [140,]  632  696  199  905  798  153  697  931  289   639 #>  [141,]  734  905  128  697  333  886  100  665  390   798 #>  [142,]  378   63  233  139  868  565  438  309  789   480 #>  [143,]  272  890   81  512  292  441  466  266   59   431 #>  [144,]  629  621  576   98  982  184  689  343  703   951 #>  [145,]  314   46  128  243  665   16  178  623   14   419 #>  [146,]  601  585  194  883  942  554  535  796   84   340 #>  [147,]  816  209   20  268  670  724  691  758  465   867 #>  [148,]  334  725  252   65  379  682  128  660  804   454 #>  [149,]  484   77  670  645   20  213   29  303  966   559 #>  [150,]  613  739  502   41  244  568  275  392  553   842 #>  [151,]  202   52  879  981  754   19  384  787  559   993 #>  [152,]  518   97  991  258  236  534  846  596  415   756 #>  [153,]  696  586  798  238  939  881  632  697  980   390 #>  [154,]  506  780  428    9  778  574  489  231  785   386 #>  [155,]  387   14  558  801  188  858   23  587  440   341 #>  [156,]  330  661  325  648  596  524  868   28  581   435 #>  [157,]  608   25  870  403   95  475  880  974  469    70 #>  [158,]  616  551  854  349  763  471  193  611  175   740 #>  [159,]  517  315  752  173  655   91  633  355  673   590 #>  [160,]   62  726  804  646   80  682  139  293  198   673 #>  [161,]  455  945  979  170  367  461   89  470  515   831 #>  [162,]  701  774   90  649  891  951  606  511  595   118 #>  [163,]  397  185  280  327  784  826  451  699  513   501 #>  [164,]  484  966  535  883  866  303  149   87   84   999 #>  [165,]  131    5  382  273  709  710  842  743  740   851 #>  [166,]  181  235   19  618  792   74  863  918   90   951 #>  [167,]  486  989  785  598  502  553  392  287  510   592 #>  [168,]  536   76  205  115  717  703  475  307  179   595 #>  [169,]   94  615  927  111  624  503  878  698  938    47 #>  [170,]  470  496  161  979  367   89  417  455  945    58 #>  [171,]  783  527  109  112  453  338  426  677  218   251 #>  [172,]  124  445  195  921  543  379  176  285  454   369 #>  [173,]  355  655  517  159  315  633  840  752  678   590 #>  [174,]  127  793  840  874  325  447  782  524  655   173 #>  [175,]  763  832  740  158  762  476  837  960  912   975 #>  [176,]  743  936  746  921  310  975  851  187  709   937 #>  [177,]  855  973  934   12  365  941  279  800  599    17 #>  [178,]  243  968  572  848  718   16  312  723  145   680 #>  [179,]  717  115   79  667  653  205  536  168  487   230 #>  [180,]    2  480  793  925  789  438  142   63  139    30 #>  [181,]  166  588   90  304  863  891  307  951  606   571 #>  [182,]  731  123  363  443  791  529  970  504  659   897 #>  [183,]  950  614  878  679   47  910  969  248  760   964 #>  [184,]  276  629  144  770  602  208  449  621  404   995 #>  [185,]  163  397  280  636  699  635  807  327  826   464 #>  [186,]  986  421  651  456 1000  439  561  597  267    10 #>  [187,]  937  894  746  936  814  851  176  265  709   719 #>  [188,]  898  856  387  145  155  848  128  587  371   178 #>  [189,]  494    3  322  803  892  295   18  119  156   844 #>  [190,]  591   86  269  929  406  889  473  528  953   432 #>  [191,]  900  340  347  994  248  880  552  412  883   966 #>  [192,]  445  830  577  568   41  765  392  408  592   275 #>  [193,]  471  855  293  616  158  279  763  430  175   912 #>  [194,]  742  256  360  796  370  637  481  366  662   942 #>  [195,]  947  172  124  543  445  327   72  921  285   369 #>  [196,]   82  702  808  378  318  320  759  364  638   901 #>  [197,]  998  482  114  957  865  412  654  303  663   714 #>  [198,]  521   62  804  646  139  160  298  794  378   726 #>  [199,]  905  289  886  652  639  464  333  798  807   141 #>  [200,]  526  977  562  402  839  815  294    8  336   603 #>  [201,]   31  225  361    8  231  733  102    6  831    50 #>  [202,]  151   52  559   19  754  384  787  879  981   645 #>  [203,]  332  771  626  112  399  527   39   69  783    83 #>  [204,]  622  979  470  815  367   58  677  161  446   542 #>  [205,]  168  115   76  536  179  107  424  717  335   958 #>  [206,]  526  106  777  453  332  818  603  242  200   681 #>  [207,]  903  560  971   39  377  399  108  628  617   965 #>  [208,]  770  953  129  629   86  433  651  274  184   421 #>  [209,]  450  563  147  750  618  758  575  919  213   891 #>  [210,]  858  331  697  341   14  387  801  155  716   734 #>  [211,]  249  341  990  587  298  646   23  995   62   858 #>  [212,]  468  912  550  832  682  719  334  746  960   354 #>  [213,]   77  645  559   19  450  966  876  215  149   618 #>  [214,]  719  594  975  746  960  641  936  132  362   851 #>  [215,]  235  792  876  213  264  824  607   19   74   351 #>  [216,]  675  532  782  686  756   97   58  375  683   518 #>  [217,]  394  359  772  494   55  721  693  680  234   322 #>  [218,]  338  813  992   24  251  797  109  511  560   956 #>  [219,]  834  706  326   72  605  543  414  401  982   823 #>  [220,]  563  900  797  347  649  511  247  701   24   251 #>  [221,]  547  521  198  990  353  339  378  298   82   706 #>  [222,]  735  961  594  745  302   22  214  919  641   575 #>  [223,]   60  407  920  320  300  318  490  848  530   699 #>  [224,]  600  483  838  239  969  488  460  938  111   786 #>  [225,]  201   31  733  361  102  381  737    8  778   829 #>  [226,]  311  473  500  422  533  962  669  133  985   504 #>  [227,]   97  683  609  152  415  518  991  216  675   775 #>  [228,]  859  838  529  260  383  991  224  731  753   413 #>  [229,]  465  268   96  720  122  246  265  688  584   948 #>  [230,]  578  481  552  583  967  307  742  981  717   536 #>  [231,]  428  336  831   50    8  569  386  201  154   928 #>  [232,]  978  583  134  671  531  667  250  487  389   395 #>  [233,]  868  524  325  309  648  142  435  599   17   117 #>  [234,]   75  729  713  721  772  359  800  116  345   581 #>  [235,]  215  166  264  876  792   19  403  981  351   918 #>  [236,]  846  258  895  692  152  756  810  299  596   899 #>  [237,]  896  673    7  277  362  829    4  789  641   941 #>  [238,]  586  798  390  656  888  727    1  696  757   323 #>  [239,]  360  329  409  662  224  370  637  786  483   875 #>  [240,]  767  317  321   85  319  751  516  296  739   275 #>  [241,]  985   32  564  930  135  623  642  504  533   255 #>  [242,]  106  411   22   69   31  760  983  745  964   254 #>  [243,]  178  968  145  312  723   40  848   16  704   572 #>  [244,]  613  568  842  408  150  278   41  566  959   246 #>  [245,]   83  972  862  281  391  582  118  774  627   909 #>  [246,]  465  382  268  758  584  842  688  408  708   709 #>  [247,]  944  388  608  827  347  974  520  880  340   469 #>  [248,]  614  578  679  304  588  340  183  552  481   307 #>  [249,]  211  558  747  404  341  995   62   23  726   911 #>  [250,]  667  671  487  732  395  370  305  350  232   805 #>  [251,]  813   24  218  744  971  797  893  527  109   411 #>  [252,]  379   65  454  660  148  334  555  128   42   369 #>  [253,]  619  121  555  419  138  310  105  711  921   474 #>  [254,]  691  850  724  777  681  961  242   22  222   735 #>  [255,]  913  358  736  420  108  561  356   32  938   421 #>  [256,]  366  580  663  498  796  882  194  444  662   819 #>  [257,]  417   89   49  819  753  601  554  482  790   865 #>  [258,]  236  810  775  846  152  895  596  844  692    97 #>  [259,]  389   81  441  537  146  978  942  585  601   535 #>  [260,]  228  731  859  413  529  383  838  970  308   659 #>  [261,]  283  133  137  736  422  311  721  103  788   633 #>  [262,]  305  659  967  742  370  481  671  194  978   340 #>  [263,]  962  730  226  217   78  123  669  125  500   133 #>  [264,]  403  352  235  607  946  215  351   76   71    11 #>  [265,]  814  937  187  894  758  851   72  465  688   919 #>  [266,]  694   59  890  272  805   35  662  512  372   757 #>  [267,]  439  582  597  604  186  626  864  343  986   374 #>  [268,]  465  246  708  670  688  758  229   20  408   959 #>  [269,]  528  889  749  324  500  190  669  406  422   467 #>  [270,]  404  995  982  341  621  354  602  424  249    62 #>  [271,]   67  872  418  904  861  570  519  491  479   915 #>  [272,]   59  266  899  890  512  292  143  516  692   372 #>  [273,]  842  923  434  845  382  510  502  165  598   709 #>  [274,]  940  129  406  377  108  812  651   86  749   903 #>  [275,]  392  296  592   41  739  989  167  765  915   502 #>  [276,]  184  629  770  144  208  449  602  579  689   621 #>  [277,]  829  789  237  599  941  402  778   63    4   673 #>  [278,]  568  244  408  959  688  268  613   96  192   869 #>  [279,]  365   91  293   12  855  193    4  177  941   973 #>  [280,]  501  163  397  652  185  699  451  886  390   327 #>  [281,]  118  343  909  774   92  582  245  972  951    93 #>  [282,]  902    9  574   28  506  596  154  299  479   398 #>  [283,]  261  422  137  620  133  821  736  311  226   628 #>  [284,]  301  573  432   21  473  110  533  885  400   924 #>  [285,]  765  172  728  993  195  445  921  555  530   513 #>  [286,]  308  698  413    6  615   94  111  169  675   755 #>  [287,]  510  486  989  765  592  738  459  598  167   530 #>  [288,]  853  292  895  692   85  664  240  236  810   321 #>  [289,]  639  199  905  333  734  141  697  100  807   886 #>  [290,]  749  511  467  940  377  560  274  338  774   965 #>  [291,]  585  316  146  790  883  601  259  994  257   191 #>  [292,]   85  272  853  288  692  516  895  899  775   143 #>  [293,]  193  279   80  365  682  556   91  855  177   471 #>  [294,]  562    8  336  200  589  231  977  815  622   831 #>  [295,]  803   18   38  572  189  873  322  718  892   357 #>  [296,]  275  392  915  570  592  861  739  317   41   319 #>  [297,]  514  545  723  387  871  155   38  188  437   680 #>  [298,]  198  990   62  211  722  646  794  249  747   995 #>  [299,]  756  574   50    9  846  282  102  902  236   596 #>  [300,]  407  530   42  738  660  592  577   60  379   376 #>  [301,]  284  573  473  311  432  591  226  885  533   952 #>  [302,]  575  750  919  222  909  735  758  463  814    22 #>  [303,]  484  966  412  754  883  998  559  645  957   197 #>  [304,]  588  606  307  248  762  476  578  181  710   571 #>  [305,]  262  659  671  370  742  967  250  481   56   732 #>  [306,]  970  721  991  799  534  859  415  772  529    53 #>  [307,]  606  536  304  520  230  475  595  588  578   181 #>  [308,]  413  286  111   94  675  600  698  615    6   529 #>  [309,]  457  233  524  759  117  648   17  868  599   808 #>  [310,]  921  619  176  459  743  711  763  832  253   175 #>  [311,]  226  473  985  533  133  788  952  930  422   301 #>  [312,]  704  101  342   16  647  922  968  875  243   593 #>  [313,]   12  381    4  941  127  829  546  103  509    91 #>  [314,]   46   14  145  801  958  871  623  395  917   487 #>  [315,]  633  752  631  655  159  678  642  116  365   517 #>  [316,]  291  585  883  191  146   64  994  966  827   340 #>  [317,]  321  240  319  739  767  296  167  275  519    85 #>  [318,]  320  702  364  407  454  660  252  300  196    82 #>  [319,]  317  767  167   85  240  321  516  479  398   296 #>  [320,]  318  702  407  371  300  333  660  364  196   454 #>  [321,]  317  240  519  319   67  478  664  767  296    85 #>  [322,]  892  494  713  856  581  572  803  359  234   772 #>  [323,]  385   36  419  748  121  393  390  474  100   238 #>  [324,]  943  269  528  889  426  749  290  500  467   422 #>  [325,]  868  233  524  156  648  330  174  892  435   117 #>  [326,]  414  605   72  834   74  219  823  833  666   543 #>  [327,]  195  947  397  285  408  708  824  163  172   866 #>  [328,]  429  565  339  492   63  493  839  860  674    44 #>  [329,]  875  593  101  239  922  409  349  356  611   551 #>  [330,]  648  661  156  479   28  478  435  398  524   282 #>  [331,]  697  210   14   36  734  141  748  323  314   801 #>  [332,]  203   69  626  391  777  206  681  399  106    39 #>  [333,]  141  734  320  905  318  898  128  364  886   252 #>  [334,]  148  379  682  660   65  725  252  550  705   976 #>  [335,]   88  474  835   36  113  918  424  107   76   748 #>  [336,]  231  831  386    8  428  569  294  461   50   928 #>  [337,]  348  346  448  784  613  826  278  244  150   568 #>  [338,]  218   24  560  813  992  971  511  109  426   251 #>  [339,]  353  674  328  672  547  625  429  860  221    44 #>  [340,]  191  248  552  481  967  230  742  583  978   262 #>  [341,]  211   23  858  249  404  270   14  726  725   587 #>  [342,]  647  312  732  101  875  466  805  704  593   820 #>  [343,]   93   90   92  951  281  118  597  267  909   439 #>  [344,]  928  461  434   50  882  714  831   26  386   553 #>  [345,]  612  764  556  135  922   75  713  623  508    16 #>  [346,]  348  784  337  451  826  884  914  513  405   539 #>  [347,]  880  191  900  307  181  340  475  248  552   876 #>  [348,]  346  337  539  448  784  613  826  884  816   436 #>  [349,]  551  611  356  409  158  854  488  616  567   922 #>  [350,]  567  887  138  101  694  253  395  922  704   419 #>  [351,]  792  576  658  264  605  235  215  166  946    74 #>  [352,]   11  817  264  946  403  607  113   71  870   541 #>  [353,]  339  674  221  328  672  547  429  625  860   122 #>  [354,]  468  982  212  804  823  538  725   98   62   726 #>  [355,]  173  517  655  159  840  315  633  952  752   590 #>  [356,]  611  349  551  488  135  358  158  922  887   420 #>  [357,]  718  803  968  572   18  844  295  178  512   723 #>  [358,]  420  255  913  488  356  938  460  175  611   476 #>  [359,]  234  680  713  322   55  729  844  647   75   581 #>  [360,]  637  370  239  742  483  662  967  481  194   488 #>  [361,]   31  201    6  225  737  615   94  624  477   102 #>  [362,]  641    7  374  735  594  214  237  745  584   961 #>  [363,]  443   15  791  897  504   56  659  996  182   766 #>  [364,]  454  318  252  660  407  702  320  369   82   148 #>  [365,]  116  279  678  973  752   91  177  293   12   800 #>  [366,]  663  256  882  444  580  498  910   26  614   662 #>  [367,]  470  979  170  496  455  161  831  461  622   815 #>  [368,]  972  997  118  276  649  245  579  689  906   281 #>  [369,]  100  252  454   65  543  124  148  172  748   807 #>  [370,]  742  360  967  637  481  239  305  671  483   194 #>  [371,]  522   16  848  643  856  713  345  320  612    42 #>  [372,]  987  768   35  757  376  727  530  888   59   694 #>  [373,]   61  388  540  640  123  730  669  996   15   943 #>  [374,]    7  362  641  452  896  735  237  961  860   594 #>  [375,]  102  733  934   17  596  712  506  761  778   534 #>  [376,]  530  372  987   42   35  704  300  287  665   516 #>  [377,]  940  560  903  207  774  617  971  274  108   399 #>  [378,]   82  196  901  521  702  139  142  198  646   808 #>  [379,]  252  660   65  334   42  555  454  148  921   682 #>  [380,]  849  640  432  924  653   61   21  540  110   730 #>  [381,]  313  546  684  225  829   39  509  477    4   399 #>  [382,]  709  842  165  273  246  131  746  851  936     5 #>  [383,]  228  859  609  415  260  676  306  838  466   731 #>  [384,]  548  824  711  202  151  993  833   52  619    19 #>  [385,]  474  121  393  323  666  253  918  419   36   607 #>  [386,]  831  231  336  434  553  461   50  785  344   428 #>  [387,]  155   14  801  188  858  314  440   46  145   587 #>  [388,]  247  540  944  974  469  929  373  467  608   996 #>  [389,]  441  978  259   81  671  232  942  805  980   907 #>  [390,]  886  238  798  586  323  888  652  141  757     1 #>  [391,]  627  626   83  582  442  332  909  452  245   281 #>  [392,]  275  296  592  989   41  167  739  510  502   486 #>  [393,]  385  666  323  121  947  474  390   13  607   195 #>  [394,]   55  657  133  125  788  952  499  234  693   217 #>  [395,]  487  531  350  250  667  917  419  887  314   958 #>  [396,]  525  541  505  817  113   88  579  352  946    36 #>  [397,]  163  195  327  807  445  285  699  280  947   172 #>  [398,]  596  643  715  486  167  282   17  319  648   506 #>  [399,]   39   69  983  207  971  771  377  626  132   864 #>  [400,]   21  432  533  110  130  653  820  806  284   473 #>  [401,]  834  932  219  541  706  982  605  326  270   748 #>  [402,]  977  200  839  526  277  778  829  492  569     8 #>  [403,]  264   95  157  475  235  880  870   76   37   352 #>  [404,]  270  995  249  747  341   10  433  424  690   211 #>  [405,]  436  811  513  739  458  784  502   59  598   728 #>  [406,]   86  274  889  422  473  528  311  985  226   504 #>  [407,]  300  318  530  454  320  223  252  660   60    42 #>  [408,]  688  708  244  445  709  937  382  246  842   192 #>  [409,]  854  349  786  551  662  239  567  611  616   329 #>  [410,]  960  719  538  468  975  936  832  597  743   851 #>  [411,]  760  964  242  485  463   57   22  773  983   950 #>  [412,]  303  994  663  754  614  197  998  654  366   957 #>  [413,]  308  286   49  675  228  111  260  819  529   755 #>  [414,]  326   74  605  833  824   72  792  823  666   618 #>  [415,]  609  844  683  152  772  775   97  383  306   258 #>  [416,]  916   27  740  969  430  910  938  964  763   158 #>  [417,]  257   49  753   89  819  413  895  170  945   828 #>  [418,]  589   67  668  902  479  294  271  904  478    28 #>  [419,]  121  253  323  555   65  835  888  128  350   385 #>  [420,]  358   32  255  356  476  578  913  304  488   460 #>  [421,]  651  186  986 1000  561  456  108  129  690    10 #>  [422,]  283  889  406  500  226  528  311  261  504   137 #>  [423,]  472  634  532  686  216  949  821  477  675   782 #>  [424,]   10  538  690  621 1000  335  107  205  976   835 #>  [425,]  587  545  795  901  211  188  646  155  858   387 #>  [426,]  338  943  324  171  218  290  109  821  560   628 #>  [427,]  687  591  602  433  276  770  184  525  190   208 #>  [428,]  569  231  780  154  336  489  386  845  923   778 #>  [429,]  328  492  565  839   63  860  277  720  402   908 #>  [430,]  916  761  616   27  855  781  854  715  158   416 #>  [431,]  779  768  656  757  727   40  501  372  987   512 #>  [432,]  110   21  284  473  400  533  301  653  591   924 #>  [433,]  953  591  770  747   86  404  911   10  690   249 #>  [434,]  553  344  923  928  273  386  785   26  598   502 #>  [435,]  668   28  648  868  330  524  233   17  599   282 #>  [436,]  458  405  811  739  513  498  502  957  598   580 #>  [437,]  297  795  295    3   38  189  841  572  680   494 #>  [438,]    2  793  480  142  840  180  174  173  355   233 #>  [439,]  267  597  186  986  604  582  343  421  864   651 #>  [440,]  764  623  657  930  499  631  508   55   46   564 #>  [441,]   81  942  389  999  890  554  601  259   84   266 #>  [442,]  627  391  582  267   83  449  626  452  439   825 #>  [443,]  363  504  897  791   15  533  241  182  996   659 #>  [444,]  662  910  637  366  993  105  837  854  567   256 #>  [445,]  172  192  124  195  408  454  543  765  709   285 #>  [446,]  867  161  114  515  945  773  865  496  979   893 #>  [447,]  949  782  874  793  546  127  174  381  313   684 #>  [448,]  613  150  337  491  244  566  348  519  816   568 #>  [449,]  802  184  442  627  276  582  629   83  144    99 #>  [450,]  618  213  209   77  645  166   74  758  833   792 #>  [451,]  914  501  866  346  513  784  163  779  826   280 #>  [452,]  374  681  735  961    7  222  720  909  641   362 #>  [453,]  106  677   31  112   39  527  206  477  361   242 #>  [454,]  364  252  660  379  318  407  369  148  300   334 #>  [455,]  831  461  161  979  336   50  344  231    8   945 #>  [456,] 1000  561  986  421  186  690   10  651  747   988 #>  [457,]  759  493  309  565  577  599  852  648  592   808 #>  [458,]  436  498  957  811  405  513  796  580  502   739 #>  [459,]  310  763  471  510  287  740  158  709  176   781 #>  [460,]  791  224  938  488  483  809  913  356  358   969 #>  [461,]  344  831  928  386   50  455  714  434  336   231 #>  [462,]  864  604  509  771  626  546  399  684  267    30 #>  [463,]  485  575   57  863   22  302  919  964   93   132 #>  [464,]  699  652  199  905  223  886  807  333  931   935 #>  [465,]  246  268  758  688  708  265  584  814  382   735 #>  [466,]  890  805  732  342  512   43  875  272  312   647 #>  [467,]  965  889  290  528  812  520  897  749  560   274 #>  [468,]  212  410  538  823  960  832  719  912  354   176 #>  [469,]  974  608  929  540  536  812  595  157  475    79 #>  [470,]  979  367  170  455  161   58  622  496  756   831 #>  [471,]  193  158  459  616  781  763  738  855  550   293 #>  [472,]  423  532  686  634  477  675  821  624  216   737 #>  [473,]  533  311  432  985  110  301  226  284   21   406 #>  [474,]  666  121  385  918  335  823  253  835  921   748 #>  [475,]  595  307  536  608  403  168   76  880  974   157 #>  [476,]  837  762  175  832  578  711  710  105  588   743 #>  [477,]  737  686  532  624  361  225  381  453  503    31 #>  [478,]  479  661  902  282  330  664  319   28  321     9 #>  [479,]  478  902  330  648  282  319   28  661    9   398 #>  [480,]    2  438  180  142  793  139  378  722   63   650 #>  [481,]  742  967  370  578  230  637  360  105  552   583 #>  [482,]  197  865  998  957  714  945  654  819  663   114 #>  [483,]   47  755  224  360  809  969  111  239  460   488 #>  [484,]  149  303  966  883  559   77  645  164  213   998 #>  [485,]  964  463  863   57  571    5  710  132  919   762 #>  [486,]  167  287  989  510  592  781  598  738  643   502 #>  [487,]  395  667  250  531  917  350  887  232  179   115 #>  [488,]  611  938  969  356  349  551  158  854  224   910 #>  [489,]  845  781  916  428  780  569  923  430  154   506 #>  [490,]  915  570  767  751   60  549  296  920  223   319 #>  [491,]  861  519   67  568  448  150  613  296  852   570 #>  [492,]  681  961  839  429  402  745  277  850  720   452 #>  [493,]  852  457  861  565  780  759  392  296  830   839 #>  [494,]  322  892  189  772  234  581  713  359  856   803 #>  [495,]   29  544  866  149  164  857  484   77   33   327 #>  [496,]  170  367  470   89  161  979  446  455  539   417 #>  [497,]  136  776  126  685  920  843  638   73   34   808 #>  [498,]  580  957  256  796  458  663  366  882  436   444 #>  [499,]  657   55  693  877  440  573  394  930  680   952 #>  [500,]  669  528  889  226  422  962  269  406  311   504 #>  [501,]  280  779  451    1  431  757  652  866  914   163 #>  [502,]  598  989  739  553  510  167  434   41  273   150 #>  [503,]  624   94  737  927  938  169  620  600  111   913 #>  [504,]  443  897  791  241  363  985  533  736  460   255 #>  [505,]  396  525  716  817   51  541  113  210  352    88 #>  [506,]  154   17  778  761  430  733  489   50  574   102 #>  [507,]  401  954  932  706  219  636  834  120  984   289 #>  [508,]   45  556  705   80  764  135  623  976  988   631 #>  [509,]  546  462  313  864  381    4  684  108  771    91 #>  [510,]  287  765  989  486  598   41  502  459  273   592 #>  [511,]  744   24  701  290  162  617  774  813  560   377 #>  [512,]  768  890  266  656  272  805  968  727  987   312 #>  [513,]  784  405  728  436   41  458  765  739  285   811 #>  [514,]  723  871  243  297  178  314  145  898  769   931 #>  [515,]  773    6  893  677  945  455   31  361  161   698 #>  [516,]   85  899  376  319   59  767   60  486  272   167 #>  [517,]  159  355  173  655  315  590  747  752  633   631 #>  [518,]  991  534  152   53  600  799  596  299  375    97 #>  [519,]   67  321  491  317  150  861  296  553  613   240 #>  [520,]  812  307  536  897  974  606  230  595  467   304 #>  [521,]  804  198  646   82  378  901   62  196  160   702 #>  [522,]  643  371  738  612   16   42  345  715  471   300 #>  [523,]   43  644  466  531  963  732  847  980  134   512 #>  [524,]   17  233  868  648  309  599  800  325  973   177 #>  [525,]  396  541   88  113  205  703  505   76  817   168 #>  [526,]  200  977  402  206  603  562  815  818    8   294 #>  [527,]  971   39   69   24  453  106  251  399  171   813 #>  [528,]  889  500  269  467  669  422  406  749  324   965 #>  [529,]  731  859  970  838  111  228  224  460  809   991 #>  [530,]  376  300   42  728  407   35  372  287  555   765 #>  [531,]  667  487  395  134  232  917  250  644  179    70 #>  [532,]  686  477  675  361  737  634  472  624  216    58 #>  [533,]  473  985  311  241  400  564  110  226   21   432 #>  [534,]   53  991  518  712  799  729  600  152  934   224 #>  [535,]   84  907   87  966  942  999  559  202  883   787 #>  [536,]  168  307   76  717  475  520  595  115  812   205 #>  [537,]  554  305  828  262  601  441  659  676  259   890 #>  [538,]  410  960  468  424  912  832  719  621  597   212 #>  [539,]  436  998  957  348  458  405  482  197  114    89 #>  [540,]  469  388  929  974  996  608  373  247  897   157 #>  [541,]   88  113  396   36  817  525  607  335  401   748 #>  [542,]  603  622  977  526  562  200  818  206  294   815 #>  [543,]  124  172  823  195   72  369  947  445  326   937 #>  [544,]   29   33  495  327   77  869  149  213  866   708 #>  [545,]  425  858  387  587  155  297  795  188  210   211 #>  [546,]  509  684  381  313   30  462  628  447  864   771 #>  [547,]  706  948  825  198  521  625  860  354  804   221 #>  [548,]  384  833  824  645  754   77  743  711   19   618 #>  [549,]   73  915  570  638  490  808  920  685  861   296 #>  [550,]  660  334  682  212  577  738  471  379  293   160 #>  [551,]  349  611  356  158  616  409  922  854  488   612 #>  [552,]  981  230   52  787  578  481  340  583  151    19 #>  [553,]  785  434  502  598  386  167  344  923  989    26 #>  [554,]  601  942  796  753  819  194  146  441  256   537 #>  [555,]   65  121  379   42  252  253  665  419  921    35 #>  [556,]   80  345  508  764  293  631  612  135  365    45 #>  [557,]  857   64  484  209  149  213  495  966  147    29 #>  [558,]  911   45  988  249  690  631   10   23  508   155 #>  [559,]  966  202  645   19  213   87   77   52  754   151 #>  [560,]  903  207  971  965  377  617  813   24  511   338 #>  [561,]  456 1000  421  651  690  988  986   10  186   255 #>  [562,]  294    8  200  977  622  526  336  815  402   231 #>  [563,]  209  900  463  891  744  750  575  251   24   863 #>  [564,]  820  647  241  766  623  985  130  440  533   930 #>  [565,]   63  457  493  429  328   44  625  277  142   789 #>  [566,]  959  923  842  852  273  613  780  244  246   434 #>  [567,]  138  350  637  349  662  887  551  105  409   444 #>  [568,]  244  278  192  613  150  861   41  491  852   959 #>  [569,]  428  231  489  780  336  845  154  778  745   923 #>  [570,]  915  490  296  549  861  275  767  392  751    73 #>  [571,]  710  863    5  762  485  975  851  743  936   588 #>  [572,]  178  856  680  322   38  968  718  848  713   243 #>  [573,]  284  301  885  499  952  877  788  657  473   125 #>  [574,]    9  902  282  785  299   50  154  506  386   553 #>  [575,]  302  750  919  463  758  863  485  909   93   222 #>  [576,]  703  689  621  144  951  351  982  605   92   792 #>  [577,]  738  759  660  592  550  300  830  454  192   407 #>  [578,]  481  230  105  476  967  742  637  248  552   304 #>  [579,]  946  576  703  351  689  541  396  144  525   621 #>  [580,]  498  256  882  366  663  796   26  811  957   786 #>  [581,]  713  643  322  729  234  398  892  522  715   856 #>  [582,]  267  626  391   83  439  343  627  802  442   281 #>  [583,]  978  230  232  552  481  667   95  717  981   967 #>  [584,]  908  894  641  735  362  961  246  187  937   745 #>  [585,]  146  291  601  340  994  883  316  262  554   194 #>  [586,]  238  798  656  888  727  390  696  153    1   768 #>  [587,]  425  646  901  211   23  188  155  341  521   726 #>  [588,]  304  606  762  571  476  710  181  863  248   307 #>  [589,]  418  668  294  839  562  154  902   28  977   435 #>  [590,]   99  925  517  747  159  456  794  186  604    62 #>  [591,]   86  433  190  301  473  953  406  432  284   110 #>  [592,]  392  738  287  275  486  577  300  759  510   296 #>  [593,]  875  329  101  922   53  409  729  312   75   704 #>  [594,]  745  214  222  132  735  961  362  964   22   641 #>  [595,]  475  812  606  307  536  162  974  168  520   608 #>  [596,]  398  282  375  152  258   17  299  518   28   846 #>  [597,]  960  439  719   93  214  267  410  186  986   538 #>  [598,]  502  989  553  167  510   26  739  486  434   785 #>  [599,]   17  778  177  524  506  277  855  941  934   154 #>  [600,]  111  224   94  969  503  938  483   27  838   991 #>  [601,]  554  942  796  146  819  194  753  441  256   498 #>  [602,]  995  270  184  404  120  700  276  396  427   629 #>  [603,]  818  526  977  200  206  777  815  542  562   254 #>  [604,]  864  462  925  267  439  896  626  374    7   237 #>  [605,]  326  414  792   74  834  219  666  823  918   576 #>  [606,]  304  588  307   90  595  812  536  181  520   162 #>  [607,]   71  264  113  385   88  666  215  918  541   393 #>  [608,]  974  157  469  475  536   95  307  595  717    79 #>  [609,]  415  683  227  383   97  152  306  844  775   772 #>  [610,]  751  728  767  826  240  372  784  699  513    59 #>  [611,]  551  349  356  488  616  158  409  922  854   715 #>  [612,]  345  922  135  551  556  101  887  764  349    16 #>  [613,]  150  244  448  568  566  739  842   41  502   273 #>  [614,]  183  950  910  248  663  878  366  837  412   710 #>  [615,]  698  169   94    6  111  878  927   47  624   361 #>  [616,]  430  715  158  611  551  193  349  854  761   855 #>  [617,]  744  971  560   57  813   24  377  983  903   588 #>  [618,]  450   74  833  824  414  792  548  166  758   851 #>  [619,]  253  711  310  105  921  121  993  743  837   138 #>  [620,]  624  503  736  913  103  965  169  460   94   737 #>  [621,]  982  144  576  703  538  424  629   98  410   354 #>  [622,]  562  294    8  979  815  677  455   58  470   526 #>  [623,]  135  764  887  508   46  612  958  345  440    32 #>  [624,]  503  737   94  169  927  620  477  615  361   111 #>  [625,]  860  830   44   63  894  584  550  896  948   577 #>  [626,]  582  864  391  267  771  604  462  399  332   627 #>  [627,]  442  391   83  582  626  802   68  449  267   452 #>  [628,]  821  207  771  546  477   39  903  509  399   381 #>  [629,]  144  770  184  621  208  129  276  703  689   576 #>  [630,]  650  840  841  355  885  125  952  788  517   173 #>  [631,]  315  642  764   45  556  508  633  930   80   988 #>  [632,]  140  153  696  697  798  931  905  331  199   586 #>  [633,]  315  678  642  655  116  365  752  631  930   159 #>  [634,]  686  532  423  477  472  949  216  782   58   453 #>  [635,]  807  364  192  397  699  454  445  185  830   543 #>  [636,]  185  869   33  635  807  163  984  397  688   278 #>  [637,]  360  370  105  742  567  662  444  239  481   910 #>  [638,]  808   73  776  920  549  196  702  759  309   685 #>  [639,]  289  199  905  333  843  140  734  697  141   464 #>  [640,]  540  373  929   61  388  190  269  469  380   974 #>  [641,]  362    7  374  735  214  584  594  745  237   961 #>  [642,]  930  633  631  315  985  988  764  678  241   556 #>  [643,]  522  715  398  371  581  616  486  738  612   376 #>  [644,]  963  531  134  232  847  806  849  667   43   917 #>  [645,]  754   77   19  559  548  213  202   52  384   303 #>  [646,]  901   62  521  160  726  198   23  804  587   725 #>  [647,]  342  101  820  312  564  875  922  329  623   887 #>  [648,]  330  524  479   17  309  868  435  398  233    28 #>  [649,]  701  162  774  118  595  511  940  290  749   891 #>  [650,]  722  298  517  355  630  590  173  990  249   747 #>  [651,]  421 1000  186  561  456  986  129  108  690    10 #>  [652,]  886  699  905  390  798  931  464  199  280   757 #>  [653,]   79   21  179  110  717  917  400   70  667   432 #>  [654,]  714  663  882  928  945  865  482  344  366   950 #>  [655,]  173  355  315  633  159  517  678  752  642   952 #>  [656,]  727  888  768  757  238  586   35  512  980     1 #>  [657,]  499   55  440  930  394  952  788  631  764   642 #>  [658,]  351  876  215  235  792   71  264  450  166   946 #>  [659,]  262  305  791  967  363  731  370   56  529   742 #>  [660,]  379  334  550  738  252  454   42  577  300   148 #>  [661,]  478  330  156  479  648   28  596  282  902   319 #>  [662,]  444  409  637  567  239  360  786  854  256   366 #>  [663,]  366  882  654  256  714  498  580  614  412   957 #>  [664,]  478  902    9  756  321  574  282  236  299   846 #>  [665,]  128  888   35  555   42   65  252  145  727    16 #>  [666,]  918  474  385  823  824   74  121  393  414   921 #>  [667,]  250  179  487  531  134  395  232  717  583   115 #>  [668,]  435  589   28  904  418  648  479   66  868   330 #>  [669,]  500  528  889  226  897  962  443  504  422   473 #>  [670,]   20  149  268  708  246  244  131  842  465   816 #>  [671,]  250  805  732  305  742  370  232  978  262   481 #>  [672,]   96  339  229  278  908  959  720  353  948   122 #>  [673,]  896   91  237  789  139    4  160  293  279   159 #>  [674,]  720   68  122  339  429  353  328  452  492   860 #>  [675,]  308  532   58  686  413  216  286  361  518    97 #>  [676,]  828  383  537  466  228  753  890  554  895   143 #>  [677,]  453   31  361  515  106  201    8  622  686   225 #>  [678,]  116  365  633  752  973  800  315  103  279   127 #>  [679,]   47  809  878  755  248  183  992  614  483   956 #>  [680,]  693   55  359  572  877  178  499  440  130   657 #>  [681,]  452  492  961  777  254   22  745  735  222   374 #>  [682,]   80  334  705  976  725  293  550  148  212   912 #>  [683,]  227  609  415   97  152  772  306  991  518   799 #>  [684,]   30  546  381  462  509   39  313  864  206   771 #>  [685,]   73   34  638  776  549  920   66  497  808   490 #>  [686,]  532  477  361  634  737  675  472  624   58   677 #>  [687,]  427  505  525  276  602  396  591  190  770   184 #>  [688,]  408  708   72  937  465  265  246  894  268   833 #>  [689,]  951  576  118  703   90   92  144  891  343   621 #>  [690,]   10  988 1000  456  561  747  424  986  558    45 #>  [691,]  724  254  850  222   22  411  750  242  302   961 #>  [692,]  895  899  846  236  811  753  786  580  516    85 #>  [693,]  877   55  680  499  130  657  394  440  820   564 #>  [694,]   35  266  138  888  350  757  567  993  662   372 #>  [695,]  884  779  914  451  346  610  431  143  405   501 #>  [696,]  153  798  238  586  390   13  697  632    1   323 #>  [697,]  331  141  734  905  798  323  210  696  586   100 #>  [698,]  615    6  111   47   94  878  169  755  809   286 #>  [699,]  464  652  397  886  223  407  807  610  163   364 #>  [700,]  602  995  120  990  722  825  298  270  794   184 #>  [701,]  162  774  649  511  744  891   90  118  940   606 #>  [702,]  196   82  318  320  808  364  759  378  901   660 #>  [703,]  576  621  689   76  168  424  951  335   88    90 #>  [704,]  312   16  101  922  612  376  138  848  887   350 #>  [705,]  976  835  682  508  107  725   45   80  334   912 #>  [706,]  219  834  547  543  401  354   72  326  982   825 #>  [707,]   68  627  926  391  442  674   83  802  332   626 #>  [708,]  688  408  465  268  246  869  265  833  670    72 #>  [709,]  382  746  176  842  937  459  187  165  936   273 #>  [710,]  571  762    5  975  837  863  485  740  743   476 #>  [711,]  619  743  837  105  310  384  476  176  253   921 #>  [712,]  934  761   53  715  800  534  616  729  430   103 #>  [713,]  345  856  234  581  322   16  371  612   75   764 #>  [714,]  654  882  945  344  663  928  461  482  865   580 #>  [715,]  616  712  761  643  430   53  611  934  551   349 #>  [716,]   51  917  939  881  806  653  113   36  331    70 #>  [717,]  179  115   79  536  168   76   70  667  230   205 #>  [718,]  968  848  178  572  312  987   16  704  803    40 #>  [719,]  960  214  410  975  746  597  832  936  468   175 #>  [720,]  452  492  681  961  674  735  374  122  948   908 #>  [721,]  772  234  799  729  306  133   75  534  394    53 #>  [722,]  298  650  990  794   99  590  198  925  700   211 #>  [723,]  514  243  178  769  968  898   40  572   38   931 #>  [724,]  691  254  850  411  242  222   22  147  961   750 #>  [725,]  148  726   23  334  682  976  705  835  804    45 #>  [726,]   23  725   62  160   45  646   80  682  804   976 #>  [727,]  768  888  656   35  987  757  372   40  586   238 #>  [728,]  765  530   41  513  287  285  510  989  739   592 #>  [729,]   75   53  234  712  800  534  715  581  593   721 #>  [730,]   61  669  962  373  500  123   15  400  226   263 #>  [731,]  529  970  182  859  260  659  228  791  838   306 #>  [732,]  805  671  250  342  466  890  647  305  101   875 #>  [733,]  102  225  778  375  761  506  201  934  737    27 #>  [734,]  141  100  128  748  333  697  905  369  148   252 #>  [735,]  222  961  745  641  594  362  584  302  452   374 #>  [736,]  103  913  255  620  678  938   75  116  503    12 #>  [737,]  624  503  477  361  102   94  733  927  225   169 #>  [738,]  577  660  300  592  471  287   42  759  550   781 #>  [739,]  502  989   41  150  598  275  392  405  436   765 #>  [740,]  763  175  416  837  158  916  910  710  832   459 #>  [741,]  117  901  752  315  159  646  631  856  517   378 #>  [742,]  481  370  967  360  637  194  578  671  105   262 #>  [743,]  975  936  176  711  851  310  746  710  921   833 #>  [744,]   24  617  813  511  971  774  251  701  162   560 #>  [745,]  961  594  222  735  362  641   22  850  569   214 #>  [746,]  936  176  975  187  851  719  709  763  743   214 #>  [747,]   10  456   62  690  249  590  726 1000  404   558 #>  [748,]  100   36  323  474  734  835  369  385  335    65 #>  [749,]  290  940  274  467  269  889  528  812  377   511 #>  [750,]  302  575  919  758  909  463  222   92  814   735 #>  [751,]  767  610  490  240  570  915   85  826  296   317 #>  [752,]  365  315  973  116  678  159   91  633  293   279 #>  [753,]   49  819  895  692  554  580  417  256  601   838 #>  [754,]  645   19   52  202  151  548  559  303  412   384 #>  [755,]   47  809  483  111  698  679  819  878  224   600 #>  [756,]  299  846  236  574    9  152  664  518   97   282 #>  [757,]   35  372  727  656  888  768  694  987    1   238 #>  [758,]  919  814  575  302  750  265  851  465  246   618 #>  [759,]  577  457  738  592  309  300  702  808  196   660 #>  [760,]  964  411  950  485   57  416  928    5  183   242 #>  [761,]  430  934  712  715  616   27  855  916  506   733 #>  [762,]  710  571  975  175  476    5  588  960  740   832 #>  [763,]  175  740  832  158  459  746  471  310  837   975 #>  [764,]  345  556  623  135  508  440  631  612  930    45 #>  [765,]   41  510  728  287  989  285  739  592  502   530 #>  [766,]  820  564  130  647  342   56   43  732  363   443 #>  [767,]  240  319  490  751   85  317  516  296   60   570 #>  [768,]  987  727  372   40  656   35  888  757  512   665 #>  [769,]  898   40   38  931  723  968  178  848  718   243 #>  [770,]  208  629  129  953  184  433  276   86  621  1000 #>  [771,]  462  864  626  399  203   39  377  207  628   509 #>  [772,]  721  234  729  494  799  415  359  844  581   322 #>  [773,]  515    6  893  411  760   31  654  201  945   698 #>  [774,]  701  162  744  377  511  940  617  281  971    24 #>  [775,]  810  258  844  415  236  152  895  292   97   846 #>  [776,]  136  638  497  808  685  920  126   73  702   196 #>  [777,]  681  254  206  332  818  492  526  452  603   691 #>  [778,]  599  506  733  154  428   17  102  829  569   231 #>  [779,]  431  501  914  451  999  695  757    1  143   656 #>  [780,]  923  852  154  428  489  845  569  386  839   781 #>  [781,]  489  845  471  430  486  916  738  855  459   287 #>  [782,]  949  447  375  127  874  174  799  216  737   313 #>  [783,]  112  171  453  527  203  106  677  206  332    39 #>  [784,]  826  513   41  405  739  150  346  728  613   436 #>  [785,]  553  574  167    9   50  434  386  598  502   344 #>  [786,]  409  239  854   26  662  224  899  838  580   366 #>  [787,]  981  202  151   52  552   87   37  559  907   978 #>  [788,]  952  657  125  394  133  930  311  642  655   499 #>  [789,]   63  277  673  237  896  139   44  829   91   925 #>  [790,]  197  998  482  114  883  957  601  865  146   303 #>  [791,]  460  443  363  504  967  897  659  370  420   809 #>  [792,]   74  351  605  918  414  215  618  235  326   666 #>  [793,]    2  438  174  447  180  127  874  173  233   868 #>  [794,]  925   99  198  139  298  590  896   62  604    63 #>  [795,]  425  136  126  545   38  188  587  741  856   437 #>  [796,]  498  256  942  580  957  601  194  458  554    84 #>  [797,]  956  218  109  992  251  893  679  813   24   994 #>  [798,]  238  586  390  696  886  931  905  153  141   652 #>  [799,]  534  721  991  103   53  306  518  729  772   712 #>  [800,]  973  116  934  365  177  712  678  729  127   715 #>  [801,]   14  314   46  911  387  958  155  871  440   558 #>  [802,]  582  449   83  626  627  864  267  771  208   442 #>  [803,]   18  295  322  718  844  581  572  892  189   494 #>  [804,]  521  198  160  725  646   62  148  726  354   334 #>  [805,]  732  890  671  266  466  512  342  250  329   875 #>  [806,]  871  924  917  801  531  400  653  314   51   716 #>  [807,]  369  397  364  195  947  454  635  100  886   543 #>  [808,]  638  196  702   82  759   73  920  378  549   309 #>  [809,]   47  755  679  483  111  878  698  460  169   615 #>  [810,]  775  258  236  152   97  846  895  664  844   853 #>  [811,]  436  405  458  899   59  580  598  739  692   502 #>  [812,]  520  595  606  536  974  274  467  307  469   929 #>  [813,]   24  251  218  744  971  617  560  878  992   511 #>  [814,]  265  851  187  937  919  758  936  894  302   214 #>  [815,]  200  336  562  526  294    8  622  818  977   831 #>  [816,]  147  670   20  448  268  867  114  149  348   337 #>  [817,]  352   11  113  541  396  264  607  946   88    71 #>  [818,]  603  526  777  815  206  200  254  977  724   850 #>  [819,]   49  753  256  755  482  580  865  663  554   796 #>  [820,]  564  647  766  130  241  623  342  440  250   533 #>  [821,]  628  283  477  472  546  207  949  634  423   509 #>  [822,]  873  357   18  775  292  803  295  844  810   104 #>  [823,]  468  921  543  124  666  474  176  326  414   918 #>  [824,]  833   74  384  548  414  666  618  918  743   176 #>  [825,]   98  547   48  982  948  144  706  354  442   219 #>  [826,]  784  513   41  346  150  610  739  163  405   275 #>  [827,]  944  583  978  247   25  134   95  340  608   262 #>  [828,]  676  537  753  554  383  228  417  836  260   257 #>  [829,]  277  941  237    4  778  313  569  225  381   402 #>  [830,]  625  577  192  550  894  860   44  445  759   584 #>  [831,]  461  231  336  386   50  455  344  928    8   428 #>  [832,]  175  763  912  960  719  468  975  476  740   310 #>  [833,]  824   74  548  414  851  618  936  176  743   937 #>  [834,]  219  326  605  706   72  414  401  543  823   982 #>  [835,]  976  705  107  958  725  335  474  419   46   748 #>  [836,]  828  537  676  260  257  554  383  259  601   417 #>  [837,]  910  476  740  710  711  175  105  763  444   762 #>  [838,]  859  228  224  239  786  600  529  483  329   991 #>  [839,]  402  200  569  780  492  977  428  589  852   336 #>  [840,]  355  173  174  655  438  315  741  517  788   952 #>  [841,]  125  394  788  499  657  952  573  877  693    55 #>  [842,]  273  382  709  923  244  165  510  131  845   566 #>  [843,]  126  920  136  497  776  333  464  808  639   702 #>  [844,]  415  775  258  359  581  803  772  322  810   152 #>  [845,]  489  781  923  273  780  428  916  569  434   510 #>  [846,]  236  895  692  258  299  756  899  786  152   596 #>  [847,]  963  134   56  644  849  827   15  996  232   531 #>  [848,]   16  371  178  968  718  704  665  856  376   312 #>  [849,]  963  653  134  847  996   79  644   70  540   531 #>  [850,]  961  254  745  691  222  724  735  566  681   908 #>  [851,]  936  975  743  814  746  187  176  833  937   919 #>  [852,]  780  493  923  861  392  566  908  154  845   959 #>  [853,]  288  292   85  240  664  810  321  895  317   692 #>  [854,]  409  158  349  616  551   27  910  430  488   786 #>  [855,]  177  941  193  430  279  616   12  761  934   916 #>  [856,]  713  892  371  322  117  572  848  188   16   581 #>  [857,]  557   29  495  147  149  816  484  670  209   544 #>  [858,]  210  341  387  155  211  545  587  331   14   249 #>  [859,]  228  838  529  224  731  991  329  383  239   875 #>  [860,]  625   44  896  362  641    7   63  830  374   948 #>  [861,]  493  296  852  491  570  915  392  568  275    67 #>  [862,]  245  391   83  281  972  627  909  332  442   582 #>  [863,]  571  485  710  919    5  463  762  575   93   975 #>  [864,]  462  604  626  771  267  509  439  399  186   925 #>  [865,]  945  482  197  654  893  714  819  663  114   412 #>  [866,]   87  451  164  327  149  907  914   77  495    84 #>  [867,]  446  114  816  147  724  773  197  161  893   515 #>  [868,]  233  325  524  648  435  309  330   17  599   142 #>  [869,]  708  688   29  268   33  408  278  544  984   465 #>  [870,]  157  403   25  946   11  352  264  475  608   880 #>  [871,]  806  314  801  514   14  387  924  917  130    46 #>  [872,]  271   67  904  418  478  519  321  664  479   661 #>  [873,]   18  295  803  490  767  718   85  292  751   357 #>  [874,]  447  949  174  782  793  127  840  325  546   799 #>  [875,]  329  593  101  922  239  647  312  409  342   349 #>  [876,]  235  215  213  880  658   37  166   19  450   559 #>  [877,]  693  499  130   55  680  657  573  394  440   820 #>  [878,]  183   47  169  615  950  698  679  809  927   111 #>  [879,]  993  151  202   84   52  105  694  384  444   253 #>  [880,]  347   95  403  475  552   37  191  307  876   608 #>  [881,]  939  917  716  153   51   70  531  980  323   696 #>  [882,]   26  663  714  366  580  344  654  928  256   498 #>  [883,]  966  303  535  146  559  484  994  412  164    84 #>  [884,]  914  346  695  451  348  779  999  539  164   405 #>  [885,]  573  284  301  558  155  499  249  911  952   387 #>  [886,]  390  905  652  798  141  734  369  238  100   665 #>  [887,]  350  135  101  922  623  567  138  612  551   349 #>  [888,]  727   35  656  665  757  238  768  586  694   372 #>  [889,]  528  500  467  269  406  422  669  965  274   749 #>  [890,]  805  466  266  512  272  732  441  671  143   694 #>  [891,]  951  181  162  118   90  701  689   92  166   281 #>  [892,]  322  494  856  117  713  581  572  803  325   234 #>  [893,]  865  773  515  698    6  945  654  797  251   994 #>  [894,]  937  187  584  265  814  948   72  709  746   641 #>  [895,]  692  236  846  899  753  258  786   49   85   811 #>  [896,]  237  673    7  374  362   44  789  860  641    63 #>  [897,]  443  504  520  363  791   15  996  467  812   533 #>  [898,]  769   38  188  333  931  848  178  141   40   723 #>  [899,]  692  811  895  516   59  786  272  846  266   409 #>  [900,]  191  347  994  248  181  563  412  340  880    19 #>  [901,]  646  587  160  378   82  741   23  521  702   320 #>  [902,]  282    9  574   28  479  478  154  785  299   506 #>  [903,]  560  207  965  108  377  617  971  940  620   927 #>  [904,]   66  668  479  418  271  330  478  435  661    28 #>  [905,]  886  199  141  798  333  734  652  931  697   390 #>  [906,]   48  984   92  450  658  351  750  209  605   618 #>  [907,]   87  535   84  787  879  999  202  151  559     1 #>  [908,]  584  959  852  961  566  246  850  860  830   745 #>  [909,]  302  750  575   22  463  281  452  343  222    93 #>  [910,]  837  444  854  740  969  366  614  488  637   158 #>  [911,]  558  988  690  801   10  107   45  958   14   205 #>  [912,]  832  212  976  175  960  468  538  986  682   705 #>  [913,]  938  255  358  736  488  503  103  611  460   356 #>  [914,]  451  884  779  999  866  346  164  501  513   695 #>  [915,]  570  549  296  490  275  861  392   73  767   592 #>  [916,]  430  416   27  740  761  855  489  616  158   854 #>  [917,]  531  395  487  716  314  115  806  881  179    36 #>  [918,]  666  474   74  792  335  823  385  824  414   711 #>  [919,]  758  575  302  863  814  851  750  485  463   571 #>  [920,]  638  223  808  126   73  490  549  776  685    60 #>  [921,]  310  176  172  823  124  619  121  743  555   379 #>  [922,]  612  101  887  551  135  345  349  875  704   593 #>  [923,]  273  845  780  434  842  489  553  428  386   502 #>  [924,]  806   21  284  871  400  432  801  653  110   573 #>  [925,]   99  604  794  590  139  789  896  673  864   462 #>  [926,]   30  684  546  462  180  707  509  771  864   802 #>  [927,]  169  503  624   94  938  615  878  913  416   737 #>  [928,]  344  461  434   50  714  882  831  654   26   386 #>  [929,]  469  974  540  812  595  749  388  520  608    86 #>  [930,]  642  985  631  241  440  764  657  633  952   988 #>  [931,]  798   40  769  905  898  652  886  586  141   727 #>  [932,]  401   71  834  607  219  605  326  792  947   984 #>  [933,]   78  301  591  573  284  190  885  473  432   226 #>  [934,]  712  761  177   12  800  855  103  973  430   715 #>  [935,]  751  464  490  570  699  610  915  826  920   549 #>  [936,]  851  975  743  746  176  187  719  814  937   410 #>  [937,]  187  894  265  814   72  851  936  176  746   709 #>  [938,]  488  913  969  503  927  460  224   27  611   358 #>  [939,]  881  716   51  153  917  696   70  323   36   113 #>  [940,]  377  274  129  290  774  903  749  560  511   812 #>  [941,]  855    4   12  829  177  279  916  430  193    91 #>  [942,]  796  999   84  441  601  554  535  194  146    81 #>  [943,]  324  528  426  889  467  182  269  290  338   500 #>  [944,]  247  827  388  608   25  347  340  880  974   157 #>  [945,]  714  865  654  482  461  161  344  819  882    49 #>  [946,]  352  264  579  351  403  703  817  870   11    76 #>  [947,]  195  543  124  393  172  327   72  369  666   326 #>  [948,]  894  860  584  265  641  547  187  937  625   362 #>  [949,]  447  782  874  546  477  127  634  381  737   174 #>  [950,]  183  614  878  760  964    5  663  910  654   710 #>  [951,]   90  689   92  343  891  118  576  181   93   162 #>  [952,]  788  657  930  642  311  394  133  655  125   499 #>  [953,]  208  433  129  770   86  651  456 1000  421   274 #>  [954,]  997  120  579  401  507  932  906  602  984    48 #>  [955,]  870   25  157  880  403  876  347   95   11   608 #>  [956,]  797  679  992  809  755   47  218  698  893   286 #>  [957,]  998  498  482  197  458  796  580  663  436   256 #>  [958,]  107   46  835   32  623  508  705  976   14   314 #>  [959,]  566  908  852  244  246  568  850  278  465   584 #>  [960,]  719  410  832  538  597  975  468  762  214   175 #>  [961,]  745  735  222  850  594  681  362  641  584    22 #>  [962,]  226  500  669  311  422  137  133  261  263   283 #>  [963,]  644  847  134  849  232  531   70  827   56   583 #>  [964,]   57  485  132  760  983    5  594  411  710   463 #>  [965,]  903  560  467  620  108  207  255  274  504   617 #>  [966,]  559  883  303  484  645   87  535  213  202   754 #>  [967,]  481  742  370  360  578  230  262  637  305   791 #>  [968,]  178  718  243  848  312   40  572  704   16   512 #>  [969,]  488   27  938  483  224  910  416  600  854   916 #>  [970,]  306  731  529  991  859  799  620  182  534   228 #>  [971,]  560  617  813   24  207  744  527   39  399   377 #>  [972,]  118  245  281   83  582  343  689  862  442    92 #>  [973,]  800  116  365  177  752  678  934  279  293   855 #>  [974,]  469  608  536  812  520  929  595  475  540   157 #>  [975,]  936  743  851  746  710  719  762  571  176   410 #>  [976,]  705  835  912  682  107  725  508  334  468    45 #>  [977,]  200  526  402  562  839  294  603  589    8   492 #>  [978,]  583  232  671  787  389  742  981  552  481   262 #>  [979,]  470  367  161  455  170   58  622  204  831   515 #>  [980,]    1  656  238  586  153  888  389  881  727   757 #>  [981,]  552  787   52  151  202   19  230  105  578   235 #>  [982,]  621   98  354  144  576  270  605  538  834   468 #>  [983,]   57  132   69  964   22  399   39  617  594   463 #>  [984,]  219  834   33  906  326   48  932   72  869   605 #>  [985,]  241  930  533  642  311  473  564  504   32   988 #>  [986,]  186  421 1000  456  651  561  912  597   10   690 #>  [987,]  372  768   35  727  376  757   40  888  665   530 #>  [988,]  690   10  561   45  558  508 1000  911  642   456 #>  [989,]  598  502  167  510  486  287  739  765  392    41 #>  [990,]  211  298  995  722  249  587  646  341  198   521 #>  [991,]  518  534   53  799  152  600  306  859  529   970 #>  [992,]  218  679  956  813  809   24  797  511   47   878 #>  [993,]  879  444  619  384  105  151  694  253  711   662 #>  [994,]  412  191  900  883  197  303  248  865  340   893 #>  [995,]  404  270  249  602  211  298  747  990  341    62 #>  [996,]   15  897  179  363  667  443  540  974  134    79 #>  [997,]  120  954  906   48  579  825  144  972  276   576 #>  [998,]  197  957  482  114  303  498  412  796  654   663 #>  [999,]  942   84  535  441  796  907  458  879  914   266 #> [1000,]  456  421  690   10  561  986  651  186  988   424 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.61163517 0.6135253 0.6913840 0.7129823 0.7553842 0.8128024 0.8214172 #>    [2,] 0.63129600 0.6762456 0.6996558 0.8061170 1.1585501 1.3850537 1.4052622 #>    [3,] 0.89814890 1.1032247 1.5368671 1.5897787 1.6163052 1.7350254 1.7987848 #>    [4,] 0.35363022 0.3766537 0.3858123 0.4372660 0.5170674 0.5637341 0.5793640 #>    [5,] 0.27609715 0.3209740 0.3723564 0.4262079 0.4607784 0.4728922 0.4924352 #>    [6,] 0.37628853 0.3989867 0.5711063 0.5860866 0.6237970 0.6380328 0.6575152 #>    [7,] 0.19502398 0.2432616 0.2721334 0.4564948 0.4825303 0.6439947 0.6500213 #>    [8,] 0.45728068 0.4870014 0.4958056 0.5016096 0.5658458 0.6094482 0.6990602 #>    [9,] 0.12176819 0.2950063 0.3515161 0.4900059 0.5624836 0.5699545 0.5985999 #>   [10,] 0.10532073 0.3592579 0.4019809 0.4305954 0.4984337 0.5275916 0.5424743 #>   [11,] 0.32417785 0.5354088 0.8258400 0.9352301 0.9481123 0.9575089 1.0736834 #>   [12,] 0.38581234 0.3888459 0.4070295 0.4277738 0.4369935 0.4592833 0.4612017 #>   [13,] 0.80932522 0.8346574 0.9202660 0.9285036 1.0487673 1.0538615 1.0860292 #>   [14,] 0.40877636 0.4296056 0.4724614 0.5850073 0.6389190 0.6412419 0.7192994 #>   [15,] 0.47064827 0.5066234 0.6070111 0.6684414 0.7403758 0.9414466 0.9653818 #>   [16,] 0.35602338 0.4013802 0.4190740 0.5131094 0.5429400 0.5866771 0.5878128 #>   [17,] 0.34489464 0.4636551 0.5192793 0.5266486 0.5733076 0.6101705 0.6301933 #>   [18,] 0.49487639 0.6970574 0.8129116 1.0506519 1.1257066 1.1752569 1.2008796 #>   [19,] 0.41204801 0.4271220 0.4430797 0.4461668 0.5058139 0.5138351 0.6125040 #>   [20,] 0.23819931 0.7006711 0.7810015 0.8275570 0.8694149 0.8801923 0.9126869 #>   [21,] 0.28315452 0.3642757 0.5956339 0.6492154 0.7065950 0.7737067 0.7822590 #>   [22,] 0.49528400 0.4965968 0.5082121 0.5299167 0.5629332 0.6065198 0.6098942 #>   [23,] 0.35752222 0.4162810 0.4603005 0.5691726 0.6203677 0.6472811 0.6598487 #>   [24,] 0.32935265 0.3481201 0.4461766 0.5425419 0.5736080 0.5999474 0.6552467 #>   [25,] 0.49800585 0.8164395 0.8522809 0.8750358 1.0084653 1.0185452 1.0190882 #>   [26,] 0.33990152 0.4565522 0.5086029 0.5171921 0.5339742 0.5402686 0.5483217 #>   [27,] 0.29936042 0.3583976 0.3742121 0.4136836 0.4590087 0.4722274 0.5339742 #>   [28,] 0.50500060 0.5370323 0.5383660 0.6904692 0.7213851 0.7599748 0.7659849 #>   [29,] 0.40971328 0.8132447 0.8251296 0.9333985 0.9339558 0.9483383 0.9968869 #>   [30,] 0.34807105 0.7153810 0.9144785 0.9149601 1.0180504 1.0540351 1.1240596 #>   [31,] 0.27701128 0.4332539 0.4497544 0.6696504 0.6823485 0.6843793 0.7210513 #>   [32,] 0.47865648 0.4902074 0.4993451 0.5036171 0.5488292 0.5913470 0.5987923 #>   [33,] 0.82681452 0.9333985 0.9681346 1.0334100 1.2705616 1.4134781 1.4668401 #>   [34,] 0.79298070 0.8220972 1.1241716 1.2172803 1.2769555 1.4108729 1.4260483 #>   [35,] 0.34558726 0.3702092 0.3717383 0.4141353 0.4469935 0.4514866 0.5148118 #>   [36,] 0.49774394 0.5049946 0.5358639 0.5375897 0.5920210 0.6627264 0.6823486 #>   [37,] 0.46356279 0.6316444 0.7681231 0.7746827 0.7851902 0.8131079 0.8178939 #>   [38,] 0.62892817 0.6729307 0.6845856 0.7961923 0.8372441 0.8643933 0.8727243 #>   [39,] 0.29158114 0.5517506 0.5772049 0.5902056 0.6199791 0.6830367 0.7631499 #>   [40,] 0.44246515 0.5307184 0.6068686 0.6259809 0.6281919 0.6289469 0.7203485 #>   [41,] 0.29756102 0.4377380 0.4979916 0.5258520 0.5391653 0.5429184 0.5436878 #>   [42,] 0.36017886 0.4353936 0.4436585 0.4512288 0.4650741 0.4923810 0.4934921 #>   [43,] 0.90943312 0.9251836 0.9295271 0.9440216 1.0394386 1.0680748 1.0944421 #>   [44,] 0.37715538 0.4253854 0.4552518 0.6114672 0.6684750 0.7012308 0.7465999 #>   [45,] 0.30614263 0.4603005 0.4619395 0.4927835 0.5001631 0.5177791 0.5186687 #>   [46,] 0.30853299 0.3868231 0.4296056 0.4997511 0.5530897 0.5678200 0.6096445 #>   [47,] 0.21295814 0.2860438 0.3610922 0.3976588 0.4205361 0.4522741 0.4927272 #>   [48,] 0.83017895 0.8611287 0.8811211 0.8851540 0.9087976 0.9275355 0.9496037 #>   [49,] 0.36578040 0.4146402 0.6727394 0.7695295 0.7709334 0.7834074 0.8292958 #>   [50,] 0.39113923 0.4408032 0.4479291 0.4569902 0.5010619 0.5061542 0.5164213 #>   [51,] 0.28101001 0.8399900 0.8416160 0.9400313 0.9487577 1.0240322 1.1359231 #>   [52,] 0.16006271 0.2308148 0.4271220 0.4435606 0.4710908 0.5562532 0.5660106 #>   [53,] 0.27599437 0.3578974 0.4089000 0.5111125 0.5953967 0.5999233 0.6046245 #>   [54,] 1.99036192 2.0296358 2.1103730 2.1402782 2.1412646 2.1546192 2.2014268 #>   [55,] 0.37337760 0.4993037 0.5237359 0.5440849 0.5773712 0.6318411 0.7124895 #>   [56,] 0.66844144 0.6718185 0.7477894 0.7752692 0.7781405 0.7834649 0.8786306 #>   [57,] 0.20007502 0.2604581 0.3489787 0.3841412 0.5187701 0.5516379 0.5888544 #>   [58,] 0.81900912 0.8253050 0.9774040 0.9832797 1.0116622 1.0285265 1.0972230 #>   [59,] 0.46451059 0.5400869 0.5604123 0.5876751 0.6419681 0.6578705 0.6973227 #>   [60,] 0.54084558 0.5569414 0.6069867 0.6166761 0.7184812 0.7371370 0.7439456 #>   [61,] 0.57142187 1.0485374 1.3377872 1.4778540 1.5050031 1.5385358 1.5503570 #>   [62,] 0.38684927 0.4718914 0.4926281 0.5166378 0.5527695 0.5741034 0.6598487 #>   [63,] 0.37715538 0.4750999 0.6129597 0.6494701 0.6715243 0.6925889 0.7175151 #>   [64,] 1.07068680 1.1212602 1.1270584 1.1315925 1.1659217 1.2293357 1.2862957 #>   [65,] 0.29314666 0.3105460 0.3149457 0.4112601 0.4270587 0.4502319 0.4923810 #>   [66,] 0.72981904 0.8220972 0.8540049 0.9058932 0.9738354 1.0470487 1.0548390 #>   [67,] 0.41880311 0.7320756 0.7473548 0.7714125 0.7962174 0.8480161 0.9504819 #>   [68,] 0.95572643 0.9809436 1.0456063 1.0457727 1.0766656 1.1228671 1.1269083 #>   [69,] 0.48388040 0.5021642 0.5082121 0.5517506 0.6133787 0.6548102 0.7780221 #>   [70,] 0.60975768 0.6590402 0.7522149 0.7821732 0.8206138 0.8787826 0.8996429 #>   [71,] 0.59934650 0.8105872 0.8112886 0.8202397 0.9111564 0.9989390 1.0021487 #>   [72,] 0.44612717 0.5056200 0.5155284 0.5437904 0.6242941 0.6263205 0.6339338 #>   [73,] 0.41447280 0.5468834 0.5597664 0.7317968 0.8421457 0.8540049 0.8545776 #>   [74,] 0.32909403 0.4252186 0.4283509 0.4382560 0.4529424 0.4954609 0.5311627 #>   [75,] 0.38410253 0.4127746 0.4909708 0.5475822 0.5793252 0.6046245 0.6055459 #>   [76,] 0.29983157 0.4939803 0.5423750 0.6141672 0.6210010 0.6455615 0.6567121 #>   [77,] 0.36088734 0.3867988 0.5591224 0.5652773 0.5714871 0.6570808 0.6821704 #>   [78,] 1.07822283 1.3433867 1.4271338 1.4647974 1.4803869 1.4967875 1.5518626 #>   [79,] 0.39983211 0.4720038 0.5282013 0.6097577 0.6320230 0.7707903 0.7748116 #>   [80,] 0.34096293 0.3517397 0.3880264 0.4414143 0.4619395 0.5543523 0.5605273 #>   [81,] 0.37333318 0.7831849 0.8765593 0.8851496 0.9622016 0.9884960 0.9917629 #>   [82,] 0.18746085 0.3878519 0.4474533 0.5969208 0.6666750 0.6784398 0.6941300 #>   [83,] 0.62342577 0.6569672 0.7009100 0.7022335 0.8828443 0.8999611 0.9656957 #>   [84,] 0.31797018 0.5357635 0.5477915 0.5564808 0.5831587 0.6681020 0.6737728 #>   [85,] 0.48641497 0.5775035 0.5913949 0.5929426 0.6862134 0.7533895 0.7814104 #>   [86,] 0.54314067 0.5887154 0.7167080 0.8143663 0.8164982 0.8404996 0.8736101 #>   [87,] 0.44171938 0.5447741 0.5540991 0.5846650 0.6206927 0.6681020 0.6968998 #>   [88,] 0.21369232 0.4346140 0.4914069 0.5358639 0.6210010 0.7411241 0.7593464 #>   [89,] 0.72348988 0.7962706 0.8756221 0.9015587 0.9353123 0.9560214 0.9983261 #>   [90,] 0.29765206 0.5213158 0.5474249 0.5594343 0.6172718 0.6506966 0.6612070 #>   [91,] 0.30772259 0.3766537 0.4133342 0.4602642 0.4874996 0.4936052 0.5049543 #>   [92,] 0.55722103 0.5583189 0.6976104 0.7096263 0.7225951 0.7304182 0.7555828 #>   [93,] 0.48132146 0.5093461 0.5213158 0.5454773 0.5799233 0.5825263 0.5893067 #>   [94,] 0.25365754 0.3117967 0.3324490 0.4149170 0.4380561 0.5043863 0.5058467 #>   [95,] 0.46356279 0.6086583 0.6329897 0.7032703 0.7056897 0.7059321 0.7522149 #>   [96,] 0.45240271 0.9679793 1.0293301 1.0329208 1.1215798 1.2724989 1.2858344 #>   [97,] 0.46423943 0.5189654 0.7712689 0.7794460 0.8418950 0.8498453 0.8714417 #>   [98,] 0.56270048 0.5992763 0.6720937 0.7040460 0.7230334 0.7295289 0.7469149 #>   [99,] 0.36904821 0.6117359 0.6589157 0.7692120 0.8341757 0.8883617 0.8924700 #>  [100,] 0.33175303 0.4435611 0.4849263 0.6658844 0.6719288 0.6741663 0.6793879 #>  [101,] 0.27427257 0.3366732 0.3992004 0.4222183 0.4379752 0.4476941 0.4556445 #>  [102,] 0.19580280 0.5044167 0.5989418 0.6071781 0.6119285 0.6266729 0.6372784 #>  [103,] 0.43170140 0.5057997 0.5061147 0.5693230 0.5857026 0.5859562 0.5939755 #>  [104,] 1.32263605 1.4481103 1.4771925 1.5299180 1.5410215 1.5412047 1.5583993 #>  [105,] 0.39718360 0.4205327 0.4601454 0.4911663 0.4952194 0.5027612 0.5125963 #>  [106,] 0.45334637 0.5442953 0.6133787 0.6823485 0.6830367 0.7361752 0.8302580 #>  [107,] 0.26172432 0.4020952 0.4786565 0.4829069 0.4891576 0.5530897 0.5754626 #>  [108,] 0.53942185 0.5544224 0.5634765 0.6442400 0.6715658 0.7399629 0.7493418 #>  [109,] 0.71927566 0.8009632 0.9102882 0.9119423 0.9447306 0.9607247 1.0150547 #>  [110,] 0.28315452 0.3346488 0.6899303 0.6921504 0.7517425 0.7528170 0.8325625 #>  [111,] 0.33244897 0.3599808 0.3890124 0.4019862 0.4444215 0.4522741 0.4946091 #>  [112,] 0.44279886 0.7988115 0.9514972 0.9890049 1.0020824 1.1733777 1.2029835 #>  [113,] 0.21369232 0.5110256 0.5375897 0.6061687 0.6433930 0.6809345 0.7445213 #>  [114,] 0.40885042 0.4968671 0.6808738 0.7961570 0.8002493 0.8301018 0.8535305 #>  [115,] 0.31609850 0.4443583 0.4939803 0.5555802 0.6320230 0.6376223 0.6625919 #>  [116,] 0.20106165 0.2703147 0.2819084 0.3158657 0.4350896 0.5053310 0.5559441 #>  [117,] 0.54017560 0.6264814 0.6704397 0.6795120 0.7030836 0.7275892 0.7312845 #>  [118,] 0.50081661 0.6144610 0.6181847 0.6315900 0.7286528 0.7304182 0.7472157 #>  [119,] 1.10322473 1.2020179 1.4333519 1.4974410 1.5381453 1.7222832 1.7335942 #>  [120,] 0.99204288 1.0757101 1.1829831 1.1929697 1.2087139 1.2498854 1.3017788 #>  [121,] 0.31889393 0.4004371 0.4216533 0.4247100 0.4588688 0.5167268 0.5211497 #>  [122,] 0.96225914 1.0585051 1.0680267 1.1240587 1.2318916 1.3209852 1.3278333 #>  [123,] 0.79740564 1.0879605 1.1390967 1.1938649 1.2484414 1.2570596 1.3022203 #>  [124,] 0.20934311 0.2804462 0.4258755 0.4751395 0.4846300 0.5209023 0.6020462 #>  [125,] 0.50452287 0.6747480 0.6760141 0.7995320 0.9374038 1.0054546 1.0083524 #>  [126,] 0.68065348 0.7961923 0.8028757 0.9622609 0.9632246 0.9658617 0.9872435 #>  [127,] 0.57755823 0.5857026 0.6055849 0.6129432 0.6355996 0.6504413 0.6523314 #>  [128,] 0.42705865 0.4384220 0.4840091 0.5409792 0.5413797 0.5797763 0.5923236 #>  [129,] 0.50858358 0.5361181 0.5609486 0.6299886 0.6349631 0.6827840 0.6849042 #>  [130,] 0.59034663 0.6245888 0.6338577 0.6937263 0.7139307 0.8145866 0.8430281 #>  [131,] 0.29612614 0.5373021 0.5669288 0.6007421 0.6398185 0.7006711 0.7232025 #>  [132,] 0.20007502 0.3534926 0.3626244 0.5004716 0.5064871 0.5238548 0.5423290 #>  [133,] 0.57621899 0.6102636 0.6916062 0.7139384 0.7623725 0.7901013 0.7996258 #>  [134,] 0.59465104 0.6147713 0.6343899 0.6718185 0.8034461 0.8059398 0.8356453 #>  [135,] 0.28703477 0.3735126 0.3817846 0.4234922 0.4369733 0.4480917 0.4657576 #>  [136,] 0.53199693 0.6200006 0.6806535 0.9811346 1.0650322 1.1515314 1.1944832 #>  [137,] 0.62597808 0.7287555 0.9022343 0.9923767 1.0105388 1.0545660 1.0803445 #>  [138,] 0.29617228 0.3329625 0.4801979 0.4960290 0.5319259 0.5677574 0.5729964 #>  [139,] 0.56278762 0.5954642 0.6129597 0.6144407 0.6684750 0.6716285 0.7232971 #>  [140,] 0.42741318 1.0564455 1.0573029 1.1607246 1.1662326 1.1694567 1.1833639 #>  [141,] 0.27857413 0.5550911 0.5923236 0.5926501 0.6044645 0.6195026 0.6719288 #>  [142,] 0.74281994 0.8266638 0.8268783 0.8539076 0.9184729 0.9563153 0.9609684 #>  [143,] 0.77563200 0.9039226 0.9622016 0.9765489 1.0000420 1.0832955 1.1064254 #>  [144,] 0.49925939 0.5140250 0.5990525 0.5992763 0.6688554 0.7505240 0.7639140 #>  [145,] 0.51061248 0.5678200 0.5797763 0.6013720 0.6051508 0.6473825 0.7063458 #>  [146,] 0.61226423 0.6593153 0.7341950 0.7544457 0.7733016 0.7993059 0.8542374 #>  [147,] 0.90979959 0.9459737 0.9910474 1.0212678 1.0257129 1.0727279 1.1148535 #>  [148,] 0.26145741 0.3168213 0.4313392 0.4502319 0.4803468 0.5247686 0.5413797 #>  [149,] 0.49585188 0.5714871 0.7368765 0.7665104 0.7810015 0.7837297 0.8251296 #>  [150,] 0.25579274 0.4819460 0.5653870 0.5778491 0.6286658 0.7104944 0.7270490 #>  [151,] 0.15786141 0.1600627 0.4412568 0.5067220 0.5132728 0.5138351 0.5200202 #>  [152,] 0.43111736 0.4642394 0.6243076 0.6335233 0.6368033 0.6833733 0.7226294 #>  [153,] 0.31652481 0.7263023 0.7399288 0.7641059 0.8699077 0.8853091 0.9064671 #>  [154,] 0.39320438 0.4283099 0.4732493 0.5624836 0.5678294 0.5781658 0.5812802 #>  [155,] 0.26964687 0.6389190 0.7397684 0.7602041 0.7808823 0.8024522 0.8114522 #>  [156,] 0.59076606 0.6383327 0.7133761 0.7797259 0.9576530 0.9788343 0.9993599 #>  [157,] 0.48841882 0.4980058 0.6366082 0.6622719 0.7059321 0.7952038 0.8467807 #>  [158,] 0.35282476 0.3609215 0.3664024 0.3786495 0.4209539 0.4286723 0.4337903 #>  [159,] 0.38945854 0.4809801 0.4908901 0.5515895 0.5815259 0.5978109 0.6425980 #>  [160,] 0.47189137 0.4886183 0.5301617 0.5391911 0.5605273 0.5913973 0.5954642 #>  [161,] 0.63951522 0.6981730 0.6982639 0.7708351 0.8679348 0.9006993 0.9015587 #>  [162,] 0.18372461 0.5969013 0.6612070 0.6855277 0.6894189 0.7162495 0.7246447 #>  [163,] 0.54833910 0.6421531 0.7999031 0.9021442 0.9267991 0.9495484 0.9526307 #>  [164,] 0.80194062 0.8788152 0.8893769 0.9062564 0.9254244 0.9920726 1.0012915 #>  [165,] 0.29612614 0.3723564 0.4101236 0.5510293 0.5675657 0.5877549 0.5960280 #>  [166,] 0.37023671 0.5997286 0.6379400 0.6691162 0.6954494 0.7047087 0.7336381 #>  [167,] 0.30405060 0.3250473 0.4483887 0.4484374 0.5107357 0.5355933 0.5490981 #>  [168,] 0.29466951 0.2998316 0.5122934 0.5555802 0.5826002 0.6979966 0.6993741 #>  [169,] 0.25365754 0.2900317 0.3403962 0.4444215 0.4603972 0.4677869 0.4800769 #>  [170,] 0.69724757 0.7704725 0.7708351 0.7995357 0.8328141 0.8756221 1.1168240 #>  [171,] 0.82502236 0.9381688 0.9447306 0.9514972 1.0812213 1.0882949 1.2053888 #>  [172,] 0.20934311 0.3614464 0.3946586 0.4589471 0.4756942 0.6039934 0.6156830 #>  [173,] 0.23640060 0.3282719 0.4785826 0.5515895 0.6688807 0.7683008 0.7852947 #>  [174,] 0.76121652 0.7766485 0.8231301 0.9112659 0.9151182 0.9228819 0.9950317 #>  [175,] 0.19501765 0.2118300 0.3136395 0.4515865 0.4697882 0.4745208 0.4837275 #>  [176,] 0.32036064 0.3321248 0.3422599 0.3467198 0.3800791 0.4404356 0.4542567 #>  [177,] 0.30709261 0.3382569 0.4209831 0.4369935 0.4533841 0.4705861 0.4767832 #>  [178,] 0.34698261 0.3664360 0.4845629 0.5530461 0.6529608 0.6533612 0.6693927 #>  [179,] 0.28849248 0.4443583 0.4720038 0.4913428 0.6790748 0.6793003 0.6998759 #>  [180,] 0.63129600 0.9324112 0.9687646 1.0047602 1.0448212 1.0794229 1.1014236 #>  [181,] 0.37023671 0.5766179 0.6172718 0.6264115 0.6465644 0.6525075 0.6822434 #>  [182,] 0.67165165 0.7974056 0.8850837 0.9061634 0.9181052 0.9360013 0.9872906 #>  [183,] 0.17125143 0.2466462 0.3755624 0.5942567 0.5959112 0.6317768 0.6542462 #>  [184,] 0.44565186 0.5561592 0.7505240 0.7570914 0.9149154 0.9169684 0.9550853 #>  [185,] 0.64215315 0.9333197 1.0819056 1.1982709 1.2081557 1.2821119 1.2885479 #>  [186,] 0.21446472 0.3176033 0.3826668 0.4085023 0.4145980 0.4874103 0.5792537 #>  [187,] 0.23231854 0.3400864 0.3798944 0.4140197 0.4365151 0.4494678 0.4685279 #>  [188,] 0.68280951 0.7005687 0.7488515 0.7611547 0.7808823 0.7951380 0.8140111 #>  [189,] 0.75789119 0.8981489 0.9469261 0.9551505 0.9939786 1.0630545 1.2008796 #>  [190,] 0.83551429 0.9456435 1.0070826 1.1542264 1.1904609 1.3211612 1.3434941 #>  [191,] 0.59025537 0.5946627 0.6181295 0.6568808 0.7624128 0.8088757 0.9056109 #>  [192,] 0.42998499 0.6411641 0.6750526 0.6869848 0.6881974 0.7103497 0.7238952 #>  [193,] 0.30343533 0.3517426 0.3545098 0.4171184 0.4337903 0.4364411 0.5131310 #>  [194,] 0.51709641 0.5620648 0.5835258 0.6336015 0.6379176 0.6435360 0.6896729 #>  [195,] 0.31996532 0.3946586 0.4258755 0.5121703 0.5756127 0.6467365 0.6613616 #>  [196,] 0.18746085 0.2659214 0.4946386 0.5158994 0.6267668 0.6964684 0.7071022 #>  [197,] 0.30044775 0.3438626 0.4088504 0.5276910 0.5720539 0.6407614 0.6648263 #>  [198,] 0.46251245 0.5166378 0.5202275 0.5669344 0.6144407 0.6296180 0.6693887 #>  [199,] 0.51158817 0.7888410 0.8465192 0.8862421 0.9762424 0.9809682 1.0221270 #>  [200,] 0.33163195 0.4251985 0.5633400 0.6095998 0.6155090 0.6574899 0.6703174 #>  [201,] 0.27701128 0.4020498 0.4669889 0.5658458 0.5828885 0.5893963 0.6119285 #>  [202,] 0.15786141 0.2308148 0.4343279 0.4461668 0.4927239 0.5096834 0.5226789 #>  [203,] 0.69928939 0.8441214 0.9949192 1.0020824 1.0466586 1.0593460 1.0798237 #>  [204,] 1.11805136 1.1355190 1.3954830 1.4340583 1.4489787 1.4980738 1.5114022 #>  [205,] 0.51229343 0.6376223 0.6567121 0.6716722 0.6793003 0.6797378 0.7028606 #>  [206,] 0.70576071 0.7361752 0.8201544 0.8803190 0.9348590 0.9588082 0.9729493 #>  [207,] 0.40844239 0.4568635 0.5749741 0.5772049 0.6151073 0.6355014 0.6715658 #>  [208,] 0.43231058 0.4582625 0.5085836 0.6914780 0.8982850 0.9080092 0.9116127 #>  [209,] 0.72021559 0.9414597 0.9459737 1.0261123 1.0395278 1.0502383 1.1197895 #>  [210,] 0.58492004 0.6409068 0.9025381 0.9620143 0.9858384 0.9887151 1.0199728 #>  [211,] 0.50580219 0.5841307 0.6319990 0.6846025 0.7464394 0.7579148 0.7868579 #>  [212,] 0.37026138 0.4236354 0.5164116 0.5171180 0.5347010 0.5356753 0.5709463 #>  [213,] 0.38679876 0.5188490 0.5472424 0.6559576 0.6953554 0.7352325 0.7452602 #>  [214,] 0.32807567 0.3843468 0.4646532 0.4773995 0.4976651 0.5167676 0.5229722 #>  [215,] 0.32784006 0.6000433 0.7427088 0.7517130 0.7569245 0.7689566 0.7771141 #>  [216,] 0.90972294 0.9438881 1.0089438 1.0218479 1.1330661 1.1335419 1.1383744 #>  [217,] 0.87469553 0.9601548 0.9882775 1.0063452 1.0216083 1.0532600 1.1322443 #>  [218,] 0.48648190 0.5116744 0.5764456 0.5999474 0.6374155 0.6818107 0.7192757 #>  [219,] 0.18025791 0.5279524 0.5539620 0.6361564 0.6805567 0.7698382 0.7881595 #>  [220,] 1.89864140 1.9776516 2.0257809 2.0365824 2.0488839 2.0735624 2.0799561 #>  [221,] 1.10871279 1.1943793 1.3328820 1.3964370 1.4418361 1.4511361 1.4609273 #>  [222,] 0.21646831 0.3884428 0.4151384 0.4412127 0.4587652 0.4965968 0.5944738 #>  [223,] 0.54084558 0.5828613 0.7094213 0.7577486 0.7581049 0.8097999 0.8640813 #>  [224,] 0.38737311 0.4002157 0.4738372 0.4821009 0.4853187 0.5060195 0.5261758 #>  [225,] 0.40204981 0.4332539 0.4936210 0.5857761 0.5989418 0.6563041 0.6698388 #>  [226,] 0.35561023 0.7096709 0.7155765 0.7692215 0.7719512 0.8057999 0.8660758 #>  [227,] 0.51896538 0.5342310 0.6889327 0.8506482 0.9269908 1.1179707 1.1528933 #>  [228,] 0.30268243 0.3767963 0.6876529 0.7690350 0.7710189 0.8026626 0.8198178 #>  [229,] 0.81618412 0.8613079 0.9679793 0.9854826 1.0585051 1.1115795 1.1117121 #>  [230,] 0.39136166 0.4233733 0.4971087 0.5578971 0.5758965 0.5763352 0.6412921 #>  [231,] 0.33627618 0.3482896 0.3899679 0.4479291 0.4572807 0.4574974 0.4603795 #>  [232,] 0.54135255 0.5609527 0.5946510 0.6341838 0.6377932 0.6622898 0.7304819 #>  [233,] 0.15791809 0.4887008 0.5572987 0.6034906 0.7075047 0.8268783 0.8281971 #>  [234,] 0.41277460 0.4242676 0.5387850 0.5922880 0.6421818 0.6504677 0.6829751 #>  [235,] 0.32784006 0.5997286 0.6240865 0.6431190 0.6555783 0.7005104 0.7140234 #>  [236,] 0.23586068 0.3752074 0.4217011 0.6167637 0.6368033 0.7187508 0.7198872 #>  [237,] 0.35131310 0.4657681 0.4825303 0.5366810 0.5372586 0.5648053 0.5793640 #>  [238,] 0.23944783 0.4674166 0.4695651 0.5317042 0.5384461 0.5696341 0.6116352 #>  [239,] 0.35206080 0.4006551 0.4511482 0.4697446 0.4821009 0.4827338 0.4855326 #>  [240,] 0.41594026 0.4251199 0.5560881 0.5913949 0.6027839 0.7079785 0.8286506 #>  [241,] 0.35804233 0.4993451 0.5661288 0.5672771 0.6199715 0.6619129 0.6683897 #>  [242,] 0.45334637 0.5638455 0.6098942 0.6548102 0.6843793 0.7045545 0.7121131 #>  [243,] 0.34698261 0.4338537 0.6013720 0.6473391 0.6649667 0.7203485 0.7354765 #>  [244,] 0.49481569 0.5211910 0.5675414 0.6097316 0.6286658 0.6345533 0.7170654 #>  [245,] 0.62342577 0.7693469 0.7784615 0.8384550 0.9519162 1.0389821 1.0932172 #>  [246,] 0.31502270 0.5117592 0.5367600 0.6200564 0.6447043 0.6719638 0.6958531 #>  [247,] 0.36212940 0.7396011 0.9665698 1.0072073 1.0420674 1.0455118 1.1411072 #>  [248,] 0.55715281 0.5750183 0.5846790 0.5871377 0.6337297 0.6435229 0.6662762 #>  [249,] 0.50580219 0.5973421 0.6127422 0.6631449 0.6953486 0.7692137 0.7846353 #>  [250,] 0.46041510 0.5035574 0.5262043 0.5467374 0.6363059 0.6640345 0.7169425 #>  [251,] 0.44570198 0.4461766 0.6374155 0.6620982 0.8040405 0.8502982 0.9075844 #>  [252,] 0.28766630 0.2931467 0.3529504 0.4290981 0.4313392 0.4404792 0.4772419 #>  [253,] 0.28719023 0.3188939 0.4826388 0.5019180 0.5319259 0.5388757 0.5645462 #>  [254,] 0.46143606 0.5854698 0.5931126 0.6158164 0.6669802 0.8051866 0.8227446 #>  [255,] 0.39304146 0.4041213 0.5264752 0.5739744 0.6442400 0.6466267 0.7231434 #>  [256,] 0.28171408 0.3478820 0.3882410 0.3976292 0.4983501 0.5159087 0.5620648 #>  [257,] 0.57497140 0.7234899 0.8952282 0.9564661 0.9715651 1.0354867 1.0854615 #>  [258,] 0.37520744 0.4928483 0.5550493 0.5574048 0.6335233 0.6510061 0.7315662 #>  [259,] 0.75709150 0.8765593 0.9079755 1.1256021 1.1497101 1.2022969 1.2498493 #>  [260,] 0.76903499 0.7840814 0.8985082 0.9057654 0.9126572 0.9392592 1.0851189 #>  [261,] 0.52602820 0.5762190 0.6259781 0.8892505 0.9025165 0.9310628 0.9451131 #>  [262,] 0.27965750 0.4720730 0.5806541 0.6298733 0.6617738 0.7161224 0.7220344 #>  [263,] 1.38608521 1.7111522 2.0539570 2.1003892 2.1027003 2.1362764 2.1809280 #>  [264,] 0.44336327 0.5876362 0.6240865 0.6364736 0.7165282 0.7569245 0.7607317 #>  [265,] 0.24927188 0.4264171 0.5161267 0.5622255 0.5833599 0.5932534 0.6242941 #>  [266,] 0.41708002 0.4645106 0.5958244 0.6048091 0.6403740 0.6833002 0.6876136 #>  [267,] 0.21452843 0.5166144 0.5598868 0.6444927 0.6491730 0.6553005 0.6912233 #>  [268,] 0.38021836 0.5367600 0.6778971 0.7395656 0.7757531 0.8460066 0.8613079 #>  [269,] 0.64641176 0.6939371 0.8605242 0.9029993 0.9799661 1.0070826 1.1117321 #>  [270,] 0.41897279 0.5147274 0.7207743 0.8067947 0.8684386 0.8824472 0.9116360 #>  [271,] 0.73207558 0.9488170 0.9913282 1.0017470 1.0289673 1.0497777 1.1138371 #>  [272,] 0.54008688 0.6048091 0.6443132 0.6503482 0.6955195 0.7145009 0.7756320 #>  [273,] 0.26404906 0.3580811 0.4602253 0.4725727 0.4915664 0.5364276 0.5408806 #>  [274,] 0.43913598 0.5609486 0.6717263 0.7163805 0.7399629 0.7766424 0.7775460 #>  [275,] 0.18882306 0.1954508 0.4825389 0.5258520 0.5597195 0.6079261 0.6497896 #>  [276,] 0.44565186 0.7946946 0.8615012 0.9975928 1.0432403 1.0960777 1.1238059 #>  [277,] 0.39535036 0.4953443 0.5366810 0.6776865 0.6911559 0.7004944 0.7239662 #>  [278,] 0.61251421 0.6345533 0.8291448 0.8683366 0.9045826 0.9794370 0.9829284 #>  [279,] 0.29869366 0.3077226 0.3625049 0.4070295 0.4350255 0.4364411 0.4372660 #>  [280,] 0.67026908 0.7999031 0.8578046 0.9087173 1.0819056 1.0872498 1.1101641 #>  [281,] 0.50081661 0.5673695 0.6886318 0.7822477 0.7928438 0.8111723 0.8384550 #>  [282,] 0.18539147 0.3515161 0.3737521 0.5050006 0.6109361 0.6123974 0.6218435 #>  [283,] 0.52602820 0.6391781 0.7287555 1.0228776 1.0448759 1.1141558 1.1210104 #>  [284,] 0.54750203 0.5944765 0.6107904 0.7065950 0.7337338 0.8325625 0.8928218 #>  [285,] 0.53742273 0.6219949 0.6489412 0.6516303 0.6983731 0.7030094 0.7210167 #>  [286,] 0.48002255 0.6373784 0.6569930 0.6822616 0.6870207 0.7706855 0.7768874 #>  [287,] 0.26638109 0.3355510 0.4103845 0.4653207 0.4789602 0.4935367 0.5083010 #>  [288,] 0.47277668 0.8693299 0.9365102 0.9629859 1.0239988 1.1226553 1.1546141 #>  [289,] 0.55534877 0.7888410 0.8594241 0.9509303 1.0333989 1.0886542 1.1146840 #>  [290,] 0.48510856 0.6660255 0.6894640 0.7410226 0.8463738 0.9033828 0.9240664 #>  [291,] 1.06279079 1.0856235 1.5205358 1.5515597 1.6956291 1.8091456 1.8163315 #>  [292,] 0.68621338 0.7145009 0.8084563 0.8693299 0.9307614 0.9400910 0.9556065 #>  [293,] 0.35450976 0.3625049 0.3880264 0.4537683 0.4847136 0.4869922 0.4936052 #>  [294,] 0.21005718 0.5016096 0.6411669 0.6703174 0.6917636 0.7192013 0.7782740 #>  [295,] 0.72251939 0.8129116 0.8997708 1.0434107 1.0630545 1.0837385 1.1400974 #>  [296,] 0.19545084 0.2823160 0.5255639 0.5378304 0.5749143 0.6149672 0.7075881 #>  [297,] 1.03636924 1.0915253 1.1044140 1.1368331 1.2896916 1.3083460 1.3366699 #>  [298,] 0.66938874 0.6930813 0.7081583 0.7464394 0.7484774 0.7840506 0.8493663 #>  [299,] 0.36530119 0.4743630 0.5541462 0.5699545 0.6165702 0.6455925 0.6857937 #>  [300,] 0.27756390 0.4072187 0.4353936 0.4399239 0.4790495 0.5121969 0.5263575 #>  [301,] 0.54750203 0.6184152 0.6922813 0.8616578 0.9036008 0.9099965 0.9544733 #>  [302,] 0.28646015 0.2910234 0.4479895 0.4587652 0.4790687 0.5383934 0.5706791 #>  [303,] 0.52447510 0.5275666 0.5476727 0.5767828 0.5963015 0.6073071 0.6322912 #>  [304,] 0.13801569 0.4408853 0.5465450 0.5871377 0.5943047 0.5993092 0.6032922 #>  [305,] 0.27965750 0.5121511 0.5479097 0.6046421 0.6413098 0.6499862 0.7169425 #>  [306,] 0.49735137 0.7000338 0.7188745 0.7232039 0.8379326 0.8676250 0.9080171 #>  [307,] 0.52501601 0.5394911 0.5465450 0.5614839 0.5763352 0.5831492 0.6026756 #>  [308,] 0.44160234 0.4800226 0.6480487 0.6624393 0.6962610 0.7193235 0.7301757 #>  [309,] 0.59980775 0.6034906 0.6062089 0.6166147 0.6704397 0.6719920 0.7084858 #>  [310,] 0.30258391 0.3595036 0.3800791 0.4332041 0.4626213 0.4678942 0.4874825 #>  [311,] 0.35561023 0.6112421 0.6331761 0.6616066 0.6916062 0.7517693 0.7669861 #>  [312,] 0.27905291 0.4476941 0.4999109 0.5131094 0.5448767 0.5609465 0.6014282 #>  [313,] 0.45928327 0.5068374 0.5170674 0.6281843 0.6621169 0.6704425 0.6930933 #>  [314,] 0.38682307 0.4724614 0.5106125 0.5858953 0.6462473 0.6885770 0.7104018 #>  [315,] 0.31111857 0.4324867 0.4379089 0.4670270 0.4809801 0.5132356 0.5489454 #>  [316,] 1.08562354 1.1565112 1.3810752 1.4308867 1.4458594 1.4541305 1.6162576 #>  [317,] 0.30141669 0.4251199 0.4711562 0.6510011 0.6784842 0.7109434 0.7160890 #>  [318,] 0.21158465 0.3941555 0.4857640 0.4861716 0.5044680 0.5606688 0.5843741 #>  [319,] 0.47115625 0.5452408 0.5895001 0.5929426 0.6027839 0.6331132 0.6494720 #>  [320,] 0.21158465 0.4407436 0.5638046 0.6364726 0.6596192 0.6657640 0.6837226 #>  [321,] 0.30141669 0.5560881 0.5847942 0.6331132 0.7473548 0.8021673 0.8172131 #>  [322,] 0.35902995 0.4153867 0.6028909 0.6166816 0.6213807 0.6838160 0.7341418 #>  [323,] 0.44783026 0.5049946 0.5538882 0.5556991 0.5924756 0.6143517 0.6744937 #>  [324,] 0.80607081 0.9029993 0.9724700 1.0418190 1.0886194 1.1814134 1.2310592 #>  [325,] 0.52005115 0.5572987 0.6250865 0.7133761 0.8402713 0.8692046 0.9151182 #>  [326,] 0.23866249 0.3342659 0.4461272 0.4505375 0.5448479 0.5539620 0.5979853 #>  [327,] 0.64673651 0.7101788 0.7474190 0.7551316 0.7983317 0.8826774 0.8852839 #>  [328,] 0.50327577 0.7919133 1.2037721 1.2114657 1.2147962 1.2156171 1.2566627 #>  [329,] 0.18497745 0.3825173 0.3992004 0.4006551 0.5185381 0.5828276 0.5915643 #>  [330,] 0.27190050 0.5779827 0.5907661 0.5914931 0.6904692 0.7292669 0.7524220 #>  [331,] 0.39771991 0.6409068 0.7680214 0.7712762 0.7817578 0.8246796 0.8410192 #>  [332,] 0.69928939 0.7901838 0.8047381 0.8472581 0.8990388 0.9348590 0.9534830 #>  [333,] 0.60446446 0.6488333 0.6657640 0.6811776 0.6811913 0.7131240 0.8382074 #>  [334,] 0.26145741 0.3191526 0.3702594 0.3980681 0.4112601 0.4267963 0.4404792 #>  [335,] 0.43461405 0.4742572 0.5556817 0.5920210 0.6061687 0.6129923 0.6180957 #>  [336,] 0.34828960 0.4074110 0.4675177 0.4870014 0.5097238 0.5635507 0.6411669 #>  [337,] 0.64072189 0.8352673 0.9118654 1.0828424 1.0979718 1.1133150 1.1152545 #>  [338,] 0.48648190 0.7610187 0.7700922 0.7733118 0.8808064 0.8926327 0.8944142 #>  [339,] 0.41013115 1.1041085 1.2037721 1.2103630 1.2989906 1.3577470 1.3688980 #>  [340,] 0.59466270 0.6435229 0.6610955 0.7155661 0.7350064 0.7756490 0.7918672 #>  [341,] 0.58413067 0.6203677 0.6847945 0.6953486 0.7771702 0.8067947 0.8153611 #>  [342,] 0.37229679 0.4999109 0.5921847 0.6064102 0.6548739 0.6927874 0.7169808 #>  [343,] 0.48132146 0.5474249 0.5583189 0.5631018 0.5673695 0.6315900 0.6848694 #>  [344,] 0.21594290 0.3213413 0.3797174 0.3911392 0.4505269 0.4596298 0.5033280 #>  [345,] 0.23268810 0.3549778 0.3575059 0.4234922 0.4542866 0.4909708 0.4941175 #>  [346,] 0.61149730 0.8126448 0.8352673 0.8841087 0.9005057 1.0012884 1.0336452 #>  [347,] 0.41121271 0.6181295 0.7305234 0.8466579 0.8491699 0.8661943 0.8887690 #>  [348,] 0.61149730 0.6407219 0.9262310 1.0548125 1.1644773 1.2298528 1.2865874 #>  [349,] 0.07871462 0.2409420 0.3397729 0.3607953 0.3786495 0.4171434 0.4304947 #>  [350,] 0.33044294 0.3319297 0.3329625 0.5475456 0.5717831 0.6094877 0.6146010 #>  [351,] 0.44920065 0.6694315 0.7348453 0.7607317 0.7623202 0.7711413 0.8008434 #>  [352,] 0.32417785 0.4055163 0.5876362 0.6903873 0.8033041 0.8604202 0.8949106 #>  [353,] 0.41013115 1.2282120 1.4418361 1.4735616 1.4968686 1.5093316 1.6745121 #>  [354,] 0.53960873 0.6078362 0.6093371 0.6199342 0.6555533 0.7169767 0.7183361 #>  [355,] 0.23640060 0.4613528 0.4621485 0.6799573 0.7408407 0.7637592 0.9035100 #>  [356,] 0.27169144 0.3397729 0.3453692 0.3853908 0.5356318 0.5439466 0.5515676 #>  [357,] 0.98327452 1.0293041 1.0564767 1.1642945 1.1752569 1.2156003 1.2176158 #>  [358,] 0.36146605 0.4041213 0.4084785 0.5332572 0.5439466 0.5798534 0.6415395 #>  [359,] 0.65046767 0.6594163 0.7439734 0.7463988 0.7680575 0.8131245 0.8339899 #>  [360,] 0.25236259 0.2939541 0.3520608 0.3920649 0.4305649 0.5083450 0.5157767 #>  [361,] 0.44975444 0.4669889 0.5711063 0.5857761 0.6091510 0.6560228 0.6902594 #>  [362,] 0.06589832 0.2432616 0.3756018 0.5154940 0.5283881 0.5312919 0.5372586 #>  [363,] 0.25623036 0.5066234 0.5831629 0.6659831 0.7124176 0.7752692 0.7824506 #>  [364,] 0.29402039 0.4857640 0.6016862 0.6426372 0.6487642 0.6509342 0.6932758 #>  [365,] 0.27031469 0.2986937 0.3163714 0.3222288 0.4065021 0.4133342 0.4533841 #>  [366,] 0.26885961 0.2817141 0.4016083 0.4652973 0.4755492 0.5031108 0.5061482 #>  [367,] 0.49715976 0.6640985 0.8328141 0.8452892 0.8664331 0.8679348 1.1407356 #>  [368,] 1.50333358 1.8732166 1.9319089 2.0332362 2.0347722 2.0493842 2.0816554 #>  [369,] 0.33175303 0.5306553 0.5682098 0.5947060 0.5990299 0.6089736 0.6426115 #>  [370,] 0.23158376 0.2939541 0.3372410 0.3722170 0.3748672 0.4827338 0.6046421 #>  [371,] 0.33099677 0.4190740 0.5185454 0.5688865 0.6137553 0.6232891 0.6286529 #>  [372,] 0.15605641 0.3463961 0.3702092 0.4709764 0.4732648 0.4977855 0.5676497 #>  [373,] 0.57142187 1.1761996 1.1959975 1.4027068 1.4265360 1.4472431 1.4993807 #>  [374,] 0.19502398 0.3756018 0.3866666 0.4861163 0.5745833 0.6169549 0.6332510 #>  [375,] 0.50441665 0.5546339 0.6086287 0.6101705 0.6480823 0.6785025 0.6872736 #>  [376,] 0.39837640 0.4732648 0.4940721 0.5178319 0.5505804 0.5863615 0.5892755 #>  [377,] 0.41667911 0.5670109 0.6082897 0.6151073 0.6621425 0.6639277 0.6681151 #>  [378,] 0.44745334 0.5158994 0.6571982 0.6850826 0.7014788 0.7311507 0.7428199 #>  [379,] 0.28766630 0.2885248 0.3105460 0.3191526 0.3601789 0.4522880 0.4711995 #>  [380,] 1.79643430 1.9826209 1.9857235 2.0134312 2.0895966 2.0957788 2.1182497 #>  [381,] 0.50683739 0.5431780 0.5923360 0.6563041 0.7207784 0.7631499 0.8511768 #>  [382,] 0.29755885 0.3880770 0.4101236 0.4915664 0.5117592 0.5669288 0.5916285 #>  [383,] 0.77101886 0.8053099 0.8490920 0.9020972 0.9392592 1.0234180 1.0452837 #>  [384,] 0.33637142 0.4473596 0.4851383 0.5096834 0.5200202 0.5813966 0.6034565 #>  [385,] 0.41017442 0.4216533 0.4243472 0.4478303 0.4654837 0.6379073 0.6471286 #>  [386,] 0.41322171 0.4603795 0.4675177 0.4685490 0.4834904 0.4993150 0.5010619 #>  [387,] 0.26964687 0.5850073 0.7203669 0.7488515 0.7934794 0.8426829 0.9125331 #>  [388,] 0.73960109 0.7776562 0.9329553 0.9913346 1.0291322 1.1348915 1.1761996 #>  [389,] 0.59995101 0.7358837 0.7570915 0.7831849 0.7833302 0.7903800 0.9320196 #>  [390,] 0.39540906 0.4695651 0.5094971 0.6484648 0.6744937 0.7235979 0.7439780 #>  [391,] 0.48743834 0.6513863 0.6569672 0.6936203 0.6958115 0.8472581 0.8539673 #>  [392,] 0.18882306 0.2823160 0.4130818 0.5415845 0.5429184 0.5490981 0.5890081 #>  [393,] 0.42434725 0.5966024 0.6143517 0.6444664 0.6606037 0.7384968 0.7967170 #>  [394,] 0.57737122 0.5995924 0.6102636 0.6760141 0.6900168 0.7746372 0.7874517 #>  [395,] 0.15576965 0.6122561 0.6146010 0.6363059 0.6525028 0.6590551 0.6638823 #>  [396,] 0.50937271 0.5921981 0.7374797 0.8395665 0.8851877 0.8923804 1.0931002 #>  [397,] 0.54833910 0.7220840 0.7474190 0.7582121 0.7792775 0.8131622 0.8308615 #>  [398,] 0.53530233 0.5503629 0.6392700 0.6470447 0.6562674 0.6623421 0.6753604 #>  [399,] 0.29158114 0.5021642 0.5314695 0.6355014 0.6668396 0.7014138 0.7575437 #>  [400,] 0.59563386 0.7309736 0.7396511 0.7517425 0.8430281 0.8961662 0.9075781 #>  [401,] 0.75159506 0.7732433 0.8370099 0.9124909 0.9273754 0.9834434 1.0196079 #>  [402,] 0.60943511 0.6095998 0.6117110 0.6867809 0.7004944 0.7109994 0.7299513 #>  [403,] 0.44336327 0.6086583 0.6622719 0.6845819 0.7140234 0.7331036 0.7644179 #>  [404,] 0.41897279 0.4444485 0.6631449 0.7397859 0.7771702 0.7969344 0.8428810 #>  [405,] 0.39796639 0.5022789 0.5817079 0.5940881 0.6103446 0.7616267 0.7833200 #>  [406,] 0.54314067 0.6717263 0.6947399 0.7189115 0.8128734 0.8332654 0.8754659 #>  [407,] 0.27756390 0.4861716 0.5096796 0.5260216 0.5638046 0.5828613 0.5969612 #>  [408,] 0.33614854 0.5747427 0.6097316 0.6543349 0.6666605 0.6914089 0.7040613 #>  [409,] 0.34166176 0.3607953 0.3854440 0.4175176 0.4283136 0.4511482 0.5043626 #>  [410,] 0.31983205 0.3673595 0.3689368 0.4136975 0.4584159 0.5137010 0.5438635 #>  [411,] 0.45006136 0.5549224 0.5638455 0.6661736 0.6695915 0.6880292 0.6953848 #>  [412,] 0.54767269 0.5678718 0.5940756 0.5951965 0.6269903 0.6407614 0.7144339 #>  [413,] 0.44160234 0.6569930 0.7695295 0.8932664 0.8974153 0.9019126 0.9057654 #>  [414,] 0.23866249 0.3290940 0.4005951 0.4463507 0.5054831 0.5155284 0.5827366 #>  [415,] 0.52819960 0.5846335 0.7058544 0.7287136 0.8253881 0.8404222 0.8905740 #>  [416,] 0.29496342 0.4136836 0.4319796 0.5057761 0.5196773 0.5793521 0.5856152 #>  [417,] 0.57497140 0.6727394 0.7808072 0.7962706 0.9379522 0.9496527 1.1124248 #>  [418,] 0.46513236 0.7962174 0.8640333 0.9494237 0.9632529 0.9717011 0.9913282 #>  [419,] 0.45886878 0.5019180 0.5538882 0.5581420 0.5989265 0.6360920 0.6401818 #>  [420,] 0.36146605 0.4902074 0.5739744 0.6111892 0.6304250 0.6505065 0.7313901 #>  [421,] 0.10890095 0.3176033 0.3364242 0.3533957 0.3927546 0.4006550 0.5634765 #>  [422,] 0.63917814 0.6999829 0.7189115 0.7281464 0.7692215 0.7779346 0.8344477 #>  [423,] 0.63087365 1.0536362 1.2475148 1.3091746 1.3838995 1.4121825 1.4719506 #>  [424,] 0.49843371 0.5099009 0.5610167 0.5962526 0.6093518 0.6180957 0.6405782 #>  [425,] 0.48490878 0.7171039 0.9579005 0.9687047 0.9986191 1.0039120 1.0215023 #>  [426,] 0.94933290 1.0690177 1.0886194 1.2053888 1.3835300 1.4453601 1.4493544 #>  [427,] 1.03334672 1.2531113 1.3105498 1.3331191 1.3479829 1.3673094 1.4549365 #>  [428,] 0.18607748 0.3362762 0.4656738 0.4732493 0.5097238 0.5141189 0.5437261 #>  [429,] 0.50327577 0.7331599 0.7382613 0.9615741 0.9634400 1.0396734 1.0640401 #>  [430,] 0.25185127 0.2998649 0.3321115 0.3583976 0.3943943 0.4858604 0.4887096 #>  [431,] 0.77355656 0.8034857 0.8245390 0.8507600 0.8881839 0.9005623 0.9479676 #>  [432,] 0.33464875 0.3642757 0.6107904 0.6353996 0.7309736 0.7776884 0.9036008 #>  [433,] 0.66710228 0.7709680 0.8094163 0.8135167 0.8143663 0.8428810 0.8699615 #>  [434,] 0.36528875 0.3797174 0.4193769 0.4322114 0.4602253 0.4685490 0.5094537 #>  [435,] 0.50362038 0.5370323 0.6914248 0.7050692 0.7524220 0.8054771 0.8281971 #>  [436,] 0.28496674 0.3979664 0.4693256 0.5987556 0.6148480 0.6268877 0.6424653 #>  [437,] 1.36902000 1.3694027 1.5823131 1.6163052 1.6562960 1.6697437 1.7039621 #>  [438,] 0.69965581 0.7636449 0.8379099 0.9609684 0.9996083 1.0794229 1.0905018 #>  [439,] 0.21452843 0.4241826 0.4874103 0.6362286 0.6746974 0.7015264 0.7394663 #>  [440,] 0.47257465 0.5580967 0.5610167 0.5695555 0.5911725 0.6371474 0.7042805 #>  [441,] 0.37333318 0.5637631 0.5999510 0.7837438 0.8021907 0.8192942 0.8770605 #>  [442,] 0.43988569 0.6958115 0.7825755 0.9465006 0.9656957 0.9781838 1.0006491 #>  [443,] 0.25623036 0.4728336 0.5077488 0.5321453 0.6070111 0.8739836 0.9059923 #>  [444,] 0.37052175 0.4515957 0.4646370 0.4652973 0.4745904 0.5125963 0.5166668 #>  [445,] 0.36144643 0.4299850 0.4751395 0.5756127 0.6543349 0.6571930 0.6772398 #>  [446,] 0.63652494 1.0589538 1.2597504 1.3595592 1.3826657 1.4332071 1.4512998 #>  [447,] 0.41799612 0.5365025 0.7874030 0.8609617 0.9166889 0.9193992 0.9228819 #>  [448,] 0.68879896 0.8569005 0.9118654 0.9174689 1.0122602 1.0301427 1.0548125 #>  [449,] 0.79638993 0.9550853 0.9781838 1.0505442 1.0960777 1.1134426 1.1733343 #>  [450,] 0.38420445 0.6953554 0.7202156 0.7851180 0.8018881 0.8105794 0.8112578 #>  [451,] 0.62693836 0.8136296 0.8241341 0.8841087 0.9016634 0.9273298 0.9526307 #>  [452,] 0.48611632 0.5486165 0.5790121 0.6507855 0.6626477 0.6863714 0.6932322 #>  [453,] 0.54429534 0.5896785 0.7987168 0.7988115 0.8480078 0.8792036 0.8803190 #>  [454,] 0.29402039 0.3529504 0.4391373 0.4711995 0.5044680 0.5260216 0.5682098 #>  [455,] 0.45013515 0.5414461 0.6395152 0.7169927 0.7563804 0.7676514 0.7875428 #>  [456,] 0.25474129 0.3310869 0.3916905 0.4006550 0.4085023 0.4173184 0.4305954 #>  [457,] 0.46862710 0.5564164 0.5998078 0.7024510 0.7360367 0.7596683 0.8019116 #>  [458,] 0.28496674 0.4719616 0.5291024 0.5514912 0.6103446 0.6373338 0.6608218 #>  [459,] 0.43320410 0.4431478 0.4558188 0.5058240 0.5083010 0.5102206 0.5406957 #>  [460,] 0.52077083 0.5261758 0.5271446 0.5435981 0.5537570 0.6263679 0.6274053 #>  [461,] 0.32134132 0.3547632 0.4069555 0.4993150 0.5382203 0.5414461 0.5480896 #>  [462,] 0.20621884 0.5346657 0.5883716 0.6114167 0.7177347 0.7510074 0.8341485 #>  [463,] 0.35784270 0.4073304 0.5187701 0.5434296 0.5629332 0.5734895 0.5746167 #>  [464,] 0.57025623 0.8293544 0.9809682 1.1349960 1.1526514 1.1742306 1.2443761 #>  [465,] 0.31502270 0.3802184 0.6160945 0.6481453 0.6546591 0.6563208 0.7103615 #>  [466,] 0.56667205 0.6824800 0.6867144 0.6927874 0.7812272 0.9295271 0.9541325 #>  [467,] 0.58116939 0.6587763 0.6894640 0.7021490 0.7775958 0.8086275 0.8212221 #>  [468,] 0.37026138 0.4136975 0.4137849 0.4537779 0.4834602 0.4835706 0.4850264 #>  [469,] 0.19836229 0.5324268 0.6212549 0.6956020 0.7951495 0.8134143 0.8559988 #>  [470,] 0.40959234 0.4971598 0.6972476 0.8697056 0.9074994 1.0285265 1.0481919 #>  [471,] 0.30343533 0.4286723 0.4558188 0.4630491 0.4714210 0.4722222 0.4817748 #>  [472,] 0.63087365 0.8605907 0.9341246 1.0629244 1.0938227 1.1847267 1.2397938 #>  [473,] 0.40688992 0.6112421 0.6353996 0.6778309 0.6921504 0.6922813 0.7096709 #>  [474,] 0.37524686 0.4004371 0.4101744 0.4398595 0.4742572 0.5542641 0.5886905 #>  [475,] 0.39459871 0.5831492 0.6141788 0.6183460 0.6845819 0.6993741 0.7548582 #>  [476,] 0.39911091 0.4721490 0.4745208 0.4930362 0.5008011 0.5025541 0.5172081 #>  [477,] 0.57135279 0.5729688 0.6204981 0.6497949 0.7075731 0.8458314 0.8690468 #>  [478,] 0.50963246 0.5556804 0.5986114 0.6821420 0.7292669 0.7294777 0.7447653 #>  [479,] 0.50963246 0.5888796 0.5914931 0.6030113 0.6462566 0.6619499 0.7833290 #>  [480,] 0.80611699 0.8379099 0.9324112 0.9850379 1.3343275 1.4457991 1.4701369 #>  [481,] 0.22344048 0.2549513 0.3748672 0.3824871 0.4233733 0.4908540 0.5376948 #>  [482,] 0.34386260 0.4739795 0.4900412 0.5265313 0.5625678 0.5848887 0.5876781 #>  [483,] 0.36109222 0.3994637 0.4002157 0.4305649 0.4452373 0.4766990 0.5209583 #>  [484,] 0.49585188 0.5244751 0.5974194 0.7894578 0.7919004 0.7945294 0.8016711 #>  [485,] 0.34418239 0.3578427 0.3676732 0.3841412 0.3947234 0.4262079 0.4767823 #>  [486,] 0.30405060 0.3355510 0.3811301 0.4520838 0.4913116 0.4984722 0.5132653 #>  [487,] 0.15576965 0.5118247 0.5262043 0.5276184 0.6654594 0.6677050 0.7542312 #>  [488,] 0.35904744 0.3632266 0.3654906 0.3853908 0.4304947 0.4734157 0.4845310 #>  [489,] 0.25638024 0.2860569 0.5105750 0.5141189 0.5360455 0.5402271 0.5420105 #>  [490,] 0.52911605 0.5338661 0.5692567 0.6795041 0.7463176 0.7469121 0.8142233 #>  [491,] 0.68036455 0.7299820 0.7714125 0.8132182 0.9174689 0.9397643 0.9576150 #>  [492,] 0.57617754 0.6656368 0.7214812 0.7331599 0.7647870 0.8024578 0.8416625 #>  [493,] 0.45923251 0.5564164 0.5991140 0.7147813 0.7189746 0.8328865 0.8421019 #>  [494,] 0.41538669 0.4667912 0.7578912 0.7671323 0.8352244 0.8737937 0.8853399 #>  [495,] 0.81324473 0.9456256 1.0302783 1.0493400 1.2419199 1.3178402 1.3323455 #>  [496,] 0.77047249 0.8452892 1.0669006 1.0727086 1.1395687 1.2138641 1.4700034 #>  [497,] 0.53199693 0.7579007 0.9658617 1.0365774 1.0482723 1.2467336 1.2850911 #>  [498,] 0.33104620 0.3591189 0.3976292 0.4232544 0.4719616 0.4953588 0.5031108 #>  [499,] 0.41269992 0.4993037 0.5211139 0.5880065 0.5911725 0.7794680 0.7874517 #>  [500,] 0.37902617 0.5831242 0.6423990 0.7155765 0.7281464 0.8717328 0.9799661 #>  [501,] 0.67026908 0.8097817 0.8136296 0.9351754 0.9479676 1.0146208 1.0678236 #>  [502,] 0.24447980 0.2988129 0.3026780 0.3981978 0.5026104 0.5107357 0.5296197 #>  [503,] 0.33058968 0.4149170 0.4275372 0.4346167 0.4644060 0.4677869 0.5615738 #>  [504,] 0.47283364 0.6319116 0.6377770 0.7026906 0.7124176 0.7286659 0.8168486 #>  [505,] 0.73747965 0.9894491 1.1199671 1.1253516 1.1818718 1.2438037 1.3937837 #>  [506,] 0.39320438 0.5192793 0.5227066 0.5244595 0.5584928 0.5627207 0.5813301 #>  [507,] 1.87259877 1.9897343 2.0273100 2.0820595 2.1960280 2.2316516 2.2475116 #>  [508,] 0.30614263 0.4026878 0.4203269 0.4414143 0.4630443 0.4657576 0.4902254 #>  [509,] 0.48499451 0.5883716 0.7011344 0.7646516 0.8511768 0.9212390 0.9261809 #>  [510,] 0.26638109 0.3337820 0.3492134 0.4520838 0.4560289 0.4979916 0.5026104 #>  [511,] 0.54099064 0.5425419 0.6460867 0.6660255 0.7284374 0.7308313 0.7310983 #>  [512,] 0.61941567 0.6455980 0.6905181 0.6909383 0.6955195 0.6995873 0.7259679 #>  [513,] 0.54551100 0.5817079 0.5988325 0.6148480 0.6335324 0.6373338 0.6885919 #>  [514,] 0.53621150 0.8050744 0.8788403 1.0363692 1.0396085 1.0979564 1.1051960 #>  [515,] 0.48078748 0.6237970 0.7554551 0.8422960 0.8779618 0.9005409 0.9014972 #>  [516,] 0.48641497 0.5687763 0.6440516 0.6494720 0.6578705 0.6996475 0.7514175 #>  [517,] 0.38945854 0.4613528 0.4785826 0.6049064 0.6341900 0.6607480 0.7595783 #>  [518,] 0.31889280 0.3755404 0.4311174 0.5999233 0.6786242 0.7265484 0.7580115 #>  [519,] 0.41880311 0.5847942 0.7299820 0.7301040 0.8653894 0.9046597 0.9769723 #>  [520,] 0.54343074 0.5614839 0.6224221 0.6595687 0.7034527 0.7146763 0.7512718 #>  [521,] 0.45824290 0.4625125 0.5374526 0.5969208 0.6850826 0.7029169 0.7690073 #>  [522,] 0.28486986 0.3309968 0.5498071 0.5862048 0.5866771 0.6067760 0.6160274 #>  [523,] 1.06807483 1.2347476 1.6923764 1.7227032 1.7309687 1.7398127 1.7540955 #>  [524,] 0.46365510 0.4887008 0.5286678 0.5907047 0.6062089 0.6108297 0.6227550 #>  [525,] 0.50937271 0.8096968 0.8408443 0.8963739 0.9026707 0.9639644 0.9894491 #>  [526,] 0.33163195 0.4777843 0.6867809 0.7057607 0.7183016 0.7193081 0.7899114 #>  [527,] 0.61366860 0.8044922 0.8208247 0.8621904 0.8792036 0.8897123 0.9109741 #>  [528,] 0.15566660 0.5831242 0.6464118 0.7021490 0.7474250 0.7779346 0.8332654 #>  [529,] 0.41549408 0.5484668 0.6469765 0.6674095 0.6832009 0.6876529 0.7027645 #>  [530,] 0.39837640 0.4072187 0.4436585 0.4753464 0.5096796 0.5569904 0.5676497 #>  [531,] 0.52443174 0.5276184 0.6122561 0.6147713 0.6377932 0.6379135 0.7713618 #>  [532,] 0.13413785 0.6204981 0.7601424 0.7779615 0.8264592 0.8600091 0.8605907 #>  [533,] 0.40688992 0.5354281 0.6616066 0.7079874 0.7396511 0.7450219 0.7528170 #>  [534,] 0.27599437 0.3541282 0.3755404 0.5017701 0.5399355 0.5811044 0.6750343 #>  [535,] 0.31797018 0.4588043 0.5447741 0.7049516 0.7113709 0.7216001 0.7356234 #>  [536,] 0.29466951 0.5394911 0.5423750 0.5672291 0.6141788 0.6224221 0.6385467 #>  [537,] 0.88897939 0.9046770 0.9751034 0.9772495 1.0444736 1.0536205 1.0729775 #>  [538,] 0.36893676 0.4020003 0.4137849 0.5099009 0.5337631 0.5577939 0.5580755 #>  [539,] 0.85064963 0.8650430 0.8825688 0.9262310 0.9556515 1.0005424 1.0024060 #>  [540,] 0.69560196 0.7776562 0.8012143 0.8039280 0.9121129 1.0458274 1.1959975 #>  [541,] 0.49140685 0.5110256 0.5921981 0.7759735 0.7899429 0.8096968 0.8265497 #>  [542,] 1.10642605 1.1164050 1.1818417 1.2084191 1.2697731 1.3804673 1.3875742 #>  [543,] 0.28044618 0.4756942 0.5072671 0.5121703 0.5437904 0.5990299 0.6248871 #>  [544,] 0.40971328 0.8268145 0.9456256 0.9638829 1.0619343 1.0987394 1.1067582 #>  [545,] 0.71710388 0.8928501 0.9720062 0.9899796 1.0120203 1.0915253 1.1475708 #>  [546,] 0.48499451 0.5309125 0.5431780 0.6930933 0.7153810 0.7510074 0.9052013 #>  [547,] 0.76333603 0.8322898 0.8766758 1.0306357 1.0578223 1.0729674 1.0823271 #>  [548,] 0.33637142 0.4408370 0.4486135 0.4854857 0.5468995 0.5591224 0.5880462 #>  [549,] 0.41447280 0.4802767 0.5862173 0.7382226 0.7469121 0.7942158 0.8522822 #>  [550,] 0.40459003 0.5009616 0.5031850 0.5164116 0.5224890 0.5361314 0.5457542 #>  [551,] 0.07871462 0.2378034 0.3453692 0.3609215 0.4058785 0.4175176 0.4296775 #>  [552,] 0.27981369 0.4971087 0.5562532 0.5740092 0.5915632 0.6548179 0.6610955 #>  [553,] 0.25774469 0.3652887 0.3981978 0.4460521 0.4834904 0.5355933 0.5438505 #>  [554,] 0.27639652 0.6178663 0.6633634 0.6750672 0.7429170 0.7921757 0.7993059 #>  [555,] 0.31494567 0.4247100 0.4522880 0.4650741 0.4772419 0.4826388 0.5284284 #>  [556,] 0.34096293 0.3575059 0.4026878 0.4146151 0.4869922 0.4932223 0.5040757 #>  [557,] 1.02545562 1.1212602 1.5930786 1.6486980 1.7162852 1.7211023 1.7595370 #>  [558,] 0.40827180 0.5177791 0.5344464 0.5973421 0.6349991 0.6356942 0.6788909 #>  [559,] 0.36931805 0.4343279 0.4544081 0.5058139 0.5472424 0.5540991 0.5652773 #>  [560,] 0.30995065 0.4568635 0.5112165 0.5301637 0.5670109 0.5715294 0.6812461 #>  [561,] 0.33108689 0.3647870 0.3927546 0.4307549 0.4720664 0.4776850 0.4809971 #>  [562,] 0.21005718 0.4958056 0.5633400 0.6549419 0.7052061 0.7193081 0.7262047 #>  [563,] 0.94145974 1.0224870 1.0516635 1.0777126 1.0921771 1.1175480 1.1365582 #>  [564,] 0.23405299 0.5528495 0.5661288 0.6614197 0.6900982 0.7105025 0.7139307 #>  [565,] 0.69258887 0.7024510 0.7147813 0.7382613 0.7919133 0.8149066 0.9236789 #>  [566,] 0.51448466 0.6125336 0.6484616 0.6997512 0.7021224 0.7055575 0.7100942 #>  [567,] 0.29617228 0.3304429 0.4517954 0.4538657 0.4571435 0.4660350 0.4850270 #>  [568,] 0.52119098 0.6125142 0.6869848 0.6995231 0.7104944 0.7507253 0.7949456 #>  [569,] 0.18607748 0.4574974 0.5402271 0.5403717 0.5635507 0.5940502 0.6235578 #>  [570,] 0.18278457 0.5338661 0.5378304 0.5862173 0.6982374 0.6992809 0.8041186 #>  [571,] 0.20660531 0.2586838 0.3209740 0.3460952 0.3947234 0.4240761 0.5370333 #>  [572,] 0.48456290 0.6644677 0.6674892 0.6838160 0.6845856 0.6934362 0.7465997 #>  [573,] 0.59447652 0.6184152 0.6988428 0.7794680 0.9829675 1.0021546 1.0041221 #>  [574,] 0.12176819 0.3721867 0.3737521 0.4378377 0.4743630 0.5164213 0.5781658 #>  [575,] 0.28646015 0.3151615 0.3345037 0.4073304 0.5395579 0.5710533 0.5738169 #>  [576,] 0.51662510 0.5271182 0.5460962 0.5990525 0.6624654 0.6694315 0.7067906 #>  [577,] 0.35665942 0.3712647 0.4540692 0.4943487 0.5224890 0.5263575 0.5507557 #>  [578,] 0.38248709 0.3913617 0.4952194 0.5008011 0.5374827 0.5515974 0.5643737 #>  [579,] 0.74617390 0.8751409 0.9876924 1.0298540 1.0474016 1.0741441 1.0931002 #>  [580,] 0.33104620 0.3478820 0.4287227 0.4755492 0.5232673 0.5476248 0.5518402 #>  [581,] 0.54600305 0.6112782 0.6213807 0.6227225 0.7199754 0.7256621 0.7522778 #>  [582,] 0.51661438 0.5788640 0.6936203 0.7009100 0.7015264 0.7539154 0.7750866 #>  [583,] 0.50233812 0.5578971 0.5609527 0.6693627 0.6786311 0.6990648 0.7056897 #>  [584,] 0.48532956 0.5079140 0.5300557 0.5305738 0.5598585 0.6045340 0.6447043 #>  [585,] 0.65931532 1.0627908 1.0671141 1.1396169 1.1528051 1.1551982 1.1565112 #>  [586,] 0.23944783 0.5000345 0.5466001 0.5570764 0.5692379 0.6484648 0.7122003 #>  [587,] 0.48490878 0.6059156 0.6325765 0.6846025 0.6917914 0.8191713 0.8260865 #>  [588,] 0.13801569 0.4811152 0.4862037 0.5596539 0.5647059 0.5669794 0.5766179 #>  [589,] 0.46513236 0.6581349 0.6917636 0.7981270 0.8284677 0.8800895 0.9020067 #>  [590,] 0.36904821 0.6363375 0.6607480 0.6752596 0.7469752 0.7783141 0.8760413 #>  [591,] 0.58871536 0.7709680 0.8355143 0.9099965 0.9485464 0.9880351 1.0240991 #>  [592,] 0.41308184 0.4744320 0.4789602 0.4825389 0.4913116 0.4943487 0.5121969 #>  [593,] 0.24369140 0.3825173 0.4725684 0.5006228 0.6436857 0.6493002 0.6530494 #>  [594,] 0.30921906 0.3843468 0.4151384 0.5004716 0.5085950 0.5173150 0.5283881 #>  [595,] 0.39459871 0.5832223 0.5935903 0.6026756 0.6385467 0.7311194 0.7367688 #>  [596,] 0.53530233 0.6123974 0.6480823 0.7285163 0.7315662 0.7407456 0.7512929 #>  [597,] 0.41632389 0.4241826 0.4398140 0.5093461 0.5453175 0.5598868 0.5729260 #>  [598,] 0.24447980 0.2478326 0.4460521 0.4484374 0.4560289 0.4565522 0.4853179 #>  [599,] 0.34489464 0.4620425 0.5225903 0.6108297 0.6216273 0.6776865 0.6844769 #>  [600,] 0.35998081 0.3873731 0.5131486 0.5207932 0.5657115 0.5812143 0.5994502 #>  [601,] 0.27639652 0.5753035 0.5890626 0.6122642 0.7705089 0.7938271 0.8431249 #>  [602,] 0.78788668 0.9116360 0.9149154 0.9416944 1.0757101 1.1056397 1.1238059 #>  [603,] 0.49038117 0.7183016 0.8579808 0.8993067 0.9729493 1.0315773 1.1022375 #>  [604,] 0.39377339 0.5346657 0.6298198 0.6444927 0.6746974 0.6884717 0.7175564 #>  [605,] 0.33426591 0.4005951 0.5005657 0.5311627 0.5403851 0.6805567 0.7078396 #>  [606,] 0.44088530 0.4811152 0.5250160 0.5594343 0.5935903 0.6414284 0.7013401 #>  [607,] 0.59934650 0.6364736 0.6433930 0.7286429 0.7411241 0.7615876 0.7771141 #>  [608,] 0.43898170 0.4884188 0.5324268 0.6183460 0.7129703 0.7983427 0.7992867 #>  [609,] 0.52819960 0.6319151 0.6889327 0.8490920 0.9238016 1.0062685 1.0260488 #>  [610,] 0.62410728 0.7900761 0.8319470 0.9389795 0.9542404 0.9575280 0.9715795 #>  [611,] 0.23780344 0.2409420 0.2716914 0.3590474 0.3913593 0.4422924 0.5166339 #>  [612,] 0.23268810 0.2536672 0.3735126 0.4792013 0.5040757 0.5064644 0.5118921 #>  [613,] 0.25579274 0.4948157 0.6887990 0.6995231 0.7055575 0.7082702 0.7093156 #>  [614,] 0.24664621 0.2902482 0.5176510 0.5571528 0.5650481 0.5801149 0.5834059 #>  [615,] 0.27563000 0.2900317 0.3117967 0.3989867 0.4019862 0.4955604 0.5379373 #>  [616,] 0.33211149 0.3508336 0.3528248 0.3913593 0.4058785 0.4171184 0.4372508 #>  [617,] 0.48073295 0.5118648 0.5715294 0.5888544 0.5998261 0.6552467 0.6639277 #>  [618,] 0.38420445 0.4529424 0.5179190 0.5903237 0.6351641 0.6537077 0.6543495 #>  [619,] 0.28719023 0.3117132 0.3595036 0.4205327 0.5036455 0.5167268 0.5416555 #>  [620,] 0.54140262 0.5615738 0.5716426 0.6939201 0.7266303 0.7505353 0.7508083 #>  [621,] 0.45539475 0.5140250 0.5460962 0.5508315 0.5879453 0.5962526 0.6374631 #>  [622,] 0.70520608 0.8132554 0.8570753 0.8786748 0.9114445 0.9567925 0.9977510 #>  [623,] 0.28703477 0.4328400 0.4630699 0.4902254 0.4997511 0.5492283 0.5499580 #>  [624,] 0.33058968 0.3414507 0.4380561 0.4603972 0.4962658 0.5414026 0.6497949 #>  [625,] 0.36742776 0.3991559 0.4253854 0.7532413 0.7909699 0.8282616 0.8306897 #>  [626,] 0.57886397 0.5805225 0.6513863 0.6553005 0.6887650 0.7175564 0.7177347 #>  [627,] 0.43988569 0.4874383 0.7022335 0.7750866 0.8279077 0.9112521 0.9809436 #>  [628,] 0.64717653 0.7782061 0.9047407 0.9052013 1.0008969 1.0144688 1.0671127 #>  [629,] 0.49925939 0.5515885 0.5561592 0.6374631 0.6914780 0.7596080 0.7946946 #>  [630,] 1.12441410 1.2164243 1.2262082 1.2558498 1.3191045 1.3850768 1.4040059 #>  [631,] 0.43790893 0.4667697 0.4769766 0.4927835 0.4932223 0.5406166 0.5529526 #>  [632,] 0.42741318 0.9064671 0.9084235 1.0622482 1.1247284 1.2488087 1.2893991 #>  [633,] 0.31111857 0.3342519 0.3869709 0.4836921 0.5053310 0.5275071 0.5338385 #>  [634,] 0.80640117 0.8600091 1.0536362 1.0598791 1.0629244 1.0925987 1.2584620 #>  [635,] 0.87011080 0.9883784 1.1779365 1.1835998 1.1933245 1.1991555 1.2006080 #>  [636,] 1.19827086 1.2652912 1.2705616 1.4586775 1.5748060 1.5759801 1.5886510 #>  [637,] 0.25236259 0.3722170 0.3971836 0.3978650 0.4517954 0.4557723 0.4646370 #>  [638,] 0.26731894 0.5597664 0.6734284 0.7034186 0.7382226 0.7465193 0.7652319 #>  [639,] 0.55534877 0.9762424 1.2387420 1.3336536 1.4278171 1.4791081 1.5595669 #>  [640,] 1.38176414 1.4027068 1.5612911 1.6247606 1.7017419 1.8043487 1.8374909 #>  [641,] 0.06589832 0.2721334 0.3866666 0.4826761 0.5167676 0.5300557 0.5387529 #>  [642,] 0.27901337 0.3869709 0.4667697 0.5489454 0.5558380 0.6004248 0.6360690 #>  [643,] 0.28486986 0.4822843 0.5503629 0.5688865 0.6112782 0.6379215 0.6393196 #>  [644,] 0.71752319 0.7847656 0.8034461 1.0500515 1.0790151 1.1606309 1.1812313 #>  [645,] 0.34953506 0.3608873 0.4120480 0.4544081 0.4854857 0.5188490 0.5576237 #>  [646,] 0.39971867 0.4926281 0.5374526 0.5391911 0.5465211 0.5669344 0.5691726 #>  [647,] 0.37229679 0.4379752 0.5266683 0.5448767 0.5528495 0.5610559 0.6251867 #>  [648,] 0.27190050 0.5907047 0.6030113 0.6304600 0.6719920 0.6745211 0.6914248 #>  [649,] 0.63604624 0.6855277 0.9327261 0.9809173 1.0148390 1.0537441 1.0664643 #>  [650,] 0.77613761 0.9661982 1.0145922 1.0809133 1.1244141 1.1579643 1.2557197 #>  [651,] 0.10890095 0.3743787 0.3826668 0.4307549 0.4325840 0.4330592 0.5361181 #>  [652,] 0.49900292 0.5933355 0.7345501 0.7439780 0.7660086 0.8103719 0.8293544 #>  [653,] 0.52820126 0.6492154 0.6790748 0.6899303 0.8097355 0.8849143 0.8961662 #>  [654,] 0.25553066 0.3704586 0.4636515 0.5632268 0.5645616 0.5764672 0.5876781 #>  [655,] 0.32827187 0.4621485 0.4670270 0.4836921 0.5815259 0.6049064 0.6758693 #>  [656,] 0.34122048 0.4280753 0.5013900 0.5300733 0.5317042 0.5466001 0.6105344 #>  [657,] 0.41269992 0.5440849 0.5610167 0.5947505 0.5995924 0.6125635 0.6492150 #>  [658,] 0.73484529 0.8486142 0.9556076 0.9841908 0.9938162 1.0595581 1.0728338 #>  [659,] 0.47207296 0.5121511 0.6847509 0.7414876 0.7824506 0.8130220 0.8239049 #>  [660,] 0.28852476 0.3980681 0.4045900 0.4244655 0.4290981 0.4391373 0.4512288 #>  [661,] 0.55568035 0.5779827 0.6383327 0.8127675 0.8404079 0.9061725 0.9833422 #>  [662,] 0.37052175 0.4283136 0.4557723 0.4571435 0.4697446 0.5083450 0.5558814 #>  [663,] 0.26885961 0.3513131 0.3704586 0.3882410 0.4653674 0.4953588 0.5232673 #>  [664,] 0.72947771 0.7892534 0.8026528 0.8046057 0.8172131 0.8210511 0.8654302 #>  [665,] 0.43842198 0.5078067 0.5259417 0.5284284 0.5532727 0.5719446 0.6001208 #>  [666,] 0.36166541 0.3752469 0.4654837 0.5228152 0.5691685 0.5863458 0.5877697 #>  [667,] 0.46041510 0.4913428 0.5118247 0.5244317 0.6343899 0.6525028 0.6622898 #>  [668,] 0.50362038 0.6581349 0.7716759 0.7774180 0.8640333 0.8675365 0.8969093 #>  [669,] 0.37902617 0.7474250 0.8269337 0.8660758 0.9721728 0.9910921 1.0298670 #>  [670,] 0.23819931 0.7368765 0.7395656 0.7719461 0.7888535 0.8352410 0.8563161 #>  [671,] 0.50355741 0.5069168 0.5191249 0.5479097 0.6064591 0.6187476 0.6341838 #>  [672,] 0.45240271 1.2103630 1.2608074 1.3097644 1.3447221 1.3725328 1.4004944 #>  [673,] 0.45119880 0.4602642 0.4657681 0.4989590 0.5627876 0.5819915 0.6334960 #>  [674,] 0.92410419 0.9557264 1.0680267 1.1041085 1.2125783 1.2282120 1.3526752 #>  [675,] 0.69626102 0.7601424 0.8190091 0.8598253 0.8932664 0.9097229 0.9135110 #>  [676,] 0.33552713 1.0234180 1.0937650 1.1298281 1.1902421 1.1918410 1.2367037 #>  [677,] 0.58967854 0.7312791 0.7690131 0.8422960 0.8469972 0.8802893 0.9428302 #>  [678,] 0.20106165 0.3163714 0.3342519 0.4426390 0.4563722 0.4968433 0.5132356 #>  [679,] 0.39765875 0.4261820 0.5283646 0.5795937 0.5846790 0.5942567 0.6097198 #>  [680,] 0.49849978 0.5237359 0.6594163 0.6674892 0.7650750 0.7834306 0.8307839 #>  [681,] 0.54861653 0.5761775 0.5867615 0.6068332 0.6669802 0.6804669 0.7466670 #>  [682,] 0.35173972 0.3702594 0.4159067 0.4511801 0.4722729 0.4847136 0.5031850 #>  [683,] 0.53423100 0.6319151 0.7058544 0.7712689 0.8061639 0.9830863 0.9861680 #>  [684,] 0.34807105 0.5309125 0.5923360 0.8725691 0.9261809 0.9931073 0.9936920 #>  [685,] 0.54688338 0.7929807 0.8549181 0.8562695 0.8595303 0.9160647 0.9738354 #>  [686,] 0.13413785 0.5729688 0.7404315 0.8064012 0.8461974 0.8598253 0.9341246 #>  [687,] 1.03334672 1.8435039 1.9287715 1.9365755 1.9663412 2.0112580 2.0737350 #>  [688,] 0.33614854 0.4112868 0.6263205 0.6453205 0.6481453 0.6642328 0.6958531 #>  [689,] 0.39415584 0.5271182 0.6144610 0.6500023 0.6506966 0.7555828 0.7639140 #>  [690,] 0.10532073 0.3047294 0.3586991 0.4173184 0.4720664 0.5548456 0.5610167 #>  [691,] 0.26136956 0.4614361 0.7006985 0.8934818 0.9290410 0.9298701 0.9374138 #>  [692,] 0.26057457 0.3591557 0.5418460 0.6167637 0.6614990 0.6709370 0.7610253 #>  [693,] 0.29781299 0.3733776 0.4984998 0.5211139 0.6338577 0.7827647 0.8614801 #>  [694,] 0.41413531 0.4170800 0.4960290 0.5640250 0.5717831 0.5795376 0.5836341 #>  [695,] 1.03876866 1.0820106 1.1881403 1.4098394 1.4882723 1.4992243 1.5319253 #>  [696,] 0.31652481 0.5344220 0.6784430 0.7122003 0.8200616 0.8346574 0.9064128 #>  [697,] 0.39771991 0.5926501 0.6586538 0.7806151 0.8129439 0.8956926 0.9025381 #>  [698,] 0.27563000 0.3762885 0.3890124 0.4927272 0.5043863 0.5072042 0.5219758 #>  [699,] 0.57025623 0.5933355 0.8308615 0.8912024 0.9103795 0.9258977 0.9473357 #>  [700,] 1.10563972 1.1233627 1.2087139 1.3175230 1.3553161 1.3856050 1.4022734 #>  [701,] 0.18372461 0.5001023 0.6360462 0.6460867 0.7090677 0.7688296 0.8182520 #>  [702,] 0.26592140 0.3878519 0.3941555 0.4407436 0.5507438 0.6509342 0.6691211 #>  [703,] 0.51662510 0.5508315 0.6500023 0.6636568 0.6979966 0.7301040 0.7678663 #>  [704,] 0.27905291 0.4013802 0.4556445 0.4855148 0.5779035 0.5863615 0.6060062 #>  [705,] 0.17712813 0.3342443 0.4159067 0.4203269 0.4891576 0.5211045 0.5364644 #>  [706,] 0.52795244 0.6398728 0.7633360 0.8353210 0.9273754 0.9285300 0.9661993 #>  [707,] 1.20295511 1.4692367 1.6154634 1.7257984 1.7992137 1.8313704 1.8354910 #>  [708,] 0.41128678 0.5747427 0.6546591 0.6778971 0.7170954 0.7208180 0.7215080 #>  [709,] 0.29755885 0.4489744 0.4838201 0.5085695 0.5453236 0.5498468 0.5655232 #>  [710,] 0.20660531 0.2377231 0.2760971 0.3882202 0.4549720 0.4582040 0.4767823 #>  [711,] 0.31171323 0.3570371 0.4567826 0.4601454 0.4678942 0.4851383 0.5025541 #>  [712,] 0.29918549 0.3260580 0.3578974 0.3782453 0.4913079 0.5017701 0.5453692 #>  [713,] 0.49411755 0.5024195 0.5387850 0.5460031 0.6028909 0.6040424 0.6232891 #>  [714,] 0.25553066 0.3807797 0.4307099 0.4596298 0.4653674 0.4865693 0.5480896 #>  [715,] 0.35083358 0.3782453 0.4372181 0.4822843 0.5052709 0.5111125 0.5288020 #>  [716,] 0.28101001 0.6744865 0.7843832 0.8752752 0.9610279 1.0155549 1.0315390 #>  [717,] 0.28849248 0.3160985 0.3998321 0.5672291 0.5826002 0.6141672 0.6590402 #>  [718,] 0.38973371 0.5905078 0.6529608 0.7465997 0.7616025 0.7759396 0.7821060 #>  [719,] 0.22024287 0.3280757 0.3673595 0.3893021 0.4231409 0.4398140 0.4414779 #>  [720,] 0.69323225 0.8461942 0.9116176 0.9155840 0.9241042 0.9264113 0.9418378 #>  [721,] 0.42696992 0.5922880 0.5945137 0.6729041 0.7000338 0.7996258 0.8027635 #>  [722,] 0.74847736 0.7761376 1.0052578 1.0773080 1.2325055 1.2610000 1.2688905 #>  [723,] 0.53621150 0.6649667 0.7050606 0.7550649 0.8382225 0.8806140 0.9186723 #>  [724,] 0.26136956 0.5931126 0.7431772 0.8986359 0.9355992 1.0550265 1.0665304 #>  [725,] 0.31682127 0.3788041 0.4162810 0.4267963 0.4722729 0.5081374 0.5211045 #>  [726,] 0.35752222 0.3788041 0.3868493 0.4886183 0.5001631 0.5465211 0.5784537 #>  [727,] 0.28129841 0.3109877 0.3412205 0.4469935 0.4651031 0.4834487 0.4977855 #>  [728,] 0.43691128 0.4753464 0.5436878 0.5988325 0.6423064 0.6489412 0.6712107 #>  [729,] 0.38410253 0.4089000 0.4242676 0.5552094 0.5721455 0.5811044 0.6116963 #>  [730,] 1.04853738 1.2592341 1.3979023 1.4472431 1.5378628 1.5466112 1.6459905 #>  [731,] 0.41549408 0.6262117 0.6716517 0.7060873 0.7840814 0.8130220 0.8529882 #>  [732,] 0.34267031 0.5191249 0.5467374 0.5921847 0.6867144 0.6950927 0.7260012 #>  [733,] 0.19580280 0.4936210 0.5260483 0.5546339 0.5547224 0.5627207 0.5893963 #>  [734,] 0.27857413 0.4849263 0.5409792 0.6457331 0.6488333 0.6586538 0.7088229 #>  [735,] 0.21646831 0.3508481 0.4812538 0.4826761 0.5085950 0.5154940 0.5305738 #>  [736,] 0.43170140 0.4690875 0.5264752 0.5716426 0.6742815 0.6911936 0.7226345 #>  [737,] 0.34145066 0.4275372 0.5713528 0.6091510 0.6266729 0.6294136 0.6331340 #>  [738,] 0.35665942 0.4244655 0.4399239 0.4744320 0.4817748 0.4935367 0.4949335 #>  [739,] 0.30267795 0.4163103 0.4377380 0.4819460 0.4853179 0.5597195 0.5890081 #>  [740,] 0.21830698 0.3136395 0.4319796 0.4366393 0.4527877 0.4737935 0.4880767 #>  [741,] 0.54017560 0.7015047 0.7835461 0.7966494 0.8769281 0.9016170 0.9160310 #>  [742,] 0.22344048 0.2315838 0.2995746 0.3920649 0.3978650 0.5170964 0.5515974 #>  [743,] 0.28278657 0.2930970 0.3203606 0.3570371 0.3932238 0.4626213 0.4636577 #>  [744,] 0.34812010 0.4807329 0.5287051 0.5409906 0.5865787 0.6121614 0.6620982 #>  [745,] 0.28754350 0.3092191 0.4412127 0.4812538 0.5585983 0.5788986 0.6099168 #>  [746,] 0.30525178 0.3422599 0.3543292 0.3798944 0.4188013 0.4231409 0.4489744 #>  [747,] 0.52759157 0.5407526 0.5527695 0.5548456 0.6127422 0.6752596 0.6781999 #>  [748,] 0.44356112 0.4977439 0.5556991 0.6379792 0.6457331 0.6488583 0.6698416 #>  [749,] 0.48510856 0.8117791 0.8315383 0.8427322 0.8605242 0.9175021 0.9589252 #>  [750,] 0.29102335 0.3151615 0.5264830 0.5765766 0.5902299 0.6425255 0.7172626 #>  [751,] 0.57651011 0.6241073 0.6795041 0.7079785 0.8778067 0.9478711 1.0299986 #>  [752,] 0.40650210 0.4324867 0.4343748 0.4350896 0.4426390 0.4908901 0.5049543 #>  [753,] 0.41464018 0.5586740 0.6395816 0.6709370 0.6750672 0.7579831 0.7808072 #>  [754,] 0.34953506 0.4430797 0.4710908 0.4927239 0.5132728 0.5468995 0.5680844 #>  [755,] 0.28604377 0.3635395 0.3994637 0.5041385 0.5467263 0.5795937 0.6694919 #>  [756,] 0.36530119 0.7042804 0.7187508 0.7371296 0.8010091 0.8021615 0.8046057 #>  [757,] 0.34558726 0.4709764 0.4834487 0.5300733 0.5319530 0.5415294 0.5795376 #>  [758,] 0.29306987 0.5073417 0.5395579 0.5706791 0.5765766 0.5833599 0.6094833 #>  [759,] 0.37126470 0.4686271 0.5155080 0.5283201 0.6166147 0.6572378 0.6691211 #>  [760,] 0.40110545 0.4500614 0.5337972 0.6434322 0.6447028 0.6622607 0.6690414 #>  [761,] 0.29986495 0.3072669 0.3260580 0.4372181 0.4504794 0.4590087 0.4782786 #>  [762,] 0.23772315 0.3460952 0.4185939 0.4697882 0.4721490 0.4728922 0.4862037 #>  [763,] 0.19501765 0.2183070 0.3361192 0.4209539 0.4431478 0.4536507 0.4722222 #>  [764,] 0.35497780 0.4146151 0.4328400 0.4480917 0.4630443 0.4725746 0.4769766 #>  [765,] 0.29756102 0.3337820 0.4369113 0.4653207 0.5247433 0.5374227 0.6043981 #>  [766,] 0.58011814 0.6614197 0.6937263 0.7319751 0.7917295 0.9033606 0.9094331 #>  [767,] 0.41594026 0.5452408 0.5692567 0.5765101 0.5775035 0.6784842 0.6996475 #>  [768,] 0.27800359 0.2812984 0.3463961 0.4424651 0.5013900 0.5148118 0.5392730 #>  [769,] 0.52859040 0.6281919 0.6729307 0.6865952 0.7550649 0.8326878 0.8528669 #>  [770,] 0.43231058 0.5515885 0.6349631 0.7076218 0.7570914 0.8094163 0.8615012 #>  [771,] 0.61141674 0.6456695 0.6887650 0.7014138 0.8441214 0.8568623 0.8679033 #>  [772,] 0.42696992 0.6421818 0.6791367 0.7671323 0.7876729 0.8253881 0.8514361 #>  [773,] 0.48078748 0.5860866 0.6580463 0.6959762 0.7369216 0.7605301 0.7999303 #>  [774,] 0.50010228 0.5969013 0.6121614 0.6621425 0.7310983 0.7424790 0.7802224 #>  [775,] 0.44119640 0.5550493 0.7045053 0.8404222 0.8512957 0.9546601 0.9833903 #>  [776,] 0.62000056 0.6734284 0.7579007 0.8341691 0.8562695 0.8728764 0.9622609 #>  [777,] 0.60683323 0.6158164 0.8201544 0.8990388 0.9060134 0.9367950 1.0102194 #>  [778,] 0.46204253 0.5227066 0.5260483 0.5678294 0.6022492 0.6301933 0.6377201 #>  [779,] 0.77355656 0.8097817 0.8684838 1.0303583 1.0791564 1.0820106 1.2053903 #>  [780,] 0.39596499 0.4006383 0.4283099 0.4656738 0.5360455 0.5377266 0.5403717 #>  [781,] 0.28605694 0.3611832 0.4714210 0.4858604 0.4984722 0.5374883 0.5465126 #>  [782,] 0.44187620 0.5365025 0.8468958 0.8542527 0.9156656 0.9950317 0.9996648 #>  [783,] 0.44279886 0.8250224 0.9798230 1.0045712 1.2166775 1.3032936 1.3223338 #>  [784,] 0.29665491 0.5455110 0.7473691 0.7616267 0.8026838 0.8072740 0.8126448 #>  [785,] 0.25774469 0.4378377 0.4483887 0.4900059 0.5061542 0.5094537 0.5162624 #>  [786,] 0.38544404 0.4988899 0.5207712 0.5521413 0.5558814 0.5647601 0.6419176 #>  [787,] 0.36159114 0.5226789 0.5605272 0.5660106 0.5740092 0.5846650 0.6316444 #>  [788,] 0.15094167 0.6492150 0.6747480 0.6900168 0.7139384 0.7515119 0.7517693 #>  [789,] 0.47509986 0.4953443 0.4989590 0.5944045 0.6131340 0.6716285 0.7465999 #>  [790,] 0.76557133 0.8139490 0.8830710 0.8846710 0.9552284 1.0679325 1.0700316 #>  [791,] 0.52077083 0.5321453 0.5831629 0.6377770 0.6699705 0.6840993 0.6847509 #>  [792,] 0.43825596 0.4492006 0.5005657 0.5720708 0.5827366 0.6000433 0.6537077 #>  [793,] 0.67624563 0.7636449 0.7766485 0.8609617 0.9687646 1.0797497 1.1166100 #>  [794,] 0.63283165 0.6589157 0.7337709 0.8083596 0.8493663 0.8760413 0.9335598 #>  [795,] 0.95790048 0.9811346 1.0763247 1.1475708 1.1592202 1.3015413 1.3068653 #>  [796,] 0.42325444 0.4983501 0.5198168 0.5476248 0.5796316 0.5890626 0.6336015 #>  [797,] 0.66969521 0.6818107 0.8009632 0.8409599 0.8502982 0.8975041 0.9819452 #>  [798,] 0.46741661 0.5000345 0.5094971 0.5344220 0.5809554 0.6066686 0.6752571 #>  [799,] 0.53993545 0.5945137 0.6227331 0.6708251 0.7149105 0.7232039 0.7265484 #>  [800,] 0.27042148 0.3158657 0.4472996 0.4892956 0.4897954 0.4913079 0.4968433 #>  [801,] 0.40877636 0.5858953 0.6321234 0.6840882 0.7203669 0.7592315 0.7602041 #>  [802,] 0.77914342 0.7963899 0.8828443 0.9111056 0.9112521 1.0125421 1.0206095 #>  [803,] 0.49487639 0.7225194 0.7341418 0.7964829 0.8655612 0.8880659 0.8930964 #>  [804,] 0.45824290 0.5202275 0.5301617 0.5642075 0.5721468 0.5741034 0.5796381 #>  [805,] 0.34267031 0.4315083 0.5069168 0.6403740 0.6824800 0.6995873 0.7169808 #>  [806,] 0.55573321 0.7571499 0.8215612 0.9151750 0.9384270 0.9407462 0.9475253 #>  [807,] 0.68813450 0.7582121 0.8094660 0.8307179 0.8393623 0.8634913 0.8701108 #>  [808,] 0.26731894 0.4946386 0.5507438 0.6666750 0.6859119 0.7317968 0.7725772 #>  [809,] 0.21295814 0.3635395 0.4261820 0.4452373 0.4946091 0.5402503 0.5983311 #>  [810,] 0.44119640 0.4928483 0.7198872 0.9167259 0.9345591 0.9454460 0.9505991 #>  [811,] 0.46932559 0.5022789 0.5514912 0.5557180 0.5604123 0.5766523 0.5897335 #>  [812,] 0.54343074 0.5832223 0.6414284 0.6683551 0.6990306 0.7766424 0.7775958 #>  [813,] 0.32935265 0.4457020 0.5116744 0.5287051 0.5491323 0.5998261 0.6812461 #>  [814,] 0.24927188 0.4032888 0.4365151 0.4492803 0.4844176 0.5073417 0.5098431 #>  [815,] 0.65748993 0.7334263 0.7334717 0.7899114 0.7912593 0.8447553 0.9114445 #>  [816,] 0.90979959 0.9120651 0.9151445 1.0992231 1.1382557 1.1531698 1.2826792 #>  [817,] 0.40551627 0.5354088 0.7445213 0.7899429 0.8395665 0.8544337 0.8639894 #>  [818,] 0.49038117 0.8023227 0.9060134 0.9587876 0.9588082 0.9708415 1.0124998 #>  [819,] 0.36578040 0.5586740 0.6011433 0.6694919 0.6725122 0.6797551 0.6984118 #>  [820,] 0.23405299 0.5266683 0.5801181 0.5903466 0.7604793 0.7664642 0.7681634 #>  [821,] 0.64717653 1.1141558 1.2048398 1.2397938 1.2899760 1.3402823 1.3962891 #>  [822,] 1.64267806 1.6616826 1.7896082 1.9985284 2.0185503 2.0640194 2.0753097 #>  [823,] 0.45377794 0.4758191 0.5072671 0.5209023 0.5228152 0.5542641 0.5597187 #>  [824,] 0.31731417 0.4283509 0.4473596 0.4486135 0.5054831 0.5691685 0.5903237 #>  [825,] 0.72952895 0.8766758 0.8811211 0.9041462 0.9202617 0.9725533 1.0090156 #>  [826,] 0.29665491 0.8160166 0.8915890 0.9005057 0.9074246 0.9389795 0.9403717 #>  [827,] 0.83779694 0.8479701 1.0002585 1.0072073 1.0190882 1.0273840 1.0293795 #>  [828,] 0.33552713 0.9751034 1.1077467 1.1393385 1.1517676 1.1868351 1.2142004 #>  [829,] 0.39535036 0.4490767 0.5648053 0.5802220 0.6383382 0.6704425 0.6913616 #>  [830,] 0.39915593 0.5507557 0.6411641 0.6675061 0.6811319 0.6846599 0.7012308 #>  [831,] 0.35476322 0.3899679 0.4074110 0.4132217 0.4408032 0.4501351 0.5033280 #>  [832,] 0.21183003 0.3361192 0.3667478 0.3719889 0.4414779 0.4835706 0.4907942 #>  [833,] 0.31731417 0.4252186 0.4408370 0.4463507 0.4953586 0.5179190 0.5355418 #>  [834,] 0.18025791 0.4505375 0.5403851 0.6398728 0.6558456 0.6878272 0.7515951 #>  [835,] 0.30951244 0.3342443 0.4020952 0.4957648 0.5328225 0.5556817 0.6129219 #>  [836,] 1.21828309 1.4262646 1.4322837 1.7739228 1.9299749 1.9572484 1.9855892 #>  [837,] 0.27102340 0.3991109 0.4366393 0.4549720 0.4567826 0.4837275 0.4911663 #>  [838,] 0.36495537 0.3767963 0.4738372 0.5822591 0.6512642 0.6561144 0.6674095 #>  [839,] 0.61171103 0.6155090 0.6708336 0.6880632 0.7214812 0.7275020 0.7324620 #>  [840,] 0.74084069 0.7852947 0.8231301 0.8487027 0.9996083 1.0896567 1.1053987 #>  [841,] 0.50452287 0.9802327 1.0346089 1.0537209 1.0794077 1.1133902 1.1525658 #>  [842,] 0.26404906 0.3880770 0.5085695 0.5260131 0.5675414 0.5960280 0.6318123 #>  [843,] 1.00959662 1.0759642 1.1515314 1.2467336 1.2802265 1.3301512 1.3362277 #>  [844,] 0.58463346 0.7045053 0.8193923 0.8339899 0.8390367 0.8655612 0.8700247 #>  [845,] 0.25638024 0.3611832 0.3714709 0.4725727 0.5377266 0.5678965 0.5712693 #>  [846,] 0.23586068 0.4219079 0.5418460 0.5574048 0.6165702 0.7042804 0.7181309 #>  [847,] 0.77616460 0.8356453 0.9826766 1.0790151 1.0999546 1.1703108 1.2232388 #>  [848,] 0.35602338 0.5185454 0.5530461 0.5574448 0.5905078 0.6279904 0.6548764 #>  [849,] 0.90086616 0.9718243 1.0703764 1.0999546 1.1001569 1.1604128 1.1812313 #>  [850,] 0.51463224 0.5854698 0.6367938 0.7006985 0.7045065 0.7431772 0.7469315 #>  [851,] 0.16203065 0.3169936 0.3932238 0.4032888 0.4188013 0.4494678 0.4542567 #>  [852,] 0.40063830 0.4592325 0.5954044 0.6455985 0.6799514 0.6997512 0.7217565 #>  [853,] 0.47277668 0.8084563 0.8369278 0.9556746 1.0225406 1.0235714 1.0700905 #>  [854,] 0.34166176 0.3664024 0.4171434 0.4385274 0.4541245 0.4722274 0.4760505 #>  [855,] 0.30709261 0.3295074 0.3517426 0.3943943 0.4350255 0.4513995 0.4612017 #>  [856,] 0.50241955 0.5648697 0.6137553 0.6166816 0.6264814 0.6644677 0.6842002 #>  [857,] 1.02545562 1.3143951 1.3178402 1.3484227 1.3496741 1.3852523 1.4581187 #>  [858,] 0.58492004 0.6847945 0.7934794 0.8024522 0.8632206 0.8928501 0.9717063 #>  [859,] 0.30268243 0.3649554 0.5484668 0.7015190 0.7060873 0.7411182 0.7877888 #>  [860,] 0.36742776 0.4552518 0.6366337 0.6453539 0.6563881 0.6648798 0.6715243 #>  [861,] 0.59911404 0.6149672 0.6455985 0.6803645 0.6982374 0.7180527 0.7307339 #>  [862,] 0.77846153 1.0315659 1.0852952 1.2315463 1.2409560 1.2863928 1.3569760 #>  [863,] 0.25868382 0.3676732 0.4582040 0.4838838 0.4924352 0.5434296 0.5597783 #>  [864,] 0.20621884 0.3937734 0.5805225 0.6456695 0.6912233 0.7646516 0.7721309 #>  [865,] 0.43919463 0.4739795 0.5720539 0.5764672 0.5857955 0.6083381 0.6984118 #>  [866,] 0.82117986 0.8241341 0.9254244 0.9311410 0.9379529 0.9735842 0.9954084 #>  [867,] 0.63652494 1.0181729 1.1531698 1.2274253 1.2296476 1.2583914 1.3630515 #>  [868,] 0.15791809 0.5200511 0.5286678 0.6745211 0.7050692 0.7163502 0.8163568 #>  [869,] 0.72081802 0.8405058 0.9339558 0.9547296 0.9681346 1.0473707 1.0720755 #>  [870,] 0.63660823 0.7644179 0.8750358 0.9262706 0.9481123 0.9559116 1.0156188 #>  [871,] 0.55573321 0.6885770 0.7945735 0.8050744 0.9327932 0.9621093 1.0012413 #>  [872,] 0.94881701 1.2347550 1.4110335 1.4484398 1.5180535 1.5590213 1.5959956 #>  [873,] 0.69705743 1.0837385 1.1546272 1.5156995 1.5250094 1.5331654 1.5451170 #>  [874,] 0.78740304 0.8425481 0.9112659 0.9156656 1.1166100 1.3749636 1.5184581 #>  [875,] 0.18497745 0.2436914 0.3366732 0.4716877 0.5580766 0.5610559 0.6330571 #>  [876,] 0.64311896 0.7427088 0.7452602 0.8340069 0.8486142 0.8949756 0.9064677 #>  [877,] 0.29781299 0.5880065 0.6245888 0.6318411 0.7650750 0.9409994 1.0021546 #>  [878,] 0.37556236 0.4205361 0.4800769 0.4955604 0.5031140 0.5072042 0.5283646 #>  [879,] 0.36403388 0.4412568 0.5324577 0.5357635 0.5801697 0.6458346 0.6605090 #>  [880,] 0.41121271 0.6329897 0.7331036 0.7562910 0.7590442 0.7746827 0.8088757 #>  [881,] 0.24584539 0.8299450 0.8752752 0.8853091 0.9400313 0.9596653 1.0249293 #>  [882,] 0.33990152 0.3513131 0.3807797 0.4016083 0.4287227 0.4505269 0.4636515 #>  [883,] 0.47872512 0.5963015 0.7520786 0.7544457 0.7846325 0.7894578 0.8090106 #>  [884,] 0.76867671 1.0012884 1.0387687 1.1986128 1.3004426 1.4037248 1.4778683 #>  [885,] 0.69884279 0.9063504 0.9742540 0.9976679 0.9979501 1.0728086 1.0743800 #>  [886,] 0.39540906 0.4845617 0.4990029 0.5809554 0.6195026 0.7659464 0.7691329 #>  [887,] 0.33192974 0.3817846 0.4222183 0.4294442 0.4630699 0.4660350 0.4801979 #>  [888,] 0.31098770 0.3717383 0.4280753 0.5078067 0.5319530 0.5384461 0.5392730 #>  [889,] 0.15566660 0.6423990 0.6587763 0.6939371 0.6947399 0.6999829 0.8269337 #>  [890,] 0.43150827 0.5666720 0.5958244 0.6455980 0.6503482 0.6950927 0.8021907 #>  [891,] 0.61315437 0.6525075 0.6894189 0.7286528 0.7503716 0.7688296 0.7821339 #>  [892,] 0.35902995 0.4667912 0.5648697 0.7030836 0.7145403 0.7522778 0.8948893 #>  [893,] 0.58579554 0.6580463 0.7554551 0.7794136 0.7927961 0.7981605 0.8392466 #>  [894,] 0.30768304 0.3400864 0.5079140 0.5622255 0.6147323 0.6292591 0.6339338 #>  [895,] 0.26057457 0.4217011 0.4219079 0.5619008 0.6395816 0.6510061 0.8357349 #>  [896,] 0.35131310 0.4511988 0.4564948 0.5745833 0.5964308 0.6114672 0.6131340 #>  [897,] 0.50774883 0.6319116 0.6595687 0.6659831 0.6840993 0.7403758 0.7524626 #>  [898,] 0.52859040 0.6289282 0.6828095 0.7131240 0.7551208 0.7557130 0.7855642 #>  [899,] 0.35915568 0.5557180 0.5619008 0.5687763 0.5876751 0.6419176 0.6443132 #>  [900,] 0.59025537 0.7305234 0.7669379 0.8342347 0.9231616 1.0224870 1.0240711 #>  [901,] 0.39971867 0.6325765 0.6347835 0.6571982 0.6941300 0.7015047 0.7019985 #>  [902,] 0.18539147 0.2950063 0.3721867 0.5383660 0.5888796 0.5986114 0.6396110 #>  [903,] 0.30995065 0.4084424 0.4098573 0.5394218 0.6082897 0.6794235 0.7182464 #>  [904,] 0.72981904 0.7774180 0.9501241 0.9993669 1.0017470 1.0097467 1.0215047 #>  [905,] 0.48456171 0.5115882 0.5550911 0.6752571 0.6811776 0.7088229 0.7345501 #>  [906,] 0.88515396 1.0395257 1.1235978 1.2880808 1.2988942 1.3329195 1.3339387 #>  [907,] 0.44171938 0.4588043 0.5831587 0.6871991 0.8107517 0.8429024 0.8639344 #>  [908,] 0.48532956 0.5316439 0.7217565 0.7484038 0.7984542 0.8216838 0.8281784 #>  [909,] 0.47906869 0.5902299 0.5959218 0.6278874 0.6761285 0.6886318 0.7009574 #>  [910,] 0.27102340 0.4515957 0.4760505 0.4880767 0.4918514 0.5061482 0.5176510 #>  [911,] 0.40827180 0.5750312 0.6596323 0.6840882 0.6987029 0.7351812 0.7386181 #>  [912,] 0.36674781 0.4236354 0.4453602 0.5017636 0.5095951 0.5210235 0.5337631 #>  [913,] 0.36408756 0.3930415 0.4084785 0.4690875 0.5565143 0.6159350 0.6186386 #>  [914,] 0.62693836 0.7686767 0.8684838 0.9189417 0.9954084 1.0336452 1.1135376 #>  [915,] 0.18278457 0.4802767 0.5255639 0.5291160 0.6703230 0.7180527 0.7670889 #>  [916,] 0.25185127 0.2949634 0.2993604 0.4737935 0.4804533 0.4970679 0.5105750 #>  [917,] 0.63791348 0.6590551 0.6654594 0.6744865 0.7705780 0.7797260 0.8215612 #>  [918,] 0.36166541 0.4398595 0.4954609 0.5720708 0.6129923 0.6469986 0.6471286 #>  [919,] 0.29306987 0.3345037 0.4479895 0.4838838 0.4844176 0.5077764 0.5264830 #>  [920,] 0.70341859 0.7094213 0.7725772 0.8028757 0.8421457 0.8498260 0.8522822 #>  [921,] 0.30258391 0.3467198 0.4589471 0.4758191 0.4846300 0.5036455 0.5211497 #>  [922,] 0.25366724 0.2742726 0.4294442 0.4296775 0.4369733 0.4542866 0.4555924 #>  [923,] 0.35808105 0.3714709 0.3959650 0.4193769 0.5260131 0.5420105 0.5477303 #>  [924,] 0.75714988 0.9662161 0.9677501 1.0012413 1.0482366 1.1045139 1.1118979 #>  [925,] 0.61173588 0.6298198 0.6328317 0.6363375 0.7555048 0.8024194 0.8204536 #>  [926,] 1.15652583 1.4688136 1.5558833 1.5741253 1.5813593 1.6154634 1.6221442 #>  [927,] 0.34039624 0.4346167 0.4962658 0.5058467 0.5224592 0.5379373 0.5527914 #>  [928,] 0.21594290 0.4069555 0.4322114 0.4569902 0.4865693 0.4995391 0.5231996 #>  [929,] 0.62125493 0.7188796 0.8012143 0.8260250 1.1151411 1.1233265 1.1348915 #>  [930,] 0.27901337 0.4235795 0.5632448 0.5672771 0.5695555 0.5885039 0.5947505 #>  [931,] 0.60666860 0.6289469 0.6865952 0.7470500 0.7551208 0.8103719 0.8297681 #>  [932,] 0.77324328 0.8112886 0.8688782 0.9014992 0.9891298 1.0047194 1.0133250 #>  [933,] 1.07822283 1.1128261 1.3546450 1.4426864 1.4856668 1.5025665 1.5483176 #>  [934,] 0.29918549 0.3072669 0.4209831 0.4277738 0.4472996 0.4949691 0.5061147 #>  [935,] 1.09717295 1.2889697 1.3103936 1.3653241 1.3666174 1.3679443 1.3888792 #>  [936,] 0.16203065 0.2120554 0.2930970 0.3052518 0.3321248 0.4140197 0.4748555 #>  [937,] 0.23231854 0.3076830 0.4264171 0.4492803 0.5056200 0.5057390 0.5135875 #>  [938,] 0.36322659 0.3640876 0.3888441 0.4644060 0.5224592 0.5271446 0.5332845 #>  [939,] 0.24584539 0.7843832 0.8416160 0.8699077 0.9195638 1.0739958 1.0896038 #>  [940,] 0.41667911 0.4391360 0.6827840 0.7410226 0.7424790 0.8090088 0.8117791 #>  [941,] 0.32950744 0.3536302 0.3888459 0.4490767 0.4705861 0.5224619 0.5541475 #>  [942,] 0.51981680 0.5292238 0.5564808 0.5637631 0.5753035 0.6178663 0.7113709 #>  [943,] 0.80607081 1.0400390 1.0690177 1.1575136 1.1600459 1.2450972 1.2554826 #>  [944,] 0.36212940 0.8377969 0.9329553 1.1464281 1.2087059 1.2203432 1.2296552 #>  [945,] 0.43070987 0.4391946 0.5645616 0.5848887 0.6903782 0.6981730 0.7637219 #>  [946,] 0.69038732 0.7165282 0.7461739 0.8375593 0.8615639 0.8761239 0.8983097 #>  [947,] 0.31996532 0.6248871 0.6510975 0.6606037 0.6734938 0.7101788 0.7150263 #>  [948,] 0.62925906 0.7325915 0.7961328 0.8022803 0.8299153 0.8322898 0.8441060 #>  [949,] 0.41799612 0.4418762 0.8425481 1.0186796 1.0314046 1.0801949 1.0925987 #>  [950,] 0.17125143 0.2902482 0.5031140 0.5337972 0.5880061 0.6462923 0.6495047 #>  [951,] 0.29765206 0.3941558 0.5572210 0.5631018 0.6131544 0.6181847 0.6624654 #>  [952,] 0.15094167 0.6125635 0.6777772 0.7349606 0.7669861 0.7746372 0.7901013 #>  [953,] 0.45826247 0.6671023 0.6849042 0.7076218 0.7167080 0.8625735 0.8934063 #>  [954,] 1.04753270 1.3277276 1.7792075 1.8997794 1.9897343 2.1426984 2.1705778 #>  [955,] 1.20471972 1.4101273 1.5456264 1.7327980 1.7834144 1.8587290 1.8657595 #>  [956,] 0.66969521 0.6779292 0.6882147 0.7196971 0.8179076 0.8244438 0.8909486 #>  [957,] 0.34682759 0.3591189 0.5265313 0.5276910 0.5291024 0.5796316 0.5981681 #>  [958,] 0.26172432 0.3085330 0.4957648 0.5488292 0.5499580 0.5616951 0.5620349 #>  [959,] 0.51448466 0.5316439 0.7721961 0.7770632 0.7891949 0.8221583 0.8517340 #>  [960,] 0.22024287 0.3198320 0.3719889 0.4020003 0.4163239 0.4700097 0.4834602 #>  [961,] 0.28754350 0.3508481 0.3884428 0.5146322 0.5173150 0.5867615 0.5960996 #>  [962,] 0.80579995 0.8717328 0.9910921 1.1190062 1.1887878 1.2313449 1.2836454 #>  [963,] 0.71752319 0.7761646 0.8427978 0.9008662 1.1724732 1.1949735 1.2152191 #>  [964,] 0.26045814 0.3441824 0.3626244 0.4011055 0.4915421 0.5135481 0.5295210 #>  [965,] 0.40985731 0.5301637 0.5811694 0.7505353 0.7797691 0.7948747 0.8042126 #>  [966,] 0.36931805 0.4787251 0.5275666 0.5974194 0.6967910 0.6968998 0.7049516 #>  [967,] 0.25495130 0.2995746 0.3372410 0.5157767 0.5374827 0.5758965 0.5806541 #>  [968,] 0.36643597 0.3897337 0.4338537 0.5574448 0.6014282 0.6259809 0.6934362 #>  [969,] 0.36549057 0.3742121 0.3888441 0.4766990 0.4853187 0.4918514 0.5057761 #>  [970,] 0.49735137 0.6262117 0.6469765 0.7432386 0.8538483 0.9116430 0.9163022 #>  [971,] 0.51121650 0.5118648 0.5491323 0.5736080 0.5749741 0.5865787 0.6136686 #>  [972,] 0.74721567 0.7693469 0.8576678 1.0019510 1.1178213 1.1835989 1.2071501 #>  [973,] 0.27042148 0.2819084 0.3222288 0.3382569 0.4343748 0.4563722 0.5281515 #>  [974,] 0.19836229 0.4389817 0.6790712 0.6990306 0.7034527 0.7188796 0.7367688 #>  [975,] 0.21205537 0.2827866 0.3169936 0.3543292 0.3882202 0.3893021 0.4185939 #>  [976,] 0.17712813 0.3095124 0.4453602 0.4511801 0.4829069 0.5081374 0.5306704 #>  [977,] 0.42519847 0.4777843 0.6094351 0.6549419 0.7275020 0.7782740 0.8579808 #>  [978,] 0.50233812 0.5413526 0.6622446 0.7352622 0.7358837 0.7838823 0.7844248 #>  [979,] 0.40959234 0.6640985 0.6982639 0.7169927 0.7995357 0.8253050 0.8786748 #>  [980,] 0.61352526 0.7103642 0.7938595 0.8437840 0.9824442 0.9993100 0.9997486 #>  [981,] 0.27981369 0.3615911 0.4435606 0.5067220 0.5347448 0.6146312 0.6678172 #>  [982,] 0.45539475 0.5627005 0.6078362 0.6688554 0.7067906 0.7207743 0.7323126 #>  [983,] 0.34897870 0.3534926 0.4838804 0.4915421 0.4952840 0.5314695 0.5902056 #>  [984,] 1.00841829 1.0166621 1.0334100 1.0395257 1.0519189 1.0845154 1.0918508 #>  [985,] 0.35804233 0.4235795 0.5354281 0.5558380 0.6331761 0.6778309 0.7105025 #>  [986,] 0.21446472 0.3364242 0.3693689 0.3916905 0.4330592 0.4809971 0.5437195 #>  [987,] 0.15605641 0.2780036 0.4514866 0.4651031 0.4940721 0.5796431 0.6068686 #>  [988,] 0.30472944 0.4019809 0.4776850 0.5186687 0.5344464 0.5355980 0.5664812 #>  [989,] 0.24783256 0.2988129 0.3250473 0.3492134 0.3811301 0.4103845 0.4163103 #>  [990,] 0.63199901 0.6930813 0.9304726 1.0052578 1.0121859 1.0795148 1.1130227 #>  [991,] 0.31889280 0.3541282 0.5953967 0.6227331 0.6243076 0.6597966 0.7188745 #>  [992,] 0.57644557 0.6097198 0.6882147 0.7155295 0.7617170 0.8356386 0.8409599 #>  [993,] 0.36403388 0.4745904 0.5416555 0.5813966 0.5942832 0.5947303 0.5964198 #>  [994,] 0.56787183 0.6568808 0.7669379 0.8090106 0.8620086 0.8844039 0.8936407 #>  [995,] 0.44444846 0.5147274 0.7692137 0.7878867 0.8045636 0.8867688 0.8933734 #>  [996,] 0.47064827 0.7524626 0.8670406 0.8763586 0.9034435 0.9107755 0.9121129 #>  [997,] 0.99204288 1.0475327 1.4446343 1.4966871 1.5526657 1.5928860 1.7033113 #>  [998,] 0.30044775 0.3468276 0.4900412 0.4968671 0.6073071 0.6805091 0.7144339 #>  [999,] 0.52922377 0.5477915 0.7216001 0.7837438 0.8210647 0.8429024 0.8637354 #> [1000,] 0.25474129 0.3533957 0.3586991 0.3592579 0.3647870 0.3693689 0.3743787 #>              [,8]      [,9]     [,10] #>    [1,] 0.8891575 0.8922401 0.8998016 #>    [2,] 1.4467866 1.4535858 1.4587757 #>    [3,] 1.8029231 1.8127006 1.8275935 #>    [4,] 0.5802220 0.5819915 0.6156269 #>    [5,] 0.5135481 0.5267126 0.5291423 #>    [6,] 0.6669370 0.6696504 0.6702307 #>    [7,] 0.6585169 0.6626477 0.6648798 #>    [8,] 0.7033410 0.7210513 0.7268699 #>    [9,] 0.6485759 0.6545725 0.6961184 #>   [10,] 0.6261495 0.6647705 0.6788909 #>   [11,] 1.0848338 1.0850527 1.1138747 #>   [12,] 0.4714970 0.4874996 0.5057997 #>   [13,] 1.0890002 1.1201700 1.1349188 #>   [14,] 0.7680214 0.7825512 0.7984010 #>   [15,] 0.9702761 0.9835361 1.0291466 #>   [16,] 0.6040424 0.6259760 0.6327164 #>   [17,] 0.6304600 0.6322855 0.6341278 #>   [18,] 1.2029301 1.2101477 1.2300157 #>   [19,] 0.6146312 0.6368778 0.6379400 #>   [20,] 0.9151445 0.9214538 0.9274388 #>   [21,] 0.9647960 0.9662161 0.9878836 #>   [22,] 0.6099168 0.6107714 0.6278874 #>   [23,] 0.6878106 0.6917914 0.6972086 #>   [24,] 0.7520204 0.7610187 0.8356386 #>   [25,] 1.0546830 1.0905317 1.2087059 #>   [26,] 0.5518402 0.5521413 0.5735172 #>   [27,] 0.5508935 0.5748325 0.5827146 #>   [28,] 0.7716759 0.7770995 0.7833290 #>   [29,] 1.0150902 1.0515948 1.1412900 #>   [30,] 1.1565258 1.1919576 1.2055175 #>   [31,] 0.7312791 0.7605301 0.7664953 #>   [32,] 0.6195422 0.6270885 0.6492038 #>   [33,] 1.4961189 1.6408020 1.6444820 #>   [34,] 1.4925110 1.6395744 1.6538842 #>   [35,] 0.5259417 0.5505804 0.5569904 #>   [36,] 0.7379391 0.7597452 0.7712762 #>   [37,] 0.8949756 0.9673315 0.9723685 #>   [38,] 0.8986617 0.8997708 0.9602259 #>   [39,] 0.8044922 0.8480078 0.8568623 #>   [40,] 0.7299300 0.7512920 0.8039658 #>   [41,] 0.5542891 0.5778491 0.6335324 #>   [42,] 0.4949335 0.5178319 0.5532727 #>   [43,] 1.1377715 1.1707383 1.1933807 #>   [44,] 0.7479500 0.7559196 0.7876458 #>   [45,] 0.5364644 0.5716338 0.6045173 #>   [46,] 0.6321234 0.6396990 0.6771813 #>   [47,] 0.5959112 0.6165757 0.6287439 #>   [48,] 0.9606343 0.9854415 0.9948687 #>   [49,] 0.8332646 0.8421199 0.8648895 #>   [50,] 0.5382203 0.5541462 0.5900646 #>   [51,] 1.1818718 1.2004796 1.2203097 #>   [52,] 0.5667813 0.5801697 0.6082553 #>   [53,] 0.6292385 0.6436857 0.6487585 #>   [54,] 2.2018691 2.2296871 2.2394187 #>   [55,] 0.7680575 0.8063888 0.8145866 #>   [56,] 0.8917921 0.9033606 0.9242711 #>   [57,] 0.5937263 0.6042615 0.6107714 #>   [58,] 1.1091679 1.1383744 1.1407386 #>   [59,] 0.7499888 0.7563992 0.7659068 #>   [60,] 0.7463176 0.7514175 0.7826938 #>   [61,] 1.5555457 1.6247606 1.6619583 #>   [62,] 0.6939652 0.7081583 0.7690073 #>   [63,] 0.7386703 0.7532413 0.7535354 #>   [64,] 1.2914966 1.2927658 1.3141373 #>   [65,] 0.5391976 0.5695033 0.5719446 #>   [66,] 1.1234807 1.1749719 1.1817759 #>   [67,] 1.0386228 1.0666447 1.0767032 #>   [68,] 1.1865664 1.2029551 1.2173909 #>   [69,] 0.7867741 0.7901838 0.8018224 #>   [70,] 0.9151371 0.9168079 0.9184604 #>   [71,] 1.0255014 1.0312796 1.0595581 #>   [72,] 0.6361564 0.6499458 0.6558456 #>   [73,] 0.9273351 0.9442991 0.9745145 #>   [74,] 0.5448479 0.5863458 0.6316970 #>   [75,] 0.6303228 0.6394524 0.6400708 #>   [76,] 0.6636568 0.6809345 0.7548582 #>   [77,] 0.6832014 0.7139233 0.7258309 #>   [78,] 1.5762479 1.6025903 1.6287654 #>   [79,] 0.8032793 0.8144493 0.8294925 #>   [80,] 0.5784537 0.5907111 0.6234637 #>   [81,] 1.0661202 1.1196984 1.1554795 #>   [82,] 0.7075778 0.7319617 0.7660788 #>   [83,] 1.0019510 1.0465202 1.0852952 #>   [84,] 0.6812016 0.7222117 0.7778200 #>   [85,] 0.7976540 0.8369278 0.8929471 #>   [86,] 0.8975411 0.8982850 0.9456435 #>   [87,] 0.7360051 0.8180066 0.8188046 #>   [88,] 0.7867784 0.8155018 0.8186839 #>   [89,] 1.0727086 1.1121710 1.1152065 #>   [90,] 0.6615518 0.7096263 0.7393876 #>   [91,] 0.5520846 0.5948733 0.5978109 #>   [92,] 0.7724454 0.7774051 0.7896818 #>   [93,] 0.5942946 0.5982207 0.6014035 #>   [94,] 0.5131486 0.6294136 0.6380328 #>   [95,] 0.7753923 0.7983427 0.8164395 #>   [96,] 1.3119220 1.3473307 1.3474939 #>   [97,] 0.8905740 0.9184134 0.9238016 #>   [98,] 0.7947613 0.8024335 0.8301789 #>   [99,] 0.9367350 0.9402836 0.9586916 #>  [100,] 0.7330901 0.7623090 0.7816899 #>  [101,] 0.4725684 0.5064644 0.5475456 #>  [102,] 0.6377201 0.6504354 0.6857937 #>  [103,] 0.6186386 0.6323288 0.6453174 #>  [104,] 1.5739987 1.6166500 1.6270740 #>  [105,] 0.5316781 0.5645462 0.5929137 #>  [106,] 0.8405418 0.8469972 0.8668146 #>  [107,] 0.6211346 0.6405782 0.6516900 #>  [108,] 0.7509012 0.7797691 0.8057959 #>  [109,] 1.0396925 1.0599810 1.1332419 #>  [110,] 0.8966218 0.9158733 0.9450495 #>  [111,] 0.5041385 0.5209583 0.5420240 #>  [112,] 1.2532810 1.2625488 1.2718092 #>  [113,] 0.7928323 0.8265605 0.8475324 #>  [114,] 0.8575105 0.8846710 0.9706817 #>  [115,] 0.7347650 0.7359685 0.7500125 #>  [116,] 0.5631214 0.5939755 0.6006006 #>  [117,] 0.7809481 0.8132936 0.8159133 #>  [118,] 0.7743955 0.7989966 0.8361003 #>  [119,] 1.8621511 1.8720643 1.8782307 #>  [120,] 1.3068628 1.3277276 1.3309714 #>  [121,] 0.5391976 0.5877697 0.5924756 #>  [122,] 1.3543632 1.4322481 1.4842751 #>  [123,] 1.3339373 1.3894602 1.4258155 #>  [124,] 0.6089736 0.6290123 0.6499458 #>  [125,] 1.0799071 1.1367236 1.1418156 #>  [126,] 0.9962535 1.0095966 1.0571523 #>  [127,] 0.6621169 0.7048142 0.7129254 #>  [128,] 0.6221164 0.6231637 0.6291358 #>  [129,] 0.7040327 0.7472951 0.7596080 #>  [130,] 0.9077676 0.9117995 0.9771950 #>  [131,] 0.7523078 0.7563112 0.7626539 #>  [132,] 0.5799233 0.6065198 0.6403590 #>  [133,] 0.8700524 0.8724662 0.8745022 #>  [134,] 0.8427978 0.8780866 0.9328152 #>  [135,] 0.5036171 0.5244176 0.5356318 #>  [136,] 1.2877807 1.2915771 1.3103825 #>  [137,] 1.0948195 1.1418156 1.2264129 #>  [138,] 0.5901835 0.5989826 0.6060062 #>  [139,] 0.7311507 0.7555048 0.7847176 #>  [140,] 1.2189996 1.4120155 1.4791081 #>  [141,] 0.7116162 0.7446094 0.7539436 #>  [142,] 0.9805143 0.9824024 0.9850379 #>  [143,] 1.1358786 1.1738980 1.1934568 #>  [144,] 0.8403344 0.8521709 0.8851488 #>  [145,] 0.7116852 0.7192994 0.7240264 #>  [146,] 0.8622148 0.9372780 0.9825521 #>  [147,] 1.1509681 1.2136335 1.2274253 #>  [148,] 0.5502992 0.5796381 0.5991451 #>  [149,] 0.8265455 0.8874487 0.8977355 #>  [150,] 0.7317616 0.7328317 0.7409658 #>  [151,] 0.5605272 0.5749296 0.5947303 #>  [152,] 0.7285163 0.7287136 0.8021615 #>  [153,] 0.9624995 0.9824442 1.0315097 #>  [154,] 0.5833851 0.6018320 0.6064794 #>  [155,] 0.8260865 0.8409248 0.8602206 #>  [156,] 1.0262552 1.0398089 1.0499421 #>  [157,] 0.8522597 0.8562687 0.9168079 #>  [158,] 0.4422924 0.4515865 0.4527877 #>  [159,] 0.6799573 0.7173171 0.7469752 #>  [160,] 0.6217993 0.6296180 0.6334960 #>  [161,] 0.9074994 0.9091415 1.0234566 #>  [162,] 0.7284374 0.7311194 0.7743955 #>  [163,] 1.0459564 1.0949680 1.1216461 #>  [164,] 1.0048822 1.0246878 1.0704781 #>  [165,] 0.6139490 0.6140684 0.6172720 #>  [166,] 0.7798892 0.7819278 0.7880807 #>  [167,] 0.5631357 0.5744096 0.5893663 #>  [168,] 0.7275970 0.7348421 0.7693775 #>  [169,] 0.5219758 0.6420784 0.6554425 #>  [170,] 1.1207326 1.2775306 1.3053997 #>  [171,] 1.2563843 1.2683101 1.3106409 #>  [172,] 0.6219949 0.6256815 0.6473557 #>  [173,] 0.8212760 0.9226462 0.9674919 #>  [174,] 1.0163189 1.0312876 1.0355464 #>  [175,] 0.5004434 0.5017636 0.5085898 #>  [176,] 0.4685279 0.4838201 0.5146455 #>  [177,] 0.4897954 0.5225903 0.5266486 #>  [178,] 0.7050606 0.7063458 0.7834306 #>  [179,] 0.7348421 0.7713546 0.7873478 #>  [180,] 1.1547463 1.2297151 1.3436585 #>  [181,] 0.6978357 0.7044936 0.7517275 #>  [182,] 0.9969218 1.0491555 1.0966366 #>  [183,] 0.6662762 0.6761095 0.6769300 #>  [184,] 0.9869156 1.0852235 1.1119197 #>  [185,] 1.3508383 1.3559058 1.4272440 #>  [186,] 0.5923525 0.6491730 0.7083373 #>  [187,] 0.5161267 0.5655232 0.5675966 #>  [188,] 0.8191713 0.8260160 0.8341964 #>  [189,] 1.2020179 1.2106489 1.2285795 #>  [190,] 1.3504971 1.3892668 1.3965151 #>  [191,] 0.9262189 0.9542403 0.9726802 #>  [192,] 0.7346690 0.7468483 0.7634197 #>  [193,] 0.5459476 0.5466740 0.5711712 #>  [194,] 0.7009107 0.7025204 0.7214949 #>  [195,] 0.6949390 0.6983731 0.7063852 #>  [196,] 0.7437453 0.7465193 0.7510570 #>  [197,] 0.7354772 0.7548385 0.7602020 #>  [198,] 0.7337709 0.7643902 0.8119568 #>  [199,] 1.0237871 1.0312757 1.0533415 #>  [200,] 0.7268699 0.7837857 0.8993067 #>  [201,] 0.6575152 0.7236354 0.7405742 #>  [202,] 0.5324577 0.5347448 0.5576237 #>  [203,] 1.1017855 1.2166775 1.2299706 #>  [204,] 1.5450589 1.5813303 1.5977218 #>  [205,] 0.7129951 0.7752864 0.7939231 #>  [206,] 0.9956492 1.0057510 1.0354552 #>  [207,] 0.7782061 0.7907050 0.7948747 #>  [208,] 0.9142640 0.9169684 1.0002565 #>  [209,] 1.1443123 1.1519375 1.1596935 #>  [210,] 1.1102615 1.2249372 1.2316320 #>  [211,] 0.8045636 0.8304845 0.8632206 #>  [212,] 0.5826323 0.5872788 0.6093371 #>  [213,] 0.7517130 0.7837297 0.8125524 #>  [214,] 0.5238548 0.5312919 0.5434183 #>  [215,] 0.7920441 0.7991182 0.8008434 #>  [216,] 1.1389259 1.1470380 1.1472009 #>  [217,] 1.1371983 1.1909378 1.2053512 #>  [218,] 0.8825837 0.8858620 0.8909486 #>  [219,] 0.8370099 0.9105739 0.9135818 #>  [220,] 2.0837059 2.1355747 2.1607204 #>  [221,] 1.4746244 1.4970169 1.5517357 #>  [222,] 0.6051583 0.6110665 0.6313671 #>  [223,] 0.8954817 0.9008664 0.9103795 #>  [224,] 0.5332845 0.5420240 0.5647601 #>  [225,] 0.7033410 0.7142467 0.7168308 #>  [226,] 0.8745022 0.9150046 0.9303175 #>  [227,] 1.1669017 1.2512318 1.2586816 #>  [228,] 0.8529882 0.8897368 0.8974153 #>  [229,] 1.1154243 1.1708144 1.1794456 #>  [230,] 0.6678172 0.6976912 0.7131789 #>  [231,] 0.5828885 0.5833851 0.6000135 #>  [232,] 0.7637627 0.7903800 0.8095412 #>  [233,] 0.8496452 0.8515182 0.8636688 #>  [234,] 0.6908760 0.7027289 0.7199754 #>  [235,] 0.7537019 0.7711413 0.7857354 #>  [236,] 0.7338938 0.7816197 0.8262008 #>  [237,] 0.5944045 0.5990590 0.6146390 #>  [238,] 0.6784430 0.7169216 0.7634063 #>  [239,] 0.4988899 0.5481491 0.5580766 #>  [240,] 0.8493285 0.8626114 0.8639729 #>  [241,] 0.7026906 0.7079874 0.7432387 #>  [242,] 0.7829772 0.8136916 0.8227446 #>  [243,] 0.7711890 0.7793583 0.8165089 #>  [244,] 0.7188463 0.7770632 0.7953199 #>  [245,] 1.1810595 1.1830311 1.2821621 #>  [246,] 0.7093371 0.7170954 0.7324908 #>  [247,] 1.1422308 1.1491351 1.1595605 #>  [248,] 0.7227819 0.7384438 0.7455419 #>  [249,] 0.7870207 0.8075375 0.8379612 #>  [250,] 0.7274269 0.7304819 0.7343172 #>  [251,] 0.9109741 0.9119423 0.9298687 #>  [252,] 0.4840091 0.4934921 0.5306553 #>  [253,] 0.5662715 0.5854945 0.5886905 #>  [254,] 0.8714196 0.8931498 0.9596933 #>  [255,] 0.7275944 0.7336228 0.7364410 #>  [256,] 0.5788843 0.5934398 0.6011433 #>  [257,] 1.0929856 1.1354358 1.2004183 #>  [258,] 0.8193923 0.8225054 0.8714417 #>  [259,] 1.2951952 1.3245809 1.3574091 #>  [260,] 1.1036616 1.1439579 1.1775088 #>  [261,] 0.9805850 0.9870636 1.0042287 #>  [262,] 0.7703250 0.8066490 0.8295395 #>  [263,] 2.1993099 2.2007110 2.2107566 #>  [264,] 0.7742112 0.8105872 0.8258400 #>  [265,] 0.6563208 0.6642328 0.6678006 #>  [266,] 0.6905181 0.7058066 0.7345725 #>  [267,] 0.7019215 0.8099807 0.8142576 #>  [268,] 0.8694149 0.9026670 0.9036848 #>  [269,] 1.1248309 1.1295507 1.1591072 #>  [270,] 0.9639724 0.9666537 0.9762446 #>  [271,] 1.1477430 1.1541009 1.1815125 #>  [272,] 0.7895882 0.8288206 0.8663508 #>  [273,] 0.5510293 0.5752453 0.5920743 #>  [274,] 0.8164982 0.8315383 0.8323365 #>  [275,] 0.6664219 0.6703230 0.6971327 #>  [276,] 1.1784001 1.2560051 1.2705140 #>  [277,] 0.7386703 0.7607521 0.7610192 #>  [278,] 1.0329208 1.0472724 1.0720755 #>  [279,] 0.4767832 0.5224619 0.5406422 #>  [280,] 1.1206407 1.1333153 1.1888429 #>  [281,] 0.8576678 0.8829690 0.9224045 #>  [282,] 0.6455925 0.6462566 0.6623421 #>  [283,] 1.1283653 1.1469545 1.1684290 #>  [284,] 0.9063504 0.9573649 0.9677501 #>  [285,] 0.7232652 0.7255078 0.7324186 #>  [286,] 0.9000625 0.9135110 0.9165332 #>  [287,] 0.5475870 0.5631357 0.5732453 #>  [288,] 1.1566587 1.1652865 1.2308091 #>  [289,] 1.1277928 1.2521031 1.2629211 #>  [290,] 1.0087971 1.0154646 1.0176597 #>  [291,] 1.8359165 1.9468671 2.0101478 #>  [292,] 0.9671383 0.9856851 1.0000420 #>  [293,] 0.5119588 0.5469985 0.5497802 #>  [294,] 0.7912593 0.8132554 0.8157666 #>  [295,] 1.1851775 1.2015221 1.2176158 #>  [296,] 0.7109434 0.7110118 0.7152293 #>  [297,] 1.3636343 1.3690200 1.3784277 #>  [298,] 0.8712917 0.8781351 0.8867688 #>  [299,] 0.7257239 0.7338938 0.7512929 #>  [300,] 0.5569414 0.5869031 0.5892755 #>  [301,] 0.9742540 0.9746361 1.0085787 #>  [302,] 0.5734895 0.6263520 0.6836998 #>  [303,] 0.6484780 0.7041823 0.7354772 #>  [304,] 0.6264115 0.6742423 0.6841329 #>  [305,] 0.7622950 0.7781405 0.7801278 #>  [306,] 0.9352797 0.9365133 0.9631684 #>  [307,] 0.6382716 0.6614889 0.6822434 #>  [308,] 0.7498710 0.8007797 0.8043827 #>  [309,] 0.7163502 0.7563859 0.7988196 #>  [310,] 0.5120440 0.5388757 0.5465140 #>  [311,] 0.7980665 0.8344477 0.8616578 #>  [312,] 0.6330571 0.6473391 0.6534298 #>  [313,] 0.6939484 0.7011344 0.7091693 #>  [314,] 0.7657226 0.7705780 0.7902110 #>  [315,] 0.6191327 0.6332478 0.6341900 #>  [316,] 1.6214330 1.6336426 1.6381509 #>  [317,] 0.7224336 0.7301040 0.7533895 #>  [318,] 0.5979595 0.6267668 0.6784398 #>  [319,] 0.6619499 0.6793158 0.7152293 #>  [320,] 0.6932758 0.6964684 0.6988993 #>  [321,] 0.8373939 0.8865080 0.9039148 #>  [322,] 0.7463988 0.7842083 0.9270532 #>  [323,] 0.6754606 0.7330901 0.7634063 #>  [324,] 1.3016986 1.3043747 1.3153947 #>  [325,] 0.9214054 0.9478499 0.9723732 #>  [326,] 0.6580117 0.6622683 0.6808597 #>  [327,] 0.9021442 0.9237264 0.9311410 #>  [328,] 1.3350614 1.3526752 1.3606111 #>  [329,] 0.6132182 0.6355249 0.6363459 #>  [330,] 0.7749019 0.7853716 0.7855818 #>  [331,] 0.8782510 0.9330121 0.9613462 #>  [332,] 0.9888812 0.9987758 1.0513220 #>  [333,] 0.8453914 0.8479237 0.8750859 #>  [334,] 0.5009616 0.5546315 0.5645624 #>  [335,] 0.6211346 0.6455615 0.7332088 #>  [336,] 0.6603680 0.7067479 0.7142905 #>  [337,] 1.1847567 1.2385827 1.2779932 #>  [338,] 0.9102882 0.9493329 0.9502234 #>  [339,] 1.3828238 1.4511361 1.4906697 #>  [340,] 0.7942927 0.8285187 0.8295395 #>  [341,] 0.8189771 0.8343526 0.8574474 #>  [342,] 0.7409761 0.7678326 0.7681634 #>  [343,] 0.7019215 0.7111578 0.7394663 #>  [344,] 0.5086029 0.5196727 0.5438505 #>  [345,] 0.5532094 0.5752964 0.5878128 #>  [346,] 1.1003326 1.1299268 1.1662595 #>  [347,] 0.9308437 0.9326901 0.9800089 #>  [348,] 1.3004426 1.3172444 1.3243286 #>  [349,] 0.4372508 0.4538657 0.4555924 #>  [350,] 0.6372406 0.6444759 0.6506684 #>  [351,] 0.8299114 0.8375593 0.8595735 #>  [352,] 0.9111564 0.9559116 1.0286930 #>  [353,] 1.7346419 1.7447974 1.8019883 #>  [354,] 0.7230334 0.7804979 0.7881493 #>  [355,] 0.9645676 0.9844431 0.9981445 #>  [356,] 0.5538488 0.5602936 0.6111892 #>  [357,] 1.2313918 1.2709602 1.2943518 #>  [358,] 0.6706033 0.6708804 0.6770270 #>  [359,] 0.8380465 0.8405444 0.8451886 #>  [360,] 0.5376948 0.5835258 0.5887747 #>  [361,] 0.6956501 0.7075731 0.7172680 #>  [362,] 0.5585983 0.5598585 0.5960996 #>  [363,] 0.8763586 0.8850837 0.9982041 #>  [364,] 0.6970998 0.7319617 0.7332810 #>  [365,] 0.4537683 0.4714970 0.4892956 #>  [366,] 0.5483217 0.5834059 0.6026177 #>  [367,] 1.1615610 1.2015661 1.2986707 #>  [368,] 2.1087028 2.1831179 2.2295702 #>  [369,] 0.6473557 0.6698416 0.6881345 #>  [370,] 0.6187476 0.6323020 0.6379176 #>  [371,] 0.6364726 0.6533808 0.6554923 #>  [372,] 0.6210677 0.6419681 0.6461156 #>  [373,] 1.6005675 1.6841608 1.7169447 #>  [374,] 0.6895656 0.7157962 0.7346699 #>  [375,] 0.6932951 0.7146508 0.7616009 #>  [376,] 0.6301136 0.6351550 0.6440516 #>  [377,] 0.7163805 0.7493418 0.7575437 #>  [378,] 0.7643902 0.7740556 0.7941319 #>  [379,] 0.4803468 0.5808069 0.5818642 #>  [380,] 2.1272616 2.1278419 2.1565533 #>  [381,] 0.8690468 0.8843160 0.8958195 #>  [382,] 0.5974133 0.6366430 0.6435883 #>  [383,] 1.0738880 1.1306671 1.1485115 #>  [384,] 0.6082553 0.6323859 0.6368778 #>  [385,] 0.6599148 0.6627264 0.7286429 #>  [386,] 0.5162624 0.5196727 0.5437261 #>  [387,] 0.9125994 0.9492067 0.9505563 #>  [388,] 1.1797425 1.1916131 1.1933586 #>  [389,] 0.9773839 0.9997486 1.0003609 #>  [390,] 0.7446094 0.7457578 0.7553842 #>  [391,] 0.9217614 0.9519162 0.9844611 #>  [392,] 0.6086624 0.6397516 0.6496164 #>  [393,] 0.8093252 0.8283689 0.8313313 #>  [394,] 0.8480174 0.8614801 0.8746955 #>  [395,] 0.7453061 0.7657226 0.8049669 #>  [396,] 1.1375557 1.1425909 1.1780912 #>  [397,] 0.8578046 0.8603896 0.8756191 #>  [398,] 0.6793158 0.6985109 0.6989684 #>  [399,] 0.7732824 0.7862390 0.8021759 #>  [400,] 0.9407462 0.9573649 0.9591814 #>  [401,] 1.1017541 1.1133754 1.2110430 #>  [402,] 0.7647870 0.7882780 0.8064002 #>  [403,] 0.7835348 0.7851902 0.8033041 #>  [404,] 0.8446850 0.8767686 0.8776702 #>  [405,] 0.8014984 0.8656743 0.8742884 #>  [406,] 0.9117642 0.9553614 0.9589899 #>  [407,] 0.6044235 0.6069867 0.6168777 #>  [408,] 0.7093371 0.7275514 0.7346690 #>  [409,] 0.5166339 0.5812455 0.5828276 #>  [410,] 0.5729260 0.5986328 0.6064038 #>  [411,] 0.6959762 0.7071255 0.7517109 #>  [412,] 0.7193596 0.7284487 0.7359332 #>  [413,] 0.9217381 0.9295522 0.9385807 #>  [414,] 0.6021585 0.6038861 0.6351641 #>  [415,] 0.9020972 0.9080171 0.9088878 #>  [416,] 0.5969951 0.6086547 0.6157922 #>  [417,] 1.1168240 1.1696239 1.2142004 #>  [418,] 0.9993669 1.0486707 1.0498278 #>  [419,] 0.6447341 0.6506684 0.6599148 #>  [420,] 0.7329260 0.7381499 0.7459035 #>  [421,] 0.6299886 0.6840485 0.7038665 #>  [422,] 0.9025165 1.0085719 1.0105388 #>  [423,] 1.5257339 1.5317460 1.5790175 #>  [424,] 0.7028606 0.7180288 0.7248968 #>  [425,] 1.0666088 1.1019115 1.1373789 #>  [426,] 1.4814504 1.5025754 1.5196197 #>  [427,] 1.5009814 1.5364701 1.5873032 #>  [428,] 0.5678965 0.5712959 0.6022492 #>  [429,] 1.0954756 1.1079130 1.1201307 #>  [430,] 0.5052709 0.5070883 0.5196773 #>  [431,] 0.9692599 0.9888777 1.0781163 #>  [432,] 0.9220079 1.0306785 1.1045139 #>  [433,] 0.8717659 0.8750611 0.8938344 #>  [434,] 0.5171921 0.5261735 0.5296197 #>  [435,] 0.8607973 0.8674263 0.9223368 #>  [436,] 0.6535798 0.7071979 0.7146291 #>  [437,] 1.7301936 1.8433123 1.8700198 #>  [438,] 1.1407372 1.1605379 1.1685814 #>  [439,] 0.7477239 0.7721309 0.7838893 #>  [440,] 0.7124895 0.7174343 0.7249235 #>  [441,] 0.9079755 0.9590791 0.9719815 #>  [442,] 1.0011878 1.0581721 1.0630721 #>  [443,] 0.9061634 0.9107755 0.9485065 #>  [444,] 0.5582636 0.5774324 0.5788843 #>  [445,] 0.6979548 0.7010881 0.7030094 #>  [446,] 1.4700034 1.4773049 1.4785838 #>  [447,] 1.0367883 1.0492980 1.1457896 #>  [448,] 1.0622586 1.0992231 1.1097365 #>  [449,] 1.1834294 1.2503182 1.2730118 #>  [450,] 0.8187957 0.8623991 0.8630077 #>  [451,] 1.0303583 1.0972382 1.1101641 #>  [452,] 0.7009574 0.7279022 0.7394363 #>  [453,] 0.9121095 0.9298961 0.9576833 #>  [454,] 0.5991451 0.6003301 0.6039347 #>  [455,] 0.7936706 0.7961145 0.8157535 #>  [456,] 0.4325840 0.5407526 0.6005805 #>  [457,] 0.8078919 0.8261597 0.8279084 #>  [458,] 0.6711596 0.7992449 0.8065012 #>  [459,] 0.5498468 0.5647631 0.5784103 #>  [460,] 0.6354009 0.6415395 0.6764613 #>  [461,] 0.5707075 0.6603680 0.6701880 #>  [462,] 0.8725691 0.8915634 0.9144785 #>  [463,] 0.5782096 0.5942946 0.6403590 #>  [464,] 1.2537471 1.2880344 1.2889697 #>  [465,] 0.7574779 0.7899514 0.7959594 #>  [466,] 0.9857033 1.0050186 1.0093239 #>  [467,] 0.8427322 0.8507311 0.8634859 #>  [468,] 0.5210235 0.5396087 0.5796432 #>  [469,] 0.8562687 0.8635426 0.8760143 #>  [470,] 1.0669006 1.1857552 1.2229703 #>  [471,] 0.5251383 0.5457542 0.5497802 #>  [472,] 1.3304083 1.3427001 1.3468125 #>  [473,] 0.7337338 0.7822590 0.8128734 #>  [474,] 0.6129219 0.6182860 0.6379792 #>  [475,] 0.7562910 0.7566706 0.7952038 #>  [476,] 0.5316781 0.5647059 0.5812709 #>  [477,] 0.9121095 0.9257921 0.9462010 #>  [478,] 0.7599748 0.8021673 0.8332855 #>  [479,] 0.8127675 0.8139305 0.8265416 #>  [480,] 1.5142343 1.5387635 1.5545622 #>  [481,] 0.5929137 0.6548179 0.6786311 #>  [482,] 0.6725122 0.6794634 0.6808738 #>  [483,] 0.5481491 0.5537570 0.5792655 #>  [484,] 0.8019406 0.8817395 0.8949158 #>  [485,] 0.5064871 0.5298393 0.5384105 #>  [486,] 0.5635194 0.6393196 0.6469762 #>  [487,] 0.7637627 0.7713546 0.7877470 #>  [488,] 0.4922367 0.5060195 0.5235760 #>  [489,] 0.5444483 0.5812802 0.5813301 #>  [490,] 0.8498260 0.8640813 0.8981515 #>  [491,] 1.0688868 1.0768503 1.1183620 #>  [492,] 0.8460117 0.8461942 0.8499530 #>  [493,] 0.8747953 0.9105336 0.9140134 #>  [494,] 0.9099569 0.9326464 0.9852696 #>  [495,] 1.3853818 1.4134781 1.4356219 #>  [496,] 1.5133153 1.6387281 1.6442149 #>  [497,] 1.3819045 1.4108729 1.4614787 #>  [498,] 0.5646436 0.6268877 0.6534849 #>  [499,] 0.8219524 0.8307839 0.8424930 #>  [500,] 0.9928704 0.9967032 1.0123011 #>  [501,] 1.0859794 1.1162218 1.1216461 #>  [502,] 0.5391653 0.5408806 0.5653870 #>  [503,] 0.5657115 0.6100032 0.6159350 #>  [504,] 0.8440369 0.8527711 0.8556652 #>  [505,] 1.4506192 1.4632005 1.4691057 #>  [506,] 0.5900646 0.6034221 0.6071781 #>  [507,] 2.3019450 2.3423070 2.3736490 #>  [508,] 0.5306704 0.5355980 0.5406166 #>  [509,] 0.9425582 0.9578563 0.9651218 #>  [510,] 0.5058240 0.5364276 0.5380718 #>  [511,] 0.7472003 0.7543516 0.8275537 #>  [512,] 0.7341883 0.7438778 0.7477201 #>  [513,] 0.6963896 0.7324186 0.7696721 #>  [514,] 1.1101998 1.1437996 1.1539633 #>  [515,] 0.9053484 0.9091415 0.9267964 #>  [516,] 0.7868371 0.7895882 0.7917703 #>  [517,] 0.8286492 0.8294296 0.8948737 #>  [518,] 0.7582796 0.7718212 0.7794460 #>  [519,] 0.9926578 0.9993468 1.0083236 #>  [520,] 0.7910674 0.8086275 0.8149729 #>  [521,] 0.7764505 0.7932998 0.8784547 #>  [522,] 0.6484272 0.6559263 0.6682095 #>  [523,] 1.7780989 1.7853325 1.8071558 #>  [524,] 0.6250865 0.6532045 0.7161179 #>  [525,] 1.0218559 1.0547852 1.0617902 #>  [526,] 0.8023227 0.8610759 0.8861253 #>  [527,] 0.9221004 0.9381688 0.9383106 #>  [528,] 0.9589252 0.9724700 0.9863246 #>  [529,] 0.7312481 0.7368605 0.7412206 #>  [530,] 0.5732453 0.6271832 0.6379137 #>  [531,] 0.7847656 0.8198959 0.8996429 #>  [532,] 0.9380358 0.9438881 0.9832797 #>  [533,] 0.7719512 0.7737067 0.7776884 #>  [534,] 0.6833733 0.7356873 0.7377510 #>  [535,] 0.7489910 0.7520786 0.7628416 #>  [536,] 0.6625919 0.6683551 0.6716722 #>  [537,] 1.0937650 1.1256021 1.1406648 #>  [538,] 0.5879453 0.6064624 0.6510205 #>  [539,] 1.0589084 1.1107672 1.1121710 #>  [540,] 1.2188148 1.2614257 1.2778315 #>  [541,] 0.8431150 0.9124909 0.9830275 #>  [542,] 1.4467507 1.4480097 1.4872043 #>  [543,] 0.6772398 0.6808597 0.6824195 #>  [544,] 1.1265151 1.1386808 1.1789038 #>  [545,] 1.2041357 1.2948771 1.2950358 #>  [546,] 0.9166889 0.9397434 0.9841491 #>  [547,] 1.0890957 1.1053850 1.1087128 #>  [548,] 0.5975887 0.6125040 0.6543495 #>  [549,] 0.8595303 0.8698411 0.8846168 #>  [550,] 0.5901146 0.6348907 0.6538622 #>  [551,] 0.4541245 0.4734157 0.4792013 #>  [552,] 0.6693627 0.6739440 0.6802370 #>  [553,] 0.5477303 0.5585386 0.6080045 #>  [554,] 0.8192942 0.8716156 0.8889794 #>  [555,] 0.5581420 0.5697194 0.6078514 #>  [556,] 0.5244176 0.5327842 0.5716338 #>  [557,] 1.7904081 1.8081551 1.8331315 #>  [558,] 0.6972086 0.7360820 0.7397684 #>  [559,] 0.5667813 0.5680844 0.5749296 #>  [560,] 0.7520204 0.7543516 0.7700922 #>  [561,] 0.5424743 0.5792537 0.6466267 #>  [562,] 0.7334717 0.8130102 0.8226384 #>  [563,] 1.1414824 1.2312689 1.2362145 #>  [564,] 0.7249235 0.7450219 0.7893502 #>  [565,] 0.9297400 0.9563153 0.9734788 #>  [566,] 0.7188463 0.7628624 0.7937940 #>  [567,] 0.5027612 0.5043626 0.5774324 #>  [568,] 0.8132182 0.8207177 0.8221583 #>  [569,] 0.6410044 0.6504989 0.6527551 #>  [570,] 0.8099950 0.8778067 0.9273351 #>  [571,] 0.5469235 0.5562351 0.5596539 #>  [572,] 0.7551619 0.8032415 0.8165089 #>  [573,] 1.0272164 1.0610627 1.1367236 #>  [574,] 0.6034221 0.6499027 0.6640514 #>  [575,] 0.5959218 0.6161361 0.6313671 #>  [576,] 0.7309714 0.7774051 0.7911653 #>  [577,] 0.6666823 0.6750526 0.6830452 #>  [578,] 0.5750183 0.5915632 0.6032922 #>  [579,] 1.1219727 1.1526255 1.1686294 #>  [580,] 0.5766523 0.5981681 0.6552806 #>  [581,] 0.7680339 0.7810103 0.8106460 #>  [582,] 0.7791434 0.7825755 0.8111723 #>  [583,] 0.7718992 0.7731921 0.7907053 #>  [584,] 0.6492886 0.6603952 0.6684770 #>  [585,] 1.1635072 1.2177540 1.2481536 #>  [586,] 0.7263023 0.8128024 0.8320023 #>  [587,] 0.8574474 0.9101863 0.9369507 #>  [588,] 0.6307449 0.6337297 0.6382716 #>  [589,] 0.9335299 0.9688907 0.9743330 #>  [590,] 0.8934383 0.9099637 0.9196703 #>  [591,] 1.0306785 1.0321484 1.1098559 #>  [592,] 0.5283201 0.5380718 0.5749143 #>  [593,] 0.6534298 0.6726522 0.6769122 #>  [594,] 0.5295210 0.5299167 0.5387529 #>  [595,] 0.7693775 0.7910674 0.8143954 #>  [596,] 0.7580115 0.7659849 0.7714064 #>  [597,] 0.5923525 0.6038459 0.6064624 #>  [598,] 0.5132653 0.5261735 0.5267645 #>  [599,] 0.6922767 0.6951448 0.7324288 #>  [600,] 0.6455147 0.6561144 0.6597966 #>  [601,] 0.8770605 0.8941829 0.9876686 #>  [602,] 1.2993830 1.3105498 1.3269329 #>  [603,] 1.1064261 1.2648038 1.2891037 #>  [604,] 0.7737794 0.7924554 0.7955186 #>  [605,] 0.7109290 0.7149125 0.7309714 #>  [606,] 0.7044936 0.7146763 0.7246447 #>  [607,] 0.8174458 0.8265497 0.8283689 #>  [608,] 0.8143954 0.8158649 0.8294925 #>  [609,] 1.0489858 1.1137955 1.2008495 #>  [610,] 1.0032508 1.0056002 1.0118300 #>  [611,] 0.5169493 0.5214630 0.5288020 #>  [612,] 0.5304794 0.5384289 0.5429400 #>  [613,] 0.7263827 0.7382238 0.8059965 #>  [614,] 0.6237194 0.6269903 0.6460637 #>  [615,] 0.6165757 0.6529585 0.6560228 #>  [616,] 0.4385274 0.4504794 0.4513995 #>  [617,] 0.6644566 0.6794235 0.6812332 #>  [618,] 0.6691162 0.6945389 0.6988489 #>  [619,] 0.5681713 0.5727362 0.5901835 #>  [620,] 0.7561912 0.7635031 0.7726102 #>  [621,] 0.6720937 0.7669192 0.8454886 #>  [622,] 1.0116622 1.0481919 1.0911476 #>  [623,] 0.5532094 0.5580967 0.5987923 #>  [624,] 0.6529585 0.6956501 0.7490367 #>  [625,] 0.8633895 0.8662389 0.8719505 #>  [626,] 0.7732824 0.8047381 0.8279077 #>  [627,] 1.0505442 1.0590223 1.1243998 #>  [628,] 1.0736302 1.1115540 1.1337011 #>  [629,] 0.8638439 0.8779628 0.8996149 #>  [630,] 1.4262881 1.4534739 1.4786515 #>  [631,] 0.5632448 0.5907111 0.6044081 #>  [632,] 1.3189758 1.3350563 1.3645237 #>  [633,] 0.5529526 0.6184910 0.6425980 #>  [634,] 1.3349830 1.4025821 1.4050027 #>  [635,] 1.2821119 1.2920998 1.3121945 #>  [636,] 1.5949255 1.6128663 1.6182045 #>  [637,] 0.4855326 0.4908540 0.5392230 #>  [638,] 0.8055629 0.8058850 0.8549181 #>  [639,] 1.5655639 1.5702338 1.5760876 #>  [640,] 1.8825910 1.9826209 2.0266839 #>  [641,] 0.5788986 0.5990590 0.6003501 #>  [642,] 0.6417840 0.6683897 0.6725789 #>  [643,] 0.6478288 0.6869581 0.7013955 #>  [644,] 1.2130907 1.2278519 1.2285008 #>  [645,] 0.6428627 0.6441382 0.6484780 #>  [646,] 0.5721468 0.6059156 0.7276818 #>  [647,] 0.6489805 0.6522620 0.6813204 #>  [648,] 0.6985109 0.7075047 0.7213851 #>  [649,] 1.0682437 1.1008078 1.1137491 #>  [650,] 1.2717392 1.3069852 1.3379701 #>  [651,] 0.5544224 0.7049413 0.7258273 #>  [652,] 0.8862421 0.9087173 0.9676636 #>  [653,] 0.9151371 0.9186316 0.9220079 #>  [654,] 0.6153223 0.6226022 0.6568106 #>  [655,] 0.7068868 0.7608841 0.7960185 #>  [656,] 0.6909383 0.7103642 0.7129823 #>  [657,] 0.7071022 0.7481409 0.7623921 #>  [658,] 1.0814359 1.1886049 1.1897497 #>  [659,] 0.8917921 0.8935359 0.9023596 #>  [660,] 0.4540692 0.4790495 0.5502992 #>  [661,] 0.9912482 0.9995837 1.0164350 #>  [662,] 0.5871803 0.5934398 0.6026177 #>  [663,] 0.5650481 0.5940756 0.6171024 #>  [664,] 0.8678382 0.9090684 0.9296628 #>  [665,] 0.6051508 0.6062640 0.6327164 #>  [666,] 0.5966024 0.6038861 0.6487300 #>  [667,] 0.6626468 0.6990648 0.7500125 #>  [668,] 0.9058932 0.9295131 0.9297466 #>  [669,] 1.0678454 1.0731714 1.0901202 #>  [670,] 0.8994359 0.9065585 0.9120651 #>  [671,] 0.6622446 0.7220344 0.7254485 #>  [672,] 1.4968686 1.5217633 1.5282730 #>  [673,] 0.6709907 0.6814873 0.7173171 #>  [674,] 1.4275383 1.4317773 1.4431881 #>  [675,] 1.1069240 1.1262191 1.1424633 #>  [676,] 1.2723366 1.2996945 1.3015384 #>  [677,] 0.9567925 0.9856585 1.0009396 #>  [678,] 0.5693230 0.5839245 0.6129432 #>  [679,] 0.6468822 0.6674445 0.6779292 #>  [680,] 0.9104815 0.9117995 0.9240226 #>  [681,] 0.7759195 0.7819222 0.8024632 #>  [682,] 0.5247686 0.5347010 0.5473943 #>  [683,] 1.0093148 1.0098182 1.0114536 #>  [684,] 1.0133150 1.0458231 1.0568564 #>  [685,] 1.0365774 1.0484353 1.2407562 #>  [686,] 0.9629357 0.9774040 0.9856585 #>  [687,] 2.1105824 2.1701799 2.1891477 #>  [688,] 0.7221163 0.7757531 0.8329800 #>  [689,] 0.7821339 0.8031007 0.8569113 #>  [690,] 0.6349548 0.6349991 0.6530693 #>  [691,] 0.9383848 0.9462008 0.9699823 #>  [692,] 0.7883669 0.7946738 0.7976540 #>  [693,] 0.8694054 0.9301835 0.9370142 #>  [694,] 0.5964198 0.6444054 0.6461156 #>  [695,] 1.5769313 1.6353177 1.6494164 #>  [696,] 0.9084235 0.9982850 1.0048404 #>  [697,] 0.9064128 0.9127152 0.9405880 #>  [698,] 0.5467263 0.5983311 0.6373784 #>  [699,] 1.0032508 1.0459564 1.0721829 #>  [700,] 1.4241088 1.4405298 1.4506751 #>  [701,] 0.8361003 0.8576384 0.8677421 #>  [702,] 0.7014788 0.7085249 0.7268444 #>  [703,] 0.8092905 0.8155018 0.8434653 #>  [704,] 0.6279904 0.6377572 0.6444759 #>  [705,] 0.5543523 0.5546315 0.5576727 #>  [706,] 0.9884961 0.9999955 1.0090156 #>  [707,] 1.8464853 1.8605742 1.8953173 #>  [708,] 0.7296950 0.7719461 0.7796069 #>  [709,] 0.5675657 0.5788397 0.5920743 #>  [710,] 0.5002294 0.5071658 0.5172081 #>  [711,] 0.5635139 0.5662715 0.5850885 #>  [712,] 0.5552094 0.5782193 0.5859562 #>  [713,] 0.6287204 0.6394524 0.6483098 #>  [714,] 0.5625678 0.6083381 0.6684068 #>  [715,] 0.5530976 0.5803604 0.5970211 #>  [716,] 1.0407664 1.0583842 1.0983261 #>  [717,] 0.6626468 0.6976912 0.7129951 #>  [718,] 0.7956178 0.7964829 0.8073302 #>  [719,] 0.4748555 0.4850264 0.5309507 #>  [720,] 0.9622591 0.9634676 0.9642177 #>  [721,] 0.8730366 0.8777171 0.9015108 #>  [722,] 1.3377737 1.3553161 1.3731564 #>  [723,] 0.9330946 0.9602259 1.0532609 #>  [724,] 1.0727279 1.1034759 1.1368645 #>  [725,] 0.5328225 0.5642075 0.6101225 #>  [726,] 0.5844198 0.5975819 0.6513323 #>  [727,] 0.5307184 0.5692379 0.5696341 #>  [728,] 0.6942964 0.6973177 0.7023698 #>  [729,] 0.6227225 0.6530494 0.6729041 #>  [730,] 1.6529668 1.6928532 1.7111522 #>  [731,] 0.9160888 0.9561111 0.9755792 #>  [732,] 0.7801278 0.7884250 0.8028205 #>  [733,] 0.6199702 0.6331340 0.6775544 #>  [734,] 0.7202403 0.7277280 0.7314729 #>  [735,] 0.5383934 0.5790121 0.6169549 #>  [736,] 0.7442539 0.7443192 0.7606023 #>  [737,] 0.6491597 0.6698388 0.7086128 #>  [738,] 0.5155080 0.5361314 0.5465126 #>  [739,] 0.5940881 0.5987556 0.6043981 #>  [740,] 0.5002294 0.5023013 0.5102206 #>  [741,] 0.9251849 0.9463437 0.9682611 #>  [742,] 0.6064591 0.6106184 0.6298733 #>  [743,] 0.5071658 0.5425313 0.5434671 #>  [744,] 0.7090677 0.7762345 0.8074315 #>  [745,] 0.6367938 0.6504989 0.6585893 #>  [746,] 0.4536507 0.4636577 0.4773995 #>  [747,] 0.6927268 0.7397859 0.7414767 #>  [748,] 0.7329395 0.7332088 0.7373579 #>  [749,] 1.0069196 1.0615129 1.0825170 #>  [750,] 0.7724454 0.7818305 0.8056107 #>  [751,] 1.0353217 1.0670387 1.0752270 #>  [752,] 0.5338385 0.5971100 0.6062427 #>  [753,] 0.8429576 0.8431249 0.8447506 #>  [754,] 0.5767828 0.5951965 0.6510893 #>  [755,] 0.6780396 0.6923225 0.7200304 #>  [756,] 0.8215070 0.8498453 0.8580209 #>  [757,] 0.5796431 0.6913840 0.7169216 #>  [758,] 0.6160945 0.6200564 0.6945389 #>  [759,] 0.6859119 0.7071022 0.7191327 #>  [760,] 0.6720321 0.6761095 0.7045545 #>  [761,] 0.4804533 0.5244595 0.5547224 #>  [762,] 0.4889434 0.5185900 0.5288106 #>  [763,] 0.4874825 0.4993264 0.5078154 #>  [764,] 0.5304794 0.5885039 0.6261126 #>  [765,] 0.6101998 0.6200840 0.6379137 #>  [766,] 0.9788399 0.9982041 1.0483968 #>  [767,] 0.7816226 0.7826938 0.8041186 #>  [768,] 0.5415294 0.6194157 0.7206876 #>  [769,] 0.9181988 0.9348895 0.9368299 #>  [770,] 0.8736101 0.9986207 1.0121563 #>  [771,] 0.8936482 0.9047407 0.9578563 #>  [772,] 0.8700247 0.8968694 0.9270532 #>  [773,] 0.8147793 0.8268695 0.8299591 #>  [774,] 0.7822477 0.8354840 0.8596740 #>  [775,] 0.9856851 1.0119322 1.0619146 #>  [776,] 0.9745145 1.1675621 1.1683455 #>  [777,] 1.0220018 1.0315773 1.0448089 #>  [778,] 0.6383382 0.6410044 0.6730649 #>  [779,] 1.2571565 1.2664766 1.3040046 #>  [780,] 0.6116404 0.6880632 0.7052927 #>  [781,] 0.5710777 0.5784103 0.6032208 #>  [782,] 1.0089438 1.0485255 1.1123315 #>  [783,] 1.3544911 1.4405700 1.4986926 #>  [784,] 0.8658651 0.9040816 0.9172526 #>  [785,] 0.5267645 0.5666711 0.5771851 #>  [786,] 0.6512642 0.6552806 0.6592641 #>  [787,] 0.6716935 0.6871991 0.7352622 #>  [788,] 0.8277904 0.8536113 0.8617290 #>  [789,] 0.7892420 0.7992461 0.8024194 #>  [790,] 1.0973492 1.1114646 1.1171132 #>  [791,] 0.7947472 0.8431508 0.8459739 #>  [792,] 0.6555783 0.6865142 0.6924523 #>  [793,] 1.1227207 1.1284466 1.1318875 #>  [794,] 0.9562041 1.0271614 1.0771332 #>  [795,] 1.3296200 1.3584501 1.3694027 #>  [796,] 0.6608218 0.6633634 0.7222117 #>  [797,] 0.9850837 1.0423925 1.0942953 #>  [798,] 0.7399288 0.7539436 0.7660086 #>  [799,] 0.7673105 0.7876729 0.7965710 #>  [800,] 0.5721455 0.5775582 0.6045350 #>  [801,] 0.7945735 0.8487291 0.8511070 #>  [802,] 1.0645861 1.0660551 1.0721674 #>  [803,] 0.9123483 0.9551505 0.9852696 #>  [804,] 0.5975819 0.6199342 0.6460711 #>  [805,] 0.7343172 0.7558668 0.7580611 #>  [806,] 0.9479888 0.9487577 0.9610279 #>  [807,] 0.8725975 0.8855653 0.8899707 #>  [808,] 0.7941319 0.7942158 0.7988196 #>  [809,] 0.6263679 0.6720119 0.6761172 #>  [810,] 0.9580602 0.9835731 1.0235714 #>  [811,] 0.6489522 0.6614990 0.6634902 #>  [812,] 0.7952729 0.8134143 0.8260250 #>  [813,] 0.6958096 0.7155295 0.7472003 #>  [814,] 0.6147323 0.6263520 0.6333752 #>  [815,] 0.9587876 0.9873885 0.9982490 #>  [816,] 1.3074373 1.3172444 1.3223272 #>  [817,] 0.8983097 0.9085109 1.0312796 #>  [818,] 1.1284679 1.2472735 1.2967503 #>  [819,] 0.7392114 0.7429170 0.7559926 #>  [820,] 0.8240873 0.8494677 0.8540121 #>  [821,] 1.4460382 1.4719506 1.4747903 #>  [822,] 2.2041622 2.2061330 2.2221648 #>  [823,] 0.5979853 0.6021585 0.6469986 #>  [824,] 0.6519167 0.6577015 0.6944682 #>  [825,] 1.0506560 1.0630721 1.0810558 #>  [826,] 0.9495484 0.9538924 0.9677518 #>  [827,] 1.0424781 1.1093353 1.1158635 #>  [828,] 1.2182831 1.2265412 1.3309406 #>  [829,] 0.7168308 0.7207784 0.7299513 #>  [830,] 0.7197234 0.7730868 0.7767794 #>  [831,] 0.5231996 0.6094482 0.6734714 #>  [832,] 0.4930362 0.5023013 0.5120440 #>  [833,] 0.5398277 0.5434671 0.5743356 #>  [834,] 0.7690240 0.8267764 0.8342965 #>  [835,] 0.6360920 0.6396990 0.6488583 #>  [836,] 2.0025350 2.0412004 2.0489574 #>  [837,] 0.4993264 0.5166668 0.5490291 #>  [838,] 0.6812764 0.6907344 0.7544779 #>  [839,] 0.7981270 0.8177713 0.8184688 #>  [840,] 1.1155845 1.1501298 1.1680614 #>  [841,] 1.1618658 1.2051016 1.2052657 #>  [842,] 0.6398185 0.6463148 0.6484616 #>  [843,] 1.4255721 1.4278171 1.4371290 #>  [844,] 0.9700299 0.9835731 1.0134585 #>  [845,] 0.5940502 0.6313565 0.6373879 #>  [846,] 0.7195599 0.7226294 0.7714064 #>  [847,] 1.2645865 1.3226874 1.3797432 #>  [848,] 0.6842002 0.7042815 0.7096904 #>  [849,] 1.1929079 1.2926183 1.3471625 #>  [850,] 0.8003568 0.8072567 0.8281784 #>  [851,] 0.4953586 0.5057390 0.5077764 #>  [852,] 0.7620378 0.7628121 0.7721961 #>  [853,] 1.1060492 1.1256762 1.1296952 #>  [854,] 0.4887096 0.4922367 0.5207712 #>  [855,] 0.4782786 0.4949691 0.4970679 #>  [856,] 0.7005687 0.7282750 0.8106460 #>  [857,] 1.5977314 1.6188143 1.6630545 #>  [858,] 0.9828736 0.9900775 1.0682903 #>  [859,] 0.8053099 0.8237604 0.8417582 #>  [860,] 0.6846599 0.7157962 0.7325915 #>  [861,] 0.7507253 0.7523886 0.8480161 #>  [862,] 1.4259412 1.4316100 1.4988094 #>  [863,] 0.5710533 0.6200086 0.6258394 #>  [864,] 0.8021759 0.8435674 0.8990940 #>  [865,] 0.7512016 0.8002493 0.8399893 #>  [866,] 1.0053795 1.0302783 1.0333466 #>  [867,] 1.3651758 1.3704494 1.3881233 #>  [868,] 0.8793095 0.8834352 0.9184729 #>  [869,] 1.0987394 1.1113921 1.1128387 #>  [870,] 1.0201003 1.0443182 1.1297845 #>  [871,] 1.0132163 1.0386226 1.0419811 #>  [872,] 1.7432166 1.7435537 1.7681758 #>  [873,] 1.5526279 1.5548582 1.5549138 #>  [874,] 1.5643485 1.5829517 1.6181216 #>  [875,] 0.6473457 0.6548739 0.6696310 #>  [876,] 0.9218107 0.9571702 0.9778741 #>  [877,] 1.0250592 1.0357575 1.0606741 #>  [878,] 0.5402503 0.5527914 0.5764495 #>  [879,] 0.6613997 0.6732882 0.7205516 #>  [880,] 0.8324077 0.8340069 0.8392469 #>  [881,] 1.0273828 1.0674348 1.0863913 #>  [882,] 0.4995391 0.5159087 0.5646436 #>  [883,] 0.8173312 0.9062564 0.9198423 #>  [884,] 1.4784841 1.4857140 1.5259151 #>  [885,] 1.0851987 1.1153058 1.1660808 #>  [886,] 0.7755278 0.7816899 0.8175538 #>  [887,] 0.5118921 0.5378672 0.5582951 #>  [888,] 0.5570764 0.5640250 0.6210677 #>  [889,] 0.8903521 0.9074408 0.9175021 #>  [890,] 0.8414070 0.9039226 0.9202386 #>  [891,] 0.7896818 0.8130475 0.9425873 #>  [892,] 0.9123483 0.9214054 0.9245468 #>  [893,] 0.8975041 0.9075844 0.9262830 #>  [894,] 0.6412403 0.6422700 0.6698920 #>  [895,] 0.8648895 0.8929471 0.9167670 #>  [896,] 0.6366337 0.6395217 0.6494701 #>  [897,] 0.8212221 0.9108738 0.9414435 #>  [898,] 0.8159931 0.8321998 0.8806140 #>  [899,] 0.7181309 0.7561911 0.7579430 #>  [900,] 1.0549060 1.0707642 1.0861453 #>  [901,] 0.7029169 0.7085249 0.7216293 #>  [902,] 0.7156204 0.7257239 0.7283912 #>  [903,] 0.8090088 0.8203966 0.8252762 #>  [904,] 1.0569332 1.0651852 1.1204284 #>  [905,] 0.7470500 0.7806151 0.7831131 #>  [906,] 1.3719911 1.3826902 1.4095393 #>  [907,] 0.9132148 0.9149534 0.9425187 #>  [908,] 0.8450774 0.8467263 0.8527465 #>  [909,] 0.7111578 0.7113021 0.7697982 #>  [910,] 0.5235760 0.5392230 0.5403678 #>  [911,] 0.7465814 0.7984010 0.8016943 #>  [912,] 0.5437195 0.5473943 0.5576727 #>  [913,] 0.6246833 0.6274053 0.6308459 #>  [914,] 1.1162218 1.1789574 1.1881403 #>  [915,] 0.8545776 0.8570664 0.8883256 #>  [916,] 0.5156517 0.5305301 0.5358769 #>  [917,] 0.8299450 0.8330380 0.8357438 #>  [918,] 0.6519167 0.6788963 0.7097266 #>  [919,] 0.5298393 0.5746167 0.5870534 #>  [920,] 0.8728764 0.9160647 0.9298368 #>  [921,] 0.5425313 0.5697194 0.5808069 #>  [922,] 0.4716877 0.4855148 0.5006228 #>  [923,] 0.5712959 0.5804547 0.5886335 #>  [924,] 1.2183549 1.2279329 1.2397664 #>  [925,] 0.8369715 0.8990940 0.9405851 #>  [926,] 1.6635947 1.7011964 1.7713238 #>  [927,] 0.6394432 0.6398206 0.6491597 #>  [928,] 0.5632268 0.5735172 0.5858934 #>  [929,] 1.1368215 1.1398049 1.1423105 #>  [930,] 0.6184910 0.6777772 0.7280784 #>  [931,] 0.8526533 0.8531084 0.8741736 #>  [932,] 1.0771320 1.0871124 1.0918508 #>  [933,] 1.7109979 1.7636920 1.7821889 #>  [934,] 0.5281515 0.5497320 0.5530976 #>  [935,] 1.5139220 1.5766773 1.5895523 #>  [936,] 0.5098431 0.5135875 0.5137010 #>  [937,] 0.5146455 0.5364124 0.5453236 #>  [938,] 0.5508935 0.5528096 0.5798534 #>  [939,] 1.1253986 1.1362429 1.1681171 #>  [940,] 0.8129960 0.8317723 0.8331352 #>  [941,] 0.5766062 0.5929677 0.5948733 #>  [942,] 0.7214949 0.7733016 0.8851496 #>  [943,] 1.3044251 1.3107671 1.3115586 #>  [944,] 1.2669693 1.2939490 1.3061284 #>  [945,] 0.7706214 0.7822610 0.7834074 #>  [946,] 0.9262706 0.9575089 0.9871741 #>  [947,] 0.7427722 0.7557005 0.7596454 #>  [948,] 0.8487513 0.8662389 0.8768362 #>  [949,] 1.0979966 1.1577397 1.1620638 #>  [950,] 0.6502998 0.6568106 0.6813457 #>  [951,] 0.6978357 0.7089215 0.7162495 #>  [952,] 0.7960185 0.7995320 0.8424930 #>  [953,] 0.9383473 0.9503993 0.9573875 #>  [954,] 2.1882264 2.2264969 2.2616588 #>  [955,] 1.9126116 1.9201377 1.9205755 #>  [956,] 1.0033540 1.0396160 1.0528064 #>  [957,] 0.6171024 0.6535798 0.6755962 #>  [958,] 0.6292867 0.6412419 0.6462473 #>  [959,] 0.8683366 0.8703066 0.8759302 #>  [960,] 0.4889434 0.4976651 0.5004434 #>  [961,] 0.6003501 0.6045340 0.6476661 #>  [962,] 1.3687023 1.3860852 1.3944408 #>  [963,] 1.2460117 1.3980969 1.4205255 #>  [964,] 0.5549224 0.5738885 0.5782096 #>  [965,] 0.8533852 0.8645437 0.8852885 #>  [966,] 0.7352325 0.7488933 0.7790243 #>  [967,] 0.5814963 0.6499862 0.6699705 #>  [968,] 0.6964763 0.6995882 0.7259679 #>  [969,] 0.5207932 0.5419522 0.5782916 #>  [970,] 0.9872906 0.9919420 1.0145209 #>  [971,] 0.6199791 0.6668396 0.6681151 #>  [972,] 1.2409560 1.2776363 1.2814344 #>  [973,] 0.5406422 0.5613860 0.5736396 #>  [974,] 0.7566706 0.8039280 0.8522597 #>  [975,] 0.4240761 0.4404356 0.4584159 #>  [976,] 0.5645624 0.5964228 0.6045173 #>  [977,] 0.9688907 0.9724684 0.9848242 #>  [978,] 0.7886268 0.7939739 0.8066490 #>  [979,] 1.1355190 1.1376948 1.1713880 #>  [980,] 1.0273828 1.0314666 1.0390056 #>  [981,] 0.7132219 0.7172776 0.7537019 #>  [982,] 0.7757415 0.8342965 0.8444456 #>  [983,] 0.6644566 0.6699240 0.6749321 #>  [984,] 1.0930494 1.1113921 1.1235170 #>  [985,] 0.7286659 0.7602048 0.7771555 #>  [986,] 0.6038459 0.6261495 0.6349548 #>  [987,] 0.6221292 0.6369450 0.6401289 #>  [988,] 0.5750312 0.6004248 0.6005805 #>  [989,] 0.5247433 0.5415845 0.5542891 #>  [990,] 1.1387443 1.1544974 1.1779164 #>  [991,] 0.7411182 0.7412206 0.7432386 #>  [992,] 0.8507260 0.8693285 0.8715381 #>  [993,] 0.6006438 0.6105227 0.6430802 #>  [994,] 0.9192759 0.9244153 0.9262830 #>  [995,] 0.9304726 0.9406467 0.9505642 #>  [996,] 0.9204467 0.9328152 0.9337576 #>  [997,] 1.7285329 1.7916249 1.8117096 #>  [998,] 0.7750084 0.7789093 0.8090736 #>  [999,] 0.8891883 0.9189417 0.9289021 #> [1000,] 0.4145980 0.5664812 0.6093518 #>   # Find the 10 approximate nearest neighbors (see RANN::nn2) tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\",     eps = 0.3 ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  238  980  757  656  390  586  393   35  727   879 #>    [2,]  180  793  438  480  142  174  789  233  868   447 #>    [3,]  189  119  295  494  437  803  217  892  322    18 #>    [4,]  941   91   12  279  313  855  237  829  673   177 #>    [5,]  710  571  165  485  975  762  863  964  851   740 #>    [6,]  698  615  361  773  515   94  201  169   31   111 #>    [7,]  374  362  641  896  237  735  214  594  452   860 #>    [8,]  231  336  562  294  201  831  428  225   31   569 #>    [9,]  574  902  282  785  154  299   50  386  506   553 #>   [10,]  690 1000  988  456  424  747  561  986  726   558 #>   [11,]  352  817  264  403  870  946   71  607   70   157 #>   [12,]    4  941  279  934  177  313  855  365   91   103 #>   [13,]  393  696  390  323  153  798  385  886  238   947 #>   [14,]  801   46  314  387  155  958  145  331   45   911 #>   [15,]  996  363  443   56  897  667  791  400  134   533 #>   [16,]  848  704  371  312  612  522  345  713  922   665 #>   [17,]  599  524  506  177  934  375  778  648  800   761 #>   [18,]  803  873  295  718  844  357  189  322  661   156 #>   [19,]  645   52  754  202  559  151  548  981  384   213 #>   [20,]  670  131  149  246  268  842  165  816  484   645 #>   [21,]  110  432  400  653  284  533  473  179  924   205 #>   [22,]  983  222   69  594  463  132  242  745   57   909 #>   [23,]  726  725   45  646  341  148   62   80  587   901 #>   [24,]  813  744  251  511  971  218  617  560  338   992 #>   [25,]  157   95  608  870  403   70  827  880   37   944 #>   [26,]  882  598  344  434   27  854  366  580  928   785 #>   [27,]  916  430  969  416  761  854   26  938  488   616 #>   [28,]  282  435  902  330  648  478  596  668    9   479 #>   [29,]  544  495  149   33  869   77  327  708  213   866 #>   [30,]  684  546  462  381  509  864  771  926  206   604 #>   [31,]  201  225  361    6  106  242    8  677  773   760 #>   [32,]  107  420  241  135  958  508  623  356  887   988 #>   [33,]  544   29  869  984  636  495  708  327  932   688 #>   [34,]  685   66   73  904  776  497  638  549  808   271 #>   [35,]  757  372  888  694  727  987  768  665  376   530 #>   [36,]  748  323   88  113  335  385  474  419  331   541 #>   [37,]   95  787  981  880  403  552  235  876  215   264 #>   [38,]  898  769  572  126  178  856  188  848  295   723 #>   [39,]  399   69  207  983  971  106  381  527  771   132 #>   [40,]  768  727  987  968  769  931  243  372  888   718 #>   [41,]  765  739  510  275  502  392  728  989  150   513 #>   [42,]  379  300  530  660  555   65  252  738  376   665 #>   [43,]  766  732  466  342   56  523  130  820  647   644 #>   [44,]   63  625  860  896  139  830  789  237  673   550 #>   [45,]  508   23   80  631  726  558  988  705  556   976 #>   [46,]  958  314   14  623  107  145  508  801  835    45 #>   [47,]  809  755  483  679  878  111  698  183  615   969 #>   [48,]   98   92  825  906  605  219  948  834  814   326 #>   [49,]  819  753  417  413  580  945  256  714  482   895 #>   [50,]  344  831  231  928  386  785  574  461  299   506 #>   [51,]  716  917  939  881  806  653   70  505  531    79 #>   [52,]  151  202   19  981  754  552  787  559  879   384 #>   [53,]  534  712  729  715  991  518   75  593  934   611 #>   [54,]  418  815   67  491  367  603  589  542  294   977 #>   [55,]  693  499  680  657  394  877  440  359  564   130 #>   [56,]   15  134  250  363  305  667  732  659  262   671 #>   [57,]  132  964  983  485  463  762  617  594   93    22 #>   [58,]  675  979  686  532  622  470  455  677  216   361 #>   [59,]  266  272  811  899  372  516  694  728  987   376 #>   [60,]  223  300  407  592  376  530  759  490  516   767 #>   [61,]  373  730  540  123  669  996  388   15  640   849 #>   [62,]  726  160  646  198  747  804   23  725  298   521 #>   [63,]   44  789  139  896  860  565  673  277  625   237 #>   [64,]  876  557  900  191  966  213  883  209  347   484 #>   [65,]  252  379  555  334  128  148   42  121  660   665 #>   [66,]  904   34   73  668  685  868  638  233  435   648 #>   [67,]  519  271  321  491  418  861  317  479  478   296 #>   [68,]  674  627  452  720  391  442  681  777  707   492 #>   [69,]  983  399   22   39  106  242  971   57  332   132 #>   [70,]   79  717   95  115  179  583  653  157  232   917 #>   [71,]  607  264  932  215  352  351  235  792  817   658 #>   [72,]  326  937  414  543  265  688  894  219  124   834 #>   [73,]  549  685  638  808  920   66  915  570  490   776 #>   [74,]  414  833  824  792  618  918  605  326  666   743 #>   [75,]  729  234  345  612  922   53  116  800  713   764 #>   [76,]  168  115  536  717   88  205  703  113  475   264 #>   [77,]  645  213  548  559  149   19  754  384  202   824 #>   [78,]  933  301  125  137  962  226  573  788  311   841 #>   [79,]  717  179  653   70  115  536  168  205   76   608 #>   [80,]  556  682  293  508   45  705  160  726  631   976 #>   [81,]  441  389  259  942  143  999  890  554  601   537 #>   [82,]  196  702  378  521  808  318  901  804  364   320 #>   [83,]  245  391  582  627  802  626  442  972  281   862 #>   [84,]  535  879  999  942  907   87  151  202  796    52 #>   [85,]  516  767  240  319  292  317  899  692  853   895 #>   [86,]  406  591  953  433  274  129  770  473  208   190 #>   [87,]  907  535  559  787  202   84  966  151   52   866 #>   [88,]  113  335  541   36   76  607  474  115  703   918 #>   [89,]  257  417  170  161  482  945   49  496  539   865 #>   [90,]  951   93  343  606  181  689  162  588   92   304 #>   [91,]  279    4  365  673   12  293  752  177  941   159 #>   [92,]  951  343  575   90   93  118  689  750  576   891 #>   [93,]  343  597   90  214  132  960  762  463  485   719 #>   [94,]  169  615  111  503  624  698  927  600  737     6 #>   [95,]   37  403  880  552  583  157   70  981  608    25 #>   [96,]  672  229  959  278  908  720  268  465  568   688 #>   [97,]  152  227  683  518  236  756  258  415  991   609 #>   [98,]  982  144  621  597  354  825  410  439  538    48 #>   [99,]  590  925  794  747  604  456  186   62  298   517 #>  [100,]  369  748  734  148  141  252   65  323  128   886 #>  [101,]  922  875  329  887  647  312  704  593  612   350 #>  [102,]  733  375  225  506  201  737  761  778   50   299 #>  [103,]  736   12  934  678  127  712  116  913  800   365 #>  [104,]  383  357  609   43  217  466  415  766  359   676 #>  [105,]  637  619  711  837  578  567  444  476  253   481 #>  [106,]  242  453   69   31   39  206  983  225  677   399 #>  [107,]  958  835   32  976  705   46  508  335  424   988 #>  [108,]  903  651  421  255  274  377  561  965  186   560 #>  [109,]  218  797  338  251  171  286  893  813  515   956 #>  [110,]   21  432  653  473  400  533  284  205  179    79 #>  [111,]   94  600  698  615  169   47  809  755  483   224 #>  [112,]  783  453  171  527  203  106  206   39  677   628 #>  [113,]   88  541   36  335  607   76  817  115  264   474 #>  [114,]  197  998  482  957  865  303  412  654  790   994 #>  [115,]  717  179   76  168   79  205  536  230  667   917 #>  [116,]  678  365  973  800  752  633  177  279  103   934 #>  [117,]  741  856  309  752  892  973  713  371  524   901 #>  [118,]  281  689  951  343  891   92  972  162   90   701 #>  [119,]    3  189  325  156  494  892  174  322  772   840 #>  [120,]  997  602  825  184  700  579  144  276  954   401 #>  [121,]  253  474  385  555  419  619  921   65  666   323 #>  [122,]  720  229  674  948   48  452  825  442   68   547 #>  [123,]  182  363  669  443  731   15  500  943  897   659 #>  [124,]  172  543  195  445  921  823  176  369  937    72 #>  [125,]  841  788  394  952  657  133  499   55  573   137 #>  [126,]  136   38  920  776  223  497  898  320  843   333 #>  [127,]  800  103  116  678  973  934   12  313  177   365 #>  [128,]   65  665  252  734  148  145  141  379  334   419 #>  [129,]  208  651  274  421  770  940  953 1000  186   629 #>  [130,]  820  877  693  766  564   55  400  499  680   647 #>  [131,]  165    5  382  273  842   20  754  760  663   654 #>  [132,]   57  983  964  594  485  214  762   93   22   416 #>  [133,]  261  394  311  788  930  952  721  642  985   226 #>  [134,]  232  531  667   56  644  583  847  963  250   996 #>  [135,]  623  612  887  345  922  764  508   32  556   356 #>  [136,]  497  776  126  795  920  843  638   38  685   808 #>  [137,]  261  283  133  788  422  311  226  952  125   655 #>  [138,]  567  350  887  694  253  551  349  619   42   704 #>  [139,]  673  160   63  198   44  789  896  378  925    62 #>  [140,]  632  696  199  905  798  153  697  931  289   639 #>  [141,]  734  905  128  697  333  886  100  665  390   798 #>  [142,]  378   63  233  139  868  565  438  309  789   480 #>  [143,]  272  890   81  512  292  441  466  266   59   431 #>  [144,]  629  621  576   98  982  184  689  343  703   951 #>  [145,]  314   46  128  243  665   16  178  623   14   888 #>  [146,]  601  585  194  883  942  554  535  796   84   340 #>  [147,]  816  209   20  268  670  724  691  758  465   867 #>  [148,]  334  725  252   65  379  682  128  660  804   454 #>  [149,]  484   77  670  645   20  213   29  303  966   559 #>  [150,]  613  739  502   41  244  568  275  392  553   842 #>  [151,]  202   52  879  981  754   19  384  787  559   993 #>  [152,]  518   97  991  258  236  534  846  596  415   756 #>  [153,]  696  586  798  238  939  881  632  697  980   390 #>  [154,]  506  780  428    9  778  574  231  785  386   282 #>  [155,]  387   14  558  801  188  858   23  587  440   341 #>  [156,]  330  661  325  648  596  524  868   28  581   435 #>  [157,]  608   25  870  403   95  475  880  974  469    70 #>  [158,]  616  551  854  349  763  471  193  611  175   740 #>  [159,]  517  315  752  173  655   91  633  355  673   590 #>  [160,]   62  726  804  646   80  682  139  293  198   673 #>  [161,]  455  945  979  170  367  461   89  470  515   831 #>  [162,]  701  774   90  649  891  951  606  511  595   118 #>  [163,]  397  185  280  327  784  826  451  513  501   285 #>  [164,]  484  966  535  883  866  303  149   87   84   999 #>  [165,]  131    5  382  273  709  710  842  743  740   851 #>  [166,]  181  235   19  618  792   74  863  918   90   951 #>  [167,]  486  989  785  598  502  553  392  287  510   592 #>  [168,]  536   76  205  115  717  703  475  307  179   595 #>  [169,]   94  615  927  111  624  503  878  698   47     6 #>  [170,]  470  496  161  979  367   89  417  455  945    58 #>  [171,]  783  527  109  112  453  338  426  677  218   251 #>  [172,]  124  445  195  921  543  379  176  285  454   369 #>  [173,]  355  655  517  159  315  633  840  752  678   590 #>  [174,]  127  793  840  874  325  447  782  524  655   173 #>  [175,]  763  832  740  158  762  476  837  960  912   975 #>  [176,]  743  936  746  921  310  975  851  187  709   937 #>  [177,]  855  973  934   12  365  941  279  800  599    17 #>  [178,]  243  968  572  848  718   16  312  723  145   680 #>  [179,]  717  115   79  667  653  205  536  168  487   230 #>  [180,]    2  480  793  925  789  438  142   63  139    30 #>  [181,]  166  588   90  304  863  891  307  951  606   571 #>  [182,]  731  123  363  443  791  529  970  504  659   897 #>  [183,]  950  614  878  679   47  910  969  248  760   964 #>  [184,]  276  629  144  770  602  208  449  621  404   995 #>  [185,]  163  397  280  636  699  635  327  826  464   784 #>  [186,]  986  421  651  456 1000  439  561  597  267    10 #>  [187,]  937  894  746  936  814  851  176  265  719   975 #>  [188,]  898  856  387  145  155  848  128  587  371   178 #>  [189,]  494    3  322  803  892  295   18  119  156   217 #>  [190,]  591   86  269  929  406  889  473  528  953   432 #>  [191,]  900  340  347  994  248  880  552  412  883   966 #>  [192,]  445  830  577  568   41  765  392  408  592   275 #>  [193,]  471  855  293  616  158  279  763  430  177   941 #>  [194,]  742  256  360  796  370  637  366  662  942   967 #>  [195,]  947  172  124  543  445  327   72  921  285   369 #>  [196,]   82  702  808  378  318  320  759  364  638   521 #>  [197,]  998  482  114  957  865  412  654  303  663   714 #>  [198,]  521   62  804  646  139  160  298  794  378   726 #>  [199,]  905  289  886  652  639  464  333  798  807   141 #>  [200,]  526  977  562  402  839  815  294    8  336   603 #>  [201,]   31  225  361    8  231  733  102    6  831    50 #>  [202,]  151   52  559   19  754  384  787  879  981   645 #>  [203,]  332  771  626  112  399  527   39   69  783    83 #>  [204,]  622  979  470  815  367   58  677  161  446   455 #>  [205,]  168  115   76  536  179  107  424  717  958   911 #>  [206,]  526  106  777  453  332  818  603  242  200   681 #>  [207,]  903  560  971   39  377  399  108  628  617   965 #>  [208,]  770  953  129  629   86  433  651  274  184   421 #>  [209,]  450  563  147  750  618  758  575  919  213   891 #>  [210,]  858  331  697  341   14  387  801  155  716   734 #>  [211,]  249  341  990  587  298  646   23  995   62   858 #>  [212,]  468  912  550  832  682  719  334  746  960   354 #>  [213,]   77  645  559   19  450  966  876  215  149   618 #>  [214,]  719  594  975  746  960  641  936  132  362   851 #>  [215,]  235  792  876  213  264  824  607   19   74   351 #>  [216,]  675  532  782  686  756   97   58  375  683   518 #>  [217,]  394  359  772  494   55  721  693  680  234   322 #>  [218,]  338  813  992   24  251  797  109  511  560   956 #>  [219,]  834  706  326   72  605  543  414  401  982   823 #>  [220,]  563  900  797  347  649  511  247  701   24   251 #>  [221,]  547  521  198  990  353  339  378  298  722   804 #>  [222,]  735  961  594  745  302   22  214  919  641   575 #>  [223,]   60  407  920  320  300  318  490  848  530   699 #>  [224,]  600  483  838  239  969  488  460  938  111   786 #>  [225,]  201   31  733  361  102  381  737    8  778   829 #>  [226,]  311  473  500  422  533  962  669  133  985   504 #>  [227,]   97  683  609  152  415  518  991  216  675   775 #>  [228,]  859  838  529  260  383  991  224  731  753   413 #>  [229,]  465  268   96  720  122  246  265  688  584   948 #>  [230,]  578  481  552  583  967  307  742  981  717   536 #>  [231,]  428  336  831   50    8  569  386  201  154   928 #>  [232,]  978  583  134  671  531  667  250  487  389   395 #>  [233,]  868  524  325  309  648  142  435  599   17   117 #>  [234,]   75  729  713  721  772  359  800  116  345   581 #>  [235,]  215  166  264  876  792   19  403  981  351   918 #>  [236,]  846  258  895  692  152  756  810  299  596   899 #>  [237,]  896  673    7  277  362  829    4  789  941   374 #>  [238,]  586  798  390  656  888  727    1  696  757   323 #>  [239,]  360  329  409  662  224  370  637  786  483   875 #>  [240,]  767  317  321   85  319  751  516  296  275   405 #>  [241,]  985   32  564  930  135  623  642  504  533   255 #>  [242,]  106  411   22   69   31  760  983  745  964   254 #>  [243,]  178  968  145  312  723   40  848  704  572   718 #>  [244,]  613  568  842  408  150  278   41  566  959   246 #>  [245,]   83  972  862  281  391  582  118  774  627   909 #>  [246,]  465  382  268  758  584  842  688  708  709   265 #>  [247,]  944  388  608  827  347  974  520  880  340   469 #>  [248,]  614  578  679  304  588  340  183  552  481   307 #>  [249,]  211  558  747  404  341  995   62   23  726   911 #>  [250,]  667  671  487  732  395  370  305  350  805   742 #>  [251,]  813   24  218  744  971  797  893  527  109   411 #>  [252,]  379   65  454  660  148  334  555  128   42   369 #>  [253,]  619  121  555  419  138  310  105  711  921   474 #>  [254,]  691  850  724  777  681  961  242   22  222   745 #>  [255,]  913  358  736  420  108  561  356   32  938   421 #>  [256,]  366  580  663  498  796  882  194  444  662   819 #>  [257,]  417   89   49  819  753  601  554  482  790   865 #>  [258,]  236  810  775  846  152  895  596  844  692    97 #>  [259,]  389   81  441  537  146  978  942  585  601   535 #>  [260,]  228  731  859  413  529  383  838  970  308   659 #>  [261,]  283  133  137  736  422  311  721  103  788   633 #>  [262,]  305  659  967  742  370  481  671  194  978   340 #>  [263,]  962  730  217   78  123  669  125  500  137   104 #>  [264,]  403  352  235  607  946  215  351   76   71   113 #>  [265,]  814  937  187  894  758  851   72  465  688   919 #>  [266,]  694   59  890  272  805   35  662  512  372   757 #>  [267,]  439  582  597  604  186  626  864  343  986   374 #>  [268,]  465  246  708  670  688  758  229   20  408   959 #>  [269,]  528  889  749  324  500  190  669  406  422   467 #>  [270,]  404  995  982  341  621  354  602  424  249    62 #>  [271,]   67  872  418  904  861  570  519  491  479   915 #>  [272,]   59  266  899  890  512  292  143  516  692   372 #>  [273,]  842  923  434  845  382  510  502  165  598   709 #>  [274,]  940  129  406  377  108  812  651   86  749   903 #>  [275,]  392  296  592   41  739  989  167  765  915   502 #>  [276,]  184  629  770  144  208  449  602  579  689   621 #>  [277,]  829  789  237  599  941  402  778   63    4   673 #>  [278,]  568  244  408  959  688  268  613   96  192   869 #>  [279,]  365   91  293   12  855  193    4  177  941   973 #>  [280,]  501  163  397  652  185  451  886  390  327    13 #>  [281,]  118  343  909  774   92  582  972  951   93   162 #>  [282,]  902    9  574   28  506  596  154  299  479   398 #>  [283,]  261  422  137  620  133  821  736  311  226   628 #>  [284,]  301  573  432   21  473  110  533  885  400   924 #>  [285,]  765  172  728  993  195  445  921  555  530   513 #>  [286,]  308  698  413    6  615   94  111  169  675   755 #>  [287,]  510  486  989  765  592  738  459  598  167   530 #>  [288,]  853  292  895  692   85  664  240  236  810   321 #>  [289,]  639  199  905  333  734  141  697  100  807   886 #>  [290,]  749  511  467  940  377  560  274  338  774   965 #>  [291,]  585  316  146  790  883  601  259  994  257   191 #>  [292,]   85  272  853  288  692  516  895  899  775   258 #>  [293,]  193  279   80  365  682  556   91  855  177   471 #>  [294,]  562    8  336  200  589  231  977  815  622   831 #>  [295,]  803   18   38  572  189  873  322  718  892   357 #>  [296,]  275  392  915  570  592  861  317   41  319   167 #>  [297,]  514  545  723  387  871  155   38  188  437   680 #>  [298,]  198  990   62  211  722  646  794  249  747   995 #>  [299,]  756  574   50    9  846  282  102  902  236   596 #>  [300,]  407  530   42  738  660  592  577   60  379   318 #>  [301,]  284  573  473  311  432  591  226  885  533   952 #>  [302,]  575  750  919  222  909  735  758  463  814    22 #>  [303,]  484  966  412  754  883  998  559  645  957   197 #>  [304,]  588  606  307  248  762  476  578  181  710   571 #>  [305,]  262  659  671  370  742  967  250  481   56   732 #>  [306,]  970  721  991  799  859  415  772  529   53   518 #>  [307,]  606  536  304  520  230  475  595  588  578   181 #>  [308,]  413  286  111   94  675  600  698  615    6   529 #>  [309,]  457  233  524  759  117  648   17  868  599   808 #>  [310,]  921  619  176  459  743  711  763  832  253   175 #>  [311,]  226  473  985  533  133  788  952  930  422   301 #>  [312,]  704  101  342   16  647  922  968  875  243   593 #>  [313,]   12  381    4  941  127  829  546  103  509    91 #>  [314,]   46   14  145  801  958  871  623  917  487   440 #>  [315,]  633  752  631  655  159  678  642  116  365   517 #>  [316,]  291  585  883  191  146   64  994  966  827   340 #>  [317,]  321  240  319  739  767  296  167  275  519    85 #>  [318,]  320  702  364  407  454  660  252  300  196    82 #>  [319,]  317  767  167   85  240  321  516  479  398   296 #>  [320,]  318  702  407  371  300  660  364  196  454   901 #>  [321,]  317  240  519  319   67  478  664  296   85   479 #>  [322,]  892  494  713  856  581  572  803  359  234   772 #>  [323,]  385   36  419  748  121  393  390  474  100   238 #>  [324,]  943  269  528  889  426  749  290  500  467   422 #>  [325,]  868  233  524  156  648  330  174  892  435   117 #>  [326,]  414  605   72  834   74  219  823  833  666   543 #>  [327,]  195  947  397  285  408  708  824  163  172   866 #>  [328,]  429  565  339  492   63  493  839  860  674    44 #>  [329,]  875  593  101  239  922  409  349  356  611   551 #>  [330,]  648  661  156  479   28  478  435  398  524   282 #>  [331,]  697  210   14   36  734  141  748  323  314   801 #>  [332,]  203   69  626  391  777  206  681  399  106    39 #>  [333,]  141  734  320  905  318  898  128  364  886   252 #>  [334,]  148  379  682  660   65  725  252  550  705   976 #>  [335,]   88  474  835   36  113  918  424  107   76   748 #>  [336,]  231  831  386    8  428  569  294  461   50   928 #>  [337,]  348  346  448  784  613  826  278  244  150   568 #>  [338,]  218   24  560  813  992  971  511  109  426   251 #>  [339,]  353  674  328  672  547  625  429  860  221    44 #>  [340,]  191  248  552  481  967  230  742  583  978   262 #>  [341,]  211   23  858  249  404  270   14  726  725   587 #>  [342,]  647  312  732  101  875  466  805  704  593   820 #>  [343,]   93   90   92  951  281  118  597  267  909   439 #>  [344,]  928  461  434   50  882  714  831   26  386   553 #>  [345,]  612  764  556  135  922   75  713  623  508    16 #>  [346,]  348  784  337  451  826  884  914  513  405   539 #>  [347,]  880  191  900  307  181  340  475  248  552   876 #>  [348,]  346  337  539  448  784  613  826  884  816   436 #>  [349,]  551  611  356  409  158  854  488  616  567   922 #>  [350,]  567  887  138  101  694  253  395  922  419   105 #>  [351,]  792  576  658  264  605  235  215  166  946    74 #>  [352,]   11  817  264  946  403  607  113   71  870   541 #>  [353,]  339  674  221  328  672  547  429  625  860   122 #>  [354,]  468  982  212  804  823  538  725   98   62   726 #>  [355,]  173  517  655  159  840  315  633  952  752   590 #>  [356,]  611  349  551  488  135  358  158  922  887   329 #>  [357,]  718  803  968  572   18  295  178  512  723   466 #>  [358,]  420  255  913  488  356  938  460  175  611   476 #>  [359,]  234  680  713  322   55  729  844  647   75   581 #>  [360,]  637  370  239  742  483  662  967  481  194   488 #>  [361,]   31  201    6  225  737  615   94  624  477   102 #>  [362,]  641    7  374  735  594  214  237  745  584   961 #>  [363,]  443   15  791  897  504   56  659  996  182   766 #>  [364,]  454  318  252  660  407  702  320  369   82   379 #>  [365,]  116  279  678  973  752   91  177  293   12   800 #>  [366,]  663  256  882  444  580  498  910   26  614   662 #>  [367,]  470  979  170  496  455  161  831  461  622   815 #>  [368,]  972  997  118  276  245  579  689  906  281   891 #>  [369,]  100  252  454   65  543  124  148  172  748   807 #>  [370,]  742  360  967  637  481  239  305  671  483   194 #>  [371,]  522   16  848  643  856  713  345  320  612    42 #>  [372,]  987  768   35  757  376  727  530  888   59   694 #>  [373,]   61  388  540  640  123  730  669  996   15   943 #>  [374,]    7  362  641  452  896  735  237  961  860   594 #>  [375,]  102  733  934   17  596  712  506  761  778   534 #>  [376,]  530  372  987   42   35  704  300  287  665   516 #>  [377,]  940  560  903  207  774  617  971  274  108   399 #>  [378,]   82  196  901  521  702  139  142  198  646   808 #>  [379,]  252  660   65  334   42  555  454  148  921   682 #>  [380,]  849  640  432  924  653   61   21  540  110   400 #>  [381,]  313  546  684  225  829  509  477    4  277    30 #>  [382,]  709  842  165  273  246  131  746  851  936     5 #>  [383,]  228  859  609  415  260  676  306  838  466   970 #>  [384,]  548  824  711  202  151  993  833   52   19   743 #>  [385,]  474  121  393  323  666  253  918  419   36   607 #>  [386,]  831  231  336  434  553  461   50  785  344   428 #>  [387,]  155   14  801  188  858  314  440   46  145   587 #>  [388,]  247  540  944  974  469  929  373  467  608   996 #>  [389,]  441  978  259   81  671  232  942  805  980   907 #>  [390,]  886  238  798  586  323  888  652  141  757     1 #>  [391,]  627  626   83  582  442  332  909  452  245   281 #>  [392,]  275  296  592  989   41  167  739  510  502   486 #>  [393,]  385  666  323  121  947  474  390   13  607   195 #>  [394,]   55  657  133  125  788  952  499  234  693   217 #>  [395,]  487  531  350  250  667  917  419  887  314   958 #>  [396,]  525  541  505  817  113   88  579  352  946    36 #>  [397,]  163  195  327  807  445  285  280  947  172   185 #>  [398,]  596  643  715  486  167  282   17  319  648   506 #>  [399,]   39   69  983  207  971  771  377  626  132   864 #>  [400,]   21  432  533  110  130  653  820  806  284   473 #>  [401,]  834  932  219  541  706  982  605  326  270   748 #>  [402,]  977  200  839  526  277  778  829  492  569     8 #>  [403,]  264   95  157  475  235  880  870   76   37   352 #>  [404,]  270  995  249  747  341   10  433  424  690   211 #>  [405,]  436  811  513  739  458  784  502   59  598   728 #>  [406,]   86  274  889  422  473  528  311  985  226   504 #>  [407,]  300  318  530  454  320  223  252  660   60    42 #>  [408,]  688  708  244  445  709  937  382  246  842   192 #>  [409,]  854  349  786  551  662  239  567  611  616   329 #>  [410,]  960  719  538  468  975  936  832  597  743   746 #>  [411,]  760  964  242  485  463   57   22  773  983   950 #>  [412,]  303  994  663  754  614  197  998  654  366   957 #>  [413,]  308  286   49  675  228  111  260  819  529   755 #>  [414,]  326   74  605  833  824   72  792  823  666   618 #>  [415,]  609  844  683  152  772  775   97  383  306   258 #>  [416,]  916   27  740  969  430  910  938  964  763   158 #>  [417,]  257   49  753   89  819  413  895  170  945   828 #>  [418,]  589   67  668  902  479  294  271  904  478     9 #>  [419,]  121  253  323  555   65  835  888  350  385   474 #>  [420,]  358   32  255  356  476  578  913  304  488   460 #>  [421,]  651  186  986 1000  561  456  108  129  690    10 #>  [422,]  283  889  406  500  226  528  311  261  504   137 #>  [423,]  472  634  532  686  216  949  821  477  675   782 #>  [424,]   10  538  690  621 1000  335  107  205  976   835 #>  [425,]  587  545  795  901  211  188  646  155  858   387 #>  [426,]  338  943  324  171  218  290  109  560  628   207 #>  [427,]  687  591  602  433  276  770  184  525  190   208 #>  [428,]  569  231  780  154  336  489  386  845  923   778 #>  [429,]  328  492  565  839   63  860  277  402  908    44 #>  [430,]  916  761  616   27  855  781  854  715  158   416 #>  [431,]  779  768  656  757  727   40  501  372  987   512 #>  [432,]  110   21  284  473  400  533  301  653  591   924 #>  [433,]  953  591  770  747   86  404  911   10  690   249 #>  [434,]  553  344  923  928  273  386  785   26  598   502 #>  [435,]  668   28  648  868  330  524  233   17  599   282 #>  [436,]  458  405  811  739  513  498  502  957  598   580 #>  [437,]  297  795  295    3   38  189  841  572  680   494 #>  [438,]    2  793  480  142  840  180  174  173  355   233 #>  [439,]  267  597  186  986  604  582  343  421  864   651 #>  [440,]  764  623  657  930  499  631  508   55   46   564 #>  [441,]   81  942  389  999  890  554  601  259   84   266 #>  [442,]  627  391  582  267   83  449  626  452  439   825 #>  [443,]  363  504  897  791   15  533  241  996  659    56 #>  [444,]  662  910  637  366  993  105  837  567  256   360 #>  [445,]  172  192  124  195  408  454  543  765  709   285 #>  [446,]  867  161  114  515  945  773  865  496  979   893 #>  [447,]  949  782  874  793  546  127  174  381  313   684 #>  [448,]  613  150  337  491  244  566  348  519  816   568 #>  [449,]  802  184  442  627  276  582  629   83  144    99 #>  [450,]  618  213  209   77  645  166   74  758  833   792 #>  [451,]  914  501  866  346  513  784  163  779  826   280 #>  [452,]  374  681  735  961    7  222  720  909  641   362 #>  [453,]  106  677   31  112   39  527  206  477  361   242 #>  [454,]  364  252  660  379  318  407  369  300  334    65 #>  [455,]  831  461  161  979  336   50  344  231    8   945 #>  [456,] 1000  561  986  421  186  690   10  651  747   988 #>  [457,]  759  493  309  565  577  599  852  648  592   808 #>  [458,]  436  498  957  811  405  513  796  580  502   739 #>  [459,]  310  763  471  510  287  740  158  709  176   781 #>  [460,]  791  224  938  488  483  809  913  356  358    47 #>  [461,]  344  831  928  386   50  455  714  434  231   553 #>  [462,]  864  604  509  771  626  546  399  684   30   381 #>  [463,]  485  575   57  863   22  302  919  964   93   750 #>  [464,]  699  652  199  905  223  886  807  333  931   935 #>  [465,]  246  268  758  688  708  265  584  814  382   735 #>  [466,]  890  805  732  342  512   43  875  272  312   647 #>  [467,]  965  889  290  528  812  520  897  749  560   274 #>  [468,]  212  410  538  823  960  832  719  912  354   176 #>  [469,]  974  608  929  540  536  812  595  157  475    79 #>  [470,]  979  367  170  455  161   58  622  496  756   831 #>  [471,]  193  158  459  616  781  763  738  855  550   293 #>  [472,]  423  532  686  634  477  675  821  216  737   970 #>  [473,]  533  311  432  985  110  301  226  284   21   406 #>  [474,]  666  121  385  918  335  823  253  835  921   748 #>  [475,]  595  307  536  608  403  168   76  880  974   157 #>  [476,]  837  762  175  832  578  711  710  105  588   743 #>  [477,]  737  686  532  624  361  225  381  453  503    31 #>  [478,]  479  661  902  282  330  664  319   28  321     9 #>  [479,]  478  902  330  648  282  319   28  661    9   398 #>  [480,]    2  438  180  142  793  139  378  722   63   650 #>  [481,]  742  967  370  578  230  637  360  105  552   583 #>  [482,]  197  865  998  957  714  945  654  819  663   114 #>  [483,]   47  755  224  360  809  969  111  239  460   488 #>  [484,]  149  303  966  883  559   77  645  164  213   998 #>  [485,]  964  463  863   57  571    5  710  132  919   762 #>  [486,]  167  287  989  510  592  781  598  738  643   502 #>  [487,]  395  667  250  531  917  350  887  232  179   115 #>  [488,]  611  938  969  356  349  551  158  854  910   358 #>  [489,]  845  781  916  428  780  569  923  430  154   506 #>  [490,]  915  570  767  751   60  549  296  920  223   319 #>  [491,]  861  519   67  568  448  150  296  852  570   271 #>  [492,]  681  961  839  429  402  745  277  850  720   452 #>  [493,]  852  457  861  565  780  759  296  830  839   908 #>  [494,]  322  892  189  772  234  581  713  359  856   803 #>  [495,]   29  544  866  149  164  857  484   77   33   327 #>  [496,]  170  367  470   89  161  979  446  455  539   417 #>  [497,]  136  776  126  685  920  843  638   73   34   808 #>  [498,]  580  957  256  796  458  663  366  882  436   444 #>  [499,]  657   55  693  877  440  573  394  930  680   952 #>  [500,]  669  528  889  226  422  962  269  406  311   504 #>  [501,]  280  779  451    1  431  757  652  866  914   163 #>  [502,]  598  989  739  553  510  434   41  273  150   785 #>  [503,]  624   94  737  927  938  169  620  600  111   913 #>  [504,]  443  897  791  241  363  985  533  736  460   255 #>  [505,]  396  525  716  817   51  541  113  210  352    88 #>  [506,]  154   17  778  761  430  733  489   50  574   102 #>  [507,]  401  954  932  706  219  636  834  120  984   289 #>  [508,]   45  556  705   80  764  135  623  976  988   631 #>  [509,]  546  462  313  864  381    4  684  108  771    91 #>  [510,]  287  765  989  486  598   41  502  459  273   592 #>  [511,]  744   24  701  290  162  617  774  813  560   377 #>  [512,]  768  890  266  656  272  805  968  727  987   312 #>  [513,]  784  405  728  436   41  458  765  739  285   811 #>  [514,]  723  871  243  178  314  145  898  769  931   387 #>  [515,]  773    6  893  677  945  455   31  161  698   286 #>  [516,]   85  899  376  319   59  767   60  486  272   167 #>  [517,]  159  355  173  655  315  590  747  752  633   631 #>  [518,]  991  534  152   53  600  799  596  299  375    97 #>  [519,]   67  321  491  317  150  861  296  553  240   275 #>  [520,]  812  307  536  897  974  606  230  595  467   304 #>  [521,]  804  198  646   82  378  901   62  196  160   702 #>  [522,]  643  371  738  612   16   42  345  715  471   300 #>  [523,]   43  644  466  531  963  732  847  980  134   512 #>  [524,]   17  233  868  648  309  599  800  973  127   330 #>  [525,]  396  541   88  113  205  703  505   76  817   168 #>  [526,]  200  977  402  206  603  562  815  818    8   294 #>  [527,]  971   39   69  453  106  251  399  171  813   744 #>  [528,]  889  500  269  467  669  422  406  749  324   965 #>  [529,]  731  859  970  838  111  228  224  460  809   991 #>  [530,]  376  300   42  728  407   35  372  287  555   765 #>  [531,]  667  487  395  134  232  917  250  644  179    70 #>  [532,]  686  477  675  361  737  634  472  624  216    58 #>  [533,]  473  985  311  241  400  564  110  226   21   432 #>  [534,]   53  991  518  712  799  729  600  152  934   224 #>  [535,]   84  907   87  966  942  999  559  202  787   879 #>  [536,]  168  307   76  717  475  520  595  115  812   205 #>  [537,]  554  305  828  262  601  441  259  890   81   389 #>  [538,]  410  960  468  424  912  832  719  621  597   212 #>  [539,]  436  998  957  348  458  405  482  197  114    89 #>  [540,]  469  388  929  974  996  608  373  247  897   157 #>  [541,]   88  113  396   36  817  525  607  335  401   748 #>  [542,]  603  622  977  526  562  200  818  206  294   815 #>  [543,]  124  172  823  195   72  369  947  445  326   937 #>  [544,]   29   33  495  327   77  869  149  213  866   708 #>  [545,]  425  858  387  587  155  297  795  188  210   211 #>  [546,]  509  684  381  313   30  462  628  447  864   771 #>  [547,]  706  948  825  198  521  625  860  354  804   221 #>  [548,]  384  833  824  645  754   77  743  711   19   202 #>  [549,]   73  915  570  638  490  808  920  685  861   296 #>  [550,]  660  334  682  212  577  738  471  379  293   160 #>  [551,]  349  611  356  158  616  409  922  854  612   567 #>  [552,]  981  230   52  787  578  481  340  583  151    19 #>  [553,]  785  434  502  598  386  167  344  923  989    26 #>  [554,]  601  942  796  753  819  194  146  441  256    49 #>  [555,]   65  121  379   42  252  253  665  419  921    35 #>  [556,]   80  345  508  764  293  631  612  135  365    45 #>  [557,]  857   64  484  209  149  213  495  966  147    29 #>  [558,]  911   45  988  249  690  631   10   23  508   155 #>  [559,]  966  202  645   19  213   87   77   52  754   151 #>  [560,]  903  207  971  965  377  617  813   24  511   338 #>  [561,]  456 1000  421  651  690  988  986   10  186   255 #>  [562,]  294    8  200  977  622  526  336  815  402   231 #>  [563,]  209  900  463  891  744  750  575  251   24   863 #>  [564,]  820  647  241  766  623  985  130  440  533   930 #>  [565,]   63  457  493  429  328   44  625  277  142   789 #>  [566,]  959  923  842  852  273  613  780  244  246   434 #>  [567,]  138  350  637  349  662  887  551  105  409   444 #>  [568,]  244  278  192  613  150  861   41  491  852   959 #>  [569,]  428  231  489  780  336  845  154  778  745   923 #>  [570,]  915  490  296  549  861  275  767  392  751    73 #>  [571,]  710  863    5  762  485  975  851  743  936   588 #>  [572,]  178  856  680  322   38  968  718  848  713   243 #>  [573,]  284  301  885  499  952  877  788  657  473   125 #>  [574,]    9  902  282  785  299   50  154  506  386   553 #>  [575,]  302  750  919  463  758  863  485  909   93   222 #>  [576,]  703  689  621  144  951  351  982  605   92   792 #>  [577,]  738  759  660  592  550  300  830  454  192   407 #>  [578,]  481  230  105  476  967  742  637  248  552   304 #>  [579,]  946  576  703  351  689  541  396  144  621   276 #>  [580,]  498  256  882  366  663  796   26  811  957   714 #>  [581,]  713  643  322  729  234  398  892  522  715   856 #>  [582,]  267  626  391   83  439  343  627  802  442   281 #>  [583,]  978  230  232  552  481  667   95  717  981   742 #>  [584,]  908  894  641  735  362  961  246  937  745   222 #>  [585,]  146  291  601  340  994  316  262  194  956   191 #>  [586,]  238  798  656  888  727  390  696  153    1   768 #>  [587,]  425  646  901  211   23  188  155  341  521   726 #>  [588,]  304  606  762  571  476  710  181  863  248   307 #>  [589,]  418  668  294  839  562  154  902  977  435   780 #>  [590,]   99  925  517  747  159  456  794  186  604    62 #>  [591,]   86  433  190  301  473  953  406  432  284   110 #>  [592,]  392  738  287  275  486  577  300  759  510   296 #>  [593,]  875  329  101  922   53  409  729  312  704   239 #>  [594,]  745  214  222  132  735  961  362  964   22   641 #>  [595,]  475  812  606  307  536  974  168  520  608   469 #>  [596,]  398  282  375  152  258   17  299  518   28   846 #>  [597,]  960  439  719   93  214  267  410  186  986   538 #>  [598,]  502  989  553  167  510   26  739  486  434   785 #>  [599,]   17  778  177  524  506  277  855  941  154   829 #>  [600,]  111  224   94  969  503  938  483   27  838   991 #>  [601,]  554  942  796  146  819  194  753  441  256   580 #>  [602,]  995  270  184  404  120  700  276  427  525   433 #>  [603,]  818  526  977  200  206  777  815  542  562   254 #>  [604,]  864  462  925  267  439  896  626  374    7   237 #>  [605,]  326  414  792   74  834  219  666  823  918   576 #>  [606,]  304  588  307   90  595  812  536  181  520   162 #>  [607,]   71  264  113  385   88  666  215  918  541   792 #>  [608,]  974  157  469  475  536   95  307  595  717    79 #>  [609,]  415  683  227  383   97  152  306  844  775   772 #>  [610,]  751  728  767  826  240  372  784  699   59   516 #>  [611,]  551  349  356  488  616  158  409  922  854   715 #>  [612,]  345  922  135  551  556  101  887  764  349    16 #>  [613,]  150  244  448  568  566  739  842   41  502   273 #>  [614,]  183  950  910  248  663  878  366  837  412   710 #>  [615,]  698  169   94    6  111  878  927   47  624   361 #>  [616,]  430  715  158  551  193  349  854  761  855   471 #>  [617,]  744  971  560   57  813   24  377  983  903   588 #>  [618,]  450   74  833  824  414  792  548  166  758   851 #>  [619,]  253  711  310  105  921  121  993  743  138   476 #>  [620,]  624  503  736  913  103  965  169  460   94   737 #>  [621,]  982  144  576  703  538  424  629   98  410   354 #>  [622,]  562  294    8  979  815  677  455   58  470   526 #>  [623,]  135  764  887  508   46  612  958  345  440    32 #>  [624,]  503  737   94  169  927  620  477  615  361   111 #>  [625,]  860  830   44   63  894  584  550  896  948   577 #>  [626,]  582  864  391  267  771  604  462  399  332   439 #>  [627,]  442  391   83  582  626  802   68  449  267   452 #>  [628,]  821  207  771  546  477   39  903  509  399   381 #>  [629,]  144  770  184  621  208  129  703  689  576   439 #>  [630,]  650  840  841  355  885  125  952  788  517   173 #>  [631,]  315  642  764   45  556  508  633  930   80   988 #>  [632,]  140  153  696  697  798  931  905  331  199   586 #>  [633,]  315  678  642  655  116  365  752  631  930   159 #>  [634,]  686  532  423  477  472  949  216  782   58   453 #>  [635,]  807  364  192  397  699  454  445  185  830   543 #>  [636,]  185  869   33  635  163  984  397  688  278   327 #>  [637,]  360  370  105  742  567  662  444  239  481   910 #>  [638,]  808   73  776  920  549  196  702  759  309   685 #>  [639,]  289  199  905  333  843  140  734  697  141   464 #>  [640,]  540  373  929   61  388  190  269  469  380   974 #>  [641,]  362    7  374  735  214  584  594  745  237   961 #>  [642,]  930  633  631  315  985  988  764  678  241   561 #>  [643,]  522  715  398  371  581  616  486  738  612   376 #>  [644,]  963  531  134  232  847  806  849  667   43   917 #>  [645,]  754   77   19  559  548  213  202   52  384   303 #>  [646,]  901   62  521  160  726  198   23  804  587   725 #>  [647,]  342  101  820  312  564  875  922  329  623   887 #>  [648,]  330  524  479   17  309  868  435  398  233    28 #>  [649,]  701  162  774  118  595  511  940  290  749   891 #>  [650,]  722  298  517  355  630  590  173  990  249   747 #>  [651,]  421 1000  186  561  456  986  129  108  690    10 #>  [652,]  886  699  905  390  798  931  464  199  280   757 #>  [653,]   79   21  179  110  717  917  400   70  667   432 #>  [654,]  714  663  882  928  945  865  482  344  366   950 #>  [655,]  173  355  315  633  159  517  678  752  642   952 #>  [656,]  727  888  768  757  238  586   35  512  980     1 #>  [657,]  499   55  440  930  394  952  788  631  764   642 #>  [658,]  351  876  215  235  792   71  264  450  166   946 #>  [659,]  262  305  791  967  363  731  370   56  529   742 #>  [660,]  379  334  550  738  252  454   42  577  300   148 #>  [661,]  478  330  156  479  648   28  596  282  902   319 #>  [662,]  444  409  637  567  239  360  854  256  366   993 #>  [663,]  366  882  654  256  714  498  580  614  412   957 #>  [664,]  478  902    9  756  321  574  282  236  299   846 #>  [665,]  128  888   35  555   42   65  252  145  727    16 #>  [666,]  918  474  385  823  824   74  121  393  414   921 #>  [667,]  250  179  487  531  134  395  232  717  583   115 #>  [668,]  435  589   28  904  418  648  479   66  868   330 #>  [669,]  500  528  889  226  897  962  443  504  422   473 #>  [670,]   20  149  268  708  246  244  131  842  465   816 #>  [671,]  250  805  732  305  742  370  232  978  262   481 #>  [672,]   96  339  229  278  908  959  720  353  948   122 #>  [673,]  896   91  237  789  139    4  160  293  279   159 #>  [674,]  720   68  122  339  429  353  328  452  492   860 #>  [675,]  308  532   58  686  413  216  286  361  518    97 #>  [676,]  828  383  537  466  228  753  890  554  895   775 #>  [677,]  453   31  361  515  106    8  622  686  773     6 #>  [678,]  116  365  633  752  973  800  315  103  279   127 #>  [679,]   47  809  878  755  248  183  992  614  483   956 #>  [680,]  693   55  359  572  877  178  499  440  130   657 #>  [681,]  452  492  961  777  254   22  745  735  222   374 #>  [682,]   80  334  705  976  725  293  148  212  912   660 #>  [683,]  227  609  415   97  152  772  306  991  518   799 #>  [684,]   30  546  381  462  509   39  313  864  206   771 #>  [685,]   73   34  638  776  549  920   66  497  808   490 #>  [686,]  532  477  361  634  737  675  472  624   58   677 #>  [687,]  427  505  525  276  602  396  591  190  770   184 #>  [688,]  408  708   72  937  465  265  246  894  268   833 #>  [689,]  951  576  118  703   90   92  144  891  343   629 #>  [690,]   10  988 1000  456  561  747  424  986  558    45 #>  [691,]  724  254  850  222   22  411  750  242  302   961 #>  [692,]  895  899  846  236  811  753  786  580  516    85 #>  [693,]  877   55  680  499  130  657  440  820  564   359 #>  [694,]   35  266  138  888  350  757  567  993  662   372 #>  [695,]  884  779  914  451  346  610  431  143  405   751 #>  [696,]  153  798  238  586  390   13  697  632    1   323 #>  [697,]  331  141  734  905  798  323  210  696  586   100 #>  [698,]  615    6  111   47   94  878  169  755  809   286 #>  [699,]  464  652  397  886  223  407  807  610  163   364 #>  [700,]  602  995  120  990  722  825  298  270  794   184 #>  [701,]  162  774  649  511  744  891   90  118  940   606 #>  [702,]  196   82  318  320  808  364  759  378  901   660 #>  [703,]  576  621  689   76  168  424  951  335   88    90 #>  [704,]  312   16  101  922  612  376  138  848  887   875 #>  [705,]  976  835  682  508  107  725   45   80  334   912 #>  [706,]  219  834  547  543  401  354   72  326  982   825 #>  [707,]   68  627  926  442  674   83  802  332  626    30 #>  [708,]  688  408  465  268  246  869  265  833  670    72 #>  [709,]  382  746  176  842  937  459  187  165  936   273 #>  [710,]  571  762    5  975  837  863  485  740  743   476 #>  [711,]  619  743  837  105  310  384  476  176  253   921 #>  [712,]  934  761   53  715  800  534  616  729  430   103 #>  [713,]  345  856  234  581  322   16  371  612   75   764 #>  [714,]  654  882  945  344  663  928  461  482  865   580 #>  [715,]  616  712  761  643  430   53  611  934  551   349 #>  [716,]   51  917  939  881  806  653  113   36   70   817 #>  [717,]  179  115   79  536  168   76   70  667  230   205 #>  [718,]  968  848  178  572  312  987   16  704  803   243 #>  [719,]  960  214  410  975  746  597  832  936  468   175 #>  [720,]  452  492  681  961  674  735  374  122  948   908 #>  [721,]  772  234  799  729  306  133   75  534  394    53 #>  [722,]  298  650  990  794   99  590  198  925  700   211 #>  [723,]  514  243  178  769  968  898   40  572   38   931 #>  [724,]  691  254  850  411  242  222   22  147  961   750 #>  [725,]  148  726   23  334  682  976  705  835  804    45 #>  [726,]   23  725   62  160   45  646   80  682  804   976 #>  [727,]  768  888  656   35  987  757  372   40  586   238 #>  [728,]  765  530   41  513  287  285  510  739  592   376 #>  [729,]   75   53  234  712  800  534  715  581  593   721 #>  [730,]   61  669  962  373  500  123   15  400  226   263 #>  [731,]  529  970  182  859  260  659  228  791  838   460 #>  [732,]  805  671  250  342  466  890  647  305  101   875 #>  [733,]  102  225  778  375  761  506  201  934  737    27 #>  [734,]  141  100  128  748  333  697  905  369  148   252 #>  [735,]  222  961  745  641  594  362  584  302  452   374 #>  [736,]  103  913  255  620  678  938   75  116  503    12 #>  [737,]  624  503  477  361  102   94  733  927  225   169 #>  [738,]  577  660  300  592  471  287   42  759  550   781 #>  [739,]  502  989   41  150  598  275  392  405  436   765 #>  [740,]  763  175  416  837  158  916  910  710  832   459 #>  [741,]  117  901  752  315  159  646  631  856  517   378 #>  [742,]  481  370  967  360  637  194  578  671  262   230 #>  [743,]  975  936  176  711  851  310  746  710  921   833 #>  [744,]   24  617  813  511  971  774  251  701  162   560 #>  [745,]  961  594  222  735  362  641   22  850  569   214 #>  [746,]  936  176  975  187  851  719  709  763  743   214 #>  [747,]   10  456   62  690  249  590  726 1000  404   988 #>  [748,]  100   36  323  474  734  835  369  385  335    65 #>  [749,]  290  940  274  467  269  889  528  812  377   649 #>  [750,]  302  575  919  758  909  463  222   92  814   735 #>  [751,]  767  610  490  240  570  915   85  826  296   935 #>  [752,]  365  315  973  116  678  159   91  633  293   279 #>  [753,]   49  819  895  692  554  580  417  256  601   838 #>  [754,]  645   19   52  202  151  548  559  303  412   384 #>  [755,]   47  809  483  111  698  679  819  878  615   360 #>  [756,]  299  846  236  574    9  152  664  518   97   282 #>  [757,]   35  372  727  656  888  768  694  987    1   238 #>  [758,]  919  814  575  302  750  265  851  465  246   618 #>  [759,]  577  457  738  592  309  300  702  808  196   660 #>  [760,]  964  411  950   57  416  928    5  183  242   132 #>  [761,]  430  934  712  715  616   27  855  916  506   733 #>  [762,]  710  571  975  175  476    5  588  960  740   832 #>  [763,]  175  740  832  158  459  746  471  310  837   975 #>  [764,]  345  556  623  135  508  440  631  612  930    45 #>  [765,]   41  510  728  287  989  285  739  592  502   530 #>  [766,]  820  564  130  647  342   56   43  732  363   250 #>  [767,]  240  319  490  751   85  317  516  296   60   570 #>  [768,]  987  727  372   40  656   35  888  757  512   665 #>  [769,]  898   40   38  931  723  968  178  848  718   243 #>  [770,]  208  629  129  953  184  433  276   86  621   424 #>  [771,]  462  864  626  399  203   39  377  207  628   509 #>  [772,]  721  234  729  494  799  415  359  844  581   322 #>  [773,]  515    6  893  411  760   31  654  945  698   928 #>  [774,]  701  162  744  377  511  940  617  281  971    24 #>  [775,]  810  258  844  415  236  152  895  292   97   846 #>  [776,]  136  638  497  808  685  920  126   73  196   378 #>  [777,]  681  254  206  332  818  492  526  452  603   691 #>  [778,]  599  506  733  154  428   17  102  829  569   231 #>  [779,]  431  501  914  451  999  695  757    1  143   656 #>  [780,]  923  852  154  428  489  845  569  386  839   781 #>  [781,]  489  845  471  430  486  916  738  855  459   287 #>  [782,]  949  447  375  127  874  174  799  216  737   313 #>  [783,]  112  171  453  527  203  106  677  206  332    39 #>  [784,]  826  513   41  405  739  150  346  728  613   436 #>  [785,]  553  574  167    9   50  434  386  598  502   344 #>  [786,]  409  239  854   26  662  224  899  838  580   366 #>  [787,]  981  202  151   52  552   87   37  559  907   978 #>  [788,]  952  657  125  394  133  930  311  642  655   499 #>  [789,]   63  277  673  237  896  139   44  829   91   925 #>  [790,]  197  998  482  114  883  957  601  865  146   303 #>  [791,]  460  443  363  504  967  897  659  370  420   809 #>  [792,]   74  351  605  918  414  215  618  235  326   666 #>  [793,]    2  438  174  447  180  127  874  173  233   868 #>  [794,]  925   99  198  139  298  590  896   62  604    63 #>  [795,]  425  136  126  545   38  188  587  741  856   437 #>  [796,]  498  256  942  580  957  601  194  458   84   366 #>  [797,]  956  218  109  992  251  893  679  813   24   994 #>  [798,]  238  586  390  696  886  931  905  153  141   652 #>  [799,]  534  721  991  103   53  306  518  729  772   375 #>  [800,]  973  116  934  365  177  712  678  729  127   715 #>  [801,]   14  314   46  911  387  958  155  871  440   558 #>  [802,]  582  449   83  626  627  864  267  771  208   604 #>  [803,]   18  295  322  718  844  581  572  892  189   494 #>  [804,]  521  198  160  725  646   62  148  726  354   550 #>  [805,]  732  890  671  266  466  512  342  250  329   875 #>  [806,]  871  924  917  801  531  400  653  314   51   716 #>  [807,]  369  397  364  195  947  454  635  100  886   543 #>  [808,]  638  196  702   82  759   73  920  378  549   309 #>  [809,]   47  755  679  483  111  878  698  460  169   615 #>  [810,]  775  258  236  152   97  846  895  664  844   853 #>  [811,]  436  405  458  899   59  580  598  739  692   502 #>  [812,]  520  595  606  536  974  274  467  307  469   929 #>  [813,]   24  251  218  744  971  617  560  878  992   511 #>  [814,]  265  851  187  937  919  758  936  894  302   214 #>  [815,]  200  336  562  526  294    8  622  818  977   831 #>  [816,]  147  670   20  448  268  867  114  149  348   337 #>  [817,]  352   11  113  541  396  264  607  946   88    71 #>  [818,]  603  526  777  815  206  200  254  977  724   850 #>  [819,]   49  753  256  755  482  580  865  663  554   796 #>  [820,]  564  647  766  130  241  623  342  250  533    55 #>  [821,]  628  283  477  472  546  207  949  634  423   509 #>  [822,]  873  357   18  775  292  803  295  810  104   189 #>  [823,]  468  921  543  124  666  474  176  326  414   918 #>  [824,]  833   74  384  548  414  666  618  918  743   176 #>  [825,]   98  547   48  982  948  144  706  354  442   219 #>  [826,]  784  513   41  346  150  610  739  163  405   275 #>  [827,]  944  583  978  247   25  134   95  340  608   232 #>  [828,]  676  537  753  554  383  228  417  836  260   257 #>  [829,]  277  941  237    4  778  313  569  225  381   402 #>  [830,]  625  577  192  550  894  860   44  445  759   584 #>  [831,]  461  231  336  386   50  455  344  928    8   428 #>  [832,]  175  763  912  960  719  468  975  476  740   310 #>  [833,]  824   74  548  414  851  618  936  176  743   937 #>  [834,]  219  326  605  706   72  414  401  543  823   982 #>  [835,]  976  705  107  958  725  335  419   46  748   508 #>  [836,]  828  537  676  260  257  554  259  601  417    81 #>  [837,]  910  476  740  710  711  175  105  763  743   619 #>  [838,]  859  228  224  239  786  600  529  483  991   875 #>  [839,]  402  200  569  780  977  428  589  852  336   294 #>  [840,]  355  173  174  655  438  315  741  517  788   952 #>  [841,]  125  394  788  499  657  952  573  877  693   630 #>  [842,]  273  382  709  923  244  165  510  131  845   566 #>  [843,]  126  920  136  497  776  333  464  808  639   223 #>  [844,]  415  775  258  359  581  803  772  322  810   152 #>  [845,]  489  781  923  273  780  428  916  569  434   510 #>  [846,]  236  895  692  258  299  756  899  786  152   596 #>  [847,]  963  134   56  644  849  827   15  996  232   531 #>  [848,]   16  371  178  968  718  704  665  856  376   987 #>  [849,]  963  653  134  847  996   79  644   70  540   531 #>  [850,]  961  254  745  691  222  724  735  566  681   908 #>  [851,]  936  975  743  814  746  187  176  833  937   919 #>  [852,]  780  493  923  861  392  566  908  154  845   959 #>  [853,]  288  292   85  240  664  810  321  895  317   692 #>  [854,]  409  158  349  616  551   27  910  430  488   786 #>  [855,]  177  941  193  430  279  616   12  761  934   916 #>  [856,]  713  892  371  322  117  572  848  188   16   581 #>  [857,]  557   29  495  147  149  816  484  670  209   544 #>  [858,]  210  341  387  155  211  545  587  331   14   249 #>  [859,]  228  838  529  224  731  991  329  383  239   875 #>  [860,]  625   44  896  362  641    7   63  830  374   948 #>  [861,]  493  296  852  491  570  915  392  568  275    67 #>  [862,]  245  391   83  281  972  627  909  332  442   582 #>  [863,]  571  485  710  919    5  463  762  575   93   975 #>  [864,]  462  604  626  771  267  509  439  399  186   925 #>  [865,]  945  482  197  654  893  714  819  663  114   412 #>  [866,]   87  451  164  327  149  914   77  495   84   999 #>  [867,]  446  114  816  147  724  773  197  161  893   515 #>  [868,]  233  325  524  648  435  309  330   17  599   142 #>  [869,]  708  688   29  268   33  408  278  544  984   465 #>  [870,]  157  403   25  946   11  352  264  475  608   880 #>  [871,]  806  314  801  514   14  387  924  917  130    46 #>  [872,]  271   67  904  418  478  519  321  664  479   661 #>  [873,]   18  295  803  490  767  718   85  292  751   357 #>  [874,]  447  949  174  782  793  127  840  325  546   799 #>  [875,]  329  593  101  922  239  647  312  409  342   349 #>  [876,]  235  215  213  880  658   37  166   19  450   559 #>  [877,]  693  499  130   55  680  657  573  394  440   564 #>  [878,]  183   47  169  615  950  698  679  809  927   111 #>  [879,]  993  151  202   84   52  105  694  384  444   253 #>  [880,]  347   95  403  475  552   37  191  307  876   608 #>  [881,]  939  917  716  153   51   70  531  980  323   696 #>  [882,]   26  663  714  366  580  344  654  928  256   498 #>  [883,]  966  303  535  146  559  484  994  412  164    84 #>  [884,]  914  346  695  451  348  779  999  539  164   405 #>  [885,]  573  284  301  558  155  499  249  911  952   387 #>  [886,]  390  905  652  798  141  369  238  100  665   931 #>  [887,]  350  135  101  922  623  567  138  612  551   349 #>  [888,]  727   35  656  665  757  238  768  586  694   372 #>  [889,]  528  500  467  269  406  422  669  965  274   749 #>  [890,]  805  466  266  512  272  732  441  671  143   694 #>  [891,]  951  181  162  118   90  701  689   92  166   281 #>  [892,]  322  494  856  117  713  581  572  803  325   189 #>  [893,]  865  773  515  698    6  945  654  251  994   950 #>  [894,]  937  187  584  265  814  948   72  709  746   641 #>  [895,]  692  236  846  899  753  258  786   49   85   811 #>  [896,]  237  673    7  374  362   44  789  860   63   604 #>  [897,]  443  504  520  363  791   15  996  467  812   533 #>  [898,]  769   38  188  333  931  848  178  141   40   723 #>  [899,]  692  811  895  516   59  786  272  846  266   409 #>  [900,]  191  347  994  248  181  563  412  340  880    19 #>  [901,]  646  587  160  378   82  741   23  521  702   320 #>  [902,]  282    9  574   28  479  478  154  785  299   506 #>  [903,]  560  207  965  108  377  617  971  940  620   927 #>  [904,]   66  668  479  418  271  330  478  435  661    28 #>  [905,]  886  199  141  798  333  734  652  931  697   390 #>  [906,]   48  984   92  450  658  351  750  209  605   618 #>  [907,]   87  535   84  787  879  999  202  151  559     1 #>  [908,]  584  959  852  961  566  246  850  860  830   745 #>  [909,]  302  750  575   22  463  281  452  343  222    93 #>  [910,]  837  444  854  740  969  366  614  488  637   158 #>  [911,]  558  988  690  801   10  107   45  958   14   205 #>  [912,]  832  212  976  175  960  468  538  986  682   705 #>  [913,]  938  255  358  736  488  503  103  611  460   356 #>  [914,]  451  884  779  999  866  346  164  501  513   695 #>  [915,]  570  549  296  490  275  861  392   73  767   592 #>  [916,]  430  416   27  740  761  855  489  616  158   854 #>  [917,]  531  395  487  716  314  115  806  881  179    36 #>  [918,]  666  474   74  792  335  823  385  824  414   711 #>  [919,]  758  575  302  863  814  851  750  485  463   571 #>  [920,]  638  223  808  126   73  490  549  776  685    60 #>  [921,]  310  176  172  823  124  619  121  743  555   379 #>  [922,]  612  101  887  551  135  345  349  875  704   593 #>  [923,]  273  845  780  434  842  489  553  428  386   502 #>  [924,]  806   21  284  871  400  432  801  653  110   573 #>  [925,]   99  604  794  590  139  789  896  864  462    63 #>  [926,]   30  684  546  462  180  707  509  771  864   802 #>  [927,]  169  503  624   94  938  615  878  416  737   969 #>  [928,]  344  461  434   50  714  882  831  654   26   386 #>  [929,]  469  974  540  812  595  749  388  520  608   536 #>  [930,]  642  985  631  241  440  764  657  633  952   988 #>  [931,]  798   40  769  905  898  652  886  586  141   727 #>  [932,]  401   71  834  607  219  605  326  792  947   984 #>  [933,]   78  301  591  573  284  190  885  473  432    86 #>  [934,]  712  761  177   12  800  855  103  973  430   715 #>  [935,]  751  464  490  570  699  610  915  826  920   549 #>  [936,]  851  975  743  746  176  187  719  814  937   214 #>  [937,]  187  894  265  814   72  851  936  176  746   709 #>  [938,]  488  913  969  503  927  460  224   27  611   358 #>  [939,]  881  716   51  153  917  696   70  323   36   113 #>  [940,]  377  274  129  290  774  903  749  560  511   812 #>  [941,]  855    4   12  829  177  279  916  430  193    91 #>  [942,]  796  999   84  441  601  554  535  194  146    81 #>  [943,]  324  528  426  889  467  182  269  290  338   500 #>  [944,]  247  827  388  608   25  347  340  880  974   157 #>  [945,]  714  865  654  482  461  161  344  819  882    49 #>  [946,]  352  264  579  351  403  703  817  870   76   576 #>  [947,]  195  543  124  393  172  327   72  666  824   823 #>  [948,]  894  860  584  265  641  547  187  937  625   362 #>  [949,]  447  782  874  546  477  127  634  381  737   174 #>  [950,]  183  614  878  760  964    5  663  910  654   710 #>  [951,]   90  689   92  343  891  118  576  181   93   162 #>  [952,]  788  657  930  642  311  394  133  655  125   499 #>  [953,]  208  433  129  770   86  651  456 1000  421   274 #>  [954,]  997  120  579  401  507  932  906  602  984    48 #>  [955,]  870   25  157  880  403  876  347   95   11   608 #>  [956,]  797  679  992  809  755   47  218  698  286   878 #>  [957,]  998  498  482  197  458  796  580  663  436   256 #>  [958,]  107   46  835   32  623  508  705  976   14   314 #>  [959,]  566  908  852  244  246  568  850  278  465   584 #>  [960,]  719  410  832  538  597  975  468  762  214   175 #>  [961,]  745  735  222  850  594  681  362  641  584    22 #>  [962,]  226  500  669  311  422  137  133  261  263   283 #>  [963,]  644  847  134  849  232  531   70  827   56   583 #>  [964,]   57  485  132  760  983    5  594  411  710   463 #>  [965,]  903  560  467  620  108  207  255  274  504   617 #>  [966,]  559  883  303  484  645   87  535  213  202   754 #>  [967,]  481  742  370  360  578  230  262  637  305   791 #>  [968,]  178  718  243  848  312   40  572  704   16   512 #>  [969,]  488   27  938  483  910  416  600  854  916   111 #>  [970,]  306  731  529  991  859  799  620  182  534   228 #>  [971,]  560  617  813  207  744  527   39  399  377   983 #>  [972,]  118  245  281   83  582  343  689  862  442    92 #>  [973,]  800  116  365  177  752  678  934  279  293   855 #>  [974,]  469  608  536  812  520  929  595  475  540   307 #>  [975,]  936  743  851  746  710  719  762  571  176   410 #>  [976,]  705  835  912  682  107  725  508  334  468    45 #>  [977,]  200  526  402  562  839  294  603  589    8   492 #>  [978,]  583  232  671  787  389  742  981  552  481   340 #>  [979,]  470  367  161  455  170   58  622  204  831   515 #>  [980,]    1  656  238  586  153  389  881  727  757   696 #>  [981,]  552  787   52  151  202   19  230  105  578   235 #>  [982,]  621   98  354  144  576  270  605  538  834   468 #>  [983,]   57  132   69  964   22  399   39  617  594   463 #>  [984,]  219  834   33  906  326   48  932   72  605   414 #>  [985,]  241  930  533  642  311  473  564  504   32   988 #>  [986,]  186  421 1000  456  651  561  912  597   10   690 #>  [987,]  372  768   35  727  376  757   40  888  665   530 #>  [988,]  690   10  561   45  558  508 1000  911  642   456 #>  [989,]  598  502  167  510  486  287  739  765  392    41 #>  [990,]  211  298  995  722  249  587  646  341  198   521 #>  [991,]  518  534   53  799  152  600  306  859  529   970 #>  [992,]  218  679  956  813  809   24  797  511   47   878 #>  [993,]  879  444  619  384  105  151  694  253  711   662 #>  [994,]  412  191  900  883  197  303  248  865  340   893 #>  [995,]  404  270  249  602  211  298  747  990  341    62 #>  [996,]   15  897  179  363  667  443  540  974  134    79 #>  [997,]  120  954  906   48  579  825  144  972  276   576 #>  [998,]  197  957  482  114  303  498  412  796  654   663 #>  [999,]  942   84  535  441  796  907  458  879  914   266 #> [1000,]  456  421  690   10  561  986  651  186  988   424 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.61163517 0.6135253 0.6913840 0.7129823 0.7553842 0.8128024 0.8891575 #>    [2,] 0.63129600 0.6762456 0.6996558 0.8061170 1.1585501 1.3850537 1.4052622 #>    [3,] 0.89814890 1.1032247 1.5368671 1.5897787 1.6163052 1.7350254 1.7987848 #>    [4,] 0.35363022 0.3766537 0.3858123 0.4372660 0.5170674 0.5637341 0.5793640 #>    [5,] 0.27609715 0.3209740 0.3723564 0.4262079 0.4607784 0.4728922 0.4924352 #>    [6,] 0.37628853 0.3989867 0.5711063 0.5860866 0.6237970 0.6380328 0.6575152 #>    [7,] 0.19502398 0.2432616 0.2721334 0.4564948 0.4825303 0.6439947 0.6500213 #>    [8,] 0.45728068 0.4870014 0.4958056 0.5016096 0.5658458 0.6094482 0.6990602 #>    [9,] 0.12176819 0.2950063 0.3515161 0.4900059 0.5624836 0.5699545 0.5985999 #>   [10,] 0.10532073 0.3592579 0.4019809 0.4305954 0.4984337 0.5275916 0.5424743 #>   [11,] 0.32417785 0.5354088 0.8258400 0.9352301 0.9481123 0.9575089 1.0736834 #>   [12,] 0.38581234 0.3888459 0.4070295 0.4277738 0.4369935 0.4592833 0.4612017 #>   [13,] 0.80932522 0.8346574 0.9202660 0.9285036 1.0487673 1.0538615 1.0860292 #>   [14,] 0.40877636 0.4296056 0.4724614 0.5850073 0.6389190 0.6412419 0.7192994 #>   [15,] 0.47064827 0.5066234 0.6070111 0.6684414 0.7403758 0.9414466 0.9653818 #>   [16,] 0.35602338 0.4013802 0.4190740 0.5131094 0.5429400 0.5866771 0.5878128 #>   [17,] 0.34489464 0.4636551 0.5192793 0.5266486 0.5733076 0.6101705 0.6301933 #>   [18,] 0.49487639 0.6970574 0.8129116 1.0506519 1.1257066 1.1752569 1.2008796 #>   [19,] 0.41204801 0.4271220 0.4430797 0.4461668 0.5058139 0.5138351 0.6125040 #>   [20,] 0.23819931 0.7006711 0.7810015 0.8275570 0.8694149 0.8801923 0.9126869 #>   [21,] 0.28315452 0.3642757 0.5956339 0.6492154 0.7065950 0.7737067 0.7822590 #>   [22,] 0.49528400 0.4965968 0.5082121 0.5299167 0.5629332 0.6065198 0.6098942 #>   [23,] 0.35752222 0.4162810 0.4603005 0.5691726 0.6203677 0.6472811 0.6598487 #>   [24,] 0.32935265 0.3481201 0.4461766 0.5425419 0.5736080 0.5999474 0.6552467 #>   [25,] 0.49800585 0.8164395 0.8522809 0.8750358 1.0084653 1.0185452 1.0190882 #>   [26,] 0.33990152 0.4565522 0.5086029 0.5171921 0.5339742 0.5402686 0.5483217 #>   [27,] 0.29936042 0.3583976 0.3742121 0.4136836 0.4590087 0.4722274 0.5339742 #>   [28,] 0.50500060 0.5370323 0.5383660 0.6904692 0.7213851 0.7599748 0.7659849 #>   [29,] 0.40971328 0.8132447 0.8251296 0.9333985 0.9339558 0.9483383 0.9968869 #>   [30,] 0.34807105 0.7153810 0.9144785 0.9149601 1.0180504 1.0540351 1.1240596 #>   [31,] 0.27701128 0.4332539 0.4497544 0.6696504 0.6823485 0.6843793 0.7210513 #>   [32,] 0.47865648 0.4902074 0.4993451 0.5036171 0.5488292 0.5913470 0.5987923 #>   [33,] 0.82681452 0.9333985 0.9681346 1.0334100 1.2705616 1.4134781 1.4668401 #>   [34,] 0.79298070 0.8220972 1.1241716 1.2172803 1.2769555 1.4108729 1.4260483 #>   [35,] 0.34558726 0.3702092 0.3717383 0.4141353 0.4469935 0.4514866 0.5148118 #>   [36,] 0.49774394 0.5049946 0.5358639 0.5375897 0.5920210 0.6627264 0.6823486 #>   [37,] 0.46356279 0.6316444 0.7681231 0.7746827 0.7851902 0.8131079 0.8178939 #>   [38,] 0.62892817 0.6729307 0.6845856 0.7961923 0.8372441 0.8643933 0.8727243 #>   [39,] 0.29158114 0.5517506 0.5772049 0.5902056 0.6199791 0.6830367 0.7631499 #>   [40,] 0.44246515 0.5307184 0.6068686 0.6259809 0.6281919 0.6289469 0.7203485 #>   [41,] 0.29756102 0.4377380 0.4979916 0.5258520 0.5391653 0.5429184 0.5436878 #>   [42,] 0.36017886 0.4353936 0.4436585 0.4512288 0.4650741 0.4923810 0.4934921 #>   [43,] 0.90943312 0.9251836 0.9295271 0.9440216 1.0394386 1.0680748 1.0944421 #>   [44,] 0.37715538 0.4253854 0.4552518 0.6114672 0.6684750 0.7012308 0.7465999 #>   [45,] 0.30614263 0.4603005 0.4619395 0.4927835 0.5001631 0.5177791 0.5186687 #>   [46,] 0.30853299 0.3868231 0.4296056 0.4997511 0.5530897 0.5678200 0.6096445 #>   [47,] 0.21295814 0.2860438 0.3610922 0.3976588 0.4205361 0.4522741 0.4927272 #>   [48,] 0.83017895 0.8611287 0.8811211 0.8851540 0.9275355 0.9496037 0.9606343 #>   [49,] 0.36578040 0.4146402 0.6727394 0.7695295 0.7709334 0.7834074 0.8292958 #>   [50,] 0.39113923 0.4408032 0.4479291 0.4569902 0.5010619 0.5061542 0.5164213 #>   [51,] 0.28101001 0.8399900 0.8416160 0.9400313 0.9487577 1.0240322 1.1359231 #>   [52,] 0.16006271 0.2308148 0.4271220 0.4435606 0.4710908 0.5562532 0.5660106 #>   [53,] 0.27599437 0.3578974 0.4089000 0.5111125 0.5953967 0.5999233 0.6046245 #>   [54,] 1.99036192 2.0296358 2.1103730 2.1402782 2.1412646 2.1546192 2.2014268 #>   [55,] 0.37337760 0.4993037 0.5237359 0.5440849 0.5773712 0.6318411 0.7124895 #>   [56,] 0.66844144 0.6718185 0.7477894 0.7752692 0.7781405 0.7834649 0.8786306 #>   [57,] 0.20007502 0.2604581 0.3489787 0.3841412 0.5187701 0.5516379 0.5888544 #>   [58,] 0.81900912 0.8253050 0.9774040 0.9832797 1.0116622 1.0285265 1.0972230 #>   [59,] 0.46451059 0.5400869 0.5604123 0.5876751 0.6419681 0.6578705 0.6973227 #>   [60,] 0.54084558 0.5569414 0.6069867 0.6166761 0.7184812 0.7371370 0.7439456 #>   [61,] 0.57142187 1.0485374 1.3377872 1.4778540 1.5050031 1.5385358 1.5503570 #>   [62,] 0.38684927 0.4718914 0.4926281 0.5166378 0.5527695 0.5741034 0.6598487 #>   [63,] 0.37715538 0.4750999 0.6129597 0.6494701 0.6715243 0.6925889 0.7175151 #>   [64,] 1.07068680 1.1212602 1.1270584 1.1315925 1.1659217 1.2293357 1.2862957 #>   [65,] 0.29314666 0.3105460 0.3149457 0.4112601 0.4270587 0.4502319 0.4923810 #>   [66,] 0.72981904 0.8220972 0.8540049 0.9058932 0.9738354 1.0470487 1.0548390 #>   [67,] 0.41880311 0.7320756 0.7473548 0.7714125 0.7962174 0.8480161 0.9504819 #>   [68,] 0.95572643 0.9809436 1.0456063 1.0457727 1.0766656 1.1228671 1.1269083 #>   [69,] 0.48388040 0.5021642 0.5082121 0.5517506 0.6133787 0.6548102 0.7780221 #>   [70,] 0.60975768 0.6590402 0.7522149 0.7821732 0.8206138 0.8787826 0.9151371 #>   [71,] 0.59934650 0.8105872 0.8112886 0.8202397 0.9111564 0.9989390 1.0021487 #>   [72,] 0.44612717 0.5056200 0.5155284 0.5437904 0.6242941 0.6263205 0.6339338 #>   [73,] 0.41447280 0.5468834 0.5597664 0.7317968 0.8421457 0.8540049 0.8545776 #>   [74,] 0.32909403 0.4252186 0.4283509 0.4382560 0.4529424 0.4954609 0.5311627 #>   [75,] 0.38410253 0.4127746 0.4909708 0.5475822 0.5793252 0.6046245 0.6055459 #>   [76,] 0.29983157 0.4939803 0.5423750 0.6141672 0.6210010 0.6567121 0.6636568 #>   [77,] 0.36088734 0.3867988 0.5591224 0.5652773 0.5714871 0.6570808 0.6821704 #>   [78,] 1.07822283 1.3433867 1.4271338 1.4647974 1.4803869 1.4967875 1.5518626 #>   [79,] 0.39983211 0.4720038 0.5282013 0.6097577 0.6320230 0.7707903 0.7748116 #>   [80,] 0.34096293 0.3517397 0.3880264 0.4414143 0.4619395 0.5543523 0.5605273 #>   [81,] 0.37333318 0.7831849 0.8765593 0.8851496 0.9622016 0.9884960 0.9917629 #>   [82,] 0.18746085 0.3878519 0.4474533 0.5969208 0.6666750 0.6784398 0.6941300 #>   [83,] 0.62342577 0.6569672 0.7009100 0.7022335 0.8828443 0.8999611 0.9656957 #>   [84,] 0.31797018 0.5357635 0.5477915 0.5564808 0.5831587 0.6681020 0.6737728 #>   [85,] 0.48641497 0.5775035 0.5913949 0.5929426 0.6862134 0.7533895 0.7814104 #>   [86,] 0.54314067 0.5887154 0.7167080 0.8143663 0.8164982 0.8404996 0.8736101 #>   [87,] 0.44171938 0.5447741 0.5540991 0.5846650 0.6206927 0.6681020 0.6968998 #>   [88,] 0.21369232 0.4346140 0.4914069 0.5358639 0.6210010 0.7411241 0.7593464 #>   [89,] 0.72348988 0.7962706 0.8756221 0.9015587 0.9353123 0.9560214 0.9983261 #>   [90,] 0.29765206 0.5213158 0.5474249 0.5594343 0.6172718 0.6506966 0.6612070 #>   [91,] 0.30772259 0.3766537 0.4133342 0.4602642 0.4874996 0.4936052 0.5049543 #>   [92,] 0.55722103 0.5583189 0.6976104 0.7096263 0.7225951 0.7304182 0.7555828 #>   [93,] 0.48132146 0.5093461 0.5213158 0.5454773 0.5799233 0.5825263 0.5893067 #>   [94,] 0.25365754 0.3117967 0.3324490 0.4149170 0.4380561 0.5043863 0.5058467 #>   [95,] 0.46356279 0.6086583 0.6329897 0.7032703 0.7056897 0.7059321 0.7522149 #>   [96,] 0.45240271 0.9679793 1.0293301 1.0329208 1.1215798 1.2724989 1.2858344 #>   [97,] 0.46423943 0.5189654 0.7712689 0.7794460 0.8418950 0.8498453 0.8714417 #>   [98,] 0.56270048 0.5992763 0.6720937 0.7040460 0.7230334 0.7295289 0.7469149 #>   [99,] 0.36904821 0.6117359 0.6589157 0.7692120 0.8341757 0.8883617 0.8924700 #>  [100,] 0.33175303 0.4435611 0.4849263 0.6658844 0.6719288 0.6741663 0.6793879 #>  [101,] 0.27427257 0.3366732 0.3992004 0.4222183 0.4379752 0.4476941 0.4556445 #>  [102,] 0.19580280 0.5044167 0.5989418 0.6071781 0.6119285 0.6266729 0.6372784 #>  [103,] 0.43170140 0.5057997 0.5061147 0.5693230 0.5857026 0.5859562 0.5939755 #>  [104,] 1.32263605 1.4481103 1.4771925 1.5299180 1.5410215 1.5412047 1.5583993 #>  [105,] 0.39718360 0.4205327 0.4601454 0.4911663 0.4952194 0.5027612 0.5125963 #>  [106,] 0.45334637 0.5442953 0.6133787 0.6823485 0.6830367 0.7361752 0.8302580 #>  [107,] 0.26172432 0.4020952 0.4786565 0.4829069 0.4891576 0.5530897 0.5754626 #>  [108,] 0.53942185 0.5544224 0.5634765 0.6442400 0.7399629 0.7493418 0.7509012 #>  [109,] 0.71927566 0.8009632 0.9102882 0.9119423 0.9447306 0.9607247 1.0150547 #>  [110,] 0.28315452 0.3346488 0.6899303 0.6921504 0.7517425 0.7528170 0.8325625 #>  [111,] 0.33244897 0.3599808 0.3890124 0.4019862 0.4444215 0.4522741 0.4946091 #>  [112,] 0.44279886 0.7988115 0.9514972 0.9890049 1.0020824 1.1733777 1.2029835 #>  [113,] 0.21369232 0.5110256 0.5375897 0.6061687 0.6433930 0.6809345 0.7445213 #>  [114,] 0.40885042 0.4968671 0.6808738 0.7961570 0.8002493 0.8301018 0.8535305 #>  [115,] 0.31609850 0.4443583 0.4939803 0.5555802 0.6320230 0.6376223 0.6625919 #>  [116,] 0.20106165 0.2703147 0.2819084 0.3158657 0.4350896 0.5053310 0.5559441 #>  [117,] 0.54017560 0.6264814 0.6704397 0.6795120 0.7030836 0.7275892 0.7312845 #>  [118,] 0.50081661 0.6144610 0.6181847 0.6315900 0.7286528 0.7304182 0.7472157 #>  [119,] 1.10322473 1.2020179 1.4333519 1.4974410 1.5381453 1.7222832 1.7335942 #>  [120,] 0.99204288 1.0757101 1.1829831 1.1929697 1.2087139 1.2498854 1.3017788 #>  [121,] 0.31889393 0.4004371 0.4216533 0.4247100 0.4588688 0.5167268 0.5211497 #>  [122,] 0.96225914 1.0585051 1.0680267 1.1240587 1.2318916 1.3209852 1.3278333 #>  [123,] 0.79740564 1.0879605 1.1390967 1.1938649 1.2484414 1.2570596 1.3022203 #>  [124,] 0.20934311 0.2804462 0.4258755 0.4751395 0.4846300 0.5209023 0.6020462 #>  [125,] 0.50452287 0.6747480 0.6760141 0.7995320 0.9374038 1.0054546 1.0083524 #>  [126,] 0.68065348 0.7961923 0.8028757 0.9622609 0.9632246 0.9658617 0.9872435 #>  [127,] 0.57755823 0.5857026 0.6055849 0.6129432 0.6355996 0.6504413 0.6523314 #>  [128,] 0.42705865 0.4384220 0.4840091 0.5409792 0.5413797 0.5797763 0.5923236 #>  [129,] 0.50858358 0.5361181 0.5609486 0.6299886 0.6349631 0.6827840 0.6849042 #>  [130,] 0.59034663 0.6245888 0.6338577 0.6937263 0.7139307 0.8145866 0.8430281 #>  [131,] 0.29612614 0.5373021 0.5669288 0.6007421 0.6398185 0.7006711 0.7232025 #>  [132,] 0.20007502 0.3534926 0.3626244 0.5004716 0.5064871 0.5238548 0.5423290 #>  [133,] 0.57621899 0.6102636 0.6916062 0.7139384 0.7623725 0.7901013 0.7996258 #>  [134,] 0.59465104 0.6147713 0.6343899 0.6718185 0.8034461 0.8059398 0.8356453 #>  [135,] 0.28703477 0.3735126 0.3817846 0.4234922 0.4369733 0.4480917 0.4657576 #>  [136,] 0.53199693 0.6200006 0.6806535 0.9811346 1.0650322 1.1515314 1.1944832 #>  [137,] 0.62597808 0.7287555 0.9022343 0.9923767 1.0105388 1.0545660 1.0803445 #>  [138,] 0.29617228 0.3329625 0.4801979 0.4960290 0.5319259 0.5677574 0.5729964 #>  [139,] 0.56278762 0.5954642 0.6129597 0.6144407 0.6684750 0.6716285 0.7232971 #>  [140,] 0.42741318 1.0564455 1.0573029 1.1607246 1.1662326 1.1694567 1.1833639 #>  [141,] 0.27857413 0.5550911 0.5923236 0.5926501 0.6044645 0.6195026 0.6719288 #>  [142,] 0.74281994 0.8266638 0.8268783 0.8539076 0.9184729 0.9563153 0.9609684 #>  [143,] 0.77563200 0.9039226 0.9622016 0.9765489 1.0000420 1.0832955 1.1064254 #>  [144,] 0.49925939 0.5140250 0.5990525 0.5992763 0.6688554 0.7505240 0.7639140 #>  [145,] 0.51061248 0.5678200 0.5797763 0.6013720 0.6051508 0.6473825 0.7063458 #>  [146,] 0.61226423 0.6593153 0.7341950 0.7544457 0.7733016 0.7993059 0.8542374 #>  [147,] 0.90979959 0.9459737 0.9910474 1.0212678 1.0257129 1.0727279 1.1148535 #>  [148,] 0.26145741 0.3168213 0.4313392 0.4502319 0.4803468 0.5247686 0.5413797 #>  [149,] 0.49585188 0.5714871 0.7368765 0.7665104 0.7810015 0.7837297 0.8251296 #>  [150,] 0.25579274 0.4819460 0.5653870 0.5778491 0.6286658 0.7104944 0.7270490 #>  [151,] 0.15786141 0.1600627 0.4412568 0.5067220 0.5132728 0.5138351 0.5200202 #>  [152,] 0.43111736 0.4642394 0.6243076 0.6335233 0.6368033 0.6833733 0.7226294 #>  [153,] 0.31652481 0.7263023 0.7399288 0.7641059 0.8699077 0.8853091 0.9064671 #>  [154,] 0.39320438 0.4283099 0.4732493 0.5624836 0.5678294 0.5781658 0.5833851 #>  [155,] 0.26964687 0.6389190 0.7397684 0.7602041 0.7808823 0.8024522 0.8114522 #>  [156,] 0.59076606 0.6383327 0.7133761 0.7797259 0.9576530 0.9788343 0.9993599 #>  [157,] 0.48841882 0.4980058 0.6366082 0.6622719 0.7059321 0.7952038 0.8467807 #>  [158,] 0.35282476 0.3609215 0.3664024 0.3786495 0.4209539 0.4286723 0.4337903 #>  [159,] 0.38945854 0.4809801 0.4908901 0.5515895 0.5815259 0.5978109 0.6425980 #>  [160,] 0.47189137 0.4886183 0.5301617 0.5391911 0.5605273 0.5913973 0.5954642 #>  [161,] 0.63951522 0.6981730 0.6982639 0.7708351 0.8679348 0.9006993 0.9015587 #>  [162,] 0.18372461 0.5969013 0.6612070 0.6855277 0.6894189 0.7162495 0.7246447 #>  [163,] 0.54833910 0.6421531 0.7999031 0.9021442 0.9267991 0.9495484 0.9526307 #>  [164,] 0.80194062 0.8788152 0.8893769 0.9062564 0.9254244 0.9920726 1.0012915 #>  [165,] 0.29612614 0.3723564 0.4101236 0.5510293 0.5675657 0.5877549 0.5960280 #>  [166,] 0.37023671 0.5997286 0.6379400 0.6691162 0.6954494 0.7047087 0.7336381 #>  [167,] 0.30405060 0.3250473 0.4483887 0.4484374 0.5107357 0.5355933 0.5490981 #>  [168,] 0.29466951 0.2998316 0.5122934 0.5555802 0.5826002 0.6979966 0.6993741 #>  [169,] 0.25365754 0.2900317 0.3403962 0.4444215 0.4603972 0.4677869 0.4800769 #>  [170,] 0.69724757 0.7704725 0.7708351 0.7995357 0.8328141 0.8756221 1.1168240 #>  [171,] 0.82502236 0.9381688 0.9447306 0.9514972 1.0812213 1.0882949 1.2053888 #>  [172,] 0.20934311 0.3614464 0.3946586 0.4589471 0.4756942 0.6039934 0.6156830 #>  [173,] 0.23640060 0.3282719 0.4785826 0.5515895 0.6688807 0.7683008 0.7852947 #>  [174,] 0.76121652 0.7766485 0.8231301 0.9112659 0.9151182 0.9228819 0.9950317 #>  [175,] 0.19501765 0.2118300 0.3136395 0.4515865 0.4697882 0.4745208 0.4837275 #>  [176,] 0.32036064 0.3321248 0.3422599 0.3467198 0.3800791 0.4404356 0.4542567 #>  [177,] 0.30709261 0.3382569 0.4209831 0.4369935 0.4533841 0.4705861 0.4767832 #>  [178,] 0.34698261 0.3664360 0.4845629 0.5530461 0.6529608 0.6533612 0.6693927 #>  [179,] 0.28849248 0.4443583 0.4720038 0.4913428 0.6790748 0.6793003 0.6998759 #>  [180,] 0.63129600 0.9324112 0.9687646 1.0047602 1.0448212 1.0794229 1.1014236 #>  [181,] 0.37023671 0.5766179 0.6172718 0.6264115 0.6465644 0.6525075 0.6822434 #>  [182,] 0.67165165 0.7974056 0.8850837 0.9061634 0.9181052 0.9360013 0.9872906 #>  [183,] 0.17125143 0.2466462 0.3755624 0.5942567 0.5959112 0.6317768 0.6542462 #>  [184,] 0.44565186 0.5561592 0.7505240 0.7570914 0.9149154 0.9169684 0.9550853 #>  [185,] 0.64215315 0.9333197 1.0819056 1.1982709 1.2081557 1.2821119 1.3508383 #>  [186,] 0.21446472 0.3176033 0.3826668 0.4085023 0.4145980 0.4874103 0.5792537 #>  [187,] 0.23231854 0.3400864 0.3798944 0.4140197 0.4365151 0.4494678 0.4685279 #>  [188,] 0.68280951 0.7005687 0.7488515 0.7611547 0.7808823 0.7951380 0.8140111 #>  [189,] 0.75789119 0.8981489 0.9469261 0.9551505 0.9939786 1.0630545 1.2008796 #>  [190,] 0.83551429 0.9456435 1.0070826 1.1542264 1.1904609 1.3211612 1.3434941 #>  [191,] 0.59025537 0.5946627 0.6181295 0.6568808 0.7624128 0.8088757 0.9056109 #>  [192,] 0.42998499 0.6411641 0.6750526 0.6869848 0.6881974 0.7103497 0.7238952 #>  [193,] 0.30343533 0.3517426 0.3545098 0.4171184 0.4337903 0.4364411 0.5131310 #>  [194,] 0.51709641 0.5620648 0.5835258 0.6336015 0.6379176 0.6435360 0.7009107 #>  [195,] 0.31996532 0.3946586 0.4258755 0.5121703 0.5756127 0.6467365 0.6613616 #>  [196,] 0.18746085 0.2659214 0.4946386 0.5158994 0.6267668 0.6964684 0.7071022 #>  [197,] 0.30044775 0.3438626 0.4088504 0.5276910 0.5720539 0.6407614 0.6648263 #>  [198,] 0.46251245 0.5166378 0.5202275 0.5669344 0.6144407 0.6296180 0.6693887 #>  [199,] 0.51158817 0.7888410 0.8465192 0.8862421 0.9762424 0.9809682 1.0221270 #>  [200,] 0.33163195 0.4251985 0.5633400 0.6095998 0.6155090 0.6574899 0.6703174 #>  [201,] 0.27701128 0.4020498 0.4669889 0.5658458 0.5828885 0.5893963 0.6119285 #>  [202,] 0.15786141 0.2308148 0.4343279 0.4461668 0.4927239 0.5096834 0.5226789 #>  [203,] 0.69928939 0.8441214 0.9949192 1.0020824 1.0466586 1.0593460 1.0798237 #>  [204,] 1.11805136 1.1355190 1.3954830 1.4340583 1.4489787 1.4980738 1.5114022 #>  [205,] 0.51229343 0.6376223 0.6567121 0.6716722 0.6793003 0.6797378 0.7028606 #>  [206,] 0.70576071 0.7361752 0.8201544 0.8803190 0.9348590 0.9588082 0.9729493 #>  [207,] 0.40844239 0.4568635 0.5749741 0.5772049 0.6151073 0.6355014 0.6715658 #>  [208,] 0.43231058 0.4582625 0.5085836 0.6914780 0.8982850 0.9080092 0.9116127 #>  [209,] 0.72021559 0.9414597 0.9459737 1.0261123 1.0395278 1.0502383 1.1197895 #>  [210,] 0.58492004 0.6409068 0.9025381 0.9620143 0.9858384 0.9887151 1.0199728 #>  [211,] 0.50580219 0.5841307 0.6319990 0.6846025 0.7464394 0.7579148 0.7868579 #>  [212,] 0.37026138 0.4236354 0.5164116 0.5171180 0.5347010 0.5356753 0.5709463 #>  [213,] 0.38679876 0.5188490 0.5472424 0.6559576 0.6953554 0.7352325 0.7452602 #>  [214,] 0.32807567 0.3843468 0.4646532 0.4773995 0.4976651 0.5167676 0.5229722 #>  [215,] 0.32784006 0.6000433 0.7427088 0.7517130 0.7569245 0.7689566 0.7771141 #>  [216,] 0.90972294 0.9438881 1.0089438 1.0218479 1.1330661 1.1335419 1.1383744 #>  [217,] 0.87469553 0.9601548 0.9882775 1.0063452 1.0216083 1.0532600 1.1322443 #>  [218,] 0.48648190 0.5116744 0.5764456 0.5999474 0.6374155 0.6818107 0.7192757 #>  [219,] 0.18025791 0.5279524 0.5539620 0.6361564 0.6805567 0.7698382 0.7881595 #>  [220,] 1.89864140 1.9776516 2.0257809 2.0365824 2.0488839 2.0735624 2.0799561 #>  [221,] 1.10871279 1.1943793 1.3328820 1.3964370 1.4418361 1.4511361 1.4609273 #>  [222,] 0.21646831 0.3884428 0.4151384 0.4412127 0.4587652 0.4965968 0.5944738 #>  [223,] 0.54084558 0.5828613 0.7094213 0.7577486 0.7581049 0.8097999 0.8640813 #>  [224,] 0.38737311 0.4002157 0.4738372 0.4821009 0.4853187 0.5060195 0.5261758 #>  [225,] 0.40204981 0.4332539 0.4936210 0.5857761 0.5989418 0.6563041 0.6698388 #>  [226,] 0.35561023 0.7096709 0.7155765 0.7692215 0.7719512 0.8057999 0.8660758 #>  [227,] 0.51896538 0.5342310 0.6889327 0.8506482 0.9269908 1.1179707 1.1528933 #>  [228,] 0.30268243 0.3767963 0.6876529 0.7690350 0.7710189 0.8026626 0.8198178 #>  [229,] 0.81618412 0.8613079 0.9679793 0.9854826 1.0585051 1.1115795 1.1117121 #>  [230,] 0.39136166 0.4233733 0.4971087 0.5578971 0.5758965 0.5763352 0.6412921 #>  [231,] 0.33627618 0.3482896 0.3899679 0.4479291 0.4572807 0.4574974 0.4603795 #>  [232,] 0.54135255 0.5609527 0.5946510 0.6341838 0.6377932 0.6622898 0.7304819 #>  [233,] 0.15791809 0.4887008 0.5572987 0.6034906 0.7075047 0.8268783 0.8281971 #>  [234,] 0.41277460 0.4242676 0.5387850 0.5922880 0.6421818 0.6504677 0.6829751 #>  [235,] 0.32784006 0.5997286 0.6240865 0.6431190 0.6555783 0.7005104 0.7140234 #>  [236,] 0.23586068 0.3752074 0.4217011 0.6167637 0.6368033 0.7187508 0.7198872 #>  [237,] 0.35131310 0.4657681 0.4825303 0.5366810 0.5372586 0.5648053 0.5793640 #>  [238,] 0.23944783 0.4674166 0.4695651 0.5317042 0.5384461 0.5696341 0.6116352 #>  [239,] 0.35206080 0.4006551 0.4511482 0.4697446 0.4821009 0.4827338 0.4855326 #>  [240,] 0.41594026 0.4251199 0.5560881 0.5913949 0.6027839 0.7079785 0.8286506 #>  [241,] 0.35804233 0.4993451 0.5661288 0.5672771 0.6199715 0.6619129 0.6683897 #>  [242,] 0.45334637 0.5638455 0.6098942 0.6548102 0.6843793 0.7045545 0.7121131 #>  [243,] 0.34698261 0.4338537 0.6013720 0.6473391 0.6649667 0.7203485 0.7354765 #>  [244,] 0.49481569 0.5211910 0.5675414 0.6097316 0.6286658 0.6345533 0.7170654 #>  [245,] 0.62342577 0.7693469 0.7784615 0.8384550 0.9519162 1.0389821 1.0932172 #>  [246,] 0.31502270 0.5117592 0.5367600 0.6200564 0.6447043 0.6719638 0.6958531 #>  [247,] 0.36212940 0.7396011 0.9665698 1.0072073 1.0420674 1.0455118 1.1411072 #>  [248,] 0.55715281 0.5750183 0.5846790 0.5871377 0.6337297 0.6435229 0.6662762 #>  [249,] 0.50580219 0.5973421 0.6127422 0.6631449 0.6953486 0.7692137 0.7846353 #>  [250,] 0.46041510 0.5035574 0.5262043 0.5467374 0.6363059 0.6640345 0.7169425 #>  [251,] 0.44570198 0.4461766 0.6374155 0.6620982 0.8040405 0.8502982 0.9075844 #>  [252,] 0.28766630 0.2931467 0.3529504 0.4290981 0.4313392 0.4404792 0.4772419 #>  [253,] 0.28719023 0.3188939 0.4826388 0.5019180 0.5319259 0.5388757 0.5645462 #>  [254,] 0.46143606 0.5854698 0.5931126 0.6158164 0.6669802 0.8051866 0.8227446 #>  [255,] 0.39304146 0.4041213 0.5264752 0.5739744 0.6442400 0.6466267 0.7231434 #>  [256,] 0.28171408 0.3478820 0.3882410 0.3976292 0.4983501 0.5159087 0.5620648 #>  [257,] 0.57497140 0.7234899 0.8952282 0.9564661 0.9715651 1.0354867 1.0854615 #>  [258,] 0.37520744 0.4928483 0.5550493 0.5574048 0.6335233 0.6510061 0.7315662 #>  [259,] 0.75709150 0.8765593 0.9079755 1.1256021 1.1497101 1.2022969 1.2498493 #>  [260,] 0.76903499 0.7840814 0.8985082 0.9057654 0.9126572 0.9392592 1.0851189 #>  [261,] 0.52602820 0.5762190 0.6259781 0.8892505 0.9025165 0.9310628 0.9451131 #>  [262,] 0.27965750 0.4720730 0.5806541 0.6298733 0.6617738 0.7161224 0.7220344 #>  [263,] 1.38608521 1.7111522 2.1003892 2.1027003 2.1362764 2.1809280 2.1993099 #>  [264,] 0.44336327 0.5876362 0.6240865 0.6364736 0.7165282 0.7569245 0.7607317 #>  [265,] 0.24927188 0.4264171 0.5161267 0.5622255 0.5833599 0.5932534 0.6242941 #>  [266,] 0.41708002 0.4645106 0.5958244 0.6048091 0.6403740 0.6833002 0.6876136 #>  [267,] 0.21452843 0.5166144 0.5598868 0.6444927 0.6491730 0.6553005 0.6912233 #>  [268,] 0.38021836 0.5367600 0.6778971 0.7395656 0.7757531 0.8460066 0.8613079 #>  [269,] 0.64641176 0.6939371 0.8605242 0.9029993 0.9799661 1.0070826 1.1117321 #>  [270,] 0.41897279 0.5147274 0.7207743 0.8067947 0.8684386 0.8824472 0.9116360 #>  [271,] 0.73207558 0.9488170 0.9913282 1.0017470 1.0289673 1.0497777 1.1138371 #>  [272,] 0.54008688 0.6048091 0.6443132 0.6503482 0.6955195 0.7145009 0.7756320 #>  [273,] 0.26404906 0.3580811 0.4602253 0.4725727 0.4915664 0.5364276 0.5408806 #>  [274,] 0.43913598 0.5609486 0.6717263 0.7163805 0.7399629 0.7766424 0.7775460 #>  [275,] 0.18882306 0.1954508 0.4825389 0.5258520 0.5597195 0.6079261 0.6497896 #>  [276,] 0.44565186 0.7946946 0.8615012 0.9975928 1.0432403 1.0960777 1.1238059 #>  [277,] 0.39535036 0.4953443 0.5366810 0.6776865 0.6911559 0.7004944 0.7239662 #>  [278,] 0.61251421 0.6345533 0.8291448 0.8683366 0.9045826 0.9794370 0.9829284 #>  [279,] 0.29869366 0.3077226 0.3625049 0.4070295 0.4350255 0.4364411 0.4372660 #>  [280,] 0.67026908 0.7999031 0.8578046 0.9087173 1.0819056 1.1101641 1.1206407 #>  [281,] 0.50081661 0.5673695 0.6886318 0.7822477 0.7928438 0.8111723 0.8576678 #>  [282,] 0.18539147 0.3515161 0.3737521 0.5050006 0.6109361 0.6123974 0.6218435 #>  [283,] 0.52602820 0.6391781 0.7287555 1.0228776 1.0448759 1.1141558 1.1210104 #>  [284,] 0.54750203 0.5944765 0.6107904 0.7065950 0.7337338 0.8325625 0.8928218 #>  [285,] 0.53742273 0.6219949 0.6489412 0.6516303 0.6983731 0.7030094 0.7210167 #>  [286,] 0.48002255 0.6373784 0.6569930 0.6822616 0.6870207 0.7706855 0.7768874 #>  [287,] 0.26638109 0.3355510 0.4103845 0.4653207 0.4789602 0.4935367 0.5083010 #>  [288,] 0.47277668 0.8693299 0.9365102 0.9629859 1.0239988 1.1226553 1.1546141 #>  [289,] 0.55534877 0.7888410 0.8594241 0.9509303 1.0333989 1.0886542 1.1146840 #>  [290,] 0.48510856 0.6660255 0.6894640 0.7410226 0.8463738 0.9033828 0.9240664 #>  [291,] 1.06279079 1.0856235 1.5205358 1.5515597 1.6956291 1.8091456 1.8163315 #>  [292,] 0.68621338 0.7145009 0.8084563 0.8693299 0.9307614 0.9400910 0.9556065 #>  [293,] 0.35450976 0.3625049 0.3880264 0.4537683 0.4847136 0.4869922 0.4936052 #>  [294,] 0.21005718 0.5016096 0.6411669 0.6703174 0.6917636 0.7192013 0.7782740 #>  [295,] 0.72251939 0.8129116 0.8997708 1.0434107 1.0630545 1.0837385 1.1400974 #>  [296,] 0.19545084 0.2823160 0.5255639 0.5378304 0.5749143 0.6149672 0.7109434 #>  [297,] 1.03636924 1.0915253 1.1044140 1.1368331 1.2896916 1.3083460 1.3366699 #>  [298,] 0.66938874 0.6930813 0.7081583 0.7464394 0.7484774 0.7840506 0.8493663 #>  [299,] 0.36530119 0.4743630 0.5541462 0.5699545 0.6165702 0.6455925 0.6857937 #>  [300,] 0.27756390 0.4072187 0.4353936 0.4399239 0.4790495 0.5121969 0.5263575 #>  [301,] 0.54750203 0.6184152 0.6922813 0.8616578 0.9036008 0.9099965 0.9544733 #>  [302,] 0.28646015 0.2910234 0.4479895 0.4587652 0.4790687 0.5383934 0.5706791 #>  [303,] 0.52447510 0.5275666 0.5476727 0.5767828 0.5963015 0.6073071 0.6322912 #>  [304,] 0.13801569 0.4408853 0.5465450 0.5871377 0.5943047 0.5993092 0.6032922 #>  [305,] 0.27965750 0.5121511 0.5479097 0.6046421 0.6413098 0.6499862 0.7169425 #>  [306,] 0.49735137 0.7000338 0.7188745 0.7232039 0.8676250 0.9080171 0.9352797 #>  [307,] 0.52501601 0.5394911 0.5465450 0.5614839 0.5763352 0.5831492 0.6026756 #>  [308,] 0.44160234 0.4800226 0.6480487 0.6624393 0.6962610 0.7193235 0.7301757 #>  [309,] 0.59980775 0.6034906 0.6062089 0.6166147 0.6704397 0.6719920 0.7084858 #>  [310,] 0.30258391 0.3595036 0.3800791 0.4332041 0.4626213 0.4678942 0.4874825 #>  [311,] 0.35561023 0.6112421 0.6331761 0.6616066 0.6916062 0.7517693 0.7669861 #>  [312,] 0.27905291 0.4476941 0.4999109 0.5131094 0.5448767 0.5609465 0.6014282 #>  [313,] 0.45928327 0.5068374 0.5170674 0.6281843 0.6621169 0.6704425 0.6930933 #>  [314,] 0.38682307 0.4724614 0.5106125 0.5858953 0.6462473 0.6885770 0.7104018 #>  [315,] 0.31111857 0.4324867 0.4379089 0.4670270 0.4809801 0.5132356 0.5489454 #>  [316,] 1.08562354 1.1565112 1.3810752 1.4308867 1.4458594 1.4541305 1.6162576 #>  [317,] 0.30141669 0.4251199 0.4711562 0.6510011 0.6784842 0.7109434 0.7160890 #>  [318,] 0.21158465 0.3941555 0.4857640 0.4861716 0.5044680 0.5606688 0.5843741 #>  [319,] 0.47115625 0.5452408 0.5895001 0.5929426 0.6027839 0.6331132 0.6494720 #>  [320,] 0.21158465 0.4407436 0.5638046 0.6364726 0.6596192 0.6837226 0.6932758 #>  [321,] 0.30141669 0.5560881 0.5847942 0.6331132 0.7473548 0.8021673 0.8172131 #>  [322,] 0.35902995 0.4153867 0.6028909 0.6166816 0.6213807 0.6838160 0.7341418 #>  [323,] 0.44783026 0.5049946 0.5538882 0.5556991 0.5924756 0.6143517 0.6744937 #>  [324,] 0.80607081 0.9029993 0.9724700 1.0418190 1.0886194 1.1814134 1.2310592 #>  [325,] 0.52005115 0.5572987 0.6250865 0.7133761 0.8402713 0.8692046 0.9151182 #>  [326,] 0.23866249 0.3342659 0.4461272 0.4505375 0.5448479 0.5539620 0.5979853 #>  [327,] 0.64673651 0.7101788 0.7474190 0.7551316 0.7983317 0.8826774 0.8852839 #>  [328,] 0.50327577 0.7919133 1.2037721 1.2114657 1.2147962 1.2156171 1.2566627 #>  [329,] 0.18497745 0.3825173 0.3992004 0.4006551 0.5185381 0.5828276 0.5915643 #>  [330,] 0.27190050 0.5779827 0.5907661 0.5914931 0.6904692 0.7292669 0.7524220 #>  [331,] 0.39771991 0.6409068 0.7680214 0.7712762 0.7817578 0.8246796 0.8410192 #>  [332,] 0.69928939 0.7901838 0.8047381 0.8472581 0.8990388 0.9348590 0.9534830 #>  [333,] 0.60446446 0.6488333 0.6657640 0.6811776 0.6811913 0.7131240 0.8382074 #>  [334,] 0.26145741 0.3191526 0.3702594 0.3980681 0.4112601 0.4267963 0.4404792 #>  [335,] 0.43461405 0.4742572 0.5556817 0.5920210 0.6061687 0.6129923 0.6180957 #>  [336,] 0.34828960 0.4074110 0.4675177 0.4870014 0.5097238 0.5635507 0.6411669 #>  [337,] 0.64072189 0.8352673 0.9118654 1.0828424 1.0979718 1.1133150 1.1152545 #>  [338,] 0.48648190 0.7610187 0.7700922 0.7733118 0.8808064 0.8926327 0.8944142 #>  [339,] 0.41013115 1.1041085 1.2037721 1.2103630 1.2989906 1.3577470 1.3688980 #>  [340,] 0.59466270 0.6435229 0.6610955 0.7155661 0.7350064 0.7756490 0.7918672 #>  [341,] 0.58413067 0.6203677 0.6847945 0.6953486 0.7771702 0.8067947 0.8153611 #>  [342,] 0.37229679 0.4999109 0.5921847 0.6064102 0.6548739 0.6927874 0.7169808 #>  [343,] 0.48132146 0.5474249 0.5583189 0.5631018 0.5673695 0.6315900 0.6848694 #>  [344,] 0.21594290 0.3213413 0.3797174 0.3911392 0.4505269 0.4596298 0.5033280 #>  [345,] 0.23268810 0.3549778 0.3575059 0.4234922 0.4542866 0.4909708 0.4941175 #>  [346,] 0.61149730 0.8126448 0.8352673 0.8841087 0.9005057 1.0012884 1.0336452 #>  [347,] 0.41121271 0.6181295 0.7305234 0.8466579 0.8491699 0.8661943 0.8887690 #>  [348,] 0.61149730 0.6407219 0.9262310 1.0548125 1.1644773 1.2298528 1.2865874 #>  [349,] 0.07871462 0.2409420 0.3397729 0.3607953 0.3786495 0.4171434 0.4304947 #>  [350,] 0.33044294 0.3319297 0.3329625 0.5475456 0.5717831 0.6094877 0.6146010 #>  [351,] 0.44920065 0.6694315 0.7348453 0.7607317 0.7623202 0.7711413 0.8008434 #>  [352,] 0.32417785 0.4055163 0.5876362 0.6903873 0.8033041 0.8604202 0.8949106 #>  [353,] 0.41013115 1.2282120 1.4418361 1.4735616 1.4968686 1.5093316 1.6745121 #>  [354,] 0.53960873 0.6078362 0.6093371 0.6199342 0.6555533 0.7169767 0.7183361 #>  [355,] 0.23640060 0.4613528 0.4621485 0.6799573 0.7408407 0.7637592 0.9035100 #>  [356,] 0.27169144 0.3397729 0.3453692 0.3853908 0.5356318 0.5439466 0.5515676 #>  [357,] 0.98327452 1.0293041 1.0564767 1.1642945 1.1752569 1.2176158 1.2313918 #>  [358,] 0.36146605 0.4041213 0.4084785 0.5332572 0.5439466 0.5798534 0.6415395 #>  [359,] 0.65046767 0.6594163 0.7439734 0.7463988 0.7680575 0.8131245 0.8339899 #>  [360,] 0.25236259 0.2939541 0.3520608 0.3920649 0.4305649 0.5083450 0.5157767 #>  [361,] 0.44975444 0.4669889 0.5711063 0.5857761 0.6091510 0.6560228 0.6902594 #>  [362,] 0.06589832 0.2432616 0.3756018 0.5154940 0.5283881 0.5312919 0.5372586 #>  [363,] 0.25623036 0.5066234 0.5831629 0.6659831 0.7124176 0.7752692 0.7824506 #>  [364,] 0.29402039 0.4857640 0.6016862 0.6426372 0.6487642 0.6509342 0.6932758 #>  [365,] 0.27031469 0.2986937 0.3163714 0.3222288 0.4065021 0.4133342 0.4533841 #>  [366,] 0.26885961 0.2817141 0.4016083 0.4652973 0.4755492 0.5031108 0.5061482 #>  [367,] 0.49715976 0.6640985 0.8328141 0.8452892 0.8664331 0.8679348 1.1407356 #>  [368,] 1.50333358 1.8732166 1.9319089 2.0332362 2.0493842 2.0816554 2.1087028 #>  [369,] 0.33175303 0.5306553 0.5682098 0.5947060 0.5990299 0.6089736 0.6426115 #>  [370,] 0.23158376 0.2939541 0.3372410 0.3722170 0.3748672 0.4827338 0.6046421 #>  [371,] 0.33099677 0.4190740 0.5185454 0.5688865 0.6137553 0.6232891 0.6286529 #>  [372,] 0.15605641 0.3463961 0.3702092 0.4709764 0.4732648 0.4977855 0.5676497 #>  [373,] 0.57142187 1.1761996 1.1959975 1.4027068 1.4265360 1.4472431 1.4993807 #>  [374,] 0.19502398 0.3756018 0.3866666 0.4861163 0.5745833 0.6169549 0.6332510 #>  [375,] 0.50441665 0.5546339 0.6086287 0.6101705 0.6480823 0.6785025 0.6872736 #>  [376,] 0.39837640 0.4732648 0.4940721 0.5178319 0.5505804 0.5863615 0.5892755 #>  [377,] 0.41667911 0.5670109 0.6082897 0.6151073 0.6621425 0.6639277 0.6681151 #>  [378,] 0.44745334 0.5158994 0.6571982 0.6850826 0.7014788 0.7311507 0.7428199 #>  [379,] 0.28766630 0.2885248 0.3105460 0.3191526 0.3601789 0.4522880 0.4711995 #>  [380,] 1.79643430 1.9826209 1.9857235 2.0134312 2.0895966 2.0957788 2.1182497 #>  [381,] 0.50683739 0.5431780 0.5923360 0.6563041 0.7207784 0.8511768 0.8690468 #>  [382,] 0.29755885 0.3880770 0.4101236 0.4915664 0.5117592 0.5669288 0.5916285 #>  [383,] 0.77101886 0.8053099 0.8490920 0.9020972 0.9392592 1.0234180 1.0452837 #>  [384,] 0.33637142 0.4473596 0.4851383 0.5096834 0.5200202 0.5813966 0.6034565 #>  [385,] 0.41017442 0.4216533 0.4243472 0.4478303 0.4654837 0.6379073 0.6471286 #>  [386,] 0.41322171 0.4603795 0.4675177 0.4685490 0.4834904 0.4993150 0.5010619 #>  [387,] 0.26964687 0.5850073 0.7203669 0.7488515 0.7934794 0.8426829 0.9125331 #>  [388,] 0.73960109 0.7776562 0.9329553 0.9913346 1.0291322 1.1348915 1.1761996 #>  [389,] 0.59995101 0.7358837 0.7570915 0.7831849 0.7833302 0.7903800 0.9320196 #>  [390,] 0.39540906 0.4695651 0.5094971 0.6484648 0.6744937 0.7235979 0.7439780 #>  [391,] 0.48743834 0.6513863 0.6569672 0.6936203 0.6958115 0.8472581 0.8539673 #>  [392,] 0.18882306 0.2823160 0.4130818 0.5415845 0.5429184 0.5490981 0.5890081 #>  [393,] 0.42434725 0.5966024 0.6143517 0.6444664 0.6606037 0.7384968 0.7967170 #>  [394,] 0.57737122 0.5995924 0.6102636 0.6760141 0.6900168 0.7746372 0.7874517 #>  [395,] 0.15576965 0.6122561 0.6146010 0.6363059 0.6525028 0.6590551 0.6638823 #>  [396,] 0.50937271 0.5921981 0.7374797 0.8395665 0.8851877 0.8923804 1.0931002 #>  [397,] 0.54833910 0.7220840 0.7474190 0.7582121 0.7792775 0.8131622 0.8578046 #>  [398,] 0.53530233 0.5503629 0.6392700 0.6470447 0.6562674 0.6623421 0.6753604 #>  [399,] 0.29158114 0.5021642 0.5314695 0.6355014 0.6668396 0.7014138 0.7575437 #>  [400,] 0.59563386 0.7309736 0.7396511 0.7517425 0.8430281 0.8961662 0.9075781 #>  [401,] 0.75159506 0.7732433 0.8370099 0.9124909 0.9273754 0.9834434 1.0196079 #>  [402,] 0.60943511 0.6095998 0.6117110 0.6867809 0.7004944 0.7109994 0.7299513 #>  [403,] 0.44336327 0.6086583 0.6622719 0.6845819 0.7140234 0.7331036 0.7644179 #>  [404,] 0.41897279 0.4444485 0.6631449 0.7397859 0.7771702 0.7969344 0.8428810 #>  [405,] 0.39796639 0.5022789 0.5817079 0.5940881 0.6103446 0.7616267 0.7833200 #>  [406,] 0.54314067 0.6717263 0.6947399 0.7189115 0.8128734 0.8332654 0.8754659 #>  [407,] 0.27756390 0.4861716 0.5096796 0.5260216 0.5638046 0.5828613 0.5969612 #>  [408,] 0.33614854 0.5747427 0.6097316 0.6543349 0.6666605 0.6914089 0.7040613 #>  [409,] 0.34166176 0.3607953 0.3854440 0.4175176 0.4283136 0.4511482 0.5043626 #>  [410,] 0.31983205 0.3673595 0.3689368 0.4136975 0.4584159 0.5137010 0.5438635 #>  [411,] 0.45006136 0.5549224 0.5638455 0.6661736 0.6695915 0.6880292 0.6953848 #>  [412,] 0.54767269 0.5678718 0.5940756 0.5951965 0.6269903 0.6407614 0.7144339 #>  [413,] 0.44160234 0.6569930 0.7695295 0.8932664 0.8974153 0.9019126 0.9057654 #>  [414,] 0.23866249 0.3290940 0.4005951 0.4463507 0.5054831 0.5155284 0.5827366 #>  [415,] 0.52819960 0.5846335 0.7058544 0.7287136 0.8253881 0.8404222 0.8905740 #>  [416,] 0.29496342 0.4136836 0.4319796 0.5057761 0.5196773 0.5793521 0.5856152 #>  [417,] 0.57497140 0.6727394 0.7808072 0.7962706 0.9379522 0.9496527 1.1124248 #>  [418,] 0.46513236 0.7962174 0.8640333 0.9494237 0.9632529 0.9717011 0.9913282 #>  [419,] 0.45886878 0.5019180 0.5538882 0.5581420 0.5989265 0.6360920 0.6401818 #>  [420,] 0.36146605 0.4902074 0.5739744 0.6111892 0.6304250 0.6505065 0.7313901 #>  [421,] 0.10890095 0.3176033 0.3364242 0.3533957 0.3927546 0.4006550 0.5634765 #>  [422,] 0.63917814 0.6999829 0.7189115 0.7281464 0.7692215 0.7779346 0.8344477 #>  [423,] 0.63087365 1.0536362 1.2475148 1.3091746 1.3838995 1.4121825 1.4719506 #>  [424,] 0.49843371 0.5099009 0.5610167 0.5962526 0.6093518 0.6180957 0.6405782 #>  [425,] 0.48490878 0.7171039 0.9579005 0.9687047 0.9986191 1.0039120 1.0215023 #>  [426,] 0.94933290 1.0690177 1.0886194 1.2053888 1.3835300 1.4453601 1.4493544 #>  [427,] 1.03334672 1.2531113 1.3105498 1.3331191 1.3479829 1.3673094 1.4549365 #>  [428,] 0.18607748 0.3362762 0.4656738 0.4732493 0.5097238 0.5141189 0.5437261 #>  [429,] 0.50327577 0.7331599 0.7382613 0.9615741 0.9634400 1.0396734 1.0640401 #>  [430,] 0.25185127 0.2998649 0.3321115 0.3583976 0.3943943 0.4858604 0.4887096 #>  [431,] 0.77355656 0.8034857 0.8245390 0.8507600 0.8881839 0.9005623 0.9479676 #>  [432,] 0.33464875 0.3642757 0.6107904 0.6353996 0.7309736 0.7776884 0.9036008 #>  [433,] 0.66710228 0.7709680 0.8094163 0.8135167 0.8143663 0.8428810 0.8699615 #>  [434,] 0.36528875 0.3797174 0.4193769 0.4322114 0.4602253 0.4685490 0.5094537 #>  [435,] 0.50362038 0.5370323 0.6914248 0.7050692 0.7524220 0.8054771 0.8281971 #>  [436,] 0.28496674 0.3979664 0.4693256 0.5987556 0.6148480 0.6268877 0.6424653 #>  [437,] 1.36902000 1.3694027 1.5823131 1.6163052 1.6562960 1.6697437 1.7039621 #>  [438,] 0.69965581 0.7636449 0.8379099 0.9609684 0.9996083 1.0794229 1.0905018 #>  [439,] 0.21452843 0.4241826 0.4874103 0.6362286 0.6746974 0.7015264 0.7394663 #>  [440,] 0.47257465 0.5580967 0.5610167 0.5695555 0.5911725 0.6371474 0.7042805 #>  [441,] 0.37333318 0.5637631 0.5999510 0.7837438 0.8021907 0.8192942 0.8770605 #>  [442,] 0.43988569 0.6958115 0.7825755 0.9465006 0.9656957 0.9781838 1.0006491 #>  [443,] 0.25623036 0.4728336 0.5077488 0.5321453 0.6070111 0.8739836 0.9059923 #>  [444,] 0.37052175 0.4515957 0.4646370 0.4652973 0.4745904 0.5125963 0.5166668 #>  [445,] 0.36144643 0.4299850 0.4751395 0.5756127 0.6543349 0.6571930 0.6772398 #>  [446,] 0.63652494 1.0589538 1.2597504 1.3595592 1.3826657 1.4332071 1.4512998 #>  [447,] 0.41799612 0.5365025 0.7874030 0.8609617 0.9166889 0.9193992 0.9228819 #>  [448,] 0.68879896 0.8569005 0.9118654 0.9174689 1.0122602 1.0301427 1.0548125 #>  [449,] 0.79638993 0.9550853 0.9781838 1.0505442 1.0960777 1.1134426 1.1733343 #>  [450,] 0.38420445 0.6953554 0.7202156 0.7851180 0.8018881 0.8105794 0.8112578 #>  [451,] 0.62693836 0.8136296 0.8241341 0.8841087 0.9016634 0.9273298 0.9526307 #>  [452,] 0.48611632 0.5486165 0.5790121 0.6507855 0.6626477 0.6863714 0.6932322 #>  [453,] 0.54429534 0.5896785 0.7987168 0.7988115 0.8480078 0.8792036 0.8803190 #>  [454,] 0.29402039 0.3529504 0.4391373 0.4711995 0.5044680 0.5260216 0.5682098 #>  [455,] 0.45013515 0.5414461 0.6395152 0.7169927 0.7563804 0.7676514 0.7875428 #>  [456,] 0.25474129 0.3310869 0.3916905 0.4006550 0.4085023 0.4173184 0.4305954 #>  [457,] 0.46862710 0.5564164 0.5998078 0.7024510 0.7360367 0.7596683 0.8019116 #>  [458,] 0.28496674 0.4719616 0.5291024 0.5514912 0.6103446 0.6373338 0.6608218 #>  [459,] 0.43320410 0.4431478 0.4558188 0.5058240 0.5083010 0.5102206 0.5406957 #>  [460,] 0.52077083 0.5261758 0.5271446 0.5435981 0.5537570 0.6263679 0.6274053 #>  [461,] 0.32134132 0.3547632 0.4069555 0.4993150 0.5382203 0.5414461 0.5480896 #>  [462,] 0.20621884 0.5346657 0.5883716 0.6114167 0.7177347 0.7510074 0.8341485 #>  [463,] 0.35784270 0.4073304 0.5187701 0.5434296 0.5629332 0.5734895 0.5746167 #>  [464,] 0.57025623 0.8293544 0.9809682 1.1349960 1.1526514 1.1742306 1.2443761 #>  [465,] 0.31502270 0.3802184 0.6160945 0.6481453 0.6546591 0.6563208 0.7103615 #>  [466,] 0.56667205 0.6824800 0.6867144 0.6927874 0.7812272 0.9295271 0.9541325 #>  [467,] 0.58116939 0.6587763 0.6894640 0.7021490 0.7775958 0.8086275 0.8212221 #>  [468,] 0.37026138 0.4136975 0.4137849 0.4537779 0.4834602 0.4835706 0.4850264 #>  [469,] 0.19836229 0.5324268 0.6212549 0.6956020 0.7951495 0.8134143 0.8559988 #>  [470,] 0.40959234 0.4971598 0.6972476 0.8697056 0.9074994 1.0285265 1.0481919 #>  [471,] 0.30343533 0.4286723 0.4558188 0.4630491 0.4714210 0.4722222 0.4817748 #>  [472,] 0.63087365 0.8605907 0.9341246 1.0629244 1.0938227 1.1847267 1.2397938 #>  [473,] 0.40688992 0.6112421 0.6353996 0.6778309 0.6921504 0.6922813 0.7096709 #>  [474,] 0.37524686 0.4004371 0.4101744 0.4398595 0.4742572 0.5542641 0.5886905 #>  [475,] 0.39459871 0.5831492 0.6141788 0.6183460 0.6845819 0.6993741 0.7548582 #>  [476,] 0.39911091 0.4721490 0.4745208 0.4930362 0.5008011 0.5025541 0.5172081 #>  [477,] 0.57135279 0.5729688 0.6204981 0.6497949 0.7075731 0.8458314 0.8690468 #>  [478,] 0.50963246 0.5556804 0.5986114 0.6821420 0.7292669 0.7294777 0.7447653 #>  [479,] 0.50963246 0.5888796 0.5914931 0.6030113 0.6462566 0.6619499 0.7833290 #>  [480,] 0.80611699 0.8379099 0.9324112 0.9850379 1.3343275 1.4457991 1.4701369 #>  [481,] 0.22344048 0.2549513 0.3748672 0.3824871 0.4233733 0.4908540 0.5376948 #>  [482,] 0.34386260 0.4739795 0.4900412 0.5265313 0.5625678 0.5848887 0.5876781 #>  [483,] 0.36109222 0.3994637 0.4002157 0.4305649 0.4452373 0.4766990 0.5209583 #>  [484,] 0.49585188 0.5244751 0.5974194 0.7894578 0.7919004 0.7945294 0.8016711 #>  [485,] 0.34418239 0.3578427 0.3676732 0.3841412 0.3947234 0.4262079 0.4767823 #>  [486,] 0.30405060 0.3355510 0.3811301 0.4520838 0.4913116 0.4984722 0.5132653 #>  [487,] 0.15576965 0.5118247 0.5262043 0.5276184 0.6654594 0.6677050 0.7542312 #>  [488,] 0.35904744 0.3632266 0.3654906 0.3853908 0.4304947 0.4734157 0.4845310 #>  [489,] 0.25638024 0.2860569 0.5105750 0.5141189 0.5360455 0.5402271 0.5420105 #>  [490,] 0.52911605 0.5338661 0.5692567 0.6795041 0.7463176 0.7469121 0.8142233 #>  [491,] 0.68036455 0.7299820 0.7714125 0.8132182 0.9174689 0.9397643 1.0688868 #>  [492,] 0.57617754 0.6656368 0.7214812 0.7331599 0.7647870 0.8024578 0.8416625 #>  [493,] 0.45923251 0.5564164 0.5991140 0.7147813 0.7189746 0.8328865 0.8747953 #>  [494,] 0.41538669 0.4667912 0.7578912 0.7671323 0.8352244 0.8737937 0.8853399 #>  [495,] 0.81324473 0.9456256 1.0302783 1.0493400 1.2419199 1.3178402 1.3323455 #>  [496,] 0.77047249 0.8452892 1.0669006 1.0727086 1.1395687 1.2138641 1.4700034 #>  [497,] 0.53199693 0.7579007 0.9658617 1.0365774 1.0482723 1.2467336 1.2850911 #>  [498,] 0.33104620 0.3591189 0.3976292 0.4232544 0.4719616 0.4953588 0.5031108 #>  [499,] 0.41269992 0.4993037 0.5211139 0.5880065 0.5911725 0.7794680 0.7874517 #>  [500,] 0.37902617 0.5831242 0.6423990 0.7155765 0.7281464 0.8717328 0.9799661 #>  [501,] 0.67026908 0.8097817 0.8136296 0.9351754 0.9479676 1.0146208 1.0678236 #>  [502,] 0.24447980 0.2988129 0.3026780 0.3981978 0.5026104 0.5296197 0.5391653 #>  [503,] 0.33058968 0.4149170 0.4275372 0.4346167 0.4644060 0.4677869 0.5615738 #>  [504,] 0.47283364 0.6319116 0.6377770 0.7026906 0.7124176 0.7286659 0.8168486 #>  [505,] 0.73747965 0.9894491 1.1199671 1.1253516 1.1818718 1.2438037 1.3937837 #>  [506,] 0.39320438 0.5192793 0.5227066 0.5244595 0.5584928 0.5627207 0.5813301 #>  [507,] 1.87259877 1.9897343 2.0273100 2.0820595 2.1960280 2.2316516 2.2475116 #>  [508,] 0.30614263 0.4026878 0.4203269 0.4414143 0.4630443 0.4657576 0.4902254 #>  [509,] 0.48499451 0.5883716 0.7011344 0.7646516 0.8511768 0.9212390 0.9261809 #>  [510,] 0.26638109 0.3337820 0.3492134 0.4520838 0.4560289 0.4979916 0.5026104 #>  [511,] 0.54099064 0.5425419 0.6460867 0.6660255 0.7284374 0.7308313 0.7310983 #>  [512,] 0.61941567 0.6455980 0.6905181 0.6909383 0.6955195 0.6995873 0.7259679 #>  [513,] 0.54551100 0.5817079 0.5988325 0.6148480 0.6335324 0.6373338 0.6885919 #>  [514,] 0.53621150 0.8050744 0.8788403 1.0396085 1.0979564 1.1051960 1.1101998 #>  [515,] 0.48078748 0.6237970 0.7554551 0.8422960 0.8779618 0.9005409 0.9014972 #>  [516,] 0.48641497 0.5687763 0.6440516 0.6494720 0.6578705 0.6996475 0.7514175 #>  [517,] 0.38945854 0.4613528 0.4785826 0.6049064 0.6341900 0.6607480 0.7595783 #>  [518,] 0.31889280 0.3755404 0.4311174 0.5999233 0.6786242 0.7265484 0.7580115 #>  [519,] 0.41880311 0.5847942 0.7299820 0.7301040 0.8653894 0.9046597 0.9769723 #>  [520,] 0.54343074 0.5614839 0.6224221 0.6595687 0.7034527 0.7146763 0.7512718 #>  [521,] 0.45824290 0.4625125 0.5374526 0.5969208 0.6850826 0.7029169 0.7690073 #>  [522,] 0.28486986 0.3309968 0.5498071 0.5862048 0.5866771 0.6067760 0.6160274 #>  [523,] 1.06807483 1.2347476 1.6923764 1.7227032 1.7309687 1.7398127 1.7540955 #>  [524,] 0.46365510 0.4887008 0.5286678 0.5907047 0.6062089 0.6108297 0.6227550 #>  [525,] 0.50937271 0.8096968 0.8408443 0.8963739 0.9026707 0.9639644 0.9894491 #>  [526,] 0.33163195 0.4777843 0.6867809 0.7057607 0.7183016 0.7193081 0.7899114 #>  [527,] 0.61366860 0.8044922 0.8208247 0.8792036 0.8897123 0.9109741 0.9221004 #>  [528,] 0.15566660 0.5831242 0.6464118 0.7021490 0.7474250 0.7779346 0.8332654 #>  [529,] 0.41549408 0.5484668 0.6469765 0.6674095 0.6832009 0.6876529 0.7027645 #>  [530,] 0.39837640 0.4072187 0.4436585 0.4753464 0.5096796 0.5569904 0.5676497 #>  [531,] 0.52443174 0.5276184 0.6122561 0.6147713 0.6377932 0.6379135 0.7713618 #>  [532,] 0.13413785 0.6204981 0.7601424 0.7779615 0.8264592 0.8600091 0.8605907 #>  [533,] 0.40688992 0.5354281 0.6616066 0.7079874 0.7396511 0.7450219 0.7528170 #>  [534,] 0.27599437 0.3541282 0.3755404 0.5017701 0.5399355 0.5811044 0.6750343 #>  [535,] 0.31797018 0.4588043 0.5447741 0.7049516 0.7113709 0.7216001 0.7356234 #>  [536,] 0.29466951 0.5394911 0.5423750 0.5672291 0.6141788 0.6224221 0.6385467 #>  [537,] 0.88897939 0.9046770 0.9751034 0.9772495 1.0444736 1.0536205 1.1256021 #>  [538,] 0.36893676 0.4020003 0.4137849 0.5099009 0.5337631 0.5577939 0.5580755 #>  [539,] 0.85064963 0.8650430 0.8825688 0.9262310 0.9556515 1.0005424 1.0024060 #>  [540,] 0.69560196 0.7776562 0.8012143 0.8039280 0.9121129 1.0458274 1.1959975 #>  [541,] 0.49140685 0.5110256 0.5921981 0.7759735 0.7899429 0.8096968 0.8265497 #>  [542,] 1.10642605 1.1164050 1.1818417 1.2084191 1.2697731 1.3804673 1.3875742 #>  [543,] 0.28044618 0.4756942 0.5072671 0.5121703 0.5437904 0.5990299 0.6248871 #>  [544,] 0.40971328 0.8268145 0.9456256 0.9638829 1.0619343 1.0987394 1.1067582 #>  [545,] 0.71710388 0.8928501 0.9720062 0.9899796 1.0120203 1.0915253 1.1475708 #>  [546,] 0.48499451 0.5309125 0.5431780 0.6930933 0.7153810 0.7510074 0.9052013 #>  [547,] 0.76333603 0.8322898 0.8766758 1.0306357 1.0578223 1.0729674 1.0823271 #>  [548,] 0.33637142 0.4408370 0.4486135 0.4854857 0.5468995 0.5591224 0.5880462 #>  [549,] 0.41447280 0.4802767 0.5862173 0.7382226 0.7469121 0.7942158 0.8522822 #>  [550,] 0.40459003 0.5009616 0.5031850 0.5164116 0.5224890 0.5361314 0.5457542 #>  [551,] 0.07871462 0.2378034 0.3453692 0.3609215 0.4058785 0.4175176 0.4296775 #>  [552,] 0.27981369 0.4971087 0.5562532 0.5740092 0.5915632 0.6548179 0.6610955 #>  [553,] 0.25774469 0.3652887 0.3981978 0.4460521 0.4834904 0.5355933 0.5438505 #>  [554,] 0.27639652 0.6178663 0.6633634 0.6750672 0.7429170 0.7921757 0.7993059 #>  [555,] 0.31494567 0.4247100 0.4522880 0.4650741 0.4772419 0.4826388 0.5284284 #>  [556,] 0.34096293 0.3575059 0.4026878 0.4146151 0.4869922 0.4932223 0.5040757 #>  [557,] 1.02545562 1.1212602 1.5930786 1.6486980 1.7162852 1.7211023 1.7595370 #>  [558,] 0.40827180 0.5177791 0.5344464 0.5973421 0.6349991 0.6356942 0.6788909 #>  [559,] 0.36931805 0.4343279 0.4544081 0.5058139 0.5472424 0.5540991 0.5652773 #>  [560,] 0.30995065 0.4568635 0.5112165 0.5301637 0.5670109 0.5715294 0.6812461 #>  [561,] 0.33108689 0.3647870 0.3927546 0.4307549 0.4720664 0.4776850 0.4809971 #>  [562,] 0.21005718 0.4958056 0.5633400 0.6549419 0.7052061 0.7193081 0.7262047 #>  [563,] 0.94145974 1.0224870 1.0516635 1.0777126 1.0921771 1.1175480 1.1365582 #>  [564,] 0.23405299 0.5528495 0.5661288 0.6614197 0.6900982 0.7105025 0.7139307 #>  [565,] 0.69258887 0.7024510 0.7147813 0.7382613 0.7919133 0.8149066 0.9236789 #>  [566,] 0.51448466 0.6125336 0.6484616 0.6997512 0.7021224 0.7055575 0.7100942 #>  [567,] 0.29617228 0.3304429 0.4517954 0.4538657 0.4571435 0.4660350 0.4850270 #>  [568,] 0.52119098 0.6125142 0.6869848 0.6995231 0.7104944 0.7507253 0.7949456 #>  [569,] 0.18607748 0.4574974 0.5402271 0.5403717 0.5635507 0.5940502 0.6235578 #>  [570,] 0.18278457 0.5338661 0.5378304 0.5862173 0.6982374 0.6992809 0.8041186 #>  [571,] 0.20660531 0.2586838 0.3209740 0.3460952 0.3947234 0.4240761 0.5370333 #>  [572,] 0.48456290 0.6644677 0.6674892 0.6838160 0.6845856 0.6934362 0.7465997 #>  [573,] 0.59447652 0.6184152 0.6988428 0.7794680 0.9829675 1.0021546 1.0041221 #>  [574,] 0.12176819 0.3721867 0.3737521 0.4378377 0.4743630 0.5164213 0.5781658 #>  [575,] 0.28646015 0.3151615 0.3345037 0.4073304 0.5395579 0.5710533 0.5738169 #>  [576,] 0.51662510 0.5271182 0.5460962 0.5990525 0.6624654 0.6694315 0.7067906 #>  [577,] 0.35665942 0.3712647 0.4540692 0.4943487 0.5224890 0.5263575 0.5507557 #>  [578,] 0.38248709 0.3913617 0.4952194 0.5008011 0.5374827 0.5515974 0.5643737 #>  [579,] 0.74617390 0.8751409 0.9876924 1.0298540 1.0474016 1.0741441 1.0931002 #>  [580,] 0.33104620 0.3478820 0.4287227 0.4755492 0.5232673 0.5476248 0.5518402 #>  [581,] 0.54600305 0.6112782 0.6213807 0.6227225 0.7199754 0.7256621 0.7522778 #>  [582,] 0.51661438 0.5788640 0.6936203 0.7009100 0.7015264 0.7539154 0.7750866 #>  [583,] 0.50233812 0.5578971 0.5609527 0.6693627 0.6786311 0.6990648 0.7056897 #>  [584,] 0.48532956 0.5079140 0.5300557 0.5305738 0.5598585 0.6045340 0.6447043 #>  [585,] 0.65931532 1.0627908 1.0671141 1.1396169 1.1528051 1.1565112 1.1635072 #>  [586,] 0.23944783 0.5000345 0.5466001 0.5570764 0.5692379 0.6484648 0.7122003 #>  [587,] 0.48490878 0.6059156 0.6325765 0.6846025 0.6917914 0.8191713 0.8260865 #>  [588,] 0.13801569 0.4811152 0.4862037 0.5596539 0.5647059 0.5669794 0.5766179 #>  [589,] 0.46513236 0.6581349 0.6917636 0.7981270 0.8284677 0.8800895 0.9020067 #>  [590,] 0.36904821 0.6363375 0.6607480 0.6752596 0.7469752 0.7783141 0.8760413 #>  [591,] 0.58871536 0.7709680 0.8355143 0.9099965 0.9485464 0.9880351 1.0240991 #>  [592,] 0.41308184 0.4744320 0.4789602 0.4825389 0.4913116 0.4943487 0.5121969 #>  [593,] 0.24369140 0.3825173 0.4725684 0.5006228 0.6436857 0.6493002 0.6530494 #>  [594,] 0.30921906 0.3843468 0.4151384 0.5004716 0.5085950 0.5173150 0.5283881 #>  [595,] 0.39459871 0.5832223 0.5935903 0.6026756 0.6385467 0.7367688 0.7693775 #>  [596,] 0.53530233 0.6123974 0.6480823 0.7285163 0.7315662 0.7407456 0.7512929 #>  [597,] 0.41632389 0.4241826 0.4398140 0.5093461 0.5453175 0.5598868 0.5729260 #>  [598,] 0.24447980 0.2478326 0.4460521 0.4484374 0.4560289 0.4565522 0.4853179 #>  [599,] 0.34489464 0.4620425 0.5225903 0.6108297 0.6216273 0.6776865 0.6844769 #>  [600,] 0.35998081 0.3873731 0.5131486 0.5207932 0.5657115 0.5812143 0.5994502 #>  [601,] 0.27639652 0.5753035 0.5890626 0.6122642 0.7705089 0.7938271 0.8431249 #>  [602,] 0.78788668 0.9116360 0.9149154 0.9416944 1.0757101 1.1056397 1.1238059 #>  [603,] 0.49038117 0.7183016 0.8579808 0.8993067 0.9729493 1.0315773 1.1022375 #>  [604,] 0.39377339 0.5346657 0.6298198 0.6444927 0.6746974 0.6884717 0.7175564 #>  [605,] 0.33426591 0.4005951 0.5005657 0.5311627 0.5403851 0.6805567 0.7078396 #>  [606,] 0.44088530 0.4811152 0.5250160 0.5594343 0.5935903 0.6414284 0.7013401 #>  [607,] 0.59934650 0.6364736 0.6433930 0.7286429 0.7411241 0.7615876 0.7771141 #>  [608,] 0.43898170 0.4884188 0.5324268 0.6183460 0.7129703 0.7983427 0.7992867 #>  [609,] 0.52819960 0.6319151 0.6889327 0.8490920 0.9238016 1.0062685 1.0260488 #>  [610,] 0.62410728 0.7900761 0.8319470 0.9389795 0.9542404 0.9575280 0.9715795 #>  [611,] 0.23780344 0.2409420 0.2716914 0.3590474 0.3913593 0.4422924 0.5166339 #>  [612,] 0.23268810 0.2536672 0.3735126 0.4792013 0.5040757 0.5064644 0.5118921 #>  [613,] 0.25579274 0.4948157 0.6887990 0.6995231 0.7055575 0.7082702 0.7093156 #>  [614,] 0.24664621 0.2902482 0.5176510 0.5571528 0.5650481 0.5801149 0.5834059 #>  [615,] 0.27563000 0.2900317 0.3117967 0.3989867 0.4019862 0.4955604 0.5379373 #>  [616,] 0.33211149 0.3508336 0.3528248 0.4058785 0.4171184 0.4372508 0.4385274 #>  [617,] 0.48073295 0.5118648 0.5715294 0.5888544 0.5998261 0.6552467 0.6639277 #>  [618,] 0.38420445 0.4529424 0.5179190 0.5903237 0.6351641 0.6537077 0.6543495 #>  [619,] 0.28719023 0.3117132 0.3595036 0.4205327 0.5036455 0.5167268 0.5416555 #>  [620,] 0.54140262 0.5615738 0.5716426 0.6939201 0.7266303 0.7505353 0.7508083 #>  [621,] 0.45539475 0.5140250 0.5460962 0.5508315 0.5879453 0.5962526 0.6374631 #>  [622,] 0.70520608 0.8132554 0.8570753 0.8786748 0.9114445 0.9567925 0.9977510 #>  [623,] 0.28703477 0.4328400 0.4630699 0.4902254 0.4997511 0.5492283 0.5499580 #>  [624,] 0.33058968 0.3414507 0.4380561 0.4603972 0.4962658 0.5414026 0.6497949 #>  [625,] 0.36742776 0.3991559 0.4253854 0.7532413 0.7909699 0.8282616 0.8306897 #>  [626,] 0.57886397 0.5805225 0.6513863 0.6553005 0.6887650 0.7175564 0.7177347 #>  [627,] 0.43988569 0.4874383 0.7022335 0.7750866 0.8279077 0.9112521 0.9809436 #>  [628,] 0.64717653 0.7782061 0.9047407 0.9052013 1.0008969 1.0144688 1.0671127 #>  [629,] 0.49925939 0.5515885 0.5561592 0.6374631 0.6914780 0.7596080 0.8638439 #>  [630,] 1.12441410 1.2164243 1.2262082 1.2558498 1.3191045 1.3850768 1.4040059 #>  [631,] 0.43790893 0.4667697 0.4769766 0.4927835 0.4932223 0.5406166 0.5529526 #>  [632,] 0.42741318 0.9064671 0.9084235 1.0622482 1.1247284 1.2488087 1.2893991 #>  [633,] 0.31111857 0.3342519 0.3869709 0.4836921 0.5053310 0.5275071 0.5338385 #>  [634,] 0.80640117 0.8600091 1.0536362 1.0598791 1.0629244 1.0925987 1.2584620 #>  [635,] 0.87011080 0.9883784 1.1779365 1.1835998 1.1933245 1.1991555 1.2006080 #>  [636,] 1.19827086 1.2652912 1.2705616 1.4586775 1.5759801 1.5886510 1.5949255 #>  [637,] 0.25236259 0.3722170 0.3971836 0.3978650 0.4517954 0.4557723 0.4646370 #>  [638,] 0.26731894 0.5597664 0.6734284 0.7034186 0.7382226 0.7465193 0.7652319 #>  [639,] 0.55534877 0.9762424 1.2387420 1.3336536 1.4278171 1.4791081 1.5595669 #>  [640,] 1.38176414 1.4027068 1.5612911 1.6247606 1.7017419 1.8043487 1.8374909 #>  [641,] 0.06589832 0.2721334 0.3866666 0.4826761 0.5167676 0.5300557 0.5387529 #>  [642,] 0.27901337 0.3869709 0.4667697 0.5489454 0.5558380 0.6004248 0.6360690 #>  [643,] 0.28486986 0.4822843 0.5503629 0.5688865 0.6112782 0.6379215 0.6393196 #>  [644,] 0.71752319 0.7847656 0.8034461 1.0500515 1.0790151 1.1606309 1.1812313 #>  [645,] 0.34953506 0.3608873 0.4120480 0.4544081 0.4854857 0.5188490 0.5576237 #>  [646,] 0.39971867 0.4926281 0.5374526 0.5391911 0.5465211 0.5669344 0.5691726 #>  [647,] 0.37229679 0.4379752 0.5266683 0.5448767 0.5528495 0.5610559 0.6251867 #>  [648,] 0.27190050 0.5907047 0.6030113 0.6304600 0.6719920 0.6745211 0.6914248 #>  [649,] 0.63604624 0.6855277 0.9327261 0.9809173 1.0148390 1.0537441 1.0664643 #>  [650,] 0.77613761 0.9661982 1.0145922 1.0809133 1.1244141 1.1579643 1.2557197 #>  [651,] 0.10890095 0.3743787 0.3826668 0.4307549 0.4325840 0.4330592 0.5361181 #>  [652,] 0.49900292 0.5933355 0.7345501 0.7439780 0.7660086 0.8103719 0.8293544 #>  [653,] 0.52820126 0.6492154 0.6790748 0.6899303 0.8097355 0.8849143 0.8961662 #>  [654,] 0.25553066 0.3704586 0.4636515 0.5632268 0.5645616 0.5764672 0.5876781 #>  [655,] 0.32827187 0.4621485 0.4670270 0.4836921 0.5815259 0.6049064 0.6758693 #>  [656,] 0.34122048 0.4280753 0.5013900 0.5300733 0.5317042 0.5466001 0.6105344 #>  [657,] 0.41269992 0.5440849 0.5610167 0.5947505 0.5995924 0.6125635 0.6492150 #>  [658,] 0.73484529 0.8486142 0.9556076 0.9841908 0.9938162 1.0595581 1.0728338 #>  [659,] 0.47207296 0.5121511 0.6847509 0.7414876 0.7824506 0.8130220 0.8239049 #>  [660,] 0.28852476 0.3980681 0.4045900 0.4244655 0.4290981 0.4391373 0.4512288 #>  [661,] 0.55568035 0.5779827 0.6383327 0.8127675 0.8404079 0.9061725 0.9833422 #>  [662,] 0.37052175 0.4283136 0.4557723 0.4571435 0.4697446 0.5083450 0.5871803 #>  [663,] 0.26885961 0.3513131 0.3704586 0.3882410 0.4653674 0.4953588 0.5232673 #>  [664,] 0.72947771 0.7892534 0.8026528 0.8046057 0.8172131 0.8210511 0.8654302 #>  [665,] 0.43842198 0.5078067 0.5259417 0.5284284 0.5532727 0.5719446 0.6001208 #>  [666,] 0.36166541 0.3752469 0.4654837 0.5228152 0.5691685 0.5863458 0.5877697 #>  [667,] 0.46041510 0.4913428 0.5118247 0.5244317 0.6343899 0.6525028 0.6622898 #>  [668,] 0.50362038 0.6581349 0.7716759 0.7774180 0.8640333 0.8675365 0.8969093 #>  [669,] 0.37902617 0.7474250 0.8269337 0.8660758 0.9721728 0.9910921 1.0298670 #>  [670,] 0.23819931 0.7368765 0.7395656 0.7719461 0.7888535 0.8352410 0.8563161 #>  [671,] 0.50355741 0.5069168 0.5191249 0.5479097 0.6064591 0.6187476 0.6341838 #>  [672,] 0.45240271 1.2103630 1.2608074 1.3097644 1.3447221 1.3725328 1.4004944 #>  [673,] 0.45119880 0.4602642 0.4657681 0.4989590 0.5627876 0.5819915 0.6334960 #>  [674,] 0.92410419 0.9557264 1.0680267 1.1041085 1.2125783 1.2282120 1.3526752 #>  [675,] 0.69626102 0.7601424 0.8190091 0.8598253 0.8932664 0.9097229 0.9135110 #>  [676,] 0.33552713 1.0234180 1.0937650 1.1298281 1.1902421 1.1918410 1.2367037 #>  [677,] 0.58967854 0.7312791 0.7690131 0.8422960 0.8469972 0.9428302 0.9567925 #>  [678,] 0.20106165 0.3163714 0.3342519 0.4426390 0.4563722 0.4968433 0.5132356 #>  [679,] 0.39765875 0.4261820 0.5283646 0.5795937 0.5846790 0.5942567 0.6097198 #>  [680,] 0.49849978 0.5237359 0.6594163 0.6674892 0.7650750 0.7834306 0.8307839 #>  [681,] 0.54861653 0.5761775 0.5867615 0.6068332 0.6669802 0.6804669 0.7466670 #>  [682,] 0.35173972 0.3702594 0.4159067 0.4511801 0.4722729 0.4847136 0.5247686 #>  [683,] 0.53423100 0.6319151 0.7058544 0.7712689 0.8061639 0.9830863 0.9861680 #>  [684,] 0.34807105 0.5309125 0.5923360 0.8725691 0.9261809 0.9931073 0.9936920 #>  [685,] 0.54688338 0.7929807 0.8549181 0.8562695 0.8595303 0.9160647 0.9738354 #>  [686,] 0.13413785 0.5729688 0.7404315 0.8064012 0.8461974 0.8598253 0.9341246 #>  [687,] 1.03334672 1.8435039 1.9287715 1.9365755 1.9663412 2.0112580 2.0737350 #>  [688,] 0.33614854 0.4112868 0.6263205 0.6453205 0.6481453 0.6642328 0.6958531 #>  [689,] 0.39415584 0.5271182 0.6144610 0.6500023 0.6506966 0.7555828 0.7639140 #>  [690,] 0.10532073 0.3047294 0.3586991 0.4173184 0.4720664 0.5548456 0.5610167 #>  [691,] 0.26136956 0.4614361 0.7006985 0.8934818 0.9290410 0.9298701 0.9374138 #>  [692,] 0.26057457 0.3591557 0.5418460 0.6167637 0.6614990 0.6709370 0.7610253 #>  [693,] 0.29781299 0.3733776 0.4984998 0.5211139 0.6338577 0.7827647 0.8694054 #>  [694,] 0.41413531 0.4170800 0.4960290 0.5640250 0.5717831 0.5795376 0.5836341 #>  [695,] 1.03876866 1.0820106 1.1881403 1.4098394 1.4882723 1.4992243 1.5319253 #>  [696,] 0.31652481 0.5344220 0.6784430 0.7122003 0.8200616 0.8346574 0.9064128 #>  [697,] 0.39771991 0.5926501 0.6586538 0.7806151 0.8129439 0.8956926 0.9025381 #>  [698,] 0.27563000 0.3762885 0.3890124 0.4927272 0.5043863 0.5072042 0.5219758 #>  [699,] 0.57025623 0.5933355 0.8308615 0.8912024 0.9103795 0.9258977 0.9473357 #>  [700,] 1.10563972 1.1233627 1.2087139 1.3175230 1.3553161 1.3856050 1.4022734 #>  [701,] 0.18372461 0.5001023 0.6360462 0.6460867 0.7090677 0.7688296 0.8182520 #>  [702,] 0.26592140 0.3878519 0.3941555 0.4407436 0.5507438 0.6509342 0.6691211 #>  [703,] 0.51662510 0.5508315 0.6500023 0.6636568 0.6979966 0.7301040 0.7678663 #>  [704,] 0.27905291 0.4013802 0.4556445 0.4855148 0.5779035 0.5863615 0.6060062 #>  [705,] 0.17712813 0.3342443 0.4159067 0.4203269 0.4891576 0.5211045 0.5364644 #>  [706,] 0.52795244 0.6398728 0.7633360 0.8353210 0.9273754 0.9285300 0.9661993 #>  [707,] 1.20295511 1.4692367 1.6154634 1.7992137 1.8313704 1.8354910 1.8464853 #>  [708,] 0.41128678 0.5747427 0.6546591 0.6778971 0.7170954 0.7208180 0.7215080 #>  [709,] 0.29755885 0.4489744 0.4838201 0.5085695 0.5453236 0.5498468 0.5655232 #>  [710,] 0.20660531 0.2377231 0.2760971 0.3882202 0.4549720 0.4582040 0.4767823 #>  [711,] 0.31171323 0.3570371 0.4567826 0.4601454 0.4678942 0.4851383 0.5025541 #>  [712,] 0.29918549 0.3260580 0.3578974 0.3782453 0.4913079 0.5017701 0.5453692 #>  [713,] 0.49411755 0.5024195 0.5387850 0.5460031 0.6028909 0.6040424 0.6232891 #>  [714,] 0.25553066 0.3807797 0.4307099 0.4596298 0.4653674 0.4865693 0.5480896 #>  [715,] 0.35083358 0.3782453 0.4372181 0.4822843 0.5052709 0.5111125 0.5288020 #>  [716,] 0.28101001 0.6744865 0.7843832 0.8752752 0.9610279 1.0155549 1.0315390 #>  [717,] 0.28849248 0.3160985 0.3998321 0.5672291 0.5826002 0.6141672 0.6590402 #>  [718,] 0.38973371 0.5905078 0.6529608 0.7465997 0.7616025 0.7759396 0.7821060 #>  [719,] 0.22024287 0.3280757 0.3673595 0.3893021 0.4231409 0.4398140 0.4414779 #>  [720,] 0.69323225 0.8461942 0.9116176 0.9155840 0.9241042 0.9264113 0.9418378 #>  [721,] 0.42696992 0.5922880 0.5945137 0.6729041 0.7000338 0.7996258 0.8027635 #>  [722,] 0.74847736 0.7761376 1.0052578 1.0773080 1.2325055 1.2610000 1.2688905 #>  [723,] 0.53621150 0.6649667 0.7050606 0.7550649 0.8382225 0.8806140 0.9186723 #>  [724,] 0.26136956 0.5931126 0.7431772 0.8986359 0.9355992 1.0550265 1.0665304 #>  [725,] 0.31682127 0.3788041 0.4162810 0.4267963 0.4722729 0.5081374 0.5211045 #>  [726,] 0.35752222 0.3788041 0.3868493 0.4886183 0.5001631 0.5465211 0.5784537 #>  [727,] 0.28129841 0.3109877 0.3412205 0.4469935 0.4651031 0.4834487 0.4977855 #>  [728,] 0.43691128 0.4753464 0.5436878 0.5988325 0.6423064 0.6489412 0.6712107 #>  [729,] 0.38410253 0.4089000 0.4242676 0.5552094 0.5721455 0.5811044 0.6116963 #>  [730,] 1.04853738 1.2592341 1.3979023 1.4472431 1.5378628 1.5466112 1.6459905 #>  [731,] 0.41549408 0.6262117 0.6716517 0.7060873 0.7840814 0.8130220 0.8529882 #>  [732,] 0.34267031 0.5191249 0.5467374 0.5921847 0.6867144 0.6950927 0.7260012 #>  [733,] 0.19580280 0.4936210 0.5260483 0.5546339 0.5547224 0.5627207 0.5893963 #>  [734,] 0.27857413 0.4849263 0.5409792 0.6457331 0.6488333 0.6586538 0.7088229 #>  [735,] 0.21646831 0.3508481 0.4812538 0.4826761 0.5085950 0.5154940 0.5305738 #>  [736,] 0.43170140 0.4690875 0.5264752 0.5716426 0.6742815 0.6911936 0.7226345 #>  [737,] 0.34145066 0.4275372 0.5713528 0.6091510 0.6266729 0.6294136 0.6331340 #>  [738,] 0.35665942 0.4244655 0.4399239 0.4744320 0.4817748 0.4935367 0.4949335 #>  [739,] 0.30267795 0.4163103 0.4377380 0.4819460 0.4853179 0.5597195 0.5890081 #>  [740,] 0.21830698 0.3136395 0.4319796 0.4366393 0.4527877 0.4737935 0.4880767 #>  [741,] 0.54017560 0.7015047 0.7835461 0.7966494 0.8769281 0.9016170 0.9160310 #>  [742,] 0.22344048 0.2315838 0.2995746 0.3920649 0.3978650 0.5170964 0.5515974 #>  [743,] 0.28278657 0.2930970 0.3203606 0.3570371 0.3932238 0.4626213 0.4636577 #>  [744,] 0.34812010 0.4807329 0.5287051 0.5409906 0.5865787 0.6121614 0.6620982 #>  [745,] 0.28754350 0.3092191 0.4412127 0.4812538 0.5585983 0.5788986 0.6099168 #>  [746,] 0.30525178 0.3422599 0.3543292 0.3798944 0.4188013 0.4231409 0.4489744 #>  [747,] 0.52759157 0.5407526 0.5527695 0.5548456 0.6127422 0.6752596 0.6781999 #>  [748,] 0.44356112 0.4977439 0.5556991 0.6379792 0.6457331 0.6488583 0.6698416 #>  [749,] 0.48510856 0.8117791 0.8315383 0.8427322 0.8605242 0.9175021 0.9589252 #>  [750,] 0.29102335 0.3151615 0.5264830 0.5765766 0.5902299 0.6425255 0.7172626 #>  [751,] 0.57651011 0.6241073 0.6795041 0.7079785 0.8778067 0.9478711 1.0299986 #>  [752,] 0.40650210 0.4324867 0.4343748 0.4350896 0.4426390 0.4908901 0.5049543 #>  [753,] 0.41464018 0.5586740 0.6395816 0.6709370 0.6750672 0.7579831 0.7808072 #>  [754,] 0.34953506 0.4430797 0.4710908 0.4927239 0.5132728 0.5468995 0.5680844 #>  [755,] 0.28604377 0.3635395 0.3994637 0.5041385 0.5467263 0.5795937 0.6694919 #>  [756,] 0.36530119 0.7042804 0.7187508 0.7371296 0.8010091 0.8021615 0.8046057 #>  [757,] 0.34558726 0.4709764 0.4834487 0.5300733 0.5319530 0.5415294 0.5795376 #>  [758,] 0.29306987 0.5073417 0.5395579 0.5706791 0.5765766 0.5833599 0.6094833 #>  [759,] 0.37126470 0.4686271 0.5155080 0.5283201 0.6166147 0.6572378 0.6691211 #>  [760,] 0.40110545 0.4500614 0.5337972 0.6447028 0.6622607 0.6690414 0.6720321 #>  [761,] 0.29986495 0.3072669 0.3260580 0.4372181 0.4504794 0.4590087 0.4782786 #>  [762,] 0.23772315 0.3460952 0.4185939 0.4697882 0.4721490 0.4728922 0.4862037 #>  [763,] 0.19501765 0.2183070 0.3361192 0.4209539 0.4431478 0.4536507 0.4722222 #>  [764,] 0.35497780 0.4146151 0.4328400 0.4480917 0.4630443 0.4725746 0.4769766 #>  [765,] 0.29756102 0.3337820 0.4369113 0.4653207 0.5247433 0.5374227 0.6043981 #>  [766,] 0.58011814 0.6614197 0.6937263 0.7319751 0.7917295 0.9033606 0.9094331 #>  [767,] 0.41594026 0.5452408 0.5692567 0.5765101 0.5775035 0.6784842 0.6996475 #>  [768,] 0.27800359 0.2812984 0.3463961 0.4424651 0.5013900 0.5148118 0.5392730 #>  [769,] 0.52859040 0.6281919 0.6729307 0.6865952 0.7550649 0.8326878 0.8528669 #>  [770,] 0.43231058 0.5515885 0.6349631 0.7076218 0.7570914 0.8094163 0.8615012 #>  [771,] 0.61141674 0.6456695 0.6887650 0.7014138 0.8441214 0.8568623 0.8679033 #>  [772,] 0.42696992 0.6421818 0.6791367 0.7671323 0.7876729 0.8253881 0.8514361 #>  [773,] 0.48078748 0.5860866 0.6580463 0.6959762 0.7369216 0.7605301 0.7999303 #>  [774,] 0.50010228 0.5969013 0.6121614 0.6621425 0.7310983 0.7424790 0.7802224 #>  [775,] 0.44119640 0.5550493 0.7045053 0.8404222 0.8512957 0.9546601 0.9833903 #>  [776,] 0.62000056 0.6734284 0.7579007 0.8341691 0.8562695 0.8728764 0.9622609 #>  [777,] 0.60683323 0.6158164 0.8201544 0.8990388 0.9060134 0.9367950 1.0102194 #>  [778,] 0.46204253 0.5227066 0.5260483 0.5678294 0.6022492 0.6301933 0.6377201 #>  [779,] 0.77355656 0.8097817 0.8684838 1.0303583 1.0791564 1.0820106 1.2053903 #>  [780,] 0.39596499 0.4006383 0.4283099 0.4656738 0.5360455 0.5377266 0.5403717 #>  [781,] 0.28605694 0.3611832 0.4714210 0.4858604 0.4984722 0.5374883 0.5465126 #>  [782,] 0.44187620 0.5365025 0.8468958 0.8542527 0.9156656 0.9950317 0.9996648 #>  [783,] 0.44279886 0.8250224 0.9798230 1.0045712 1.2166775 1.3032936 1.3223338 #>  [784,] 0.29665491 0.5455110 0.7473691 0.7616267 0.8026838 0.8072740 0.8126448 #>  [785,] 0.25774469 0.4378377 0.4483887 0.4900059 0.5061542 0.5094537 0.5162624 #>  [786,] 0.38544404 0.4988899 0.5207712 0.5521413 0.5558814 0.5647601 0.6419176 #>  [787,] 0.36159114 0.5226789 0.5605272 0.5660106 0.5740092 0.5846650 0.6316444 #>  [788,] 0.15094167 0.6492150 0.6747480 0.6900168 0.7139384 0.7515119 0.7517693 #>  [789,] 0.47509986 0.4953443 0.4989590 0.5944045 0.6131340 0.6716285 0.7465999 #>  [790,] 0.76557133 0.8139490 0.8830710 0.8846710 0.9552284 1.0679325 1.0700316 #>  [791,] 0.52077083 0.5321453 0.5831629 0.6377770 0.6699705 0.6840993 0.6847509 #>  [792,] 0.43825596 0.4492006 0.5005657 0.5720708 0.5827366 0.6000433 0.6537077 #>  [793,] 0.67624563 0.7636449 0.7766485 0.8609617 0.9687646 1.0797497 1.1166100 #>  [794,] 0.63283165 0.6589157 0.7337709 0.8083596 0.8493663 0.8760413 0.9335598 #>  [795,] 0.95790048 0.9811346 1.0763247 1.1475708 1.1592202 1.3015413 1.3068653 #>  [796,] 0.42325444 0.4983501 0.5198168 0.5476248 0.5796316 0.5890626 0.6336015 #>  [797,] 0.66969521 0.6818107 0.8009632 0.8409599 0.8502982 0.8975041 0.9819452 #>  [798,] 0.46741661 0.5000345 0.5094971 0.5344220 0.5809554 0.6066686 0.6752571 #>  [799,] 0.53993545 0.5945137 0.6227331 0.6708251 0.7149105 0.7232039 0.7265484 #>  [800,] 0.27042148 0.3158657 0.4472996 0.4892956 0.4897954 0.4913079 0.4968433 #>  [801,] 0.40877636 0.5858953 0.6321234 0.6840882 0.7203669 0.7592315 0.7602041 #>  [802,] 0.77914342 0.7963899 0.8828443 0.9111056 0.9112521 1.0125421 1.0206095 #>  [803,] 0.49487639 0.7225194 0.7341418 0.7964829 0.8655612 0.8880659 0.8930964 #>  [804,] 0.45824290 0.5202275 0.5301617 0.5642075 0.5721468 0.5741034 0.5796381 #>  [805,] 0.34267031 0.4315083 0.5069168 0.6403740 0.6824800 0.6995873 0.7169808 #>  [806,] 0.55573321 0.7571499 0.8215612 0.9151750 0.9384270 0.9407462 0.9475253 #>  [807,] 0.68813450 0.7582121 0.8094660 0.8307179 0.8393623 0.8634913 0.8701108 #>  [808,] 0.26731894 0.4946386 0.5507438 0.6666750 0.6859119 0.7317968 0.7725772 #>  [809,] 0.21295814 0.3635395 0.4261820 0.4452373 0.4946091 0.5402503 0.5983311 #>  [810,] 0.44119640 0.4928483 0.7198872 0.9167259 0.9345591 0.9454460 0.9505991 #>  [811,] 0.46932559 0.5022789 0.5514912 0.5557180 0.5604123 0.5766523 0.5897335 #>  [812,] 0.54343074 0.5832223 0.6414284 0.6683551 0.6990306 0.7766424 0.7775958 #>  [813,] 0.32935265 0.4457020 0.5116744 0.5287051 0.5491323 0.5998261 0.6812461 #>  [814,] 0.24927188 0.4032888 0.4365151 0.4492803 0.4844176 0.5073417 0.5098431 #>  [815,] 0.65748993 0.7334263 0.7334717 0.7899114 0.7912593 0.8447553 0.9114445 #>  [816,] 0.90979959 0.9120651 0.9151445 1.0992231 1.1382557 1.1531698 1.2826792 #>  [817,] 0.40551627 0.5354088 0.7445213 0.7899429 0.8395665 0.8544337 0.8639894 #>  [818,] 0.49038117 0.8023227 0.9060134 0.9587876 0.9588082 0.9708415 1.0124998 #>  [819,] 0.36578040 0.5586740 0.6011433 0.6694919 0.6725122 0.6797551 0.6984118 #>  [820,] 0.23405299 0.5266683 0.5801181 0.5903466 0.7604793 0.7664642 0.7681634 #>  [821,] 0.64717653 1.1141558 1.2048398 1.2397938 1.2899760 1.3402823 1.3962891 #>  [822,] 1.64267806 1.6616826 1.7896082 1.9985284 2.0185503 2.0640194 2.0753097 #>  [823,] 0.45377794 0.4758191 0.5072671 0.5209023 0.5228152 0.5542641 0.5597187 #>  [824,] 0.31731417 0.4283509 0.4473596 0.4486135 0.5054831 0.5691685 0.5903237 #>  [825,] 0.72952895 0.8766758 0.8811211 0.9041462 0.9202617 0.9725533 1.0090156 #>  [826,] 0.29665491 0.8160166 0.8915890 0.9005057 0.9074246 0.9389795 0.9403717 #>  [827,] 0.83779694 0.8479701 1.0002585 1.0072073 1.0190882 1.0273840 1.0293795 #>  [828,] 0.33552713 0.9751034 1.1077467 1.1393385 1.1517676 1.1868351 1.2142004 #>  [829,] 0.39535036 0.4490767 0.5648053 0.5802220 0.6383382 0.6704425 0.6913616 #>  [830,] 0.39915593 0.5507557 0.6411641 0.6675061 0.6811319 0.6846599 0.7012308 #>  [831,] 0.35476322 0.3899679 0.4074110 0.4132217 0.4408032 0.4501351 0.5033280 #>  [832,] 0.21183003 0.3361192 0.3667478 0.3719889 0.4414779 0.4835706 0.4907942 #>  [833,] 0.31731417 0.4252186 0.4408370 0.4463507 0.4953586 0.5179190 0.5355418 #>  [834,] 0.18025791 0.4505375 0.5403851 0.6398728 0.6558456 0.6878272 0.7515951 #>  [835,] 0.30951244 0.3342443 0.4020952 0.4957648 0.5328225 0.5556817 0.6360920 #>  [836,] 1.21828309 1.4262646 1.4322837 1.7739228 1.9299749 1.9572484 2.0025350 #>  [837,] 0.27102340 0.3991109 0.4366393 0.4549720 0.4567826 0.4837275 0.4911663 #>  [838,] 0.36495537 0.3767963 0.4738372 0.5822591 0.6512642 0.6561144 0.6674095 #>  [839,] 0.61171103 0.6155090 0.6708336 0.6880632 0.7275020 0.7324620 0.7981270 #>  [840,] 0.74084069 0.7852947 0.8231301 0.8487027 0.9996083 1.0896567 1.1053987 #>  [841,] 0.50452287 0.9802327 1.0346089 1.0537209 1.0794077 1.1133902 1.1525658 #>  [842,] 0.26404906 0.3880770 0.5085695 0.5260131 0.5675414 0.5960280 0.6318123 #>  [843,] 1.00959662 1.0759642 1.1515314 1.2467336 1.2802265 1.3301512 1.3362277 #>  [844,] 0.58463346 0.7045053 0.8193923 0.8339899 0.8390367 0.8655612 0.8700247 #>  [845,] 0.25638024 0.3611832 0.3714709 0.4725727 0.5377266 0.5678965 0.5712693 #>  [846,] 0.23586068 0.4219079 0.5418460 0.5574048 0.6165702 0.7042804 0.7181309 #>  [847,] 0.77616460 0.8356453 0.9826766 1.0790151 1.0999546 1.1703108 1.2232388 #>  [848,] 0.35602338 0.5185454 0.5530461 0.5574448 0.5905078 0.6279904 0.6548764 #>  [849,] 0.90086616 0.9718243 1.0703764 1.0999546 1.1001569 1.1604128 1.1812313 #>  [850,] 0.51463224 0.5854698 0.6367938 0.7006985 0.7045065 0.7431772 0.7469315 #>  [851,] 0.16203065 0.3169936 0.3932238 0.4032888 0.4188013 0.4494678 0.4542567 #>  [852,] 0.40063830 0.4592325 0.5954044 0.6455985 0.6799514 0.6997512 0.7217565 #>  [853,] 0.47277668 0.8084563 0.8369278 0.9556746 1.0225406 1.0235714 1.0700905 #>  [854,] 0.34166176 0.3664024 0.4171434 0.4385274 0.4541245 0.4722274 0.4760505 #>  [855,] 0.30709261 0.3295074 0.3517426 0.3943943 0.4350255 0.4513995 0.4612017 #>  [856,] 0.50241955 0.5648697 0.6137553 0.6166816 0.6264814 0.6644677 0.6842002 #>  [857,] 1.02545562 1.3143951 1.3178402 1.3484227 1.3496741 1.3852523 1.4581187 #>  [858,] 0.58492004 0.6847945 0.7934794 0.8024522 0.8632206 0.8928501 0.9717063 #>  [859,] 0.30268243 0.3649554 0.5484668 0.7015190 0.7060873 0.7411182 0.7877888 #>  [860,] 0.36742776 0.4552518 0.6366337 0.6453539 0.6563881 0.6648798 0.6715243 #>  [861,] 0.59911404 0.6149672 0.6455985 0.6803645 0.6982374 0.7180527 0.7307339 #>  [862,] 0.77846153 1.0315659 1.0852952 1.2315463 1.2409560 1.2863928 1.3569760 #>  [863,] 0.25868382 0.3676732 0.4582040 0.4838838 0.4924352 0.5434296 0.5597783 #>  [864,] 0.20621884 0.3937734 0.5805225 0.6456695 0.6912233 0.7646516 0.7721309 #>  [865,] 0.43919463 0.4739795 0.5720539 0.5764672 0.5857955 0.6083381 0.6984118 #>  [866,] 0.82117986 0.8241341 0.9254244 0.9311410 0.9379529 0.9954084 1.0053795 #>  [867,] 0.63652494 1.0181729 1.1531698 1.2274253 1.2296476 1.2583914 1.3630515 #>  [868,] 0.15791809 0.5200511 0.5286678 0.6745211 0.7050692 0.7163502 0.8163568 #>  [869,] 0.72081802 0.8405058 0.9339558 0.9547296 0.9681346 1.0473707 1.0720755 #>  [870,] 0.63660823 0.7644179 0.8750358 0.9262706 0.9481123 0.9559116 1.0156188 #>  [871,] 0.55573321 0.6885770 0.7945735 0.8050744 0.9327932 0.9621093 1.0012413 #>  [872,] 0.94881701 1.2347550 1.4110335 1.4484398 1.5180535 1.5590213 1.5959956 #>  [873,] 0.69705743 1.0837385 1.1546272 1.5156995 1.5250094 1.5331654 1.5451170 #>  [874,] 0.78740304 0.8425481 0.9112659 0.9156656 1.1166100 1.3749636 1.5184581 #>  [875,] 0.18497745 0.2436914 0.3366732 0.4716877 0.5580766 0.5610559 0.6330571 #>  [876,] 0.64311896 0.7427088 0.7452602 0.8340069 0.8486142 0.8949756 0.9064677 #>  [877,] 0.29781299 0.5880065 0.6245888 0.6318411 0.7650750 0.9409994 1.0021546 #>  [878,] 0.37556236 0.4205361 0.4800769 0.4955604 0.5031140 0.5072042 0.5283646 #>  [879,] 0.36403388 0.4412568 0.5324577 0.5357635 0.5801697 0.6458346 0.6605090 #>  [880,] 0.41121271 0.6329897 0.7331036 0.7562910 0.7590442 0.7746827 0.8088757 #>  [881,] 0.24584539 0.8299450 0.8752752 0.8853091 0.9400313 0.9596653 1.0249293 #>  [882,] 0.33990152 0.3513131 0.3807797 0.4016083 0.4287227 0.4505269 0.4636515 #>  [883,] 0.47872512 0.5963015 0.7520786 0.7544457 0.7846325 0.7894578 0.8090106 #>  [884,] 0.76867671 1.0012884 1.0387687 1.1986128 1.3004426 1.4037248 1.4778683 #>  [885,] 0.69884279 0.9063504 0.9742540 0.9976679 0.9979501 1.0728086 1.0743800 #>  [886,] 0.39540906 0.4845617 0.4990029 0.5809554 0.6195026 0.7691329 0.7755278 #>  [887,] 0.33192974 0.3817846 0.4222183 0.4294442 0.4630699 0.4660350 0.4801979 #>  [888,] 0.31098770 0.3717383 0.4280753 0.5078067 0.5319530 0.5384461 0.5392730 #>  [889,] 0.15566660 0.6423990 0.6587763 0.6939371 0.6947399 0.6999829 0.8269337 #>  [890,] 0.43150827 0.5666720 0.5958244 0.6455980 0.6503482 0.6950927 0.8021907 #>  [891,] 0.61315437 0.6525075 0.6894189 0.7286528 0.7503716 0.7688296 0.7821339 #>  [892,] 0.35902995 0.4667912 0.5648697 0.7030836 0.7145403 0.7522778 0.8948893 #>  [893,] 0.58579554 0.6580463 0.7554551 0.7794136 0.7927961 0.7981605 0.8392466 #>  [894,] 0.30768304 0.3400864 0.5079140 0.5622255 0.6147323 0.6292591 0.6339338 #>  [895,] 0.26057457 0.4217011 0.4219079 0.5619008 0.6395816 0.6510061 0.8357349 #>  [896,] 0.35131310 0.4511988 0.4564948 0.5745833 0.5964308 0.6114672 0.6131340 #>  [897,] 0.50774883 0.6319116 0.6595687 0.6659831 0.6840993 0.7403758 0.7524626 #>  [898,] 0.52859040 0.6289282 0.6828095 0.7131240 0.7551208 0.7557130 0.7855642 #>  [899,] 0.35915568 0.5557180 0.5619008 0.5687763 0.5876751 0.6419176 0.6443132 #>  [900,] 0.59025537 0.7305234 0.7669379 0.8342347 0.9231616 1.0224870 1.0240711 #>  [901,] 0.39971867 0.6325765 0.6347835 0.6571982 0.6941300 0.7015047 0.7019985 #>  [902,] 0.18539147 0.2950063 0.3721867 0.5383660 0.5888796 0.5986114 0.6396110 #>  [903,] 0.30995065 0.4084424 0.4098573 0.5394218 0.6082897 0.6794235 0.7182464 #>  [904,] 0.72981904 0.7774180 0.9501241 0.9993669 1.0017470 1.0097467 1.0215047 #>  [905,] 0.48456171 0.5115882 0.5550911 0.6752571 0.6811776 0.7088229 0.7345501 #>  [906,] 0.88515396 1.0395257 1.1235978 1.2880808 1.2988942 1.3329195 1.3339387 #>  [907,] 0.44171938 0.4588043 0.5831587 0.6871991 0.8107517 0.8429024 0.8639344 #>  [908,] 0.48532956 0.5316439 0.7217565 0.7484038 0.7984542 0.8216838 0.8281784 #>  [909,] 0.47906869 0.5902299 0.5959218 0.6278874 0.6761285 0.6886318 0.7009574 #>  [910,] 0.27102340 0.4515957 0.4760505 0.4880767 0.4918514 0.5061482 0.5176510 #>  [911,] 0.40827180 0.5750312 0.6596323 0.6840882 0.6987029 0.7351812 0.7386181 #>  [912,] 0.36674781 0.4236354 0.4453602 0.5017636 0.5095951 0.5210235 0.5337631 #>  [913,] 0.36408756 0.3930415 0.4084785 0.4690875 0.5565143 0.6159350 0.6186386 #>  [914,] 0.62693836 0.7686767 0.8684838 0.9189417 0.9954084 1.0336452 1.1135376 #>  [915,] 0.18278457 0.4802767 0.5255639 0.5291160 0.6703230 0.7180527 0.7670889 #>  [916,] 0.25185127 0.2949634 0.2993604 0.4737935 0.4804533 0.4970679 0.5105750 #>  [917,] 0.63791348 0.6590551 0.6654594 0.6744865 0.7705780 0.7797260 0.8215612 #>  [918,] 0.36166541 0.4398595 0.4954609 0.5720708 0.6129923 0.6469986 0.6471286 #>  [919,] 0.29306987 0.3345037 0.4479895 0.4838838 0.4844176 0.5077764 0.5264830 #>  [920,] 0.70341859 0.7094213 0.7725772 0.8028757 0.8421457 0.8498260 0.8522822 #>  [921,] 0.30258391 0.3467198 0.4589471 0.4758191 0.4846300 0.5036455 0.5211497 #>  [922,] 0.25366724 0.2742726 0.4294442 0.4296775 0.4369733 0.4542866 0.4555924 #>  [923,] 0.35808105 0.3714709 0.3959650 0.4193769 0.5260131 0.5420105 0.5477303 #>  [924,] 0.75714988 0.9662161 0.9677501 1.0012413 1.0482366 1.1045139 1.1118979 #>  [925,] 0.61173588 0.6298198 0.6328317 0.6363375 0.7555048 0.8024194 0.8204536 #>  [926,] 1.15652583 1.4688136 1.5558833 1.5741253 1.5813593 1.6154634 1.6221442 #>  [927,] 0.34039624 0.4346167 0.4962658 0.5058467 0.5224592 0.5379373 0.5527914 #>  [928,] 0.21594290 0.4069555 0.4322114 0.4569902 0.4865693 0.4995391 0.5231996 #>  [929,] 0.62125493 0.7188796 0.8012143 0.8260250 1.1151411 1.1233265 1.1348915 #>  [930,] 0.27901337 0.4235795 0.5632448 0.5672771 0.5695555 0.5885039 0.5947505 #>  [931,] 0.60666860 0.6289469 0.6865952 0.7470500 0.7551208 0.8103719 0.8297681 #>  [932,] 0.77324328 0.8112886 0.8688782 0.9014992 0.9891298 1.0047194 1.0133250 #>  [933,] 1.07822283 1.1128261 1.3546450 1.4426864 1.4856668 1.5025665 1.5483176 #>  [934,] 0.29918549 0.3072669 0.4209831 0.4277738 0.4472996 0.4949691 0.5061147 #>  [935,] 1.09717295 1.2889697 1.3103936 1.3653241 1.3666174 1.3679443 1.3888792 #>  [936,] 0.16203065 0.2120554 0.2930970 0.3052518 0.3321248 0.4140197 0.4748555 #>  [937,] 0.23231854 0.3076830 0.4264171 0.4492803 0.5056200 0.5057390 0.5135875 #>  [938,] 0.36322659 0.3640876 0.3888441 0.4644060 0.5224592 0.5271446 0.5332845 #>  [939,] 0.24584539 0.7843832 0.8416160 0.8699077 0.9195638 1.0739958 1.0896038 #>  [940,] 0.41667911 0.4391360 0.6827840 0.7410226 0.7424790 0.8090088 0.8117791 #>  [941,] 0.32950744 0.3536302 0.3888459 0.4490767 0.4705861 0.5224619 0.5541475 #>  [942,] 0.51981680 0.5292238 0.5564808 0.5637631 0.5753035 0.6178663 0.7113709 #>  [943,] 0.80607081 1.0400390 1.0690177 1.1575136 1.1600459 1.2450972 1.2554826 #>  [944,] 0.36212940 0.8377969 0.9329553 1.1464281 1.2087059 1.2203432 1.2296552 #>  [945,] 0.43070987 0.4391946 0.5645616 0.5848887 0.6903782 0.6981730 0.7637219 #>  [946,] 0.69038732 0.7165282 0.7461739 0.8375593 0.8615639 0.8761239 0.8983097 #>  [947,] 0.31996532 0.6248871 0.6510975 0.6606037 0.6734938 0.7101788 0.7150263 #>  [948,] 0.62925906 0.7325915 0.7961328 0.8022803 0.8299153 0.8322898 0.8441060 #>  [949,] 0.41799612 0.4418762 0.8425481 1.0186796 1.0314046 1.0801949 1.0925987 #>  [950,] 0.17125143 0.2902482 0.5031140 0.5337972 0.5880061 0.6462923 0.6495047 #>  [951,] 0.29765206 0.3941558 0.5572210 0.5631018 0.6131544 0.6181847 0.6624654 #>  [952,] 0.15094167 0.6125635 0.6777772 0.7349606 0.7669861 0.7746372 0.7901013 #>  [953,] 0.45826247 0.6671023 0.6849042 0.7076218 0.7167080 0.8625735 0.8934063 #>  [954,] 1.04753270 1.3277276 1.7792075 1.8997794 1.9897343 2.1426984 2.1705778 #>  [955,] 1.20471972 1.4101273 1.5456264 1.7327980 1.7834144 1.8587290 1.8657595 #>  [956,] 0.66969521 0.6779292 0.6882147 0.7196971 0.8179076 0.8244438 0.8909486 #>  [957,] 0.34682759 0.3591189 0.5265313 0.5276910 0.5291024 0.5796316 0.5981681 #>  [958,] 0.26172432 0.3085330 0.4957648 0.5488292 0.5499580 0.5616951 0.5620349 #>  [959,] 0.51448466 0.5316439 0.7721961 0.7770632 0.7891949 0.8221583 0.8517340 #>  [960,] 0.22024287 0.3198320 0.3719889 0.4020003 0.4163239 0.4700097 0.4834602 #>  [961,] 0.28754350 0.3508481 0.3884428 0.5146322 0.5173150 0.5867615 0.5960996 #>  [962,] 0.80579995 0.8717328 0.9910921 1.1190062 1.1887878 1.2313449 1.2836454 #>  [963,] 0.71752319 0.7761646 0.8427978 0.9008662 1.1724732 1.1949735 1.2152191 #>  [964,] 0.26045814 0.3441824 0.3626244 0.4011055 0.4915421 0.5135481 0.5295210 #>  [965,] 0.40985731 0.5301637 0.5811694 0.7505353 0.7797691 0.7948747 0.8042126 #>  [966,] 0.36931805 0.4787251 0.5275666 0.5974194 0.6967910 0.6968998 0.7049516 #>  [967,] 0.25495130 0.2995746 0.3372410 0.5157767 0.5374827 0.5758965 0.5806541 #>  [968,] 0.36643597 0.3897337 0.4338537 0.5574448 0.6014282 0.6259809 0.6934362 #>  [969,] 0.36549057 0.3742121 0.3888441 0.4766990 0.4918514 0.5057761 0.5207932 #>  [970,] 0.49735137 0.6262117 0.6469765 0.7432386 0.8538483 0.9116430 0.9163022 #>  [971,] 0.51121650 0.5118648 0.5491323 0.5749741 0.5865787 0.6136686 0.6199791 #>  [972,] 0.74721567 0.7693469 0.8576678 1.0019510 1.1178213 1.1835989 1.2071501 #>  [973,] 0.27042148 0.2819084 0.3222288 0.3382569 0.4343748 0.4563722 0.5281515 #>  [974,] 0.19836229 0.4389817 0.6790712 0.6990306 0.7034527 0.7188796 0.7367688 #>  [975,] 0.21205537 0.2827866 0.3169936 0.3543292 0.3882202 0.3893021 0.4185939 #>  [976,] 0.17712813 0.3095124 0.4453602 0.4511801 0.4829069 0.5081374 0.5306704 #>  [977,] 0.42519847 0.4777843 0.6094351 0.6549419 0.7275020 0.7782740 0.8579808 #>  [978,] 0.50233812 0.5413526 0.6622446 0.7352622 0.7358837 0.7838823 0.7844248 #>  [979,] 0.40959234 0.6640985 0.6982639 0.7169927 0.7995357 0.8253050 0.8786748 #>  [980,] 0.61352526 0.7103642 0.7938595 0.8437840 0.9824442 0.9997486 1.0273828 #>  [981,] 0.27981369 0.3615911 0.4435606 0.5067220 0.5347448 0.6146312 0.6678172 #>  [982,] 0.45539475 0.5627005 0.6078362 0.6688554 0.7067906 0.7207743 0.7323126 #>  [983,] 0.34897870 0.3534926 0.4838804 0.4915421 0.4952840 0.5314695 0.5902056 #>  [984,] 1.00841829 1.0166621 1.0334100 1.0395257 1.0519189 1.0845154 1.0918508 #>  [985,] 0.35804233 0.4235795 0.5354281 0.5558380 0.6331761 0.6778309 0.7105025 #>  [986,] 0.21446472 0.3364242 0.3693689 0.3916905 0.4330592 0.4809971 0.5437195 #>  [987,] 0.15605641 0.2780036 0.4514866 0.4651031 0.4940721 0.5796431 0.6068686 #>  [988,] 0.30472944 0.4019809 0.4776850 0.5186687 0.5344464 0.5355980 0.5664812 #>  [989,] 0.24783256 0.2988129 0.3250473 0.3492134 0.3811301 0.4103845 0.4163103 #>  [990,] 0.63199901 0.6930813 0.9304726 1.0052578 1.0121859 1.0795148 1.1130227 #>  [991,] 0.31889280 0.3541282 0.5953967 0.6227331 0.6243076 0.6597966 0.7188745 #>  [992,] 0.57644557 0.6097198 0.6882147 0.7155295 0.7617170 0.8356386 0.8409599 #>  [993,] 0.36403388 0.4745904 0.5416555 0.5813966 0.5942832 0.5947303 0.5964198 #>  [994,] 0.56787183 0.6568808 0.7669379 0.8090106 0.8620086 0.8844039 0.8936407 #>  [995,] 0.44444846 0.5147274 0.7692137 0.7878867 0.8045636 0.8867688 0.8933734 #>  [996,] 0.47064827 0.7524626 0.8670406 0.8763586 0.9034435 0.9107755 0.9121129 #>  [997,] 0.99204288 1.0475327 1.4446343 1.4966871 1.5526657 1.5928860 1.7033113 #>  [998,] 0.30044775 0.3468276 0.4900412 0.4968671 0.6073071 0.6805091 0.7144339 #>  [999,] 0.52922377 0.5477915 0.7216001 0.7837438 0.8210647 0.8429024 0.8637354 #> [1000,] 0.25474129 0.3533957 0.3586991 0.3592579 0.3647870 0.3693689 0.3743787 #>              [,8]      [,9]     [,10] #>    [1,] 0.8922401 0.8998016 0.9121737 #>    [2,] 1.4467866 1.4535858 1.4587757 #>    [3,] 1.8029231 1.8127006 1.8275935 #>    [4,] 0.5802220 0.5819915 0.6156269 #>    [5,] 0.5135481 0.5267126 0.5291423 #>    [6,] 0.6669370 0.6696504 0.6702307 #>    [7,] 0.6585169 0.6626477 0.6648798 #>    [8,] 0.7033410 0.7210513 0.7282924 #>    [9,] 0.6485759 0.6545725 0.6961184 #>   [10,] 0.6261495 0.6647705 0.6788909 #>   [11,] 1.0848338 1.0850527 1.1576804 #>   [12,] 0.4714970 0.4874996 0.5057997 #>   [13,] 1.0890002 1.1201700 1.1349188 #>   [14,] 0.7680214 0.7825512 0.7984010 #>   [15,] 0.9702761 0.9835361 1.0291466 #>   [16,] 0.6040424 0.6259760 0.6327164 #>   [17,] 0.6304600 0.6322855 0.6341278 #>   [18,] 1.2029301 1.2101477 1.2300157 #>   [19,] 0.6146312 0.6368778 0.6559576 #>   [20,] 0.9151445 0.9214538 0.9274388 #>   [21,] 0.9647960 0.9662161 0.9878836 #>   [22,] 0.6099168 0.6107714 0.6278874 #>   [23,] 0.6878106 0.6917914 0.7019985 #>   [24,] 0.7520204 0.7610187 0.8356386 #>   [25,] 1.0546830 1.0905317 1.2087059 #>   [26,] 0.5518402 0.5735172 0.5905666 #>   [27,] 0.5508935 0.5748325 0.5827146 #>   [28,] 0.7716759 0.7770995 0.7833290 #>   [29,] 1.0150902 1.0515948 1.1412900 #>   [30,] 1.1565258 1.1919576 1.2055175 #>   [31,] 0.7312791 0.7605301 0.7664953 #>   [32,] 0.6195422 0.6270885 0.6492038 #>   [33,] 1.4961189 1.6408020 1.6444820 #>   [34,] 1.4925110 1.6395744 1.6538842 #>   [35,] 0.5259417 0.5505804 0.5569904 #>   [36,] 0.7379391 0.7712762 0.7759735 #>   [37,] 0.8949756 0.9673315 0.9723685 #>   [38,] 0.8986617 0.8997708 0.9602259 #>   [39,] 0.8044922 0.8568623 0.8900620 #>   [40,] 0.7299300 0.8039658 0.8073302 #>   [41,] 0.5542891 0.5778491 0.6335324 #>   [42,] 0.4949335 0.5178319 0.5532727 #>   [43,] 1.1377715 1.1707383 1.2278519 #>   [44,] 0.7479500 0.7559196 0.7876458 #>   [45,] 0.5364644 0.5716338 0.6045173 #>   [46,] 0.6321234 0.6396990 0.6771813 #>   [47,] 0.5959112 0.6165757 0.6287439 #>   [48,] 0.9854415 0.9948687 1.0039069 #>   [49,] 0.8332646 0.8421199 0.8648895 #>   [50,] 0.5382203 0.5541462 0.5900646 #>   [51,] 1.1818718 1.2004796 1.2203097 #>   [52,] 0.5667813 0.5801697 0.6082553 #>   [53,] 0.6436857 0.6487585 0.6707531 #>   [54,] 2.2018691 2.2296871 2.2567434 #>   [55,] 0.7680575 0.8063888 0.8145866 #>   [56,] 0.8917921 0.9242711 0.9533856 #>   [57,] 0.5937263 0.6042615 0.6107714 #>   [58,] 1.1091679 1.1383744 1.1407386 #>   [59,] 0.7499888 0.7563992 0.7659068 #>   [60,] 0.7463176 0.7514175 0.7826938 #>   [61,] 1.5555457 1.6247606 1.6619583 #>   [62,] 0.6939652 0.7081583 0.7690073 #>   [63,] 0.7386703 0.7532413 0.7535354 #>   [64,] 1.2914966 1.2927658 1.3141373 #>   [65,] 0.5391976 0.5695033 0.5719446 #>   [66,] 1.1234807 1.1749719 1.1817759 #>   [67,] 1.0386228 1.0666447 1.0767032 #>   [68,] 1.1865664 1.2029551 1.2173909 #>   [69,] 0.7867741 0.7901838 0.8018224 #>   [70,] 0.9168079 0.9184604 0.9273498 #>   [71,] 1.0255014 1.0312796 1.0595581 #>   [72,] 0.6361564 0.6499458 0.6558456 #>   [73,] 0.9273351 0.9442991 0.9745145 #>   [74,] 0.5448479 0.5863458 0.6316970 #>   [75,] 0.6303228 0.6394524 0.6400708 #>   [76,] 0.6809345 0.7548582 0.7742112 #>   [77,] 0.6832014 0.7139233 0.7258309 #>   [78,] 1.5762479 1.6025903 1.6287654 #>   [79,] 0.8032793 0.8144493 0.8294925 #>   [80,] 0.5784537 0.5907111 0.6234637 #>   [81,] 1.0661202 1.1196984 1.1554795 #>   [82,] 0.7075778 0.7319617 0.7660788 #>   [83,] 1.0019510 1.0465202 1.0852952 #>   [84,] 0.6812016 0.7222117 0.7778200 #>   [85,] 0.7976540 0.8369278 0.8929471 #>   [86,] 0.8975411 0.8982850 0.9456435 #>   [87,] 0.7360051 0.8180066 0.8211799 #>   [88,] 0.7867784 0.8155018 0.8186839 #>   [89,] 1.0727086 1.1121710 1.1152065 #>   [90,] 0.6615518 0.7096263 0.7393876 #>   [91,] 0.5520846 0.5948733 0.5978109 #>   [92,] 0.7724454 0.7774051 0.7896818 #>   [93,] 0.5942946 0.5982207 0.6014035 #>   [94,] 0.5131486 0.6294136 0.6380328 #>   [95,] 0.7753923 0.7983427 0.8164395 #>   [96,] 1.3119220 1.3473307 1.3474939 #>   [97,] 0.8905740 0.9184134 0.9238016 #>   [98,] 0.7947613 0.8024335 0.8301789 #>   [99,] 0.9367350 0.9586916 1.0055764 #>  [100,] 0.7330901 0.7623090 0.7816899 #>  [101,] 0.4725684 0.5064644 0.5475456 #>  [102,] 0.6377201 0.6504354 0.6857937 #>  [103,] 0.6186386 0.6323288 0.6453174 #>  [104,] 1.5739987 1.6270740 1.7308448 #>  [105,] 0.5316781 0.5645462 0.5929137 #>  [106,] 0.8405418 0.8469972 0.8668146 #>  [107,] 0.6211346 0.6405782 0.6516900 #>  [108,] 0.7797691 0.8057959 0.8153478 #>  [109,] 1.0396925 1.0599810 1.1332419 #>  [110,] 0.8966218 0.9158733 0.9450495 #>  [111,] 0.5041385 0.5209583 0.5420240 #>  [112,] 1.2532810 1.2625488 1.2718092 #>  [113,] 0.7928323 0.8265605 0.8546106 #>  [114,] 0.8575105 0.8846710 0.9706817 #>  [115,] 0.7347650 0.7500125 0.7797260 #>  [116,] 0.5631214 0.5939755 0.6006006 #>  [117,] 0.7809481 0.8132936 0.8159133 #>  [118,] 0.7743955 0.7989966 0.8361003 #>  [119,] 1.8720643 1.8782307 1.8923894 #>  [120,] 1.3068628 1.3277276 1.3309714 #>  [121,] 0.5391976 0.5877697 0.5924756 #>  [122,] 1.3543632 1.4322481 1.4842751 #>  [123,] 1.3339373 1.3894602 1.4258155 #>  [124,] 0.6089736 0.6290123 0.6499458 #>  [125,] 1.0799071 1.1367236 1.1418156 #>  [126,] 0.9962535 1.0095966 1.0571523 #>  [127,] 0.6621169 0.7048142 0.7129254 #>  [128,] 0.6231637 0.6291358 0.6447341 #>  [129,] 0.7040327 0.7472951 0.7596080 #>  [130,] 0.9077676 0.9117995 0.9771950 #>  [131,] 0.7563112 0.7626539 0.7649593 #>  [132,] 0.5799233 0.6065198 0.6603521 #>  [133,] 0.8700524 0.8724662 0.8745022 #>  [134,] 0.8427978 0.8780866 0.9328152 #>  [135,] 0.5036171 0.5244176 0.5356318 #>  [136,] 1.2877807 1.2915771 1.3103825 #>  [137,] 1.0948195 1.1418156 1.2264129 #>  [138,] 0.5901835 0.5989826 0.6060062 #>  [139,] 0.7311507 0.7555048 0.7847176 #>  [140,] 1.2189996 1.4120155 1.4791081 #>  [141,] 0.7116162 0.7446094 0.7539436 #>  [142,] 0.9805143 0.9824024 0.9850379 #>  [143,] 1.1358786 1.1738980 1.1934568 #>  [144,] 0.8403344 0.8521709 0.8851488 #>  [145,] 0.7116852 0.7192994 0.7444031 #>  [146,] 0.8622148 0.9372780 0.9825521 #>  [147,] 1.1509681 1.2136335 1.2274253 #>  [148,] 0.5502992 0.5796381 0.5991451 #>  [149,] 0.8265455 0.8874487 0.8977355 #>  [150,] 0.7317616 0.7328317 0.7409658 #>  [151,] 0.5605272 0.5749296 0.5947303 #>  [152,] 0.7285163 0.7287136 0.8021615 #>  [153,] 0.9624995 0.9824442 1.0315097 #>  [154,] 0.6018320 0.6064794 0.6218435 #>  [155,] 0.8260865 0.8409248 0.8602206 #>  [156,] 1.0262552 1.0398089 1.0499421 #>  [157,] 0.8522597 0.8562687 0.9168079 #>  [158,] 0.4422924 0.4515865 0.4527877 #>  [159,] 0.6799573 0.7173171 0.7469752 #>  [160,] 0.6217993 0.6296180 0.6334960 #>  [161,] 0.9074994 0.9091415 1.0234566 #>  [162,] 0.7284374 0.7311194 0.7743955 #>  [163,] 1.0949680 1.1216461 1.1416953 #>  [164,] 1.0048822 1.0246878 1.0704781 #>  [165,] 0.6139490 0.6140684 0.6172720 #>  [166,] 0.7798892 0.7819278 0.7880807 #>  [167,] 0.5631357 0.5744096 0.5893663 #>  [168,] 0.7275970 0.7348421 0.7693775 #>  [169,] 0.5219758 0.6554425 0.6669370 #>  [170,] 1.1207326 1.2775306 1.3053997 #>  [171,] 1.2563843 1.2683101 1.3106409 #>  [172,] 0.6219949 0.6256815 0.6473557 #>  [173,] 0.8212760 0.9226462 0.9674919 #>  [174,] 1.0163189 1.0312876 1.0355464 #>  [175,] 0.5004434 0.5017636 0.5085898 #>  [176,] 0.4685279 0.4838201 0.5146455 #>  [177,] 0.4897954 0.5225903 0.5266486 #>  [178,] 0.7050606 0.7063458 0.7834306 #>  [179,] 0.7348421 0.7713546 0.7873478 #>  [180,] 1.1547463 1.2297151 1.3436585 #>  [181,] 0.6978357 0.7044936 0.7517275 #>  [182,] 0.9969218 1.0491555 1.0966366 #>  [183,] 0.6662762 0.6761095 0.6769300 #>  [184,] 0.9869156 1.0852235 1.1119197 #>  [185,] 1.3559058 1.4272440 1.4390492 #>  [186,] 0.5923525 0.6491730 0.7083373 #>  [187,] 0.5161267 0.5675966 0.5771961 #>  [188,] 0.8191713 0.8260160 0.8341964 #>  [189,] 1.2020179 1.2106489 1.2342078 #>  [190,] 1.3504971 1.3892668 1.3965151 #>  [191,] 0.9262189 0.9542403 0.9726802 #>  [192,] 0.7346690 0.7468483 0.7634197 #>  [193,] 0.5459476 0.5712924 0.5929677 #>  [194,] 0.7025204 0.7214949 0.7322353 #>  [195,] 0.6949390 0.6983731 0.7063852 #>  [196,] 0.7437453 0.7465193 0.7764505 #>  [197,] 0.7354772 0.7548385 0.7602020 #>  [198,] 0.7337709 0.7643902 0.8119568 #>  [199,] 1.0237871 1.0312757 1.0533415 #>  [200,] 0.7268699 0.7837857 0.8993067 #>  [201,] 0.6575152 0.7236354 0.7405742 #>  [202,] 0.5324577 0.5347448 0.5576237 #>  [203,] 1.1017855 1.2166775 1.2299706 #>  [204,] 1.5450589 1.5813303 1.6111408 #>  [205,] 0.7129951 0.7939231 0.8016943 #>  [206,] 0.9956492 1.0057510 1.0354552 #>  [207,] 0.7782061 0.7907050 0.7948747 #>  [208,] 0.9142640 0.9169684 1.0002565 #>  [209,] 1.1443123 1.1519375 1.1596935 #>  [210,] 1.1102615 1.2249372 1.2316320 #>  [211,] 0.8045636 0.8304845 0.8632206 #>  [212,] 0.5826323 0.5872788 0.6093371 #>  [213,] 0.7517130 0.7837297 0.8125524 #>  [214,] 0.5238548 0.5312919 0.5434183 #>  [215,] 0.7920441 0.7991182 0.8008434 #>  [216,] 1.1389259 1.1470380 1.1472009 #>  [217,] 1.1371983 1.1909378 1.2053512 #>  [218,] 0.8825837 0.8858620 0.8909486 #>  [219,] 0.8370099 0.9105739 0.9135818 #>  [220,] 2.0837059 2.1355747 2.1607204 #>  [221,] 1.4746244 1.5808169 1.5810643 #>  [222,] 0.6051583 0.6110665 0.6313671 #>  [223,] 0.8954817 0.9008664 0.9103795 #>  [224,] 0.5332845 0.5420240 0.5647601 #>  [225,] 0.7033410 0.7142467 0.7168308 #>  [226,] 0.8745022 0.9150046 0.9303175 #>  [227,] 1.1669017 1.2512318 1.2586816 #>  [228,] 0.8529882 0.8897368 0.8974153 #>  [229,] 1.1154243 1.1708144 1.1794456 #>  [230,] 0.6678172 0.6976912 0.7131789 #>  [231,] 0.5828885 0.5833851 0.6000135 #>  [232,] 0.7637627 0.7903800 0.8095412 #>  [233,] 0.8496452 0.8515182 0.8636688 #>  [234,] 0.6908760 0.7027289 0.7199754 #>  [235,] 0.7537019 0.7711413 0.7857354 #>  [236,] 0.7338938 0.7816197 0.8262008 #>  [237,] 0.5944045 0.6146390 0.6332510 #>  [238,] 0.6784430 0.7169216 0.7634063 #>  [239,] 0.4988899 0.5481491 0.5580766 #>  [240,] 0.8493285 0.8639729 0.8987109 #>  [241,] 0.7026906 0.7079874 0.7432387 #>  [242,] 0.7829772 0.8136916 0.8227446 #>  [243,] 0.7793583 0.8165089 0.8187073 #>  [244,] 0.7188463 0.7770632 0.7953199 #>  [245,] 1.1810595 1.1830311 1.2821621 #>  [246,] 0.7170954 0.7324908 0.7357825 #>  [247,] 1.1422308 1.1491351 1.1595605 #>  [248,] 0.7227819 0.7384438 0.7455419 #>  [249,] 0.7870207 0.8075375 0.8379612 #>  [250,] 0.7274269 0.7343172 0.7350283 #>  [251,] 0.9109741 0.9119423 0.9298687 #>  [252,] 0.4840091 0.4934921 0.5306553 #>  [253,] 0.5662715 0.5854945 0.5886905 #>  [254,] 0.8714196 0.8931498 0.9827200 #>  [255,] 0.7275944 0.7336228 0.7364410 #>  [256,] 0.5788843 0.5934398 0.6011433 #>  [257,] 1.0929856 1.1354358 1.2004183 #>  [258,] 0.8193923 0.8225054 0.8714417 #>  [259,] 1.2951952 1.3245809 1.3574091 #>  [260,] 1.1036616 1.1439579 1.1775088 #>  [261,] 0.9805850 0.9870636 1.0042287 #>  [262,] 0.7703250 0.8066490 0.8295395 #>  [263,] 2.2007110 2.2461205 2.2628849 #>  [264,] 0.7742112 0.8105872 0.8265605 #>  [265,] 0.6563208 0.6642328 0.6678006 #>  [266,] 0.6905181 0.7058066 0.7345725 #>  [267,] 0.7019215 0.8099807 0.8142576 #>  [268,] 0.8694149 0.9026670 0.9036848 #>  [269,] 1.1248309 1.1295507 1.1591072 #>  [270,] 0.9639724 0.9666537 0.9762446 #>  [271,] 1.1477430 1.1541009 1.1815125 #>  [272,] 0.7895882 0.8288206 0.8663508 #>  [273,] 0.5510293 0.5752453 0.5920743 #>  [274,] 0.8164982 0.8315383 0.8323365 #>  [275,] 0.6664219 0.6703230 0.6971327 #>  [276,] 1.1784001 1.2560051 1.2705140 #>  [277,] 0.7386703 0.7607521 0.7610192 #>  [278,] 1.0329208 1.0472724 1.0720755 #>  [279,] 0.4767832 0.5224619 0.5406422 #>  [280,] 1.1333153 1.1888429 1.1955341 #>  [281,] 0.8829690 0.9224045 0.9344081 #>  [282,] 0.6455925 0.6462566 0.6623421 #>  [283,] 1.1283653 1.1469545 1.1684290 #>  [284,] 0.9063504 0.9573649 0.9677501 #>  [285,] 0.7232652 0.7255078 0.7324186 #>  [286,] 0.9000625 0.9135110 0.9165332 #>  [287,] 0.5475870 0.5631357 0.5732453 #>  [288,] 1.1566587 1.1652865 1.2308091 #>  [289,] 1.1277928 1.2521031 1.2629211 #>  [290,] 1.0087971 1.0154646 1.0176597 #>  [291,] 1.8359165 1.9468671 2.0101478 #>  [292,] 0.9671383 0.9856851 1.0612736 #>  [293,] 0.5119588 0.5469985 0.5497802 #>  [294,] 0.7912593 0.8132554 0.8157666 #>  [295,] 1.1851775 1.2015221 1.2176158 #>  [296,] 0.7110118 0.7152293 0.7261364 #>  [297,] 1.3636343 1.3690200 1.3784277 #>  [298,] 0.8712917 0.8781351 0.8867688 #>  [299,] 0.7257239 0.7338938 0.7512929 #>  [300,] 0.5569414 0.5869031 0.5979595 #>  [301,] 0.9742540 0.9746361 1.0085787 #>  [302,] 0.5734895 0.6263520 0.6836998 #>  [303,] 0.6484780 0.7041823 0.7354772 #>  [304,] 0.6264115 0.6742423 0.6841329 #>  [305,] 0.7622950 0.7781405 0.7801278 #>  [306,] 0.9365133 0.9631684 0.9853934 #>  [307,] 0.6382716 0.6614889 0.6822434 #>  [308,] 0.7498710 0.8007797 0.8043827 #>  [309,] 0.7163502 0.7563859 0.7988196 #>  [310,] 0.5120440 0.5388757 0.5465140 #>  [311,] 0.7980665 0.8344477 0.8616578 #>  [312,] 0.6330571 0.6473391 0.6534298 #>  [313,] 0.6939484 0.7011344 0.7091693 #>  [314,] 0.7705780 0.7902110 0.8227235 #>  [315,] 0.6191327 0.6332478 0.6341900 #>  [316,] 1.6214330 1.6336426 1.6381509 #>  [317,] 0.7224336 0.7301040 0.7533895 #>  [318,] 0.5979595 0.6267668 0.6784398 #>  [319,] 0.6619499 0.6793158 0.7152293 #>  [320,] 0.6964684 0.6988993 0.7216293 #>  [321,] 0.8865080 0.9039148 0.9046611 #>  [322,] 0.7463988 0.7842083 0.9270532 #>  [323,] 0.6754606 0.7330901 0.7634063 #>  [324,] 1.3016986 1.3043747 1.3153947 #>  [325,] 0.9214054 0.9478499 0.9723732 #>  [326,] 0.6580117 0.6622683 0.6808597 #>  [327,] 0.9021442 0.9237264 0.9311410 #>  [328,] 1.3350614 1.3526752 1.3606111 #>  [329,] 0.6132182 0.6355249 0.6363459 #>  [330,] 0.7749019 0.7853716 0.7855818 #>  [331,] 0.8782510 0.9330121 0.9613462 #>  [332,] 0.9888812 0.9987758 1.0513220 #>  [333,] 0.8453914 0.8479237 0.8750859 #>  [334,] 0.5009616 0.5546315 0.5645624 #>  [335,] 0.6211346 0.6455615 0.7332088 #>  [336,] 0.6603680 0.7067479 0.7142905 #>  [337,] 1.1847567 1.2385827 1.2779932 #>  [338,] 0.9102882 0.9493329 0.9502234 #>  [339,] 1.3828238 1.4511361 1.4906697 #>  [340,] 0.7942927 0.8285187 0.8295395 #>  [341,] 0.8189771 0.8343526 0.8574474 #>  [342,] 0.7409761 0.7678326 0.7681634 #>  [343,] 0.7019215 0.7111578 0.7394663 #>  [344,] 0.5086029 0.5196727 0.5438505 #>  [345,] 0.5532094 0.5752964 0.5878128 #>  [346,] 1.1003326 1.1299268 1.1662595 #>  [347,] 0.9308437 0.9326901 0.9800089 #>  [348,] 1.3004426 1.3172444 1.3243286 #>  [349,] 0.4372508 0.4538657 0.4555924 #>  [350,] 0.6372406 0.6506684 0.6635839 #>  [351,] 0.8299114 0.8375593 0.8595735 #>  [352,] 0.9111564 0.9559116 1.0286930 #>  [353,] 1.7346419 1.7447974 1.8019883 #>  [354,] 0.7230334 0.7804979 0.7881493 #>  [355,] 0.9645676 0.9844431 0.9981445 #>  [356,] 0.5538488 0.5602936 0.6132182 #>  [357,] 1.2709602 1.2943518 1.3045795 #>  [358,] 0.6706033 0.6708804 0.6770270 #>  [359,] 0.8380465 0.8405444 0.8451886 #>  [360,] 0.5376948 0.5835258 0.5887747 #>  [361,] 0.6956501 0.7075731 0.7172680 #>  [362,] 0.5585983 0.5598585 0.5960996 #>  [363,] 0.8763586 0.8850837 0.9982041 #>  [364,] 0.6970998 0.7319617 0.7420934 #>  [365,] 0.4537683 0.4714970 0.4892956 #>  [366,] 0.5483217 0.5834059 0.6026177 #>  [367,] 1.1615610 1.2015661 1.2986707 #>  [368,] 2.1831179 2.2295702 2.2512958 #>  [369,] 0.6473557 0.6698416 0.6881345 #>  [370,] 0.6187476 0.6323020 0.6379176 #>  [371,] 0.6364726 0.6533808 0.6554923 #>  [372,] 0.6210677 0.6419681 0.6461156 #>  [373,] 1.6005675 1.6841608 1.7169447 #>  [374,] 0.6895656 0.7157962 0.7346699 #>  [375,] 0.6932951 0.7146508 0.7616009 #>  [376,] 0.6301136 0.6351550 0.6440516 #>  [377,] 0.7163805 0.7493418 0.7575437 #>  [378,] 0.7643902 0.7740556 0.7941319 #>  [379,] 0.4803468 0.5808069 0.5818642 #>  [380,] 2.1272616 2.1278419 2.2095584 #>  [381,] 0.8843160 0.9146129 0.9149601 #>  [382,] 0.5974133 0.6366430 0.6435883 #>  [383,] 1.0738880 1.1306671 1.1716578 #>  [384,] 0.6082553 0.6368778 0.6425711 #>  [385,] 0.6599148 0.6627264 0.7286429 #>  [386,] 0.5162624 0.5196727 0.5437261 #>  [387,] 0.9125994 0.9492067 0.9505563 #>  [388,] 1.1797425 1.1916131 1.1933586 #>  [389,] 0.9773839 0.9997486 1.0003609 #>  [390,] 0.7446094 0.7457578 0.7553842 #>  [391,] 0.9217614 0.9519162 0.9844611 #>  [392,] 0.6086624 0.6397516 0.6496164 #>  [393,] 0.8093252 0.8283689 0.8313313 #>  [394,] 0.8480174 0.8614801 0.8746955 #>  [395,] 0.7453061 0.7657226 0.8049669 #>  [396,] 1.1375557 1.1425909 1.1780912 #>  [397,] 0.8603896 0.8756191 0.9333197 #>  [398,] 0.6793158 0.6985109 0.6989684 #>  [399,] 0.7732824 0.7862390 0.8021759 #>  [400,] 0.9407462 0.9573649 0.9591814 #>  [401,] 1.1017541 1.1133754 1.2110430 #>  [402,] 0.7647870 0.7882780 0.8064002 #>  [403,] 0.7835348 0.7851902 0.8033041 #>  [404,] 0.8446850 0.8767686 0.8776702 #>  [405,] 0.8014984 0.8656743 0.8742884 #>  [406,] 0.9117642 0.9553614 0.9589899 #>  [407,] 0.6044235 0.6069867 0.6168777 #>  [408,] 0.7093371 0.7275514 0.7346690 #>  [409,] 0.5166339 0.5812455 0.5828276 #>  [410,] 0.5729260 0.5986328 0.6243621 #>  [411,] 0.6959762 0.7071255 0.7517109 #>  [412,] 0.7193596 0.7284487 0.7359332 #>  [413,] 0.9217381 0.9295522 0.9385807 #>  [414,] 0.6021585 0.6038861 0.6351641 #>  [415,] 0.9020972 0.9080171 0.9088878 #>  [416,] 0.5969951 0.6086547 0.6157922 #>  [417,] 1.1168240 1.1696239 1.2142004 #>  [418,] 0.9993669 1.0486707 1.0601933 #>  [419,] 0.6506684 0.6599148 0.6627958 #>  [420,] 0.7329260 0.7381499 0.7459035 #>  [421,] 0.6299886 0.6840485 0.7038665 #>  [422,] 0.9025165 1.0085719 1.0105388 #>  [423,] 1.5257339 1.5317460 1.5790175 #>  [424,] 0.7028606 0.7180288 0.7248968 #>  [425,] 1.0666088 1.1019115 1.1373789 #>  [426,] 1.5025754 1.5196197 1.6006461 #>  [427,] 1.5009814 1.5364701 1.5873032 #>  [428,] 0.5678965 0.5712959 0.6022492 #>  [429,] 1.1079130 1.1201307 1.1367918 #>  [430,] 0.5052709 0.5070883 0.5196773 #>  [431,] 0.9692599 0.9888777 1.0781163 #>  [432,] 0.9220079 1.0306785 1.1045139 #>  [433,] 0.8717659 0.8750611 0.8938344 #>  [434,] 0.5171921 0.5261735 0.5296197 #>  [435,] 0.8607973 0.8674263 0.9223368 #>  [436,] 0.6535798 0.7071979 0.7146291 #>  [437,] 1.7301936 1.8433123 1.8700198 #>  [438,] 1.1407372 1.1605379 1.1685814 #>  [439,] 0.7477239 0.7721309 0.7838893 #>  [440,] 0.7124895 0.7174343 0.7249235 #>  [441,] 0.9079755 0.9590791 0.9719815 #>  [442,] 1.0011878 1.0581721 1.0630721 #>  [443,] 0.9107755 0.9485065 0.9576958 #>  [444,] 0.5774324 0.5788843 0.5981158 #>  [445,] 0.6979548 0.7010881 0.7030094 #>  [446,] 1.4700034 1.4773049 1.4785838 #>  [447,] 1.0367883 1.0492980 1.1457896 #>  [448,] 1.0622586 1.0992231 1.1097365 #>  [449,] 1.1834294 1.2503182 1.2730118 #>  [450,] 0.8187957 0.8623991 0.8630077 #>  [451,] 1.0303583 1.0972382 1.1101641 #>  [452,] 0.7009574 0.7279022 0.7394363 #>  [453,] 0.9121095 0.9298961 0.9576833 #>  [454,] 0.6003301 0.6039347 0.6190064 #>  [455,] 0.7936706 0.7961145 0.8157535 #>  [456,] 0.4325840 0.5407526 0.6005805 #>  [457,] 0.8078919 0.8261597 0.8279084 #>  [458,] 0.6711596 0.7992449 0.8065012 #>  [459,] 0.5498468 0.5647631 0.5784103 #>  [460,] 0.6354009 0.6415395 0.6892662 #>  [461,] 0.5707075 0.6701880 0.6836572 #>  [462,] 0.8725691 0.9144785 0.9314859 #>  [463,] 0.5782096 0.5942946 0.6425255 #>  [464,] 1.2537471 1.2880344 1.2889697 #>  [465,] 0.7574779 0.7899514 0.7959594 #>  [466,] 0.9857033 1.0050186 1.0093239 #>  [467,] 0.8427322 0.8507311 0.8634859 #>  [468,] 0.5210235 0.5396087 0.5796432 #>  [469,] 0.8562687 0.8635426 0.8760143 #>  [470,] 1.0669006 1.1857552 1.2229703 #>  [471,] 0.5251383 0.5457542 0.5497802 #>  [472,] 1.3427001 1.3468125 1.3588971 #>  [473,] 0.7337338 0.7822590 0.8128734 #>  [474,] 0.6129219 0.6182860 0.6379792 #>  [475,] 0.7562910 0.7566706 0.7952038 #>  [476,] 0.5316781 0.5647059 0.5812709 #>  [477,] 0.9121095 0.9257921 0.9462010 #>  [478,] 0.7599748 0.8021673 0.8332855 #>  [479,] 0.8127675 0.8139305 0.8265416 #>  [480,] 1.5142343 1.5387635 1.5545622 #>  [481,] 0.5929137 0.6548179 0.6786311 #>  [482,] 0.6725122 0.6794634 0.6808738 #>  [483,] 0.5481491 0.5537570 0.5792655 #>  [484,] 0.8019406 0.8817395 0.8949158 #>  [485,] 0.5064871 0.5298393 0.5384105 #>  [486,] 0.5635194 0.6393196 0.6469762 #>  [487,] 0.7637627 0.7713546 0.7877470 #>  [488,] 0.4922367 0.5235760 0.5332572 #>  [489,] 0.5444483 0.5812802 0.5813301 #>  [490,] 0.8498260 0.8640813 0.8981515 #>  [491,] 1.0768503 1.1183620 1.1477430 #>  [492,] 0.8460117 0.8461942 0.8499530 #>  [493,] 0.9105336 0.9140134 0.9187569 #>  [494,] 0.9099569 0.9326464 0.9852696 #>  [495,] 1.3853818 1.4134781 1.4356219 #>  [496,] 1.5133153 1.6387281 1.6442149 #>  [497,] 1.3819045 1.4108729 1.4614787 #>  [498,] 0.5646436 0.6268877 0.6534849 #>  [499,] 0.8219524 0.8307839 0.8424930 #>  [500,] 0.9928704 0.9967032 1.0123011 #>  [501,] 1.0859794 1.1162218 1.1216461 #>  [502,] 0.5408806 0.5653870 0.5666711 #>  [503,] 0.5657115 0.6100032 0.6159350 #>  [504,] 0.8440369 0.8527711 0.8556652 #>  [505,] 1.4506192 1.4632005 1.4691057 #>  [506,] 0.5900646 0.6034221 0.6071781 #>  [507,] 2.3019450 2.3423070 2.3736490 #>  [508,] 0.5306704 0.5355980 0.5406166 #>  [509,] 0.9425582 0.9578563 0.9651218 #>  [510,] 0.5058240 0.5364276 0.5380718 #>  [511,] 0.7472003 0.7543516 0.8275537 #>  [512,] 0.7341883 0.7438778 0.7477201 #>  [513,] 0.6963896 0.7324186 0.7696721 #>  [514,] 1.1437996 1.1539633 1.1820862 #>  [515,] 0.9091415 0.9267964 0.9421893 #>  [516,] 0.7868371 0.7895882 0.7917703 #>  [517,] 0.8286492 0.8294296 0.8948737 #>  [518,] 0.7582796 0.7718212 0.7794460 #>  [519,] 0.9926578 1.0083236 1.0494088 #>  [520,] 0.7910674 0.8086275 0.8149729 #>  [521,] 0.7764505 0.7932998 0.8784547 #>  [522,] 0.6484272 0.6559263 0.6682095 #>  [523,] 1.7780989 1.7853325 1.8071558 #>  [524,] 0.6532045 0.7338559 0.7853716 #>  [525,] 1.0218559 1.0547852 1.0617902 #>  [526,] 0.8023227 0.8610759 0.8861253 #>  [527,] 0.9381688 0.9383106 0.9535819 #>  [528,] 0.9589252 0.9724700 0.9863246 #>  [529,] 0.7312481 0.7368605 0.7412206 #>  [530,] 0.5732453 0.6271832 0.6379137 #>  [531,] 0.7847656 0.8198959 0.8996429 #>  [532,] 0.9380358 0.9438881 0.9832797 #>  [533,] 0.7719512 0.7737067 0.7776884 #>  [534,] 0.6833733 0.7356873 0.7377510 #>  [535,] 0.7489910 0.7628416 0.7731659 #>  [536,] 0.6625919 0.6683551 0.6716722 #>  [537,] 1.1406648 1.1554795 1.1566896 #>  [538,] 0.5879453 0.6064624 0.6510205 #>  [539,] 1.0589084 1.1107672 1.1121710 #>  [540,] 1.2188148 1.2614257 1.2778315 #>  [541,] 0.8431150 0.9124909 0.9830275 #>  [542,] 1.4467507 1.4480097 1.4872043 #>  [543,] 0.6772398 0.6808597 0.6824195 #>  [544,] 1.1265151 1.1386808 1.1789038 #>  [545,] 1.2041357 1.2948771 1.2950358 #>  [546,] 0.9166889 0.9397434 0.9841491 #>  [547,] 1.0890957 1.1053850 1.1087128 #>  [548,] 0.5975887 0.6125040 0.6638815 #>  [549,] 0.8595303 0.8698411 0.8846168 #>  [550,] 0.5901146 0.6348907 0.6538622 #>  [551,] 0.4541245 0.4792013 0.4850270 #>  [552,] 0.6693627 0.6739440 0.6802370 #>  [553,] 0.5477303 0.5585386 0.6080045 #>  [554,] 0.8192942 0.8716156 0.9141726 #>  [555,] 0.5581420 0.5697194 0.6078514 #>  [556,] 0.5244176 0.5327842 0.5716338 #>  [557,] 1.7904081 1.8081551 1.8331315 #>  [558,] 0.6972086 0.7360820 0.7397684 #>  [559,] 0.5667813 0.5680844 0.5749296 #>  [560,] 0.7520204 0.7543516 0.7700922 #>  [561,] 0.5424743 0.5792537 0.6466267 #>  [562,] 0.7334717 0.8130102 0.8226384 #>  [563,] 1.1414824 1.2312689 1.2362145 #>  [564,] 0.7249235 0.7450219 0.7893502 #>  [565,] 0.9297400 0.9563153 0.9734788 #>  [566,] 0.7188463 0.7628624 0.7937940 #>  [567,] 0.5027612 0.5043626 0.5774324 #>  [568,] 0.8132182 0.8207177 0.8221583 #>  [569,] 0.6410044 0.6504989 0.6527551 #>  [570,] 0.8099950 0.8778067 0.9273351 #>  [571,] 0.5469235 0.5562351 0.5596539 #>  [572,] 0.7551619 0.8032415 0.8165089 #>  [573,] 1.0272164 1.0610627 1.1367236 #>  [574,] 0.6034221 0.6499027 0.6640514 #>  [575,] 0.5959218 0.6161361 0.6313671 #>  [576,] 0.7309714 0.7774051 0.7911653 #>  [577,] 0.6666823 0.6750526 0.6830452 #>  [578,] 0.5750183 0.5915632 0.6032922 #>  [579,] 1.1219727 1.1686294 1.1784001 #>  [580,] 0.5766523 0.5981681 0.6684068 #>  [581,] 0.7680339 0.7810103 0.8106460 #>  [582,] 0.7791434 0.7825755 0.8111723 #>  [583,] 0.7718992 0.7731921 0.7941025 #>  [584,] 0.6603952 0.6684770 0.6822442 #>  [585,] 1.2481536 1.2533808 1.2663852 #>  [586,] 0.7263023 0.8128024 0.8320023 #>  [587,] 0.8574474 0.9101863 0.9369507 #>  [588,] 0.6307449 0.6337297 0.6382716 #>  [589,] 0.9688907 0.9743330 0.9813916 #>  [590,] 0.8934383 0.9099637 0.9196703 #>  [591,] 1.0306785 1.0321484 1.1098559 #>  [592,] 0.5283201 0.5380718 0.5749143 #>  [593,] 0.6534298 0.6769122 0.6773447 #>  [594,] 0.5295210 0.5299167 0.5387529 #>  [595,] 0.7910674 0.8143954 0.8559988 #>  [596,] 0.7580115 0.7659849 0.7714064 #>  [597,] 0.5923525 0.6038459 0.6064624 #>  [598,] 0.5132653 0.5261735 0.5267645 #>  [599,] 0.6922767 0.7324288 0.7399681 #>  [600,] 0.6455147 0.6561144 0.6597966 #>  [601,] 0.8770605 0.8941829 0.9975450 #>  [602,] 1.3105498 1.3345788 1.3628639 #>  [603,] 1.1064261 1.2648038 1.2891037 #>  [604,] 0.7737794 0.7924554 0.7955186 #>  [605,] 0.7109290 0.7149125 0.7309714 #>  [606,] 0.7044936 0.7146763 0.7246447 #>  [607,] 0.8174458 0.8265497 0.8402326 #>  [608,] 0.8143954 0.8158649 0.8294925 #>  [609,] 1.0489858 1.1137955 1.2008495 #>  [610,] 1.0032508 1.0118300 1.0213471 #>  [611,] 0.5169493 0.5214630 0.5288020 #>  [612,] 0.5304794 0.5384289 0.5429400 #>  [613,] 0.7263827 0.7382238 0.8059965 #>  [614,] 0.6237194 0.6269903 0.6460637 #>  [615,] 0.6165757 0.6529585 0.6560228 #>  [616,] 0.4504794 0.4513995 0.4630491 #>  [617,] 0.6644566 0.6794235 0.6812332 #>  [618,] 0.6691162 0.6945389 0.6988489 #>  [619,] 0.5681713 0.5901835 0.5967859 #>  [620,] 0.7561912 0.7635031 0.7726102 #>  [621,] 0.6720937 0.7669192 0.8454886 #>  [622,] 1.0116622 1.0481919 1.0911476 #>  [623,] 0.5532094 0.5580967 0.5987923 #>  [624,] 0.6529585 0.6956501 0.7490367 #>  [625,] 0.8633895 0.8662389 0.8719505 #>  [626,] 0.7732824 0.8047381 0.8534949 #>  [627,] 1.0505442 1.0590223 1.1243998 #>  [628,] 1.0736302 1.1115540 1.1337011 #>  [629,] 0.8779628 0.8996149 0.9043254 #>  [630,] 1.4262881 1.4534739 1.4786515 #>  [631,] 0.5632448 0.5907111 0.6044081 #>  [632,] 1.3189758 1.3350563 1.3645237 #>  [633,] 0.5529526 0.6184910 0.6425980 #>  [634,] 1.3349830 1.4025821 1.4050027 #>  [635,] 1.2821119 1.2920998 1.3121945 #>  [636,] 1.6128663 1.6182045 1.6374540 #>  [637,] 0.4855326 0.4908540 0.5392230 #>  [638,] 0.8055629 0.8058850 0.8549181 #>  [639,] 1.5655639 1.5702338 1.5760876 #>  [640,] 1.8825910 1.9826209 2.0266839 #>  [641,] 0.5788986 0.5990590 0.6003501 #>  [642,] 0.6417840 0.6683897 0.6746350 #>  [643,] 0.6478288 0.6869581 0.7013955 #>  [644,] 1.2130907 1.2278519 1.2285008 #>  [645,] 0.6428627 0.6441382 0.6484780 #>  [646,] 0.5721468 0.6059156 0.7276818 #>  [647,] 0.6489805 0.6522620 0.6813204 #>  [648,] 0.6985109 0.7075047 0.7213851 #>  [649,] 1.0682437 1.1008078 1.1137491 #>  [650,] 1.2717392 1.3069852 1.3379701 #>  [651,] 0.5544224 0.7049413 0.7258273 #>  [652,] 0.8862421 0.9087173 0.9676636 #>  [653,] 0.9151371 0.9186316 0.9220079 #>  [654,] 0.6153223 0.6226022 0.6568106 #>  [655,] 0.7068868 0.7608841 0.7960185 #>  [656,] 0.6909383 0.7103642 0.7129823 #>  [657,] 0.7071022 0.7481409 0.7623921 #>  [658,] 1.0814359 1.1886049 1.1897497 #>  [659,] 0.8917921 0.8935359 0.9023596 #>  [660,] 0.4540692 0.4790495 0.5502992 #>  [661,] 0.9912482 0.9995837 1.0164350 #>  [662,] 0.5934398 0.6026177 0.6430802 #>  [663,] 0.5650481 0.5940756 0.6171024 #>  [664,] 0.8678382 0.9090684 0.9296628 #>  [665,] 0.6051508 0.6062640 0.6327164 #>  [666,] 0.5966024 0.6038861 0.6487300 #>  [667,] 0.6626468 0.6990648 0.7500125 #>  [668,] 0.9058932 0.9295131 0.9297466 #>  [669,] 1.0678454 1.0731714 1.0901202 #>  [670,] 0.8994359 0.9065585 0.9120651 #>  [671,] 0.6622446 0.7220344 0.7254485 #>  [672,] 1.4968686 1.5217633 1.5282730 #>  [673,] 0.6709907 0.6814873 0.7173171 #>  [674,] 1.4275383 1.4317773 1.4431881 #>  [675,] 1.1069240 1.1262191 1.1424633 #>  [676,] 1.2723366 1.2996945 1.3125101 #>  [677,] 0.9856585 1.0253626 1.0442503 #>  [678,] 0.5693230 0.5839245 0.6129432 #>  [679,] 0.6468822 0.6674445 0.6779292 #>  [680,] 0.9104815 0.9117995 0.9240226 #>  [681,] 0.7759195 0.7819222 0.8024632 #>  [682,] 0.5347010 0.5473943 0.5743751 #>  [683,] 1.0093148 1.0098182 1.0114536 #>  [684,] 1.0133150 1.0458231 1.0568564 #>  [685,] 1.0365774 1.0484353 1.2407562 #>  [686,] 0.9629357 0.9774040 0.9856585 #>  [687,] 2.1105824 2.1701799 2.1891477 #>  [688,] 0.7221163 0.7757531 0.8329800 #>  [689,] 0.7821339 0.8031007 0.8779628 #>  [690,] 0.6349548 0.6349991 0.6530693 #>  [691,] 0.9383848 0.9462008 0.9699823 #>  [692,] 0.7883669 0.7946738 0.7976540 #>  [693,] 0.9301835 0.9370142 0.9741921 #>  [694,] 0.5964198 0.6444054 0.6461156 #>  [695,] 1.5769313 1.6353177 1.6960708 #>  [696,] 0.9084235 0.9982850 1.0048404 #>  [697,] 0.9064128 0.9127152 0.9405880 #>  [698,] 0.5467263 0.5983311 0.6373784 #>  [699,] 1.0032508 1.0459564 1.0721829 #>  [700,] 1.4241088 1.4405298 1.4506751 #>  [701,] 0.8361003 0.8576384 0.8677421 #>  [702,] 0.7014788 0.7085249 0.7268444 #>  [703,] 0.8092905 0.8155018 0.8434653 #>  [704,] 0.6279904 0.6377572 0.6721521 #>  [705,] 0.5543523 0.5546315 0.5576727 #>  [706,] 0.9884961 0.9999955 1.0090156 #>  [707,] 1.8605742 1.8953173 1.8955648 #>  [708,] 0.7296950 0.7719461 0.7796069 #>  [709,] 0.5675657 0.5788397 0.5920743 #>  [710,] 0.5002294 0.5071658 0.5172081 #>  [711,] 0.5635139 0.5662715 0.5850885 #>  [712,] 0.5552094 0.5782193 0.5859562 #>  [713,] 0.6287204 0.6394524 0.6483098 #>  [714,] 0.5625678 0.6083381 0.6684068 #>  [715,] 0.5530976 0.5803604 0.5970211 #>  [716,] 1.0407664 1.0983261 1.1236904 #>  [717,] 0.6626468 0.6976912 0.7129951 #>  [718,] 0.7956178 0.7964829 0.8187073 #>  [719,] 0.4748555 0.4850264 0.5309507 #>  [720,] 0.9622591 0.9634676 0.9642177 #>  [721,] 0.8730366 0.8777171 0.9015108 #>  [722,] 1.3377737 1.3553161 1.3731564 #>  [723,] 0.9330946 0.9602259 1.0532609 #>  [724,] 1.0727279 1.1034759 1.1368645 #>  [725,] 0.5328225 0.5642075 0.6101225 #>  [726,] 0.5844198 0.5975819 0.6513323 #>  [727,] 0.5307184 0.5692379 0.5696341 #>  [728,] 0.6973177 0.7023698 0.7188961 #>  [729,] 0.6227225 0.6530494 0.6729041 #>  [730,] 1.6529668 1.6928532 1.7111522 #>  [731,] 0.9160888 0.9561111 0.9928324 #>  [732,] 0.7801278 0.7884250 0.8028205 #>  [733,] 0.6199702 0.6331340 0.6775544 #>  [734,] 0.7202403 0.7277280 0.7314729 #>  [735,] 0.5383934 0.5790121 0.6169549 #>  [736,] 0.7442539 0.7443192 0.7606023 #>  [737,] 0.6491597 0.6698388 0.7086128 #>  [738,] 0.5155080 0.5361314 0.5465126 #>  [739,] 0.5940881 0.5987556 0.6043981 #>  [740,] 0.5002294 0.5023013 0.5102206 #>  [741,] 0.9251849 0.9463437 0.9682611 #>  [742,] 0.6064591 0.6298733 0.6412921 #>  [743,] 0.5071658 0.5425313 0.5434671 #>  [744,] 0.7090677 0.7762345 0.8074315 #>  [745,] 0.6367938 0.6504989 0.6585893 #>  [746,] 0.4536507 0.4636577 0.4773995 #>  [747,] 0.6927268 0.7397859 0.7463448 #>  [748,] 0.7329395 0.7332088 0.7373579 #>  [749,] 1.0069196 1.0615129 1.1008078 #>  [750,] 0.7724454 0.7818305 0.8056107 #>  [751,] 1.0353217 1.0670387 1.0971729 #>  [752,] 0.5338385 0.5971100 0.6062427 #>  [753,] 0.8429576 0.8431249 0.8447506 #>  [754,] 0.5767828 0.5951965 0.6510893 #>  [755,] 0.6780396 0.7441448 0.7492207 #>  [756,] 0.8215070 0.8498453 0.8580209 #>  [757,] 0.5796431 0.6913840 0.7169216 #>  [758,] 0.6160945 0.6200564 0.6945389 #>  [759,] 0.6859119 0.7071022 0.7191327 #>  [760,] 0.6761095 0.7045545 0.7297174 #>  [761,] 0.4804533 0.5244595 0.5547224 #>  [762,] 0.4889434 0.5185900 0.5288106 #>  [763,] 0.4874825 0.4993264 0.5078154 #>  [764,] 0.5304794 0.5885039 0.6261126 #>  [765,] 0.6101998 0.6200840 0.6379137 #>  [766,] 0.9788399 0.9982041 1.0513843 #>  [767,] 0.7816226 0.7826938 0.8041186 #>  [768,] 0.5415294 0.6194157 0.7206876 #>  [769,] 0.9181988 0.9348895 0.9368299 #>  [770,] 0.8736101 0.9986207 1.0162878 #>  [771,] 0.8936482 0.9047407 0.9578563 #>  [772,] 0.8700247 0.8968694 0.9270532 #>  [773,] 0.8268695 0.8299591 0.8439896 #>  [774,] 0.7822477 0.8354840 0.8596740 #>  [775,] 0.9856851 1.0119322 1.0619146 #>  [776,] 0.9745145 1.1683455 1.1774818 #>  [777,] 1.0220018 1.0315773 1.0448089 #>  [778,] 0.6383382 0.6410044 0.6730649 #>  [779,] 1.2571565 1.2664766 1.3040046 #>  [780,] 0.6116404 0.6880632 0.7052927 #>  [781,] 0.5710777 0.5784103 0.6032208 #>  [782,] 1.0089438 1.0485255 1.1123315 #>  [783,] 1.3544911 1.4405700 1.4986926 #>  [784,] 0.8658651 0.9040816 0.9172526 #>  [785,] 0.5267645 0.5666711 0.5771851 #>  [786,] 0.6512642 0.6552806 0.6592641 #>  [787,] 0.6716935 0.6871991 0.7352622 #>  [788,] 0.8277904 0.8536113 0.8617290 #>  [789,] 0.7892420 0.7992461 0.8024194 #>  [790,] 1.0973492 1.1114646 1.1171132 #>  [791,] 0.7947472 0.8431508 0.8459739 #>  [792,] 0.6555783 0.6865142 0.6924523 #>  [793,] 1.1227207 1.1284466 1.1318875 #>  [794,] 0.9562041 1.0271614 1.0771332 #>  [795,] 1.3296200 1.3584501 1.3694027 #>  [796,] 0.6608218 0.7222117 0.7441223 #>  [797,] 0.9850837 1.0423925 1.0942953 #>  [798,] 0.7399288 0.7539436 0.7660086 #>  [799,] 0.7673105 0.7876729 0.8385925 #>  [800,] 0.5721455 0.5775582 0.6045350 #>  [801,] 0.7945735 0.8487291 0.8511070 #>  [802,] 1.0645861 1.0660551 1.1072173 #>  [803,] 0.9123483 0.9551505 0.9852696 #>  [804,] 0.5975819 0.6199342 0.6826677 #>  [805,] 0.7343172 0.7558668 0.7580611 #>  [806,] 0.9479888 0.9487577 0.9610279 #>  [807,] 0.8725975 0.8855653 0.8899707 #>  [808,] 0.7941319 0.7942158 0.7988196 #>  [809,] 0.6263679 0.6720119 0.6761172 #>  [810,] 0.9580602 0.9835731 1.0235714 #>  [811,] 0.6489522 0.6614990 0.6634902 #>  [812,] 0.7952729 0.8134143 0.8260250 #>  [813,] 0.6958096 0.7155295 0.7472003 #>  [814,] 0.6147323 0.6263520 0.6333752 #>  [815,] 0.9587876 0.9873885 0.9982490 #>  [816,] 1.3074373 1.3172444 1.3223272 #>  [817,] 0.8983097 0.9085109 1.0312796 #>  [818,] 1.1284679 1.2472735 1.2967503 #>  [819,] 0.7392114 0.7429170 0.7559926 #>  [820,] 0.8494677 0.8540121 0.8853130 #>  [821,] 1.4460382 1.4719506 1.4747903 #>  [822,] 2.2061330 2.2221648 2.3418766 #>  [823,] 0.5979853 0.6021585 0.6469986 #>  [824,] 0.6519167 0.6577015 0.6944682 #>  [825,] 1.0506560 1.0630721 1.0810558 #>  [826,] 0.9495484 0.9538924 0.9677518 #>  [827,] 1.0424781 1.1093353 1.1252791 #>  [828,] 1.2182831 1.2265412 1.3309406 #>  [829,] 0.7168308 0.7207784 0.7299513 #>  [830,] 0.7197234 0.7730868 0.7767794 #>  [831,] 0.5231996 0.6094482 0.6734714 #>  [832,] 0.4930362 0.5023013 0.5120440 #>  [833,] 0.5398277 0.5434671 0.5743356 #>  [834,] 0.7690240 0.8267764 0.8342965 #>  [835,] 0.6396990 0.6488583 0.6495471 #>  [836,] 2.0412004 2.0489574 2.0604276 #>  [837,] 0.4993264 0.5542038 0.5727362 #>  [838,] 0.6812764 0.7544779 0.7732412 #>  [839,] 0.8177713 0.8184688 0.8224574 #>  [840,] 1.1155845 1.1501298 1.1680614 #>  [841,] 1.1618658 1.2051016 1.2262082 #>  [842,] 0.6398185 0.6463148 0.6484616 #>  [843,] 1.4255721 1.4278171 1.4613782 #>  [844,] 0.9700299 0.9835731 1.0134585 #>  [845,] 0.5940502 0.6313565 0.6373879 #>  [846,] 0.7195599 0.7226294 0.7714064 #>  [847,] 1.2645865 1.3226874 1.3797432 #>  [848,] 0.6842002 0.7042815 0.7110231 #>  [849,] 1.1929079 1.2926183 1.3471625 #>  [850,] 0.8003568 0.8072567 0.8281784 #>  [851,] 0.4953586 0.5057390 0.5077764 #>  [852,] 0.7620378 0.7628121 0.7721961 #>  [853,] 1.1060492 1.1256762 1.1296952 #>  [854,] 0.4887096 0.4922367 0.5207712 #>  [855,] 0.4782786 0.4949691 0.4970679 #>  [856,] 0.7005687 0.7282750 0.8106460 #>  [857,] 1.5977314 1.6188143 1.6630545 #>  [858,] 0.9828736 0.9900775 1.0682903 #>  [859,] 0.8053099 0.8237604 0.8417582 #>  [860,] 0.6846599 0.7157962 0.7325915 #>  [861,] 0.7507253 0.7523886 0.8480161 #>  [862,] 1.4259412 1.4316100 1.4988094 #>  [863,] 0.5710533 0.6200086 0.6258394 #>  [864,] 0.8021759 0.8435674 0.8990940 #>  [865,] 0.7512016 0.8002493 0.8399893 #>  [866,] 1.0302783 1.0333466 1.0577834 #>  [867,] 1.3651758 1.3704494 1.3881233 #>  [868,] 0.8793095 0.8834352 0.9184729 #>  [869,] 1.0987394 1.1113921 1.1128387 #>  [870,] 1.0201003 1.0443182 1.1297845 #>  [871,] 1.0132163 1.0386226 1.0419811 #>  [872,] 1.7432166 1.7435537 1.7681758 #>  [873,] 1.5526279 1.5548582 1.5549138 #>  [874,] 1.5643485 1.5829517 1.6181216 #>  [875,] 0.6473457 0.6548739 0.6696310 #>  [876,] 0.9218107 0.9571702 0.9778741 #>  [877,] 1.0250592 1.0357575 1.0907086 #>  [878,] 0.5402503 0.5527914 0.5764495 #>  [879,] 0.6613997 0.6732882 0.7205516 #>  [880,] 0.8324077 0.8340069 0.8392469 #>  [881,] 1.0273828 1.0674348 1.0863913 #>  [882,] 0.4995391 0.5159087 0.5646436 #>  [883,] 0.8173312 0.9062564 0.9198423 #>  [884,] 1.4784841 1.4857140 1.5259151 #>  [885,] 1.0851987 1.1153058 1.1660808 #>  [886,] 0.7816899 0.8175538 0.8297681 #>  [887,] 0.5118921 0.5378672 0.5582951 #>  [888,] 0.5570764 0.5640250 0.6210677 #>  [889,] 0.8903521 0.9074408 0.9175021 #>  [890,] 0.8414070 0.9039226 0.9202386 #>  [891,] 0.7896818 0.8130475 0.9425873 #>  [892,] 0.9123483 0.9214054 0.9939786 #>  [893,] 0.9075844 0.9262830 0.9329822 #>  [894,] 0.6412403 0.6422700 0.6698920 #>  [895,] 0.8648895 0.8929471 0.9167670 #>  [896,] 0.6366337 0.6494701 0.6884717 #>  [897,] 0.8212221 0.9108738 0.9414435 #>  [898,] 0.8159931 0.8321998 0.8806140 #>  [899,] 0.7181309 0.7561911 0.7579430 #>  [900,] 1.0549060 1.0707642 1.0861453 #>  [901,] 0.7029169 0.7085249 0.7216293 #>  [902,] 0.7156204 0.7257239 0.7283912 #>  [903,] 0.8090088 0.8203966 0.8252762 #>  [904,] 1.0569332 1.0651852 1.1204284 #>  [905,] 0.7470500 0.7806151 0.7831131 #>  [906,] 1.3719911 1.3826902 1.4095393 #>  [907,] 0.9132148 0.9149534 0.9425187 #>  [908,] 0.8450774 0.8467263 0.8527465 #>  [909,] 0.7111578 0.7113021 0.7697982 #>  [910,] 0.5235760 0.5392230 0.5403678 #>  [911,] 0.7465814 0.7984010 0.8016943 #>  [912,] 0.5437195 0.5473943 0.5576727 #>  [913,] 0.6246833 0.6274053 0.6308459 #>  [914,] 1.1162218 1.1789574 1.1881403 #>  [915,] 0.8545776 0.8570664 0.8883256 #>  [916,] 0.5156517 0.5305301 0.5358769 #>  [917,] 0.8299450 0.8330380 0.8357438 #>  [918,] 0.6519167 0.6788963 0.7097266 #>  [919,] 0.5298393 0.5746167 0.5870534 #>  [920,] 0.8728764 0.9160647 0.9298368 #>  [921,] 0.5425313 0.5697194 0.5808069 #>  [922,] 0.4716877 0.4855148 0.5006228 #>  [923,] 0.5712959 0.5804547 0.5886335 #>  [924,] 1.2183549 1.2279329 1.2397664 #>  [925,] 0.8990940 0.9405851 0.9574704 #>  [926,] 1.6635947 1.7011964 1.7713238 #>  [927,] 0.6398206 0.6491597 0.6516787 #>  [928,] 0.5632268 0.5735172 0.5858934 #>  [929,] 1.1368215 1.1398049 1.1474404 #>  [930,] 0.6184910 0.6777772 0.7280784 #>  [931,] 0.8526533 0.8531084 0.8741736 #>  [932,] 1.0771320 1.0871124 1.0918508 #>  [933,] 1.7109979 1.7636920 1.8232195 #>  [934,] 0.5281515 0.5497320 0.5530976 #>  [935,] 1.5139220 1.5766773 1.5895523 #>  [936,] 0.5098431 0.5135875 0.5229722 #>  [937,] 0.5146455 0.5364124 0.5453236 #>  [938,] 0.5508935 0.5528096 0.5798534 #>  [939,] 1.1253986 1.1362429 1.1681171 #>  [940,] 0.8129960 0.8317723 0.8331352 #>  [941,] 0.5766062 0.5929677 0.5948733 #>  [942,] 0.7214949 0.7733016 0.8851496 #>  [943,] 1.3044251 1.3107671 1.3115586 #>  [944,] 1.2669693 1.2939490 1.3061284 #>  [945,] 0.7706214 0.7822610 0.7834074 #>  [946,] 0.9262706 0.9871741 1.0040620 #>  [947,] 0.7557005 0.7930312 0.8304734 #>  [948,] 0.8487513 0.8662389 0.8768362 #>  [949,] 1.0979966 1.1577397 1.1620638 #>  [950,] 0.6502998 0.6568106 0.6813457 #>  [951,] 0.6978357 0.7089215 0.7162495 #>  [952,] 0.7960185 0.7995320 0.8424930 #>  [953,] 0.9383473 0.9503993 0.9573875 #>  [954,] 2.1882264 2.2264969 2.2616588 #>  [955,] 1.9126116 1.9201377 1.9205755 #>  [956,] 1.0033540 1.0528064 1.0614316 #>  [957,] 0.6171024 0.6535798 0.6755962 #>  [958,] 0.6292867 0.6412419 0.6462473 #>  [959,] 0.8683366 0.8703066 0.8759302 #>  [960,] 0.4889434 0.4976651 0.5004434 #>  [961,] 0.6003501 0.6045340 0.6476661 #>  [962,] 1.3687023 1.3860852 1.3944408 #>  [963,] 1.2460117 1.3980969 1.4205255 #>  [964,] 0.5549224 0.5738885 0.5782096 #>  [965,] 0.8533852 0.8645437 0.8852885 #>  [966,] 0.7352325 0.7488933 0.7790243 #>  [967,] 0.5814963 0.6499862 0.6699705 #>  [968,] 0.6964763 0.6995882 0.7259679 #>  [969,] 0.5419522 0.5782916 0.5811727 #>  [970,] 0.9872906 0.9919420 1.0145209 #>  [971,] 0.6668396 0.6681151 0.6880290 #>  [972,] 1.2409560 1.2776363 1.2814344 #>  [973,] 0.5406422 0.5613860 0.5736396 #>  [974,] 0.7566706 0.8039280 0.8850713 #>  [975,] 0.4240761 0.4404356 0.4584159 #>  [976,] 0.5645624 0.5964228 0.6045173 #>  [977,] 0.9688907 0.9724684 0.9848242 #>  [978,] 0.7886268 0.7939739 0.8285187 #>  [979,] 1.1355190 1.1376948 1.1713880 #>  [980,] 1.0314666 1.0390056 1.0670709 #>  [981,] 0.7132219 0.7172776 0.7537019 #>  [982,] 0.7757415 0.8342965 0.8444456 #>  [983,] 0.6644566 0.6699240 0.6749321 #>  [984,] 1.0930494 1.1235170 1.1385666 #>  [985,] 0.7286659 0.7602048 0.7771555 #>  [986,] 0.6038459 0.6261495 0.6349548 #>  [987,] 0.6221292 0.6369450 0.6401289 #>  [988,] 0.5750312 0.6004248 0.6005805 #>  [989,] 0.5247433 0.5415845 0.5542891 #>  [990,] 1.1387443 1.1544974 1.1779164 #>  [991,] 0.7411182 0.7412206 0.7432386 #>  [992,] 0.8507260 0.8693285 0.8715381 #>  [993,] 0.6006438 0.6105227 0.6430802 #>  [994,] 0.9192759 0.9244153 0.9262830 #>  [995,] 0.9304726 0.9406467 0.9505642 #>  [996,] 0.9204467 0.9328152 0.9337576 #>  [997,] 1.7285329 1.7916249 1.8117096 #>  [998,] 0.7750084 0.7789093 0.8090736 #>  [999,] 0.8891883 0.9189417 0.9289021 #> [1000,] 0.4145980 0.5664812 0.6093518 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure CyTOF panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) CyTOF panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   rsplit_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `rsplit_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 0.003162278"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample   cd45 pstat5   cd34 outcome class  multiclass event time_to_event #>    <chr>   <dbl>  <dbl>  <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 41     0.784  0.0701 0.715    1.46  class2 class2         1         10.8  #>  2 69     0.675  0.0502 0.149    3.40  class2 class3         1         12.3  #>  3 81     0.365  0.292  0.620    2.59  class2 class3         1         11.6  #>  4 15     0.0307 0.770  0.0289   2.72  class2 class1         0          8.18 #>  5 93     0.337  0.263  0.314    1.88  class2 class3         1          9.70 #>  6 76     0.417  0.0658 0.538    0.744 class2 class3         1         10.8  #>  7 60     0.339  0.768  0.0491   1.30  class2 class2         1         10.6  #>  8 79     0.919  0.630  0.933    6.35  class1 class3         1          9.46 #>  9 6      0.741  0.417  0.288    4.68  class1 class1         0          6.87 #> 10 31     0.732  0.723  0.576    4.95  class1 class2         1          8.54 #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>               cd45      pstat5         cd34 #>   [1,]  1.21742460  1.26260752 -1.774032055 #>   [2,] -0.32794783 -1.29783175 -1.650101643 #>   [3,]  1.38460536 -0.91048364 -0.223071438 #>   [4,] -1.16513330 -0.78572551 -0.815113786 #>   [5,]  0.10361181 -1.30053024 -0.123215175 #>   [6,]  0.10547559 -0.35624471 -1.522520649 #>   [7,]  0.84679134 -1.00898761 -0.007282507 #>   [8,]  1.44769709 -0.01669740  1.313111344 #>   [9,] -0.81798995 -0.38070987  0.528706260 #>  [10,] -1.36890750  1.43627992  1.083484482 #>  [11,] -0.01285001  0.04612004 -0.706632943 #>  [12,]  0.28506795 -1.05174664  0.937270771 #>  [13,]  0.96787798 -0.82460328 -1.299910579 #>  [14,]  1.34670661 -0.42612807  1.267137403 #>  [15,] -0.99246566 -0.34825507 -0.802071169 #>  [16,] -0.26992901 -1.22163607 -0.862348802 #>  [17,]  0.74327164 -0.39301986  1.290867560 #>  [18,] -1.36797158  1.65039409 -0.177117927 #>  [19,]  0.26463236  0.52896714 -0.977533534 #>  [20,]  1.01748883  1.14823717 -0.410113143 #>  [21,] -1.75282074 -0.27034645 -0.958603320 #>  [22,] -1.83012780 -0.55863417 -0.543153698 #>  [23,] -0.33826326  1.17440813  0.265640764 #>  [24,] -0.83319400 -1.15569405 -1.204964241 #>  [25,]  1.25445466  1.27323248  0.846273216 #>  [26,] -1.79019075  0.24054436  1.323627588 #>  [27,] -1.04102976 -0.07615530 -0.484902969 #>  [28,]  1.30479245  0.41869547 -0.295436810 #>  [29,] -0.33295403 -1.14254705 -1.921462088 #>  [30,]  1.12416978 -0.95321664  0.063987468 #>  [31,] -0.20748731 -1.45157797  1.320973109 #>  [32,]  0.46113991  0.07272017  1.392715182 #>  [33,]  0.31060394 -0.67517331  1.461017819 #>  [34,]  1.04551015  1.46879868 -1.832998198 #>  [35,] -0.34641904  0.36013207  0.447704836 #>  [36,]  0.70596256  0.93213542  0.733418209 #>  [37,] -0.93860567  0.14029117 -0.908400604 #>  [38,] -1.27332584 -1.33531097 -0.834377999 #>  [39,] -0.93350927 -0.15169130 -0.882164156 #>  [40,]  0.83855613  1.48339950  1.337464482 #>  [41,]  1.42846735 -1.16291189 -1.092726194 #>  [42,]  0.94278681 -1.26594005  0.823977268 #>  [43,] -1.01245701  1.33845385  0.182584325 #>  [44,] -0.96579492  1.49915191  0.664443774 #>  [45,] -1.73151297  0.40643701  0.687222072 #>  [46,]  0.51139627  0.88012755 -0.547733859 #>  [47,]  0.40770655 -0.57381276 -0.432342816 #>  [48,]  0.56999198  0.46605780 -0.245307673 #>  [49,]  0.40935718  0.23604098 -1.420688970 #>  [50,] -0.29264700 -0.49212739 -1.625606624 #>  [51,] -0.61006161  1.08233976 -0.010377142 #>  [52,] -1.37196303 -0.93446210 -0.981000103 #>  [53,] -0.18847804 -0.98869807  0.255571480 #>  [54,]  0.63976190  0.67601007  1.591794777 #>  [55,]  1.54136074 -1.27654348 -0.170353361 #>  [56,] -1.16499896 -0.62688571 -1.409990507 #>  [57,]  1.31123777 -0.69637068 -1.648536967 #>  [58,]  1.00557045  1.35849355 -1.218160953 #>  [59,] -0.91837520 -1.35967360  1.056653449 #>  [60,] -0.08982399  1.52581511  1.135372960 #>  [61,] -1.18002575  0.80754738  0.919390533 #>  [62,] -1.09426516  1.61590979  0.746834447 #>  [63,]  1.34226737  1.65706166  0.839255008 #>  [64,] -0.74027805 -0.22510351  0.527750468 #>  [65,] -1.63918826  0.14689689  1.331345614 #>  [66,] -0.49345401  1.48866194  0.605800347 #>  [67,]  1.08984737  1.61914156  0.022692853 #>  [68,]  0.27417472 -1.43129267 -1.554846250 #>  [69,] -0.17202918 -0.11897043  0.356388565 #>  [70,] -1.30697854  1.02494484  0.833676734 #>  [71,] -1.40208382 -0.89540557 -1.506573379 #>  [72,] -1.25702851 -0.98483055  1.090427620 #>  [73,]  0.45354449  1.69780332  1.063783958 #>  [74,] -1.28903120  1.41620171  0.104545848 #>  [75,]  1.30962213  1.42404503  0.331024203 #>  [76,] -0.12145037 -0.91242419 -0.567744613 #>  [77,]  1.12087198  0.86565833  0.696437859 #>  [78,] -0.50402091  0.08173612  1.060298469 #>  [79,]  1.60704973 -1.09210698  1.442302942 #>  [80,]  0.70639928 -0.72317927  1.614137174 #>  [81,]  0.68100755  0.38455799  0.275830739 #>  [82,]  1.46648699 -0.34955231 -0.225936058 #>  [83,] -0.32935607 -0.83521610 -0.373434723 #>  [84,] -0.11515761 -1.33512629 -0.543954082 #>  [85,] -1.83212489  0.25060493  0.827069660 #>  [86,]  1.19600668 -1.02381392  1.205983943 #>  [87,]  0.81870903  0.37042703 -1.146357405 #>  [88,]  0.26782885  0.97194472 -0.263767975 #>  [89,] -1.68362428 -0.16940088  1.579228872 #>  [90,] -0.57227703  1.37478107  0.969101862 #>  [91,] -0.25896332  0.23689250  0.758958467 #>  [92,] -0.43844465 -0.70520951 -0.582317840 #>  [93,]  0.77001338  1.46093305  1.274101959 #>  [94,]  1.06679009 -0.66368608  0.179115787 #>  [95,]  0.11949209 -1.44506545 -0.469838683 #>  [96,]  0.59663775 -1.26407284 -0.712141404 #>  [97,]  1.36080218  1.54908745 -1.017364290 #>  [98,]  1.18664263 -0.40376100 -1.099844261 #>  [99,]  0.33646584 -0.93485538 -1.353141268 #> [100,] -0.59712121 -0.56728263  0.771112300"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  2.57728339  4.53552598  6.32406679  2.14652036  5.22788902  4.06482719 #>   [7]  4.37577125  1.36359743  0.01572825  2.44760628  5.08170163  6.30660160 #>  [13]  4.25185920  7.08140666  2.18322003  3.31782228  3.93122729  2.29751813 #>  [19]  1.26611248 -0.25685886  3.48642954  3.22524235  3.14559360  4.39534963 #>  [25]  5.32333651  3.76617313  1.59143877  2.99807550  4.96435080  3.07022497 #>  [31]  5.00880830 -0.51344957  1.81682566  3.40747050  2.02577489  4.31660002 #>  [37]  4.58161866  5.36843104  5.53292868  1.70810528  2.74588095  3.95276470 #>  [43]  6.28376804  2.11458166  1.80645729  2.30654139  4.26094288  4.42764408 #>  [49]  4.05579302  4.00983937  5.70112847  6.73112314  6.20389715  0.58851158 #>  [55]  4.53493204  5.31702178  4.16885590  3.34004471  3.49555741  4.73110067 #>  [61]  1.62029757  3.42326667  6.79145701  6.56417790  3.13968971  1.07121899 #>  [67]  2.85276778  3.56997458  1.53697549  2.74849626  3.45888167  2.38647940 #>  [73]  0.91103658  3.01559206  6.30569354  2.43238554  5.40939653  5.16181656 #>  [79]  3.89986518  2.59888692  6.23569086  3.87301446  5.25908357  2.90114951 #>  [85]  2.72026689  3.07332903  6.93781699  3.04220137  5.77039043  4.39058819 #>  [91]  1.43061677  4.99373813  6.93124408  2.86026237  1.80173536  3.53969411 #>  [97]  3.39776727  2.66194803  2.89246432  3.58394586"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # … with 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode CyTOF measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing CyTOF data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"      ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction  )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>      cd45    cd38   cd34   cd19 cluster_id .flowsom_metacluster #>     <dbl>   <dbl>  <dbl>  <dbl> <chr>      <chr>                #>  1 -1.73  -0.182   0.217 -0.913 r          2                    #>  2 -0.542  0.424   0.184  0.276 w          3                    #>  3 -0.749  0.0909  1.25   0.729 n          1                    #>  4 -0.872  1.69    1.15  -0.463 g          4                    #>  5  0.626  0.203   0.543  0.417 m          3                    #>  6 -0.395  1.49   -0.273  0.201 f          4                    #>  7 -0.254 -0.673  -1.26   0.220 r          2                    #>  8 -1.53   0.0862 -0.178  0.149 a          1                    #>  9  1.27   0.938   0.589  1.23  y          2                    #> 10  1.09  -0.801   0.766  0.417 v          2                    #> # … with 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>      cd45    cd38   cd34   cd19 cluster_id .phenograph_metacluster #>     <dbl>   <dbl>  <dbl>  <dbl> <chr>      <chr>                   #>  1 -1.73  -0.182   0.217 -0.913 r          1                       #>  2 -0.542  0.424   0.184  0.276 w          2                       #>  3 -0.749  0.0909  1.25   0.729 n          1                       #>  4 -0.872  1.69    1.15  -0.463 g          3                       #>  5  0.626  0.203   0.543  0.417 m          2                       #>  6 -0.395  1.49   -0.273  0.201 f          3                       #>  7 -0.254 -0.673  -1.26   0.220 r          1                       #>  8 -1.53   0.0862 -0.178  0.149 a          2                       #>  9  1.27   0.938   0.589  1.23  y          1                       #> 10  1.09  -0.801   0.766  0.417 v          1                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 10                     #>  2 4                      #>  3 2                      #>  4 2                      #>  5 4                      #>  6 6                      #>  7 4                      #>  8 7                      #>  9 7                      #> 10 6                      #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 1                    #>  2 3                    #>  3 3                    #>  4 4                    #>  5 3                    #>  6 4                    #>  7 7                    #>  8 4                    #>  9 4                    #> 10 2                    #> # … with 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 1                    #>  2 4                    #>  3 4                    #>  4 2                    #>  5 4                    #>  6 2                    #>  7 2                    #>  8 2                    #>  9 2                    #> 10 3                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 6                         #>  2 6                         #>  3 2                         #>  4 2                         #>  5 3                         #>  6 5                         #>  7 5                         #>  8 2                         #>  9 2                         #> 10 5                         #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 2                   #>  2 8                   #>  3 3                   #>  4 4                   #>  5 2                   #>  6 1                   #>  7 4                   #>  8 2                   #>  9 8                   #> 10 10                  #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 1                       #>  2 3                       #>  3 2                       #>  4 1                       #>  5 2                       #>  6 3                       #>  7 2                       #>  8 4                       #>  9 1                       #> 10 2                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   point_alpha = 1,   theme = ggplot2::theme_bw(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `...`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (pass tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". point_alpha numeric value 0 1 set transparency (alpha) point scatterplot. theme ggplot2 theme apply scatterplot. Defaults theme_bw ... Optional additional arguments pass tof_reduce_dimensions.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         pca_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"tsne\",         tsne_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments pass ggraph","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"tof_plot_cluster_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_cluster_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"tof_plot_cluster_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... currently used.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )   # use the same layout as the plot above to color the same  # tree using a different marker  layout_cd45 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"tof_plot_cluster_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )   attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"   # create the volcano plot  volcano <- tof_plot_cluster_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(        tof_tibble = sim_data,        cluster_col = cluster_id,        group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1 5.89  #>  2 5.77  #>  3 0.575 #>  4 3.72  #>  5 5.49  #>  6 2.87  #>  7 3.76  #>  8 2.09  #>  9 2.78  #> 10 4.98  #> 11 6.25  #> 12 1.98  #> 13 5.74  #> 14 0.643 #> 15 3.03  #> 16 4.12  #> 17 4.91  #> 18 2.91  #> 19 5.78  #> 20 5.76"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw CyTOF data. — tof_preprocess","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts directly measured mass cytometer using user-provided function. can used perform standard pre-processing steps CyTOF data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector non-quoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read CyTOF data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing CyTOF data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents CyTOF measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads CyTOF data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read CyTOF data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction single-cell data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>      cd45   cd38    cd34   cd19   .pc1   .pc2   .pc3   .pc4 #>     <dbl>  <dbl>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #>  1  0.934 -0.878  1.18   -0.942 -0.712  1.60  -0.420 -0.493 #>  2 -0.731  1.84  -0.588   0.921  0.497 -2.01  -0.765  0.547 #>  3  0.511  0.536 -0.129   1.34   0.346 -1.15  -0.416 -0.995 #>  4  0.453 -2.25   0.441   0.561  0.756  1.30   0.866 -1.42  #>  5  1.85  -0.780  0.0438 -0.467 -1.28   0.651  0.334 -1.17  #>  6  0.112  0.489 -0.640  -0.627 -0.675 -0.446  0.172  0.565 #>  7 -1.13  -0.780 -0.739   0.455  1.14  -0.238  0.956  0.325 #>  8  0.565  0.305 -1.08    1.32   0.177 -1.54   0.452 -0.931 #>  9 -0.356  1.05   0.926   1.95   1.37  -1.16  -1.55  -0.834 #> 10  0.987 -1.75   1.55   -1.99  -1.09   2.87  -0.106 -0.199 #> # … with 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>      cd45   cd38    cd34   cd19 .tsne_1 .tsne_2 #>     <dbl>  <dbl>   <dbl>  <dbl>   <dbl>   <dbl> #>  1  0.934 -0.878  1.18   -0.942  -1.47    3.91  #>  2 -0.731  1.84  -0.588   0.921   1.37   -3.06  #>  3  0.511  0.536 -0.129   1.34    2.19   -0.860 #>  4  0.453 -2.25   0.441   0.561   3.15    2.63  #>  5  1.85  -0.780  0.0438 -0.467  -0.650   2.74  #>  6  0.112  0.489 -0.640  -0.627  -1.59    0.116 #>  7 -1.13  -0.780 -0.739   0.455  -0.509  -1.76  #>  8  0.565  0.305 -1.08    1.32    2.03   -0.862 #>  9 -0.356  1.05   0.926   1.95    3.77   -0.605 #> 10  0.987 -1.75   1.55   -1.99   -2.38    4.11  #> # … with 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>      cd45   cd38    cd34   cd19  .umap1 .umap2 #>     <dbl>  <dbl>   <dbl>  <dbl>   <dbl>  <dbl> #>  1  0.934 -0.878  1.18   -0.942  2.27    2.16  #>  2 -0.731  1.84  -0.588   0.921  0.0266 -1.18  #>  3  0.511  0.536 -0.129   1.34   1.08   -0.886 #>  4  0.453 -2.25   0.441   0.561 -4.32   -1.22  #>  5  1.85  -0.780  0.0438 -0.467  2.01    1.12  #>  6  0.112  0.489 -0.640  -0.627  0.210   0.651 #>  7 -1.13  -0.780 -0.739   0.455  0.337  -3.40  #>  8  0.565  0.305 -1.08    1.32   0.911  -0.452 #>  9 -0.356  1.05   0.926   1.95  -3.20    4.28  #> 10  0.987 -1.75   1.55   -1.99   2.39    2.27  #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on single-cell data — tof_reduce_pca","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>      .pc1   .pc2 #>     <dbl>  <dbl> #>  1  0.296 -0.293 #>  2 -1.80   0.239 #>  3 -0.584  2.01  #>  4 -1.31  -0.175 #>  5  1.31   1.07  #>  6  0.820  0.879 #>  7  2.42  -0.564 #>  8  1.63  -0.353 #>  9  0.478  0.865 #> 10  1.90  -0.851 #> # … with 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>       PC1    PC2    PC3    PC4 #>     <dbl>  <dbl>  <dbl>  <dbl> #>  1 -0.989  1.43   0.118  1.05  #>  2  0.142  0.896 -0.551 -0.919 #>  3 -0.237  0.976  1.49   1.61  #>  4 -1.86  -1.46  -0.111 -0.177 #>  5 -1.14   2.20  -1.03   0.238 #>  6  0.394 -1.39  -0.263  1.43  #>  7 -0.980  0.553  1.57  -1.21  #>  8  0.563 -0.765 -0.572  1.01  #>  9  1.70  -0.680 -1.65  -0.346 #> 10 -0.768 -1.21   0.576 -1.38  #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -0.763  -2.29  #>  2  -4.73    0.933 #>  3  -0.594   2.86  #>  4  -0.459   4.13  #>  5   3.01   -0.141 #>  6  -1.13    6.18  #>  7  -3.36   -3.65  #>  8  -6.40    0.518 #>  9  -2.58   -3.98  #> 10  -0.531   4.97  #> # … with 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   1.53   -5.59  #>  2   6.96    4.36  #>  3   3.24   -2.16  #>  4   6.75   -3.18  #>  5  -8.92    0.858 #>  6  -8.69    1.33  #>  7  -1.39    4.56  #>  8   2.81    7.38  #>  9   0.943   4.00  #> 10   6.43   -4.60  #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>     .umap1 .umap2 #>      <dbl>  <dbl> #>  1  4.59   -2.28  #>  2  3.87   -2.71  #>  3  4.58   -2.20  #>  4 -2.19    2.55  #>  5 -3.69    1.93  #>  6  0.227  -3.08  #>  7  0.0896 -0.432 #>  8 -2.85   -4.12  #>  9  2.62    1.04  #> 10  0.506  -0.374 #> # … with 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1    1.72   9.21  #>  2   -4.79  -6.72  #>  3    2.04   9.19  #>  4   -4.40   8.28  #>  5   -1.77   8.23  #>  6    3.07  -6.82  #>  7    4.15  -2.25  #>  8    1.40  -7.69  #>  9   -6.71  -0.666 #> 10    5.35  -2.10  #> # … with 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>     UMAP1  UMAP2 #>     <dbl>  <dbl> #>  1 -1.00  -0.798 #>  2  5.84   0.521 #>  3  3.39  -2.25  #>  4  5.50   1.18  #>  5  0.352  2.84  #>  6 -0.885  2.41  #>  7  1.23  -2.32  #>  8  0.544 -1.59  #>  9  0.325  2.28  #> 10  2.25   1.55  #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing CyTOF data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              1 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # … with 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.6 #>  2            0.6 #>  3            0.5 #>  4            0.8 #>  5            0.5 #>  6            0.2 #>  7            0.3 #>  8            0.6 #>  9            0.4 #> 10            0.4 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            1   #>  2            1   #>  3            0.9 #>  4            0   #>  5            1   #>  6            0   #>  7            1   #>  8            0.2 #>  9            1   #> 10            1   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split CyTOF data into a training and test set — tof_split_data","title":"Split CyTOF data into a training and test set — tof_split_data","text":"Split CyTOF data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split CyTOF data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split CyTOF data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/41]> Bootstrap01 #>  2 <split [100/37]> Bootstrap02 #>  3 <split [100/38]> Bootstrap03 #>  4 <split [100/36]> Bootstrap04 #>  5 <split [100/37]> Bootstrap05 #>  6 <split [100/37]> Bootstrap06 #>  7 <split [100/40]> Bootstrap07 #>  8 <split [100/33]> Bootstrap08 #>  9 <split [100/38]> Bootstrap09 #> 10 <split [100/34]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Analysis/Assess/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)      3.31   #> 2 pstat5           1.27   #> 3 cd45             0.962  #> 4 cd34             0.0803  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 pstat5          -2.64   #> 2 cd45            -1.87   #> 3 (Intercept)      0.0432 #> 4 cd34             0.0198  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 0 × 2 #> # … with 2 variables: feature <chr>, coefficient <dbl>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>      cd45   cd38   cd34    cd19 .upsample_cluster #>     <dbl>  <dbl>  <dbl>   <dbl> <chr>             #>  1 -1.37   1.03   1.05  -0.317  a                 #>  2  0.481 -0.920  0.940  0.133  b                 #>  3  0.667 -1.11  -1.69  -0.629  a                 #>  4  0.401 -1.34   0.784  0.740  b                 #>  5 -1.82  -0.835  0.644  1.52   b                 #>  6 -2.04  -0.257 -2.25  -2.52   b                 #>  7  0.637  0.680  0.159 -0.341  b                 #>  8 -0.871  0.798 -0.653  0.946  b                 #>  9  1.12  -0.965 -1.26   0.689  a                 #> 10  0.724 -0.225 -0.681  0.0138 a                 #> # … with 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>      cd45   cd38   cd34    cd19 .upsample_cluster #>     <dbl>  <dbl>  <dbl>   <dbl> <chr>             #>  1 -1.37   1.03   1.05  -0.317  b                 #>  2  0.481 -0.920  0.940  0.133  a                 #>  3  0.667 -1.11  -1.69  -0.629  a                 #>  4  0.401 -1.34   0.784  0.740  b                 #>  5 -1.82  -0.835  0.644  1.52   b                 #>  6 -2.04  -0.257 -2.25  -2.52   a                 #>  7  0.637  0.680  0.159 -0.341  a                 #>  8 -0.871  0.798 -0.653  0.946  a                 #>  9  1.12  -0.965 -1.26   0.689  b                 #> 10  0.724 -0.225 -0.681  0.0138 b                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 a                 #>  4 b                 #>  5 a                 #>  6 b                 #>  7 a                 #>  8 b                 #>  9 b                 #> 10 a                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 b                 #>  4 b                 #>  5 a                 #>  6 b                 #>  7 b                 #>  8 b                 #>  9 a                 #> 10 a                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 a                 #>  3 a                 #>  4 a                 #>  5 b                 #>  6 a                 #>  7 a                 #>  8 a                 #>  9 a                 #> 10 b                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 a                 #>  3 a                 #>  4 a                 #>  5 a                 #>  6 a                 #>  7 b                 #>  8 b                 #>  9 b                 #> 10 a                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write cytof data to a file or to a directory of files — tof_write_data","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""}]
