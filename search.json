[{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidytof","title":"Contributing to tidytof","text":"outlines propose change tidytof. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidytof","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidytof","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidytof","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"keyes-timothy/tidytof\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidytof","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidytof","text":"Please note tidytof project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = starts_with(\"cd\"),      num_neighbors = 50L,      distance_function = \"cosine\",      method = \"phenograph\"   ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster,     metacluster_cols = starts_with(\"cd\"),     num_metaclusters = 3L,     method = \"kmeans\"   )  phenograph_clusters %>%   dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) %>%   head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 5                   2                   #> 2 H1_PhenoGraph_cluster1 5                   2                   #> 3 H1_PhenoGraph_cluster1 5                   2                   #> 4 H1_PhenoGraph_cluster1 5                   2                   #> 5 H1_PhenoGraph_cluster1 5                   2                   #> 6 H1_PhenoGraph_cluster1 5                   2 phenograph_clusters %>%    dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster1           2                    1000 #> 2 cluster3           2                    1000 #> 3 cluster2           3                     517 #> 4 cluster2           1                     483 # use the kmeans algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\"   )  # use the flowsom algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"flowsom\"   ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\",      augment = FALSE   ) %>%    head()  #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 4               #> 2 18              #> 3 4               #> 4 14              #> 5 4               #> 6 15"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"example, wanted write tidytof-style interface new clustering algorithm “supercluster”, might write something like :","code":"tof_cluster_supercluster <-    function(tof_tibble, cluster_cols, ...) {      cluster_data <- dplyr::select(tof_tibble, {{cluster_cols}})          result <-        cluster_data %>%        do_something(...) %>%        do_something_else(...)   }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"’s possible algorithm doesn’t…","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_analyze_abundance","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_analyze_abundance()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_analyze_abundance() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_analyze_abundance depends slightly underlying statistical method used, details can found documentation tof_analyze_abundance_* function family member: tof_analyze_abundance_diffcyt tof_analyze_abundance_glmm tof_analyze_abundance_ttest","code":"daa_result <-    citrus_data %>%    tof_analyze_abundance(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )   significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_analyze_expression","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_analyze_expression()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_analyze_expression verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_analyze_expression() also depends underlying test used, can see result looks relatively similar output tof_analyze_abundance(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_analyze_expression_* function family member: tof_analyze_expression_diffcyt tof_analyze_expression_lmm tof_analyze_expression_ttest","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_analyze_expression(     method = \"ttest\",      cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-    dea_result %>%    mutate(     log2_fc = log(mean_fc, base = 2),      log_p = -log(p_adj),      significance =        case_when(         p_adj < 0.05 & mean_fc > 1 ~ \"increased\",          p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",         TRUE ~ NA_character_       ),      marker =        str_extract(marker, \".+_\") %>%        str_remove(\"_\"),      pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")   )  volcano_data %>%    ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +    geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +    geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +   geom_point(shape = 21, size = 2) +    ggrepel::geom_text_repel(     aes(label = pair),      data = slice_head(volcano_data, n = 10L),      size = 2   ) +    scale_fill_manual(     values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),      na.value = \"#cdcdcd\"   ) +    labs(     x = \"log2(Fold-change)\",      y = \"-log10(p-value)\",      fill = NULL,      caption = \"Labels indicate the 10 most significant marker-cluster pairs\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-    phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1  -16.7    -1.77 #> 2   -9.61  -10.7  #> 3   -7.53  -30.7  #> 4  -16.9   -14.6  #> 5  -19.6    -5.48 #> 6  -12.9   -21.0 phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1 -17.4     -6.00 #>  2  -7.58   -11.1  #>  3   1.97   -31.4  #>  4 -11.9    -19.3  #>  5 -18.9    -11.9  #>  6  -5.58   -20.7  #>  7  -7.00   -12.5  #>  8   0.284  -21.5  #>  9  -7.79   -19.1  #> 10  -9.74    -4.80 #> # ℹ 2,990 more rows phenograph_data %>%    tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1  -8.22  4.59  #>  2  -7.67  3.70  #>  3  -3.59  0.293 #>  4  -3.57 -1.61  #>  5  -8.39  4.80  #>  6  -1.19 -2.69  #>  7  -8.52  5.02  #>  8  -2.72 -0.757 #>  9  -6.48 -0.693 #> 10  -6.79  5.29  #> # ℹ 2,990 more rows  phenograph_data %>%    tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23    -0.868  0.978   3.49  #>  2 -0.969  -1.02    -0.787  1.22    0.329 #>  3 -2.36    2.54    -1.95  -0.882  -1.30  #>  4 -3.68   -0.00565  0.962  0.410   0.788 #>  5 -4.03    2.07    -0.829  1.59    5.39  #>  6 -2.59   -0.108    1.32  -1.41   -1.24  #>  7 -1.55   -0.651   -0.233  1.08    0.129 #>  8 -1.18   -0.446    0.134 -0.771  -0.932 #>  9 -2.00   -0.485    0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924   -0.692  1.45    0.270 #> # ℹ 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # ℹ 2,990 more rows # 3 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23    -0.868 #>  2 -0.969  -1.02    -0.787 #>  3 -2.36    2.54    -1.95  #>  4 -3.68   -0.00565  0.962 #>  5 -4.03    2.07    -0.829 #>  6 -2.59   -0.108    1.32  #>  7 -1.55   -0.651   -0.233 #>  8 -1.18   -0.446    0.134 #>  9 -2.00   -0.485    0.593 #> 10 -0.0356 -0.924   -0.692 #> # ℹ 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = phenograph_cluster   ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = cd11b   ) +    ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data %>%    dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     group_cols = phenograph_cluster,      method = \"constant\",     num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     group_cols = phenograph_cluster,      method = \"prop\",     prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-    function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {      x/from[2] * to[2]   }  phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +   scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)   ) +    labs(     fill = \"relative density\"   ) phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)     ) +    labs(     fill = \"relative density\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # ℹ 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          4.80                  0.0967 #> 2 patient1 Basal                           4.68                  0.765  #> 3 patient2 BCR-XL                          5.00                 -0.0579 #> 4 patient2 Basal                           4.88                  0.808  #> 5 patient3 BCR-XL                          5.04                 -0.0432 #> 6 patient3 Basal                           4.98                  0.745  #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, … citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = function(x) quantile(x = x, probs = 0.75)   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          5.30                 -0.0186 #> 2 patient1 Basal                           5.18                  1.32   #> 3 patient2 BCR-XL                          5.41                 -0.0201 #> 4 patient2 Basal                           5.28                  1.39   #> 5 patient3 BCR-XL                          5.42                 -0.0362 #> 6 patient3 Basal                           5.41                  1.27   #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_threshold` CD4_Nd145@cluster1_thre…¹ #>   <chr>    <chr>                                 <dbl>                     <dbl> #> 1 patient1 BCR-XL                                0.516                         0 #> 2 patient1 Basal                                 0.365                         0 #> 3 patient2 BCR-XL                                0.554                         0 #> 4 patient2 Basal                                 0.452                         0 #> 5 patient3 BCR-XL                                0.547                         0 #> 6 patient3 Basal                                 0.549                         0 #> # ℹ abbreviated name: ¹​`CD4_Nd145@cluster1_threshold` #> # ℹ 22 more variables: `CD20_Sm147@cluster1_threshold` <dbl>, #> #   `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                   0.864                   2.47                  13.0  #> 2 patient2                   1.11                    7.05                  10.8  #> 3 patient3                   0.670                   6.23                  10.5  #> 4 patient4                   2.64                    5.86                   9.90 #> 5 patient5                   0.594                   7.56                   8.13 #> 6 patient6                   0.661                   4.77                   7.97 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_emd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_emd`, ³​`BCR-XL_CD20_Sm147@cluster3_emd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                 0.0367                  0.0513                  0.347 #> 2 patient2                 0.00831                 0.168                   0.401 #> 3 patient3                 0.0104                  0.115                   0.357 #> 4 patient4                 0.0301                  0.135                   0.205 #> 5 patient5                 0.00911                 0.0789                  0.274 #> 6 patient6                 0.00972                 0.0346                  0.214 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_jsd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_jsd`, ³​`BCR-XL_CD20_Sm147@cluster3_jsd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # ℹ 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    dplyr::left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns  ddpr_patients %>%    dplyr::select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # ℹ 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor   # and create the time_to_event and event columns for survival modeling   dplyr::mutate(     relapse_status = as.factor(relapse_status),      time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients %>%    dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-    ddpr_patients %>%    dplyr::filter(is.na(relapse_status))  ddpr_patients <-    ddpr_patients %>%    dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-    ddpr_patients %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 10,      strata = relapse_status   )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # ℹ 18 more rows training_classifier_metrics <-    class_mod %>%    tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod %>%    tof_plot_model() cv_classifier_metrics <-    class_mod %>%    tof_assess_model(new_data = \"tuning\")  class_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      time_col = time_to_event,      event_col = event,      model_type = \"survival\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # ℹ 30 more rows survival_metrics <-    survival_mod %>%    tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # ℹ 51 more rows survival_mod %>%    tof_plot_model() cv_survival_metrics <-   survival_mod %>%   tof_assess_model(new_data = \"tuning\") survival_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # ℹ 2 more rows phenograph_data %>%    # perform preprocessing   tof_preprocess() %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # ℹ 2 more rows phenograph_data %>%    # preprocess   tof_preprocess(transform_fun = scale) %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 3,000 × 25 #>   sample_name  phenograph_cluster    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>        <chr>                <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGra… cluster1           -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGra… cluster1            1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGra… cluster1            2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGra… cluster1            0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # ℹ 2,996 more rows #> # ℹ 16 more variables: cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, #> #   cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, #> #   pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, #> #   prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # ℹ 2 more rows  # after preprocessing and post-processing, the data are the same  # except that the re-added noise component is different for each value  phenograph_data %>%    tof_preprocess() %>%    tof_postprocess(redo_noise = TRUE) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34   cd38 #>   <dbl>   <dbl>  <dbl> #> 1  131.  2.53    0.873 #> 2  229. -1.06   10.5   #> 3  293.  4.79    1.57  #> 4  431.  0.0564 13.3   #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Quality control","text":"demonstrate use {tidytof}’s quality control verbs, use combination simulated real data vignette. Simulated data generated --fly sections , walk download real dataset section. want download dataset originally collected development PhenoGraph algorithm. data built HDCytoData package, available Bioconductor can downloaded following command: load PhenoGraph data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s. also add lines dplyr code clean column names perform standard arcsinh transformation. Thus, can see levine tof_tbl 265627 cells (one row) 40 pieces information cell (one column).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") levine <-   HDCytoData::Levine_32dim_flowSet() |>   as_tof_tbl() |>   # a bit of data cleaning   dplyr::mutate(population_id = as.character(population_id)) |>   dplyr::rename_with(     .fn = \\(x) stringr::str_to_lower(stringr::str_remove(x, \"\\\\|.+\"))   ) |>   dplyr::mutate(dplyr::across(c(file_number, population_id), as.character)) |>   # arcsinh transformation   tof_preprocess(     channel_cols =        c(-time, -cell_length, -event_number, -file_number, -population_id)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"detect-low-expression-i-e--potentially-failed-channels-with-tof_assess_channels","dir":"Articles","previous_headings":"","what":"Detect low-expression (i.e. potentially failed) channels with tof_assess_channels()","title":"Quality control","text":"data collection, might wonder channels include downstream analyses. particular, might want exclude channels positive values, situation indicates antibody may failed, signal particular channel may weak detected. , can use tof_assess_channels(), verb calculates many cells negative (.e. use-specified threshold, negative_threshold) channel flags channels user-specified proportion negative cells (negative_proportion_flag). levine dataset, look markers 97.5% cells threshold 5 ion counts: can see two channels 97.5% cells dataset 5 counts. given experiment, might expected (.e. marker expressed rare cell population) unexpected (marker expressed many cells). case, can visualize marker negative cells manually inspect (recommend flagged channels).  case, looks like small population cells slightly positive cd14, simply measurement noise/nonspecific binding antibody. user whether include cd14 downstream analyses.","code":"# convert 5 counts to asinh value with a cofactor of 5 threshold <- asinh(5/5)  levine |>    tof_assess_channels(     negative_threshold = threshold,      negative_proportion_flag = 0.975   ) #> # A tibble: 38 × 3 #>    channel negative_proportion flagged_channel #>    <chr>                 <dbl> <lgl>           #>  1 cd14                  0.988 TRUE            #>  2 cd133                 0.975 TRUE            #>  3 cd117                 0.969 FALSE           #>  4 cd16                  0.967 FALSE           #>  5 flt3                  0.960 FALSE           #>  6 cd15                  0.940 FALSE           #>  7 cd41                  0.923 FALSE           #>  8 cd34                  0.909 FALSE           #>  9 cd61                  0.890 FALSE           #> 10 cd33                  0.885 FALSE           #> # ℹ 28 more rows levine |>    tof_plot_cells_density(marker_col = cd14)"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"identify-time-periods-of-abnormally-low-or-high-flow-rate-during-data-acquisition-using-tof_assess_flow_rate","dir":"Articles","previous_headings":"","what":"Identify time periods of abnormally low or high flow rate during data acquisition using tof_assess_flow_rate()","title":"Quality control","text":"Large changes flow rate cytometer can impact quality signal acquired data collection: example, abnormally low flow rates can caused partial occlusions cytometer’s flow cell, leading debris air infiltration cytometer’s microfluidics system. Thus, can useful perform quality control step explicitly interrogates flow rate course cytometry experiment order flag cells collected unusually high low rates acquisition. , {tidytof} provides tof_assess_flow_rate(), function implements simplified version FlowAI’s flow rate analysis. short, relative flow rates timestep cytometry experiment calculated, outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distibution across timesteps) flagged. size timesteps user-defined parameter calculation, significance level (0 1) within t-distribution determines anomalous time step’s flow rate must cells flagged. can apply tof_assess_flow_rate() levine dataset , using  result , can see last several timesteps flagged potentially low flow rates. decision include exclude cells analyses left user. group_cols argument can also used analyze flow rates samples, patients, mass cytometry barcode plates, etc. separately.","code":"levine |>    tof_assess_flow_rate(     time_col = time,      num_timesteps = 200,      # flag timepoints in which flow rates are high or low at a signicance level      # of p = 0.01     alpha_threshold = 0.01,      # plot the number of cells in each timestep, and whether or not the      # rates were flagged as too high or too low      visualize = TRUE   ) #> # A tibble: 265,627 × 3 #>     time timestep flagged_window #>    <dbl>    <dbl> <lgl>          #>  1  2693        1 FALSE          #>  2   850        1 FALSE          #>  3  3002        1 FALSE          #>  4  3082        1 FALSE          #>  5  3248        1 FALSE          #>  6  3363        1 FALSE          #>  7  3521        1 FALSE          #>  8  1680        1 FALSE          #>  9  3072        1 FALSE          #> 10  3339        1 FALSE          #> # ℹ 265,617 more rows levine |>    tof_assess_flow_rate(     time_col = time,      # analyze two files in the levine dataset separately      group_cols = file_number,      alpha_threshold = 0.01,      visualize = TRUE   ) #> # A tibble: 265,627 × 4 #>    file_number  time timestep flagged_window #>    <chr>       <dbl>    <dbl> <lgl>          #>  1 94            850        1 TRUE           #>  2 94           1680        1 TRUE           #>  3 94            856        1 TRUE           #>  4 94           1982        1 TRUE           #>  5 94           2163        1 TRUE           #>  6 94            689        1 TRUE           #>  7 94           1353        1 TRUE           #>  8 94            176        1 TRUE           #>  9 94            193        1 TRUE           #> 10 94            468        1 TRUE           #> # ℹ 265,617 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"flag-cells-that-are-unusually-far-from-the-centroid-of-a-cluster-to-which-they-have-been-assigned-with-tof_assess_clusters_distance","dir":"Articles","previous_headings":"","what":"Flag cells that are unusually far from the centroid of a cluster to which they have been assigned with tof_assess_clusters_distance()","title":"Quality control","text":"using favorite clustering algorithm define cell subpopulations (example, using tof_cluster()), may wonder well clustering procedure worked. example, may clusters contain outliers - , cells less similar cells cluster typical. detect cells, tidytof provides tof_assess_clusters_distance() verb, computes Mahalanobis distance cell centroid cluster assigned. , computes z-score mahalanobis distances cells cluster flags cells z-score user-specified threshold. Altogether, procedure flags cells unusually far cluster centroid - .e. candidate outliers. demonstrate use tof_assess_clusters_distance() simulated data. simulate data 3 clusters, large population cells “truly” belong cluster well small population outliers cells erroneously assigned cluster. following plots visualize simulated data described :   Using dataset, see tof_assess_clusters_distance() can successfully flag majority outlier cells cluster.","code":"set.seed(2020L)  # simulate large population of cells that truly belong in their assigned cluster sim_data_base <-   dplyr::tibble(     cd45 = c(rnorm(n = 600), rnorm(n = 500, mean = -4)),     cd38 =        c(         rnorm(n = 100, sd = 0.5),          rnorm(n = 500, mean = -3),          rnorm(n = 500, mean = 8)       ),     cd34 =        c(         rnorm(n = 100, sd = 0.2, mean = -10),          rnorm(n = 500, mean = 4),          rnorm(n = 500, mean = 60)       ),     cd19 = c(rnorm(n = 100, sd = 0.3, mean = 10), rnorm(n = 1000)),     cluster_id = c(rep(\"a\", 100), rep(\"b\", 500), rep(\"c\", 500)),     dataset = \"non-outlier\"   )  # simulate outlier cells that do not belong in their assigned cluster sim_data_outlier <-   dplyr::tibble(     cd45 = c(rnorm(n = 10), rnorm(50, mean = 3), rnorm(n = 50, mean = -12)),     cd38 =        c(         rnorm(n = 10, sd = 0.5),          rnorm(n = 50, mean = -10),          rnorm(n = 50, mean = 10)       ),     cd34 =        c(         rnorm(n = 10, sd = 0.2, mean = -15),          rnorm(n = 50, mean = 15),          rnorm(n = 50, mean = 70)       ),     cd19 = c(rnorm(n = 10, sd = 0.3, mean = 19), rnorm(n = 100)),     cluster_id = c(rep(\"a\", 10), rep(\"b\", 50), rep(\"c\", 50)),     dataset = \"outlier\"   )  # bind simulated data together sim_data <- bind_rows(sim_data_base, sim_data_outlier) sim_data |>    tof_plot_cells_embedding(color_col = cluster_id) sim_data |>    tof_plot_cells_embedding(color_col = dataset) sim_data |>   tof_assess_clusters_distance(     cluster_col = cluster_id,     # flag cells with a mahalanobis distance z-score over 3     z_threshold = 3,     augment = TRUE   ) |>    # visualize result as above   dplyr::select(-dplyr::starts_with(\".mahala\"), -z_score) |>    dplyr::mutate(flagged_cell = as.character(flagged_cell)) |>    tof_plot_cells_embedding(color_col = flagged_cell) +    scale_fill_manual(values = tof_generate_palette(num_colors = 2))"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"flag-cells-whose-cluster-assignment-is-ambiguous-with-tof_assess_clusters_entropy","dir":"Articles","previous_headings":"","what":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","title":"Quality control","text":"may also wish evaluate clustering result based cell’s absolute distance centroid cluster assigned, based relative distances cell cluster centroids. , order confident cell’s cluster assignment, ideally want cell close centroid cluster assigned, relatively distant clusters. contrasts scenario cell might similarly close centroids 2-3 clusters, case might think cell “ambiguous” phenotype, phenotype intermediate clusters clustering algorithm identified. flag “ambiguous” clusters, {tidytof} provides tof_assess_clusters_entropy() verb. tof_assess_clusters_entropy() computes entropy L1-scaled mahalanobis distance vector (.e. mahalanobis distance cell centroids clusters dataset) - entropy low (close 0) confident cell’s cluster assignment, high (near 1) equally close multiple cluster centroids. demonstrate use function simulated data levine dataset .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"simulated-data","dir":"Articles","previous_headings":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","what":"Simulated data","title":"Quality control","text":"First, simulate fake dataset 3000 cells 4 channels. simulated dataset, two well-defined clusters (“b” “c”) dispersed cluster intermediate others (“”). data visualized :  dataset, can imagine first analysis approach might involve clustering cells 2 distinct clusters. data simulated, already know number clusters small - can calculating entropy cells resulting clusters help us realize without prior knowledge? check, can use tof_assess_clusters_entropy():   plots , can see cells middle 2 k-means clusters (correspond well ground-truth clusters “b” “c” ) high entropy values, whereas cells closer one centroids low entropy values. can also see tof_assess_clusters_entropy() flags cells potentially anomalous (.e. intermediate phenotype two clusters identified) entropy values 75th percentile (user-specified parameter) entropy values dataset. user wish recluster dataset, filter anomalous cells, processing steps.  can see , expected, intermediate cluster (“”) higher entropies either distinct clusters (“b” “c”).","code":"sim_data <-   dplyr::tibble(     cd45 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cd38 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cd34 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cd19 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))   ) sim_data |>   tof_reduce_dimensions(method = \"pca\") |>   tof_plot_cells_embedding(     embedding_cols = c(.pc1, .pc2),     color_col = cluster_id   ) set.seed(17L)  entropy_result <-    sim_data |>    # cluster into 2 clusters   tof_cluster(     num_clusters = 2,      method = \"kmeans\"   ) |>    # calculate the entropy of all cells   tof_assess_clusters_entropy(     cluster_col = .kmeans_cluster,      marker_cols = starts_with(\"cd\"),      entropy_quantile = 0.8,      augment = TRUE   )   # plot the clusters in PCA space entropy_result |>    select(-starts_with(\".mahala\"), -flagged_cell) |>    tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>   tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = .kmeans_cluster) # show the entropy values for each cell entropy_result |>    select(-starts_with(\".mahala\"), -flagged_cell) |>    tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>   tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = entropy) +    scale_fill_viridis_c() entropy_result |>    select(-starts_with(\".mahala\")) |>    tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>   tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = flagged_cell) +    scale_fill_viridis_d() entropy_result |>   ggplot(aes(x = entropy, fill = cluster_id)) +   geom_density(alpha = 0.4) +   theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"real-data","dir":"Articles","previous_headings":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","what":"Real data","title":"Quality control","text":"can also apply tof_assess_clusters_entropy() dataset derived levine data. Suppose take 5 largest clusters levine save result small_levine tof_tbl. , can perturb dataset replacing labels cells smallest cluster (cluster 9) random labels. effectively creates population cells dataset whose “true” cluster label absent. scenario, expect cells perturbed cluster relatively distant remaining clusters, whereas unperturbed cells relatively close cluster centroid (correct centroid). Thus, can test tof_assess_clusters_entropy() successfully flags cells perturbed cluster relative others: plot , can see cells cluster 9 larger entropy values cells clusters, expected.  Similarly, can see majority cells 9 successfully flagged tof_assess_clusters_entropy() using entropy quantile threshold 0.9. Conversely, cells cluster (cluster 15) flagged.","code":"clusters_to_keep <-   levine |>   dplyr::count(population_id) |>   dplyr::slice_max(order_by = n, n = 5L) |>   dplyr::arrange(n) |>   pull(population_id)  smallest_cluster <- clusters_to_keep[1] largest_cluster <- clusters_to_keep[[length(clusters_to_keep)]]  small_levine <-   levine |>   dplyr::filter(population_id %in% clusters_to_keep) # perform the perturbation small_levine <-   small_levine |>   dplyr::mutate(     new_population_id =       dplyr::if_else(         population_id %in% smallest_cluster,         sample(           clusters_to_keep[-which(clusters_to_keep %in% smallest_cluster)],           size = nrow(small_levine),           replace = TRUE         ),         population_id       )   )  # perform the entropy assessment  entropy_levine <-   small_levine |>   tof_assess_clusters_entropy(     cluster_col = new_population_id,     marker_cols = starts_with(\"cd\"),     augment = TRUE   ) entropy_levine |>   mutate(population_id = fct_reorder(population_id, entropy)) |>   tof_plot_cells_density(     marker_col = entropy,     group_col = population_id,     use_ggridges = TRUE,     scale = 0.1   ) +    ggplot2::theme(legend.position = \"none\") +    ggplot2::labs(x = \"Entropy\", y = \"Cluster ID\") entropy_levine |>   mutate(flagged_cell = entropy > quantile(entropy, prob = 0.9)) |>   dplyr::count(population_id, flagged_cell) |>   group_by(population_id) |>   mutate(prop = n / sum(n)) |>   ungroup() |>   dplyr::filter(flagged_cell)  #> # A tibble: 2 × 4 #>   population_id flagged_cell     n   prop #>   <chr>         <lgl>        <int>  <dbl> #> 1 15            TRUE         12888 0.0798 #> 2 9             TRUE         11666 0.706"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files “phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class()  #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show    # that the columns have been changed   select(where(is.character))  #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # ℹ 296 more rows phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data() %>%    tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble  # to tof_read_data phenograph_panel <-    phenograph %>%    tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data(panel_info = phenograph_panel) %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name  phenograph_cluster    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>        <chr>                <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGra… cluster1           -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGra… cluster1            1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGra… cluster1            2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGra… cluster1            0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # ℹ 2,996 more rows #> # ℹ 16 more variables: cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, #> #   cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, #> #   pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, #> #   prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%    # create a variable representing if a cell is above or below    # the median expression level of pstat5   mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   ) phenograph_data %>%    mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting started with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"Getting started with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied CyTOF data tof_metacluster() agglomerates clusters smaller number metaclusters tof_daa() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_dea() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"Getting started with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (%>%) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers. Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data %>%    tof_preprocess() %>%   tof_cluster(     cluster_cols = starts_with(\"cd\"), # column specification     method = \"phenograph\", # method specification,    ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster, # column specification     num_metaclusters = 4, # method specification     method = \"kmeans\" # method specification   ) %>%    tof_downsample(     group_cols = .kmeans_metacluster, # column specification     num_cells = 200, # method specification     method = \"constant\" # method specification   ) %>%   tof_plot_cells_layout(     knn_cols = starts_with(\"cd\"), # column specification     color_col = .kmeans_metacluster, # column specification     num_neighbors = 7L, # method specification     node_size = 2L # method specification   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Getting started with tidytof","text":"tidytof verbs can used combination one another using pipe (%>%) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data %>%    # step 1   tof_preprocess() %>%    # step 2   tof_cluster(     cluster_cols = starts_with(\"cd\"),      method = \"phenograph\",      #num_metaclusters = 4L,      seed = 2020L   ) %>%   # step 3   tof_downsample(     group_cols = .phenograph_cluster,      method = \"constant\",      num_cells = 400   ) %>%    # step 4   tof_reduce_dimensions(method = \"tsne\") %>%    # step 5   tof_plot_cells_embedding(     embedding_cols = contains(\"tsne\"),     color_col = .phenograph_cluster    ) +    ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"Getting started with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every CyTOF analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T (2023). tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles. https://keyes-timothy.github.io/tidytof, https://keyes-timothy.github.io/tidytof/.","code":"@Manual{,   title = {tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles},   author = {Timothy Keyes},   year = {2023},   note = {https://keyes-timothy.github.io/tidytof, https://keyes-timothy.github.io/tidytof/}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-highly-reproducible-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze Mass Cytometry Data Using Tidy Data Principles","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis high-dimensional cytometry data (.e. mass cytometry, full-spectrum flow cytometry, sequence-based cytometry). Specifically, tidytof provides easy--use pipeline handling high-dimensional cytometry data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels CyTOF data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if(!require(devtools)) install.packages(\"devtools\")  devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if(!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if(!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.1/Resources/library/tidytof/extdata/phenograph\" phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show that the columns have been changed   select(where(is.character)) %>%    head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() %>%    head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-    phenograph %>%    tof_preprocess()  # inspect new values phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Often, CyTOF experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"data(phenograph_data)  phenograph_data %>%    count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     method = \"constant\",      group_cols = phenograph_cluster,      num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     method = \"prop\",     group_cols = phenograph_cluster,      prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # make a scatterplot   ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw() phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(     density_cols = c(cd34, cd38),      target_prop_cells = 0.25,      method = \"density\",    ) %>%    ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple CyTOF runs.","code":"# when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    # create a variable representing if a cell is above or below the median    # expression level of pstat5   mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters %>%    select(sample_name, .flowsom_metacluster, everything()) %>%    head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacl… phenograph_clus…    cd19 cd11b    cd34  cd45 #>   <chr>            <chr>            <chr>              <dbl> <dbl>   <dbl> <dbl> #> 1 H1_PhenoGraph_c… 3                cluster1         -0.0336 2.46   0.608   3.96 #> 2 H1_PhenoGraph_c… 7                cluster1          0.324  0.856 -0.116   4.52 #> 3 H1_PhenoGraph_c… 3                cluster1          0.532  2.67   0.909   4.76 #> 4 H1_PhenoGraph_c… 4                cluster1          0.0163 2.97   0.0725  5.15 #> 5 H1_PhenoGraph_c… 2                cluster1          0.144  2.98   0.128   4.52 #> 6 H1_PhenoGraph_c… 4                cluster1          0.742  3.41   0.336   5.71 #> # … with 19 more variables: cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, cd7 <dbl>, #> #   cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, #> #   pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, #> #   pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters %>%    count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 22 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster3           15                     436 #>  2 cluster1           5                      278 #>  3 cluster1           4                      260 #>  4 cluster2           19                     258 #>  5 cluster2           14                     242 #>  6 cluster3           8                      241 #>  7 cluster3           11                     183 #>  8 cluster1           2                      158 #>  9 cluster2           16                     157 #> 10 cluster2           20                     156 #> # … with 12 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) %>%    head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 4                    #> 2 6                    #> 3 3                    #> 4 2                    #> 5 3                    #> 6 2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-    phenograph_clusters %>%    tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1    8.65  -5.01  #> 2   14.3   -2.76  #> 3   37.0   13.4   #> 4   24.1   -0.176 #> 5   11.6   -3.47  #> 6   22.6    7.79 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = phenograph_cluster)) +    geom_point(shape = 21) +    theme_bw() +    labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = cd11b)) +    geom_point(shape = 21) +    scale_fill_viridis_c() +   theme_bw() +    labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_daa-and-tof_dea","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_daa and tof_dea","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many CyTOF users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_daa tof_dea verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = str_extract(file_name, \"patient[:digit:]\"),      stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\") daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )  significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-    dea_result %>%    tof_plot_cluster_volcano(     use_ggrepel = TRUE   )   volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition verbs operate single-cell data directly, tidytof implements functions aggregating single-cell measurements cluster- sample-level summary statistics can analyzed using variety statistical models.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing CyTOF data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, … # Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, … citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients %>%    select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor first,    # which is something we'll want for fitting the model later   # and create the time_to_event and event columns for survival modeling   mutate(     relapse_status = as.factor(relapse_status),      time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-    ddpr_patients %>%    dplyr::filter(cohort == \"Training\")   ddpr_validation <-    ddpr_patients %>%    dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training %>%    dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-    ddpr_training %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 5,      strata = relapse_status   )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN6           5.62      0.550    0.00374    0.622       2.86     0.342 #> 6 UPN9          15.6       0.446    0.0445     0.163       2.86     0.434 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN7           0.474      0.966   0.124       1.24       2.59     0.243 #> 2 UPN8           0.951      0.958   0.161       0.556      3.18     0.556 #> 3 UPN12          0.0565     0.185   0.0115      0.142      2.49     0.254 #> 4 UPN24          0.0989     0.196   0.0198      0.210      2.36     0.382 #> 5 UPN26          0.390      0.650   0.00157     0.622      2.81     0.684 #> 6 UPN27          0.563      1.07    0.00276     0.712      2.40     0.411 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-    training_split %>%    tof_train_model(     predictor_cols = contains(\"Pop2\"),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = tof_create_grid(mixture_values = 1),      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-05  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # … with 15 more rows class_predictions <-    class_mod %>%    tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions %>%    dplyr::mutate(     truth = ddpr_validation$relapse_status   ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-    class_mod %>%    tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # … with 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod %>%    tof_plot_model() +    labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-    class_mod %>%    tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod %>%    tof_plot_model(new_data = ddpr_validation) +    labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. details design principles, check Getting Started tidytof vignette","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path %>%    # step 1   tof_read_data() %>%    # step 2   tof_preprocess() %>%    # step 3   tof_cluster(method = \"phenograph\") %>%   # step 4   tof_downsample(     group_cols = .phenograph_cluster,      num_cells = 100,     method = \"constant\"    ) %>%    # step 5   tof_reduce_dimensions(perplexity = 50, method = \"tsne\") %>%    # step 6   tof_plot_cells_embedding(     embedding_cols = starts_with(\".tsne\"),     color_col = .phenograph_cluster   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for flowSet as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang :=, .data tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1/5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_analyze_abundance_*` function family: tof_analyze_abundance_diffcyt, tof_analyze_abundance_glmm, tof_analyze_abundance_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"","code":"tof_analyze_abundance(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_analyze_abundance_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"tibble nested tibble containing differential abundance results chosen method. See tof_analyze_abundance_diffcyt, tof_analyze_abundance_glmm, tof_analyze_abundance_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"","code":"tof_analyze_abundance_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"","code":"tof_analyze_abundance_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"","code":"tof_analyze_abundance_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_analyze_abundance_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_analyze_expression_*` function family: tof_analyze_expression_diffcyt, tof_analyze_expression_lmm, tof_analyze_expression_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"","code":"tof_analyze_expression(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_analyze_expression_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"tibble nested tibble containing differential abundance results chosen method. See tof_analyze_expression_diffcyt, tof_analyze_expression_lmm, tof_analyze_expression_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"","code":"tof_analyze_expression_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"","code":"tof_analyze_expression_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"","code":"tof_analyze_expression_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_analyze_abundance_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"function adds additional column `tibble` `tof_tbl` allow users incorporate manual cell type labels clusters identified using unsupervised algorithms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"","code":"tof_annotate_clusters(tof_tibble, cluster_col, annotations)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` contains ids unsupervised cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. annotations data structure indicating annotate cluster id `cluster_col`. `annotations` can provided data.frame two columns (first name `cluster_col` contain unique cluster id; second can name contain character vector indicating manual annotation matched cluster id first column). `annotations` can also provided named character vector; case, entry `annotations` unique cluster id, names entry corresponding manual cluster annotation. See examples.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"`tof_tbl` number rows `tof_tibble` one additional column containing manual cluster annotations cell (character vector). `annotations` provided data.frame, new column name column containing cluster annotations `annotations`. `annotations` provided named character vector, new column named `cluster_col_annotation`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"","code":"sim_data <-   dplyr::tibble(     cd45 = rnorm(n = 1000),     cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),     cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),     cd19 = rnorm(n = 1000),     cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))   )  # using named character vector sim_data |>   tof_annotate_clusters(     cluster_col = cluster_id,     annotations = c(\"macrophage\" = \"a\", \"dendritic cell\" = \"b\")   ) #> # A tibble: 1,000 × 6 #>       cd45   cd38    cd34    cd19 cluster_id cluster_id_annotation #>      <dbl>  <dbl>   <dbl>   <dbl> <chr>      <chr>                 #>  1  0.0796 -0.407 -0.559   2.17   a          macrophage            #>  2  1.10    0.509 -1.61    0.130  a          macrophage            #>  3 -0.0204 -1.60   0.900  -1.10   a          macrophage            #>  4  1.59    0.371 -1.24   -0.236  a          macrophage            #>  5  1.76    0.334  0.0681 -0.824  a          macrophage            #>  6 -1.69   -1.28   0.0535  0.0925 a          macrophage            #>  7 -0.455   0.526 -1.34   -0.365  a          macrophage            #>  8  1.00    1.10   1.34    0.504  a          macrophage            #>  9 -0.675   1.02  -0.831  -0.822  a          macrophage            #> 10 -0.311  -0.437  0.538  -0.354  a          macrophage            #> # ℹ 990 more rows  # using two-column data.frame annotation_data_frame <-   data.frame(     cluster_id = c(\"a\", \"b\"),     cluster_annotation = c(\"macrophage\", \"dendritic cell\")   )  sim_data |>   tof_annotate_clusters(     cluster_col = cluster_id,     annotations = annotation_data_frame   ) #> # A tibble: 1,000 × 6 #>       cd45   cd38    cd34    cd19 cluster_id cluster_annotation #>      <dbl>  <dbl>   <dbl>   <dbl> <chr>      <chr>              #>  1  0.0796 -0.407 -0.559   2.17   a          macrophage         #>  2  1.10    0.509 -1.61    0.130  a          macrophage         #>  3 -0.0204 -1.60   0.900  -1.10   a          macrophage         #>  4  1.59    0.371 -1.24   -0.236  a          macrophage         #>  5  1.76    0.334  0.0681 -0.824  a          macrophage         #>  6 -1.69   -1.28   0.0535  0.0925 a          macrophage         #>  7 -0.455   0.526 -1.34   -0.365  a          macrophage         #>  8  1.00    1.10   1.34    0.504  a          macrophage         #>  9 -0.675   1.02  -0.831  -0.822  a          macrophage         #> 10 -0.311  -0.437  0.538  -0.354  a          macrophage         #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"Detect low-expression (.e. potentially failed) channels high-dimensional cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"","code":"tof_assess_channels(   tof_tibble,   channel_cols = where(tof_is_numeric),   negative_threshold = asinh(10/5),   negative_proportion_flag = 0.95 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default analyze numeric columns. negative_threshold scalar indicating threshold measurement considered negative. Defaults hyperbolic arcsine transformation 10 counts. negative_proportion_flag scalar 0 1 indicating proportion cells tof_tibble need `negative_threshold` given marker order marker flagged. Defaults 0.95.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"tibble 3 columns number rows equal number columns `tof_tibble` chosen `channel_cols`. three columns \"channel\", character vector channel names, \"negative_proportion\", numeric vector values 0 1 indicating many cells `tof_tibble` `negative_threshold` channel, `flagged_channel`, boolean vector indicating whether channel flagged potentially failed (TRUE means channel large number cells `negative_threshold`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"","code":"# simulate some data sim_data <-    data.frame(    cd4 = rnorm(n = 100, mean = 5, sd = 0.5),    cd8 = rnorm(n = 100, mean = 0, sd = 0.1),    cd33 = rnorm(n = 100, mean = 10, sd = 0.1) )  tof_assess_channels(tof_tibble = sim_data) #> # A tibble: 3 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE           #> 3 cd33                      0 FALSE            tof_assess_channels(tof_tibble = sim_data, channel_cols = c(cd4, cd8)) #> # A tibble: 2 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE            tof_assess_channels(tof_tibble = sim_data, negative_threshold = 2) #> # A tibble: 3 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE           #> 3 cd33                      0 FALSE"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"function evaluates result clustering procedure comparing mahalanobis distance cell centroid cluster assigned among cells given cluster. cells mahalanobis-distance z-score user-specified threshold flagged potentially anomalous. Note z-score calculated using modified formula minimize effect outliers (Z = x - median(x) / mad(x)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"","code":"tof_assess_clusters_distance(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   z_threshold = 3,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. z_threshold scalar indicating distance z-score threshold cell considered anomalous. Defaults 3. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"augment = FALSE (default), tibble 3 columns: \".mahalanobis_distance\" (mahalanobis distance cell centroid tits assigned cluster), \"z_score\" (modified z-score cell's mahalanobis distance relative cells dataset), \"flagged_cell\" (boolean indicating whether cell flagged z-score z_threshold). augment = TRUE, 3 columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"","code":"# simulate data sim_data_inner <-     dplyr::tibble(         cd45 = c(rnorm(n = 600), rnorm(n = 500, mean = -4)),         cd38 = c(rnorm(n = 100, sd = 0.5), rnorm(n = 500, mean = -3), rnorm(n = 500, mean = 8)),         cd34 = c(rnorm(n = 100, sd = 0.2, mean = -10), rnorm(n = 500, mean = 4), rnorm(n = 500, mean = 60)),         cd19 = c(rnorm(n = 100, sd = 0.3, mean = 10), rnorm(n = 1000)),         cluster_id = c(rep(\"a\", 100), rep(\"b\", 500), rep(\"c\", 500)),         dataset = \"inner\"     )  sim_data_outer <-   dplyr::tibble(     cd45 = c(rnorm(n = 10), rnorm(50, mean = 3), rnorm(n = 50, mean = -12)),     cd38 =       c(         rnorm(n = 10, sd = 0.5),         rnorm(n = 50, mean = -10),         rnorm(n = 50, mean = 10)       ),     cd34 =       c(         rnorm(n = 10, sd = 0.2, mean = -15),         rnorm(n = 50, mean = 15),         rnorm(n = 50, mean = 70)       ),     cd19 = c(rnorm(n = 10, sd = 0.3, mean = 19), rnorm(n = 100)),     cluster_id = c(rep(\"a\", 10), rep(\"b\", 50), rep(\"c\", 50)),     dataset = \"outer\"   )  sim_data <- rbind(sim_data_inner, sim_data_outer)  # detect anomalous cells (in this case, the \"outer\" dataset contains small # clusters that get lumped into the larger clusters in the \"inner\" dataset) z_result <-   sim_data |>   tof_assess_clusters_distance(cluster_col = cluster_id, z_threshold = 2.5)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"function evaluates result clustering procedure calculating mahalanobis distance cell centroids clusters dataset finding shannon entropy resulting vector distances. cells entropy threshold user-specified threshold flagged potentially anomalous. Entropy minimized (0) cell close one (small number) clusters, far rest . cell close multiple cluster centroids (.e. ambiguous phenotype), entropy large.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"","code":"tof_assess_clusters_entropy(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   entropy_threshold,   entropy_quantile = 0.9,   num_closest_clusters,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. entropy_threshold scalar indicating entropy threshold cell considered anomalous. unspecified, threshold computed using `entropy_quantile` (see ). (Note: Entropy often 0 1, can larger many classes/clusters). entropy_quantile scalar 0 1 indicating entropy quantile cell considered anomalous. Defaults 0.9, means cells entropy 90th percentile flagged. Ignored entropy_threshold specified directly. num_closest_clusters integer indicating many cell's closest cluster centroids mahalanobis distance included entropy calculation. Playing argument allow ignore distances clusters far away cell (thus may distort result, many distant centroids large distances can artificially inflate cells' entropy value; said, rarely issue empirically). Defaults clusters tof_tibble. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"augment = FALSE (default), tibble 2 + NUM_CLUSTERS columns. NUM_CLUSTERS number unique clusters cluster_col. Two columns \"entropy\" (entropy value cell) \"flagged_cell\" (boolean value indicating cell entropy value entropy_threshold). NUM_CLUSTERS columns contain mahalanobis distances cell clusters cluster_col (named \".mahalanobis_cluster_name\"). augment = TRUE, 2 + NUM_CLUSTERS columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"","code":"# simulate data sim_data <-   dplyr::tibble(     cd45 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd38 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd34 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd19 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))   )  # imagine a \"reference\" dataset in which \"cluster a\" isn't present sim_data_reference <-   sim_data |>   dplyr::filter(cluster_id %in% c(\"b\", \"c\"))  # if we cluster into the reference dataset, we will force all cells in # cluster a into a population where they don't fit very well sim_data <-   sim_data |>   tof_cluster(     healthy_tibble = sim_data_reference,     healthy_label_col = cluster_id,     method = \"ddpr\"   )  # we can evaluate the clustering quality by calculating by the entropy of the # mahalanobis distance vector for each cell to all cluster centroids entropy_result <-   sim_data |>   tof_assess_clusters_entropy(     cluster_col = .mahalanobis_cluster,     marker_cols = starts_with(\"cd\"),     entropy_quantile = 0.8,     augment = TRUE   )  # most cells in \"cluster a\" are flagged, and few cells in the other clusters are flagged_cluster_proportions <-   entropy_result |>   dplyr::group_by(cluster_id) |>   dplyr::summarize(     prop_flagged = mean(flagged_cell)   )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"function evaluates result clustering procedure finding cell's K nearest neighbors, determining cluster majority assigned , checking matches cell's cluster assignment. cluster assignment majority cell's nearest neighbors match cell's cluster assignment, cell flagged potentially anomalous.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"","code":"tof_assess_clusters_knn(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   num_neighbors = min(10, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. num_neighbors integer indicating many neighbors found nearest neighbor calculation. distance_function string indicating distance function used perform k nearest neighbor calculation.  Options \"euclidean\" (default) \"cosine\". augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"augment = FALSE (default), tibble 2 columns: \".knn_cluster\" (character vector indicating cluster received majority vote cell's k nearest neighbors) \"flagged_cell\" (boolean value indicating cell's cluster assignment matched majority vote (TRUE) (FALSE)). augment = TRUE, 2 columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"","code":"sim_data <-   dplyr::tibble(     cd45 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd38 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd34 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd19 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))   )  knn_result <-   sim_data |>   tof_assess_clusters_knn(     cluster_col = cluster_id,     num_neighbors = 10   )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"function performs simplified version flowAI's statistical test detect time periods abnormal flow rates course flow cytometry experiment. Briefly, relative flow rates timestep throughout data acquisition calculated (see tof_calculate_flow_rate), outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"","code":"tof_assess_flow_rate(   tof_tibble,   time_col,   group_cols,   num_timesteps = nrow(tof_tibble)/1000,   alpha_threshold = 0.01,   visualize = FALSE,   ...,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. group_cols Optional. Unquoted column names indicating columns used group cells analysis. Flow rate calculation performed independently within group. Supports tidyselect helpers. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection. alpha_threshold scalar 0 1 indicating two-tailed significance level draw outlier thresholds t-distribution `num_timesteps` - 1 degrees freedom. Defaults 0.01. visualize boolean value indicating plot generated visualize timestep's relative flow rate (group). plot printed console side-effect function; non-interactive R sessions, argument always FALSE (default). ... Optional additional arguments pass facet_wrap. Ignored visualize = FALSE. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"tibble number rows `tof_tibble`. augment = FALSE (default), 3 columns: \"time_col\" (column `time_col`), \"timestep\" (numeric timestep cell assigned based value `time_col`), \"flagged_window\" (boolean vector indicating cell collecting timestep flagged high low flow rate). augment = TRUE, 3 columns column-bound `tof_tibble` return augmented version input dataset. (Note case, time_col duplicated).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"","code":"set.seed(1000L) sim_data <-   data.frame(     cd4 = rnorm(n = 1000, mean = 5, sd = 0.5),     cd8 = rnorm(n = 1000, mean = 0, sd = 0.1),     cd33 = rnorm(n = 1000, mean = 10, sd = 0.1),     file_name = c(rep(\"a\", times = 500), rep(\"b\", times = 500)),     time =       c(         sample(1:100, size = 200, replace = TRUE),         sample(100:400, size = 300, replace = TRUE),         sample(1:150, size = 400, replace = TRUE),         sample(1:500, size = 100, replace = TRUE)       )   )  sim_data |>   tof_assess_flow_rate(     time_col = time,     num_timesteps = 20,     visualize = TRUE   )  #> # A tibble: 1,000 × 3 #>     time timestep flagged_window #>    <int>    <dbl> <lgl>          #>  1    13        1 TRUE           #>  2     6        1 TRUE           #>  3     3        1 TRUE           #>  4     3        1 TRUE           #>  5    15        1 TRUE           #>  6     7        1 TRUE           #>  7    23        1 TRUE           #>  8     6        1 TRUE           #>  9     3        1 TRUE           #> 10     4        1 TRUE           #> # ℹ 990 more rows  sim_data |>   tof_assess_flow_rate(     time_col = time,     group_cols = file_name,     num_timesteps = 20,     visualize = TRUE   )  #> # A tibble: 1,000 × 4 #>    file_name  time timestep flagged_window #>    <chr>     <int>    <dbl> <lgl>          #>  1 a            13        1 TRUE           #>  2 a             6        1 TRUE           #>  3 a             3        1 TRUE           #>  4 a             3        1 TRUE           #>  5 a            15        1 TRUE           #>  6 a             7        1 TRUE           #>  7 a             6        1 TRUE           #>  8 a             3        1 TRUE           #>  9 a             4        1 TRUE           #> 10 a             5        1 TRUE           #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"function performs simplified version flowAI's statistical test detect time periods abnormal flow rates course flow cytometry experiment. Briefly, relative flow rates timestep throughout data acquisition calculated (see tof_calculate_flow_rate), outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"","code":"tof_assess_flow_rate_tibble(   tof_tibble,   time_col,   num_timesteps = nrow(tof_tibble)/1000,   alpha_threshold = 0.01,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection. alpha_threshold scalar 0 1 indicating two-tailed significance level draw outlier thresholds t-distribution `num_timesteps` - 1 degrees freedom. Defaults 0.01. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"tibble number rows `tof_tibble`. augment = FALSE (default), 3 columns: \"time_col\" (column `time_col`), \"timestep\" (numeric timestep cell assigned based value `time_col`), \"flagged_window\" (boolean vector indicating cell collecting timestep flagged high low flow rate). augment = TRUE, 3 columns column-bound `tof_tibble` return augmented version input dataset. (Note case, time_col duplicated).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"","code":"set.seed(1000L) sim_data <-   data.frame(     cd4 = rnorm(n = 1000, mean = 5, sd = 0.5),     cd8 = rnorm(n = 1000, mean = 0, sd = 0.1),     cd33 = rnorm(n = 1000, mean = 10, sd = 0.1),     time =       c(         sample(1:100, size = 200, replace = TRUE),         sample(100:400, size = 300, replace = TRUE),         sample(1:150, size = 400, replace = TRUE),         sample(1:500, size = 100, replace = TRUE)       )   )  sim_data |>   tof_assess_flow_rate(     time_col = time,     num_timesteps = 20,     visualize = TRUE   )  #> # A tibble: 1,000 × 3 #>     time timestep flagged_window #>    <int>    <dbl> <lgl>          #>  1    13        1 TRUE           #>  2     6        1 TRUE           #>  3     3        1 TRUE           #>  4     3        1 TRUE           #>  5    15        1 TRUE           #>  6     7        1 TRUE           #>  7    23        1 TRUE           #>  8     6        1 TRUE           #>  9     3        1 TRUE           #> 10     4        1 TRUE           #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    0.795 #> 2 mae    0.788 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"function performs quantile normalization high-dimensional cytometry data tidy format using either linear rescaling quantile normalization. channel specified `channel_cols` batch corrected, `group_cols` can used break cells groups batch correction performed separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"","code":"tof_batch_correct(   tof_tibble,   channel_cols,   group_cols,   augment = TRUE,   method = c(\"rescale\", \"quantile\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted. method string indicating batch correction method used. Valid options \"rescale\" linear scaling (default) \"quantile\" quantile normalization using normalize.quantiles.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"function performs quantile normalization high-dimensional cytometry data tidy format using normalize.quantiles. Optionally, groups can specified normalized separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"","code":"tof_batch_correct_quantile(   tof_tibble,   channel_cols,   group_cols,   augment = TRUE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"function performs quantile normalization high-dimensional cytometry data tidy format using normalize.quantiles.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"","code":"tof_batch_correct_quantile_tibble(tof_tibble, channel_cols, augment = TRUE)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"function performs quantile normalization high-dimensional cytometry data tidy format using linear rescaling. channel specified `channel_cols` rescaled maximum value 1 minimum value 0. `group_cols` specifies columns used break cells groups rescaling performed separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"","code":"tof_batch_correct_rescale(tof_tibble, channel_cols, group_cols, augment = TRUE)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"Calculate relative flow rates different timepoints throughout flow mass cytometry run.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"","code":"tof_calculate_flow_rate(   tof_tibble,   time_col,   num_timesteps = nrow(tof_tibble)/1000 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"tibble 3 columns num_timesteps rows. row represent single timestep (error thrown `num_timesteps` larger number rows `tof_tibble`). three columns follows: \"timestep\", numeric vector indicating timestep represented given row; \"time_window\", factor showing interval `time_col` \"timestep\" defined; \"num_cells\", number cells collected timestep.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"","code":"# simulate some data sim_data <-    data.frame(    cd4 = rnorm(n = 100, mean = 5, sd = 0.5),    cd8 = rnorm(n = 100, mean = 0, sd = 0.1),    cd33 = rnorm(n = 100, mean = 10, sd = 0.1),    time = sample(1:300, size = 100) )  tof_calculate_flow_rate(tof_tibble = sim_data, time_col = time, num_timesteps = 20L) #>    timestep time_window num_cells #> 1         1 (6.71,21.6]         4 #> 2         2 (21.6,36.2]         6 #> 3         3 (36.2,50.8]         7 #> 4         4 (50.8,65.4]         7 #> 5         5   (65.4,80]         5 #> 6         6   (80,94.6]         4 #> 7         7  (94.6,109]         5 #> 8         8   (109,124]         4 #> 9         9   (124,138]         1 #> 10       10   (138,153]         7 #> 11       11   (153,168]         5 #> 12       12   (168,182]         2 #> 13       13   (182,197]         7 #> 14       14   (197,211]         7 #> 15       15   (211,226]         5 #> 16       16   (226,241]         2 #> 17       17   (241,255]         4 #> 18       18   (255,270]         5 #> 19       19   (270,284]         7 #> 20       20   (284,299]         6"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster CyTOF data. — tof_cluster","title":"Cluster CyTOF data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster CyTOF data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells clustering. Clustering performed group independently. Supports tidyselect helpers. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster CyTOF data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 .kmeans_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>           #>  1  1.33  -0.447  1.50   0.436 11              #>  2 -1.20  -0.481 -0.391 -1.54  9               #>  3 -0.541  0.666 -1.68  -0.986 16              #>  4 -1.22   1.32   0.689 -0.791 10              #>  5  0.639  0.519 -1.32  -0.204 18              #>  6 -0.239  0.397 -0.780  0.372 1               #>  7  0.651  0.997 -0.665  0.805 18              #>  8  0.788  1.26   0.584 -0.953 19              #>  9 -0.344  0.388 -0.407 -0.442 13              #> 10  0.120  0.885 -2.26   0.583 17              #> # ℹ 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 .phenograph_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>               #>  1  1.33  -0.447  1.50   0.436 2                   #>  2 -1.20  -0.481 -0.391 -1.54  5                   #>  3 -0.541  0.666 -1.68  -0.986 5                   #>  4 -1.22   1.32   0.689 -0.791 3                   #>  5  0.639  0.519 -1.32  -0.204 1                   #>  6 -0.239  0.397 -0.780  0.372 1                   #>  7  0.651  0.997 -0.665  0.805 1                   #>  8  0.788  1.26   0.584 -0.953 5                   #>  9 -0.344  0.388 -0.407 -0.442 5                   #> 10  0.120  0.885 -2.26   0.583 1                   #> # ℹ 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"function performs distance-based clustering CyTOF data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.distance_function_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.distance_function_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 a                    #>  2 a                    #>  3 b                    #>  4 a                    #>  5 b                    #>  6 b                    #>  7 a                    #>  8 b                    #>  9 a                    #> 10 a                    #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"function performs FlowSOM clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 10                   #>  2 17                   #>  3 11                   #>  4 4                    #>  5 2                    #>  6 19                   #>  7 1                    #>  8 1                    #>  9 11                   #> 10 8                    #> # ℹ 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"function performs k-means clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 13              #>  2 6               #>  3 5               #>  4 3               #>  5 8               #>  6 1               #>  7 13              #>  8 20              #>  9 6               #> 10 12              #> # ℹ 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 13              #>  2 3               #>  3 16              #>  4 20              #>  5 11              #>  6 20              #>  7 18              #>  8 12              #>  9 3               #> 10 3               #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering CyTOF data using user-specified selection input variables/CyTOF measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 10                  #>  2 1                   #>  3 7                   #>  4 1                   #>  5 3                   #>  6 10                  #>  7 1                   #>  8 2                   #>  9 2                   #> 10 8                   #> # ℹ 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 12                  #>  2 7                   #>  3 6                   #>  4 1                   #>  5 2                   #>  6 12                  #>  7 6                   #>  8 8                   #>  9 5                   #> 10 3                   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # ℹ 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # ℹ 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data. — tof_downsample","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>      cd45   cd38    cd34    cd19 cluster_id #>     <dbl>  <dbl>   <dbl>   <dbl> <chr>      #>  1  0.388 -0.656  0.0169  2.22   l          #>  2 -0.338 -0.203  0.311  -0.918  x          #>  3 -0.668  1.42   0.663  -0.0426 n          #>  4 -0.646  1.27   1.25   -1.39   b          #>  5 -1.02  -0.942  1.73    0.199  r          #>  6  1.39   0.103  0.630  -0.492  d          #>  7 -0.803  0.217 -1.81   -0.404  h          #>  8 -0.339 -1.35   1.01    1.22   r          #>  9 -1.69   1.16  -2.18    0.152  e          #> 10 -0.308 -0.304 -0.729  -0.194  q          #> # ℹ 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>       cd45     cd38   cd34    cd19 cluster_id #>      <dbl>    <dbl>  <dbl>   <dbl> <chr>      #>  1  0.554  -1.50    -3.22   0.551  z          #>  2  0.0988 -1.64    -1.48  -1.42   f          #>  3 -1.56    0.844   -0.890  0.0949 t          #>  4 -1.40    0.00142 -0.277  1.58   t          #>  5 -1.00   -1.95    -0.180  0.140  w          #>  6  0.368   1.04    -0.811  1.51   f          #>  7 -0.105  -0.0476   0.750 -0.0133 k          #>  8  1.19    1.80    -0.989  0.135  t          #>  9  1.24    1.26    -1.98   0.446  o          #> 10 -0.824  -0.496   -0.775 -0.181  h          #> # ℹ 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 93 × 5 #>       cd45    cd38    cd34    cd19 cluster_id #>      <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1 -0.338  -0.203   0.311  -0.918  x          #>  2 -0.474  -1.24   -0.0408 -1.63   e          #>  3  1.92   -0.278  -1.94    1.10   j          #>  4  0.201  -0.887  -0.830  -0.175  c          #>  5  1.33    1.39    0.283   0.0380 f          #>  6 -1.36    1.40    1.22   -0.153  g          #>  7  1.02    1.76    0.896  -1.99   h          #>  8  0.0524  1.58   -0.660  -0.804  s          #>  9  1.76   -0.0118  2.14    2.53   b          #> 10  0.146   0.163  -0.148  -2.00   l          #> # ℹ 83 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>      cd45   cd38    cd34   cd19 cluster_id #>     <dbl>  <dbl>   <dbl>  <dbl> <chr>      #>  1 -0.545 -2.04  -1.07    0.177 e          #>  2 -0.466 -1.39  -0.887  -0.992 x          #>  3  1.87   0.515 -0.358   1.06  x          #>  4  0.195 -0.817  0.571  -0.587 o          #>  5  0.353  1.17  -1.28   -0.703 f          #>  6 -2.33  -0.765 -0.0636  0.862 c          #>  7 -1.63   0.294 -0.572  -0.399 z          #>  8 -0.819  0.479 -0.707   2.64  k          #>  9 -0.580  1.03  -0.313   0.323 y          #> 10 -1.39   0.501 -1.32   -0.358 d          #> # ℹ 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>      cd45    cd38    cd34    cd19 cluster_id #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1  1.82   1.20    1.45    0.595  x          #>  2 -0.545 -2.04   -1.07    0.177  e          #>  3 -0.466 -1.39   -0.887  -0.992  x          #>  4  1.87   0.515  -0.358   1.06   x          #>  5  0.195 -0.817   0.571  -0.587  o          #>  6  0.353  1.17   -1.28   -0.703  f          #>  7 -2.33  -0.765  -0.0636  0.862  c          #>  8 -1.63   0.294  -0.572  -0.399  z          #>  9 -0.819  0.479  -0.707   2.64   k          #> 10 -0.108 -0.0618  0.308  -0.0321 a          #> # ℹ 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 500 × 4 #>       cd45   cd38    cd34    cd19 #>      <dbl>  <dbl>   <dbl>   <dbl> #>  1 -1.58    1.17  -0.457  -0.252  #>  2 -1.76   -1.31   0.517  -0.826  #>  3  0.644  -0.154  1.12   -0.162  #>  4 -1.53   -0.796 -0.714  -0.137  #>  5  0.0527  0.312 -0.478   0.135  #>  6 -0.305   1.87   0.0555 -1.42   #>  7 -1.91   -0.294  0.780  -0.145  #>  8 -0.525   0.297  1.90   -1.40   #>  9 -0.585  -2.49   0.390  -1.11   #> 10 -0.538  -0.727 -0.572  -0.0232 #> # ℹ 490 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 187 × 4 #>      cd45   cd38   cd34    cd19 #>     <dbl>  <dbl>  <dbl>   <dbl> #>  1  0.619 -1.09  -1.46  -0.0351 #>  2 -0.525  0.297  1.90  -1.40   #>  3 -0.585 -2.49   0.390 -1.11   #>  4  0.965  0.424 -0.307  1.83   #>  5 -0.105 -1.57   0.550 -0.847  #>  6  1.15  -1.04   0.458  0.981  #>  7  0.101 -1.66  -1.05   0.458  #>  8 -0.877  1.24  -0.818 -0.550  #>  9  1.26   0.976  0.291  0.700  #> 10 -0.582  1.24   1.29   1.18   #> # ℹ 177 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 197 × 4 #>      cd45    cd38    cd34   cd19 #>     <dbl>   <dbl>   <dbl>  <dbl> #>  1  0.682  0.0830  0.312  -0.157 #>  2  0.993 -0.924   0.239   0.952 #>  3  0.496 -0.899  -0.175   1.07  #>  4  0.721 -1.78    0.192   0.338 #>  5 -0.305  1.87    0.0555 -1.42  #>  6 -1.91  -0.294   0.780  -0.145 #>  7 -0.787 -1.83    1.29    1.20  #>  8 -0.105 -1.57    0.550  -0.847 #>  9  1.15  -1.04    0.458   0.981 #> 10 -1.10   0.230   0.0335 -1.64  #> # ℹ 187 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>       cd45   cd38    cd34   cd19 cluster_id #>      <dbl>  <dbl>   <dbl>  <dbl> <chr>      #>  1 -1.10    1.37   0.985  -0.337 z          #>  2  1.27   -0.254  0.0116  0.160 j          #>  3 -0.138   0.143 -0.261  -1.14  s          #>  4 -0.854   0.238 -0.0904 -0.652 h          #>  5 -1.66   -2.75  -1.23   -0.643 j          #>  6  0.0253 -0.731 -1.70    0.838 i          #>  7 -0.503  -0.227  0.0556 -1.58  x          #>  8 -1.19   -0.381 -0.152   0.998 k          #>  9  2.13    0.707  1.31    1.23  f          #> 10 -1.69   -1.39   0.192  -2.33  l          #> # ℹ 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 88 × 5 #>      cd45    cd38    cd34    cd19 cluster_id #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1  0.438  0.656  -0.249  -0.800  a          #>  2 -0.788 -0.762   0.0527  1.45   a          #>  3  0.294  0.832   1.39   -0.409  a          #>  4 -0.463  0.731   0.983   0.330  b          #>  5  1.25   0.0331 -0.596   0.969  b          #>  6 -1.17   0.627  -0.532  -0.0785 c          #>  7 -0.951 -0.933   0.684  -2.12   c          #>  8 -1.61  -0.0715  0.786   0.156  c          #>  9  0.700 -1.62   -0.459   0.417  d          #> 10  0.686 -0.755  -0.863  -0.609  d          #> # ℹ 78 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation CyTOF data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>       cd45    cd38   cd34     cd19 .spade_density #>      <dbl>   <dbl>  <dbl>    <dbl>          <dbl> #>  1  0.897   0.232   0.953 -1.90                 1 #>  2 -1.27   -0.0320 -1.15   0.414                1 #>  3 -0.278  -0.866   0.527 -0.403                1 #>  4  0.593  -0.546  -0.716 -2.19                 1 #>  5 -0.127  -0.974   0.352  0.414                1 #>  6  0.106  -1.84   -1.28  -1.26                 1 #>  7 -0.778  -1.29   -0.328 -0.629                1 #>  8  0.209  -0.332   1.32   1.82                 1 #>  9 -0.0923  1.32   -0.615 -0.00432              1 #> 10  1.25    1.16   -2.04  -0.682                1 #> # ℹ 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>       cd45    cd38   cd34     cd19 .spade_density #>      <dbl>   <dbl>  <dbl>    <dbl>          <dbl> #>  1  0.897   0.232   0.953 -1.90               0.4 #>  2 -1.27   -0.0320 -1.15   0.414              1   #>  3 -0.278  -0.866   0.527 -0.403              1   #>  4  0.593  -0.546  -0.716 -2.19               0.4 #>  5 -0.127  -0.974   0.352  0.414              1   #>  6  0.106  -1.84   -1.28  -1.26               0.2 #>  7 -0.778  -1.29   -0.328 -0.629              1   #>  8  0.209  -0.332   1.32   1.82               0.4 #>  9 -0.0923  1.32   -0.615 -0.00432            1   #> 10  1.25    1.16   -2.04  -0.682              0.2 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby         0.146      -0.491       0.249      0.205       0.340  #> 2 mario         0.937       0.529      -0.415      0.0707      0.0800 #> # ℹ 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, `cd19@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, `cd19@c_ct` <dbl>, #> #   `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, `cd19@d_ct` <dbl>, #> #   `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, `cd19@e_ct` <dbl>, #> #   `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, `cd19@f_ct` <dbl>, #> #   `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, `cd19@g_ct` <dbl>, #> #   `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, `cd34@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel  values #>    <chr>   <chr>      <chr>     <dbl> #>  1 kirby   a          cd45     0.146  #>  2 kirby   a          cd38    -0.491  #>  3 kirby   a          cd34     0.249  #>  4 kirby   a          cd19     0.205  #>  5 kirby   b          cd45     0.340  #>  6 kirby   b          cd38    -0.204  #>  7 kirby   b          cd34     0.0914 #>  8 kirby   b          cd19    -0.137  #>  9 kirby   c          cd45    -0.0570 #> 10 kirby   c          cd38     0.0253 #> # ℹ 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@t_emd` `stim_cd38@t_emd` `stim_cd34@t_emd` #>   <chr>               <dbl>             <dbl>             <dbl> #> 1 mario                10                16                7.45 #> 2 kirby                11.4              25.8              6.60 #> # ℹ 101 more variables: `stim_cd19@t_emd` <dbl>, `stim_cd45@w_emd` <dbl>, #> #   `stim_cd38@w_emd` <dbl>, `stim_cd34@w_emd` <dbl>, `stim_cd19@w_emd` <dbl>, #> #   `stim_cd45@f_emd` <dbl>, `stim_cd38@f_emd` <dbl>, `stim_cd34@f_emd` <dbl>, #> #   `stim_cd19@f_emd` <dbl>, `stim_cd45@x_emd` <dbl>, `stim_cd38@x_emd` <dbl>, #> #   `stim_cd34@x_emd` <dbl>, `stim_cd19@x_emd` <dbl>, `stim_cd45@n_emd` <dbl>, #> #   `stim_cd38@n_emd` <dbl>, `stim_cd34@n_emd` <dbl>, `stim_cd19@n_emd` <dbl>, #> #   `stim_cd45@g_emd` <dbl>, `stim_cd38@g_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 t          cd45   stim         7.63 #>  2 t          cd38   stim        18.0  #>  3 t          cd34   stim         5.74 #>  4 t          cd19   stim         4.33 #>  5 w          cd45   stim         6.08 #>  6 w          cd38   stim         4.71 #>  7 w          cd34   stim         6.99 #>  8 w          cd19   stim         5.43 #>  9 f          cd45   stim         5.24 #> 10 f          cd38   stim         4.82 #> # ℹ 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0409   0.0345   0.0366   0.0259   0.0474   0.0517   0.0366 #> 2 mario     0.0317   0.0373   0.0410   0.0392   0.0373   0.0448   0.0392 #> # ℹ 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0409   0.0345   0.0366   0.0259   0.0474   0.0517   0.0366 #> 2 mario     0.0317   0.0373   0.0410   0.0392   0.0373   0.0448   0.0392 #> # ℹ 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@f_jsd` `stim_cd38@f_jsd` `stim_cd34@f_jsd` #>   <chr>               <dbl>             <dbl>             <dbl> #> 1 mario              NA                NA                NA     #> 2 kirby               0.913             0.702             0.707 #> # ℹ 101 more variables: `stim_cd19@f_jsd` <dbl>, `stim_cd45@e_jsd` <dbl>, #> #   `stim_cd38@e_jsd` <dbl>, `stim_cd34@e_jsd` <dbl>, `stim_cd19@e_jsd` <dbl>, #> #   `stim_cd45@t_jsd` <dbl>, `stim_cd38@t_jsd` <dbl>, `stim_cd34@t_jsd` <dbl>, #> #   `stim_cd19@t_jsd` <dbl>, `stim_cd45@g_jsd` <dbl>, `stim_cd38@g_jsd` <dbl>, #> #   `stim_cd34@g_jsd` <dbl>, `stim_cd19@g_jsd` <dbl>, `stim_cd45@x_jsd` <dbl>, #> #   `stim_cd38@x_jsd` <dbl>, `stim_cd34@x_jsd` <dbl>, `stim_cd19@x_jsd` <dbl>, #> #   `stim_cd45@i_jsd` <dbl>, `stim_cd38@i_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   jsd #>    <chr>      <chr>  <chr>       <dbl> #>  1 f          cd45   stim        0.826 #>  2 f          cd38   stim        0.734 #>  3 f          cd34   stim        0.663 #>  4 f          cd19   stim        0.810 #>  5 e          cd45   stim        0.681 #>  6 e          cd38   stim        0.714 #>  7 e          cd34   stim        0.663 #>  8 e          cd19   stim        0.742 #>  9 t          cd45   stim        0.747 #> 10 t          cd38   stim        0.598 #> # ℹ 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0398   0.0517   0.0338   0.0298   0.0398   0.0417   0.0278 #> 2 mario     0.0322   0.0443   0.0322   0.0362   0.0423   0.0503   0.0382 #> # ℹ 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0398 #>  2 kirby   b          0.0517 #>  3 kirby   c          0.0338 #>  4 kirby   d          0.0298 #>  5 kirby   e          0.0398 #>  6 kirby   f          0.0417 #>  7 kirby   g          0.0278 #>  8 kirby   h          0.0417 #>  9 kirby   i          0.0358 #> 10 kirby   j          0.0258 #> # ℹ 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_threshold` `cd34@a_threshold` #>   <chr>                <dbl>              <dbl>              <dbl> #> 1 kirby                0.174              0.130              0.130 #> 2 mario                0                  0.211              0     #> # ℹ 101 more variables: `cd19@a_threshold` <dbl>, `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0.174  #>  2 kirby   a          cd38    0.130  #>  3 kirby   a          cd34    0.130  #>  4 kirby   a          cd19    0.174  #>  5 kirby   b          cd45    0.0588 #>  6 kirby   b          cd38    0.118  #>  7 kirby   b          cd34    0.235  #>  8 kirby   b          cd19    0.176  #>  9 kirby   c          cd45    0.0667 #> 10 kirby   c          cd38    0      #> # ℹ 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   rsplit_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `rsplit_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"Find k-nearest neighbors cell CyTOF dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents CyTOF measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional arguments pass RANN::nn2","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  558  364  115  645   90  349   62  810  105   436 #>    [2,]  230  687  253  435  365  677  358  135  156    20 #>    [3,]  583  584  815  122  712   66  470   84  112   452 #>    [4,]  735  782  687  617  135  435  232  833  246   677 #>    [5,]  394  307   53  254  285  681  119  902  235   371 #>    [6,]  250  365    2  635  974  968  479  156   59   354 #>    [7,]  300  716  614  643  771  805  944  819  121   309 #>    [8,]  159  274  141   28  696  430  686  650  713   444 #>    [9,]  721  213  798  215  702   29  359  305  576   841 #>   [10,]  265  223   39  442  893  387  153  531  388   946 #>   [11,]  901  754   42  261  328  466  956  700  719   948 #>   [12,]  548  929  780  938  125  844  356  378  615   838 #>   [13,]  539  331  168  739  458  978  573  234  302   169 #>   [14,]  818   23  999  779  342  303  658  450  299   914 #>   [15,]  364  400  920  297   62  912  997  514  748   322 #>   [16,]  536  549  169  881  533  526   87  150  682   434 #>   [17,]  820  492  808  777  136  939  504  181  663   885 #>   [18,]  908  943  864  447  730  611   80  787  916   967 #>   [19,]  475   85  542  375  115  575  723  613  148   581 #>   [20,]  365  246    2  974  112  498  253    6  230   687 #>   [21,]  705  951  450   86  658  321  610  619  847   562 #>   [22,]  814  630  400  997  767  932  795  257  615   912 #>   [23,]  999  299   14  684  113  818  825  303  658   203 #>   [24,]  215  831  293  890  986  715  366  479   29   251 #>   [25,]  559  538  890  215   79  831    9  841  755   117 #>   [26,]  290   50  503  581  183  375  186   62  284   322 #>   [27,]   68   35  233  741  283  445   48  569  675   640 #>   [28,]  383    8  686  159  537  611  141  232  278   618 #>   [29,]  702  215  416  989  841   31  291  293  359    24 #>   [30,]  301  736  229  720  207  420  757  722  860   228 #>   [31,]  989  377  416  411  752  402   29  366  359   702 #>   [32,]  656  249  499  764  692  620  984  450   14   303 #>   [33,]  729   95  105  793  645  974  479  635   52   566 #>   [34,]  369  191  149  928  329  921  689  650  351   333 #>   [35,]  233   68   27  450  283  806  396  804  569   332 #>   [36,]  930  941  632  862   97  934  909  745  985   704 #>   [37,]   97  934  885  660  604  862  632  401  640   851 #>   [38,]  751  893  859  948  719  593   42  391  946   901 #>   [39,]  481  545  153  767  455  500  814  395   10   442 #>   [40,]  347   71  422  305  776  368  750  359  117   429 #>   [41,]  565  639  425  217  553   83  725  549   87   698 #>   [42,]  948  261  719  901  466  893   11  727   77   700 #>   [43,]  918  234  990  655  965  796  113  774  871   299 #>   [44,]  451  659  688  612  155  438   98  847   56   667 #>   [45,]  936  147   60  525  971  622  913  776  102   993 #>   [46,]  830  343  530  316  194  904  111  376  273   510 #>   [47,]  432  838  461  788  865  725  526  425   41   356 #>   [48,]  605   69  675  955  445  667  741  155  392    27 #>   [49,]  738  676  443  398  824  543  641  137  279   138 #>   [50,]  290   26  503  322   62  810 1000  798  911   186 #>   [51,]  867  753  489  106  427  910  166  935  459   424 #>   [52,]  105  448  981  870  137   58  365  468  974   156 #>   [53,]  307  133  210    5  154  384  394  235  285   681 #>   [54,]  278  424  141  445  459  985  427  537  806   605 #>   [55,]  977  235  281  766  254  724  119    5  134    53 #>   [56,]  996  759  659   78  688  306  747  544  703    98 #>   [57,]  326  613  666  142  756  540  535  772  699   216 #>   [58,]  837  981   52  870  773  468  137  105  629   309 #>   [59,]  731  208  882  653    6  365   52  590   63   968 #>   [60,]  525  971  350  936   45  913  622  758  660   917 #>   [61,]  594  183  453   87  408  698  549  565  553    94 #>   [62,]  322  810   50  503  364   15   26  186    1   115 #>   [63,]  288  882  164  590  550  138  824  543  519   279 #>   [64,]  691  701  507  532  606  179  482  103  643   607 #>   [65,]  190  939  205  126   99   17  579  476  181   820 #>   [66,]  872  470   84  944  771  253  122  687  300   996 #>   [67,]  751  946  202  763   38  393  593  599  859   726 #>   [68,]   35   27  569  233  806  445  980  454  741   283 #>   [69,]  605   48  968  695  994  675  501  398  335   647 #>   [70,]  162  684  536  171  774  573  568  302  169   528 #>   [71,]  618  707  523  232   40  750  603  347  117   305 #>   [72,]  463  922  721  213  226  576    9  889  264   108 #>   [73,]  502  512  732  346  443  685  946  382  193   245 #>   [74,]  397  127  865  170  624  818  825  661  779   350 #>   [75,]  442  812  954  298  770  388  455  395  158   625 #>   [76,]  273  161  275  257   93  598  912  800  762   251 #>   [77,]  223   42  380  621  956  428  901  948  727   261 #>   [78,]  703  659   56  155  996  306  688  696  667   141 #>   [79,]  538  841  559   25  755  798  635  967  215   817 #>   [80,]  916   18  943  787  908  730  166  447  489   191 #>   [81,]  950  743  366  572  258  255  752  762  586   513 #>   [82,]  182  852  493  987  849  123  792  414  318   673 #>   [83,]  639  292   87  565  553  425   41  915  453   304 #>   [84,]   66  740  583  872  112  199  247  753  996   122 #>   [85,]  542  407   19   50  115  475  755    1   62   558 #>   [86,]   21  321  619  778  658  949  490  610  705   951 #>   [87,]   83  549  453   61  553  565   94  304  292    41 #>   [88,]  727  700  719  948  897  951  728  956  261    42 #>   [89,]  372  947  883  490  931  562  897  527  963   951 #>   [90,]    1  558  645  575  364  436  799  349  115   514 #>   [91,]  661  734  522  758  185  244  913  239  794   385 #>   [92,]  850  238  286  812  495  803  770  899  760   465 #>   [93,]  912  598  275  257  273  161  251  997  400   762 #>   [94,]  453  976  902  434  648  683  292  437  308   836 #>   [95,]   33  635  479  729  652  196  715  890  440   864 #>   [96,]  423  260  139  628  477  631  146  497  330   709 #>   [97,]  934  632  862   37  129  102   36  239  604   851 #>   [98,]  438  403   44  139  747   56  451  941  423   659 #>   [99,]  237  953  190   65  765  181  130  350  579   796 #>  [100,]  848  116  262  360  788  865  397   47   74   432 #>  [101,]  895  699  857  467  768  772  629  773  666   142 #>  [102,]  239  913  429  296  347  776   97  985  368   758 #>  [103,]  606  532  627   64  668  179  497  567  544   187 #>  [104,]  120  176  979  457  651  177  678  610  244   588 #>  [105,]   52  468  448  729  870   33  156  974  810   349 #>  [106,]   51  907  927  867  157  753  489  910  935   218 #>  [107,]  932  193  929  615  418  762  630  600  994   763 #>  [108,]  226  264  183  503  408  798  413  594  698    61 #>  [109,]  678  979  966  218  177  189  120  711  104   563 #>  [110,]  579  192  497  631  204  390  146   96  260   173 #>  [111,]  510  904  530  626  432  262  548  461  460    47 #>  [112,]  583  498   84   20  246  584   66    4  782     3 #>  [113,]  684   23  299  573  965  774  162  171  999   765 #>  [114,]  533  936  622  845  525   45  350  660   60   460 #>  [115,]  558    1  857   26  375   62  364  436   50   810 #>  [116,]  995  263  100  884  432  397  865  788  240   360 #>  [117,]  750   71   40  232   25  864  603  618  538   596 #>  [118,]  637  764  966  328  843  958  599  656  109   859 #>  [119,]  254    5  902  285  506  134  536  169  235   174 #>  [120,]  104  979  678  176  651  610  457  177  109   438 #>  [121,]  228  420  435  784  819  805  677  135  474   229 #>  [122,]  872  771  300  944   66    3  247  199   84   318 #>  [123,]  662  987  710  673  182  952  761  158  942    82 #>  [124,]  240  576  889  460  305  317  993  873  370   936 #>  [125,]  980  356  657  838  332  763  233  586  917   283 #>  [126,]  336  972  663  370  476   65  851  945  181   190 #>  [127,]  170  865   74  661  669  980  917  263   60   825 #>  [128,]  937  534  413  411  840  675  416  486  976   284 #>  [129,]  851  808  632   97  151  492  259  663  786   181 #>  [130,]  237  397   99  744  624  765   74  796  965   113 #>  [131,]  145  670  395  272  279  738  706  388  138   543 #>  [132,]  422  160  263   40  669  913   45  776  596   839 #>  [133,]   53  307  760    5  285  235  384  394  210   970 #>  [134,]  119  235  168  458  353  285  169  970    5   174 #>  [135,]  687  435  358  696  713  230  537  677  121     2 #>  [136,]  401  492  885  808  181  604  874  660   17   858 #>  [137,]  138  448  279   52  738   49  826  799   58   824 #>  [138,]  137  279  288  738   63  543   49  799  824   670 #>  [139,]  423   96  260  330   98  477  631  628  403   179 #>  [140,]  551  320  983  725  742  739   47  844  780   838 #>  [141,]  459  444    8  427  278  703  696  537   78    54 #>  [142,]  772  540  467  326  756  101  863  216  895   535 #>  [143,]  557  608  585  166  927  834  867  195  653   491 #>  [144,]  203  900  892  693  589  499  739  393  378   551 #>  [145,]  395  131  272  670  500   39  388  442  799    75 #>  [146,]  861   96  260  423  588  139  631  628  497   192 #>  [147,]  776  936   45  971  945  913  305  102  663   347 #>  [148,]  723  252  542  821   19  613  282  535  891   409 #>  [149,]  650  928  351   34  794  333  444  522  921   686 #>  [150,]  526   16  682  163  725  549  217   41   87   626 #>  [151,]  259  757  477  784  129  786  632  858  430   851 #>  [152,]  665  188  609  651  861  871   86  146  321   778 #>  [153,]  363  574   39  481  455  348  600  418  310   571 #>  [154,]  307  697  311  783  266  210  219   53  394   775 #>  [155,]  445  703  659  612   78  704  667  688   44    48 #>  [156,]  817  524  937 1000  578  468  315  277  870   358 #>  [157,]  653  222  882  519  106  731  164  935  927    51 #>  [158,]  428  298  388  625  789  662   75  931  956   442 #>  [159,]  862  985    8  713  934  537   97   28  430   696 #>  [160,]  132  258  669  422  596  654  248  940  227   296 #>  [161,]  762  950  251  257  598  366   93  752  513    81 #>  [162,]   70  684  171  573  299  568  212  536  774   547 #>  [163,]  682  404  150  626  281   16  526  169  953   549 #>  [164,]   63  519  222  288  653  550  590  882  157   824 #>  [165,]  933  621  380   77  901   11  672  710   42   754 #>  [166,]  867  943  489  143   51  106  731  427  195   753 #>  [167,]  556  646  563  385  654  966  664  711  898   454 #>  [168,]  169  134  539  774  458  536  119   16   13   163 #>  [169,]  536   16  774  168  119  881   70  539  254   434 #>  [170,]  127  865  980  669  917  661  332   74  825   342 #>  [171,]  573  684  162   70  739  589  212  536  299   774 #>  [172,]  286  760  785   92  465  133  964  970  850   775 #>  [173,]  192  861  146  497  110  701  668   96  990   260 #>  [174,]  269  353  642  488  975  592  119  362  469   504 #>  [175,]  829  746  896  874  835  644  506  880  592   469 #>  [176,]  244  185  104  352  342  120  588  651  779   591 #>  [177,]  457  979  218  104  109  444  241  149  120   385 #>  [178,]  602  341  899  426  991  314  629  773  272   792 #>  [179,]  643  716  567  532  139  477  423   96  878   552 #>  [180,]  919  878  381  567  855  274  184  473  809   430 #>  [181,]  579  401  136  808  492  663  765   17  129   885 #>  [182,]  987   82  123  792  341  832  673  493  627   789 #>  [183,]   61  503  108  453  748   26  408  413  290   594 #>  [184,]  809  241  919  381  306  878  628  180  274   457 #>  [185,]   91  244  734  176  794  661  276  385  522   758 #>  [186,]  284  277  315  674  503 1000  337  517  937   810 #>  [187,]  856  595  103  199  875  627  544  247  606   439 #>  [188,]  609  152  665  923  319  778  554  694  822   321 #>  [189,]  491  664  711  218  556  966  109  927  325   907 #>  [190,]   65  579   99  126  181  939  476  205  765   237 #>  [191,]  787  921   34  369  268  383  333  686  928   149 #>  [192,]  173  110  497  146  861  628  260   96  668   423 #>  [193,]  929  107  932  763  946  732  762  938  630   615 #>  [194,]  376  800  530  904  273  316  257  217  548   304 #>  [195,]  834  585  143  557  652  572  166  743  513    59 #>  [196,]   95  967  730   33  246  367  498  635   18   974 #>  [197,]  439  856  241  906  457  177  104  184  373   809 #>  [198,]  766  316  217  748  581  408  530   61  281   922 #>  [199,]   84  247  122  872   66  470  327    3  373   759 #>  [200,]  785  801  521  863  988  465  289  691  970   998 #>  [201,]  906  910  703  424  695  218  334   78  569   753 #>  [202,]  421   67  732  816  193  946  340  929  938   751 #>  [203,]  303  999  900  144  589  499  693  742   23   825 #>  [204,]  390  638  794  351  631  628  734  430  110   869 #>  [205,]  476  231   65  939  925  972  190  126  777    17 #>  [206,]  822  665  152  188  104  120  591  439  651   678 #>  [207,]  736  860  469  242  228   30  757  720  797   301 #>  [208,]   59  590  731   63  355  382  512  653  882   585 #>  [209,]  380  621  519  164  222  933  676  391  288   550 #>  [210,]   53  307  154  601  783    5  133  775  384   697 #>  [211,]  582  446  876  608  834  516  572  491  557   386 #>  [212,]  963  568  527  589  671  434  883  410  162   171 #>  [213,]  721    9   72  317  293  108  463  798  226   702 #>  [214,]  471  804  769  396  745  604  433  483  374   660 #>  [215,]   29  831  293   24  702  890    9  841   25   559 #>  [216,]  326  756  815  323  142  540  357  771  679   470 #>  [217,]   41  304  565   87  639  150  530   83  549   725 #>  [218,]  979  201  906  177  907  325  189  459  109   424 #>  [219,]  311  571  394  697  313  154  954  455  212   307 #>  [220,]  960  405  633  969  441  422  191  928   40   132 #>  [221,]  577  641  824  673  570  543  882  398  294   935 #>  [222,]  653  157  519  164  927  585  882  731  143   106 #>  [223,]   77  265   10   42  948  388  893  298  442   727 #>  [224,]  555  401  588  804  330  604  745  758  136   909 #>  [225,]  511  800  376   15  733  273  514  297  194    22 #>  [226,]  264  108  594  698  798  463  305  922   72   213 #>  [227,]  160  884  258  752  510  548  596  132  270   959 #>  [228,]  121  207  736  784   30  716  229  420  435   860 #>  [229,]  736   30  420  301  835  486  474  896  784   746 #>  [230,]  687    2  253  435  135  696  819  537  677   358 #>  [231,]  205  975  476  925  827  504  813  353  520   939 #>  [232,]  618  707   71  722  523   28  538    4  750   735 #>  [233,]   35  283   68   27  396  332  980  374  917   804 #>  [234,]   43  965  299  113  655  684  918  573  774   162 #>  [235,]    5   53  133  119  134  254  285  458  394   307 #>  [236,]  866  302  587  508  842  888  313  495  539   568 #>  [237,]  130   99  765  796  579  181  190  352  397   744 #>  [238,]  850   92  812  803  770  495   75  158  888   428 #>  [239,]  102  429  913  296  985  347   97  862  758   776 #>  [240,]  124  460  317  993  576  305  936  884   45   889 #>  [241,]  184  306  809  444  381  919  457  996   98    56 #>  [242,]  860  207  911  720  362  797  415  469  301    30 #>  [243,]  449  717  485  523  905  894  869  707  271   791 #>  [244,]  661  176  342  185   91  758  734  522  555   563 #>  [245,]  608  386  946  599   38  751  557   73  502   927 #>  [246,]  498   20  617  967  584  112  833  730  735     4 #>  [247,]  759  996  872  875  544   56  740  306  747    84 #>  [248,]  312  255  422  611  447  596  160  529  743   654 #>  [249,]  499  897   32  984  372  947  656  728  620   700 #>  [250,]    6  354  479  715  578  635  156  968    2   537 #>  [251,]  366  161  950  256   24  513  752  598  762   293 #>  [252,]  409  148  488  988  821  723  813  353  975   231 #>  [253,]  677  435  230  419  687    2  944  981  135   121 #>  [254,]  902    5  119  434  977  394  536   94  681   880 #>  [255,]  743  986   81  366  248   24  596  950  312   572 #>  [256,]  293  251  831  275  366   24  598  890  215   273 #>  [257,]  598  161  912  762   93  997  273  708  929   615 #>  [258,]  586  752  160  940   81  669  950  377  356   366 #>  [259,]  151  784  757  477  632  934  129  858  862   430 #>  [260,]  423   96  628  631  139  477  146  330  497    98 #>  [261,]  466   42  948  727  956  719   88  700   11   901 #>  [262,]  848  904  548  111  100   12   47  844  140   725 #>  [263,]  971  132  913   60  127   45  669  865  936    91 #>  [264,]  226  108  798  415  305  362  889  301  291   702 #>  [265,]  223   10  931  897  372  883  574  442  984   947 #>  [266,]  775  154  770  338  697  783  313  478  219   561 #>  [267,]  677  435  817  860 1000  121   30  301  911   358 #>  [268,]  383  921  686  782  790  191    4   28  623   787 #>  [269,]  174  642  488  469  285  353  975  988  362   720 #>  [270,]  959  345  227  441  596  884  248  160  529   406 #>  [271,]  869  855  782  623  894  485  905  523  686   243 #>  [272,]  670  991  799  625  500  279  426  145  348   992 #>  [273,]  275  598   93  257  376  912   76  256  161   800 #>  [274,]  430    8  696  713  159  930  306  862  259    36 #>  [275,]  273   93  256  912  598  251  161   76  257   297 #>  [276,]  185  176  385   91  839  244  591  149  734   457 #>  [277,]  315  517  284  186  524  674 1000  937  840   870 #>  [278,]   54  141  537  985  445  459  424  605  427    28 #>  [279,]  138  670  543  288  137  738  799  272  824    49 #>  [280,]  515  564  566  645  590  826  382  484  685   793 #>  [281,]  163  150   16   55   61  682  922  198  594   404 #>  [282,]  723  560  886  580  148  581  541  922  198    72 #>  [283,]  233  657  728  671  562   35  705   27  332   450 #>  [284,]  186  277  674 1000  315  937  517  503  337   524 #>  [285,]    5  521  681  119  133  371  384  506   53   902 #>  [286,]  964  760  465  172  899   92  785  133  863   384 #>  [287,]  327  679  877  323  470  815  567  855  584   833 #>  [288,]   63  543  824  279  138  550  519  738  676   164 #>  [289,]  357  801  634  200  606  679  607  216   64   532 #>  [290,]   26   50  503  911  720  284  186  415  183   242 #>  [291,]  416  429  534   37  934  359  985   29  128   702 #>  [292,]  437   83  308  795   94  418  915  453  976   434 #>  [293,]  831  215  256   24  890   29  702  989  251   213 #>  [294,]  695  577  335  819  398  667  641   69  605   570 #>  [295,]  849  318  550   63  781   58  837  138  288   279 #>  [296,]  940  917  239  102  429  669  913  985  377    45 #>  [297,]   15   62  364  912  316  275  400  273  322   256 #>  [298,]  388  158  442  625  428   75  789  931  363   954 #>  [299,]   23  684  162  113  171  573  999  589   14    70 #>  [300,]  944  771    7  872  643  819  122  614  309   716 #>  [301,]   30  720  229  736  722  358  242  420  860   207 #>  [302,]  866  236  842  508  539   70  162  587  568   458 #>  [303,]  999  332  203  692  914  818  825  656   23   828 #>  [304,]  962   83   87  748  217  639  565  708  292    41 #>  [305,]  359  889  576  993  147   45  124  936  264   291 #>  [306,]  996  241   78   56  444  809  759  703  274   696 #>  [307,]   53  154    5  394  210  681  371  384  133   311 #>  [308,]  683  310  648  433  437  292   94  836  471   418 #>  [309,]  792  629  379  805  768  981  819  837  524   944 #>  [310,]  683  571  308  879  392  648  963  363  574   527 #>  [311,]  219  571  697  954  154  394  455  310  313   683 #>  [312,]  248  737  447  529  255  743  611  572  446   986 #>  [313,]  219  495  311  394  954  587  770  236  154   494 #>  [314,]  991  426  992  602  636  348  649  456  783   384 #>  [315,]  277  517  524  284  674  186 1000  937  870   335 #>  [316,]  376  198  530  408  217  708  213  297  256   510 #>  [317,]  993  721  213  240  124  359  510  576  305     9 #>  [318,]  837  577  570  849   82  221  122   58  792   852 #>  [319,]  620  822  321  665  249   32  609  372  499    89 #>  [320,]  140  551  983  725  739  742  573  171  589   410 #>  [321,]   86  620   21  705  778  490  450  951  658   619 #>  [322,]   62  810  503   50  798  755  108  702  186   290 #>  [323,]  815  833  584  470  287  216   66  326  771   253 #>  [324,]  907  106  753  373  197  489  906   51   84   910 #>  [325,]  454  664  569  898  424   68  218  966  979   719 #>  [326,]  756  142  216  540   57  772  323  815  535   833 #>  [327,]  567  287  878  180  470  855  679  473  919   179 #>  [328,]   11  901  764   32  620  249  859  678  754   487 #>  [329,]  369   34  689  373  191  473  381  787  921   919 #>  [330,]  604  745  631  909  941  139  224  632  769   804 #>  [331,]  846  458   13  539  168  866  842  235  302   134 #>  [332,]  692  303  233  898  980  283   35  125  450    68 #>  [333,]  427  459  444  489  921  141  383  650  149   191 #>  [334,]  667  438  659  847  155  610  569  703   44    48 #>  [335,]  524  315  517  277  294  870  448  398  675    69 #>  [336,]  370  126  945  663  972  868  873  889  905   147 #>  [337,]  644  186  674  371  284  517  315  277  456   681 #>  [338,]  478  266  494  531  561  770  219  154  775   313 #>  [339,]  616  164  157  222  355  653  550   63  209   882 #>  [340,]  780  844  938  378  630  393  615  800  202   929 #>  [341,]  792  426  602  625  991  789  987  832  992   629 #>  [342,]  779  244  563  661  176   14  170  898  818   385 #>  [343,]   46  904   76  548  194  830  273  530  111   227 #>  [344,]   82  849  781  123  616  493  414  852  710   662 #>  [345,]  959  802  270  406  117  576  721  750  317   603 #>  [346,]  512  443  968  501  685  690  826  502   49   994 #>  [347,]  368  776  102  429  239   40  623  159  913   862 #>  [348,]  992  991  426  455  571  500  314  153  310   697 #>  [349,]  448  517  277  315  870  186  810  105    1   284 #>  [350,]  845   60  971  525  660  936  114  622  533   865 #>  [351,]  650  794  149  368  623  430  686    8  390   204 #>  [352,]  591  779  176  244  237  555  588  185  342   224 #>  [353,]  975  174  488  504  269  813  988  642  134   119 #>  [354,]  715  690  578  250  479  501   24  968  729     6 #>  [355,]  208   59  590  731  585  164  653   63  793   195 #>  [356,]  838  377  461  125  940  980  669  917  402   258 #>  [357,]  634  289  216  924  801  756  679  540  326   607 #>  [358,]  537  135  534  435  937  301  156    2   30   677 #>  [359,]  305  993  416  989  291  596   29   45   31   429 #>  [360,]  397  116  130  100  624  788   74  744   99   995 #>  [361,]  926  854  712  852    3  122  199  414   82   318 #>  [362,]  642  797  242  720  415  469  592  207  757   860 #>  [363,]  153  574  392  955  879  310  789  298  992    48 #>  [364,]   15    1  920   62  400  558  436  514  349   115 #>  [365,]  974    2   20    6  981   52  230  253  419   294 #>  [366,]  752  950  251   81  989   24   31  255  161   762 #>  [367,]  974  793   58   33  419  837  468  981  105   365 #>  [368,]  347  776  623  102  351  239  794  638  159   913 #>  [369,]   34  191  329  689  921  381  149  787  351   928 #>  [370,]  336  873  126  945  663  147  462  889  124   868 #>  [371,]  681  644  384  636  456  337  746  902  880   307 #>  [372,]   89  931  897  947  249  883  265  727  984   499 #>  [373,]  473  381  919  241  689  184  329  180  809   199 #>  [374,]  640  396  660  471  622  525  214  836  233   433 #>  [375,]  581   26  115  290  857   50  183  503  558   269 #>  [376,]  194  800  316  273  530  257  598  708  997   217 #>  [377,]   31  402  989  356  940  411  416  752  461   296 #>  [378,]  393  780  938  844  340  763  693  983  657    12 #>  [379,]  805  399  649  474  309  832  955  992  426   524 #>  [380,]  621   77  710  165  209  223   42  933  952   901 #>  [381,]  919  180  184  921  241  444  306  878  274   473 #>  [382,]  566  512  685  652  826  513  502  484  346   208 #>  [383,]  686  921  268   28    8  650  623  611  782   333 #>  [384,]  456  371  636  681  644  307  314  285   53   649 #>  [385,]  563  522  654  167   91  806  556  244  185   342 #>  [386,]  245  502  608  834  572  516  973  446  513   193 #>  [387,]  853   10  531  545  340  410  265  693  597   892 #>  [388,]  298  442  625  158   75  223  153  363  272   455 #>  [389,]  891  505  542  407  196   85  967  518   79   538 #>  [390,]  204  638  631  794  129  632  430  734  477   351 #>  [391,]   38  751  901  859  893   42  621  948   77    67 #>  [392,]  879  955  399  483  847  310   48  363  486   667 #>  [393,]  378  780  844  938  340  763   67  144  480    12 #>  [394,]    5  307  219  311  880  154  313  254   53   681 #>  [395,]  145  442   75   39  272  455  481  531  500   388 #>  [396,]  640  804  374  214  660  233  471  745   35   741 #>  [397,]   74  130  624  360  350  865  237  127  116   788 #>  [398,]  641   49  824  335   69  294  221  738  543   695 #>  [399,]  955  379  392  474  805  832  879  667  483   688 #>  [400,]  997  920   15  912  364   22  708  349  748   767 #>  [401,]  136  660  604  885  181  808  492  224   37   129 #>  [402,]  377  416  622  698  425  976  411   31  639   640 #>  [403,]  747   98  451  544   44  807  139  438  507    56 #>  [404,]  163  281  682  168  150  626  169   16  526    55 #>  [405,]  441  220  960  633  959  969  270  345  117   750 #>  [406,]  240  802  884  124  345  317  959  576  995   721 #>  [407,]   85  755  559  542   79   50   62  890  831   322 #>  [408,]  565  698   61  413  108  748  708  639  183   453 #>  [409,]  988  924  488  200  998  821  546  827  521   785 #>  [410,]  978  853  212  724  589  494  693  739  219   437 #>  [411,]  128   31  741  534  377  402  416  989  690   640 #>  [412,]  462  873  114  594  868  663  533  881   17   370 #>  [413,]  976  128  416  453  408  937  186  836  698   284 #>  [414,]   82  852  182  627  987  123  875  807  493   662 #>  [415,]  642  362  242  264  797  720  290  911  798   108 #>  [416,]  702   31   29  989  402  291  413  359  411   377 #>  [417,]  646  516  887  726  828  586  446  167  599   556 #>  [418,]  795  915  600  292  437  932  630  840  308   615 #>  [419,]  468  677  253  981  974    2  267  435  817   365 #>  [420,]  229  474  121  486  805  835   30  524  736   937 #>  [421,]  202  816  732  946   10   67  751   73  814   340 #>  [422,]  132   40  347  160  248  429  596  368  102   654 #>  [423,]  260   96  628  139  631  477   98  809  497   330 #>  [424,]  647  994   54  201  968  695  278  325   69   569 #>  [425,]  553  639  565   41  838   83  402  549  533   976 #>  [426,]  991  992  314  348  341  602  629  768  379   625 #>  [427,]  459  333  489  141  444  753  867   51   54   278 #>  [428,]  158  298  956  662  931  710   77  388  761   727 #>  [429,]  102  239  985  296  347  291  159  862  913   359 #>  [430,]  274    8  159  151  259  623  351  862  713   390 #>  [431,]  892  844  387  340  853  393  144  780  978   378 #>  [432,]  461   47  865   45  525  936  993  838  533   460 #>  [433,]  471  836  648  683  308  483  214  769  486   835 #>  [434,]  648   94  536  880  683  433  254  902  308   292 #>  [435,]  677  135  687  253  230  121  358    2  267   228 #>  [436,]  514  920  558  364  115    1   90  714   15   400 #>  [437,]  292  795  767  308   94  418  683   83  453   571 #>  [438,]  610  334   98  659  909  451   44  155  941   745 #>  [439,]  197  856  104  120  487  906  942  875  241   544 #>  [440,]  982  986  652  890   24   95  251  256  831   275 #>  [441,]  405  220  960  969  270  959  633  132  422   884 #>  [442,]   75  388  298  395  455  954  265  158  531   223 #>  [443,]   49  676  738  346  647  398  994  946  512   824 #>  [444,]  459  141  427  306  333    8  241  703  650    78 #>  [445,]  605  741  155   48  704  703   27   68  985   806 #>  [446,]  582  211  572  516  529  417  608  386   81   586 #>  [447,]  312  611  737   18  864  248  908  255  743   943 #>  [448,]  349  870   52  335  137  315  501  517  277   105 #>  [449,]  243  485  735  523  707  717  617    4  464   791 #>  [450,]  705  658   21   35  951  283  233  610  321   562 #>  [451,]   44  847  619  403  438  949  659   98  747   688 #>  [452,]  583  584  112    3  815  470  287  833  323   498 #>  [453,]   94  976   61   87   83  902  413  183  553   836 #>  [454,]  325  664  898  569   68  692  593  556  599   966 #>  [455,]  954  697  571  481  348  500  311  153   39   992 #>  [456,]  644  649  384  636  371  746  314  337  681   805 #>  [457,]  177  104  241  184  979  444  176  120  149   185 #>  [458,]  539  866  394  235  302  134  236    5  119   331 #>  [459,]  427  444  141  333  489  278   54  753    8   703 #>  [460,]  240  124  114  993  936  432  462  533  873   698 #>  [461,]  432  356   47  838  377  402  993  425  510    41 #>  [462,]  873  412  868  370  460  922  114  682  336   124 #>  [463,]   72  922  721  576  226  889  213  873  264     9 #>  [464,]  791  485  790  717  271  243  782  449  855   617 #>  [465,]  964  863  801  286  899  607  200  785   92   467 #>  [466,]  261  948   42  647  719   88  700  727  893   569 #>  [467,]  629  101  768  895  772  142  309  699  792   773 #>  [468,]  981  870  419  817  156  524 1000  105  974    52 #>  [469,]  207  720  736  242  592  642  746  362  860   757 #>  [470,]  815  323   66  584  833  287  771  567  872   327 #>  [471,]  214  433  374  836  769  483  640  396  486   660 #>  [472,]  709  718  552  786  855  869  476  894  717   477 #>  [473,]  373  919  180  381  689  878  184  327  809   241 #>  [474,]  896  420  805  835  486  229  379  746  483   399 #>  [475,]   19  375  115   85  575  558  581  364  297   436 #>  [476,]  205  972  786  126  777   65  472  925  190   579 #>  [477,]  631  151   96  259  423  139  260  858  709   777 #>  [478,]  494  338  531  266  770  313  219  442  853    75 #>  [479,]  715  729  635  354  250   24  578    6  215   156 #>  [480,]  887  509  393  828  726  378   12  417   67   844 #>  [481,]   39  455  767  500  153  545  697  571  954   437 #>  [482,]  680  691  507  829  528  506  896  874  175   614 #>  [483,]  486  769  471  392  433  835  896  214  474   612 #>  [484,]  685  826  382  564  515   93  512  280  912   566 #>  [485,]  791  243  717  464  449  894  271  869  523   905 #>  [486,]  483  835  474  769  229  420  433  896  471   675 #>  [487,]  678  754   11  901  906  328  439  109  979   120 #>  [488,]  988  353  269  174  975  521  642  813  827   285 #>  [489,]  867  427  333   51  459  753  166  943  106   444 #>  [490,]  562   89  547  951  949   86   21  705  883   947 #>  [491,]  189  664  557  556  608  927  711  143  218   572 #>  [492,]  808  136  858  777  401  885  181   17  604   874 #>  [493,]  781   82  849  803  182  792  987  178  341   899 #>  [494,]  478  338  219  313  531  266  853  410  770   954 #>  [495,]  888  587  313  236  954  812  636  770   92   949 #>  [496,]  848  100  887  646  417  116  227  884  839   160 #>  [497,]  628  668   96  260  423  709  532  110  192   146 #>  [498,]  246  617  730  112  967   20  583  584  735   833 #>  [499,]  249  984   32  897  947  900  656  728  372   203 #>  [500,]  455  348  481  697  783   39  272  767  991   571 #>  [501,]  690  578  968  840   69  448  675  335  994   354 #>  [502,]   73  512  732  346  382  513  386  685  193   443 #>  [503,]  290   26  186   50  322  284  183  108  413    62 #>  [504,]  820  939   17  353  975  174  592  777  881   680 #>  [505,]  891  580  449  603  538  707   79  415  798   523 #>  [506,]  880  175  829  119  285  394  648  680  681   636 #>  [507,]  482  691  403   64  861  146  451  614  139   680 #>  [508,]  866  842  302  236  528  680  506   70  539   970 #>  [509,]  480  844   12  393  973  887  780  378  262   848 #>  [510,]  111  461  993  317  432  548  460   41  904   240 #>  [511,]  714  733  514  962  561  225  436  920  545   304 #>  [512,]   73  502  346  685  382  826  443  732  590   738 #>  [513,]  251  950  715  743   81  354  382  762  161   346 #>  [514,]  436  920  364  511   15  714  400  748  558   115 #>  [515,]  564  280  590  484  566  382  685  826  512   208 #>  [516,]  958  417  582  446  386  876  599  726  211   245 #>  [517,]  315  277  674  524  870  284  335  186 1000   337 #>  [518,]  982  440  541  559  890   25  407  986  345   830 #>  [519,]  824  676  653  288  222  543  882  164  221   641 #>  [520,]  925  709  532  472  668  552  546  827  718   476 #>  [521,]  285  988  970  488  175  506  174  269  200   998 #>  [522,]  806   91  385  654  239  661  758  563  244   102 #>  [523,]  707   71  905  618  603  232  623  243  449   722 #>  [524,]  517  315  870  277  674  335  156 1000  420   937 #>  [525,]   60  622  660   45  936  374  917  350  640   971 #>  [526,]  533  788  682  150  549   47  845   16  725   626 #>  [527,]  963  883  562  671  947  574  212  568  547   951 #>  [528,]  680  508  482  820   70  506  874  871  136   492 #>  [529,]  312  248  446  737  160  255  582  211  749   646 #>  [530,]  194  904  376  316  217  111  510  198   46   548 #>  [531,]  478  395  442  494  338  597  545   39  481   387 #>  [532,]  668  709  179  497  520  567   96   64  679   552 #>  [533,]  114  549  845  526  553  425  622  698  350   525 #>  [534,]  128  704  741  937  358  537  985  291  486   411 #>  [535,]  540  756  911  998  772  613  797  142  860   326 #>  [536,]  169   16  434  881   70  254  119  162  171   774 #>  [537,]  358  534  135  985  159  713  704  696  278    28 #>  [538,]   79  841   25  559  232  215  967  798  864   890 #>  [539,]  302  458  866  236   70  842  169  508  162   168 #>  [540,]  756  142  772  535  326  998  801  216  863   546 #>  [541,]  580  560  886  802  830   72  518  407  282   755 #>  [542,]   85  407   50   19  911  723   26  290  115   535 #>  [543,]  824  288  641  279  738  676  221   49  673   398 #>  [544,]  747  759  875   56  247  807  403  996  627    98 #>  [545,]   39  481  767  531  561   22  814  962  630   500 #>  [546,]  827  998  552  797  925  207  592  520  786   540 #>  [547,]  568  490  879  214  471  562  963  527  433   648 #>  [548,]  904   12  510  752  257  461  161  356  762   262 #>  [549,]  553  533  594   87   16  425  698  565   61    41 #>  [550,]  288   63  164  138  279  590  543  824  519   738 #>  [551,]  140  320  983  742  725  203  739  144  573    47 #>  [552,]  546  472  709  679  827  179  786  151  477   228 #>  [553,]  425  549  565  698   83  976  639   87   41   533 #>  [554,]  609  319  188  822  665  152  871  918  321   234 #>  [555,]  224  588  658  804  909  745  330  941  244    86 #>  [556,]  167  664  654  711  646  385  563  454  966   491 #>  [557,]  572  143  608  834  491  424  743  927  195   585 #>  [558,]  115    1  436  364   90  575  857  349   62   514 #>  [559,]  890  755   25  831   79  538  215  841  293    24 #>  [560,]  886  541  282  580  198   72  581  922  463   723 #>  [561,]  714  266  338  545  531  511  733  154  395   481 #>  [562,]  947  951  527  705  883  963  490  283  897    89 #>  [563,]  385  898  342  167  522  806  556  244  454   332 #>  [564,]  515  590  280  484  826  685  138  512  137   382 #>  [565,]  639  553  698   41   83  408  425   87  976   549 #>  [566,]  652  382  280  515   33  685  484  826  729   208 #>  [567,]  878  327  179  180  532  470  809  855  679   287 #>  [568,]  547  212  963  527  648  683  880  162  490   310 #>  [569,]   68  325   35  700   27  334   88  445  454   806 #>  [570,]  935  221  740  577  910  294  882  695  673   641 #>  [571,]  311  954  310  455  697  348  219  683  992   308 #>  [572,]  743  557   81  834  608  446  513  950  143   255 #>  [573,]  171  684  162  739   70  774  113  589  742   299 #>  [574,]  600  363  153  527  671  963  883  310  418    88 #>  [575,]  558   90  436  115    1  514  475  364  714   857 #>  [576,]  889  124  721  305  463    9  317   72  240   873 #>  [577,]  221  294  570  641  673  398  824  837  309   882 #>  [578,]  690  501  354  156  968  250  937  840  448   128 #>  [579,]  181  765  492  190  808  401   65  110  129   136 #>  [580,]   72  541  463  560  802  505  721  886  922     9 #>  [581,]  375   26  183  290   50  503  108   62  748   415 #>  [582,]  211  446  516  876  608  491  572  834  557   386 #>  [583,]  112   84    3  452  498  584  246   20   66   470 #>  [584,]  833  815  323  470  246    3  498  253  583    66 #>  [585,]  143  195  834  653  222  557  608  512  208   731 #>  [586,]  258  726   81  125  356  950  940  980  646   669 #>  [587,]  888  495  236  313  490   89  568  883  949   931 #>  [588,]  555  651  941  224  909  330  610  745  658   804 #>  [589,]  739  212  693  171  573  963  162  203  527   671 #>  [590,]  208   63  138  564  164  515  288   59  137   512 #>  [591,]  352  779  176  342  244  104   14  185  276   651 #>  [592,]  757  777  827  858  469  175  736  786  362   207 #>  [593,]  859  719  893  728  700  948  763   38  984   692 #>  [594,]  698   61  549  226  553  108  565  114  183   533 #>  [595,]  923  187  856  807  694  103  627  439  875   544 #>  [596,]  359  255  989   40  422  160  248   31  993    24 #>  [597,]  531  387  478   10  853  395  442  545  338   494 #>  [598,]  257  912   93  161  997  273  708  762  275   251 #>  [599,]  726  859  593  454  664  763   38  245  692    67 #>  [600,]  574  657  418  671  728  153  107  932  763   795 #>  [601,]  210  775   53  133  307  154  760  783  266   384 #>  [602,]  178  341  426  991  314  899  629  992  768   792 #>  [603,]  523   71  707  750  117  232   40  889  618   905 #>  [604,]  769  330  632  401  874  214  136  885  492   745 #>  [605,]   48  445   69  741  675  704  155  695  667   534 #>  [606,]  607  627  103   64  289  643  532  179  614   691 #>  [607,]  627  465  606  614  801  643  899    7  863    64 #>  [608,]  557  245  143  491  572  927  582  834  386   876 #>  [609,]  188  152  871  665  554  319  778  321  923    86 #>  [610,]  438  909   21  334   86  745  941  450  588   658 #>  [611,]   28  864  383  447  248  686  333  117  278   750 #>  [612,]  704  784  155  713   44  483  769  688  486   474 #>  [613,]   57  535  857  540  772  101  666  142  699   895 #>  [614,]  643    7  716  832  300  627  747   44  688   403 #>  [615,]  915  630  929  938  932  107  708  795  418   639 #>  [616,]  157  952  852  344  882  339  164  318  570   935 #>  [617,]  735  498    4  246  967  833  782  730  584   112 #>  [618,]  232   71  707  722  523  623  347   28  159   291 #>  [619,]  949  847  778  451   86  951   21  761  334   956 #>  [620,]  321  754   21   32  319  778  249  705  727    86 #>  [621,]  380   77   42  710  901  165  261  952  933    11 #>  [622,]  525  660  114  374  640   60  936  402   45   533 #>  [623,]  368  686  347  430  351  159  383  618  523     8 #>  [624,]  397   74  839  130  237  263  127  360  116   352 #>  [625,]  789  388  341  992  298  991  426  158  272   673 #>  [626,]  682  526  163  460  150  788  111  462  533   432 #>  [627,]  544  614  643  807  607  747  606  182  875   759 #>  [628,]  260  423   96  497  809  139  631  184   98   477 #>  [629,]  768  773  792  467  309  426  602  895  341   101 #>  [630,]  615  938  795  932  418   22  814  767  107   929 #>  [631,]  260  477  390  330  423   96  632  139  941   628 #>  [632,]   97  934   36  862  604  930  129  259   37   631 #>  [633,]  960  220  969  351  368  369  149  638  623   271 #>  [634,]  357  924  289  801  756  216  540  200  326   863 #>  [635,]  479  250  864    6  715   95  729   79  538    24 #>  [636,]  456  371  384  644  649  314  681  880  571   307 #>  [637,]  764  656  903  118  914  843  828  480   32   692 #>  [638,]  390  204  794  734  368  129  945  776  351   631 #>  [639,]  565   83   41  915  425  553  708  402  976   292 #>  [640,]  374  396  471  622  660  741   37  836  525   214 #>  [641,]  398  824  221  543  577  673   49  294  695   676 #>  [642,]  362  415  269  174  720  469  797  242  813   975 #>  [643,]  614  179  716    7  300  139  627  747  544   759 #>  [644,]  746  456  371  835  681  337  649  636  896   175 #>  [645,]    1  105   33  280   90  793  558  729  364   349 #>  [646,]  167  556  417  654  586  160  669  170  563   828 #>  [647,]  994  466  424  443   69  695  968  261  676   569 #>  [648,]  683  434  433  880  308   94  836  568  471   310 #>  [649,]  456  379  805  644  636  474  832  314  399   426 #>  [650,]  351  149    8  686  794  368  383  159  444   921 #>  [651,]  588  104  120  176  610  555  152   86   98   438 #>  [652,]  566  382  513  715   95  440  195  729  479    33 #>  [653,]  157  222  731  882  519  164   59  927  143    51 #>  [654,]  385  522  556  167  563  646   91  669  806   160 #>  [655,]   43  965  234  774  918  168  842  796  990   113 #>  [656,]   32  914  692  764  499  303  843  249  818   900 #>  [657,]  671  600  283  728  125  418   27  763  693   574 #>  [658,]  450   21  555  705  804  909  745   86   35   951 #>  [659,]  688  667   44  155   56   78  703  334  438   451 #>  [660,]  401  374  622  525  396  640   37  136  885   214 #>  [661,]  758  244   91  734  522  127  913  170  342   185 #>  [662,]  123  710  761  952  428  158  942  987  956   807 #>  [663,]  851  808  126  181  129  885  147  370   17   401 #>  [664,]  454  325  556  491  189  966  167  898  424   218 #>  [665,]  152  188  651  319  609  321  822  620  871    86 #>  [666,]  101  699  964  467  773  895  863  613  142   772 #>  [667,]  659  334  955  688  155   48  695  703  605   294 #>  [668,]  532  497  709  520   96  628  567  173  179   103 #>  [669,]  917  940  980  296  170  356  865  258  127   525 #>  [670,]  272  279  799  138  145  543  625  137  738   388 #>  [671,]  963  527  657  574  283  693  600  562  728   418 #>  [672,]  694  428  165   77  662  372  710  158  956   778 #>  [673,]  221  641  543  577  123  625  824  341  570   398 #>  [674,]  517  284  315  524  277 1000  186  337  870   420 #>  [675,]  840   48  605   69  486  741  128  483  335   955 #>  [676,]   49  738  443  824  543  519  641  398  288   647 #>  [677,]  435  267  253  419  135  121  687    2  230   358 #>  [678,]  979  120  109  487  104  966  754  325   11   218 #>  [679,]  287  877  552  532  567  327  179  546  709   289 #>  [680,]  528  482  691  508  506  970  820  829  521   504 #>  [681,]  371  902  644    5  384  880  636  746  285   307 #>  [682,]  163  526  626   16  150  533  953  788  412   462 #>  [683,]  308  648  310  433  880   94  434  571  437   835 #>  [684,]  573  113  171  162  299   23   70  774  825   739 #>  [685,]  826  512  484  382  346  502  448   73  137   738 #>  [686,]  383  921  268   28    8  623  650  351  782   430 #>  [687,]  135  230  435    2  696  253  677  713  537     4 #>  [688,]  659   44  819  667   56   78  155  612  955   399 #>  [689,]  473  369  329  373   34  184  381  919  457   241 #>  [690,]  578  501  354  968  411  840  715  346  128   107 #>  [691,]   64  482  507  680  701  528  861  614  200   146 #>  [692,]  332  898  303  828  656  593  859  728  454   984 #>  [693,]  671  984  947  589  728  527  963  657  897   562 #>  [694,]  672  662  778  807  428  761  942  188  609   754 #>  [695,]  294   69  667  605  910  201  641  398   48   968 #>  [696,]  713  274  135  687    8   78  230  704  141   537 #>  [697,]  455  783  954  311  571  154  219  500  481   348 #>  [698,]  565  594  553  402  408  549   61  976  226   425 #>  [699,]  101  895  773  467  768  857  629  666   58   772 #>  [700,]   88  719  727  948  728  893  897  984  593   569 #>  [701,]   64  691  173  861  507  532  668  146  520   497 #>  [702,]   29  416  215  798  841    9  291  293  989    31 #>  [703,]   78  155  659  445  141  201   56  667  306   696 #>  [704,]  741  612  534  713  155  985  445  934  605   862 #>  [705,]   21  951  450  562  658  283  947  321  490    88 #>  [706,]  670  799  131  145  279  550  781  272  849   138 #>  [707,]  523   71  618  232  722  603  623  905  449   243 #>  [708,]  997  915  639  615  408  565  598   83  257   304 #>  [709,]  532  472  668  520  477  497  552   96  925   179 #>  [710,]  952  662  123  621  380  428  158  956   77   761 #>  [711,]  556  189  167  491  966  664  109  654  385   749 #>  [712,]  926  854    3  852  361  122  318  199   82   815 #>  [713,]  696  704  784  135  612  159  274  862  537   934 #>  [714,]  733  511  561  514  436  545  783  210  500   920 #>  [715,]  354  479  250   24  729  690  578  513  635     6 #>  [716,]    7  643  228  179  614  300  121  805  784   771 #>  [717,]  243  485  791  855  718  894  472  877  869   449 #>  [718,]  472  717  894  709  520  855  552  869  476   243 #>  [719,]  948  893  700  593   42   88  466  859  261    38 #>  [720,]  469  301  736  242   30  207  362  642  229   860 #>  [721,]    9  213  317  576   72  463  889  305  993   359 #>  [722,]  618  301   30  860  707  242  232  358  135   207 #>  [723,]  148  282  891  542  560  580  505  415  821   581 #>  [724,]  978  977  410  962  254  219  338  304  154   437 #>  [725,]  983  140   41   47  838  320  551  425  150   526 #>  [726,]  763  599  586  828  125  417  454  593  692   929 #>  [727,]   88  956  700  261  897   42  951  948  719   931 #>  [728,]  984  897  700  283  947  657   88  593  562   671 #>  [729,]  479  105  715   33  810  354  635  578  817   250 #>  [730,]  498  246  967  617   18  112   20  583  196   916 #>  [731,]   59  653  882  208  157   51   63  365    6   867 #>  [732,]  946   73  193  814  502  202  932  443  512   421 #>  [733,]  714  511  561  514  436  225  545  920   22    90 #>  [734,]   91  794  758  185  661  638  913  244  390   368 #>  [735,]    4  617  833  782  232  449  246  967  498   435 #>  [736,]   30  229  207  757  301  228  469  720  420   746 #>  [737,]  312  447  255  529  248  195  743  834  986   908 #>  [738,]   49  676  443  543  824  279  138  398  137   288 #>  [739,]  589  573  171  320  684  551  299  203  144   742 #>  [740,]  570  753  935  910  996   84  247  872  294    56 #>  [741,]  445  704  534  605  985   27   48  640  396   675 #>  [742,]  551  825  140  573  999  203  788  171  320   725 #>  [743,]  572   81  255  950  513  366  354  557  715   834 #>  [744,]  130  237   99  190  796  965  953  765   65   397 #>  [745,]  909  804  214  330  941  396  604  769   36   658 #>  [746,]  835  644  175  896  829  474  229  371  456   681 #>  [747,]  544  403  759  807   56   98  451  875   44   659 #>  [748,]  408  920  304  183   61  453   87   94  997   565 #>  [749,]  711  928  529  312  248  491  654  556  189   787 #>  [750,]  117   71  232   40  603  618  864   25  538   707 #>  [751,]   38   67  946  893  391  859  593  948  719   599 #>  [752,]  366  950  989  258   31  377   81  251  762   161 #>  [753,]   51  740  910  867  427  489  459  935  201   444 #>  [754,]   11  956  901  942  261  620  727   42  761   487 #>  [755,]  559  831  322  890   79  293  215  841  798    25 #>  [756,]  540  326  216  535  142  772  998  323  546   801 #>  [757,]  736  592  259  858  151   30  207  229  786   808 #>  [758,]  661  913   91  734   60  239  102  244  396   971 #>  [759,]  544   56  996  247  747  872  875  306  688    98 #>  [760,]  133  286  775  970   53  172  307  394  313     5 #>  [761,]  942  807  619  662  956  847  451  778  334   747 #>  [762,]  161  950  929  257  107  193   81  366  598   932 #>  [763,]  593  726  929  938  193  657  125  600  107   946 #>  [764,]  656   32  843  328  637  966  692  914  898   859 #>  [765,]  796  181  579  237   99  136  401  224  820   113 #>  [766,]  198  748  581   55  281  375   61  316  977   304 #>  [767,]  795  481  437   39  418  630  962  500  545   292 #>  [768,]  629  895  773  467  426  309  101  517  870   314 #>  [769,]  874  604  483  214  471  486  896  433  612   745 #>  [770,]  812  266   75  313  954  478  775  697  442   338 #>  [771,]  300  944    7  872  122   66  253  819  643   309 #>  [772,]  142  540  467  101  895  863  535  326  857   699 #>  [773,]  629  768  699   58  101  467  799  792  895   602 #>  [774,]  169   70  684  573  965  162  536  953  171   113 #>  [775,]  266  154  601  760  770  210  307   53  783   313 #>  [776,]  147  913  347  102  945  368  971  239   45   936 #>  [777,]  786  492  858  808  592   17  757  477  925   476 #>  [778,]  619  949   86  321  847  451  761   21  490   951 #>  [779,]  342   14  591  818  352  244  176   74  843   661 #>  [780,]  378  938  844  340  393   12  983  615  630   929 #>  [781,]  493  849   82  803  295  178  344  792  773   341 #>  [782,]    4  268  686  921  271  383  180  735  617   623 #>  [783,]  697  154  500  314  455  266  954  307  571   991 #>  [784,]  612  259  713  121  151  229  228  934  704   420 #>  [785,]  200  970  521  286  172  465  133  760  863   801 #>  [786,]  777  151  757  851  808  129  476  592  259   858 #>  [787,]  191  333  921  268  383  943   34  928   18   369 #>  [788,]  526   47  432  742  533  865  350  725  682   845 #>  [789,]  832  625  992  341  399  955  158  298  363   991 #>  [790,]  268  464  782  921  271  191  916  686  369   383 #>  [791,]  485  464  717  243  894  271  449  869  855   905 #>  [792,]  309  341  629  987  837  768  467  182  426   602 #>  [793,]  811   33  367  645  280  208  105  974   95   590 #>  [794,]  351  390  734  204  638  368  650  930  185    91 #>  [795,]  418  915  767  437  292  630  615  932  840   308 #>  [796,]  765  990  237  579  181  939  113   99  820   190 #>  [797,]  362  242  860  207  642  998  469  415  827   911 #>  [798,]  841  702    9  264  108  322   29  226  415   215 #>  [799,]  670  272  279  137  138  773  426  349   58   991 #>  [800,]  194  376  257   22  340  273  598  962  997   304 #>  [801,]  863  465  200  964  540  607  142  289  772   634 #>  [802,]  345  406  580  576  721  889  463   72  124   886 #>  [803,]  493  850  178   92  899  781  812  602  182   238 #>  [804,]  745  909  396  214  658  604   35  555  224   471 #>  [805,]  379  474  649  420  121  399    7  819  309   524 #>  [806,]  522   68   35  445   36  569  233  563  385   985 #>  [807,]  747  544  761  875  403  942  627  451  778   759 #>  [808,]  492  885  136  851  129  401  858  777  181   663 #>  [809,]  184  878  241  628  306  423   98  919  260   180 #>  [810,]   62  322 1000  817  186   50  284  503  277   729 #>  [811,]  793  367   33  355  196  280  645   95  208   295 #>  [812,]   75  770  158  442  954  298  495  238   92   313 #>  [813,]  975  868  642  362  797  353  415  174  488   269 #>  [814,]   22  630  732  932   39  767  795  153  107   193 #>  [815,]  323  470  584  833  216    3  771   66  287   326 #>  [816,]  421  202  732   73   67  502  946  751  245   386 #>  [817,] 1000  156  468  937  810  267  524  358  284   277 #>  [818,]   14  999  914  303  779   23  342   74  843   656 #>  [819,]  688  944  121  230  805  294  300  309  399   379 #>  [820,]   17  939  504  136  492  881  777  808  181   528 #>  [821,]  797  813  998  546  535  827  975  362  231   409 #>  [822,]  319  665  206  188  554  620  609  328   32   152 #>  [823,]  842  918  701  554  508   43  923  655  990   609 #>  [824,]  543  641  221  288  519   49  676  398  738   882 #>  [825,]  865  742  999  303   23  838  233  374  980   332 #>  [826,]  685  512  137  448  382  346  484  738   49   138 #>  [827,]  546  592  998  925  797  786  777  975  552   988 #>  [828,]  692  887  303  914  332  726  898  656  125   480 #>  [829,]  896  175  746  874  835  474  644  506  769   880 #>  [830,]   46  317  256  721  886  213  345  406  510   316 #>  [831,]  293  890  215  559   24  755  256   25   29   702 #>  [832,]  789  399  379  649  341  614  955  992  987   805 #>  [833,]  584  323  815  470  735  246    4  617  498   253 #>  [834,]  195  572  557  143  585  743  608  513  386   211 #>  [835,]  746  896  486  474  644  229  483  175  420   433 #>  [836,]  433  976  471  648  640  486  374   94  308   453 #>  [837,]   58  318  981  309  792  577  629   52  870   773 #>  [838,]  356  425   47  461  125  639  825   41  725   402 #>  [839,]  624  263  132  995   91  276  185  734  116   127 #>  [840,]  675  128  277  315  501  937  418  411  795   335 #>  [841,]   79  798  538  702   29  215  817  559    9    25 #>  [842,]  508  866  302  236  539  918  458  528   70   680 #>  [843,]  914  764  656  818  779  342   32   14  828   303 #>  [844,]  780  340  378  393  983   12  938  140  509   551 #>  [845,]  350  533  660  114  622  525  881   60  526   136 #>  [846,]  331  458   55  235  724   13  978  977  539   338 #>  [847,]  619  949  451  951  392  879  334   21   44   955 #>  [848,]  262  100  887   12  480  227  548  865  509    47 #>  [849,]  781   82  493  673  792  318  341  670  279   837 #>  [850,]   92  238  803  812  286  495  770  899  178   172 #>  [851,]  129  663  808  885   97   37  786  151  757   492 #>  [852,]   82  414  712  122  318  182  493  926  987   849 #>  [853,]  387  410  978  494  892  531  693  478  589   144 #>  [854,]  361  712  926  199    3  852  122  452  583    84 #>  [855,]  869  271  180  472  717  878  567  327  709   782 #>  [856,]  197  439  875  187  544  247  759  747  807   595 #>  [857,]  895  101  115  699   26  674  290  768  772   558 #>  [858,]  492  874  808  777  757  604  885  592  769   259 #>  [859,]  593  719   38  893  599  700  692  948  454   751 #>  [860,]  242  207  911  267   30  722  797  720  736   301 #>  [861,]  146   96  990  507  871  260  173  528  423   192 #>  [862,]  934  159   97  632  985   36  713   37  704   239 #>  [863,]  964  801  465  772  899  142  467  540  101   456 #>  [864,]  635  611  908   18  967  117  538  447  750   232 #>  [865,]  127  170  825   60  669   47  525  432   74   980 #>  [866,]  302  236  508  842  539  458   70  587  506   394 #>  [867,]   51  489  166  753  427  106  459  143  943   424 #>  [868,]  873  462  813  336  412  370  889  922  463   126 #>  [869,]  271  894  855  905  472  623  717  243  204   523 #>  [870,]  524  517  468  981  315  448  277  335   52   156 #>  [871,]  918  490   86  990  861  528  299  321  609   658 #>  [872,]   66  944  300  247  759  996  771  122   56    84 #>  [873,]  462  868  370  412  889  460  124  336  576   463 #>  [874,]  769  858  604  896  175  136  829  492  885   214 #>  [875,]  544  247  759  807  747  942   56  996  761   856 #>  [876,]  958  582  211  608  516  245  446  491  189   386 #>  [877,]  287  679  717  552  323  718  243  855  756   327 #>  [878,]  567  180  809  919  327  184  381  628  274   179 #>  [879,]  392  310  847  547  483  955  399  949  683   363 #>  [880,]  648  506  683  434  681  433  394  371  568   636 #>  [881,]  536  434   16  136  885  836  433  874  820   845 #>  [882,]  731  824  221   63  653  519  570   59  577   935 #>  [883,]  527  963  947  562  931   89  574  951  897   490 #>  [884,]  995  240  116  406  227  132  124  959  263   160 #>  [885,]  808   37  136  401  492  851  604  874  660   858 #>  [886,]  560   72  463  580  922  541  198  213  802   830 #>  [887,]  480  828  417  848  646  726  509  586  914    12 #>  [888,]  587  495  236  949  490   89  313  931  883   568 #>  [889,]  576  305  124  264  873  721  463  370  226   336 #>  [890,]  831  559   25   24  215  293  986  755  479   256 #>  [891,]  505  449  580  723  542  389  821  415  603   538 #>  [892,]  144  853  387  739  900  903  589  320  410   693 #>  [893,]  948  719  593   38   42  700  859   88  751   728 #>  [894,]  905  869  485  472  972  717  243  271  718   791 #>  [895,]  101  857  768  699  467  629  674  772  456   773 #>  [896,]  829  835  474  746  175  769  874  483  486   229 #>  [897,]  984  947  728  372   88  562  727  249  700   499 #>  [898,]  692  563  454  332  325  966   68  664  342    35 #>  [899,]  964  602  178  467  863  465  341  649  832   629 #>  [900,]  203  144  499  999  303  656  299   23  589   249 #>  [901,]   11   42  261  754  948  719  621  328  466    38 #>  [902,]  681  254   94  371  453  119    5  434  880   648 #>  [903,]  249  499  900  144  656   32  637  892  319   372 #>  [904,]  548  530  111  262  194  510  217  376   12    41 #>  [905,]  894  523  869  972  243  707  623  271  336   472 #>  [906,]  201  910  218  979  942  334  907  703   56   438 #>  [907,]  106  218  906  489  189   51  177  324  753   867 #>  [908,]   18  864  447  611  117  916  730  750  967   943 #>  [909,]  745  804  941  610  438  330  658  588   36   555 #>  [910,]  935  201  740  753  695  570  906   51  703   996 #>  [911,]  860  242  290  267  207  720  469  415  797   535 #>  [912,]   93  598  997  257  400  275   15  273  708   251 #>  [913,]  102  776  239  758  971   60  147   45   91   296 #>  [914,]  818  656  843  303  999  828   14  692  203    32 #>  [915,]  708  639  795  615  418   83  997  292  976   565 #>  [916,]   80  787   18  790  730  908  268  191  498   112 #>  [917,]  980  940  669  296  525  233   60  170  356   640 #>  [918,]  990   43  871  528  842  508  234  796  861   302 #>  [919,]  381  180  878  184  809  473  241  306  274   921 #>  [920,]  400  514   15  364  748  436  997   62  767   349 #>  [921,]  686  383  268  191  381  650  333  782    8   351 #>  [922,]  463   72  226  873  868  108  264  594  462   415 #>  [923,]  188  595  609  152  507  694  807  403  778   103 #>  [924,]  634  409  357  756  801  200  289  540  998   546 #>  [925,]  520  777  827  709  476  205  786  546  592   231 #>  [926,]  712  361  852  854    3  122  318  493   82   216 #>  [927,]  106  424  143  222  647  608  557   51  653   491 #>  [928,]  149   34  333  191  650  654  385  787  351   749 #>  [929,]  193  107  938  615  932  762  763  630   12   257 #>  [930,]   36  941  632  862  909  274   97  713  934   159 #>  [931,]  883  372   89  727  265  298  897  947  428   956 #>  [932,]  107  193  929  615  630  418  795  915  814   600 #>  [933,]  165  621  380  952  901  710   11  209   77   487 #>  [934,]   97  862   37  632  704  985  159   36  604   713 #>  [935,]  910  570  740  221  753  695  882   51  201   577 #>  [936,]   45  147  971  114   60  622  525  913  350   776 #>  [937,]  128 1000  284  277  315  534  156  186  524   817 #>  [938,]  780  929  615  378  630  763  340  193  657   393 #>  [939,]  820   17  504   65  205  190  796  777  579   765 #>  [940,]  296  917  669  980  377  356  258  411  525   239 #>  [941,]  930   36  909  745  588  330  632  804   98   610 #>  [942,]  761  875  807  754  662  747  952  334   56   906 #>  [943,]  166  489   18  867  427  333  447  787   51    20 #>  [944,]  300  771  819  872    7  253   66  309  230   121 #>  [945,]  776  147  370  336  971  663  126  638  368   913 #>  [946,]  732  193  751  893  763   38  443   67  593   600 #>  [947,]  562  897  883   89  984  527  963  728  951   705 #>  [948,]  719  893   42  700  466  261   88   38  727   593 #>  [949,]  619  847  778  451  490  951   86  879   21   547 #>  [950,]   81  366  762  752  161  251  258  743  513    31 #>  [951,]  705   21  562  847   88  490  619  947  727   949 #>  [952,]  710  662  123  942  621  673  761  380  935   754 #>  [953,]   99  774  820  845   65  765  682  412   17   939 #>  [954,]  455  571  697  311   75  219  310  313  348   992 #>  [955,]  399  392  667   48  879  379  688  363  483   847 #>  [956,]  727  261   88  428   42  754  761  931  619   700 #>  [957,]  995   99  370  190  336  945  972  744  126   624 #>  [958,]  876  516  582  211  245  599  417  608  386   446 #>  [959,]  270  345  884  596  406  227  117  317   40   132 #>  [960,]  220  633  969  441  405  839  422  132   40   995 #>  [961,]  933  952  595  414  856  694  616  875  187   439 #>  [962,]  304  767  437   83  748  292  795  997  630    22 #>  [963,]  527  883  671  212  562  568  947  574  547   310 #>  [964,]  863  465  899  286  801  666  467  101  384   772 #>  [965,]  774  113   43  234  655  953  796  684  130   573 #>  [966,]  664  109  898  167  556  454  325  563  189   678 #>  [967,]  617  246  498  538   79  864  735  635  730     4 #>  [968,]   69  501  578  994  690  346  605  695  424   647 #>  [969,]  960  220  633  441  405  276  928  839  369    34 #>  [970,]  521  285  506  785  133  680  760  508  866     5 #>  [971,]   60  936  913  147  350   45  776  525  263   758 #>  [972,]  126  476  905  336  894  205   65  190  472   786 #>  [973,]  386  516  509  202   76  161  726  446  762    12 #>  [974,]  365  419  981  468   52    2   20  105    6   156 #>  [975,]  813  353  488  174  827  504  642  362  592   797 #>  [976,]  836  413  453  553   94  565  402  698   83   425 #>  [977,]  254  724   87   55  902  304  235    5   16   150 #>  [978,]  724  410  853  338  494  320  739  977  387   478 #>  [979,]  120  678  218  177  109  104  906  325  457   563 #>  [980,]  917  940  669  125  233  170  332  356   68    35 #>  [981,]  468  870  419   52  524  837  309  974   58   365 #>  [982,]  440  986  890   25   24  559  518  831  255   864 #>  [983,]  140  551  725  320  780  844  378  742  838   393 #>  [984,]  728  897  947  499  700  249  693  593  562    88 #>  [985,]  862  159  239  429  704  741  934  537  102   534 #>  [986,]   24  255  890  982  440  251  366  831  215   293 #>  [987,]  182  123  341  792  832   82  789  673  662   625 #>  [988,]  488  521  998  827  409  975  353  269  174   200 #>  [989,]   31  416  377  752   29  359  366  411  702   402 #>  [990,]  918  796   43  861  871  765  146  528  113   352 #>  [991,]  426  992  348  314  602  341  625  272  455   789 #>  [992,]  991  426  348  314  625  789  379  399  571   341 #>  [993,]  317  359  305   45  461  460  510  377  416   936 #>  [994,]   69  647  968  424  501   27  605  569  107    48 #>  [995,]  884  116  263  240  839  132  124  945  971   957 #>  [996,]   56  759  306   78  247  872  740  659  688   703 #>  [997,]  708  400  915  598  912  615  257   22  795    15 #>  [998,]  546  827  797  207  540  469  988  535  592   860 #>  [999,]   23  303  818  203   14  825  914  900  742   299 #> [1000,]  817  284  937  277  674  315  186  524  156   810 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.39773387 0.5393862 0.5929945 0.6743948 0.6982316 0.7353637 0.7943590 #>    [2,] 0.34655638 0.4611479 0.5201396 0.5257977 0.5493634 0.5734307 0.5751953 #>    [3,] 0.71352529 0.7452899 0.7702928 0.7823073 0.8597953 0.8864375 0.8946694 #>    [4,] 0.38243981 0.4758468 0.6086311 0.6170434 0.6562040 0.6773202 0.7120998 #>    [5,] 0.37774687 0.4243254 0.4610112 0.5163987 0.5203483 0.5227852 0.5609407 #>    [6,] 0.37099608 0.5820767 0.6379923 0.7003910 0.7185376 0.7193556 0.7229125 #>    [7,] 0.37915557 0.4371067 0.4940675 0.5284839 0.5329999 0.5477790 0.5511082 #>    [8,] 0.40190161 0.4270406 0.4328330 0.4692567 0.4848315 0.5105437 0.5344180 #>    [9,] 0.35635425 0.4759278 0.5448821 0.5820753 0.5992319 0.6588970 0.6724007 #>   [10,] 0.55708354 0.5675430 0.7952127 0.8472499 0.8979520 0.9150889 0.9306449 #>   [11,] 0.22147278 0.4677179 0.5252473 0.6010895 0.7475356 0.7535113 0.7727582 #>   [12,] 0.66875483 0.7067874 0.7124419 0.7603207 0.7774517 0.7866091 0.7933801 #>   [13,] 0.96984684 1.0013407 1.1878302 1.2477174 1.2861078 1.2929181 1.3323158 #>   [14,] 0.41744766 0.4841935 0.5699993 0.5874592 0.7192074 0.7392619 0.7791875 #>   [15,] 0.43121893 0.4494064 0.5405619 0.5757912 0.6518518 0.6955287 0.7205692 #>   [16,] 0.45517381 0.4826466 0.5387420 0.6143286 0.6858282 0.7188800 0.7357421 #>   [17,] 0.28766330 0.4908292 0.5172734 0.5273791 0.5352890 0.5492523 0.5608126 #>   [18,] 0.51036456 0.7408558 0.7858032 0.8138868 0.8985295 1.0139115 1.0411123 #>   [19,] 0.90076890 1.0930550 1.2124210 1.3332390 1.4389646 1.4989826 1.5776472 #>   [20,] 0.56512138 0.5725136 0.5986504 0.6861339 0.7326751 0.7385813 0.7568889 #>   [21,] 0.23899681 0.3135447 0.3883025 0.3994222 0.4423075 0.4492746 0.5025165 #>   [22,] 0.47362581 0.5995646 0.6711678 0.6955801 0.7504964 0.8043601 0.8410759 #>   [23,] 0.40730448 0.4439814 0.4841935 0.5506037 0.5540976 0.6610497 0.6647937 #>   [24,] 0.43239293 0.5039993 0.5138689 0.5412533 0.5464031 0.5996253 0.6201666 #>   [25,] 0.45664836 0.4758378 0.5144611 0.6311913 0.6619664 0.6886999 0.7215085 #>   [26,] 0.26165504 0.3923759 0.4192170 0.6223163 0.6345546 0.6612611 0.6776156 #>   [27,] 0.36432898 0.4533475 0.4706020 0.4799649 0.5352673 0.5433107 0.5493938 #>   [28,] 0.45107304 0.4692567 0.5286005 0.5569790 0.5621215 0.5658020 0.6024109 #>   [29,] 0.19208548 0.3567382 0.4075681 0.5405018 0.5731625 0.5870026 0.6133335 #>   [30,] 0.17095184 0.2977136 0.3295060 0.4640625 0.4996370 0.5011480 0.5045223 #>   [31,] 0.11859239 0.3519176 0.3933264 0.5053583 0.5598049 0.5665622 0.5870026 #>   [32,] 0.42068847 0.5336422 0.5388610 0.7120582 0.7546214 0.7663746 0.8227733 #>   [33,] 0.67212780 0.6774977 0.6880947 0.7690668 0.8056699 0.8470417 0.8934756 #>   [34,] 0.40899445 0.6862166 0.6998819 0.7658372 0.8004506 0.8117590 0.8898245 #>   [35,] 0.24169521 0.3298711 0.4533475 0.4915331 0.5077745 0.5141889 0.5153631 #>   [36,] 0.15257575 0.3289737 0.3599168 0.4810235 0.5099933 0.5104165 0.5383639 #>   [37,] 0.29615182 0.3311175 0.3795550 0.4851833 0.5139648 0.5150910 0.5174643 #>   [38,] 0.42113733 0.4350018 0.5337374 0.5448374 0.5540939 0.5970336 0.6503293 #>   [39,] 0.28278408 0.5485673 0.5566320 0.5961777 0.6166203 0.6189645 0.6799471 #>   [40,] 0.55071026 0.5574429 0.5841653 0.6960628 0.7339320 0.7428261 0.7461769 #>   [41,] 0.40036913 0.4122193 0.4772735 0.4965581 0.5110219 0.5287856 0.5989762 #>   [42,] 0.33109141 0.3651112 0.4533851 0.4585906 0.4770144 0.4950868 0.5252473 #>   [43,] 0.58855017 0.5971611 0.6945745 0.7652435 0.7796270 0.8983878 0.9580782 #>   [44,] 0.29706129 0.3530870 0.3846466 0.4773540 0.4918882 0.5180333 0.5380589 #>   [45,] 0.25911696 0.4491776 0.4539066 0.4768785 0.4949334 0.5219129 0.5220003 #>   [46,] 0.97582821 1.0345686 1.0783664 1.2808507 1.3941910 1.4196469 1.4229994 #>   [47,] 0.44233596 0.5017724 0.5147232 0.5374572 0.6392569 0.6420617 0.6992660 #>   [48,] 0.29316252 0.3840637 0.3852774 0.4246063 0.4271990 0.4596798 0.4940856 #>   [49,] 0.18558019 0.3743953 0.3912150 0.4569831 0.5058113 0.5456107 0.5580892 #>   [50,] 0.37361796 0.3923759 0.4664123 0.5042517 0.5843154 0.6032817 0.7280856 #>   [51,] 0.28209545 0.4009976 0.5795918 0.5826329 0.6597517 0.6915176 0.7085625 #>   [52,] 0.49832077 0.5146017 0.5313967 0.5360740 0.5955231 0.6086181 0.6293054 #>   [53,] 0.29700067 0.4192652 0.4545237 0.4610112 0.5713543 0.6667070 0.6728727 #>   [54,] 0.14772488 0.5793084 0.5867660 0.6336414 0.6483591 0.6575695 0.6894880 #>   [55,] 0.80505654 0.8893905 1.0498633 1.0980309 1.1588362 1.2555885 1.2717302 #>   [56,] 0.30074143 0.3527218 0.3764694 0.4178786 0.4648014 0.4971803 0.5198701 #>   [57,] 0.79473374 0.8475068 1.0802002 1.1079187 1.1164945 1.1364149 1.2303063 #>   [58,] 0.42779509 0.5932687 0.6086181 0.6622640 0.6901354 0.7249406 0.7677410 #>   [59,] 0.29171054 0.4667922 0.6710482 0.7076619 0.7473483 0.8224951 0.8314911 #>   [60,] 0.24217596 0.3407925 0.4379438 0.4417291 0.4539066 0.4546992 0.4684110 #>   [61,] 0.41126240 0.4742819 0.4766640 0.4839321 0.5358830 0.5444218 0.5490071 #>   [62,] 0.36492801 0.4365829 0.5843154 0.6210712 0.6449839 0.6518518 0.7178511 #>   [63,] 0.37228242 0.5788515 0.5847549 0.5990230 0.6136647 0.6294851 0.6389053 #>   [64,] 0.48531044 0.7197986 0.7777512 0.8162542 0.9166844 0.9264495 0.9583683 #>   [65,] 0.35601253 0.6181850 0.6332838 0.6346587 0.6625912 0.6738594 0.6758599 #>   [66,] 0.42739736 0.4834416 0.5731699 0.6196778 0.6547016 0.6953762 0.7309994 #>   [67,] 0.51679693 0.7506492 0.7636422 0.7900462 0.8513426 0.8600860 0.8613415 #>   [68,] 0.32987110 0.3643290 0.4201469 0.4393638 0.4618116 0.5624684 0.6300681 #>   [69,] 0.35364363 0.3840637 0.4539474 0.4549827 0.4604691 0.5218188 0.5565653 #>   [70,] 0.24948524 0.5872709 0.5881784 0.5896887 0.6053702 0.6580457 0.6648432 #>   [71,] 0.39379046 0.4102297 0.5351442 0.5359537 0.5574429 0.6633503 0.6746200 #>   [72,] 0.22854118 0.4628218 0.6132218 0.6223248 0.7434314 0.7644381 0.7759048 #>   [73,] 0.35724949 0.4285216 0.5922141 0.7702286 0.8025998 0.8478065 0.8840870 #>   [74,] 0.48972888 0.5199618 0.6939768 0.6969437 0.7529468 0.7716107 0.8462245 #>   [75,] 0.44883549 0.4724809 0.5641065 0.5674431 0.5689064 0.6130378 0.6317660 #>   [76,] 0.75897765 0.8878682 0.9190937 0.9277836 0.9894147 1.0260285 1.1859397 #>   [77,] 0.45711793 0.5481625 0.5871431 0.5972364 0.7186576 0.7395510 0.7696029 #>   [78,] 0.18800702 0.3842973 0.4178786 0.4204668 0.4574960 0.4617125 0.4839721 #>   [79,] 0.30598353 0.4148741 0.5852497 0.6619664 0.7322407 0.7658477 0.7835716 #>   [80,] 1.02584150 1.0411123 1.0608211 1.1792617 1.3458241 1.4361311 1.4797949 #>   [81,] 0.32885595 0.4392924 0.5456781 0.5662659 0.6225163 0.6461706 0.6703414 #>   [82,] 0.59246740 0.6538342 0.6553385 0.6840404 0.7125766 0.8350810 0.8535535 #>   [83,] 0.34924368 0.3496016 0.3801105 0.4006582 0.4523172 0.5137445 0.5287856 #>   [84,] 0.57316993 0.6558082 0.7094237 0.7297617 0.7318652 0.7819416 0.7921807 #>   [85,] 0.54876539 0.6839650 1.0930550 1.1547342 1.1611489 1.2065046 1.2672324 #>   [86,] 0.39942216 0.4228059 0.5081759 0.5306798 0.5477445 0.5525549 0.5747412 #>   [87,] 0.38011055 0.4781805 0.4820215 0.4839321 0.4887616 0.4910652 0.5533968 #>   [88,] 0.22653388 0.2683590 0.4685595 0.4721441 0.5055142 0.5111282 0.5267481 #>   [89,] 0.42176201 0.4275672 0.4686877 0.4894517 0.5225874 0.5406897 0.5869831 #>   [90,] 0.69823156 0.7207436 0.8170959 0.8793428 0.8862412 0.8927669 0.9331566 #>   [91,] 0.40223636 0.4032866 0.4412836 0.4580609 0.4889759 0.5426257 0.5537303 #>   [92,] 0.42845425 0.7391452 0.8905917 0.9159804 0.9303427 0.9891219 1.1019367 #>   [93,] 0.26505869 0.4280680 0.5587160 0.6468588 0.6775754 0.7493271 0.7574360 #>   [94,] 0.18303997 0.4553059 0.4766086 0.4802242 0.4902615 0.5154816 0.5205412 #>   [95,] 0.67749765 0.7485606 0.9076582 0.9182057 0.9235141 0.9762527 1.0432925 #>   [96,] 0.23199778 0.2452248 0.3921396 0.4436954 0.4991256 0.5041168 0.5510922 #>   [97,] 0.22391198 0.2905770 0.2932143 0.2961518 0.4743702 0.5066575 0.5099933 #>   [98,] 0.45519774 0.4741565 0.5380589 0.5500722 0.5593353 0.5704291 0.5793616 #>   [99,] 0.58655378 0.6329797 0.6541405 0.6625912 0.6853870 0.7246357 0.7582146 #>  [100,] 0.81891455 0.8796042 1.0626138 1.1093940 1.1129744 1.1714723 1.1898559 #>  [101,] 0.25146968 0.4702614 0.5026707 0.5084815 0.5745212 0.6379296 0.6579482 #>  [102,] 0.14552863 0.3065142 0.3703586 0.4276784 0.4407556 0.4419846 0.5066575 #>  [103,] 0.88515084 0.9561815 0.9574965 0.9887863 1.0193942 1.0269339 1.0309469 #>  [104,] 0.32068801 0.5846060 0.6844724 0.6862324 0.6955363 0.8032264 0.8392914 #>  [105,] 0.49832077 0.5824909 0.5937550 0.5952966 0.6115914 0.6880947 0.7015205 #>  [106,] 0.58263291 0.5978110 0.6333632 0.6528266 0.7730781 0.7915906 0.8261604 #>  [107,] 0.16954488 0.4119332 0.4394802 0.5459968 0.6358688 0.6375243 0.6556587 #>  [108,] 0.42442335 0.5275176 0.5344230 0.5447651 0.5690407 0.5977752 0.6073031 #>  [109,] 0.64026758 0.6721906 0.6905490 0.8146831 0.8254523 0.8527191 0.9163852 #>  [110,] 0.67744077 0.6820061 0.7616144 0.7759696 0.8267311 0.8290884 0.8299160 #>  [111,] 0.63214709 0.7925934 0.9725130 0.9908390 1.0399132 1.0499335 1.0639441 #>  [112,] 0.31415084 0.6534698 0.7318652 0.7326751 0.7464785 0.8708178 0.8823580 #>  [113,] 0.38499381 0.5540976 0.6189360 0.7038888 0.7458120 0.7497106 0.7532466 #>  [114,] 0.39712271 0.4120540 0.4163113 0.5810122 0.5822639 0.6132914 0.6158299 #>  [115,] 0.35435109 0.5929945 0.6409466 0.7466486 0.7536487 0.8062845 0.8063108 #>  [116,] 0.77187639 0.8650855 0.8796042 0.9121860 0.9357466 0.9525159 0.9695714 #>  [117,] 0.07756028 0.7114367 0.7526438 0.7742332 0.8116212 0.8137644 0.8542375 #>  [118,] 1.19041914 1.2141894 1.5185929 1.5341899 1.6462569 1.7176351 1.7189360 #>  [119,] 0.53138751 0.5609407 0.5732097 0.6061052 0.6822381 0.6887681 0.7090245 #>  [120,] 0.32068801 0.5258091 0.5820011 0.7163313 0.7237800 0.7908022 0.8625156 #>  [121,] 0.34020298 0.4152613 0.4582276 0.4935404 0.5081293 0.5124799 0.5361685 #>  [122,] 0.57405067 0.5889689 0.6797884 0.6990223 0.7309994 0.7823073 0.7927531 #>  [123,] 0.33666138 0.5788307 0.5829259 0.6148634 0.6473578 0.6621554 0.7017721 #>  [124,] 0.29644584 0.5301766 0.6201916 0.6421829 0.6494131 0.6931524 0.7313619 #>  [125,] 0.48241197 0.5196003 0.5656590 0.5889555 0.6132564 0.6591737 0.7392045 #>  [126,] 0.46605218 0.4773795 0.5034634 0.6021930 0.6048939 0.6346587 0.6977931 #>  [127,] 0.20323997 0.4419713 0.5199618 0.6157475 0.6566976 0.6770332 0.6963098 #>  [128,] 0.31687833 0.3743147 0.4225441 0.4263335 0.4621086 0.5631667 0.5831151 #>  [129,] 0.30590078 0.3891708 0.4619813 0.4743702 0.5113681 0.5484977 0.5627725 #>  [130,] 0.50353986 0.6486193 0.7582146 0.7591707 0.8554706 0.9351821 0.9448134 #>  [131,] 0.58235805 0.9198371 0.9404661 1.0452457 1.0518449 1.1397299 1.1483398 #>  [132,] 0.49518000 0.5775959 0.6324941 0.8391159 0.8747331 0.9144607 0.9295341 #>  [133,] 0.41926516 0.6231343 0.6255044 0.6300798 0.6302052 0.7063400 0.7600671 #>  [134,] 0.68876809 0.7291732 0.8845793 0.9038406 0.9295140 0.9471297 0.9719420 #>  [135,] 0.26669317 0.2778810 0.4380426 0.4445260 0.4504961 0.4577259 0.5063313 #>  [136,] 0.26175281 0.3245447 0.3824383 0.3871593 0.4567185 0.4852641 0.4996095 #>  [137,] 0.32520768 0.5348742 0.5426628 0.5955231 0.6106341 0.6648021 0.6796123 #>  [138,] 0.32520768 0.3519927 0.5517830 0.5683898 0.6294851 0.6819070 0.6916528 #>  [139,] 0.32045924 0.3921396 0.4172196 0.5345784 0.5500722 0.5625694 0.5940630 #>  [140,] 0.30692156 0.3073443 0.3635231 0.5367756 0.6983399 0.9483610 0.9735214 #>  [141,] 0.38787424 0.4157918 0.4328330 0.4885014 0.5041253 0.5324410 0.5423890 #>  [142,] 0.27993007 0.5069419 0.6034219 0.6194762 0.7768723 0.7931353 0.8217801 #>  [143,] 0.47301150 0.6879790 0.6944391 0.7075517 0.7362073 0.7732823 0.7751191 #>  [144,] 0.57797793 0.5939850 0.7459645 0.7754655 0.8305251 0.8468802 0.8547660 #>  [145,] 0.46946157 0.5823580 0.6910797 0.7410968 0.9153400 0.9437818 0.9852970 #>  [146,] 0.24966952 0.5510922 0.5958184 0.6838727 0.7813242 0.7912078 0.7931186 #>  [147,] 0.28235641 0.3956943 0.4491776 0.4568257 0.4623513 0.5056649 0.5948210 #>  [148,] 0.82499372 1.4997708 1.5422035 1.5926127 1.6013853 1.6310784 1.6320758 #>  [149,] 0.38193186 0.5333180 0.5520415 0.6998819 0.7569549 0.7823899 0.8198854 #>  [150,] 0.67317015 0.7378815 0.7621470 0.7631021 0.7751324 0.7770626 0.7903959 #>  [151,] 0.12849490 0.4650493 0.4820731 0.5065269 0.5113681 0.5272499 0.5648669 #>  [152,] 0.54202685 0.5494303 0.7365226 0.7632292 0.9303327 0.9431324 0.9854346 #>  [153,] 0.42915617 0.4395942 0.5566320 0.5843233 0.5899228 0.6054740 0.6219143 #>  [154,] 0.36002442 0.4995779 0.5239163 0.5467808 0.5566002 0.5613377 0.5692549 #>  [155,] 0.36357904 0.3719647 0.3719959 0.3930774 0.4204668 0.4300679 0.4499429 #>  [156,] 0.43195638 0.4566508 0.4780128 0.4799244 0.5093210 0.5375773 0.5435857 #>  [157,] 0.46355946 0.5112254 0.7222256 0.7412947 0.7730781 0.7753231 0.8132253 #>  [158,] 0.33295554 0.3483190 0.5761269 0.6098461 0.6216261 0.6769773 0.7310674 #>  [159,] 0.27675841 0.3974439 0.4019016 0.4744580 0.4989236 0.5178175 0.5562917 #>  [160,] 0.57759587 0.5840102 0.6980532 0.7127551 0.8107059 0.8524776 0.8682414 #>  [161,] 0.36947910 0.5335939 0.5513021 0.5642240 0.5894134 0.6719379 0.7493271 #>  [162,] 0.24948524 0.4354120 0.4379842 0.5259315 0.5936290 0.6135262 0.7082474 #>  [163,] 0.52046977 0.6658130 0.7631021 0.8157529 0.8928326 0.9375440 0.9407307 #>  [164,] 0.58475495 0.6405659 0.6800038 0.6936820 0.6954692 0.7397742 0.8030696 #>  [165,] 0.60216961 0.7823818 0.7902047 0.8277930 0.8628085 0.9357502 1.0441205 #>  [166,] 0.46601655 0.6209022 0.6527457 0.7075517 0.7085625 0.9262622 0.9309219 #>  [167,] 0.32212109 0.5503447 0.5940007 0.6392179 0.6554335 0.7165164 0.7246878 #>  [168,] 0.66931109 0.8845793 0.8981984 0.9339522 0.9856423 1.0840526 1.0985286 #>  [169,] 0.44737806 0.5387420 0.5992186 0.6693111 0.7123755 0.7583221 0.7621017 #>  [170,] 0.20323997 0.5044014 0.5129997 0.5653578 0.5864086 0.6327429 0.6786519 #>  [171,] 0.19674549 0.4072703 0.4379842 0.5896887 0.5981203 0.6001332 0.7119375 #>  [172,] 0.80475070 0.9179482 1.0114771 1.2098588 1.2310479 1.3288276 1.3365500 #>  [173,] 0.55874796 0.8343304 0.8384774 0.8742661 0.8969407 0.9273751 1.0171973 #>  [174,] 0.40828619 0.5100211 0.5444901 0.6073661 0.6303735 0.7253498 0.7260148 #>  [175,] 0.30635282 0.3361951 0.3661315 0.4842041 0.4887388 0.5339686 0.5568250 #>  [176,] 0.45482592 0.5758079 0.5846060 0.6761617 0.7035729 0.7163313 0.7322830 #>  [177,] 0.33941166 0.6367696 0.6561160 0.8032264 0.8254523 0.8674514 0.8826126 #>  [178,] 0.32593493 0.6836159 0.6962272 0.7764468 0.7831291 0.8002124 0.8241421 #>  [179,] 0.46758102 0.5886175 0.5947455 0.6167487 0.6477516 0.7482869 0.7538018 #>  [180,] 0.27492467 0.4175239 0.4471996 0.6944027 0.7069295 0.7092759 0.7157008 #>  [181,] 0.30802604 0.4253323 0.4567185 0.4690741 0.4875416 0.5268799 0.5420315 #>  [182,] 0.16685135 0.5924674 0.6473578 0.7029586 0.7139989 0.7997050 0.8612393 #>  [183,] 0.47428194 0.4870075 0.5344230 0.5730872 0.6317037 0.6345546 0.6564712 #>  [184,] 0.39860692 0.4020245 0.5490741 0.5627365 0.6541495 0.6694821 0.6877022 #>  [185,] 0.48897594 0.5254873 0.5418958 0.5758079 0.6473904 0.6764035 0.7314327 #>  [186,] 0.16146285 0.3790003 0.4229651 0.4381175 0.4411566 0.4555945 0.4808970 #>  [187,] 0.82714846 1.0471523 1.0513088 1.2503810 1.2752189 1.2890784 1.3002082 #>  [188,] 0.44690597 0.5494303 0.7741139 0.9022905 1.0627406 1.0894799 1.0929537 #>  [189,] 0.44552205 0.6471102 0.7234943 0.7512533 0.7789052 0.8024495 0.8527191 #>  [190,] 0.35601253 0.6399335 0.6541405 0.7929885 0.8002896 0.8124025 0.8192316 #>  [191,] 0.44425682 0.6017961 0.6862166 0.6983002 0.7499062 0.7778113 0.8061181 #>  [192,] 0.55874796 0.6820061 0.7781054 0.8186298 0.9107937 1.0504322 1.0599517 #>  [193,] 0.37124830 0.4119332 0.4413771 0.6202454 0.6203725 0.6319449 0.6460832 #>  [194,] 0.48535575 0.6244048 0.6792399 0.8460214 1.0162985 1.0602623 1.0695366 #>  [195,] 0.52469509 0.7586078 0.8027293 0.9230348 0.9611886 0.9792277 0.9800104 #>  [196,] 0.97625274 1.0422585 1.0803181 1.2848466 1.2913758 1.2981244 1.3027723 #>  [197,] 0.46306923 0.6567649 0.8051015 0.8948777 0.9367242 1.0035550 1.0266027 #>  [198,] 0.65551035 0.7443093 1.0125237 1.0396995 1.0414434 1.0507267 1.0654647 #>  [199,] 0.78194162 0.7931512 0.8013241 0.8165244 0.8378260 0.9620814 1.0233202 #>  [200,] 0.67698706 0.7277619 0.8679365 0.9342649 0.9706898 0.9856167 1.0036080 #>  [201,] 0.46258459 0.4726763 0.5351907 0.6005949 0.6091945 0.6094730 0.6538292 #>  [202,] 0.73910587 0.7636422 0.7780801 0.8515315 0.9012777 0.9100570 0.9891566 #>  [203,] 0.47740839 0.5093903 0.5382855 0.5779779 0.7384801 0.7407002 0.7420218 #>  [204,] 0.38558273 0.5174883 0.5455288 0.7017956 0.7439664 0.8057290 0.8119663 #>  [205,] 0.43873810 0.5660715 0.6332838 0.7786371 0.7811786 0.8229032 0.8240597 #>  [206,] 1.09803542 1.1273171 1.3920817 1.4326160 1.5045856 1.5113356 1.5742941 #>  [207,] 0.34113258 0.3470762 0.3674173 0.4287912 0.4340325 0.4996370 0.5076246 #>  [208,] 0.46679218 0.5000811 0.6707920 0.8439947 0.8498087 0.9041268 0.9161000 #>  [209,] 0.83724131 0.8635335 1.0382973 1.0833042 1.1209649 1.1550701 1.1688428 #>  [210,] 0.45452368 0.5220259 0.5613377 0.6050673 0.7511711 0.8216852 0.8222942 #>  [211,] 0.26163227 0.6288670 0.8527684 0.9468191 0.9539657 1.0104754 1.0774615 #>  [212,] 0.43740849 0.4711864 0.5076441 0.5164308 0.6063599 0.6813264 0.7027677 #>  [213,] 0.39075227 0.4759278 0.6223248 0.6287639 0.7229932 0.7242253 0.7392411 #>  [214,] 0.22688730 0.3566676 0.3744287 0.4178510 0.4235199 0.4579893 0.4628250 #>  [215,] 0.35673820 0.3923058 0.4215584 0.4323929 0.4380352 0.5447846 0.5820753 #>  [216,] 0.63058336 0.6845125 0.7547701 0.7936362 0.8223303 0.8525165 0.9096004 #>  [217,] 0.49655814 0.6726737 0.6797262 0.7263106 0.7698749 0.7903959 0.7928186 #>  [218,] 0.58872484 0.6094730 0.6397100 0.6561160 0.6969952 0.7305262 0.7512533 #>  [219,] 0.21041551 0.5238341 0.5380195 0.5594419 0.5627320 0.5692549 0.5728212 #>  [220,] 0.48835350 0.7741229 0.7768336 0.8184989 0.8475582 1.2752944 1.3063973 #>  [221,] 0.35487785 0.3838300 0.3947866 0.4088795 0.4749069 0.5272110 0.5609260 #>  [222,] 0.46886791 0.5112254 0.6264006 0.6800038 0.7756732 0.9289308 0.9416504 #>  [223,] 0.45711793 0.5161575 0.5675430 0.6699333 0.6931006 0.7008266 0.7023681 #>  [224,] 0.31438193 0.4699711 0.5086461 0.5347073 0.5406928 0.5578813 0.6148881 #>  [225,] 1.04983401 1.0990089 1.1109603 1.2182219 1.2246234 1.2252913 1.2712182 #>  [226,] 0.29647367 0.4244234 0.5126670 0.5754211 0.7127209 0.7215507 0.7233327 #>  [227,] 0.89329496 0.9958333 1.0349032 1.0671169 1.1520933 1.1641544 1.1708587 #>  [228,] 0.34020298 0.4340325 0.4387867 0.5341475 0.5558903 0.5836701 0.5911615 #>  [229,] 0.30162655 0.3295060 0.3386710 0.4230845 0.4387908 0.4493788 0.4495711 #>  [230,] 0.32353293 0.3465564 0.4473779 0.4485927 0.4577259 0.5112452 0.5452148 #>  [231,] 0.56607150 0.8392834 0.8711739 0.9181686 0.9379561 1.0530498 1.0575875 #>  [232,] 0.29163090 0.4800060 0.5359537 0.6524790 0.6593966 0.7054297 0.7102219 #>  [233,] 0.24169521 0.4008557 0.4393638 0.4706020 0.4827842 0.4834392 0.4950389 #>  [234,] 0.59716105 0.8057398 0.8614340 0.8772137 0.9178866 0.9299721 0.9343499 #>  [235,] 0.59899190 0.6854125 0.7063400 0.7216348 0.7291732 0.8195086 0.8229932 #>  [236,] 0.28299585 0.3880582 0.5748020 0.5965526 0.6507202 0.6640591 0.7235052 #>  [237,] 0.50353986 0.5865538 0.6052717 0.7034800 0.8133528 0.8461480 0.8539555 #>  [238,] 0.52239656 0.7391452 0.9136933 1.1739952 1.1883182 1.2449992 1.3633006 #>  [239,] 0.14552863 0.3814012 0.3938433 0.4176108 0.4180806 0.5135950 0.5137141 #>  [240,] 0.29644584 0.6118304 0.6798473 0.7171463 0.7894255 0.8421615 0.8807452 #>  [241,] 0.40202448 0.4348031 0.4973907 0.6253925 0.6612110 0.6814466 0.7151039 #>  [242,] 0.23112638 0.4287912 0.4316440 0.4540357 0.4678999 0.4707085 0.5375458 #>  [243,] 0.45748258 0.4834558 0.5420706 0.7322758 0.7796438 0.7934319 0.8434409 #>  [244,] 0.35229230 0.4548259 0.5021798 0.5254873 0.5426257 0.5812968 0.6338301 #>  [245,] 0.59784070 0.7823937 0.8406975 0.8487061 0.8956495 0.9605392 0.9837971 #>  [246,] 0.29087950 0.5725136 0.6222772 0.6848530 0.7133056 0.7464785 0.7466587 #>  [247,] 0.37726153 0.4791606 0.5056090 0.5421494 0.5436565 0.6344152 0.6968951 #>  [248,] 0.56752002 0.6909313 0.7304347 0.7545064 0.8227176 0.8362974 0.8682414 #>  [249,] 0.29442145 0.5291721 0.5336422 0.5477219 0.6118846 0.7055946 0.7597611 #>  [250,] 0.37099608 0.4723750 0.5122175 0.5293359 0.5874356 0.6010255 0.6401347 #>  [251,] 0.38496416 0.5513021 0.5717612 0.5943405 0.6576633 0.6832439 0.6846858 #>  [252,] 1.34047149 1.4997708 1.6034987 1.7283542 1.7360389 1.7520621 1.7748813 #>  [253,] 0.41549984 0.4358463 0.4473779 0.4986095 0.5073989 0.5201396 0.5705962 #>  [254,] 0.40390017 0.5163987 0.5313875 0.5729650 0.5944944 0.6233748 0.6583955 #>  [255,] 0.46942978 0.6402515 0.6461706 0.6708887 0.6909313 0.7039857 0.7148854 #>  [256,] 0.48381800 0.5943405 0.6307813 0.6409113 0.7957929 0.7963151 0.8026546 #>  [257,] 0.33690627 0.5642240 0.6286296 0.6331563 0.6468588 0.6934045 0.7060469 #>  [258,] 0.53808504 0.5456561 0.5840102 0.6076327 0.6225163 0.6383899 0.6699496 #>  [259,] 0.12849490 0.3799572 0.4609732 0.5030033 0.5137681 0.5487179 0.5627725 #>  [260,] 0.15728306 0.2452248 0.2951984 0.4147482 0.4172196 0.5790325 0.5958184 #>  [261,] 0.21957739 0.3651112 0.4593203 0.5248565 0.5297885 0.5344838 0.5420716 #>  [262,] 0.75759460 0.8252585 1.0343760 1.0499335 1.0626138 1.0825968 1.1187283 #>  [263,] 0.57158582 0.6324941 0.6546816 0.6565199 0.7147322 0.7271090 0.7361959 #>  [264,] 0.29647367 0.5275176 0.5449341 0.6471500 0.6841120 0.6873679 0.7102833 #>  [265,] 0.51615750 0.5570835 0.6274306 0.6650388 0.6707144 0.6942183 0.7353209 #>  [266,] 0.51484090 0.5566002 0.5613393 0.5682984 0.6535853 0.6984804 0.7745099 #>  [267,] 0.36700677 0.5313629 0.5404376 0.5485018 0.5504509 0.5892245 0.5932105 #>  [268,] 0.43773039 0.4629880 0.4878991 0.5618759 0.7370038 0.7499062 0.8097446 #>  [269,] 0.40828619 0.4973929 0.5655989 0.7167360 0.7470190 0.7717553 0.8252099 #>  [270,] 0.39483025 1.0208738 1.2317838 1.2844192 1.2887596 1.2994927 1.4174936 #>  [271,] 0.36490314 0.6867866 0.7161329 0.7189079 0.8093363 0.8141923 0.8179662 #>  [272,] 0.37802975 0.5939646 0.6195542 0.6318619 0.6495393 0.6613567 0.6769237 #>  [273,] 0.47929651 0.6208282 0.6775754 0.7060469 0.7277400 0.7417195 0.7589777 #>  [274,] 0.26946458 0.4270406 0.4383471 0.4792524 0.5688716 0.5777504 0.5949558 #>  [275,] 0.47929651 0.5587160 0.6409113 0.6914182 0.6924478 0.7785106 0.9131072 #>  [276,] 0.73143275 1.0259405 1.0969772 1.1182359 1.1185581 1.1346456 1.1458923 #>  [277,] 0.05867881 0.2490766 0.3401208 0.3790003 0.3875356 0.4076604 0.4088428 #>  [278,] 0.14772488 0.5041253 0.5508537 0.5523577 0.5979467 0.6467127 0.6822051 #>  [279,] 0.35199267 0.4299080 0.4789517 0.5123063 0.5426628 0.5624826 0.6571517 #>  [280,] 0.44995312 0.7355545 0.7356902 0.8168571 0.8993939 0.9105631 0.9214428 #>  [281,] 0.89283255 1.0060287 1.0433599 1.0498633 1.0757157 1.1162759 1.1177607 #>  [282,] 1.01288077 1.0186126 1.5629295 1.5783709 1.6320758 1.6853571 1.6922933 #>  [283,] 0.40085574 0.4809583 0.4903618 0.4971113 0.5002408 0.5077745 0.5346704 #>  [284,] 0.16146285 0.3401208 0.3403236 0.3588919 0.3753667 0.4102269 0.4643010 #>  [285,] 0.52034831 0.5346995 0.5833142 0.6061052 0.6302052 0.6395986 0.6461209 #>  [286,] 0.68599173 0.6909026 0.7497212 0.8047507 0.8578138 0.8905917 0.9153062 #>  [287,] 0.63818365 0.7116927 0.7227868 0.7488101 0.7528384 0.8560135 0.8614176 #>  [288,] 0.37228242 0.4150193 0.4609321 0.5123063 0.5517830 0.5991971 0.6250045 #>  [289,] 0.56256074 0.9115159 0.9253841 1.0036080 1.0088851 1.0095981 1.0423970 #>  [290,] 0.26165504 0.3736180 0.3781773 0.5586554 0.5897470 0.6435305 0.6578760 #>  [291,] 0.51080636 0.5256057 0.5259613 0.5406892 0.5821742 0.5896420 0.5984452 #>  [292,] 0.30292695 0.3496016 0.5026718 0.5043026 0.5205412 0.5463777 0.5635029 #>  [293,] 0.31160635 0.4215584 0.4838180 0.5138689 0.6146040 0.6226107 0.6324504 #>  [294,] 0.37996685 0.4611641 0.5248256 0.5606239 0.5633589 0.5668027 0.5841823 #>  [295,] 1.02835770 1.0581307 1.1528689 1.1624162 1.1655619 1.1806057 1.2092332 #>  [296,] 0.29773455 0.3981614 0.4176108 0.4276784 0.4403556 0.5144100 0.5649197 #>  [297,] 0.57579117 0.8288751 0.8313188 0.9113484 0.9348209 0.9538773 0.9907788 #>  [298,] 0.32793806 0.3483190 0.4910467 0.5280518 0.5615230 0.5674431 0.6254158 #>  [299,] 0.44398136 0.4890921 0.5936290 0.6189360 0.7382115 0.7397733 0.7410095 #>  [300,] 0.27147990 0.2853452 0.3791556 0.4967779 0.5842833 0.5866005 0.6797884 #>  [301,] 0.17095184 0.4160726 0.4230845 0.4286917 0.5197850 0.5631796 0.5657330 #>  [302,] 0.28036224 0.3880582 0.5037481 0.5137642 0.5597055 0.6664396 0.7303743 #>  [303,] 0.42130722 0.4580556 0.4774084 0.5759969 0.5887998 0.5924145 0.6600076 #>  [304,] 0.39449617 0.5378301 0.5918389 0.6269904 0.6726737 0.6928475 0.7149997 #>  [305,] 0.38040428 0.5476001 0.5647197 0.5698525 0.5948210 0.6124112 0.6494131 #>  [306,] 0.38693099 0.4348031 0.4617125 0.4971803 0.5521856 0.5768874 0.5787542 #>  [307,] 0.29700067 0.3600244 0.4243254 0.5014178 0.5220259 0.5869470 0.5902108 #>  [308,] 0.23620717 0.3800295 0.3914411 0.4531267 0.4900331 0.5026718 0.5400989 #>  [309,] 0.44761922 0.5130763 0.5144305 0.5529191 0.5662792 0.5811459 0.6066404 #>  [310,] 0.33498796 0.3784312 0.3800295 0.3809867 0.5006344 0.5648400 0.5947074 #>  [311,] 0.21041551 0.3500838 0.4315974 0.4787380 0.5239163 0.5515448 0.5836575 #>  [312,] 0.56752002 0.5868534 0.6589654 0.7307854 0.8412036 1.0033638 1.0466561 #>  [313,] 0.56273200 0.5943037 0.6208837 0.6231956 0.6344449 0.6794159 0.6859004 #>  [314,] 0.40835558 0.4365672 0.5100292 0.5322726 0.5480094 0.5532005 0.5745854 #>  [315,] 0.05867881 0.2029701 0.3436838 0.3753667 0.3939012 0.4229651 0.4279485 #>  [316,] 0.70785140 0.7443093 0.7606039 0.8305217 0.8764391 0.9283156 0.9301136 #>  [317,] 0.46255599 0.5043094 0.6287639 0.6798473 0.6931524 0.7113152 0.7237908 #>  [318,] 0.57410363 0.7715317 0.8307570 0.8406361 0.8651307 0.8825514 0.9027223 #>  [319,] 0.76753263 0.7826809 0.8200794 0.8953125 0.9055616 0.9133162 0.9228475 #>  [320,] 0.30734433 0.4124799 0.5353525 0.7162853 0.7467847 0.7718316 0.9329598 #>  [321,] 0.42280590 0.4444747 0.4492746 0.5631586 0.6041500 0.6163355 0.6279481 #>  [322,] 0.36492801 0.4428622 0.4714141 0.5042517 0.6626809 0.6696169 0.6757549 #>  [323,] 0.31101054 0.4294652 0.4685132 0.4797946 0.7488101 0.7936362 0.8947338 #>  [324,] 0.99310719 1.1469699 1.3002623 1.3247661 1.3660572 1.3830162 1.3920133 #>  [325,] 0.32054405 0.4375198 0.5155995 0.6199586 0.6875151 0.6950810 0.7305262 #>  [326,] 0.55905651 0.6194762 0.6305834 0.6607772 0.7947337 0.8437476 0.9138682 #>  [327,] 0.42562767 0.6381836 0.6423317 0.7583676 0.8369600 0.8378752 0.8652774 #>  [328,] 0.74753560 0.7507450 0.8382929 0.8889748 0.9218201 0.9361186 0.9781382 #>  [329,] 0.71155611 0.8004506 0.8751916 0.9258767 1.0008713 1.0945535 1.0956736 #>  [330,] 0.35927285 0.4559176 0.4906371 0.5005976 0.5110617 0.5345784 0.5406928 #>  [331,] 0.90180818 0.9489577 1.0013407 1.1084289 1.3554378 1.4443218 1.4957971 #>  [332,] 0.43638945 0.4580556 0.4834392 0.5201555 0.5444178 0.5720773 0.5829828 #>  [333,] 0.41416703 0.4357690 0.5712033 0.5779091 0.6874733 0.7133251 0.7578981 #>  [334,] 0.39347128 0.4363374 0.4433992 0.5338805 0.5379377 0.5390361 0.5814526 #>  [335,] 0.42291393 0.4776945 0.4935992 0.5232087 0.5248256 0.5260113 0.5306993 #>  [336,] 0.34967694 0.4660522 0.6505158 0.7033406 0.7258033 0.7439011 0.7482350 #>  [337,] 0.45169032 0.4808970 0.4857631 0.5062963 0.5088315 0.5274574 0.5859753 #>  [338,] 0.43649923 0.5682984 0.5886064 0.8073762 0.8176553 0.8746955 0.9019593 #>  [339,] 1.30456873 1.4456540 1.4602889 1.5952132 1.6620916 1.7329348 1.7377458 #>  [340,] 0.49158755 0.6385201 0.6578698 0.7336769 0.7706739 0.7816575 0.9613774 #>  [341,] 0.45574689 0.4782438 0.4792285 0.5199276 0.5556153 0.5611019 0.5899783 #>  [342,] 0.48214399 0.5021798 0.5162889 0.6569005 0.7035729 0.7192074 0.7377894 #>  [343,] 1.03456864 1.3098166 1.3727910 1.3911458 1.4666401 1.4759330 1.4940538 #>  [344,] 1.05656901 1.1742886 1.1938989 1.2278827 1.2380360 1.2562630 1.2948441 #>  [345,] 0.71763628 0.9007349 1.0208738 1.0983237 1.1399271 1.1518867 1.1523270 #>  [346,] 0.51601221 0.5468746 0.6115310 0.6456748 0.6725610 0.7127783 0.7163930 #>  [347,] 0.29392131 0.4182906 0.4407556 0.4440988 0.5135950 0.5507103 0.5658368 #>  [348,] 0.28134272 0.3526916 0.4624803 0.4759521 0.4819793 0.5183311 0.5532005 #>  [349,] 0.48033607 0.5505394 0.5659338 0.5693707 0.6345543 0.6938383 0.7099301 #>  [350,] 0.40404174 0.4379438 0.4720437 0.5408734 0.6090332 0.6103032 0.6158299 #>  [351,] 0.32111455 0.4160937 0.5520415 0.5930383 0.6120536 0.6136725 0.6305555 #>  [352,] 0.57218501 0.6584236 0.6761617 0.7729971 0.8637274 0.8670832 0.9150306 #>  [353,] 0.46245091 0.5100211 0.5321872 0.6072052 0.7717553 0.7922072 0.8176312 #>  [354,] 0.30206275 0.3873719 0.4105327 0.4723750 0.5017887 0.6408197 0.6752556 #>  [355,] 0.84980867 1.0403482 1.0812476 1.0964879 1.2082854 1.2633341 1.2857368 #>  [356,] 0.44103872 0.4710623 0.5038891 0.5196003 0.5470151 0.5584398 0.6012620 #>  [357,] 0.55041092 0.5625607 0.9096004 1.0355440 1.0740861 1.0849843 1.1327427 #>  [358,] 0.39853905 0.4380426 0.4907713 0.5128223 0.5423349 0.5631796 0.5675767 #>  [359,] 0.38040428 0.4854956 0.5539536 0.5782477 0.5896420 0.5950057 0.6235567 #>  [360,] 0.84329980 1.0291301 1.0685790 1.1093940 1.1143814 1.2444170 1.2859548 #>  [361,] 0.77033499 0.8182154 0.8811370 1.3339816 1.6486668 1.6691565 1.7422456 #>  [362,] 0.40684390 0.4380638 0.4678999 0.5214361 0.5327495 0.5910466 0.6188674 #>  [363,] 0.42915617 0.4360841 0.5333507 0.5682801 0.5884604 0.6019232 0.6519419 #>  [364,] 0.43121893 0.5393862 0.5932476 0.6449839 0.6634944 0.6719162 0.6738740 #>  [365,] 0.47106644 0.5493634 0.5651214 0.5820767 0.6000353 0.6293054 0.6817027 #>  [366,] 0.37367448 0.3823851 0.3849642 0.5456781 0.5792774 0.6201666 0.6278482 #>  [367,] 0.83454717 0.8538146 0.9857327 1.0204089 1.0306057 1.1275377 1.1473774 #>  [368,] 0.29392131 0.4616058 0.4747718 0.5525259 0.5930383 0.5930880 0.5954613 #>  [369,] 0.40899445 0.6983002 0.7115561 0.8154655 0.8481833 1.0169678 1.0224233 #>  [370,] 0.34967694 0.5594160 0.6021930 0.6157644 0.6464671 0.7022336 0.7184673 #>  [371,] 0.15697035 0.3391935 0.4286224 0.4549596 0.4780959 0.5062963 0.5265781 #>  [372,] 0.42176201 0.4710949 0.4729649 0.5543561 0.6118846 0.6487273 0.6707144 #>  [373,] 0.57233514 0.8076494 0.8116492 0.8511541 0.8764766 0.9149258 0.9258767 #>  [374,] 0.24579558 0.3890920 0.3948862 0.4087001 0.4451597 0.4916355 0.4945847 #>  [375,] 0.52844561 0.6612611 0.7536487 0.8952293 0.9126869 0.9428899 0.9642803 #>  [376,] 0.48535575 0.6549188 0.7078514 0.7277400 0.7516739 0.8203112 0.8643458 #>  [377,] 0.35191762 0.3924935 0.4315884 0.4710623 0.4910250 0.5562699 0.5751814 #>  [378,] 0.27125508 0.3650501 0.4933270 0.6960497 0.7336769 0.7397856 0.7793065 #>  [379,] 0.27513661 0.3501769 0.3598838 0.4640877 0.5144305 0.5435650 0.5445489 #>  [380,] 0.33171703 0.5871431 0.7056785 0.7902047 0.8372413 0.8491255 0.9005382 #>  [381,] 0.20099535 0.4471996 0.5627365 0.6329105 0.6612110 0.6911728 0.7091884 #>  [382,] 0.57093393 0.6165863 0.6251693 0.6518280 0.7130948 0.7613614 0.7948998 #>  [383,] 0.19285204 0.3980170 0.4377304 0.4510730 0.6107803 0.6504235 0.6535431 #>  [384,] 0.37851713 0.4286224 0.4795848 0.5387780 0.5580139 0.5945151 0.6099575 #>  [385,] 0.43542357 0.4493306 0.4890997 0.6392179 0.6673500 0.6822664 0.7000399 #>  [386,] 0.78239374 0.8239880 0.8554854 0.9506240 0.9508255 0.9587136 0.9758611 #>  [387,] 0.52707606 0.9150889 0.9466077 1.0109559 1.0232562 1.0397404 1.0562115 #>  [388,] 0.32793806 0.4677002 0.5117745 0.5761269 0.6130378 0.7008266 0.7084863 #>  [389,] 1.40211196 1.5798818 1.6170981 1.6940082 1.7354727 1.7932272 1.8359999 #>  [390,] 0.38558273 0.4186803 0.4421464 0.4429319 0.5866877 0.6161167 0.6356744 #>  [391,] 0.70666625 0.7481876 0.9713870 1.0633245 1.0794468 1.0874136 1.1013965 #>  [392,] 0.24078963 0.2904994 0.3607357 0.4507354 0.4617434 0.5006344 0.5081447 #>  [393,] 0.27125508 0.5096868 0.6961663 0.7002642 0.7816575 0.8586622 0.8600860 #>  [394,] 0.37774687 0.5014178 0.5380195 0.5515448 0.5867790 0.6056582 0.6231956 #>  [395,] 0.46946157 0.6225936 0.6681706 0.6926448 0.7385542 0.7408482 0.7536624 #>  [396,] 0.33969444 0.3530058 0.3890920 0.4178510 0.4782951 0.4827842 0.4878566 #>  [397,] 0.48972888 0.6486193 0.6622620 0.8432998 0.8500171 0.8893725 0.8930154 #>  [398,] 0.25082367 0.4569831 0.5141743 0.5489707 0.5573514 0.5633589 0.5975123 #>  [399,] 0.20621452 0.3501769 0.3607357 0.4830591 0.5137239 0.5364534 0.5638799 #>  [400,] 0.43353317 0.4458385 0.4494064 0.6437086 0.6634944 0.6711678 0.7543314 #>  [401,] 0.26175281 0.3920234 0.4122170 0.4186007 0.4253323 0.4275688 0.4461322 #>  [402,] 0.39249347 0.5019532 0.5042018 0.5123282 0.5221750 0.5352627 0.5615959 #>  [403,] 0.35443127 0.4741565 0.4839769 0.5969740 0.6160277 0.6210357 0.6322780 #>  [404,] 0.66581305 1.1448378 1.1615457 1.2527696 1.2983249 1.3692350 1.4469763 #>  [405,] 0.76419437 0.7741229 0.9111613 1.3743672 1.4098187 1.4182194 1.4823273 #>  [406,] 0.91985687 0.9814288 0.9911837 1.0176391 1.0983237 1.1299254 1.1695611 #>  [407,] 0.68396498 0.8837073 1.0289055 1.0387879 1.2214178 1.2722625 1.2799205 #>  [408,] 0.46354164 0.5229255 0.5358830 0.5573950 0.5690407 0.5897527 0.5943082 #>  [409,] 0.80634889 0.8250681 1.0404061 1.1664488 1.1836738 1.2187063 1.3061876 #>  [410,] 0.68708076 0.6941433 0.7033629 0.7264231 0.7745785 0.8907778 0.9024532 #>  [411,] 0.42633348 0.5053583 0.5359830 0.5413206 0.5562699 0.5615959 0.5709906 #>  [412,] 0.48796335 0.7009550 0.7059586 0.7485322 0.7497346 0.7817857 0.8330518 #>  [413,] 0.36904676 0.4225441 0.5494433 0.5552377 0.5573950 0.5792523 0.5929455 #>  [414,] 0.85715970 0.8650144 0.9008921 0.9708051 1.0430745 1.1055397 1.1197629 #>  [415,] 0.46096316 0.5327495 0.5375458 0.6471500 0.6662178 0.6705548 0.6776156 #>  [416,] 0.37836726 0.3933264 0.4075681 0.4127442 0.5019532 0.5108064 0.5494433 #>  [417,] 0.74066649 0.7580450 0.7685517 0.8269363 0.9280671 0.9437900 0.9522568 #>  [418,] 0.23243546 0.4860105 0.5155698 0.5463777 0.5522548 0.5841054 0.5863324 #>  [419,] 0.46644993 0.4792068 0.4986095 0.5251612 0.5581422 0.6317721 0.6586216 #>  [420,] 0.33867095 0.3481923 0.4152613 0.4609252 0.4630629 0.5001637 0.5011480 #>  [421,] 0.73910587 0.7729699 0.8586171 1.0853930 1.1108051 1.1387024 1.1573752 #>  [422,] 0.49518000 0.5841653 0.7092425 0.7127551 0.7304347 0.7708605 0.8094257 #>  [423,] 0.15728306 0.2319978 0.2974772 0.3204592 0.5013198 0.5531176 0.6117639 #>  [424,] 0.55537719 0.5743298 0.5793084 0.6005949 0.6486798 0.6654777 0.6822051 #>  [425,] 0.26135719 0.4489088 0.4683921 0.4772735 0.4920899 0.5137445 0.5221750 #>  [426,] 0.17723329 0.2803670 0.4365672 0.4624803 0.4782438 0.4799472 0.5193904 #>  [427,] 0.19913628 0.4141670 0.4622827 0.4885014 0.5146726 0.6064078 0.6145742 #>  [428,] 0.33295554 0.5615230 0.5989279 0.6425851 0.6467511 0.7062238 0.7395510 #>  [429,] 0.37035864 0.3814012 0.4259539 0.4403556 0.4440988 0.5256057 0.5768138 #>  [430,] 0.26946458 0.5105437 0.5613986 0.6007448 0.6015752 0.6055522 0.6136725 #>  [431,] 1.32370995 1.5132775 1.5275518 1.5508230 1.6235463 1.6608998 1.7455921 #>  [432,] 0.33376947 0.4423360 0.6570583 0.6945424 0.7048215 0.7066267 0.7166568 #>  [433,] 0.27937637 0.3040250 0.3322494 0.4376507 0.4531267 0.4535469 0.4628250 #>  [434,] 0.29885260 0.4802242 0.4809262 0.5175534 0.5182935 0.5290614 0.5729650 #>  [435,] 0.25583095 0.2778810 0.3391329 0.4358463 0.4485927 0.4582276 0.5128223 #>  [436,] 0.32080355 0.6051186 0.6708420 0.6738740 0.8329444 0.8868077 0.8927669 #>  [437,] 0.30292695 0.4485263 0.4842653 0.4900331 0.5328713 0.5522548 0.5563813 #>  [438,] 0.26789232 0.4363374 0.4551977 0.4874658 0.4901474 0.4970839 0.5180333 #>  [439,] 0.46306923 0.6660175 1.1013595 1.1159582 1.1202500 1.1407509 1.1541108 #>  [440,] 0.65872584 0.7702600 0.9377506 0.9590155 1.1328342 1.1394068 1.1476552 #>  [441,] 0.76419437 0.8475582 0.8851376 1.2410361 1.2844192 1.3206023 1.4836311 #>  [442,] 0.44883549 0.4677002 0.4910467 0.6225936 0.6944641 0.7271523 0.7423411 #>  [443,] 0.39121500 0.4109332 0.4998102 0.5468746 0.5796688 0.6941950 0.7369064 #>  [444,] 0.34977707 0.4157918 0.5146726 0.5521856 0.5712033 0.5807750 0.6253925 #>  [445,] 0.33925735 0.3559825 0.3635790 0.4271990 0.4476017 0.4991553 0.5433107 #>  [446,] 0.44731229 0.6288670 0.8032654 0.8569672 0.9273488 0.9522568 0.9885957 #>  [447,] 0.65896539 0.7043495 0.7069489 0.8138868 0.8199862 0.8227176 0.8232055 #>  [448,] 0.48033607 0.4904839 0.5146017 0.5306993 0.5348742 0.5709234 0.5867342 #>  [449,] 0.45748258 0.7280487 0.7657059 0.7709302 0.8135025 0.8622437 0.9814953 #>  [450,] 0.29645450 0.3799285 0.3883025 0.4915331 0.5641362 0.5871736 0.5913079 #>  [451,] 0.29706129 0.4199275 0.4357442 0.4839769 0.4970839 0.5266530 0.5331775 #>  [452,] 0.76740458 0.9402681 0.9718117 0.9841824 1.0216351 1.0324704 1.0966535 #>  [453,] 0.18303997 0.3999096 0.4766640 0.4820215 0.5361614 0.5403808 0.5552377 #>  [454,] 0.32054405 0.3960272 0.4669216 0.6194159 0.6478778 0.6998860 0.7062842 #>  [455,] 0.33550818 0.3546689 0.3910042 0.4423901 0.4759521 0.4963266 0.5836575 #>  [456,] 0.33106627 0.3581924 0.3785171 0.4441292 0.4780959 0.5627309 0.5774062 #>  [457,] 0.33941166 0.6862324 0.7151039 0.7414645 0.7624093 0.8562163 0.8613264 #>  [458,] 0.57268721 0.7319019 0.8243789 0.8341502 0.8949508 0.9038406 0.9064387 #>  [459,] 0.19913628 0.3497771 0.3878742 0.4357690 0.6167919 0.6467127 0.6483591 #>  [460,] 0.61183040 0.6421829 0.6536921 0.6558324 0.7075148 0.7243779 0.7280375 #>  [461,] 0.33376947 0.5038891 0.5147232 0.5503724 0.5994053 0.6215030 0.6393210 #>  [462,] 0.35165084 0.4879633 0.6663645 0.7184673 0.7280375 0.9114404 0.9121455 #>  [463,] 0.22854118 0.3453246 0.6906990 0.6991535 0.7215507 0.7251420 0.7392411 #>  [464,] 0.61642628 0.7131145 0.7845989 0.8942563 0.9341427 0.9799408 0.9928346 #>  [465,] 0.46635775 0.6329047 0.6735363 0.7497212 0.7811220 0.7923282 0.9856167 #>  [466,] 0.21957739 0.4568239 0.4770144 0.4820658 0.5290814 0.6366807 0.6396889 #>  [467,] 0.50001179 0.5084815 0.5318620 0.5640055 0.5713808 0.6034219 0.6459211 #>  [468,] 0.33830069 0.4040250 0.4664499 0.4774983 0.5375773 0.5405532 0.5454753 #>  [469,] 0.36741734 0.3803742 0.4402410 0.5390041 0.5745741 0.5848975 0.5856340 #>  [470,] 0.45088281 0.4797946 0.4834416 0.5782994 0.6820155 0.7528384 0.7939564 #>  [471,] 0.22688730 0.2793764 0.4087001 0.4101414 0.4181031 0.4345125 0.4617848 #>  [472,] 0.55600014 0.6153757 0.6737409 0.6986513 0.7093067 0.7281755 0.7370173 #>  [473,] 0.57233514 0.6658022 0.7192569 0.7522827 0.7528814 0.7886239 0.8576885 #>  [474,] 0.34231667 0.3481923 0.3518489 0.3737479 0.4357544 0.4495711 0.4640877 #>  [475,] 0.90076890 1.1640426 1.2059277 1.2065046 1.2258280 1.2966874 1.3117405 #>  [476,] 0.43873810 0.5267036 0.5968160 0.6048939 0.6519038 0.6805291 0.7370173 #>  [477,] 0.43954581 0.4820731 0.4991256 0.5030033 0.5531176 0.5625694 0.5790325 #>  [478,] 0.39711992 0.4364992 0.6252200 0.7779193 0.7793857 0.9379817 1.0051609 #>  [479,] 0.37039167 0.4001186 0.4665721 0.5017887 0.5122175 0.6361574 0.7009433 #>  [480,] 0.68353095 0.7903048 0.8847623 0.9123756 1.0283925 1.0697326 1.1226155 #>  [481,] 0.28278408 0.4423901 0.4675819 0.5221498 0.5843233 0.5850588 0.6149278 #>  [482,] 0.52494371 0.5520984 0.5801738 0.6486377 0.6790444 0.7452561 0.8405231 #>  [483,] 0.20603007 0.3610064 0.4345125 0.4507354 0.4535469 0.4543073 0.4729427 #>  [484,] 0.61363895 0.7286979 0.8430731 0.8753495 0.8980128 0.9135072 0.9535924 #>  [485,] 0.41463031 0.5420706 0.6116068 0.7131145 0.7280487 0.7417379 0.8141923 #>  [486,] 0.20603007 0.3559695 0.4357544 0.4403870 0.4493788 0.4609252 0.4893326 #>  [487,] 0.76330132 0.8620684 0.8973395 1.0367212 1.0509129 1.0544378 1.1202500 #>  [488,] 0.41129292 0.5321872 0.5655989 0.6073661 0.6135129 0.7893189 0.8605687 #>  [489,] 0.41386962 0.4622827 0.5779091 0.5795918 0.6167919 0.6394504 0.6527457 #>  [490,] 0.46124544 0.4894517 0.4943991 0.5133157 0.5286370 0.5747412 0.5792686 #>  [491,] 0.44552205 0.6314427 0.7069304 0.7374639 0.7828188 0.8340967 0.8403938 #>  [492,] 0.24217203 0.3245447 0.3346870 0.4287953 0.4461322 0.4484048 0.4875416 #>  [493,] 0.60736749 0.6553385 0.7692317 0.8234628 0.8635568 0.9027218 0.9421544 #>  [494,] 0.39711992 0.5886064 0.7486694 0.7691199 0.7787885 0.8791463 0.8808331 #>  [495,] 0.49413793 0.5747414 0.5943037 0.7681145 0.8727405 0.8794185 0.9116325 #>  [496,] 1.49607297 1.5861527 1.6686636 1.8283803 1.9218233 1.9876473 2.0050099 #>  [497,] 0.53477229 0.5577900 0.5813127 0.6427882 0.6472395 0.6898853 0.7237974 #>  [498,] 0.29087950 0.5249098 0.5471709 0.6534698 0.7327872 0.7385813 0.7820765 #>  [499,] 0.29442145 0.4834856 0.5388610 0.5539173 0.6223676 0.6313462 0.6525163 #>  [500,] 0.49632662 0.5183311 0.5221498 0.5664336 0.5805350 0.6189645 0.6495393 #>  [501,] 0.31682523 0.3242785 0.4948362 0.5358696 0.5565653 0.5867342 0.6132679 #>  [502,] 0.35724949 0.4842623 0.6822445 0.7206731 0.7948998 0.8068566 0.8239880 #>  [503,] 0.37817729 0.4192170 0.4411566 0.4664123 0.4714141 0.4833013 0.4870075 #>  [504,] 0.45403190 0.5517753 0.5608126 0.6072052 0.7321818 0.7710507 0.7822276 #>  [505,] 0.41018927 1.0506313 1.0937016 1.1000199 1.1915076 1.2127384 1.2732300 #>  [506,] 0.40297457 0.5568250 0.5837825 0.6822381 0.6825368 0.6894365 0.7085792 #>  [507,] 0.58017381 0.6022665 0.7503567 0.7777512 0.7870693 0.8673386 0.8999370 #>  [508,] 0.42266175 0.4312194 0.5137642 0.5965526 0.6569491 0.6927412 0.8424444 #>  [509,] 0.79030481 1.0037249 1.0784667 1.1349819 1.1633015 1.2367422 1.2382928 #>  [510,] 0.63214709 0.6637335 0.6876510 0.7237908 0.7690136 0.8022468 0.8504181 #>  [511,] 0.71570380 0.7272372 0.8048525 1.0037050 1.0117104 1.0498340 1.0730562 #>  [512,] 0.42852161 0.4842623 0.5160122 0.5603246 0.6165863 0.6729953 0.7478425 #>  [513,] 0.68324392 0.7000163 0.7059295 0.7257262 0.7340767 0.7525981 0.7613614 #>  [514,] 0.32080355 0.4810978 0.7206119 0.8048525 0.8181447 0.8389928 0.8459320 #>  [515,] 0.40770017 0.4499531 0.8072181 0.8980128 0.9609399 0.9695221 0.9851041 #>  [516,] 0.72279282 0.7580450 0.8420381 0.8569672 0.9587136 0.9604423 0.9703785 #>  [517,] 0.20297014 0.2490766 0.3252361 0.3308940 0.3774536 0.4643010 0.4935992 #>  [518,] 1.25145751 1.5184600 1.6162123 1.6732285 1.6799324 1.6912570 1.7818943 #>  [519,] 0.46907603 0.5301230 0.6087416 0.6250045 0.6264006 0.6311689 0.6358109 #>  [520,] 0.45797125 0.6235613 0.7330695 0.8600802 0.8640683 0.8717018 0.8801920 #>  [521,] 0.53469947 0.6224733 0.7318212 0.7893189 0.8011613 0.8170873 0.8595541 #>  [522,] 0.42385771 0.4412836 0.4493306 0.5281943 0.5871445 0.5969403 0.6530146 #>  [523,] 0.26188844 0.5351442 0.5896388 0.6277912 0.6560409 0.6593966 0.6791250 #>  [524,] 0.33089398 0.3436838 0.3716194 0.3875356 0.4064944 0.4229139 0.4566508 #>  [525,] 0.24217596 0.2793517 0.4611609 0.4768785 0.4890968 0.4916355 0.5127400 #>  [526,] 0.49185505 0.5216118 0.5233089 0.6731701 0.6799561 0.6992660 0.7122276 #>  [527,] 0.07510491 0.2586206 0.3946372 0.4173669 0.4504325 0.4832636 0.5076441 #>  [528,] 0.47504204 0.6569491 0.6790444 0.7434560 0.7633232 0.7655209 0.7864035 #>  [529,] 0.73078538 0.9247628 0.9273488 1.0985240 1.1115501 1.1693887 1.1740246 #>  [530,] 0.67923990 0.7473751 0.7516739 0.7606039 0.7928186 0.9725130 1.0178765 #>  [531,] 0.62522000 0.7587888 0.7716370 0.7787885 0.8073762 0.8219424 0.8537089 #>  [532,] 0.45882152 0.5355878 0.6167487 0.7237974 0.7330695 0.7958642 0.8095968 #>  [533,] 0.39712271 0.4483890 0.4897307 0.4918550 0.5261354 0.5284111 0.5561967 #>  [534,] 0.37431474 0.3835664 0.4011932 0.4654235 0.4907713 0.5035367 0.5116652 #>  [535,] 0.54498818 0.7140093 0.7367919 0.7491237 0.8189749 0.8847430 0.9047899 #>  [536,] 0.44737806 0.4551738 0.4809262 0.5373775 0.5881784 0.6583955 0.7090245 #>  [537,] 0.39853905 0.5035367 0.5063313 0.5082424 0.5178175 0.5216080 0.5284276 #>  [538,] 0.30598353 0.4658682 0.4758378 0.6281156 0.7102219 0.7627024 0.7858383 #>  [539,] 0.55970554 0.5726872 0.6027349 0.7920620 0.7974711 0.8147120 0.8668477 #>  [540,] 0.41443381 0.5069419 0.5241613 0.5449882 0.6607772 0.6988109 0.8492748 #>  [541,] 0.88014576 1.0178907 1.2291397 1.5061313 1.5427793 1.5856126 1.6162123 #>  [542,] 0.54876539 1.0387879 1.1324308 1.2124210 1.2254065 1.2982751 1.3164621 #>  [543,] 0.32439959 0.4150193 0.4645366 0.4789517 0.5125095 0.5233893 0.5272110 #>  [544,] 0.27487374 0.3121158 0.4400257 0.5405610 0.5436565 0.5665927 0.5969740 #>  [545,] 0.54856731 0.5850588 0.6891595 0.8537089 0.8685284 0.8867372 0.8869957 #>  [546,] 0.44039920 0.4848456 0.5114794 0.7978006 0.8391413 0.8541287 0.8769374 #>  [547,] 0.31841837 0.4943991 0.5028094 0.5342298 0.5711391 0.5856839 0.5866983 #>  [548,] 0.62908504 0.6687548 0.8022468 0.8360750 0.9087749 0.9108743 0.9238968 #>  [549,] 0.33633520 0.4483890 0.4743810 0.4781805 0.4826466 0.5228004 0.5385922 #>  [550,] 0.59919711 0.6136647 0.7397742 0.8788123 0.8907704 0.8964448 0.9661846 #>  [551,] 0.30692156 0.4124799 0.4797284 0.5334560 0.7298373 0.8334108 0.8341589 #>  [552,] 0.51147937 0.6737409 0.7283992 0.7590143 0.7658816 0.7857767 0.7865388 #>  [553,] 0.26135719 0.3363352 0.3512355 0.4389290 0.4523172 0.4523223 0.4858230 #>  [554,] 0.91139058 1.0310712 1.0929537 1.2047192 1.2841038 1.3994075 1.4214629 #>  [555,] 0.31438193 0.3257769 0.4432204 0.5279865 0.5419063 0.5916621 0.6265223 #>  [556,] 0.32212109 0.4788309 0.6219646 0.6898146 0.6915945 0.7000399 0.7008904 #>  [557,] 0.43449632 0.4730115 0.5332431 0.6840444 0.7069304 0.7685336 0.7819460 #>  [558,] 0.35435109 0.3977339 0.6708420 0.6719162 0.7207436 0.8550800 0.8551901 #>  [559,] 0.39649404 0.4056908 0.4566484 0.4851110 0.5852497 0.6281156 0.6490069 #>  [560,] 0.99458747 1.0178907 1.0186126 1.0191208 1.1754704 1.2370860 1.3353388 #>  [561,] 0.73780310 0.8128445 0.8176553 0.8685284 0.9837414 1.0117104 1.0451265 #>  [562,] 0.26186702 0.3941664 0.3946372 0.4040059 0.4346852 0.4433198 0.4612454 #>  [563,] 0.43542357 0.4617045 0.5162889 0.5940007 0.6542033 0.6811738 0.7008904 #>  [564,] 0.40770017 0.7351824 0.7355545 0.8753495 0.8823479 0.8836848 0.8986552 #>  [565,] 0.30439682 0.3512355 0.3871421 0.4003691 0.4006582 0.4635416 0.4683921 #>  [566,] 0.56595647 0.5709339 0.7356902 0.9609399 0.9898578 1.0084496 1.0176787 #>  [567,] 0.40985302 0.4256277 0.5947455 0.6944027 0.7958642 0.7982770 0.7994761 #>  [568,] 0.31841837 0.4711864 0.4829015 0.5225680 0.5261215 0.5916308 0.5945926 #>  [569,] 0.42014688 0.5155995 0.5437317 0.5501571 0.5621750 0.5814526 0.6166183 #>  [570,] 0.36261091 0.4749069 0.4896651 0.4949244 0.5786072 0.6382516 0.6629426 #>  [571,] 0.35008384 0.3777621 0.3784312 0.3910042 0.4331639 0.4819793 0.5238341 #>  [572,] 0.43285234 0.4344963 0.5662659 0.6491792 0.7959564 0.8032654 0.8288345 #>  [573,] 0.19674549 0.3760089 0.5259315 0.5691005 0.6580457 0.6707544 0.7038888 #>  [574,] 0.43399605 0.4360841 0.4395942 0.4832636 0.4880371 0.5152591 0.5431408 #>  [575,] 0.85508004 0.8793428 0.9615040 1.0505356 1.1234614 1.1997599 1.2258280 #>  [576,] 0.25021844 0.5301766 0.5554556 0.5647197 0.6991535 0.7176691 0.7311356 #>  [577,] 0.35487785 0.4611641 0.4949244 0.5164432 0.5771793 0.6157015 0.6388694 #>  [578,] 0.24892651 0.3242785 0.4105327 0.5093210 0.5327251 0.5874356 0.6324111 #>  [579,] 0.30802604 0.5617099 0.6006375 0.6399335 0.6459777 0.6716067 0.6758599 #>  [580,] 0.85329757 0.8801458 0.9932011 1.0191208 1.0417901 1.0506313 1.0821026 #>  [581,] 0.52844561 0.6223163 0.6937501 0.7951236 0.8117435 0.8132976 0.8973272 #>  [582,] 0.26163227 0.4473123 0.8420381 0.8424063 0.8520938 0.9360690 0.9813897 #>  [583,] 0.31415084 0.7094237 0.7135253 0.7674046 0.7820765 0.8344121 0.8672234 #>  [584,] 0.25552242 0.4527396 0.4685132 0.5782994 0.7133056 0.7452899 0.7887546 #>  [585,] 0.69443914 0.7586078 0.8144558 0.8681961 0.9289308 0.9374525 0.9508108 #>  [586,] 0.53808504 0.6033917 0.7246964 0.7408025 0.7821061 0.7894783 0.8068367 #>  [587,] 0.20794539 0.5747414 0.5748020 0.6794159 0.7063612 0.7096876 0.7446053 #>  [588,] 0.32577689 0.5082946 0.5082989 0.5086461 0.5211039 0.5804279 0.6231019 #>  [589,] 0.47676469 0.5164308 0.5897509 0.6001332 0.7089613 0.7109591 0.7340331 #>  [590,] 0.50008113 0.5990230 0.7320285 0.7351824 0.8030696 0.8072181 0.8235728 #>  [591,] 0.57218501 0.6209966 0.8007698 0.9982560 1.0312452 1.0760968 1.1052554 #>  [592,] 0.42880543 0.5208046 0.5379288 0.5460563 0.5745741 0.6061445 0.6180022 #>  [593,] 0.36519545 0.4000315 0.4173396 0.5407534 0.5433270 0.5551389 0.5590254 #>  [594,] 0.40439867 0.4112624 0.4743810 0.5126670 0.5857225 0.6080280 0.6576969 #>  [595,] 0.91986891 1.0471523 1.0962508 1.1457483 1.2063461 1.2096386 1.2818818 #>  [596,] 0.59500565 0.7148854 0.7379580 0.7739052 0.8094257 0.8107059 0.8362974 #>  [597,] 0.82194235 1.0849930 1.2145556 1.2629403 1.2908457 1.3496315 1.3894470 #>  [598,] 0.33690627 0.3679544 0.4280680 0.5894134 0.6021839 0.6208282 0.6555040 #>  [599,] 0.58262761 0.6008988 0.7305949 0.7338809 0.8308169 0.8374191 0.8452652 #>  [600,] 0.43399605 0.4456016 0.5155698 0.5477997 0.6077991 0.6219143 0.6753819 #>  [601,] 0.60506728 0.7302607 0.7756808 0.8797810 0.9470350 0.9631616 1.0700479 #>  [602,] 0.32593493 0.4792285 0.4799472 0.5080980 0.5322726 0.6021226 0.6039506 #>  [603,] 0.65604089 0.6746200 0.6775397 0.7948843 0.8542375 0.9704047 0.9728632 #>  [604,] 0.33231838 0.3592729 0.4039050 0.4122170 0.4414478 0.4579893 0.4852641 #>  [605,] 0.29316252 0.3392573 0.3536436 0.4399865 0.4887359 0.4982067 0.5001500 #>  [606,] 0.83679265 0.8469814 0.8851508 0.9166844 1.0088851 1.2263677 1.2544270 #>  [607,] 0.76854388 0.7923282 0.8367926 0.8483389 0.8984769 0.9828325 0.9841403 #>  [608,] 0.53324310 0.5978407 0.6879790 0.7828188 0.7959564 0.8002629 0.8520938 #>  [609,] 0.44690597 0.7365226 0.9039323 0.9100012 0.9113906 0.9228475 0.9304846 #>  [610,] 0.26789232 0.4182155 0.5025165 0.5390361 0.5800269 0.5815716 0.5966373 #>  [611,] 0.56580200 0.6795234 0.6890756 0.7043495 0.7545064 0.8620071 0.8935188 #>  [612,] 0.37080109 0.3722054 0.3930774 0.4613165 0.4773540 0.4888534 0.4911732 #>  [613,] 0.84750678 0.8847430 0.9432073 0.9878426 1.0031528 1.0179961 1.0356788 #>  [614,] 0.41492306 0.4940675 0.6253834 0.6381218 0.6842904 0.7119517 0.7755235 #>  [615,] 0.45072024 0.4558588 0.4895479 0.4919001 0.5091485 0.5459968 0.5826496 #>  [616,] 1.18732030 1.2110640 1.2361110 1.2380360 1.2822861 1.3045687 1.3125648 #>  [617,] 0.45780567 0.5249098 0.6170434 0.6222772 0.6460896 0.8167483 0.8282113 #>  [618,] 0.29163090 0.3937905 0.4468319 0.5161140 0.6277912 0.6676670 0.6860621 #>  [619,] 0.26016348 0.2745817 0.3721806 0.4357442 0.5081759 0.5258651 0.5408570 #>  [620,] 0.44447466 0.6933832 0.7153387 0.7663746 0.7675326 0.7735789 0.7799644 #>  [621,] 0.33171703 0.5972364 0.6871728 0.6962401 0.7402222 0.7823818 0.7841900 #>  [622,] 0.27935169 0.4072987 0.4163113 0.4451597 0.4659561 0.4684110 0.4853470 #>  [623,] 0.47477177 0.5347266 0.5658368 0.6055522 0.6120536 0.6378061 0.6535431 #>  [624,] 0.66226203 0.7529468 0.7663246 0.8554706 0.9385181 0.9784023 1.0528652 #>  [625,] 0.41251476 0.5117745 0.5199276 0.5211797 0.5280518 0.5571889 0.6060217 #>  [626,] 0.66945601 0.8082124 0.8157529 0.8947934 0.9093647 0.9783872 0.9908390 #>  [627,] 0.70116770 0.7119517 0.7200968 0.7473022 0.7685439 0.7862799 0.8469814 #>  [628,] 0.29519842 0.2974772 0.4436954 0.5347723 0.5371710 0.6060097 0.6103223 #>  [629,] 0.19481641 0.4097905 0.4980947 0.5000118 0.5130763 0.5193904 0.6039506 #>  [630,] 0.45585884 0.5044109 0.5160934 0.5406976 0.5863324 0.5995646 0.6167798 #>  [631,] 0.41474824 0.4395458 0.4421464 0.4906371 0.5013198 0.5041168 0.5414372 #>  [632,] 0.29057698 0.3573658 0.3599168 0.3931620 0.4039050 0.4043936 0.4619813 #>  [633,] 0.67316926 0.7768336 0.9009444 1.1910133 1.1954297 1.2135391 1.2220785 #>  [634,] 0.55041092 0.7274719 0.9253841 1.0214112 1.0766071 1.1589518 1.2618424 #>  [635,] 0.46657209 0.6010255 0.6425716 0.7003910 0.7072415 0.7485606 0.7592790 #>  [636,] 0.44412917 0.4549596 0.4795848 0.4859473 0.5081744 0.5480094 0.5627410 #>  [637,] 0.91970024 1.0203991 1.1796746 1.1904191 1.2186310 1.2311420 1.2451331 #>  [638,] 0.41868025 0.5174883 0.5512099 0.5809064 0.6082092 0.6252683 0.7092452 #>  [639,] 0.30439682 0.3492437 0.4122193 0.4184817 0.4489088 0.4858230 0.4985720 #>  [640,] 0.24579558 0.3396944 0.4617848 0.4659561 0.4814010 0.4951638 0.5349157 #>  [641,] 0.25082367 0.3734730 0.3838300 0.4645366 0.5164432 0.5285997 0.5580892 #>  [642,] 0.40684390 0.4609632 0.4973929 0.5444901 0.5545381 0.5848975 0.5916572 #>  [643,] 0.41492306 0.4675810 0.5244642 0.5284839 0.5842833 0.6948972 0.7200968 #>  [644,] 0.27941887 0.3310663 0.3391935 0.4010472 0.4473181 0.4516903 0.4775186 #>  [645,] 0.67439476 0.7863468 0.8056699 0.8168571 0.8170959 0.9099256 0.9921083 #>  [646,] 0.55034466 0.6915945 0.7406665 0.7627618 0.8168280 0.9141672 0.9308950 #>  [647,] 0.47240257 0.4820658 0.5553772 0.5796688 0.5914164 0.6635223 0.6750074 #>  [648,] 0.26131817 0.2988526 0.3322494 0.3591994 0.3914411 0.4902615 0.5218686 #>  [649,] 0.35819237 0.3598838 0.4116118 0.4775186 0.5081744 0.5236091 0.5519487 #>  [650,] 0.32111455 0.3819319 0.5563963 0.5729979 0.6046723 0.6460554 0.6504235 #>  [651,] 0.50829459 0.6955363 0.7237800 0.7325308 0.7522087 0.7582351 0.7632292 #>  [652,] 0.56595647 0.6518280 0.8562963 0.8842466 0.9235141 0.9377506 0.9611886 #>  [653,] 0.46355946 0.4688679 0.4847671 0.5869157 0.6087416 0.6954692 0.7076619 #>  [654,] 0.48909967 0.5281943 0.6219646 0.6554335 0.7517141 0.7627618 0.7827973 #>  [655,] 0.76524354 0.8336802 0.9178866 1.1798504 1.2397083 1.2480568 1.3700990 #>  [656,] 0.42068847 0.5545774 0.5978056 0.6317115 0.6525163 0.6674976 0.7577862 #>  [657,] 0.41980594 0.4456016 0.4809583 0.5206930 0.5656590 0.6133254 0.6282834 #>  [658,] 0.37992855 0.4423075 0.4432204 0.4481779 0.4568193 0.5198903 0.5444287 #>  [659,] 0.29195256 0.3368837 0.3530870 0.3719959 0.3764694 0.3842973 0.4370949 #>  [660,] 0.39202341 0.3948862 0.4072987 0.4611609 0.4782951 0.4814010 0.4851833 #>  [661,] 0.29039540 0.3522923 0.4022364 0.5541733 0.5969403 0.6157475 0.6222588 #>  [662,] 0.33666138 0.4256233 0.5991461 0.6275177 0.6425851 0.6769773 0.7294826 #>  [663,] 0.38830152 0.5028539 0.5034634 0.5268799 0.5707602 0.5767881 0.6015356 #>  [664,] 0.39602715 0.4375198 0.4788309 0.6314427 0.6471102 0.6493712 0.7246878 #>  [665,] 0.54202685 0.7741139 0.8658882 0.8953125 0.9100012 0.9352679 0.9932252 #>  [666,] 0.75388508 0.8046442 0.8889724 0.9053398 0.9999897 1.0032998 1.0303009 #>  [667,] 0.33688374 0.3934713 0.4141342 0.4266323 0.4499429 0.4596798 0.4864058 #>  [668,] 0.45882152 0.5577900 0.6232106 0.8640683 0.9560542 1.0141776 1.0154513 #>  [669,] 0.35656176 0.3996581 0.4708138 0.5144100 0.5653578 0.6012620 0.6315405 #>  [670,] 0.37802975 0.4299080 0.5634630 0.7275405 0.7410968 0.7536500 0.7945570 #>  [671,] 0.40672803 0.4173669 0.4198059 0.4880371 0.4971113 0.4997584 0.5477997 #>  [672,] 0.72692876 0.9706719 1.0441205 1.1687629 1.2223616 1.2379451 1.2382128 #>  [673,] 0.40887948 0.5285997 0.5632034 0.5771793 0.6148634 0.6417328 0.6570734 #>  [674,] 0.32523609 0.3403236 0.3939012 0.4064944 0.4076604 0.4122994 0.4381175 #>  [675,] 0.36146784 0.3852774 0.4887359 0.5218188 0.5288019 0.5319760 0.5631667 #>  [676,] 0.37439528 0.3973100 0.4109332 0.5129201 0.5233893 0.5301230 0.6501041 #>  [677,] 0.25583095 0.3670068 0.4154998 0.4792068 0.5215293 0.5361685 0.5601039 #>  [678,] 0.54853180 0.5820011 0.6402676 0.7633013 0.8392914 0.8460153 0.9391645 #>  [679,] 0.71169265 0.7326171 0.7590143 0.8332108 0.8453021 0.8652774 0.9671847 #>  [680,] 0.47504204 0.5249437 0.6658772 0.6927412 0.7097793 0.8398521 0.8710399 #>  [681,] 0.15697035 0.3838515 0.4473181 0.5227852 0.5387780 0.5448878 0.5627410 #>  [682,] 0.52046977 0.5233089 0.6694560 0.7396316 0.7621470 0.8325586 0.8434820 #>  [683,] 0.23620717 0.2613182 0.3349880 0.4376507 0.4491710 0.5154816 0.5182935 #>  [684,] 0.37600894 0.3849938 0.4072703 0.4354120 0.4890921 0.5506037 0.5872709 #>  [685,] 0.19424838 0.5603246 0.6136389 0.6251693 0.6725610 0.8425907 0.8476725 #>  [686,] 0.19285204 0.3473729 0.4878991 0.5286005 0.5344180 0.5347266 0.5729979 #>  [687,] 0.26669317 0.3235329 0.3391329 0.4611479 0.4679357 0.5073989 0.5601039 #>  [688,] 0.29195256 0.3846466 0.3881952 0.4266323 0.4648014 0.4839721 0.4884518 #>  [689,] 0.75288139 0.8154655 0.8751916 0.8764766 0.8898245 0.9831371 1.0301574 #>  [690,] 0.24892651 0.3168252 0.3873719 0.6040635 0.6113531 0.6565168 0.6681040 #>  [691,] 0.48531044 0.5520984 0.6022665 0.6658772 0.8718112 0.9717690 1.0194818 #>  [692,] 0.43638945 0.4409299 0.5759969 0.5933341 0.5978056 0.6568031 0.6786847 #>  [693,] 0.49975837 0.5596718 0.5877228 0.5897509 0.6246000 0.6413234 0.6436289 #>  [694,] 0.72692876 0.9329452 0.9442355 0.9656824 1.0035334 1.0592012 1.1114934 #>  [695,] 0.37996685 0.4549827 0.4864058 0.5374963 0.5776435 0.6091945 0.6115515 #>  [696,] 0.21127051 0.4383471 0.4445260 0.4679357 0.4848315 0.4988260 0.5112452 #>  [697,] 0.35466894 0.3666392 0.4078329 0.4315974 0.4331639 0.4995779 0.5594419 #>  [698,] 0.38714206 0.4043987 0.4389290 0.5123282 0.5229255 0.5385922 0.5444218 #>  [699,] 0.47026142 0.5482637 0.5784525 0.6759504 0.6798270 0.6883781 0.7195045 #>  [700,] 0.26835905 0.3047915 0.4154044 0.4175232 0.4588073 0.5099229 0.5310791 #>  [701,] 0.71979860 0.8718112 0.9273751 1.1238500 1.1316304 1.1414003 1.1690461 #>  [702,] 0.19208548 0.3783673 0.4380352 0.5202819 0.5441640 0.5992319 0.6193202 #>  [703,] 0.18800702 0.3719647 0.4370949 0.4991553 0.5324410 0.5351907 0.5532837 #>  [704,] 0.35899249 0.3708011 0.3835664 0.3901952 0.4300679 0.4464990 0.4476017 #>  [705,] 0.23899681 0.2756387 0.2964545 0.4040059 0.4481779 0.5346704 0.5458267 #>  [706,] 1.04783436 1.1287887 1.1483398 1.1568887 1.2464863 1.2863301 1.3261657 #>  [707,] 0.26188844 0.4102297 0.4468319 0.4800060 0.5963536 0.6775397 0.7609252 #>  [708,] 0.33726252 0.4085803 0.4985720 0.5826496 0.5943082 0.6235700 0.6555040 #>  [709,] 0.53558777 0.5560001 0.6232106 0.6235613 0.6313175 0.6898853 0.7283992 #>  [710,] 0.41139347 0.4256233 0.5829259 0.6962401 0.7056785 0.7062238 0.7769617 #>  [711,] 0.68981456 0.7234943 0.7441239 0.8403938 0.9602548 0.9862784 0.9868777 #>  [712,] 0.73493260 0.8472202 0.8597953 0.8752983 0.8811370 0.9291718 1.1006391 #>  [713,] 0.21127051 0.3901952 0.4375253 0.4504961 0.4613165 0.4744580 0.4792524 #>  [714,] 0.55510233 0.7157038 0.7378031 0.8389928 0.8987329 1.1983548 1.2015437 #>  [715,] 0.30206275 0.3703917 0.5293359 0.5996253 0.6093408 0.6681040 0.6691864 #>  [716,] 0.43710668 0.5244642 0.5836701 0.5886175 0.6253834 0.7163206 0.7165319 #>  [717,] 0.48345578 0.6116068 0.7233970 0.7406071 0.7659614 0.7791587 0.8176044 #>  [718,] 0.61537571 0.7659614 0.8672518 0.8942477 0.9312638 0.9611901 1.0477763 #>  [719,] 0.20718907 0.2771811 0.3047915 0.4000315 0.4533851 0.4685595 0.5290814 #>  [720,] 0.38037421 0.4160726 0.4482299 0.4540357 0.4640625 0.5172776 0.5214361 #>  [721,] 0.35635425 0.3907523 0.5043094 0.5554556 0.6132218 0.6906990 0.7245906 #>  [722,] 0.51611397 0.5197850 0.5218355 0.5571655 0.5963536 0.6000947 0.6524790 #>  [723,] 0.82499372 1.0128808 1.2845540 1.2982751 1.4281727 1.5167170 1.5180963 #>  [724,] 0.65488694 0.6704927 0.7264231 0.9324755 1.0104835 1.0228112 1.0348616 #>  [725,] 0.48705270 0.5367756 0.5989762 0.6420617 0.6840779 0.7162853 0.7298373 #>  [726,] 0.56425120 0.5826276 0.6033917 0.7950448 0.8114512 0.8269363 0.8391981 #>  [727,] 0.22653388 0.3302201 0.4154044 0.5248565 0.5272064 0.5316061 0.5405330 #>  [728,] 0.26389565 0.4307807 0.4588073 0.4903618 0.5125312 0.5206930 0.5267481 #>  [729,] 0.40011856 0.5952966 0.6093408 0.6721278 0.6970826 0.7271112 0.7592790 #>  [730,] 0.54717086 0.7582110 0.8722083 0.8756748 0.8985295 0.9404245 1.0220494 #>  [731,] 0.29171054 0.4847671 0.4903076 0.6707920 0.7753231 0.8214549 0.8281629 #>  [732,] 0.59092893 0.5922141 0.6319449 0.6671393 0.6822445 0.7780801 0.8336798 #>  [733,] 0.55510233 0.7272372 1.0451265 1.0899133 1.2219712 1.2246234 1.2566521 #>  [734,] 0.40328656 0.4486017 0.4856274 0.5418958 0.5541733 0.5809064 0.5905127 #>  [735,] 0.38243981 0.4578057 0.6865319 0.7419477 0.7490240 0.7657059 0.7690994 #>  [736,] 0.29771358 0.3016265 0.3411326 0.3503381 0.4286917 0.4387867 0.4402410 #>  [737,] 0.58685342 0.7069489 1.0756205 1.0985240 1.0990692 1.1504657 1.1665054 #>  [738,] 0.18558019 0.3973100 0.4998102 0.5125095 0.5416997 0.5624826 0.5683898 #>  [739,] 0.47676469 0.5691005 0.5981203 0.7467847 0.7963972 0.8341589 0.8434736 #>  [740,] 0.48966513 0.4990395 0.5521895 0.5530759 0.5719127 0.6558082 0.6968951 #>  [741,] 0.35598250 0.3589925 0.4011932 0.4399865 0.4753504 0.4799649 0.4940856 #>  [742,] 0.53345601 0.6361161 0.6983399 0.7287083 0.7332115 0.7439276 0.7640470 #>  [743,] 0.43285234 0.4392924 0.4694298 0.6923151 0.7257262 0.7471913 0.7815560 #>  [744,] 0.75917071 0.9274277 0.9619235 1.0186761 1.1249077 1.1338802 1.1997856 #>  [745,] 0.18152960 0.1957971 0.4235199 0.4559176 0.4899982 0.4927228 0.4956376 #>  [746,] 0.24247399 0.2794189 0.3361951 0.3599093 0.4497131 0.4813826 0.5103667 #>  [747,] 0.27487374 0.3544313 0.4662689 0.4709810 0.5198701 0.5593353 0.5969086 #>  [748,] 0.58975270 0.5971753 0.6269904 0.6317037 0.6452388 0.6468738 0.7276981 #>  [749,] 1.05892816 1.0614190 1.2632755 1.3351365 1.4677852 1.5027885 1.5178777 #>  [750,] 0.07756028 0.6633503 0.7227617 0.7461769 0.7948843 0.8190308 0.8256740 #>  [751,] 0.42113733 0.5167969 0.6325829 0.6507291 0.7481876 0.7510397 0.7519371 #>  [752,] 0.37367448 0.4808764 0.5391860 0.5456561 0.5598049 0.5934364 0.6703414 #>  [753,] 0.40099761 0.4990395 0.5577792 0.5896976 0.6064078 0.6394504 0.6644540 #>  [754,] 0.46771789 0.6184250 0.6729916 0.6744800 0.6911374 0.6933832 0.7777778 #>  [755,] 0.40569085 0.5300789 0.6696169 0.6722027 0.7322407 0.7335610 0.7442075 #>  [756,] 0.41443381 0.5590565 0.6845125 0.7140093 0.7768723 0.8959242 0.9394272 #>  [757,] 0.35033811 0.4288054 0.4609732 0.4639865 0.4650493 0.5045223 0.5076246 #>  [758,] 0.29039540 0.3967127 0.4580609 0.4856274 0.5140156 0.5487522 0.5618277 #>  [759,] 0.31211583 0.3527218 0.3567889 0.3772615 0.4662689 0.5167295 0.5698466 #>  [760,] 0.62550442 0.6909026 0.7741165 0.8507377 0.8936872 0.9179482 0.9680439 #>  [761,] 0.41465725 0.5696764 0.5875087 0.5991461 0.6381773 0.6584482 0.6693524 #>  [762,] 0.36947910 0.4026400 0.5214670 0.6331563 0.6375243 0.6460832 0.6819199 #>  [763,] 0.55902535 0.5642512 0.6070243 0.6134010 0.6202454 0.6298365 0.6591737 #>  [764,] 0.63171146 0.7120582 0.7222590 0.8382929 0.9197002 0.9224501 0.9527348 #>  [765,] 0.28482475 0.5420315 0.5617099 0.6052717 0.6853870 0.6938775 0.7299632 #>  [766,] 0.65551035 0.9535352 0.9965357 1.0980309 1.1960071 1.2025509 1.2148534 #>  [767,] 0.43400236 0.4675819 0.4842653 0.5961777 0.6328655 0.6477358 0.6678797 #>  [768,] 0.19481641 0.4657468 0.4842376 0.5318620 0.5398479 0.5662792 0.5745212 #>  [769,] 0.31344568 0.3323184 0.3610064 0.3744287 0.4181031 0.4403870 0.4496057 #>  [770,] 0.50314434 0.5613393 0.5689064 0.6859004 0.7192989 0.7793857 0.8068408 #>  [771,] 0.28534521 0.3600480 0.5329999 0.5609500 0.5889689 0.6547016 0.6876261 #>  [772,] 0.27993007 0.5241613 0.5713808 0.6379296 0.6644709 0.7505821 0.8189749 #>  [773,] 0.40979050 0.4842376 0.5784525 0.6901354 0.7122162 0.7287667 0.7313732 #>  [774,] 0.59921865 0.6053702 0.6694252 0.6707544 0.6864353 0.7179171 0.7234545 #>  [775,] 0.51484090 0.6636098 0.7302607 0.7741165 0.8068408 0.8289731 0.8312553 #>  [776,] 0.28235641 0.3785802 0.4182906 0.4419846 0.4569047 0.4616058 0.5422474 #>  [777,] 0.36586366 0.4287953 0.4582472 0.4646109 0.5208046 0.5273791 0.5988802 #>  [778,] 0.37218059 0.4898051 0.5306798 0.6041500 0.6466223 0.6708797 0.6839659 #>  [779,] 0.48214399 0.5874592 0.6209966 0.6375057 0.6584236 0.7204023 0.7512784 #>  [780,] 0.36505008 0.4169392 0.4447088 0.4915876 0.5096868 0.7124419 0.7193505 #>  [781,] 0.60736749 0.7086176 0.9980114 1.1146102 1.1655619 1.1810370 1.1938989 #>  [782,] 0.47584683 0.5618759 0.6381547 0.7113617 0.7161329 0.7191747 0.7338988 #>  [783,] 0.36663921 0.5467808 0.5805350 0.5831395 0.6313156 0.6984804 0.7118241 #>  [784,] 0.37220541 0.3799572 0.4375253 0.4935404 0.5065269 0.5097294 0.5341475 #>  [785,] 0.67698706 0.8048461 0.9044901 0.9153062 1.0114771 1.0307976 1.0407293 #>  [786,] 0.36586366 0.5272499 0.5399433 0.5585134 0.5681938 0.5740424 0.5968160 #>  [787,] 0.44425682 0.8653591 0.8810030 0.9005579 0.9856085 0.9914559 1.0387393 #>  [788,] 0.52161182 0.5374572 0.7332386 0.7640470 0.8225009 0.8306533 0.8733624 #>  [789,] 0.40568773 0.4125148 0.5410793 0.5611019 0.5992800 0.6178867 0.6216261 #>  [790,] 0.73700377 0.7845989 0.9180609 0.9727283 1.0219778 1.0267216 1.0971110 #>  [791,] 0.41463031 0.6164263 0.7233970 0.8809378 0.9552388 1.0008277 1.0571906 #>  [792,] 0.44761922 0.4557469 0.4980947 0.6541853 0.6607397 0.6699518 0.6779744 #>  [793,] 0.67045423 0.7690668 0.8538146 0.9099256 1.0059648 1.1545511 1.1866953 #>  [794,] 0.41609369 0.4429319 0.4486017 0.5455288 0.5512099 0.5954613 0.6046723 #>  [795,] 0.23243546 0.4339198 0.4340024 0.4485263 0.5043026 0.5160934 0.5872580 #>  [796,] 0.28482475 0.6920794 0.7034800 0.7347639 0.7909774 0.8299110 0.8319290 #>  [797,] 0.43806377 0.4707085 0.5643793 0.5895720 0.5916572 0.6452580 0.6531233 #>  [798,] 0.45026217 0.5202819 0.5448821 0.5449341 0.5977752 0.6626809 0.6674704 #>  [799,] 0.56346304 0.6195542 0.6571517 0.6827666 0.7063955 0.7313732 0.8958601 #>  [800,] 0.62440475 0.6549188 0.7826283 0.9342707 0.9628701 0.9951750 1.0206394 #>  [801,] 0.44259397 0.6735363 0.7277619 0.7331014 0.8492748 0.8984769 0.9078187 #>  [802,] 0.90073485 0.9814288 1.0417901 1.0878500 1.2428404 1.2474951 1.2625845 #>  [803,] 0.82346281 0.8698409 0.9549817 0.9891219 1.0644350 1.1146102 1.1396168 #>  [804,] 0.19579715 0.2931847 0.3530058 0.3566676 0.4568193 0.5184458 0.5195556 #>  [805,] 0.27513661 0.3518489 0.4116118 0.4630629 0.5124799 0.5137239 0.5477790 #>  [806,] 0.42385771 0.4618116 0.5141889 0.5771732 0.6439948 0.6655123 0.6761360 #>  [807,] 0.47098099 0.5665927 0.5696764 0.5905374 0.6210357 0.6464387 0.7473022 #>  [808,] 0.24217203 0.3184980 0.3871593 0.3890574 0.3891708 0.4275688 0.4436049 #>  [809,] 0.39860692 0.4689321 0.4973907 0.5371710 0.5768874 0.6290449 0.6397325 #>  [810,] 0.43658289 0.4428622 0.4983945 0.5403583 0.5855745 0.6032817 0.6305297 #>  [811,] 0.67045423 1.1869324 1.3218139 1.3975437 1.4672396 1.5096197 1.5305105 #>  [812,] 0.47248092 0.5031443 0.8370645 0.8400062 0.8494418 0.8594912 0.8794185 #>  [813,] 0.46011357 0.7247530 0.7269070 0.7512370 0.7645738 0.7922072 0.8528542 #>  [814,] 0.47362581 0.6167798 0.6671393 0.6710991 0.6799471 0.7262120 0.7659699 #>  [815,] 0.31101054 0.4508828 0.4527396 0.5611753 0.7547701 0.7702928 0.8015995 #>  [816,] 0.77296991 0.8515315 1.1449945 1.1927506 1.2811002 1.3038481 1.3413582 #>  [817,] 0.27229643 0.4319564 0.4774983 0.5340576 0.5403583 0.5404376 0.6082648 #>  [818,] 0.41744766 0.4563054 0.4787092 0.5924145 0.6375057 0.6610497 0.7471865 #>  [819,] 0.38819517 0.4387423 0.5081293 0.5452148 0.5480369 0.5606239 0.5866005 #>  [820,] 0.28766330 0.4283451 0.4540319 0.6213764 0.6387727 0.6809829 0.7195003 #>  [821,] 0.83215800 0.9709082 0.9763775 0.9809248 0.9936921 1.0475912 1.1048669 #>  [822,] 0.78268086 0.9932252 1.0980354 1.1283397 1.2047192 1.2130720 1.2674392 #>  [823,] 1.80929466 1.8893919 1.9329721 2.0512655 2.0517282 2.0721139 2.1287109 #>  [824,] 0.32439959 0.3734730 0.3947866 0.4609321 0.4690760 0.5058113 0.5129201 #>  [825,] 0.61873277 0.6361161 0.6400761 0.6600076 0.6647937 0.6694250 0.7057536 #>  [826,] 0.19424838 0.6729953 0.6796123 0.6930371 0.7130948 0.7163930 0.7286979 #>  [827,] 0.44039920 0.5379288 0.5631611 0.6578746 0.6863897 0.7012983 0.7035933 #>  [828,] 0.59333415 0.7209359 0.7306753 0.7601763 0.7735916 0.7950448 0.7991021 #>  [829,] 0.24567152 0.3063528 0.4497131 0.5042466 0.5197454 0.5220079 0.5634577 #>  [830,] 0.97582821 1.2391119 1.2470136 1.3459758 1.3590492 1.3631720 1.3729217 #>  [831,] 0.31160635 0.3430707 0.3923058 0.4851110 0.5039993 0.5300789 0.6307813 #>  [832,] 0.40568773 0.5364534 0.5435650 0.5519487 0.6103353 0.6381218 0.6552750 #>  [833,] 0.25552242 0.4294652 0.5611753 0.6820155 0.6865319 0.7466587 0.7810148 #>  [834,] 0.52469509 0.6491792 0.6840444 0.7732823 0.8144558 0.8499977 0.8541531 #>  [835,] 0.24247399 0.3228067 0.3559695 0.3737479 0.4010472 0.4387908 0.4543073 #>  [836,] 0.30402498 0.3537788 0.4101414 0.5218686 0.5371929 0.5446160 0.5472306 #>  [837,] 0.42779509 0.5741036 0.5788411 0.6112612 0.6607397 0.6726818 0.7763707 #>  [838,] 0.44103872 0.4920899 0.5017724 0.5503724 0.5889555 0.6436879 0.6694250 #>  [839,] 0.76632461 0.8133975 0.9759469 1.0087753 1.1128409 1.1185581 1.1497573 #>  [840,] 0.36146784 0.4621086 0.4898180 0.5115457 0.5358696 0.5631742 0.5908304 #>  [841,] 0.41487405 0.4502622 0.4658682 0.5441640 0.5731625 0.5988865 0.6914460 #>  [842,] 0.43121939 0.4826395 0.5037481 0.6507202 0.8147120 0.8870629 1.0078075 #>  [843,] 0.58445731 0.7222590 0.7577862 0.7792710 0.8738554 0.9340375 0.9526255 #>  [844,] 0.44470875 0.6385201 0.6960497 0.6961663 0.7835910 0.7866091 0.8384421 #>  [845,] 0.40404174 0.4897307 0.5464271 0.5810122 0.6466309 0.6671353 0.6960210 #>  [846,] 0.90180818 1.3653905 1.3857329 1.4217375 1.4882855 1.5650267 1.6132422 #>  [847,] 0.27458169 0.3491021 0.4199275 0.4606719 0.4617434 0.4713524 0.5338805 #>  [848,] 0.75759460 0.8189146 0.9391760 1.2134207 1.2668459 1.3008309 1.3480183 #>  [849,] 0.70861757 0.7125766 0.7692317 0.7842405 0.7875709 0.8406361 0.8644892 #>  [850,] 0.42845425 0.5223966 0.8698409 1.0428900 1.2501181 1.2709531 1.3154459 #>  [851,] 0.30590078 0.3883015 0.3890574 0.4861107 0.5203573 0.5390073 0.5585134 #>  [852,] 0.65383415 0.8650144 0.8752983 0.9169891 0.9440800 1.0866058 1.1327742 #>  [853,] 0.52707606 0.6941433 0.8417736 0.8808331 0.9023563 0.9787346 1.0224389 #>  [854,] 0.81821544 0.8472202 1.2938839 1.3932673 1.3941717 1.4355963 1.5699636 #>  [855,] 0.60291632 0.6867866 0.7069295 0.7093067 0.7406071 0.7892287 0.8287154 #>  [856,] 0.65676488 0.6660175 0.8171470 0.8271485 0.8773103 0.9360080 1.0033390 #>  [857,] 0.41863335 0.5026707 0.6409466 0.6883781 0.7587634 0.8322600 0.8372582 #>  [858,] 0.33468703 0.3953128 0.4436049 0.4582472 0.4639865 0.5036554 0.5456261 #>  [859,] 0.36519545 0.5317823 0.5337374 0.5714825 0.6008988 0.6724847 0.6786847 #>  [860,] 0.23112638 0.3470762 0.4276004 0.5485018 0.5527330 0.5571655 0.5643793 #>  [861,] 0.24966952 0.7686979 0.7765622 0.7870693 0.8158618 0.8329640 0.8343304 #>  [862,] 0.23595328 0.2767584 0.2932143 0.3931620 0.3969491 0.4810235 0.4858607 #>  [863,] 0.41713601 0.4425940 0.6329047 0.7505821 0.7732478 0.8217801 0.8301675 #>  [864,] 0.64257162 0.6795234 0.7023438 0.7858032 0.7861659 0.8137644 0.8185268 #>  [865,] 0.44197133 0.5044014 0.6187328 0.6217338 0.6315405 0.6392569 0.6562380 #>  [866,] 0.28036224 0.2829959 0.4226618 0.4826395 0.6027349 0.7319019 0.8244292 #>  [867,] 0.28209545 0.4138696 0.4660165 0.5896976 0.6145742 0.6528266 0.7697805 #>  [868,] 0.54069498 0.6663645 0.7247530 0.7439011 0.7497346 0.7864640 0.8561620 #>  [869,] 0.36490314 0.5669402 0.6029163 0.6095596 0.7281755 0.7668626 0.8332532 #>  [870,] 0.37161942 0.3774536 0.4040250 0.4197628 0.4685053 0.4904839 0.5109378 #>  [871,] 0.61796537 0.7285928 0.7336064 0.7857403 0.8158618 0.8263606 0.8377369 #>  [872,] 0.42739736 0.4807708 0.4967779 0.5056090 0.5167295 0.5206453 0.5609500 #>  [873,] 0.35165084 0.5406950 0.5594160 0.7009550 0.7127100 0.7353120 0.7368551 #>  [874,] 0.31344568 0.3953128 0.4414478 0.4506310 0.4842041 0.4996095 0.5042466 #>  [875,] 0.44002569 0.5421494 0.5698466 0.5905374 0.5994636 0.6028812 0.7226762 #>  [876,] 0.70988967 0.8424063 0.8527684 0.9094975 0.9604423 1.1166870 1.2254275 #>  [877,] 0.72278683 0.7326171 0.8295420 1.0958249 1.1048283 1.1098160 1.1239750 #>  [878,] 0.40985302 0.4175239 0.4689321 0.5325677 0.6423317 0.6694821 0.7225749 #>  [879,] 0.24078963 0.3809867 0.4713524 0.5028094 0.5201331 0.5261480 0.5638799 #>  [880,] 0.35919944 0.4029746 0.4491710 0.5175534 0.5448878 0.5776059 0.5867790 #>  [881,] 0.53737750 0.6133634 0.6143286 0.6248042 0.6389689 0.6436361 0.6487615 #>  [882,] 0.49030762 0.5485018 0.5609260 0.5788515 0.5869157 0.6358109 0.6629426 #>  [883,] 0.25862064 0.3177643 0.4020937 0.4346852 0.4385004 0.4686877 0.5431408 #>  [884,] 0.70050852 0.8984231 0.9121860 0.9911837 0.9958333 1.0318333 1.0965091 #>  [885,] 0.31849795 0.3795550 0.3824383 0.4186007 0.4484048 0.4861107 0.4879684 #>  [886,] 0.99458747 1.0672899 1.0746880 1.0858577 1.1541687 1.2291397 1.2365648 #>  [887,] 0.68353095 0.7209359 0.7685517 0.9391760 1.0665888 1.0760218 1.2367422 #>  [888,] 0.20794539 0.4941379 0.6640591 0.6874664 0.7246637 0.7829339 0.7840036 #>  [889,] 0.25021844 0.5476001 0.6201916 0.7102833 0.7127100 0.7245906 0.7251420 #>  [890,] 0.34307072 0.3964940 0.5144611 0.5412533 0.5447846 0.6146040 0.6443941 #>  [891,] 0.41018927 1.2329373 1.2405833 1.2845540 1.3488981 1.4021120 1.4353705 #>  [892,] 0.74596454 0.9023563 1.0993212 1.1212467 1.1477648 1.2179078 1.2449918 #>  [893,] 0.24061352 0.2771811 0.4173396 0.4350018 0.4950868 0.5099229 0.5714825 #>  [894,] 0.51500123 0.5669402 0.7417379 0.7592120 0.7703908 0.7791587 0.7934319 #>  [895,] 0.25146968 0.4186333 0.4657468 0.5482637 0.5640055 0.6118514 0.6590331 #>  [896,] 0.24567152 0.3228067 0.3423167 0.3599093 0.3661315 0.4496057 0.4506310 #>  [897,] 0.28855704 0.3033653 0.4307807 0.4729649 0.5055142 0.5068138 0.5272064 #>  [898,] 0.44092985 0.4617045 0.4669216 0.5201555 0.6199586 0.6940940 0.7254700 #>  [899,] 0.57439020 0.6021226 0.6962272 0.7576918 0.7732478 0.7811220 0.7960769 #>  [900,] 0.53828551 0.5939850 0.6313462 0.6863811 0.8184247 0.8232994 0.8535188 #>  [901,] 0.22147278 0.4585906 0.6364447 0.6729916 0.7150528 0.7358885 0.7402222 #>  [902,] 0.38385147 0.4039002 0.4766086 0.5333078 0.5403808 0.5732097 0.5742830 #>  [903,] 0.90608583 0.9420620 0.9988598 1.0730090 1.1347264 1.1383104 1.1796746 #>  [904,] 0.62908504 0.7473751 0.7925934 0.8252585 0.8460214 0.9112579 1.0219295 #>  [905,] 0.51500123 0.5896388 0.6095596 0.7153208 0.7796438 0.7877322 0.8175388 #>  [906,] 0.46258459 0.5955290 0.6397100 0.7525390 0.7948289 0.8366025 0.8377206 #>  [907,] 0.59781096 0.6969952 0.8377206 0.9176260 0.9461300 0.9720128 0.9751103 #>  [908,] 0.51036456 0.7023438 0.8232055 1.0390236 1.1324021 1.1449918 1.1462896 #>  [909,] 0.18152960 0.2931847 0.3927503 0.4182155 0.4901474 0.5005976 0.5198903 #>  [910,] 0.33702670 0.4726763 0.5530759 0.5577792 0.5776435 0.5786072 0.5955290 #>  [911,] 0.42760037 0.4316440 0.5586554 0.6077285 0.6511595 0.6978762 0.7123274 #>  [912,] 0.26505869 0.3679544 0.6084569 0.6286296 0.6437086 0.6914182 0.6955287 #>  [913,] 0.30651417 0.3785802 0.3938433 0.3967127 0.4485269 0.4546992 0.5056649 #>  [914,] 0.47870920 0.5545774 0.5844573 0.5887998 0.6785683 0.7601763 0.8218413 #>  [915,] 0.40858034 0.4184817 0.4339198 0.4507202 0.4860105 0.5289033 0.5364537 #>  [916,] 1.02584150 1.0828285 1.0885369 1.0971110 1.1042813 1.1449918 1.2919591 #>  [917,] 0.30042296 0.3026130 0.3565618 0.3981614 0.5127400 0.5725146 0.5815952 #>  [918,] 0.52253095 0.5885502 0.6179654 0.8710349 0.8870629 0.8875815 0.9343499 #>  [919,] 0.20099535 0.2749247 0.5325677 0.5490741 0.6531211 0.6658022 0.6814466 #>  [920,] 0.44583849 0.4810978 0.5405619 0.5932476 0.5971753 0.6051186 0.7492998 #>  [921,] 0.34737286 0.3980170 0.4629880 0.6017961 0.6329105 0.6856702 0.6874733 #>  [922,] 0.34532461 0.4628218 0.7361727 0.8439061 0.8581945 0.8747765 0.8862730 #>  [923,] 0.90229047 0.9198689 1.0207799 1.1089972 1.1556626 1.2064820 1.3264570 #>  [924,] 0.72747193 0.8250681 1.0355440 1.0867590 1.1713836 1.1790244 1.1825153 #>  [925,] 0.45797125 0.6504010 0.6578746 0.7710482 0.7800602 0.7811786 0.8214881 #>  [926,] 0.73493260 0.7703350 1.1855629 1.2938839 1.3251974 1.3370503 1.4777104 #>  [927,] 0.63336316 0.7143309 0.7362073 0.7756732 0.7970660 0.8002629 0.8188014 #>  [928,] 0.53331798 0.7658372 0.8411038 0.8435176 0.8557778 0.9534445 1.0521644 #>  [929,] 0.37124830 0.4394802 0.4785945 0.4895479 0.4936070 0.5214670 0.6070243 #>  [930,] 0.15257575 0.2679852 0.4043936 0.5492259 0.5753782 0.5777504 0.6046937 #>  [931,] 0.43850043 0.4710949 0.5225874 0.5979093 0.6274306 0.6376453 0.6383452 #>  [932,] 0.16954488 0.4413771 0.4936070 0.5091485 0.5406976 0.5841054 0.6319375 #>  [933,] 0.60216961 0.8325986 0.9017701 1.0527966 1.0873008 1.1047051 1.1403903 #>  [934,] 0.22391198 0.2359533 0.3311175 0.3573658 0.4699063 0.4768151 0.4989236 #>  [935,] 0.33702670 0.3626109 0.5521895 0.6697020 0.6755909 0.6801242 0.7083752 #>  [936,] 0.25911696 0.3956943 0.3969163 0.4120540 0.4417291 0.4853470 0.4890968 #>  [937,] 0.31687833 0.4004550 0.4102269 0.4143324 0.4438383 0.4654235 0.4780128 #>  [938,] 0.41693924 0.4785945 0.4919001 0.4933270 0.5044109 0.6134010 0.6578698 #>  [939,] 0.42834510 0.5492523 0.5517753 0.6181850 0.7786371 0.8124025 0.8299110 #>  [940,] 0.29773455 0.3026130 0.3996581 0.4525703 0.4910250 0.5470151 0.6076327 #>  [941,] 0.26798522 0.3289737 0.3927503 0.4899982 0.5082989 0.5110617 0.5450175 #>  [942,] 0.41465725 0.6028812 0.6464387 0.6744800 0.7294826 0.7380562 0.7701428 #>  [943,] 0.62090223 0.6667493 0.7408558 0.7975806 0.9164685 0.9282413 0.9811421 #>  [944,] 0.27147990 0.3600480 0.4387423 0.4807708 0.5511082 0.5705962 0.6196778 #>  [945,] 0.45690470 0.4623513 0.6157644 0.6505158 0.6629279 0.6879367 0.7054842 #>  [946,] 0.59092893 0.6203725 0.6325829 0.7002421 0.7046044 0.7097977 0.7455975 #>  [947,] 0.26186702 0.3033653 0.4020937 0.4275672 0.4418920 0.4504325 0.5074709 #>  [948,] 0.20718907 0.2406135 0.3310914 0.4175232 0.4568239 0.4593203 0.4721441 #>  [949,] 0.26016348 0.3491021 0.4898051 0.5266530 0.5286370 0.5490676 0.5525549 #>  [950,] 0.32885595 0.3823851 0.4026400 0.4808764 0.5335939 0.5717612 0.6699496 #>  [951,] 0.27563871 0.3135447 0.3941664 0.4606719 0.5111282 0.5133157 0.5258651 #>  [952,] 0.41139347 0.6275177 0.6621554 0.7701428 0.8022547 0.9038958 0.9156446 #>  [953,] 0.63297974 0.7300008 0.7863523 0.8056914 0.8225283 0.8375461 0.8434820 #>  [954,] 0.33550818 0.3777621 0.4078329 0.4787380 0.5641065 0.5728212 0.6327113 #>  [955,] 0.20621452 0.2904994 0.4141342 0.4246063 0.5261480 0.5445489 0.5538226 #>  [956,] 0.33022011 0.5297885 0.5300319 0.5989279 0.6036421 0.6184250 0.6381773 #>  [957,] 1.25595711 1.3492888 1.3820718 1.4184096 1.4314642 1.4423312 1.4454670 #>  [958,] 0.70988967 0.7227928 1.1853574 1.2638200 1.3025318 1.3112967 1.3491461 #>  [959,] 0.39483025 0.7176363 1.1000722 1.1127286 1.1695611 1.2329311 1.2853193 #>  [960,] 0.48835350 0.6731693 0.6949812 0.8851376 0.9111613 1.3334468 1.4069899 #>  [961,] 1.67451342 1.6954189 1.7142653 1.7439973 1.7604529 1.8083119 1.8190374 #>  [962,] 0.39449617 0.6678797 0.8067734 0.8116096 0.8276085 0.8675993 0.8683853 #>  [963,] 0.07510491 0.3177643 0.4067280 0.4374085 0.4433198 0.4829015 0.5074709 #>  [964,] 0.41713601 0.4663578 0.5743902 0.6859917 0.7331014 0.8889724 0.9072601 #>  [965,] 0.68643527 0.7458120 0.7796270 0.8057398 0.8336802 0.9259180 0.9271132 #>  [966,] 0.64937117 0.6905490 0.6940940 0.7165164 0.7269116 0.7367842 0.7433650 #>  [967,] 0.64608961 0.6848530 0.7327872 0.7858383 0.7858602 0.7861659 0.8051202 #>  [968,] 0.45394745 0.4948362 0.5327251 0.5359659 0.6040635 0.6115310 0.6130825 #>  [969,] 0.69498116 0.8184989 0.9009444 1.2410361 1.4182194 1.4240630 1.4444941 #>  [970,] 0.73182117 0.7594684 0.7962947 0.8048461 0.8302031 0.8398521 0.8507377 #>  [971,] 0.34079246 0.3969163 0.4485269 0.4568257 0.4720437 0.4949334 0.5422474 #>  [972,] 0.47737947 0.5267036 0.7153208 0.7258033 0.7703908 0.8229032 0.8313553 #>  [973,] 0.97586111 1.1553675 1.1633015 1.2981368 1.3273857 1.3989349 1.4274155 #>  [974,] 0.47106644 0.5581422 0.5911198 0.6023233 0.6395887 0.6670735 0.6861339 #>  [975,] 0.46011357 0.4624509 0.6135129 0.6303735 0.7312550 0.7321818 0.7463151 #>  [976,] 0.35377876 0.3690468 0.3999096 0.4523223 0.4553059 0.5127837 0.5352627 #>  [977,] 0.59449443 0.6704927 0.7537130 0.8050565 0.9070311 0.9198027 0.9638986 #>  [978,] 0.65488694 0.6870808 0.8417736 1.1157628 1.1369690 1.2395723 1.2423392 #>  [979,] 0.52580913 0.5485318 0.5887248 0.6367696 0.6721906 0.6844724 0.7525390 #>  [980,] 0.30042296 0.4525703 0.4708138 0.4824120 0.4950389 0.5129997 0.5444178 #>  [981,] 0.33830069 0.4197628 0.5251612 0.5313967 0.5504257 0.5788411 0.5811459 #>  [982,] 0.65872584 0.7162868 0.9482095 1.1136789 1.1884978 1.2158234 1.2514575 #>  [983,] 0.36352311 0.4797284 0.4870527 0.5353525 0.7193505 0.7835910 0.7854638 #>  [984,] 0.26389565 0.2885570 0.4418920 0.4834856 0.5428177 0.5477219 0.5596718 #>  [985,] 0.39694910 0.3974439 0.4180806 0.4259539 0.4464990 0.4753504 0.4768151 #>  [986,] 0.54640309 0.6402515 0.6443941 0.7162868 0.7702600 0.8038900 0.8118915 #>  [987,] 0.16685135 0.5788307 0.5899783 0.6541853 0.6733752 0.6840404 0.7173468 #>  [988,] 0.41129292 0.6224733 0.7481150 0.7684111 0.8063489 0.8077231 0.8176312 #>  [989,] 0.11859239 0.4127442 0.4315884 0.5391860 0.5405018 0.5782477 0.5792774 #>  [990,] 0.52253095 0.6920794 0.6945745 0.7765622 0.7857403 0.9117759 0.9215669 #>  [991,] 0.17723329 0.2149349 0.3526916 0.4083556 0.5080980 0.5556153 0.5571889 #>  [992,] 0.21493492 0.2803670 0.2813427 0.5100292 0.5211797 0.5410793 0.5614509 #>  [993,] 0.46255599 0.4854956 0.5698525 0.6104659 0.6393210 0.6558324 0.6876510 #>  [994,] 0.46046910 0.4724026 0.5359659 0.5743298 0.6365114 0.6624506 0.6724351 #>  [995,] 0.70050852 0.7718764 0.9700215 0.9754953 1.0087753 1.0358064 1.0699789 #>  [996,] 0.30074143 0.3567889 0.3869310 0.4574960 0.4791606 0.5206453 0.5719127 #>  [997,] 0.33726252 0.4335332 0.5364537 0.6021839 0.6084569 0.6822370 0.6934045 #>  [998,] 0.48484559 0.5631611 0.6452580 0.6894359 0.6988109 0.7103865 0.7481150 #>  [999,] 0.40730448 0.4213072 0.4563054 0.5093903 0.5699993 0.6400761 0.6785683 #> [1000,] 0.27229643 0.3588919 0.4004550 0.4088428 0.4122994 0.4279485 0.4555945 #>              [,8]      [,9]     [,10] #>    [1,] 0.8059124 0.8650147 0.8868077 #>    [2,] 0.5775601 0.5891959 0.5986504 #>    [3,] 0.8980142 0.9375722 0.9841824 #>    [4,] 0.7810148 0.7859364 0.8015257 #>    [5,] 0.5742830 0.5989919 0.6191465 #>    [6,] 0.7276199 0.7473483 0.7514094 #>    [7,] 0.6449334 0.6534546 0.6927625 #>    [8,] 0.5563963 0.5564433 0.5807750 #>    [9,] 0.7051125 0.7176691 0.7184379 #>   [10,] 0.9501727 0.9537946 0.9689211 #>   [11,] 0.7791790 0.7796063 0.7796564 #>   [12,] 0.8213952 0.8681768 0.8795834 #>   [13,] 1.4044399 1.4242779 1.4292599 #>   [14,] 0.7919322 0.7990128 0.8218413 #>   [15,] 0.8181447 0.8677651 0.9140326 #>   [16,] 0.7378815 0.7396316 0.7502435 #>   [17,] 0.5795561 0.6471084 0.6499350 #>   [18,] 1.0602323 1.0885369 1.1504075 #>   [19,] 1.5849841 1.6013853 1.6074664 #>   [20,] 0.7748789 0.7824363 0.7966165 #>   [21,] 0.5408570 0.5555997 0.5771976 #>   [22,] 0.8440975 0.8603167 0.8678915 #>   [23,] 0.7013073 0.7357150 0.7669559 #>   [24,] 0.6361574 0.6421061 0.6576633 #>   [25,] 0.7392126 0.7998847 0.8116212 #>   [26,] 0.7178511 0.7202541 0.7208992 #>   [27,] 0.5621750 0.5948343 0.5955058 #>   [28,] 0.7054297 0.7156510 0.7167713 #>   [29,] 0.6226107 0.6235567 0.6421061 #>   [30,] 0.5218355 0.5527330 0.5558903 #>   [31,] 0.6278482 0.6386500 0.6654564 #>   [32,] 0.8289035 0.8566458 0.8622176 #>   [33,] 0.9548272 0.9856851 0.9898578 #>   [34,] 0.9086553 0.9195540 0.9230332 #>   [35,] 0.5195556 0.5437317 0.5829828 #>   [36,] 0.5441844 0.5499801 0.5542626 #>   [37,] 0.5265203 0.5349157 0.5390073 #>   [38,] 0.7066663 0.7097977 0.7665105 #>   [39,] 0.6926448 0.7952127 0.8049787 #>   [40,] 0.7495595 0.7526438 0.7683604 #>   [41,] 0.6016925 0.6175890 0.6534370 #>   [42,] 0.5316061 0.5481625 0.5543071 #>   [43,] 1.0540216 1.0836585 1.1109860 #>   [44,] 0.5568603 0.5735667 0.5745807 #>   [45,] 0.5916355 0.6072961 0.6104659 #>   [46,] 1.4384865 1.4602048 1.4991822 #>   [47,] 0.7099039 0.7360644 0.7414414 #>   [48,] 0.4991560 0.5081447 0.5493938 #>   [49,] 0.6648021 0.6814042 0.6916528 #>   [50,] 0.7393118 0.7399130 0.7537891 #>   [51,] 0.7392254 0.7702165 0.7776876 #>   [52,] 0.6358178 0.6395887 0.6774522 #>   [53,] 0.6854125 0.7026464 0.7279154 #>   [54,] 0.6962933 0.7024421 0.7404088 #>   [55,] 1.2824345 1.2894566 1.3311382 #>   [56,] 0.5405610 0.5532837 0.5704291 #>   [57,] 1.2308003 1.2505731 1.3419802 #>   [58,] 0.7858456 0.7887345 0.8150642 #>   [59,] 0.8385003 0.8719239 0.9624100 #>   [60,] 0.5140156 0.5442450 0.5815952 #>   [61,] 0.5515184 0.6170945 0.6350732 #>   [62,] 0.7376214 0.7943590 0.8062845 #>   [63,] 0.7400611 0.7481524 0.7581405 #>   [64,] 0.9887863 1.0166411 1.0307086 #>   [65,] 0.6805291 0.7319028 0.7860949 #>   [66,] 0.7355779 0.7368755 0.7581049 #>   [67,] 0.8900032 0.9261680 0.9347578 #>   [68,] 0.6478778 0.6503598 0.6722790 #>   [69,] 0.5573514 0.5882574 0.5914164 #>   [70,] 0.6664396 0.7621017 0.7633232 #>   [71,] 0.6838012 0.7114367 0.7129118 #>   [72,] 0.8093535 0.8106133 0.8345961 #>   [73,] 0.9444658 0.9848875 0.9880104 #>   [74,] 0.8522049 0.8680686 0.8707989 #>   [75,] 0.6681706 0.7310674 0.7451409 #>   [76,] 1.1955251 1.2016778 1.2194960 #>   [77,] 0.7772457 0.7804344 0.8020792 #>   [78,] 0.4988260 0.5752162 0.5804311 #>   [79,] 0.7858602 0.8168257 0.8510892 #>   [80,] 1.5403713 1.5742527 1.6165215 #>   [81,] 0.6819199 0.7246964 0.7340767 #>   [82,] 0.8571597 0.8651307 0.8932705 #>   [83,] 0.5289033 0.5361614 0.5378301 #>   [84,] 0.8113923 0.8190144 0.8645477 #>   [85,] 1.2885024 1.3173443 1.3459341 #>   [86,] 0.5800269 0.6064881 0.6156248 #>   [87,] 0.5918389 0.6087093 0.6175890 #>   [88,] 0.5300319 0.5420716 0.5816255 #>   [89,] 0.6386954 0.6832458 0.6966655 #>   [90,] 1.0406491 1.0733257 1.1167851 #>   [91,] 0.6295875 0.6534307 0.6673500 #>   [92,] 1.1237042 1.1336075 1.2034693 #>   [93,] 0.8451673 0.8895287 0.8948640 #>   [94,] 0.5328713 0.5400989 0.5503362 #>   [95,] 1.1209854 1.1394068 1.1399143 #>   [96,] 0.5813127 0.6861072 0.7575570 #>   [97,] 0.5137141 0.5165214 0.5203573 #>   [98,] 0.5840288 0.6117639 0.6272591 #>   [99,] 0.7924606 0.7974191 0.8336551 #>  [100,] 1.2452542 1.3047652 1.3261144 #>  [101,] 0.7122162 0.7538851 0.7931353 #>  [102,] 0.5103413 0.5525259 0.5618277 #>  [103,] 1.0383447 1.0456765 1.0513088 #>  [104,] 0.9515636 0.9631428 0.9781276 #>  [105,] 0.7064478 0.7281443 0.7293583 #>  [106,] 0.8706676 0.9043662 0.9111791 #>  [107,] 0.6753819 0.6875907 0.6966040 #>  [108,] 0.6080280 0.6256096 0.6478308 #>  [109,] 0.9868777 1.0020707 1.0229545 #>  [110,] 0.8366336 0.8464646 0.8969407 #>  [111,] 1.0820908 1.1164197 1.1307881 #>  [112,] 0.9032264 0.9219206 0.9375722 #>  [113,] 0.7776328 0.8098772 0.8206874 #>  [114,] 0.6170587 0.6466364 0.6536921 #>  [115,] 0.8329444 0.8356641 0.9254022 #>  [116,] 0.9830987 1.0251249 1.0291301 #>  [117,] 0.8633291 0.8920707 0.8926324 #>  [118,] 1.7678827 1.8236134 1.8297012 #>  [119,] 0.7123755 0.7216348 0.7260148 #>  [120,] 0.8982647 0.9163852 0.9468682 #>  [121,] 0.5402650 0.5678482 0.5805782 #>  [122,] 0.8013241 0.8645477 0.9027223 #>  [123,] 0.7965936 0.8235394 0.8350810 #>  [124,] 0.7368551 0.7708594 0.8271645 #>  [125,] 0.7408025 0.7450016 0.7583880 #>  [126,] 0.7054842 0.7619401 0.7929885 #>  [127,] 0.7147322 0.7309459 0.7469249 #>  [128,] 0.5965167 0.5966111 0.6018960 #>  [129,] 0.5707602 0.5740424 0.5806874 #>  [130,] 0.9592818 0.9636888 1.0170567 #>  [131,] 1.1682778 1.2115636 1.2198066 #>  [132,] 0.9706206 0.9708018 0.9759469 #>  [133,] 0.8123722 0.8222942 0.8302031 #>  [134,] 0.9839634 1.0169120 1.0550337 #>  [135,] 0.5215293 0.5402650 0.5775601 #>  [136,] 0.5155655 0.5352890 0.5719799 #>  [137,] 0.6827666 0.7677410 0.7852547 #>  [138,] 0.7063955 0.7236305 0.7275405 #>  [139,] 0.6060097 0.6322780 0.6477516 #>  [140,] 0.9809618 1.0374711 1.0536380 #>  [141,] 0.5768476 0.5804311 0.5867660 #>  [142,] 0.8223303 0.8608931 0.9064931 #>  [143,] 0.8027293 0.8454235 0.8529465 #>  [144,] 0.8788308 0.8970614 0.9056986 #>  [145,] 0.9949775 0.9974196 1.0075389 #>  [146,] 0.7948475 0.8062966 0.8186298 #>  [147,] 0.5969108 0.6015356 0.6274103 #>  [148,] 1.6651029 1.7462726 1.8752530 #>  [149,] 0.8202423 0.8377073 0.8441608 #>  [150,] 0.8492347 0.8534718 0.9093647 #>  [151,] 0.5963294 0.6007448 0.6085294 #>  [152,] 1.0255957 1.0281832 1.0716807 #>  [153,] 0.6468845 0.6942793 0.7004626 #>  [154,] 0.5713543 0.6056582 0.6636098 #>  [155,] 0.4884518 0.4918882 0.4991560 #>  [156,] 0.5492508 0.5541846 0.5675767 #>  [157,] 0.8315983 0.8913504 0.8927948 #>  [158,] 0.7441606 0.7480828 0.7568321 #>  [159,] 0.5569790 0.5613986 0.5620986 #>  [160,] 0.8804504 0.8932950 0.8995105 #>  [161,] 0.7522524 0.7708198 0.8132693 #>  [162,] 0.7177715 0.7179171 0.7219801 #>  [163,] 1.0782456 1.2037909 1.2056655 #>  [164,] 0.8083669 0.8132253 0.8960354 #>  [165,] 1.0728799 1.0745517 1.1015611 #>  [166,] 0.9653338 0.9800104 1.0034309 #>  [167,] 0.7441239 0.7707323 0.8558371 #>  [168,] 1.1432333 1.1878302 1.2081912 #>  [169,] 0.8668477 0.8881607 0.9128282 #>  [170,] 0.6969437 0.7373947 0.7377894 #>  [171,] 0.7183003 0.7382115 0.7467744 #>  [172,] 1.3947432 1.4460044 1.4657114 #>  [173,] 1.1056481 1.1590721 1.2172608 #>  [174,] 0.7682683 0.7705822 0.7710507 #>  [175,] 0.6015527 0.6061445 0.6238077 #>  [176,] 0.7325308 0.7512784 0.8007698 #>  [177,] 0.8919162 0.8982647 0.9060083 #>  [178,] 0.8343689 0.9015174 0.9109864 #>  [179,] 0.7600638 0.7750003 0.7857767 #>  [180,] 0.7192569 0.7243883 0.7332500 #>  [181,] 0.5795561 0.5806874 0.6568443 #>  [182,] 0.8635568 0.8693972 0.8809910 #>  [183,] 0.6751226 0.6799093 0.6881946 #>  [184,] 0.7157008 0.7412490 0.7414645 #>  [185,] 0.7402570 0.7565754 0.8239186 #>  [186,] 0.5082552 0.5132118 0.5855745 #>  [187,] 1.3175195 1.3809906 1.4163839 #>  [188,] 1.1235231 1.1283397 1.1551016 #>  [189,] 0.8769669 0.8977898 0.9461300 #>  [190,] 0.8240597 0.8481936 0.8539555 #>  [191,] 0.8323153 0.8435176 0.9275736 #>  [192,] 1.0625336 1.1534059 1.1625756 #>  [193,] 0.6690633 0.7213613 0.7345009 #>  [194,] 1.0788492 1.1162539 1.2135526 #>  [195,] 1.0258133 1.0494248 1.1290774 #>  [196,] 1.3424479 1.4412211 1.4474391 #>  [197,] 1.0555880 1.0780874 1.0817304 #>  [198,] 1.0901863 1.1196797 1.1594372 #>  [199,] 1.0483903 1.0563520 1.0620426 #>  [200,] 1.0345751 1.0923400 1.1453461 #>  [201,] 0.6603713 0.7330639 0.7384455 #>  [202,] 1.0616501 1.0625154 1.0700150 #>  [203,] 0.7439276 0.7669559 0.7905804 #>  [204,] 0.8207165 0.8267311 0.8626651 #>  [205,] 0.8555327 0.8692125 0.8929562 #>  [206,] 1.5919210 1.6298322 1.6565283 #>  [207,] 0.5172776 0.5895720 0.5982449 #>  [208,] 0.9170739 0.9480754 0.9869561 #>  [209,] 1.2526092 1.2533556 1.2777277 #>  [210,] 0.8289731 0.8944422 0.9241514 #>  [211,] 1.0911886 1.1215540 1.1459893 #>  [212,] 0.7033629 0.7082474 0.7119375 #>  [213,] 0.7409098 0.7468219 0.7573211 #>  [214,] 0.4809933 0.4945847 0.5340320 #>  [215,] 0.5988865 0.6311913 0.6490069 #>  [216,] 1.0061967 1.0245906 1.0511086 #>  [217,] 0.7960949 0.8485358 0.8563164 #>  [218,] 0.7923508 0.8146831 0.8151540 #>  [219,] 0.6961535 0.7234019 0.7313908 #>  [220,] 1.3243082 1.4028276 1.4209413 #>  [221,] 0.5975123 0.6620554 0.6697020 #>  [222,] 0.9479218 0.9804111 1.0050758 #>  [223,] 0.7733017 0.7787314 0.8069176 #>  [224,] 0.6283414 0.6290998 0.6298119 #>  [225,] 1.2731531 1.2930039 1.3003183 #>  [226,] 0.7361727 0.7434314 0.7468219 #>  [227,] 1.2150733 1.2317838 1.2329311 #>  [228,] 0.5986742 0.6127085 0.6262385 #>  [229,] 0.5092515 0.5097294 0.5103667 #>  [230,] 0.5775970 0.5879504 0.6123139 #>  [231,] 1.0935231 1.1162325 1.1404739 #>  [232,] 0.7120998 0.7227617 0.7490240 #>  [233,] 0.5566405 0.5725146 0.5821581 #>  [234,] 1.0308250 1.0331859 1.0667433 #>  [235,] 0.8341502 0.8549282 0.8617135 #>  [236,] 0.7681145 0.7920620 0.8871457 #>  [237,] 0.8637274 0.8930154 0.9274277 #>  [238,] 1.4290901 1.4817983 1.4853239 #>  [239,] 0.5294943 0.5487522 0.5693690 #>  [240,] 0.8984231 0.9020378 0.9046858 #>  [241,] 0.7183216 0.7598290 0.7610038 #>  [242,] 0.5390041 0.5657330 0.5842866 #>  [243,] 0.8757630 0.8760533 0.8809378 #>  [244,] 0.6900000 0.7023005 0.7169563 #>  [245,] 0.9880104 1.0013836 1.0371369 #>  [246,] 0.7582110 0.7690994 0.7859364 #>  [247,] 0.7355418 0.7790375 0.7921807 #>  [248,] 0.9247628 0.9547470 1.0253554 #>  [249,] 0.7770224 0.7799644 0.8279911 #>  [250,] 0.6930062 0.7105841 0.7283204 #>  [251,] 0.6955760 0.7030297 0.7134055 #>  [252,] 1.8082649 1.8376684 1.9263571 #>  [253,] 0.6391029 0.6464365 0.6589566 #>  [254,] 0.6627541 0.6678129 0.6994070 #>  [255,] 0.8251310 0.8412036 0.8585403 #>  [256,] 0.8270371 0.8768961 0.8873786 #>  [257,] 0.7180586 0.7718457 0.7719682 #>  [258,] 0.6768229 0.6872141 0.7558750 #>  [259,] 0.5637630 0.5936305 0.6015752 #>  [260,] 0.6386933 0.6427882 0.6531138 #>  [261,] 0.5660962 0.6010895 0.6364447 #>  [262,] 1.1735591 1.1933603 1.2415220 #>  [263,] 0.7487476 0.7966053 0.8034730 #>  [264,] 0.7138210 0.7205242 0.7208420 #>  [265,] 0.7423411 0.7742870 0.7743516 #>  [266,] 0.7779193 0.7907882 0.8128445 #>  [267,] 0.6013924 0.6077285 0.6138454 #>  [268,] 0.8144773 0.8980125 0.9005579 #>  [269,] 0.8426864 0.8495210 0.8542392 #>  [270,] 1.4510975 1.4624040 1.4712778 #>  [271,] 0.8410300 0.8458614 0.8760533 #>  [272,] 0.6910797 0.6965373 0.7146509 #>  [273,] 0.8873786 0.9243532 0.9951750 #>  [274,] 0.6510168 0.6608621 0.6720760 #>  [275,] 0.9190937 0.9220742 0.9538773 #>  [276,] 1.2057629 1.2163260 1.2187789 #>  [277,] 0.4143324 0.4898180 0.5109378 #>  [278,] 0.6871966 0.6905509 0.7156510 #>  [279,] 0.6613567 0.6663331 0.6814042 #>  [280,] 0.9550710 0.9662303 1.0059648 #>  [281,] 1.1196797 1.1426563 1.1448378 #>  [282,] 1.7128875 1.7830060 1.7911637 #>  [283,] 0.5352673 0.5720773 0.5871736 #>  [284,] 0.4833013 0.5088315 0.5627552 #>  [285,] 0.6825368 0.7026464 0.7242788 #>  [286,] 0.9268532 0.9570840 1.0579099 #>  [287,] 0.9771741 1.0550033 1.0655015 #>  [288,] 0.6374374 0.6934746 0.6936820 #>  [289,] 1.0588954 1.0814915 1.1757905 #>  [290,] 0.6776156 0.6799093 0.6837602 #>  [291,] 0.6133335 0.6142123 0.6193202 #>  [292,] 0.5835968 0.5900336 0.5969018 #>  [293,] 0.7005346 0.7134055 0.7229932 #>  [294,] 0.5920494 0.5994045 0.6382516 #>  [295,] 1.3006234 1.3296936 1.3685230 #>  [296,] 0.5960875 0.6166938 0.6197161 #>  [297,] 1.0046440 1.0134342 1.0330499 #>  [298,] 0.6376453 0.6547366 0.7393096 #>  [299,] 0.7697490 0.7990128 0.7991353 #>  [300,] 0.6842904 0.7055637 0.7163206 #>  [301,] 0.5694232 0.5811162 0.5982449 #>  [302,] 0.8118257 0.8859701 0.8949508 #>  [303,] 0.6674976 0.7013073 0.7306753 #>  [304,] 0.7288202 0.7401109 0.7630092 #>  [305,] 0.6714204 0.6841120 0.6891938 #>  [306,] 0.5836466 0.5949558 0.6176877 #>  [307,] 0.5945151 0.6231343 0.6405649 #>  [308,] 0.5610574 0.5803042 0.5932289 #>  [309,] 0.6112612 0.6394537 0.6438113 #>  [310,] 0.6019232 0.6028886 0.6109083 #>  [311,] 0.6145420 0.6208837 0.6294660 #>  [312,] 1.1355820 1.2235490 1.2396294 #>  [313,] 0.7235052 0.7540115 0.7691199 #>  [314,] 0.5774062 0.5831395 0.6099575 #>  [315,] 0.4438383 0.4685053 0.4776945 #>  [316,] 0.9348209 0.9405277 0.9964849 #>  [317,] 0.7311356 0.7373027 0.7412004 #>  [318,] 0.9156081 0.9208277 0.9440800 #>  [319,] 0.9748518 0.9993559 1.0058673 #>  [320,] 0.9712101 1.0218843 1.0479535 #>  [321,] 0.6422542 0.6773705 0.6965084 #>  [322,] 0.6784462 0.7001690 0.7194141 #>  [323,] 0.9138682 0.9267972 0.9627026 #>  [324,] 1.4309755 1.4469109 1.4500368 #>  [325,] 0.7433650 0.7547198 0.7817066 #>  [326,] 0.9212736 0.9545504 1.0536953 #>  [327,] 0.8720209 0.9523813 1.0032501 #>  [328,] 0.9797605 1.0323629 1.0544378 #>  [329,] 1.1205106 1.1333258 1.2226759 #>  [330,] 0.5492128 0.5510464 0.5594460 #>  [331,] 1.5124352 1.5178154 1.5745528 #>  [332,] 0.6132564 0.6492021 0.6773231 #>  [333,] 0.7691959 0.7823899 0.8061181 #>  [334,] 0.6213396 0.6296756 0.6329071 #>  [335,] 0.5489707 0.5809477 0.5882574 #>  [336,] 0.7802380 0.8194999 0.8448678 #>  [337,] 0.5860728 0.5883144 0.6077066 #>  [338,] 0.9328405 0.9465614 0.9521457 #>  [339,] 1.8098182 1.8543116 1.8694288 #>  [340,] 0.9628701 0.9891566 1.0086480 #>  [341,] 0.6103353 0.6120240 0.6421135 #>  [342,] 0.7395467 0.7471865 0.7724949 #>  [343,] 1.4992563 1.6179286 1.6525414 #>  [344,] 1.3281133 1.3620807 1.3748240 #>  [345,] 1.1739502 1.2098995 1.2559106 #>  [346,] 0.7206731 0.7390752 0.7397864 #>  [347,] 0.6024873 0.6065339 0.6199959 #>  [348,] 0.6054740 0.6299579 0.6317363 #>  [349,] 0.7293583 0.7353637 0.7697612 #>  [350,] 0.6548158 0.6738339 0.7380327 #>  [351,] 0.6574814 0.6979188 0.7017956 #>  [352,] 0.9488707 0.9501323 0.9506515 #>  [353,] 0.9088865 0.9295140 0.9388447 #>  [354,] 0.6903611 0.7271112 0.7514094 #>  [355,] 1.3152194 1.3422416 1.3603511 #>  [356,] 0.6216225 0.6613564 0.6872141 #>  [357,] 1.3122002 1.3249912 1.3577201 #>  [358,] 0.5751953 0.5809139 0.6043898 #>  [359,] 0.6383931 0.6386500 0.6576525 #>  [360,] 1.4629077 1.4706712 1.4807790 #>  [361,] 1.8520560 1.8779252 1.8938086 #>  [362,] 0.6264071 0.6377792 0.6461135 #>  [363,] 0.6547366 0.6559865 0.6580561 #>  [364,] 0.7206119 0.7958950 0.8063108 #>  [365,] 0.7291997 0.7676943 0.8002875 #>  [366,] 0.6708887 0.6719379 0.6841554 #>  [367,] 1.1603219 1.1643951 1.1814718 #>  [368,] 0.6082092 0.6381569 0.6403658 #>  [369,] 1.0646470 1.0847236 1.0966924 #>  [370,] 0.7550662 0.7708594 0.7864640 #>  [371,] 0.5333078 0.5893066 0.5902108 #>  [372,] 0.7151619 0.7213660 0.7297827 #>  [373,] 1.0041971 1.0302851 1.0563520 #>  [374,] 0.5472306 0.5566405 0.6176050 #>  [375,] 1.0168016 1.0516036 1.0719958 #>  [376,] 0.9329564 0.9357227 0.9596605 #>  [377,] 0.5934364 0.5994053 0.6166938 #>  [378,] 0.7854638 0.8019586 0.8213952 #>  [379,] 0.5614509 0.5670554 0.5766397 #>  [380,] 0.9017701 0.9193567 1.0023177 #>  [381,] 0.7225749 0.7352015 0.7522827 #>  [382,] 0.8430731 0.8449971 0.9041268 #>  [383,] 0.6890756 0.7191747 0.7578981 #>  [384,] 0.6461209 0.6667070 0.6918864 #>  [385,] 0.7288898 0.7402570 0.7724949 #>  [386,] 0.9932273 1.0149406 1.0319299 #>  [387,] 1.0823106 1.0849930 1.0993212 #>  [388,] 0.7104567 0.7149413 0.7703653 #>  [389,] 1.9318621 1.9330174 1.9869301 #>  [390,] 0.6404231 0.6640963 0.6979188 #>  [391,] 1.1605594 1.1755275 1.1835628 #>  [392,] 0.5333507 0.5827247 0.6020408 #>  [393,] 0.8788308 0.8847623 0.9219866 #>  [394,] 0.6233748 0.6728727 0.6831844 #>  [395,] 0.7587888 0.7713808 0.7961776 #>  [396,] 0.4927228 0.5153631 0.5256756 #>  [397,] 0.9076162 0.9525159 0.9559272 #>  [398,] 0.5992498 0.6003851 0.6116154 #>  [399,] 0.5792444 0.5798567 0.5826832 #>  [400,] 0.8134890 0.8171165 0.8227581 #>  [401,] 0.4699711 0.5265203 0.5861256 #>  [402,] 0.5665622 0.5729993 0.5743114 #>  [403,] 0.7004789 0.7503567 0.7504121 #>  [404,] 1.4787025 1.5938841 1.6019959 #>  [405,] 1.6309979 1.6439320 1.6499609 #>  [406,] 1.2203316 1.3171730 1.3463533 #>  [407,] 1.3177160 1.3198024 1.3248359 #>  [408,] 0.6552517 0.6564712 0.6568909 #>  [409,] 1.3065678 1.3367335 1.3378754 #>  [410,] 0.9152464 0.9466425 0.9664774 #>  [411,] 0.6045473 0.6113531 0.6116859 #>  [412,] 0.8340053 0.8407475 0.8461408 #>  [413,] 0.5945086 0.5988390 0.6064467 #>  [414,] 1.1752404 1.1822033 1.2521524 #>  [415,] 0.7157503 0.7178599 0.7424167 #>  [416,] 0.5539536 0.5709906 0.5751814 #>  [417,] 0.9627678 0.9816498 1.0131884 #>  [418,] 0.5908304 0.5932289 0.6010965 #>  [419,] 0.6826107 0.7176277 0.7676943 #>  [420,] 0.5085830 0.5305814 0.5645209 #>  [421,] 1.2093165 1.2353002 1.3146825 #>  [422,] 0.8217100 0.8388834 0.8670284 #>  [423,] 0.6290449 0.6472395 0.6778517 #>  [424,] 0.6875151 0.7076789 0.7143103 #>  [425,] 0.5228004 0.5284111 0.5774040 #>  [426,] 0.5398479 0.5670554 0.6060217 #>  [427,] 0.6597517 0.6894880 0.6905509 #>  [428,] 0.7952780 0.8273665 0.8293848 #>  [429,] 0.6024168 0.6512812 0.6576525 #>  [430,] 0.6140330 0.6277104 0.6356744 #>  [431,] 1.7510243 1.7917782 1.8175276 #>  [432,] 0.7196782 0.7227286 0.7243779 #>  [433,] 0.4788946 0.4893326 0.5046162 #>  [434,] 0.5886920 0.5953025 0.5969018 #>  [435,] 0.5257977 0.5313629 0.6127085 #>  [436,] 0.8987329 0.9246596 0.9608011 #>  [437,] 0.5820575 0.6378179 0.6447282 #>  [438,] 0.5956477 0.6100082 0.6283499 #>  [439,] 1.1886411 1.2049974 1.2338496 #>  [440,] 1.1618665 1.1649033 1.1961998 #>  [441,] 1.4947216 1.5644691 1.6343923 #>  [442,] 0.7568321 0.7716370 0.7787314 #>  [443,] 0.7455975 0.7478425 0.7583385 #>  [444,] 0.6636128 0.6733829 0.6879929 #>  [445,] 0.5624684 0.5746554 0.5771732 #>  [446,] 0.9932273 0.9955574 0.9986345 #>  [447,] 0.8651107 0.9742932 0.9811421 #>  [448,] 0.5896916 0.5910655 0.5937550 #>  [449,] 1.0122533 1.0186306 1.0571906 #>  [450,] 0.6171739 0.6279481 0.6331382 #>  [451,] 0.5793616 0.5969086 0.6185636 #>  [452,] 1.1196482 1.1295882 1.1543223 #>  [453,] 0.5730872 0.5746889 0.5789747 #>  [454,] 0.7169619 0.7338809 0.7367842 #>  [455,] 0.5899228 0.6166203 0.6299624 #>  [456,] 0.5883144 0.6203840 0.6493544 #>  [457,] 0.8625156 0.8694753 0.9120572 #>  [458,] 0.9213089 0.9285383 0.9489577 #>  [459,] 0.6644540 0.7085000 0.7428318 #>  [460,] 0.7307429 0.7353120 0.7849569 #>  [461,] 0.6614961 0.6637335 0.6800617 #>  [462,] 0.9195783 0.9478743 0.9692897 #>  [463,] 0.8177914 0.8263152 0.8939334 #>  [464,] 1.0186306 1.1423111 1.1593073 #>  [465,] 1.0307976 1.2034693 1.2280066 #>  [466,] 0.6806058 0.6826075 0.7154654 #>  [467,] 0.6759504 0.6779744 0.7287667 #>  [468,] 0.5824909 0.6023233 0.6358178 #>  [469,] 0.5910466 0.5930197 0.6182921 #>  [470,] 0.7982770 0.8059420 0.8369600 #>  [471,] 0.4878566 0.5222462 0.5361046 #>  [472,] 0.7592120 0.8176044 0.8249989 #>  [473,] 0.8720209 0.9447999 1.0213352 #>  [474,] 0.4813826 0.4827630 0.4830591 #>  [475,] 1.3432130 1.3464487 1.3888728 #>  [476,] 0.7800602 0.8192316 0.8348796 #>  [477,] 0.6131169 0.6313175 0.6496738 #>  [478,] 1.0094797 1.0327617 1.0651765 #>  [479,] 0.7229125 0.7573401 0.7626516 #>  [480,] 1.1399975 1.1810060 1.1903609 #>  [481,] 0.6609819 0.7215934 0.7274777 #>  [482,] 0.8460267 0.8666785 0.8701729 #>  [483,] 0.4809933 0.4827630 0.4888534 #>  [484,] 0.9550710 0.9670398 1.0176787 #>  [485,] 0.8820754 0.9018666 0.9209991 #>  [486,] 0.4901692 0.5222462 0.5288019 #>  [487,] 1.1431519 1.1652101 1.1851560 #>  [488,] 0.8840120 0.9206869 0.9263677 #>  [489,] 0.6667493 0.8261604 0.8682759 #>  [490,] 0.5867225 0.5923668 0.5967512 #>  [491,] 0.8529465 0.8617805 0.8885996 #>  [492,] 0.4908292 0.4933199 0.5069190 #>  [493,] 1.0021335 1.0151370 1.0562232 #>  [494,] 0.8907778 0.8961650 0.9198298 #>  [495,] 0.9232887 0.9303427 0.9501656 #>  [496,] 2.0420639 2.0442087 2.1573063 #>  [497,] 0.7616144 0.7781054 0.8062966 #>  [498,] 0.7887546 0.8294863 0.8404699 #>  [499,] 0.6993448 0.7297827 0.7407002 #>  [500,] 0.6820687 0.6916910 0.7129633 #>  [501,] 0.6343919 0.6365114 0.6408197 #>  [502,] 0.8425907 0.8653449 0.9500378 #>  [503,] 0.5447651 0.6084877 0.6210712 #>  [504,] 0.8442929 0.8884278 0.9222247 #>  [505,] 1.3099373 1.3124167 1.3278764 #>  [506,] 0.7097793 0.7273810 0.7354734 #>  [507,] 0.9014913 0.9119886 0.9395711 #>  [508,] 0.8440472 0.8756344 0.8768479 #>  [509,] 1.2962428 1.3534727 1.3610534 #>  [510,] 0.8946561 0.9112579 0.9551525 #>  [511,] 1.0983901 1.1838610 1.2882760 #>  [512,] 0.8548908 0.8806010 0.8852005 #>  [513,] 0.7663831 0.7708198 0.7989903 #>  [514,] 0.9202302 0.9445766 1.0644450 #>  [515,] 0.9851783 1.0816470 1.0838481 #>  [516,] 1.0069834 1.0104754 1.0960076 #>  [517,] 0.5082552 0.5094358 0.5274574 #>  [518,] 1.8472708 1.8622313 1.8894231 #>  [519,] 0.6405659 0.7310007 0.7395746 #>  [520,] 0.9202274 0.9312638 1.0101990 #>  [521,] 0.8606787 0.8679365 0.8768642 #>  [522,] 0.6542033 0.6900000 0.6950999 #>  [523,] 0.7322758 0.7709302 0.7732158 #>  [524,] 0.4683421 0.5085830 0.5287012 #>  [525,] 0.5408734 0.5462750 0.5525615 #>  [526,] 0.7188800 0.7781572 0.8082124 #>  [527,] 0.5225680 0.5925094 0.6105933 #>  [528,] 0.8263606 0.8341309 0.8444423 #>  [529,] 1.2281450 1.2632755 1.2811844 #>  [530,] 1.0654647 1.0783664 1.1223274 #>  [531,] 0.9010801 0.9141917 0.9466077 #>  [532,] 0.8162542 0.8332108 0.8824717 #>  [533,] 0.6671224 0.6738339 0.6832406 #>  [534,] 0.5259613 0.5397278 0.5413206 #>  [535,] 0.9064931 0.9210981 0.9545504 #>  [536,] 0.7177715 0.7183003 0.7234545 #>  [537,] 0.5489944 0.5508537 0.5621215 #>  [538,] 0.7955539 0.8185268 0.8296688 #>  [539,] 0.8756344 0.8829715 0.8981984 #>  [540,] 0.8525165 0.9052362 0.9422232 #>  [541,] 1.6891734 1.6922933 1.7053654 #>  [542,] 1.3277501 1.3329672 1.3366588 #>  [543,] 0.5456107 0.5632034 0.6003851 #>  [544,] 0.6517133 0.7011677 0.7227565 #>  [545,] 0.8943729 0.9008603 0.9439179 #>  [546,] 0.8801920 0.9068405 0.9422232 #>  [547,] 0.5925094 0.6053349 0.6095044 #>  [548,] 0.9440753 0.9662630 1.0343760 #>  [549,] 0.5424109 0.5490071 0.6016925 #>  [550,] 1.0536274 1.0674723 1.1333706 #>  [551,] 0.9056986 0.9960360 1.0210353 #>  [552,] 0.7987166 0.8261212 0.8567570 #>  [553,] 0.4887616 0.5110219 0.5261354 #>  [554,] 1.4510269 1.6053982 1.6114291 #>  [555,] 0.6511755 0.7023005 0.7270694 #>  [556,] 0.7169619 0.7269116 0.7374639 #>  [557,] 0.8188014 0.9230348 0.9374525 #>  [558,] 0.8570611 0.9274727 0.9445766 #>  [559,] 0.7177272 0.7776845 0.8454471 #>  [560,] 1.3740990 1.3814226 1.4281727 #>  [561,] 1.0457515 1.0498698 1.0512886 #>  [562,] 0.5002408 0.5068138 0.5406897 #>  [563,] 0.7169563 0.7405293 0.7449405 #>  [564,] 0.9672168 1.0399724 1.0826760 #>  [565,] 0.4910652 0.5127837 0.5424109 #>  [566,] 1.0309764 1.0634117 1.1023912 #>  [567,] 0.8287154 0.8453021 0.8614176 #>  [568,] 0.6135262 0.6190790 0.6293728 #>  [569,] 0.6169823 0.6194159 0.6655123 #>  [570,] 0.7112997 0.7225728 0.7302554 #>  [571,] 0.5296760 0.6105765 0.6279759 #>  [572,] 0.8504535 0.8540247 0.8585403 #>  [573,] 0.7089613 0.7287083 0.7397733 #>  [574,] 0.6028886 0.6035498 0.6147960 #>  [575,] 1.2623271 1.3610653 1.4503667 #>  [576,] 0.7644381 0.7894255 0.8177420 #>  [577,] 0.6726818 0.6763652 0.7036025 #>  [578,] 0.6425774 0.6522434 0.6631889 #>  [579,] 0.6774408 0.6824968 0.6832731 #>  [580,] 1.0858577 1.1943253 1.2010424 #>  [581,] 0.9344264 0.9508146 0.9633618 #>  [582,] 1.0166995 1.0380197 1.0774277 #>  [583,] 0.8776542 0.8923806 0.9164908 #>  [584,] 0.8194396 0.8344121 0.8476586 #>  [585,] 0.9782307 0.9869561 1.0441055 #>  [586,] 0.8133567 0.8168280 0.8415461 #>  [587,] 0.7576143 0.7823567 0.7991147 #>  [588,] 0.6361424 0.6380360 0.6634201 #>  [589,] 0.7384801 0.7439241 0.7563117 #>  [590,] 0.8385003 0.8653351 0.8806010 #>  [591,] 1.1213040 1.1458923 1.1694355 #>  [592,] 0.6182142 0.6188674 0.6488536 #>  [593,] 0.5970336 0.6007030 0.6568031 #>  [594,] 0.6786676 0.6881946 0.6908943 #>  [595,] 1.3055457 1.3491650 1.3755629 #>  [596,] 0.8414397 0.8439489 0.8487228 #>  [597,] 1.4171601 1.4367480 1.4474931 #>  [598,] 0.6922303 0.6924478 0.6955760 #>  [599,] 0.8487061 0.8603101 0.8900032 #>  [600,] 0.6860524 0.6860870 0.6926349 #>  [601,] 1.0814386 1.1083224 1.2008187 #>  [602,] 0.6773934 0.6974795 0.7334962 #>  [603,] 0.9772943 0.9894535 1.0142760 #>  [604,] 0.4879684 0.4933199 0.4956376 #>  [605,] 0.5374963 0.5638251 0.5750497 #>  [606,] 1.2607233 1.3065500 1.3431281 #>  [607,] 1.0075556 1.0103386 1.0307086 #>  [608,] 0.8541531 0.8554854 0.9094975 #>  [609,] 1.0041631 1.0207799 1.0820811 #>  [610,] 0.6171739 0.6231019 0.6330335 #>  [611,] 0.8959022 0.8970934 0.9088243 #>  [612,] 0.5326643 0.5337556 0.5551554 #>  [613,] 1.0876105 1.1356140 1.1452853 #>  [614,] 0.7857811 0.7907553 0.8160604 #>  [615,] 0.5872580 0.6010965 0.6139215 #>  [616,] 1.3162502 1.3260595 1.3270180 #>  [617,] 0.8756748 0.9022697 0.9416340 #>  [618,] 0.7167713 0.7337841 0.7495521 #>  [619,] 0.5875087 0.6574546 0.6710083 #>  [620,] 0.7866182 0.8007229 0.8033064 #>  [621,] 0.8022547 0.8325986 0.8365715 #>  [622,] 0.5042018 0.5219129 0.5561967 #>  [623,] 0.6676670 0.6791250 0.7001196 #>  [624,] 1.1143814 1.1456062 1.1592352 #>  [625,] 0.6098461 0.6318619 0.6417328 #>  [626,] 1.0092990 1.0993594 1.1710798 #>  [627,] 0.8693972 0.8738301 0.9102605 #>  [628,] 0.6877022 0.7196981 0.7198775 #>  [629,] 0.6118514 0.6421135 0.6579482 #>  [630,] 0.6477358 0.6556587 0.6757551 #>  [631,] 0.5940630 0.6023467 0.6103223 #>  [632,] 0.5137681 0.5174643 0.5414372 #>  [633,] 1.2289003 1.2487062 1.2535435 #>  [634,] 1.3145998 1.3281876 1.4074771 #>  [635,] 0.7835716 0.8313470 0.8422802 #>  [636,] 0.5951701 0.6449406 0.6682400 #>  [637,] 1.2656214 1.3061771 1.3566955 #>  [638,] 0.7338791 0.7663759 0.8019824 #>  [639,] 0.5729993 0.5825958 0.5985047 #>  [640,] 0.5371929 0.5462750 0.5495944 #>  [641,] 0.5841823 0.6115515 0.6501041 #>  [642,] 0.6194603 0.7269070 0.7463151 #>  [643,] 0.7294831 0.7399593 0.7427296 #>  [644,] 0.4859473 0.5271295 0.5339686 #>  [645,] 1.0464334 1.0714325 1.0766811 #>  [646,] 0.9360389 0.9636082 0.9700792 #>  [647,] 0.6899872 0.7316012 0.7371995 #>  [648,] 0.5261215 0.5616806 0.5648400 #>  [649,] 0.5745854 0.5917098 0.6273726 #>  [650,] 0.6596776 0.6733829 0.6856702 #>  [651,] 0.7755287 0.8141730 0.8558302 #>  [652,] 1.0139213 1.0597470 1.0663889 #>  [653,] 0.8328754 0.8454235 0.8499179 #>  [654,] 0.8245151 0.8325591 0.8524776 #>  [655,] 1.3765472 1.3926197 1.4305401 #>  [656,] 0.7597611 0.8103800 0.8232994 #>  [657,] 0.6298365 0.6605305 0.6772529 #>  [658,] 0.5477445 0.6015391 0.6239306 #>  [659,] 0.4433992 0.4874658 0.5331775 #>  [660,] 0.5155655 0.5253889 0.5340320 #>  [661,] 0.6327429 0.6569005 0.6764035 #>  [662,] 0.8161857 0.8292791 0.8475749 #>  [663,] 0.6464671 0.6471084 0.6531117 #>  [664,] 0.7304432 0.7962877 0.8234125 #>  [665,] 1.0442814 1.0498713 1.0761256 #>  [666,] 1.0356788 1.0449185 1.0604449 #>  [667,] 0.5613495 0.5638251 0.5668027 #>  [668,] 1.0171973 1.0192556 1.0193942 #>  [669,] 0.6383899 0.6566976 0.6824877 #>  [670,] 0.8543416 0.8634003 0.8846498 #>  [671,] 0.5637302 0.5931337 0.6040679 #>  [672,] 1.2709679 1.2728839 1.2799974 #>  [673,] 0.7123671 0.7225728 0.7304387 #>  [674,] 0.4857631 0.5581658 0.6009431 #>  [675,] 0.5771008 0.5809477 0.5928308 #>  [676,] 0.6674793 0.6934746 0.7316012 #>  [677,] 0.5734307 0.5879504 0.6043898 #>  [678,] 0.9425360 0.9470844 0.9577771 #>  [679,] 0.9916457 0.9994090 1.0095981 #>  [680,] 0.8840160 0.8982204 0.9222247 #>  [681,] 0.5655754 0.5833142 0.5869470 #>  [682,] 0.8911088 0.8926006 0.9195783 #>  [683,] 0.5296760 0.5563813 0.5795336 #>  [684,] 0.6694252 0.7812451 0.7963972 #>  [685,] 0.8478065 0.8482862 0.8645154 #>  [686,] 0.6305555 0.6381547 0.7461403 #>  [687,] 0.5795090 0.5882774 0.6086311 #>  [688,] 0.5326643 0.5538226 0.5826832 #>  [689,] 1.0722468 1.1809528 1.1959612 #>  [690,] 0.7127783 0.7188234 0.7254060 #>  [691,] 1.0236250 1.0345751 1.0792659 #>  [692,] 0.6868393 0.6998860 0.7409204 #>  [693,] 0.6605305 0.6822288 0.7071317 #>  [694,] 1.1235231 1.1368028 1.1438342 #>  [695,] 0.6116154 0.6122430 0.6238334 #>  [696,] 0.5397357 0.5423890 0.5489944 #>  [697,] 0.5664336 0.6149278 0.6317363 #>  [698,] 0.5570540 0.5754211 0.5875847 #>  [699,] 0.8046442 0.8486656 0.8656021 #>  [700,] 0.5428177 0.5433270 0.5501571 #>  [701,] 1.2147483 1.2593045 1.3064333 #>  [702,] 0.6324504 0.6347726 0.6654564 #>  [703,] 0.5613495 0.5836466 0.5868884 #>  [704,] 0.4699063 0.4982067 0.5237638 #>  [705,] 0.5631586 0.5867225 0.5959669 #>  [706,] 1.3308909 1.3356918 1.3554960 #>  [707,] 0.7877322 0.8135025 0.8757630 #>  [708,] 0.7037126 0.7180586 0.7288202 #>  [709,] 0.7575570 0.7710482 0.8378895 #>  [710,] 0.8101203 0.8493538 0.8505477 #>  [711,] 1.0217064 1.0433137 1.0589282 #>  [712,] 1.2092181 1.3616830 1.3861137 #>  [713,] 0.4858607 0.5216080 0.5399467 #>  [714,] 1.2146432 1.2194992 1.2218686 #>  [715,] 0.7059295 0.7072415 0.7552360 #>  [716,] 0.7638962 0.7761266 0.7929244 #>  [717,] 0.8295420 0.8332532 0.8622437 #>  [718,] 1.0642300 1.0722106 1.0918394 #>  [719,] 0.5317823 0.5344838 0.5540939 #>  [720,] 0.5545381 0.5624137 0.5761797 #>  [721,] 0.7308328 0.7721933 0.7775831 #>  [722,] 0.6884717 0.7125875 0.7256617 #>  [723,] 1.5275467 1.5538280 1.5601171 #>  [724,] 1.0849795 1.1480281 1.1521584 #>  [725,] 0.7452416 0.7751324 0.7781572 #>  [726,] 0.8578101 0.8797333 0.9028720 #>  [727,] 0.5525422 0.5973268 0.5979093 #>  [728,] 0.5407534 0.5623769 0.5931337 #>  [729,] 0.8187902 0.8370617 0.8413379 #>  [730,] 1.0574846 1.0803181 1.1042813 #>  [731,] 0.8847387 0.8855953 0.8962599 #>  [732,] 0.8352368 0.8548908 0.8586171 #>  [733,] 1.4275172 1.4411590 1.5026355 #>  [734,] 0.6338301 0.6404231 0.6708518 #>  [735,] 0.8051202 0.8294863 0.8380904 #>  [736,] 0.4482299 0.5305814 0.5777166 #>  [737,] 1.1735423 1.2168809 1.2739491 #>  [738,] 0.5992498 0.6106341 0.6374374 #>  [739,] 0.8518650 0.8547660 0.8549277 #>  [740,] 0.7652696 0.7828912 0.7898701 #>  [741,] 0.4951638 0.5256756 0.5319760 #>  [742,] 0.7712192 0.7718316 0.7799663 #>  [743,] 0.7819460 0.7853793 0.8499977 #>  [744,] 1.2218457 1.2250658 1.3710403 #>  [745,] 0.5357189 0.5441844 0.5444287 #>  [746,] 0.5265781 0.5627309 0.5655754 #>  [747,] 0.5994636 0.6428411 0.6904537 #>  [748,] 0.7649970 0.8029351 0.8066542 #>  [749,] 1.5625293 1.5745250 1.5799417 #>  [750,] 0.8358564 0.8781470 0.8822077 #>  [751,] 0.8458045 0.8644228 0.9301529 #>  [752,] 0.6846858 0.7017185 0.7522524 #>  [753,] 0.6755909 0.7384455 0.7688912 #>  [754,] 0.7800175 0.8067347 0.8620684 #>  [755,] 0.7496812 0.7531105 0.7998847 #>  [756,] 0.9829315 1.0122701 1.0261075 #>  [757,] 0.5155533 0.5399433 0.5636961 #>  [758,] 0.5812968 0.6081670 0.6140073 #>  [759,] 0.5787542 0.6983469 0.6997383 #>  [760,] 0.9940917 0.9941857 1.0441187 #>  [761,] 0.6839659 0.6862722 0.7012009 #>  [762,] 0.6841554 0.6922303 0.6959957 #>  [763,] 0.6860870 0.6966040 0.7046044 #>  [764,] 0.9658174 1.0038264 1.0476135 #>  [765,] 0.7311887 0.7931449 0.8206874 #>  [766,] 1.2210051 1.2259315 1.2293125 #>  [767,] 0.6820687 0.6891595 0.7055712 #>  [768,] 0.6267066 0.6378199 0.6490029 #>  [769,] 0.4788946 0.4911732 0.5357189 #>  [770,] 0.8150266 0.8640930 0.8746955 #>  [771,] 0.7639051 0.7704916 0.7805117 #>  [772,] 0.8437476 0.8511928 0.8656021 #>  [773,] 0.7340861 0.7410340 0.7578099 #>  [774,] 0.7300008 0.7467744 0.7497106 #>  [775,] 0.8474840 0.8661607 0.9349357 #>  [776,] 0.5693690 0.5916355 0.6200572 #>  [777,] 0.6496738 0.6504010 0.6519038 #>  [778,] 0.7048553 0.7625410 0.7714349 #>  [779,] 0.8680686 0.8738554 0.9191789 #>  [780,] 0.7686832 0.7992704 0.8009717 #>  [781,] 1.2401860 1.2429471 1.3240048 #>  [782,] 0.7419477 0.8282113 0.8351181 #>  [783,] 0.7218410 0.7364300 0.7412385 #>  [784,] 0.5748282 0.5787946 0.5799902 #>  [785,] 1.0508764 1.0609743 1.0887530 #>  [786,] 0.6182142 0.6296609 0.6570845 #>  [787,] 1.0531291 1.0602323 1.0646470 #>  [788,] 0.8746852 0.8911088 0.9025409 #>  [789,] 0.6254158 0.6519419 0.6579869 #>  [790,] 1.1320036 1.1358264 1.1445662 #>  [791,] 1.0940186 1.2133864 1.2681926 #>  [792,] 0.7029586 0.7058362 0.7334962 #>  [793,] 1.2090461 1.2294759 1.2623735 #>  [794,] 0.6424040 0.6473904 0.6534307 #>  [795,] 0.6319375 0.6327712 0.6618794 #>  [796,] 0.8336551 0.8657627 0.8950369 #>  [797,] 0.6662178 0.6863897 0.7264538 #>  [798,] 0.7127209 0.7178599 0.7335821 #>  [799,] 0.9039617 0.9110518 0.9174814 #>  [800,] 1.0291759 1.0702881 1.0967396 #>  [801,] 0.9115159 0.9332891 1.0214112 #>  [802,] 1.2902132 1.3055740 1.3492139 #>  [803,] 1.1649533 1.1657428 1.1739952 #>  [804,] 0.5279865 0.5347073 0.5510628 #>  [805,] 0.5480369 0.5529191 0.5848392 #>  [806,] 0.6811738 0.6822664 0.7010901 #>  [807,] 0.8069485 0.8347630 0.8381761 #>  [808,] 0.4646109 0.4690741 0.5028539 #>  [809,] 0.6531211 0.7175408 0.7243883 #>  [810,] 0.6347190 0.6661234 0.6970826 #>  [811,] 1.5393754 1.5925209 1.6612644 #>  [812,] 0.9136933 0.9159804 0.9629909 #>  [813,] 0.8754429 0.8840120 0.9553983 #>  [814,] 0.8254075 0.8258023 0.8458563 #>  [815,] 0.8033266 0.8560135 0.9212736 #>  [816,] 1.3537884 1.4012957 1.4312648 #>  [817,] 0.6180260 0.6220943 0.6349195 #>  [818,] 0.7716107 0.7792710 0.8103800 #>  [819,] 0.6066404 0.6119764 0.6174084 #>  [820,] 0.7403488 0.7426944 0.7434560 #>  [821,] 1.2153653 1.2186278 1.2187063 #>  [822,] 1.3199170 1.3544360 1.3603518 #>  [823,] 2.1362395 2.1480684 2.2023559 #>  [824,] 0.5141743 0.5416997 0.5485018 #>  [825,] 0.7091213 0.7147432 0.7158804 #>  [826,] 0.8093441 0.8355215 0.8391469 #>  [827,] 0.7312550 0.7658816 0.7684111 #>  [828,] 0.8350802 0.8693432 0.9123756 #>  [829,] 0.5837825 0.6224340 0.6293504 #>  [830,] 1.3758000 1.3963209 1.4210472 #>  [831,] 0.6886999 0.6987242 0.7213433 #>  [832,] 0.6605899 0.6733752 0.6815934 #>  [833,] 0.8167483 0.8404699 0.8433529 #>  [834,] 0.8937163 0.9506240 0.9539657 #>  [835,] 0.4887388 0.5001637 0.5046162 #>  [836,] 0.5503362 0.5610574 0.5789747 #>  [837,] 0.7799061 0.8103286 0.8125999 #>  [838,] 0.6697131 0.6840779 0.7120010 #>  [839,] 1.2001541 1.2205909 1.2230680 #>  [840,] 0.6183656 0.6327712 0.6390645 #>  [841,] 0.7177272 0.7184379 0.7392126 #>  [842,] 1.0302046 1.0398091 1.1032194 #>  [843,] 1.0021776 1.0640791 1.0657750 #>  [844,] 0.9809618 1.0037249 1.0634872 #>  [845,] 0.7033295 0.7122276 0.7162626 #>  [846,] 1.6212191 1.6924795 1.7178090 #>  [847,] 0.5555997 0.5568603 0.5857700 #>  [848,] 1.3518840 1.3610534 1.3627925 #>  [849,] 0.8916944 0.9004730 0.9058615 #>  [850,] 1.3930037 1.4392880 1.4460044 #>  [851,] 0.6085294 0.6166883 0.6253850 #>  [852,] 1.1855629 1.2091334 1.2236705 #>  [853,] 1.0327617 1.0794489 1.1147711 #>  [854,] 1.5863486 1.6616816 1.7397168 #>  [855,] 0.8378752 0.8587839 0.8954289 #>  [856,] 1.0288208 1.0799112 1.0962508 #>  [857,] 0.8436956 0.8511928 0.8551901 #>  [858,] 0.5460563 0.5606962 0.5637630 #>  [859,] 0.6845646 0.7376739 0.7510397 #>  [860,] 0.5761797 0.5784045 0.5811162 #>  [861,] 0.9001007 0.9071838 0.9107937 #>  [862,] 0.5150910 0.5237638 0.5294943 #>  [863,] 0.9052362 0.9187379 0.9241846 #>  [864,] 0.8199862 0.8256740 0.8811329 #>  [865,] 0.6570583 0.6939768 0.6952468 #>  [866,] 0.8365835 0.8711840 0.9062482 #>  [867,] 0.7751191 0.7975806 0.8681182 #>  [868,] 0.8581945 0.9282957 0.9586907 #>  [869,] 0.8434409 0.8626651 0.8735277 #>  [870,] 0.5260113 0.5360740 0.5541846 #>  [871,] 0.8671622 0.9039323 0.9080045 #>  [872,] 0.5740507 0.7161778 0.7297617 #>  [873,] 0.7482350 0.8177420 0.8177914 #>  [874,] 0.5069190 0.5116034 0.5367252 #>  [875,] 0.7820650 0.7897353 0.8171470 #>  [876,] 1.2669839 1.2801000 1.2994109 #>  [877,] 1.1568882 1.2246978 1.2249396 #>  [878,] 0.7548024 0.7562325 0.7750003 #>  [879,] 0.5674287 0.5818538 0.5884604 #>  [880,] 0.5893066 0.5945926 0.5951701 #>  [881,] 0.6794007 0.6809829 0.6960210 #>  [882,] 0.6710482 0.7036025 0.7083752 #>  [883,] 0.5561903 0.5705864 0.5923668 #>  [884,] 1.1000722 1.2098468 1.2304009 #>  [885,] 0.5116034 0.5253889 0.5456261 #>  [886,] 1.3366678 1.3492139 1.3590492 #>  [887,] 1.2397303 1.2493635 1.2602547 #>  [888,] 0.8217048 0.8491610 0.8560074 #>  [889,] 0.7550662 0.7765646 0.7802380 #>  [890,] 0.6722027 0.8113900 0.8270371 #>  [891,] 1.4508955 1.4773237 1.4835700 #>  [892,] 1.2810814 1.2848119 1.2889062 #>  [893,] 0.6064145 0.6507291 0.6734255 #>  [894,] 0.8093363 0.8672518 0.9552388 #>  [895,] 0.6644709 0.7227387 0.7410340 #>  [896,] 0.4729427 0.4901692 0.5092515 #>  [897,] 0.5291721 0.5310791 0.5539173 #>  [898,] 0.7304432 0.7395467 0.7523643 #>  [899,] 0.8273152 0.8479568 0.8519368 #>  [900,] 0.8604709 0.8688761 0.8858304 #>  [901,] 0.7507450 0.7523357 0.7665105 #>  [902,] 0.5886920 0.5997109 0.6446650 #>  [903,] 1.2179078 1.2414338 1.2588157 #>  [904,] 1.0647802 1.0673807 1.1121529 #>  [905,] 0.8179662 0.8194999 0.8331656 #>  [906,] 0.8387180 0.8665296 0.8725962 #>  [907,] 0.9931072 0.9981603 0.9987646 #>  [908,] 1.1495980 1.1601857 1.1975164 #>  [909,] 0.5211039 0.5383639 0.5419063 #>  [910,] 0.6915176 0.7254704 0.7262886 #>  [911,] 0.7157503 0.7264538 0.7367919 #>  [912,] 0.7417195 0.8056028 0.8316892 #>  [913,] 0.5220003 0.5537303 0.5649197 #>  [914,] 0.8484167 0.8486684 0.8790716 #>  [915,] 0.5635029 0.5917011 0.6143213 #>  [916,] 1.3556232 1.4476097 1.4614092 #>  [917,] 0.5864086 0.6216225 0.6257255 #>  [918,] 0.9507369 0.9584287 0.9902471 #>  [919,] 0.6986932 0.7047170 0.7810674 #>  [920,] 0.8242242 0.8376420 0.8507497 #>  [921,] 0.7113617 0.7214507 0.7376186 #>  [922,] 0.9033291 0.9114404 0.9452593 #>  [923,] 1.3924955 1.4023697 1.4107899 #>  [924,] 1.2174468 1.2776154 1.3025068 #>  [925,] 0.8391413 0.8973108 0.9181686 #>  [926,] 1.4830699 1.5090212 1.5331395 #>  [927,] 0.8283885 0.8328754 0.8340967 #>  [928,] 1.0531291 1.0599798 1.0614190 #>  [929,] 0.6757551 0.7067874 0.7718457 #>  [930,] 0.6074259 0.6100550 0.6128342 #>  [931,] 0.6449269 0.6467511 0.6543232 #>  [932,] 0.6566572 0.6710991 0.6860524 #>  [933,] 1.1550701 1.2150879 1.2614023 #>  [934,] 0.5104165 0.5217578 0.5399467 #>  [935,] 0.7392254 0.7804381 0.7909508 #>  [936,] 0.6090324 0.6103032 0.6200572 #>  [937,] 0.5132118 0.5287012 0.5340576 #>  [938,] 0.6690633 0.6778206 0.7002642 #>  [939,] 0.8341238 0.8416406 0.8566819 #>  [940,] 0.6810115 0.6827445 0.6873290 #>  [941,] 0.5689599 0.5840288 0.5966373 #>  [942,] 0.7784869 0.7898662 0.7948289 #>  [943,] 0.9914559 1.0182915 1.0464137 #>  [944,] 0.6438113 0.6535900 0.6600545 #>  [945,] 0.7092452 0.7303067 0.7587870 #>  [946,] 0.7506492 0.7759579 0.7904589 #>  [947,] 0.5125312 0.5308687 0.5458267 #>  [948,] 0.5448374 0.5525422 0.5551389 #>  [949,] 0.5674287 0.6267761 0.6514656 #>  [950,] 0.6923151 0.7000163 0.7498396 #>  [951,] 0.5308687 0.5405330 0.5490676 #>  [952,] 0.9193567 0.9290353 0.9581708 #>  [953,] 0.8570907 0.8588354 0.8602392 #>  [954,] 0.6344449 0.6388909 0.6762379 #>  [955,] 0.5682801 0.5822417 0.5857700 #>  [956,] 0.6543232 0.6710083 0.7005815 #>  [957,] 1.4513562 1.4620042 1.5375033 #>  [958,] 1.3595516 1.4182778 1.4247606 #>  [959,] 1.2877378 1.3046910 1.3111170 #>  [960,] 1.4110661 1.5077455 1.5755298 #>  [961,] 1.8581882 1.8614803 1.8717057 #>  [962,] 0.8725050 0.8796014 0.8874613 #>  [963,] 0.5152591 0.5866983 0.5947074 #>  [964,] 0.9675160 1.0122661 1.0388263 #>  [965,] 0.9356635 0.9636888 1.0277348 #>  [966,] 0.7999083 0.8024495 0.8460153 #>  [967,] 0.8665210 0.8722083 0.9755049 #>  [968,] 0.6238334 0.6486798 0.6750074 #>  [969,] 1.4818750 1.4969822 1.5033114 #>  [970,] 0.8768479 0.9362471 0.9534721 #>  [971,] 0.5525615 0.5715858 0.6140073 #>  [972,] 0.8565041 0.9063133 0.9112045 #>  [973,] 1.4616761 1.4821901 1.4971015 #>  [974,] 0.7064478 0.7185376 0.8063819 #>  [975,] 0.7611404 0.7773425 0.7953488 #>  [976,] 0.5570540 0.5582105 0.5774040 #>  [977,] 0.9679292 0.9829424 0.9862557 #>  [978,] 1.2622180 1.2653571 1.2823082 #>  [979,] 0.7547198 0.7624093 0.7751521 #>  [980,] 0.5584398 0.6300681 0.6607470 #>  [981,] 0.5911198 0.5932687 0.6000353 #>  [982,] 1.2535295 1.2581249 1.2814047 #>  [983,] 0.7912613 0.8691061 0.9393304 #>  [984,] 0.6007030 0.6037517 0.6160763 #>  [985,] 0.5082424 0.5103413 0.5116652 #>  [986,] 0.8216975 0.8741700 0.8988547 #>  [987,] 0.7544749 0.8161857 0.8647989 #>  [988,] 0.8426864 0.8773801 0.9706898 #>  [989,] 0.6045473 0.6347726 0.6521737 #>  [990,] 1.0074210 1.0940208 1.1234142 #>  [991,] 0.5939646 0.6428562 0.6579869 #>  [992,] 0.5922961 0.6105765 0.6120240 #>  [993,] 0.7043947 0.7161877 0.7164152 #>  [994,] 0.6815169 0.6875907 0.7090799 #>  [995,] 1.2046982 1.2372266 1.2559571 #>  [996,] 0.6062226 0.6117811 0.6180281 #>  [997,] 0.6955801 0.7178681 0.7205692 #>  [998,] 0.7491237 0.8222442 0.8593639 #>  [999,] 0.6863811 0.7332115 0.7410095 #> [1000,] 0.4683421 0.4799244 0.4983945 #>   # Find the 10 approximate nearest neighbors (see RANN::nn2) tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\",     eps = 0.3 ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  558  364  115  645   90  349   62  810  436    15 #>    [2,]  230  687  253  435  365  677  358  135  156    20 #>    [3,]  583  584  815  122  712   66  470   84  112   452 #>    [4,]  735  782  687  617  135  435  232  833  246   677 #>    [5,]  394  307   53  254  285  681  119  902  235   371 #>    [6,]  250  365    2  635  974  968  479  156   59   715 #>    [7,]  300  716  614  643  771  805  944  819  121   309 #>    [8,]  159  274  141   28  696  430  686  650  444   383 #>    [9,]  721  213  798  215  702   29  359  305  576   841 #>   [10,]  265  223   39  442  893  387  153  531  946   600 #>   [11,]  901  754   42  261  328  466  956  700  719   948 #>   [12,]  548  929  780  938  125  844  356  378  615   838 #>   [13,]  539  331  168  739  458  573  234  302  169   171 #>   [14,]  818   23  999  779  342  303  658  450  299    32 #>   [15,]  364  400  920  297   62  912  997  514  748   322 #>   [16,]  536  549  169  881  533  526   87  150  434   594 #>   [17,]  820  492  808  777  136  939  504  663  885    65 #>   [18,]  908  943  864  447  730  611   80  787  916   967 #>   [19,]  475   85  542  375  115  575  723  613  148   581 #>   [20,]  365  246    2  974  112  498  253    6  230   687 #>   [21,]  705  951  450   86  658  321  610  619  847   562 #>   [22,]  814  630  400  997  767  932  795  615  912   962 #>   [23,]  999  299   14  684  113  818  825  303  658   203 #>   [24,]  215  831  293  890  986  715  479   29  251   354 #>   [25,]  559  538  890  215   79  831    9  841  755   117 #>   [26,]  290   50  503  581  183  375  186   62  284   322 #>   [27,]   68   35  233  741  283  445   48  569  675   640 #>   [28,]  383    8  686  159  537  611  141  278  618   650 #>   [29,]  702  215  416  989  841   31  291  293  359    24 #>   [30,]  301  736  229  720  207  420  757  722  860   228 #>   [31,]  989  377  416  411  752  402   29  366  359   702 #>   [32,]  656  249  499  764  692  620  450   14  303   897 #>   [33,]  729   95  105  793  645  974  479  635   52   566 #>   [34,]  369  191  149  928  329  921  689  650  351   381 #>   [35,]  233   68   27  450  283  806  396  804  569   332 #>   [36,]  930  941  632  862   97  934  909  745  985   704 #>   [37,]   97  934  885  660  604  862  632  401  640   851 #>   [38,]  751  893  859  948  719  593   42  391  946   901 #>   [39,]  481  545  153  767  455  500  814  395   10   442 #>   [40,]  347   71  422  305  368  750  359  117  429   596 #>   [41,]  565  639  425  217  553   83  725  549   87   698 #>   [42,]  948  261  719  901  466  893   11  727   77   700 #>   [43,]  918  234  990  655  965  796  113  774  871   299 #>   [44,]  451  659  688  612  155  438   98  847   56   667 #>   [45,]  936  147   60  525  971  622  913  776  102   993 #>   [46,]  830  343  530  316  194  904  111  376  273   510 #>   [47,]  432  838  461  788  865  725  526  425   41   356 #>   [48,]  605   69  675  955  445  667  741  155  392    27 #>   [49,]  738  676  443  398  824  543  641  137  279   138 #>   [50,]  290   26  503  322   62  810 1000  798  911   284 #>   [51,]  867  753  489  106  427  910  166  935  459   201 #>   [52,]  105  448  981  870  137   58  365  468  974   156 #>   [53,]  307  133  210    5  154  384  394  235  285   681 #>   [54,]  278  424  141  445  459  985  427  537  806   605 #>   [55,]  977  235  281  766  254  724  119    5  134    53 #>   [56,]  996  759  659   78  688  306  747  544   98    44 #>   [57,]  326  613  666  142  756  540  535  772  699   216 #>   [58,]  837  981   52  870  773  468  137  105  629   309 #>   [59,]  731  208  882  653    6  365   52  590   63   968 #>   [60,]  525  971  350  936   45  913  622  758  660   917 #>   [61,]  594  183  453   87  408  698  549  565  553    94 #>   [62,]  322  810   50  503  364   15   26  186    1   115 #>   [63,]  288  882  164  590  550  138  824  543  519   279 #>   [64,]  691  701  507  532  606  179  482  103  643   607 #>   [65,]  190  939  205  126   99   17  579  476  181   820 #>   [66,]  872  470   84  944  771  253  122  687  300   230 #>   [67,]  751  946  202  763   38  393  593  859  726   378 #>   [68,]   35   27  569  233  806  445  980  454  741   283 #>   [69,]  605   48  968  695  994  675  501  398  335   647 #>   [70,]  162  684  536  171  774  573  568  302  169   547 #>   [71,]  618  707  523  232   40  750  603  117  305   623 #>   [72,]  463  922  721  213  226  576    9  889  264   108 #>   [73,]  502  512  732  346  443  685  946  382  193   245 #>   [74,]  397  127  865  170  624  818  825  661  779   350 #>   [75,]  442  812  954  298  770  388  455  395  158   625 #>   [76,]  273  161  275  257   93  598  912  762  251   376 #>   [77,]  223   42  380  621  956  428  901  948  727   261 #>   [78,]  703  659   56  155  996  306  688  696  667   141 #>   [79,]  538  841  559   25  755  798  635  967  215   817 #>   [80,]  916   18  943  787  908  730  166  447  489   191 #>   [81,]  950  743  366  572  258  255  752  762  586   513 #>   [82,]  182  852  493  987  849  123  792  414  318   673 #>   [83,]  639  292   87  565  553  425   41  915  453   304 #>   [84,]   66  740  583  872  112  199  247  753  996   122 #>   [85,]  542  407   19   50  115  475  755   62  558    26 #>   [86,]   21  321  619  778  658  949  490  610  705   951 #>   [87,]   83  549  453   61  553  565   94  304  292    41 #>   [88,]  727  700  719  948  897  951  728  956  261   705 #>   [89,]  372  947  883  490  931  562  897  527  963   951 #>   [90,]    1  558  645  575  364  436  799  349  115   514 #>   [91,]  661  734  522  758  185  244  913  239  794   385 #>   [92,]  850  238  286  812  495  803  770  899  760   465 #>   [93,]  912  598  275  257  273  161  251  997  400   762 #>   [94,]  453  976  902  434  648  683  292  437  308   836 #>   [95,]   33  635  479  729  652  196  715  890  440   864 #>   [96,]  423  260  139  628  477  631  146  497  330   709 #>   [97,]  934  632  862   37  129  102   36  239  851   985 #>   [98,]  438  403   44  139  747   56  451  941  423   659 #>   [99,]  237  953  190   65  765  181  130  350  579   796 #>  [100,]  848  116  262  360  788  865  397   47   74   432 #>  [101,]  895  699  857  467  768  772  629  773  666   142 #>  [102,]  239  913  429  296  347  776   97  985  368   758 #>  [103,]  606  532  627   64  668  179  497  567  544   187 #>  [104,]  120  176  979  457  651  177  678  610  244   588 #>  [105,]   52  468  448  729  870   33  156  974  810   349 #>  [106,]   51  907  927  867  157  753  489  910  935   218 #>  [107,]  932  193  929  615  418  762  630  600  763   938 #>  [108,]  226  264  183  503  408  798  413  594  698    61 #>  [109,]  678  979  966  218  177  189  120  711  104   563 #>  [110,]  579  192  497  631  204  390  146   96  173   628 #>  [111,]  510  904  530  626  432  262  548  460   47   217 #>  [112,]  583  498   84   20  246  584   66    4  782     3 #>  [113,]  684   23  299  573  965  774  162  171  999   765 #>  [114,]  533  936  622  845  525   45  350  660   60   460 #>  [115,]  558    1  857   26  375   62  364  436   50   810 #>  [116,]  995  263  100  884  432  397  865  788  240   360 #>  [117,]  750   71   40  232   25  864  603  618  538   596 #>  [118,]  637  764  966  328  843  958  599  656  109   859 #>  [119,]  254    5  902  285  506  134  536  169  235   174 #>  [120,]  104  979  678  176  651  610  457  109  438   342 #>  [121,]  228  420  435  784  819  805  677  135  474   229 #>  [122,]  872  771  300  944   66    3  247  199  318   852 #>  [123,]  662  987  710  673  182  952  761  158  942   789 #>  [124,]  240  576  889  460  305  317  993  873  370   936 #>  [125,]  980  356  657  838  332  763  233  586  917   283 #>  [126,]  336  972  663  370  476   65  851  945  190   129 #>  [127,]  170  865   74  661  669  980  917  263   60   825 #>  [128,]  937  534  413  411  840  675  416  486  976   284 #>  [129,]  851  808  632   97  151  492  259  663  786   181 #>  [130,]  237  397   99  744  624  765  796  965  113   350 #>  [131,]  145  670  395  272  738  706  388  138  543    39 #>  [132,]  422  160  263   40  669  913   45  776  596   839 #>  [133,]   53  307  760    5  285  235  384  394  210   970 #>  [134,]  119  235  168  458  353  285  169  970    5   174 #>  [135,]  687  435  358  696  713  230  537  677  121     2 #>  [136,]  401  492  885  808  181  604  874  660   17   858 #>  [137,]  138  448  279   52  738   49  826  799   58   288 #>  [138,]  137  279  288  738   63  543   49  799  670   590 #>  [139,]  423   96  260  330   98  477  631  628  403   179 #>  [140,]  551  320  983  725  742  739   47  844  838   573 #>  [141,]  459  444    8  427  278  703  696  537   78    54 #>  [142,]  772  540  467  326  756  101  863  216  895   535 #>  [143,]  557  608  585  166  927  834  867  195  653   491 #>  [144,]  203  900  892  693  589  499  739  393  378   551 #>  [145,]  395  131  272  670  500   39  388  442  799    75 #>  [146,]  861   96  260  423  588  139  628  497  192   110 #>  [147,]  776  936   45  971  945  913  305  102  663   347 #>  [148,]  723  252  542  821   19  613  282  535  891   409 #>  [149,]  650  928  351   34  794  333  444  921  686   457 #>  [150,]  526   16  682  163  725  549  217   41   87   626 #>  [151,]  259  757  477  784  129  786  632  858  430   851 #>  [152,]  665  188  609  651  861  871   86  146  321   778 #>  [153,]  363  574   39  481  455  348  600  418  310   571 #>  [154,]  307  697  311  783  266  210  219   53  394   775 #>  [155,]  445  703  659  612   78  704  667  688   44    48 #>  [156,]  817  524  937 1000  578  468  315  277  870   358 #>  [157,]  653  222  882  519  106  731  164  935  927    51 #>  [158,]  428  298  388  625  789  662   75  931  956   442 #>  [159,]  862  985    8  713  934  537   97   28  430   696 #>  [160,]  132  258  669  422  596  654  248  940  227   296 #>  [161,]  762  950  251  257  598  366   93  752  513    81 #>  [162,]   70  684  171  573  299  568  212  536  774   547 #>  [163,]  682  404  150  626  281   16  526  169  953   549 #>  [164,]   63  519  222  288  653  550  590  882  157   824 #>  [165,]  933  621  380   77  901   11  672  710   42   754 #>  [166,]  867  943  489  143   51  106  731  427  195   753 #>  [167,]  556  646  563  385  654  966  664  711  898   454 #>  [168,]  169  134  539  774  458  536  119   16   13   163 #>  [169,]  536   16  774  168  119  881   70  539  254   434 #>  [170,]  127  865  980  669  917  661  332   74  825   342 #>  [171,]  573  684  162   70  739  589  212  536  299   774 #>  [172,]  286  760  785   92  465  133  964  970  850   775 #>  [173,]  192  861  146  497  110  701  668   96  990   260 #>  [174,]  269  353  642  488  975  592  119  469  504   285 #>  [175,]  829  746  896  874  835  644  506  880  592   469 #>  [176,]  244  185  104  352  342  120  588  651  779   591 #>  [177,]  457  979  218  104  109  444  241  149  385   906 #>  [178,]  602  341  899  426  991  314  629  773  272   803 #>  [179,]  643  716  567  532  139  477  423   96  878   552 #>  [180,]  919  878  381  567  855  274  184  473  809   430 #>  [181,]  579  401  136  808  492  663  765   17  129   885 #>  [182,]  987   82  123  792  341  832  673  493  627   789 #>  [183,]   61  503  108  453  748   26  408  413  290   594 #>  [184,]  809  241  919  381  306  878  628  180  274   457 #>  [185,]   91  244  734  176  794  661  276  385  522   758 #>  [186,]  284  277  315  674  503 1000  337  517  937   810 #>  [187,]  856  595  103  199  875  627  544  606  439   414 #>  [188,]  609  152  665  923  778  554  694  822  321   871 #>  [189,]  491  664  711  218  556  966  109  927  325   907 #>  [190,]   65  579   99  126  181  939  476  205  765   237 #>  [191,]  787  921   34  369  268  383  333  686  928   149 #>  [192,]  173  110  497  146  861  628  260   96  668   423 #>  [193,]  929  107  932  763  946  732  762  938  630   615 #>  [194,]  376  800  530  904  273  316  257  217  548   304 #>  [195,]  834  585  143  557  652  572  166  743  513   208 #>  [196,]   95  967  730   33  246  367  498  635   18   974 #>  [197,]  439  856  241  906  457  177  104  184  373   809 #>  [198,]  766  316  217  748  581  408  530   61  281   922 #>  [199,]   84  247  122  872   66  470  327    3  373   759 #>  [200,]  785  801  521  863  988  465  289  691  970   998 #>  [201,]  906  910  703  424  695  218  334   78  569   753 #>  [202,]  421   67  732  816  193  946  340  929  751   763 #>  [203,]  303  999  900  144  589  499  693  742   23   825 #>  [204,]  390  638  794  351  631  628  734  430  110   869 #>  [205,]  476  231   65  939  925  972  190  126  777    17 #>  [206,]  822  665  152  188  104  120  591  439  651   678 #>  [207,]  736  860  469  242  228   30  757  720  797   301 #>  [208,]   59  590  731   63  355  382  512  653  882    52 #>  [209,]  380  621  519  164  222  933  676  391  288   550 #>  [210,]   53  307  154  601  783    5  133  775  384   697 #>  [211,]  582  446  876  608  834  516  572  491  557   386 #>  [212,]  963  568  527  589  671  434  883  410  162   171 #>  [213,]  721    9   72  317  293  108  463  798  226   702 #>  [214,]  471  804  769  396  745  604  433  483  374   660 #>  [215,]   29  831  293   24  702  890    9  841   25   559 #>  [216,]  326  756  815  323  142  540  357  771  470   801 #>  [217,]   41  304  565   87  639  150  530   83  549   725 #>  [218,]  979  201  906  177  907  325  189  459  109   424 #>  [219,]  311  571  394  697  313  154  954  455  212   307 #>  [220,]  960  405  633  969  441  422  191  928  132   248 #>  [221,]  577  641  824  673  570  543  882  398  294   935 #>  [222,]  653  157  519  164  927  585  882  731  143   106 #>  [223,]   77  265   10   42  948  893  298  442  727   931 #>  [224,]  555  401  588  804  330  604  745  758  909   941 #>  [225,]  511  800  376   15  733  273  514  297  194    22 #>  [226,]  264  108  594  698  798  463  305  922   72   213 #>  [227,]  160  884  258  752  510  548  596  132  270   959 #>  [228,]  121  207  736  784   30  716  229  420  860   267 #>  [229,]  736   30  420  301  835  486  474  896  784   746 #>  [230,]  687    2  253  435  135  696  819  537  677   358 #>  [231,]  205  975  476  925  827  504  813  520  939   988 #>  [232,]  618  707   71  722  523  538    4  750  735   117 #>  [233,]   35  283   68   27  396  332  980  374  917   804 #>  [234,]   43  965  299  113  655  684  918  573  774   162 #>  [235,]    5   53  133  119  134  254  285  458  394   307 #>  [236,]  866  302  587  508  842  888  313  495  539   568 #>  [237,]  130   99  765  796  579  181  190  352  397   744 #>  [238,]  850   92  812  803  770  495   75  158  888   428 #>  [239,]  102  429  913  296  985  347   97  758  776   368 #>  [240,]  124  460  317  993  576  305  936  884   45   889 #>  [241,]  184  306  809  444  381  919  457  996   98    56 #>  [242,]  860  207  911  720  362  797  415  469  301    30 #>  [243,]  449  717  485  523  905  894  869  271  791   472 #>  [244,]  661  176  342  185   91  758  734  522  555   563 #>  [245,]  608  386  946  599   38  557   73  502  927   647 #>  [246,]  498   20  617  967  584  112  833  730  735     4 #>  [247,]  759  996  872  875  544   56  740  306  747    84 #>  [248,]  312  255  422  611  447  596  160  529  743   654 #>  [249,]  499  897   32  984  372  947  656  728  620   700 #>  [250,]    6  354  479  715  578  635  156  968    2   537 #>  [251,]  366  161  950  256   24  513  752  598  762   293 #>  [252,]  409  148  488  988  821  723  813  353  975   231 #>  [253,]  677  435  230  419  687    2  944  981  135   121 #>  [254,]  902    5  119  434  977  394  536   94  681   880 #>  [255,]  743  986   81  366  248   24  596  950  312   572 #>  [256,]  293  251  831  275   24  598  890  215  273   912 #>  [257,]  598  161  912  762   93  997  273  708  929   615 #>  [258,]  586  752  160  940   81  669  950  377  356   366 #>  [259,]  151  784  757  477  632  934  129  858  862   430 #>  [260,]  423   96  628  631  139  477  146  330  497    98 #>  [261,]  466   42  948  727  956  719   88  700   11   901 #>  [262,]  848  904  548  111  100   12   47  844  140   725 #>  [263,]  971  132  913   60  127   45  669  865  936    91 #>  [264,]  226  108  798  415  305  362  889  301  291   702 #>  [265,]  223   10  931  897  372  883  574  442  984   893 #>  [266,]  775  154  770  338  697  783  313  478  219   561 #>  [267,]  677  435  817  860 1000  121   30  301  911   358 #>  [268,]  383  921  686  782  790  191    4   28  623   787 #>  [269,]  174  642  488  469  285  353  975  988  720   521 #>  [270,]  959  345  227  441  596  884  160  529  406   405 #>  [271,]  869  855  782  623  894  485  905  523  686   243 #>  [272,]  670  991  799  625  500  279  426  145  348   992 #>  [273,]  275  598   93  257  376  912   76  256  161   316 #>  [274,]  430    8  696  713  159  930  306  862  259    36 #>  [275,]  273   93  256  912  598  251  161   76  257   297 #>  [276,]  185  176  385   91  839  244  734  457  794   342 #>  [277,]  315  517  284  186  524  674 1000  937  840   870 #>  [278,]   54  141  537  985  445  459  424  605  427    28 #>  [279,]  138  670  543  288  137  738  799  272  824    49 #>  [280,]  515  564  566  645  590  826  382  484  685   793 #>  [281,]  163  150   16   55   61  682  922  594  404   977 #>  [282,]  723  560  886  580  581  541  922   72  463    19 #>  [283,]  233  657  728  671  562   35  705   27  332   450 #>  [284,]  186  277  674 1000  315  937  517  503  337   524 #>  [285,]    5  521  681  119  133  371  506   53  902   269 #>  [286,]  964  760  465  172  899   92  785  133  863   384 #>  [287,]  327  679  877  323  470  815  567  855  584   833 #>  [288,]   63  543  824  279  138  550  519  738  676   164 #>  [289,]  357  801  634  200  606  679  607  216   64   532 #>  [290,]   26   50  503  911  720  284  186  415  183   242 #>  [291,]  416  429  534   37  934  359  985   29  128   702 #>  [292,]  437   83  308  795   94  418  915  453  976   434 #>  [293,]  831  215  256   24  890   29  702  989  251   213 #>  [294,]  695  577  335  819  398  667  641   69  605   570 #>  [295,]  849  318  550   63  781   58  837  138  288   279 #>  [296,]  940  917  239  102  429  669  913  985  377    45 #>  [297,]   15   62  364  912  316  275  400  273  322   256 #>  [298,]  388  158  442  625  428   75  789  931  363   954 #>  [299,]   23  684  162  113  171  999  589   14   70   490 #>  [300,]  944  771    7  872  643  819  122  614  309   716 #>  [301,]   30  720  229  736  722  358  242  420  860   207 #>  [302,]  866  236  842  508  539   70  162  587  568   458 #>  [303,]  999  332  203  692  914  818  825  656   23   828 #>  [304,]  962   83   87  748  217  639  565  708  292    41 #>  [305,]  359  889  576  993  147   45  124  936  264   291 #>  [306,]  996  241   78   56  444  809  759  703  274   696 #>  [307,]   53  154    5  394  210  681  371  384  133   311 #>  [308,]  683  310  648  433  437  292   94  836  471   418 #>  [309,]  792  629  379  805  768  981  819  837  524   944 #>  [310,]  683  571  308  879  392  648  363  574  311   568 #>  [311,]  219  571  697  954  154  394  455  310  313   683 #>  [312,]  248  737  447  529  255  743  611  572  446   986 #>  [313,]  219  495  311  394  954  587  770  154  494   266 #>  [314,]  991  426  992  602  636  348  649  456  783   384 #>  [315,]  277  517  524  284  674  186 1000  937  870   335 #>  [316,]  376  198  530  408  217  708  213  297  256   510 #>  [317,]  993  721  213  124  359  510  576  305    9   460 #>  [318,]  837  577  570  849   82  221  122   58  792   852 #>  [319,]  620  822  321  665  249   32  609  372  499    89 #>  [320,]  140  551  983  725  739  742  573  171  589   410 #>  [321,]   86  620   21  705  778  490  450  951  658   619 #>  [322,]   62  810  503   50  798  755  108  702  186   290 #>  [323,]  815  833  584  470  287  216   66  326  771   253 #>  [324,]  907  106  753  197  489  906   84  910  740   935 #>  [325,]  454  664  569  898  424   68  218  966  979   719 #>  [326,]  756  142  216  540   57  772  323  815  535   833 #>  [327,]  567  287  878  180  470  855  679  473  919   179 #>  [328,]   11  901  764   32  620  249  859  678  754   487 #>  [329,]  369   34  689  373  191  473  381  787  921   919 #>  [330,]  604  745  631  909  941  139  224  632  769   804 #>  [331,]  846  458   13  539  168  866  842  302  134   236 #>  [332,]  692  303  233  898  980  283   35  125  450    68 #>  [333,]  427  459  444  489  921  141  383  650  149   191 #>  [334,]  667  438  659  847  155  610  569  703   44   451 #>  [335,]  524  315  517  277  294  870  448  398  675    69 #>  [336,]  370  126  945  663  972  868  873  889  905   147 #>  [337,]  644  186  674  371  284  517  315  277  456   681 #>  [338,]  478  266  494  531  561  770  219  154  775   313 #>  [339,]  616  164  157  222  355  653  550  209  882   519 #>  [340,]  780  844  938  378  630  393  615  800  202   929 #>  [341,]  792  426  602  625  991  789  987  832  992   629 #>  [342,]  779  244  563  661  176   14  170  898  818   385 #>  [343,]   46  904   76  548  194  830  273  530  111   227 #>  [344,]   82  849  781  123  616  493  414  852  710   662 #>  [345,]  959  802  270  406  117  576  721  750  317   603 #>  [346,]  512  443  968  501  685  690  502   49  994    73 #>  [347,]  368  776  102  429  239   40  623  159  913   862 #>  [348,]  992  991  426  455  571  500  314  310  697   954 #>  [349,]  448  517  277  315  870  186  810    1  284  1000 #>  [350,]  845   60  971  525  660  936  114  622  533   865 #>  [351,]  650  794  149  368  623  430  686    8  390   204 #>  [352,]  591  779  176  244  237  555  588  185  342   224 #>  [353,]  975  174  488  504  269  813  988  642  134   119 #>  [354,]  715  690  578  250  479  501   24  968  729     6 #>  [355,]  208   59  590  731  585  164  653   63  195   882 #>  [356,]  838  377  461  125  940  980  669  917  402   258 #>  [357,]  634  289  216  924  801  756  679  540  607   200 #>  [358,]  537  135  534  435  937  301  156    2   30   677 #>  [359,]  305  993  416  989  291  596   29   31  429   702 #>  [360,]  397  116  130  100  624  788   74  744   99   995 #>  [361,]  926  854  712  852    3  122  199  414   82   318 #>  [362,]  642  797  242  720  415  469  207  757  860   264 #>  [363,]  153  574  392  955  879  310  789  298  992    48 #>  [364,]   15    1  920   62  400  558  436  514  349   115 #>  [365,]  974    2   20    6  981   52  230  253  419   468 #>  [366,]  752  950  251   81  989   24   31  255  161   762 #>  [367,]  974  793   58   33  419  837  468  981  105   365 #>  [368,]  347  776  623  102  351  239  794  159  913   650 #>  [369,]   34  191  329  689  921  381  149  787  351   928 #>  [370,]  336  873  126  945  663  147  462  889  124   868 #>  [371,]  681  644  384  636  456  337  746  902  880   307 #>  [372,]   89  931  897  947  249  883  265  727  984   499 #>  [373,]  473  381  919  241  689  184  329  180  809   199 #>  [374,]  640  396  660  471  622  525  214  836  233   433 #>  [375,]  581   26  115  290  857   50  183  503  558   269 #>  [376,]  194  800  316  273  530  257  598  708  997   217 #>  [377,]   31  402  989  356  940  411  416  752  461   296 #>  [378,]  393  780  938  844  340  763  693  983  657    12 #>  [379,]  805  399  649  474  309  832  955  992  426   524 #>  [380,]  621   77  710  165  209  223   42  933  952   901 #>  [381,]  919  180  184  921  241  444  306  878  274   473 #>  [382,]  566  512  685  652  826  513  502  484  346   208 #>  [383,]  686  921  268   28    8  650  623  611  782   333 #>  [384,]  456  371  636  681  644  307  314  285   53   649 #>  [385,]  563  522  654  167   91  806  556  244  185   342 #>  [386,]  245  502  608  834  572  516  973  446  513   193 #>  [387,]  853   10  531  545  340  410  265  693  597   892 #>  [388,]  298  442  625  158   75  223  153  363  272   455 #>  [389,]  891  505  542  407  196   85  967  518   79   559 #>  [390,]  204  638  631  794  129  632  430  734  477   351 #>  [391,]   38  751  901  859  893   42  621  948   77    67 #>  [392,]  879  955  399  483  847  310   48  363  486   667 #>  [393,]  378  780  844  938  340  763   67  144  480    12 #>  [394,]    5  307  219  311  880  154  313  254   53   681 #>  [395,]  145  442   75   39  272  455  481  531  500   388 #>  [396,]  640  804  374  214  660  233  471   35  741   604 #>  [397,]   74  130  624  360  350  865  237  127  116   788 #>  [398,]  641   49  824  335   69  294  221  738  543   695 #>  [399,]  955  379  392  474  805  832  879  483  688    48 #>  [400,]  997  920   15  912  364   22  708  349  748   767 #>  [401,]  136  660  604  885  181  808  492  224   37   129 #>  [402,]  377  416  622  698  425  976  411   31  639   640 #>  [403,]  747   98  451  544   44  807  139  438  507    56 #>  [404,]  163  281  682  168  150  626  169   16  526    55 #>  [405,]  441  220  960  633  959  969  270  345  117   750 #>  [406,]  240  802  884  124  345  317  959  576  995   721 #>  [407,]   85  755  559  542   79   50   62  890  831   322 #>  [408,]  565  698   61  413  108  748  708  639  183   453 #>  [409,]  988  924  488  200  998  821  546  827  521   785 #>  [410,]  978  853  212  724  589  494  693  739  219   437 #>  [411,]  128   31  741  534  377  402  416  989  690   640 #>  [412,]  462  873  114  594  868  663  533  881   17   370 #>  [413,]  976  128  416  453  408  937  186  836  698   284 #>  [414,]   82  852  182  627  987  123  875  807  493   662 #>  [415,]  642  362  242  264  797  720  290  911  798   108 #>  [416,]  702   31   29  989  402  291  413  359  411   377 #>  [417,]  646  516  887  726  828  586  446  167  599   556 #>  [418,]  795  915  600  292  437  932  630  840  308   615 #>  [419,]  468  677  253  981  974    2  267  435  365   230 #>  [420,]  229  474  121  486  805  835   30  524  736   937 #>  [421,]  202  816  732  946   10   67  751   73  814   340 #>  [422,]  132   40  347  160  248  429  596  368  102   654 #>  [423,]  260   96  628  139  631  477   98  809  497   330 #>  [424,]  647  994   54  201  968  695  278  325   69   569 #>  [425,]  553  639  565   41  838   83  402  549  533   976 #>  [426,]  991  992  314  348  341  602  629  768  379   625 #>  [427,]  459  333  489  141  444  753  867   51   54   278 #>  [428,]  158  298  956  662  931  710   77  388  761   727 #>  [429,]  102  239  985  296  347  291  159  862  913   359 #>  [430,]  274    8  159  151  259  623  351  862  713   390 #>  [431,]  892  844  387  340  853  393  780  978  378   983 #>  [432,]  461   47  865   45  525  993  838  533  460   788 #>  [433,]  471  836  648  683  308  483  214  769  486   835 #>  [434,]  648   94  536  880  683  433  254  902  308   453 #>  [435,]  677  135  687  253  230  121  358    2  267   228 #>  [436,]  514  920  558  364  115    1   90  714   15   400 #>  [437,]  292  795  767  308   94  418  683   83  453   571 #>  [438,]  610  334   98  659  909  451   44  155  941   745 #>  [439,]  197  856  104  120  487  906  942  875  241   544 #>  [440,]  982  986  652  890   24   95  251  256  831   275 #>  [441,]  405  220  960  969  270  959  633  132  422   884 #>  [442,]   75  388  298  395  455  954  265  158  531   223 #>  [443,]   49  676  738  346  647  398  946  512  824   501 #>  [444,]  459  141  427  306  333    8  241  703  650    78 #>  [445,]  605  741  155   48  704  703   27   68  985   806 #>  [446,]  582  211  572  516  529  417  608  386   81   586 #>  [447,]  312  611  737   18  864  248  908  255  743   943 #>  [448,]  349  870   52  335  137  315  517  277  105   578 #>  [449,]  243  485  735  523  707  717    4  464  791   232 #>  [450,]  705  658   21   35  951  283  233  562  332   804 #>  [451,]   44  847  619  403  438  949  659   98  747   688 #>  [452,]  583  584  112    3  815  470  287  833  323   498 #>  [453,]   94  976   61   87   83  902  413  183  553   836 #>  [454,]  325  664  898  569   68  692  593  556  599   966 #>  [455,]  954  697  571  481  348  500  311  153   39   992 #>  [456,]  644  649  384  636  371  746  314  337  681   805 #>  [457,]  177  104  241  184  979  444  176  120  149   185 #>  [458,]  539  866  394  235  302  134  236    5  119   331 #>  [459,]  427  444  141  333  489  278   54  753    8   703 #>  [460,]  240  124  114  993  936  432  462  533  873   226 #>  [461,]  432  356   47  838  377  402  993  425  510    41 #>  [462,]  873  412  868  370  460  922  114  682  336   124 #>  [463,]   72  922  721  576  226  889  213  873  264     9 #>  [464,]  791  485  790  717  271  243  782  449  855   268 #>  [465,]  964  863  801  286  899  607  200  785   92   172 #>  [466,]  261  948   42  647  719   88  700  727  893   569 #>  [467,]  629  101  768  895  772  142  309  699  792   773 #>  [468,]  981  870  419  817  156  524 1000  105  974    52 #>  [469,]  207  720  736  242  592  642  746  362  860   757 #>  [470,]  815  323   66  584  833  287  771  567  872   327 #>  [471,]  214  433  374  836  769  483  640  396  486   660 #>  [472,]  709  718  552  786  855  869  476  894  717   477 #>  [473,]  373  919  180  381  689  878  184  327  809   241 #>  [474,]  896  420  805  835  486  229  379  746  483   399 #>  [475,]   19  375  115   85  575  558  581  364  297   436 #>  [476,]  205  972  786  126  777   65  472  925  190    17 #>  [477,]  631  151   96  259  423  139  260  858  709   777 #>  [478,]  494  338  531  266  770  313  219  442  853    75 #>  [479,]  715  729  635  354  250   24  578    6  215   831 #>  [480,]  887  509  393  828  726  378   12  417   67   844 #>  [481,]   39  455  767  500  153  545  697  571  954   437 #>  [482,]  680  691  507  829  528  506  896  874  175   614 #>  [483,]  486  769  471  392  433  835  896  214  474   612 #>  [484,]  685  826  382  564  515   93  512  280  912    22 #>  [485,]  791  243  717  464  449  894  271  869  523   905 #>  [486,]  483  835  474  769  229  420  433  896  471   675 #>  [487,]  678  754   11  901  906  328  439  109  979   120 #>  [488,]  988  353  269  174  975  521  642  813  827   285 #>  [489,]  867  427  333   51  459  753  166  943  106   444 #>  [490,]  562   89  547  951  949   86  705  883  947   321 #>  [491,]  189  664  557  556  608  927  711  143  218   572 #>  [492,]  808  136  858  777  401  885  181   17  604   874 #>  [493,]  781   82  849  803  182  792  987  178  341   899 #>  [494,]  478  338  219  313  531  266  853  410  770   954 #>  [495,]  888  587  313  236  954  812  636  770   92   949 #>  [496,]  848  100  887  646  417  116  227  884  839   160 #>  [497,]  628  668   96  260  423  709  532  110  192   146 #>  [498,]  246  617  730  112  967   20  583  584  735   833 #>  [499,]  249  984   32  897  947  900  656  728  372   203 #>  [500,]  455  348  481  697  783   39  272  767  991   571 #>  [501,]  690  578  968  840   69  448  675  335  994   354 #>  [502,]   73  512  732  346  382  513  386  685  193   443 #>  [503,]  290   26  186   50  322  284  183  108  413   810 #>  [504,]  820  939   17  353  975  174  592  777  881   680 #>  [505,]  891  580  449  603  538  707   79  415  798    25 #>  [506,]  880  175  829  119  394  648  680  681  636   896 #>  [507,]  482  691  403   64  861  146  451  614  139   680 #>  [508,]  866  842  302  236  528  680  506   70  539   970 #>  [509,]  480  844   12  393  973  887  780  378  262   848 #>  [510,]  111  461  993  317  432  548  460   41  904   240 #>  [511,]  714  733  514  962  561  225  436  920  545   304 #>  [512,]   73  502  346  685  382  826  443  732  590   738 #>  [513,]  251  950  715  743   81  354  382  762  161   346 #>  [514,]  436  920  364  511   15  714  400  748  558   115 #>  [515,]  564  280  590  484  566  382  685  826  512   208 #>  [516,]  958  417  582  446  386  876  599  726  211   245 #>  [517,]  315  277  674  524  870  284  335  186 1000   337 #>  [518,]  982  440  541  559  890   25  407  986  345   830 #>  [519,]  824  676  653  288  222  543  882  164  221   641 #>  [520,]  925  709  532  472  668  552  546  827  718   476 #>  [521,]  285  988  970  488  175  506  174  269  200   998 #>  [522,]  806   91  385  654  239  661  758  563  244   102 #>  [523,]  707   71  905  618  603  232  623  243  449   722 #>  [524,]  517  315  870  277  674  335  156 1000  420   937 #>  [525,]   60  622  660   45  936  374  917  350  640   971 #>  [526,]  533  788  682  150  549   47   16  725  626   425 #>  [527,]  963  883  562  671  947  574  212  568  547   951 #>  [528,]  680  508  482  820   70  506  874  871  136   492 #>  [529,]  312  248  446  737  160  255  582  211  749   646 #>  [530,]  194  904  376  316  217  111  510  198   46   548 #>  [531,]  478  395  442  494  338  597  545   39  387    10 #>  [532,]  668  709  179  497  520  567   96   64  679   552 #>  [533,]  114  549  845  526  553  425  622  698  350   525 #>  [534,]  128  704  741  937  358  537  985  291  486   411 #>  [535,]  540  756  911  998  772  613  797  142  860   326 #>  [536,]  169   16  434  881   70  254  119  171  648   549 #>  [537,]  358  534  135  985  159  713  704  696  278    28 #>  [538,]   79  841   25  559  232  215  967  798  864   890 #>  [539,]  302  458  866  236   70  842  169  508  162   168 #>  [540,]  756  142  772  535  326  998  801  216  863   546 #>  [541,]  580  560  886  830   72  518  407  282  755   721 #>  [542,]   85  407   50   19  911  723   26  290  115   535 #>  [543,]  824  288  641  279  738  676  221   49  673   398 #>  [544,]  747  759  875   56  247  807  403  996  627    98 #>  [545,]   39  481  767  531  561   22  814  962  500   395 #>  [546,]  827  998  552  797  925  207  592  786  540   988 #>  [547,]  568  490  879  214  471  562  963  527  433   648 #>  [548,]  904   12  510  752  257  461  161  356  762   262 #>  [549,]  553  533  594   87   16  425  698  565   61    41 #>  [550,]  288   63  164  138  279  590  543  824  519   738 #>  [551,]  140  320  983  742  725  203  739  144  573    47 #>  [552,]  546  472  709  679  827  179  786  151  477   228 #>  [553,]  425  549  565  698   83  976  639   87   41   533 #>  [554,]  609  319  188  822  665  152  871  918  321   234 #>  [555,]  224  588  658  804  909  745  330  941  244    86 #>  [556,]  167  664  654  711  646  385  563  454  966   491 #>  [557,]  572  143  608  834  491  424  743  927  195   585 #>  [558,]  115    1  436  364   90  575  857  349   62   514 #>  [559,]  890  755   25  831   79  538  215  841  293     9 #>  [560,]  886  541  282  580  198   72  581  922  723   213 #>  [561,]  714  266  338  545  531  511  733  154  395   481 #>  [562,]  947  951  527  705  883  963  490  283  897    89 #>  [563,]  385  898  342  167  522  806  556  244  454   332 #>  [564,]  515  590  280  484  826  685  138  512  137   382 #>  [565,]  639  553  698   41   83  408  425   87  976   549 #>  [566,]  652  382  280  515   33  685  484  826  729    95 #>  [567,]  878  327  179  180  532  470  809  855  679   287 #>  [568,]  547  212  963  527  648  683  880  162  490   310 #>  [569,]   68  325   35  700   27  334   88  445  454   806 #>  [570,]  935  221  740  577  910  294  882  695  673   641 #>  [571,]  311  954  310  455  697  348  219  683  992   308 #>  [572,]  743  557   81  834  608  446  513  950  143   255 #>  [573,]  171  684  162  739   70  774  113  589  742   299 #>  [574,]  600  363  153  527  671  963  883  310  418    88 #>  [575,]  558   90  436  115    1  514  475  364  714   375 #>  [576,]  889  124  721  305  463    9  317   72  240   873 #>  [577,]  221  294  570  641  673  398  824  837  309   882 #>  [578,]  690  501  354  156  968  250  937  840  448   128 #>  [579,]  181  765  492  190  808  401   65  110  129    17 #>  [580,]   72  541  463  560  802  505  721  886  922     9 #>  [581,]  375   26  183  290   50  503  108   62  748   415 #>  [582,]  211  446  516  876  608  491  572  834  557   386 #>  [583,]  112   84    3  452  498  584  246   20   66   470 #>  [584,]  833  815  323  470  246    3  498  253  583    66 #>  [585,]  143  195  834  653  222  557  608  512  208   731 #>  [586,]  258  726   81  125  356  950  940  980  646   669 #>  [587,]  888  495  236  313  490   89  568  883  949   931 #>  [588,]  555  651  941  224  909  330  610  745  658   804 #>  [589,]  739  212  693  171  573  963  162  203  527   947 #>  [590,]  208   63  138  564  164  515  288   59  137   512 #>  [591,]  352  779  176  342  244  104   14  185  276   651 #>  [592,]  757  777  827  858  469  175  736  786  362   207 #>  [593,]  859  719  893  728  700  948  763   38  984   454 #>  [594,]  698   61  549  226  553  108  565  114  183   533 #>  [595,]  923  187  856  807  694  103  627  439  875   544 #>  [596,]  359  255  989   40  422  160   31  993   24   752 #>  [597,]  531  387  478   10  853  395  442  545  338   494 #>  [598,]  257  912   93  161  997  273  708  762  275   251 #>  [599,]  726  859  593  454  664  763   38  245   67   966 #>  [600,]  574  657  418  671  728  153  107  932  763   630 #>  [601,]  210  775   53  133  307  154  760  783  266   384 #>  [602,]  178  341  426  991  314  899  629  992  768   792 #>  [603,]  523   71  707  750  117  232   40  889  618   905 #>  [604,]  769  330  632  401  874  214  136  885  492   745 #>  [605,]   48  445   69  741  675  704  155  695  667   534 #>  [606,]  607  627  103   64  289  643  532  179  614   691 #>  [607,]  627  465  606  614  801  643  899    7  863    64 #>  [608,]  557  245  143  491  572  927  582  834  386   876 #>  [609,]  188  152  871  665  554  319  778  321  923    86 #>  [610,]  438  909   21  334   86  745  941  450  588   658 #>  [611,]   28  864  383  447  248  333  117  278  750   427 #>  [612,]  704  784  155  713   44  483  769  688  486   474 #>  [613,]   57  535  857  540  772  101  666  142  699   895 #>  [614,]  643    7  716  832  300  627  747   44  688   403 #>  [615,]  915  630  929  938  932  107  708  795  418   639 #>  [616,]  157  952  852  344  882  339  164  318  570   935 #>  [617,]  735  498    4  246  967  833  782  730  584   112 #>  [618,]  232   71  707  722  523  623   28  291  358   429 #>  [619,]  949  847  778  451   86  951   21  761  334   956 #>  [620,]  321  754   21   32  319  778  249  705  727    86 #>  [621,]  380   77   42  710  901  165  261  952  933    11 #>  [622,]  525  660  114  374  640   60  936  402   45   533 #>  [623,]  368  686  347  430  351  159  383  618  523     8 #>  [624,]  397   74  839  130  237  263  127  360  116   352 #>  [625,]  789  388  341  992  298  991  158  272  673   363 #>  [626,]  682  526  163  460  150  788  111  462  533   432 #>  [627,]  544  614  643  807  607  747  606  182  875   759 #>  [628,]  260  423   96  497  809  139  631  184   98   477 #>  [629,]  768  773  792  467  309  426  602  895  341   101 #>  [630,]  615  938  795  932  418   22  814  767  107   929 #>  [631,]  260  477  390  330  423   96  632  139  941   628 #>  [632,]   97  934   36  862  604  930  129  259   37   631 #>  [633,]  960  220  969  351  368  369  149  638  623   271 #>  [634,]  357  924  289  801  756  216  540  200  326   863 #>  [635,]  479  250  864    6  715   95  729   79  538    24 #>  [636,]  456  371  384  644  649  314  681  880  571   307 #>  [637,]  764  656  903  118  914  843  828  480   32   859 #>  [638,]  390  204  794  734  368  129  945  776  351   631 #>  [639,]  565   83   41  915  425  553  708  402  976   292 #>  [640,]  374  396  471  622  660  741   37  836  525   214 #>  [641,]  398  824  221  543  577  673   49  294  695   676 #>  [642,]  362  415  269  174  720  469  797  242  813   975 #>  [643,]  614  179  716    7  300  139  627  747  544   759 #>  [644,]  746  456  371  835  681  337  649  636  896   175 #>  [645,]    1  105   33  280   90  793  558  729  364   349 #>  [646,]  167  556  417  654  586  160  669  170  563   258 #>  [647,]  994  466  424  443   69  695  968  261  676   569 #>  [648,]  683  434  433  880  308   94  836  568  471   310 #>  [649,]  456  379  805  644  636  474  832  314  399   426 #>  [650,]  351  149    8  686  794  368  383  159  444   921 #>  [651,]  588  104  120  176  610  555  152   86   98   146 #>  [652,]  566  382  513  715   95  440  195  729  479    33 #>  [653,]  157  222  731  882  519  164   59  927   51   824 #>  [654,]  385  522  556  167  563  646   91  669  806   160 #>  [655,]   43  965  234  774  918  168  842  796  990   113 #>  [656,]   32  914  692  764  499  303  843  249  818   900 #>  [657,]  671  600  283  728  125  418   27  763  693   574 #>  [658,]  450   21  555  705  804  909  745   86   35   951 #>  [659,]  688  667   44  155   56   78  703  334  438   451 #>  [660,]  401  374  622  525  396  640   37  136  885   214 #>  [661,]  758  244   91  734  522  127  913  170  342   185 #>  [662,]  123  710  761  952  428  158  942  987  956   807 #>  [663,]  851  808  126  181  129  885  147  370   17   401 #>  [664,]  454  325  556  491  189  966  167  898  424   218 #>  [665,]  152  188  651  319  609  321  822  620  871    86 #>  [666,]  101  699  964  467  773  895  613  142  772    57 #>  [667,]  659  334  955  688  155   48  703  605  294    44 #>  [668,]  532  497  709  520   96  628  567  173  179   103 #>  [669,]  917  940  980  296  170  356  865  258  127   525 #>  [670,]  272  279  799  138  145  543  625  137  738   388 #>  [671,]  963  527  657  574  283  693  600  562  728   418 #>  [672,]  694  428  165   77  662  372  710  158  956   778 #>  [673,]  221  641  543  577  123  625  824  341  570   398 #>  [674,]  517  284  315  524  277 1000  186  337  870   420 #>  [675,]  840   48  605   69  486  741  128  483  335   955 #>  [676,]   49  738  443  824  543  519  641  398  288   647 #>  [677,]  435  267  253  419  135  121  687    2  230   358 #>  [678,]  979  120  109  487  104  966  754  325   11   218 #>  [679,]  287  877  552  532  567  327  179  709  289   216 #>  [680,]  528  482  691  508  506  970  829  521  504   874 #>  [681,]  371  902  644    5  384  880  636  746  285   307 #>  [682,]  163  526  626   16  150  533  953  788  412   462 #>  [683,]  308  648  310  433  880   94  434  571  437   835 #>  [684,]  573  113  171  162  299   23   70  774  825   739 #>  [685,]  826  512  484  382  346  502  448   73  137   738 #>  [686,]  383  921  268   28    8  623  650  351  782   430 #>  [687,]  135  230  435    2  696  253  677  713  537     4 #>  [688,]  659   44  819  667   56   78  155  612  955   399 #>  [689,]  473  369  329  373   34  184  381  919  457   241 #>  [690,]  578  501  354  968  411  840  715  346  128   107 #>  [691,]   64  482  507  680  701  528  861  614  200   146 #>  [692,]  332  898  303  828  656  593  859  728  454   984 #>  [693,]  671  984  947  589  728  527  963  657  897   562 #>  [694,]  672  662  778  807  428  761  942  188  609   710 #>  [695,]  294   69  667  605  910  201  641  398   48   968 #>  [696,]  713  274  135  687    8   78  230  704  141   537 #>  [697,]  455  783  954  311  571  154  219  500  481   348 #>  [698,]  565  594  553  402  408  549   61  976  226   425 #>  [699,]  101  895  773  467  768  857  629  666   58   772 #>  [700,]   88  719  727  948  728  893  897  984  593   569 #>  [701,]   64  691  173  861  507  532  668  146  520   497 #>  [702,]   29  416  215  798  841    9  291  293  989    31 #>  [703,]   78  155  659  141  201   56  667  306  696   688 #>  [704,]  741  612  534  713  155  985  445  934  605   862 #>  [705,]   21  951  450  562  658  283  947  321  490    88 #>  [706,]  670  799  131  145  279  550  781  272  849   138 #>  [707,]  523   71  618  232  722  603  623  449  243   750 #>  [708,]  997  915  639  615  408  565  598   83  257   304 #>  [709,]  532  472  668  520  477  497  552   96  925   179 #>  [710,]  952  662  123  621  380  428  158  956   77   761 #>  [711,]  556  189  167  491  966  664  109  654  385   749 #>  [712,]  926  854    3  852  361  122  318  199   82   815 #>  [713,]  696  704  784  135  159  274  862  537  934     8 #>  [714,]  733  511  561  514  436  545  783  210  500   920 #>  [715,]  354  479  250   24  729  690  578  513  635     6 #>  [716,]    7  643  228  179  614  300  121  805  784   771 #>  [717,]  243  485  791  855  718  894  472  877  869   449 #>  [718,]  472  717  894  709  520  855  552  869  476   243 #>  [719,]  948  893  700  593   42   88  466  859  261    38 #>  [720,]  469  301  736  242   30  207  362  642  229   860 #>  [721,]    9  213  317  576   72  463  889  305  993   359 #>  [722,]  618  301   30  860  707  242  232  358  135    71 #>  [723,]  148  282  891  542  560  580  505  415  821   581 #>  [724,]  978  977  410  962  254  219  338  304  154   437 #>  [725,]  983  140   41   47  838  320  551  425  150   526 #>  [726,]  763  599  586  828  125  417  454  593  692   929 #>  [727,]   88  956  700  261  897   42  951  948  719   931 #>  [728,]  984  897  700  283  947  657   88  593  562   671 #>  [729,]  479  105  715   33  810  354  635  578  817   250 #>  [730,]  498  246  967  617   18  112   20  583  196   916 #>  [731,]   59  653  882  208  157   51   63  365    6   867 #>  [732,]  946   73  193  814  502  202  932  443  512   421 #>  [733,]  714  511  561  514  436  225  545  920   22    90 #>  [734,]   91  794  758  185  661  638  913  244  390   368 #>  [735,]    4  617  833  782  232  449  246  967  498   435 #>  [736,]   30  229  207  757  301  228  469  720  420   746 #>  [737,]  312  447  255  529  248  195  743  834  986   908 #>  [738,]   49  676  443  543  824  279  138  398  137   288 #>  [739,]  589  573  171  320  684  551  299  203  144   162 #>  [740,]  570  753  935  910  996   84  247  872  294    78 #>  [741,]  445  704  534  605  985   27   48  640  396   675 #>  [742,]  551  825  140  573  999  203  788  171  320   725 #>  [743,]  572   81  255  950  513  366  354  557  715   834 #>  [744,]  130  237   99  190  796  965  953  765   65   397 #>  [745,]  909  804  214  330  941  396  604   36  658   612 #>  [746,]  835  644  175  896  829  474  229  371  456   681 #>  [747,]  544  403  759  807   56   98  451  875   44   659 #>  [748,]  408  920  304  183   61  453   87   94  997   565 #>  [749,]  711  928  529  312  248  491  654  556  189   191 #>  [750,]  117   71  232   40  603  618  864   25  538   707 #>  [751,]   38   67  946  893  391  859  593  948  719   763 #>  [752,]  366  950  989  258   31  377   81  251  762   161 #>  [753,]   51  740  910  867  427  489  459  935  201   444 #>  [754,]   11  956  901  942  261  620  727   42  761   334 #>  [755,]  559  831  322  890   79  293  215  841  798    25 #>  [756,]  540  326  216  535  142  772  998  323  546   801 #>  [757,]  736  592  259  858  151   30  207  229  786   808 #>  [758,]  661  913   91  734   60  239  102  244  396   971 #>  [759,]  544   56  996  247  747  872  875  306  688    98 #>  [760,]  133  286  775  970   53  172  307  394  313     5 #>  [761,]  942  807  619  662  956  847  451  778  334   747 #>  [762,]  161  950  929  257  107  193   81  366  598   932 #>  [763,]  593  726  929  938  193  657  125  600  107   946 #>  [764,]  656   32  843  328  637  966  692  914  898   859 #>  [765,]  796  181  579  237   99  401  224  113  492   953 #>  [766,]  198  748  581   55  281  375   61  316  977   304 #>  [767,]  795  481  437   39  418  630  962  500  545   292 #>  [768,]  629  895  773  467  426  309  101  517  870   314 #>  [769,]  874  604  483  214  471  486  896  433  612   330 #>  [770,]  812  266   75  313  954  478  775  697  442   338 #>  [771,]  300  944    7  872  122   66  253  819  643   309 #>  [772,]  142  540  467  101  895  863  535  326  857   699 #>  [773,]  629  768  699   58  101  467  799  792  895   602 #>  [774,]  169   70  684  573  965  162  536  953  171   113 #>  [775,]  266  154  601  760  770  210  307   53  783   313 #>  [776,]  147  913  347  102  945  368  971  239   45   936 #>  [777,]  786  492  858  808  592   17  757  477  925   476 #>  [778,]  619  949   86  321  847  451  761   21  490   951 #>  [779,]  342   14  591  818  352  244  176   74  843   661 #>  [780,]  378  938  844  340  393   12  983  615  630   929 #>  [781,]  493  849   82  803  295  178  344  792  773   341 #>  [782,]    4  268  686  921  271  383  180  735  623   919 #>  [783,]  697  154  500  314  455  266  954  307  571   991 #>  [784,]  612  259  713  121  151  229  228  704  420   696 #>  [785,]  200  970  521  286  172  465  133  760  863   801 #>  [786,]  777  151  757  851  808  129  476  592  259   858 #>  [787,]  191  333  921  268  383  943   34  928   18   369 #>  [788,]  526   47  432  742  533  865  350  725  682   845 #>  [789,]  832  625  992  341  399  955  158  298  363   991 #>  [790,]  268  464  782  921  271  191  916  686  369   787 #>  [791,]  485  464  717  243  894  271  449  869  855   905 #>  [792,]  309  341  629  987  837  768  467  182  426   602 #>  [793,]  811   33  367  645  280  105  974   95   58   566 #>  [794,]  351  390  734  204  638  368  650  930  185    91 #>  [795,]  418  915  767  437  292  630  615  932  840   308 #>  [796,]  765  990  237  579  181  939  113   99  190   528 #>  [797,]  362  242  860  207  642  998  469  415  827   911 #>  [798,]  841  702    9  264  108  322   29  226  415   215 #>  [799,]  670  272  279  137  138  773  426  349   58   991 #>  [800,]  194  376  257   22  340  273  598  962  997   304 #>  [801,]  863  465  200  964  540  607  142  289  772   634 #>  [802,]  345  406  580  576  721  889  463   72  124   886 #>  [803,]  493  850  178   92  899  781  812  602  182   238 #>  [804,]  745  909  396  214  658  604   35  555  224   471 #>  [805,]  379  474  649  420  121  399  819  309  524   674 #>  [806,]  522   68   35  445   36  569  233  563  385   985 #>  [807,]  747  544  761  875  403  942  627  451  778   759 #>  [808,]  492  885  136  851  129  401  858  777  181   663 #>  [809,]  184  878  241  628  306  423   98  919  260   180 #>  [810,]   62  322 1000  817  186   50  284  503  277   729 #>  [811,]  793  367   33  355  196  280  645   95  295   974 #>  [812,]   75  770  158  442  954  298  495  238   92   178 #>  [813,]  975  868  642  362  797  353  415  174  488   269 #>  [814,]   22  630  732  932   39  767  795  153  107   193 #>  [815,]  323  470  584  833  216    3  771   66  287   326 #>  [816,]  421  202  732   73   67  502  946  751  245   386 #>  [817,] 1000  156  468  937  810  267  524  358  284   277 #>  [818,]   14  999  914  303  779   23  342   74  843   656 #>  [819,]  688  944  121  230  805  294  300  309  399   379 #>  [820,]   17  939  504  136  492  881  777  808  528    65 #>  [821,]  797  813  998  546  535  827  975  362  231   242 #>  [822,]  319  665  206  188  554  620  609  328   32   152 #>  [823,]  842  918  701  554  508   43  923  655  990   609 #>  [824,]  543  641  221  288  519   49  676  398  738   882 #>  [825,]  865  742  999  303   23  838  233  374  980   332 #>  [826,]  685  512  137  448  382  346  484  738   49   138 #>  [827,]  546  592  998  925  797  786  777  975  552   988 #>  [828,]  692  887  303  914  332  726  898  656  125   480 #>  [829,]  896  175  746  874  835  474  644  506  769   880 #>  [830,]   46  317  256  721  886  213  345  510  316   343 #>  [831,]  293  890  215  559   24  755  256   25   29   702 #>  [832,]  789  399  379  649  341  614  955  992  987   805 #>  [833,]  584  323  815  470  735  246    4  617  498   253 #>  [834,]  195  572  557  143  585  743  608  513  386   211 #>  [835,]  746  896  486  474  644  229  483  175  420   433 #>  [836,]  433  976  471  648  640  486  374   94  453   553 #>  [837,]   58  318  981  309  792  577  629   52  870   773 #>  [838,]  356  425   47  461  125  639  825   41  725   402 #>  [839,]  624  263  132  995   91  276  185  734  116   127 #>  [840,]  675  128  277  315  501  937  418  411  795   335 #>  [841,]   79  798  538  702   29  215  817  559    9    25 #>  [842,]  508  866  302  236  539  918  458  528   70   680 #>  [843,]  914  764  656  818  779  342   32   14  828   303 #>  [844,]  780  340  378  393  983   12  938  140  509   551 #>  [845,]  350  533  660  114  622  525  881   60  401   374 #>  [846,]  331  458   55  235  724  978  539  338  134   168 #>  [847,]  619  949  451  951  392  879  334   21   44   955 #>  [848,]  262  100  887   12  480  227  548  865  509    47 #>  [849,]  781   82  493  673  792  318  341  670  279   837 #>  [850,]   92  238  803  812  286  495  770  899  178   172 #>  [851,]  129  663  808  885   97   37  786  151  757   492 #>  [852,]   82  414  712  122  318  182  493  926  987   849 #>  [853,]  387  410  978  494  892  531  693  478  589   545 #>  [854,]  361  712  926  199    3  852  122  452  583    84 #>  [855,]  869  271  180  472  717  878  567  327  709   782 #>  [856,]  197  439  875  187  544  247  759  747  807   595 #>  [857,]  895  101  115  699   26  674  290  768  772   558 #>  [858,]  492  874  808  777  757  604  592  769  259   136 #>  [859,]  593  719   38  893  599  700  692  948  454   751 #>  [860,]  242  207  911  267   30  722  797  720  736   301 #>  [861,]  146   96  990  507  871  260  173  528  423   192 #>  [862,]  934  159   97  632  985   36  713   37  704   239 #>  [863,]  964  801  465  772  899  142  467  540  101   200 #>  [864,]  635  611  908   18  967  117  538  447  750   232 #>  [865,]  127  170  825   60  669   47  525  432   74   980 #>  [866,]  302  236  508  842  539  458   70  587  506   394 #>  [867,]   51  489  166  753  427  106  459  143  943   424 #>  [868,]  873  462  813  336  412  370  889  922  463   126 #>  [869,]  271  894  855  905  472  623  717  243  523   638 #>  [870,]  524  517  468  981  315  448  335   52  156   674 #>  [871,]  918  490   86  990  861  299  321  609  658   555 #>  [872,]   66  944  300  247  759  996  771  122   56    84 #>  [873,]  462  868  370  412  889  460  124  336  576   463 #>  [874,]  769  858  604  896  175  136  829  492  885   214 #>  [875,]  544  247  759  807  747  942   56  996  761   856 #>  [876,]  958  582  211  608  516  245  446  491  189   386 #>  [877,]  287  679  717  552  323  718  243  855  756   327 #>  [878,]  567  180  809  919  327  184  381  628  274   179 #>  [879,]  392  310  847  547  483  955  399  949  683   363 #>  [880,]  648  506  683  434  681  433  394  371  568   636 #>  [881,]  536  434   16  136  885  836  433  874  820   845 #>  [882,]  731  824  221   63  653  519  570   59  577   935 #>  [883,]  527  963  947  562  931   89  574  951  897   490 #>  [884,]  995  240  116  406  227  132  124  959  263   160 #>  [885,]  808   37  136  401  492  851  604  874  660   858 #>  [886,]  560   72  463  580  922  541  198  213  802   830 #>  [887,]  480  828  417  848  646  726  509  586  914   692 #>  [888,]  587  495  236  949  490   89  313  931  883   568 #>  [889,]  576  305  124  264  873  721  463  370  226   336 #>  [890,]  831  559   25   24  215  293  986  755  479   256 #>  [891,]  505  449  580  723  542  389  821  415  603   538 #>  [892,]  144  853  387  739  900  903  589  320  410   693 #>  [893,]  948  719  593   38   42  700  859   88  751   728 #>  [894,]  905  869  485  472  972  717  243  271  718   791 #>  [895,]  101  857  768  699  467  629  674  772  456   773 #>  [896,]  829  835  474  746  175  769  874  483  486   229 #>  [897,]  984  947  728  372   88  562  727  249  700   499 #>  [898,]  692  563  454  332  325  966   68  664  342   167 #>  [899,]  964  602  178  467  863  465  341  649  832   286 #>  [900,]  203  144  499  999  303  656  299   23  589   249 #>  [901,]   11   42  261  754  948  719  621  328  466    38 #>  [902,]  681  254   94  371  453  119    5  434  880   648 #>  [903,]  249  499  900  144  656   32  637  892  319   372 #>  [904,]  548  530  111  262  194  510  217  376   12    41 #>  [905,]  894  523  869  972  243  623  271  336  472   126 #>  [906,]  201  910  218  979  942  334  907  703   56   438 #>  [907,]  106  218  906  489   51  177  324  753  201   927 #>  [908,]   18  864  447  611  117  916  730  750  967   943 #>  [909,]  745  804  941  610  438  330  658  588   36   555 #>  [910,]  935  201  740  753  695  570  906   51  703   996 #>  [911,]  860  242  290  267  207  720  469  415  797   535 #>  [912,]   93  598  997  257  400  275   15  273  708   251 #>  [913,]  102  776  239  758  971   60  147   45   91   296 #>  [914,]  818  656  843  303  999  828   14  692  203    32 #>  [915,]  708  639  795  615  418   83  997  292  976   565 #>  [916,]   80  787   18  790  730  908  268  191  498   112 #>  [917,]  980  940  669  296  525  233   60  170  356   640 #>  [918,]  990   43  871  528  842  508  234  796  861   302 #>  [919,]  381  180  878  184  809  473  241  306  274   921 #>  [920,]  400  514   15  364  748  436  997  767  349   962 #>  [921,]  686  383  268  191  381  650  333  782    8   351 #>  [922,]  463   72  226  873  108  264  594  462  415   213 #>  [923,]  188  595  609  152  507  694  807  403  778   103 #>  [924,]  634  409  357  756  801  200  289  540  998   546 #>  [925,]  520  777  827  709  476  205  786  546  592   231 #>  [926,]  712  361  852  854    3  122  318  493   82   216 #>  [927,]  106  424  143  222  608  557   51  653  491   189 #>  [928,]  149   34  333  191  650  654  787  351  749   459 #>  [929,]  193  107  938  615  932  762  763  630   12   257 #>  [930,]   36  941  632  862  909  274  713  159  612   155 #>  [931,]  883  372   89  727  265  298  897  947  428   956 #>  [932,]  107  193  929  615  630  418  795  915  814   600 #>  [933,]  165  621  380  952  901  710   11  209   77   487 #>  [934,]   97  862   37  632  704  985  159   36  713   259 #>  [935,]  910  570  740  221  753  695  882   51  201   577 #>  [936,]   45  147  971  114   60  622  525  913  350   776 #>  [937,]  128 1000  284  277  315  534  156  186  524   817 #>  [938,]  780  929  615  378  630  763  340  193  657   393 #>  [939,]  820   17  504   65  205  190  777  579  765   953 #>  [940,]  296  917  669  980  377  356  258  411  525   239 #>  [941,]  930   36  909  745  588  330  632  804   98   610 #>  [942,]  761  875  807  754  662  747  952  334   56   544 #>  [943,]  166  489   18  867  427  333  447  787   51    20 #>  [944,]  300  771  819  872    7  253   66  309  230   121 #>  [945,]  776  147  370  336  971  663  126  368  913   347 #>  [946,]  732  193  751  893  763   38  443   67  593   600 #>  [947,]  562  897  883   89  984  527  963  728  951   705 #>  [948,]  719  893   42  700  466  261   88   38  727   593 #>  [949,]  619  847  778  451  490  951   86  879   21   547 #>  [950,]   81  366  762  752  161  251  258  743  513    31 #>  [951,]  705   21  562  847   88  490  947  727  949   883 #>  [952,]  710  662  123  942  621  673  761  380  754   261 #>  [953,]   99  774  820  845   65  765  682  412   17   939 #>  [954,]  455  571  697  311   75  219  310  313  348   992 #>  [955,]  399  392  667   48  879  379  688  363  483   847 #>  [956,]  727  261   88  428   42  754  761  931  619   700 #>  [957,]  995  370  190  336  945  972  744  126  624    65 #>  [958,]  876  516  582  211  245  599  417  608  386   446 #>  [959,]  270  345  884  596  406  227  117  317   40   132 #>  [960,]  220  633  969  441  405  839  422  132   40   995 #>  [961,]  933  952  595  414  856  694  616  875  187   439 #>  [962,]  304  767  437   83  748  292  795  997  630    22 #>  [963,]  527  883  671  212  562  568  947  574  547   310 #>  [964,]  863  465  899  286  801  666  467  101  384   772 #>  [965,]  774  113   43  234  655  953  796  684  130   573 #>  [966,]  664  109  898  167  556  454  325  563  189   678 #>  [967,]  617  246  498  538   79  864  735  635  730     4 #>  [968,]   69  501  578  994  690  346  605  695  424   647 #>  [969,]  960  220  633  441  405  276  928  839  369    34 #>  [970,]  521  285  506  785  133  680  760  508  866     5 #>  [971,]   60  936  913  147  350   45  776  525  263   758 #>  [972,]  126  476  905  336  894  205   65  190  472   786 #>  [973,]  386  516  509  202  161  726  446  762  417   929 #>  [974,]  365  419  981  468   52    2   20  105    6   156 #>  [975,]  813  353  488  174  827  504  642  362  797   988 #>  [976,]  836  413  453  553   94  565  402  698   83   425 #>  [977,]  254  724   87   55  902  304  235    5   16   150 #>  [978,]  724  410  853  338  494  320  739  387  478    13 #>  [979,]  120  678  218  177  109  104  906  325  457   610 #>  [980,]  917  940  669  125  233  170  332  356   68   296 #>  [981,]  468  870  419   52  524  837  309  974   58   365 #>  [982,]  440  986  890   25   24  559  518  831  255   864 #>  [983,]  140  551  725  320  780  844  378  742  838   393 #>  [984,]  728  897  947  499  700  249  693  593  562    88 #>  [985,]  862  159  239  429  704  741  934  537  102   534 #>  [986,]   24  255  890  982  440  251  366  831  215   293 #>  [987,]  182  123  341  792  832   82  789  673  662   625 #>  [988,]  488  521  998  827  409  975  353  269  174   200 #>  [989,]   31  416  377  752   29  359  366  411  702   402 #>  [990,]  918  796   43  861  871  765  146  113  352   555 #>  [991,]  426  992  348  314  602  341  625  272  455   789 #>  [992,]  991  426  348  314  625  789  379  399  571   341 #>  [993,]  317  359  305   45  461  460  510  377  416   936 #>  [994,]   69  647  968  424  501   27  605  569  107    48 #>  [995,]  884  116  263  240  839  132  124  945  971   957 #>  [996,]   56  759  306   78  247  872  740  659  688   703 #>  [997,]  708  400  915  598  912  615  257   22  795    15 #>  [998,]  546  827  797  207  540  469  988  535  592   860 #>  [999,]   23  303  818  203   14  825  914  900  299   332 #> [1000,]  817  284  937  277  674  315  186  524  156   810 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.39773387 0.5393862 0.5929945 0.6743948 0.6982316 0.7353637 0.7943590 #>    [2,] 0.34655638 0.4611479 0.5201396 0.5257977 0.5493634 0.5734307 0.5751953 #>    [3,] 0.71352529 0.7452899 0.7702928 0.7823073 0.8597953 0.8864375 0.8946694 #>    [4,] 0.38243981 0.4758468 0.6086311 0.6170434 0.6562040 0.6773202 0.7120998 #>    [5,] 0.37774687 0.4243254 0.4610112 0.5163987 0.5203483 0.5227852 0.5609407 #>    [6,] 0.37099608 0.5820767 0.6379923 0.7003910 0.7185376 0.7193556 0.7229125 #>    [7,] 0.37915557 0.4371067 0.4940675 0.5284839 0.5329999 0.5477790 0.5511082 #>    [8,] 0.40190161 0.4270406 0.4328330 0.4692567 0.4848315 0.5105437 0.5344180 #>    [9,] 0.35635425 0.4759278 0.5448821 0.5820753 0.5992319 0.6588970 0.6724007 #>   [10,] 0.55708354 0.5675430 0.7952127 0.8472499 0.8979520 0.9150889 0.9306449 #>   [11,] 0.22147278 0.4677179 0.5252473 0.6010895 0.7475356 0.7535113 0.7727582 #>   [12,] 0.66875483 0.7067874 0.7124419 0.7603207 0.7774517 0.7866091 0.7933801 #>   [13,] 0.96984684 1.0013407 1.1878302 1.2477174 1.2861078 1.3323158 1.4044399 #>   [14,] 0.41744766 0.4841935 0.5699993 0.5874592 0.7192074 0.7392619 0.7791875 #>   [15,] 0.43121893 0.4494064 0.5405619 0.5757912 0.6518518 0.6955287 0.7205692 #>   [16,] 0.45517381 0.4826466 0.5387420 0.6143286 0.6858282 0.7188800 0.7357421 #>   [17,] 0.28766330 0.4908292 0.5172734 0.5273791 0.5352890 0.5492523 0.5608126 #>   [18,] 0.51036456 0.7408558 0.7858032 0.8138868 0.8985295 1.0139115 1.0411123 #>   [19,] 0.90076890 1.0930550 1.2124210 1.3332390 1.4389646 1.4989826 1.5776472 #>   [20,] 0.56512138 0.5725136 0.5986504 0.6861339 0.7326751 0.7385813 0.7568889 #>   [21,] 0.23899681 0.3135447 0.3883025 0.3994222 0.4423075 0.4492746 0.5025165 #>   [22,] 0.47362581 0.5995646 0.6711678 0.6955801 0.7504964 0.8043601 0.8410759 #>   [23,] 0.40730448 0.4439814 0.4841935 0.5506037 0.5540976 0.6610497 0.6647937 #>   [24,] 0.43239293 0.5039993 0.5138689 0.5412533 0.5464031 0.5996253 0.6361574 #>   [25,] 0.45664836 0.4758378 0.5144611 0.6311913 0.6619664 0.6886999 0.7215085 #>   [26,] 0.26165504 0.3923759 0.4192170 0.6223163 0.6345546 0.6612611 0.6776156 #>   [27,] 0.36432898 0.4533475 0.4706020 0.4799649 0.5352673 0.5433107 0.5493938 #>   [28,] 0.45107304 0.4692567 0.5286005 0.5569790 0.5621215 0.5658020 0.6024109 #>   [29,] 0.19208548 0.3567382 0.4075681 0.5405018 0.5731625 0.5870026 0.6133335 #>   [30,] 0.17095184 0.2977136 0.3295060 0.4640625 0.4996370 0.5011480 0.5045223 #>   [31,] 0.11859239 0.3519176 0.3933264 0.5053583 0.5598049 0.5665622 0.5870026 #>   [32,] 0.42068847 0.5336422 0.5388610 0.7120582 0.7546214 0.7663746 0.8289035 #>   [33,] 0.67212780 0.6774977 0.6880947 0.7690668 0.8056699 0.8470417 0.8934756 #>   [34,] 0.40899445 0.6862166 0.6998819 0.7658372 0.8004506 0.8117590 0.8898245 #>   [35,] 0.24169521 0.3298711 0.4533475 0.4915331 0.5077745 0.5141889 0.5153631 #>   [36,] 0.15257575 0.3289737 0.3599168 0.4810235 0.5099933 0.5104165 0.5383639 #>   [37,] 0.29615182 0.3311175 0.3795550 0.4851833 0.5139648 0.5150910 0.5174643 #>   [38,] 0.42113733 0.4350018 0.5337374 0.5448374 0.5540939 0.5970336 0.6503293 #>   [39,] 0.28278408 0.5485673 0.5566320 0.5961777 0.6166203 0.6189645 0.6799471 #>   [40,] 0.55071026 0.5574429 0.5841653 0.6960628 0.7428261 0.7461769 0.7495595 #>   [41,] 0.40036913 0.4122193 0.4772735 0.4965581 0.5110219 0.5287856 0.5989762 #>   [42,] 0.33109141 0.3651112 0.4533851 0.4585906 0.4770144 0.4950868 0.5252473 #>   [43,] 0.58855017 0.5971611 0.6945745 0.7652435 0.7796270 0.8983878 0.9580782 #>   [44,] 0.29706129 0.3530870 0.3846466 0.4773540 0.4918882 0.5180333 0.5380589 #>   [45,] 0.25911696 0.4491776 0.4539066 0.4768785 0.4949334 0.5219129 0.5220003 #>   [46,] 0.97582821 1.0345686 1.0783664 1.2808507 1.3941910 1.4196469 1.4229994 #>   [47,] 0.44233596 0.5017724 0.5147232 0.5374572 0.6392569 0.6420617 0.6992660 #>   [48,] 0.29316252 0.3840637 0.3852774 0.4246063 0.4271990 0.4596798 0.4940856 #>   [49,] 0.18558019 0.3743953 0.3912150 0.4569831 0.5058113 0.5456107 0.5580892 #>   [50,] 0.37361796 0.3923759 0.4664123 0.5042517 0.5843154 0.6032817 0.7280856 #>   [51,] 0.28209545 0.4009976 0.5795918 0.5826329 0.6597517 0.6915176 0.7085625 #>   [52,] 0.49832077 0.5146017 0.5313967 0.5360740 0.5955231 0.6086181 0.6293054 #>   [53,] 0.29700067 0.4192652 0.4545237 0.4610112 0.5713543 0.6667070 0.6728727 #>   [54,] 0.14772488 0.5793084 0.5867660 0.6336414 0.6483591 0.6575695 0.6894880 #>   [55,] 0.80505654 0.8893905 1.0498633 1.0980309 1.1588362 1.2555885 1.2717302 #>   [56,] 0.30074143 0.3527218 0.3764694 0.4178786 0.4648014 0.4971803 0.5198701 #>   [57,] 0.79473374 0.8475068 1.0802002 1.1079187 1.1164945 1.1364149 1.2303063 #>   [58,] 0.42779509 0.5932687 0.6086181 0.6622640 0.6901354 0.7249406 0.7677410 #>   [59,] 0.29171054 0.4667922 0.6710482 0.7076619 0.7473483 0.8224951 0.8314911 #>   [60,] 0.24217596 0.3407925 0.4379438 0.4417291 0.4539066 0.4546992 0.4684110 #>   [61,] 0.41126240 0.4742819 0.4766640 0.4839321 0.5358830 0.5444218 0.5490071 #>   [62,] 0.36492801 0.4365829 0.5843154 0.6210712 0.6449839 0.6518518 0.7178511 #>   [63,] 0.37228242 0.5788515 0.5847549 0.5990230 0.6136647 0.6294851 0.6389053 #>   [64,] 0.48531044 0.7197986 0.7777512 0.8162542 0.9166844 0.9264495 0.9583683 #>   [65,] 0.35601253 0.6181850 0.6332838 0.6346587 0.6625912 0.6738594 0.6758599 #>   [66,] 0.42739736 0.4834416 0.5731699 0.6196778 0.6547016 0.6953762 0.7309994 #>   [67,] 0.51679693 0.7506492 0.7636422 0.7900462 0.8513426 0.8600860 0.8613415 #>   [68,] 0.32987110 0.3643290 0.4201469 0.4393638 0.4618116 0.5624684 0.6300681 #>   [69,] 0.35364363 0.3840637 0.4539474 0.4549827 0.4604691 0.5218188 0.5565653 #>   [70,] 0.24948524 0.5872709 0.5881784 0.5896887 0.6053702 0.6580457 0.6648432 #>   [71,] 0.39379046 0.4102297 0.5351442 0.5359537 0.5574429 0.6633503 0.6746200 #>   [72,] 0.22854118 0.4628218 0.6132218 0.6223248 0.7434314 0.7644381 0.7759048 #>   [73,] 0.35724949 0.4285216 0.5922141 0.7702286 0.8025998 0.8478065 0.8840870 #>   [74,] 0.48972888 0.5199618 0.6939768 0.6969437 0.7529468 0.7716107 0.8462245 #>   [75,] 0.44883549 0.4724809 0.5641065 0.5674431 0.5689064 0.6130378 0.6317660 #>   [76,] 0.75897765 0.8878682 0.9190937 0.9277836 0.9894147 1.0260285 1.1859397 #>   [77,] 0.45711793 0.5481625 0.5871431 0.5972364 0.7186576 0.7395510 0.7696029 #>   [78,] 0.18800702 0.3842973 0.4178786 0.4204668 0.4574960 0.4617125 0.4839721 #>   [79,] 0.30598353 0.4148741 0.5852497 0.6619664 0.7322407 0.7658477 0.7835716 #>   [80,] 1.02584150 1.0411123 1.0608211 1.1792617 1.3458241 1.4361311 1.4797949 #>   [81,] 0.32885595 0.4392924 0.5456781 0.5662659 0.6225163 0.6461706 0.6703414 #>   [82,] 0.59246740 0.6538342 0.6553385 0.6840404 0.7125766 0.8350810 0.8535535 #>   [83,] 0.34924368 0.3496016 0.3801105 0.4006582 0.4523172 0.5137445 0.5287856 #>   [84,] 0.57316993 0.6558082 0.7094237 0.7297617 0.7318652 0.7819416 0.7921807 #>   [85,] 0.54876539 0.6839650 1.0930550 1.1547342 1.1611489 1.2065046 1.2672324 #>   [86,] 0.39942216 0.4228059 0.5081759 0.5306798 0.5477445 0.5525549 0.5747412 #>   [87,] 0.38011055 0.4781805 0.4820215 0.4839321 0.4887616 0.4910652 0.5533968 #>   [88,] 0.22653388 0.2683590 0.4685595 0.4721441 0.5055142 0.5111282 0.5267481 #>   [89,] 0.42176201 0.4275672 0.4686877 0.4894517 0.5225874 0.5406897 0.5869831 #>   [90,] 0.69823156 0.7207436 0.8170959 0.8793428 0.8862412 0.8927669 0.9331566 #>   [91,] 0.40223636 0.4032866 0.4412836 0.4580609 0.4889759 0.5426257 0.5537303 #>   [92,] 0.42845425 0.7391452 0.8905917 0.9159804 0.9303427 0.9891219 1.1019367 #>   [93,] 0.26505869 0.4280680 0.5587160 0.6468588 0.6775754 0.7493271 0.7574360 #>   [94,] 0.18303997 0.4553059 0.4766086 0.4802242 0.4902615 0.5154816 0.5205412 #>   [95,] 0.67749765 0.7485606 0.9076582 0.9182057 0.9235141 0.9762527 1.0432925 #>   [96,] 0.23199778 0.2452248 0.3921396 0.4436954 0.4991256 0.5041168 0.5510922 #>   [97,] 0.22391198 0.2905770 0.2932143 0.2961518 0.4743702 0.5066575 0.5099933 #>   [98,] 0.45519774 0.4741565 0.5380589 0.5500722 0.5593353 0.5704291 0.5793616 #>   [99,] 0.58655378 0.6329797 0.6541405 0.6625912 0.6853870 0.7246357 0.7582146 #>  [100,] 0.81891455 0.8796042 1.0626138 1.1093940 1.1129744 1.1714723 1.1898559 #>  [101,] 0.25146968 0.4702614 0.5026707 0.5084815 0.5745212 0.6379296 0.6579482 #>  [102,] 0.14552863 0.3065142 0.3703586 0.4276784 0.4407556 0.4419846 0.5066575 #>  [103,] 0.88515084 0.9561815 0.9574965 0.9887863 1.0193942 1.0269339 1.0309469 #>  [104,] 0.32068801 0.5846060 0.6844724 0.6862324 0.6955363 0.8032264 0.8392914 #>  [105,] 0.49832077 0.5824909 0.5937550 0.5952966 0.6115914 0.6880947 0.7015205 #>  [106,] 0.58263291 0.5978110 0.6333632 0.6528266 0.7730781 0.7915906 0.8261604 #>  [107,] 0.16954488 0.4119332 0.4394802 0.5459968 0.6358688 0.6375243 0.6556587 #>  [108,] 0.42442335 0.5275176 0.5344230 0.5447651 0.5690407 0.5977752 0.6073031 #>  [109,] 0.64026758 0.6721906 0.6905490 0.8146831 0.8254523 0.8527191 0.9163852 #>  [110,] 0.67744077 0.6820061 0.7616144 0.7759696 0.8267311 0.8290884 0.8299160 #>  [111,] 0.63214709 0.7925934 0.9725130 0.9908390 1.0399132 1.0499335 1.0639441 #>  [112,] 0.31415084 0.6534698 0.7318652 0.7326751 0.7464785 0.8708178 0.8823580 #>  [113,] 0.38499381 0.5540976 0.6189360 0.7038888 0.7458120 0.7497106 0.7532466 #>  [114,] 0.39712271 0.4120540 0.4163113 0.5810122 0.5822639 0.6132914 0.6158299 #>  [115,] 0.35435109 0.5929945 0.6409466 0.7466486 0.7536487 0.8062845 0.8063108 #>  [116,] 0.77187639 0.8650855 0.8796042 0.9121860 0.9357466 0.9525159 0.9695714 #>  [117,] 0.07756028 0.7114367 0.7526438 0.7742332 0.8116212 0.8137644 0.8542375 #>  [118,] 1.19041914 1.2141894 1.5185929 1.5341899 1.6462569 1.7176351 1.7189360 #>  [119,] 0.53138751 0.5609407 0.5732097 0.6061052 0.6822381 0.6887681 0.7090245 #>  [120,] 0.32068801 0.5258091 0.5820011 0.7163313 0.7237800 0.7908022 0.8625156 #>  [121,] 0.34020298 0.4152613 0.4582276 0.4935404 0.5081293 0.5124799 0.5361685 #>  [122,] 0.57405067 0.5889689 0.6797884 0.6990223 0.7309994 0.7823073 0.7927531 #>  [123,] 0.33666138 0.5788307 0.5829259 0.6148634 0.6473578 0.6621554 0.7017721 #>  [124,] 0.29644584 0.5301766 0.6201916 0.6421829 0.6494131 0.6931524 0.7313619 #>  [125,] 0.48241197 0.5196003 0.5656590 0.5889555 0.6132564 0.6591737 0.7392045 #>  [126,] 0.46605218 0.4773795 0.5034634 0.6021930 0.6048939 0.6346587 0.6977931 #>  [127,] 0.20323997 0.4419713 0.5199618 0.6157475 0.6566976 0.6770332 0.6963098 #>  [128,] 0.31687833 0.3743147 0.4225441 0.4263335 0.4621086 0.5631667 0.5831151 #>  [129,] 0.30590078 0.3891708 0.4619813 0.4743702 0.5113681 0.5484977 0.5627725 #>  [130,] 0.50353986 0.6486193 0.7582146 0.7591707 0.8554706 0.9351821 0.9592818 #>  [131,] 0.58235805 0.9198371 0.9404661 1.0452457 1.1397299 1.1483398 1.1682778 #>  [132,] 0.49518000 0.5775959 0.6324941 0.8391159 0.8747331 0.9144607 0.9295341 #>  [133,] 0.41926516 0.6231343 0.6255044 0.6300798 0.6302052 0.7063400 0.7600671 #>  [134,] 0.68876809 0.7291732 0.8845793 0.9038406 0.9295140 0.9471297 0.9719420 #>  [135,] 0.26669317 0.2778810 0.4380426 0.4445260 0.4504961 0.4577259 0.5063313 #>  [136,] 0.26175281 0.3245447 0.3824383 0.3871593 0.4567185 0.4852641 0.4996095 #>  [137,] 0.32520768 0.5348742 0.5426628 0.5955231 0.6106341 0.6648021 0.6796123 #>  [138,] 0.32520768 0.3519927 0.5517830 0.5683898 0.6294851 0.6819070 0.6916528 #>  [139,] 0.32045924 0.3921396 0.4172196 0.5345784 0.5500722 0.5625694 0.5940630 #>  [140,] 0.30692156 0.3073443 0.3635231 0.5367756 0.6983399 0.9483610 0.9735214 #>  [141,] 0.38787424 0.4157918 0.4328330 0.4885014 0.5041253 0.5324410 0.5423890 #>  [142,] 0.27993007 0.5069419 0.6034219 0.6194762 0.7768723 0.7931353 0.8217801 #>  [143,] 0.47301150 0.6879790 0.6944391 0.7075517 0.7362073 0.7732823 0.7751191 #>  [144,] 0.57797793 0.5939850 0.7459645 0.7754655 0.8305251 0.8468802 0.8547660 #>  [145,] 0.46946157 0.5823580 0.6910797 0.7410968 0.9153400 0.9437818 0.9852970 #>  [146,] 0.24966952 0.5510922 0.5958184 0.6838727 0.7813242 0.7912078 0.7948475 #>  [147,] 0.28235641 0.3956943 0.4491776 0.4568257 0.4623513 0.5056649 0.5948210 #>  [148,] 0.82499372 1.4997708 1.5422035 1.5926127 1.6013853 1.6310784 1.6320758 #>  [149,] 0.38193186 0.5333180 0.5520415 0.6998819 0.7569549 0.7823899 0.8198854 #>  [150,] 0.67317015 0.7378815 0.7621470 0.7631021 0.7751324 0.7770626 0.7903959 #>  [151,] 0.12849490 0.4650493 0.4820731 0.5065269 0.5113681 0.5272499 0.5648669 #>  [152,] 0.54202685 0.5494303 0.7365226 0.7632292 0.9303327 0.9431324 0.9854346 #>  [153,] 0.42915617 0.4395942 0.5566320 0.5843233 0.5899228 0.6054740 0.6219143 #>  [154,] 0.36002442 0.4995779 0.5239163 0.5467808 0.5566002 0.5613377 0.5692549 #>  [155,] 0.36357904 0.3719647 0.3719959 0.3930774 0.4204668 0.4300679 0.4499429 #>  [156,] 0.43195638 0.4566508 0.4780128 0.4799244 0.5093210 0.5375773 0.5435857 #>  [157,] 0.46355946 0.5112254 0.7222256 0.7412947 0.7730781 0.7753231 0.8132253 #>  [158,] 0.33295554 0.3483190 0.5761269 0.6098461 0.6216261 0.6769773 0.7310674 #>  [159,] 0.27675841 0.3974439 0.4019016 0.4744580 0.4989236 0.5178175 0.5562917 #>  [160,] 0.57759587 0.5840102 0.6980532 0.7127551 0.8107059 0.8524776 0.8682414 #>  [161,] 0.36947910 0.5335939 0.5513021 0.5642240 0.5894134 0.6719379 0.7493271 #>  [162,] 0.24948524 0.4354120 0.4379842 0.5259315 0.5936290 0.6135262 0.7082474 #>  [163,] 0.52046977 0.6658130 0.7631021 0.8157529 0.8928326 0.9375440 0.9407307 #>  [164,] 0.58475495 0.6405659 0.6800038 0.6936820 0.6954692 0.7397742 0.8030696 #>  [165,] 0.60216961 0.7823818 0.7902047 0.8277930 0.8628085 0.9357502 1.0441205 #>  [166,] 0.46601655 0.6209022 0.6527457 0.7075517 0.7085625 0.9262622 0.9309219 #>  [167,] 0.32212109 0.5503447 0.5940007 0.6392179 0.6554335 0.7165164 0.7246878 #>  [168,] 0.66931109 0.8845793 0.8981984 0.9339522 0.9856423 1.0840526 1.0985286 #>  [169,] 0.44737806 0.5387420 0.5992186 0.6693111 0.7123755 0.7583221 0.7621017 #>  [170,] 0.20323997 0.5044014 0.5129997 0.5653578 0.5864086 0.6327429 0.6786519 #>  [171,] 0.19674549 0.4072703 0.4379842 0.5896887 0.5981203 0.6001332 0.7119375 #>  [172,] 0.80475070 0.9179482 1.0114771 1.2098588 1.2310479 1.3288276 1.3365500 #>  [173,] 0.55874796 0.8343304 0.8384774 0.8742661 0.8969407 0.9273751 1.0171973 #>  [174,] 0.40828619 0.5100211 0.5444901 0.6073661 0.6303735 0.7253498 0.7260148 #>  [175,] 0.30635282 0.3361951 0.3661315 0.4842041 0.4887388 0.5339686 0.5568250 #>  [176,] 0.45482592 0.5758079 0.5846060 0.6761617 0.7035729 0.7163313 0.7322830 #>  [177,] 0.33941166 0.6367696 0.6561160 0.8032264 0.8254523 0.8674514 0.8826126 #>  [178,] 0.32593493 0.6836159 0.6962272 0.7764468 0.7831291 0.8002124 0.8241421 #>  [179,] 0.46758102 0.5886175 0.5947455 0.6167487 0.6477516 0.7482869 0.7538018 #>  [180,] 0.27492467 0.4175239 0.4471996 0.6944027 0.7069295 0.7092759 0.7157008 #>  [181,] 0.30802604 0.4253323 0.4567185 0.4690741 0.4875416 0.5268799 0.5420315 #>  [182,] 0.16685135 0.5924674 0.6473578 0.7029586 0.7139989 0.7997050 0.8612393 #>  [183,] 0.47428194 0.4870075 0.5344230 0.5730872 0.6317037 0.6345546 0.6564712 #>  [184,] 0.39860692 0.4020245 0.5490741 0.5627365 0.6541495 0.6694821 0.6877022 #>  [185,] 0.48897594 0.5254873 0.5418958 0.5758079 0.6473904 0.6764035 0.7314327 #>  [186,] 0.16146285 0.3790003 0.4229651 0.4381175 0.4411566 0.4555945 0.4808970 #>  [187,] 0.82714846 1.0471523 1.0513088 1.2503810 1.2752189 1.2890784 1.3002082 #>  [188,] 0.44690597 0.5494303 0.7741139 0.9022905 1.0894799 1.0929537 1.1235231 #>  [189,] 0.44552205 0.6471102 0.7234943 0.7512533 0.7789052 0.8024495 0.8527191 #>  [190,] 0.35601253 0.6399335 0.6541405 0.7929885 0.8002896 0.8124025 0.8192316 #>  [191,] 0.44425682 0.6017961 0.6862166 0.6983002 0.7499062 0.7778113 0.8061181 #>  [192,] 0.55874796 0.6820061 0.7781054 0.8186298 0.9107937 1.0504322 1.0599517 #>  [193,] 0.37124830 0.4119332 0.4413771 0.6202454 0.6203725 0.6319449 0.6460832 #>  [194,] 0.48535575 0.6244048 0.6792399 0.8460214 1.0162985 1.0602623 1.0695366 #>  [195,] 0.52469509 0.7586078 0.8027293 0.9230348 0.9611886 0.9792277 0.9800104 #>  [196,] 0.97625274 1.0422585 1.0803181 1.2848466 1.2913758 1.2981244 1.3027723 #>  [197,] 0.46306923 0.6567649 0.8051015 0.8948777 0.9367242 1.0035550 1.0266027 #>  [198,] 0.65551035 0.7443093 1.0125237 1.0396995 1.0414434 1.0507267 1.0654647 #>  [199,] 0.78194162 0.7931512 0.8013241 0.8165244 0.8378260 0.9620814 1.0233202 #>  [200,] 0.67698706 0.7277619 0.8679365 0.9342649 0.9706898 0.9856167 1.0036080 #>  [201,] 0.46258459 0.4726763 0.5351907 0.6005949 0.6091945 0.6094730 0.6538292 #>  [202,] 0.73910587 0.7636422 0.7780801 0.8515315 0.9012777 0.9100570 0.9891566 #>  [203,] 0.47740839 0.5093903 0.5382855 0.5779779 0.7384801 0.7407002 0.7420218 #>  [204,] 0.38558273 0.5174883 0.5455288 0.7017956 0.7439664 0.8057290 0.8119663 #>  [205,] 0.43873810 0.5660715 0.6332838 0.7786371 0.7811786 0.8229032 0.8240597 #>  [206,] 1.09803542 1.1273171 1.3920817 1.4326160 1.5045856 1.5113356 1.5742941 #>  [207,] 0.34113258 0.3470762 0.3674173 0.4287912 0.4340325 0.4996370 0.5076246 #>  [208,] 0.46679218 0.5000811 0.6707920 0.8439947 0.8498087 0.9041268 0.9161000 #>  [209,] 0.83724131 0.8635335 1.0382973 1.0833042 1.1209649 1.1550701 1.1688428 #>  [210,] 0.45452368 0.5220259 0.5613377 0.6050673 0.7511711 0.8216852 0.8222942 #>  [211,] 0.26163227 0.6288670 0.8527684 0.9468191 0.9539657 1.0104754 1.0774615 #>  [212,] 0.43740849 0.4711864 0.5076441 0.5164308 0.6063599 0.6813264 0.7027677 #>  [213,] 0.39075227 0.4759278 0.6223248 0.6287639 0.7229932 0.7242253 0.7392411 #>  [214,] 0.22688730 0.3566676 0.3744287 0.4178510 0.4235199 0.4579893 0.4628250 #>  [215,] 0.35673820 0.3923058 0.4215584 0.4323929 0.4380352 0.5447846 0.5820753 #>  [216,] 0.63058336 0.6845125 0.7547701 0.7936362 0.8223303 0.8525165 0.9096004 #>  [217,] 0.49655814 0.6726737 0.6797262 0.7263106 0.7698749 0.7903959 0.7928186 #>  [218,] 0.58872484 0.6094730 0.6397100 0.6561160 0.6969952 0.7305262 0.7512533 #>  [219,] 0.21041551 0.5238341 0.5380195 0.5594419 0.5627320 0.5692549 0.5728212 #>  [220,] 0.48835350 0.7741229 0.7768336 0.8184989 0.8475582 1.2752944 1.3063973 #>  [221,] 0.35487785 0.3838300 0.3947866 0.4088795 0.4749069 0.5272110 0.5609260 #>  [222,] 0.46886791 0.5112254 0.6264006 0.6800038 0.7756732 0.9289308 0.9416504 #>  [223,] 0.45711793 0.5161575 0.5675430 0.6699333 0.6931006 0.7023681 0.7733017 #>  [224,] 0.31438193 0.4699711 0.5086461 0.5347073 0.5406928 0.5578813 0.6148881 #>  [225,] 1.04983401 1.0990089 1.1109603 1.2182219 1.2246234 1.2252913 1.2712182 #>  [226,] 0.29647367 0.4244234 0.5126670 0.5754211 0.7127209 0.7215507 0.7233327 #>  [227,] 0.89329496 0.9958333 1.0349032 1.0671169 1.1520933 1.1641544 1.1708587 #>  [228,] 0.34020298 0.4340325 0.4387867 0.5341475 0.5558903 0.5836701 0.5911615 #>  [229,] 0.30162655 0.3295060 0.3386710 0.4230845 0.4387908 0.4493788 0.4495711 #>  [230,] 0.32353293 0.3465564 0.4473779 0.4485927 0.4577259 0.5112452 0.5452148 #>  [231,] 0.56607150 0.8392834 0.8711739 0.9181686 0.9379561 1.0530498 1.0575875 #>  [232,] 0.29163090 0.4800060 0.5359537 0.6524790 0.6593966 0.7102219 0.7120998 #>  [233,] 0.24169521 0.4008557 0.4393638 0.4706020 0.4827842 0.4834392 0.4950389 #>  [234,] 0.59716105 0.8057398 0.8614340 0.8772137 0.9178866 0.9299721 0.9343499 #>  [235,] 0.59899190 0.6854125 0.7063400 0.7216348 0.7291732 0.8195086 0.8229932 #>  [236,] 0.28299585 0.3880582 0.5748020 0.5965526 0.6507202 0.6640591 0.7235052 #>  [237,] 0.50353986 0.5865538 0.6052717 0.7034800 0.8133528 0.8461480 0.8539555 #>  [238,] 0.52239656 0.7391452 0.9136933 1.1739952 1.1883182 1.2449992 1.3633006 #>  [239,] 0.14552863 0.3814012 0.3938433 0.4176108 0.4180806 0.5135950 0.5137141 #>  [240,] 0.29644584 0.6118304 0.6798473 0.7171463 0.7894255 0.8421615 0.8807452 #>  [241,] 0.40202448 0.4348031 0.4973907 0.6253925 0.6612110 0.6814466 0.7151039 #>  [242,] 0.23112638 0.4287912 0.4316440 0.4540357 0.4678999 0.4707085 0.5375458 #>  [243,] 0.45748258 0.4834558 0.5420706 0.7322758 0.7796438 0.7934319 0.8434409 #>  [244,] 0.35229230 0.4548259 0.5021798 0.5254873 0.5426257 0.5812968 0.6338301 #>  [245,] 0.59784070 0.7823937 0.8406975 0.8487061 0.8956495 0.9837971 0.9880104 #>  [246,] 0.29087950 0.5725136 0.6222772 0.6848530 0.7133056 0.7464785 0.7466587 #>  [247,] 0.37726153 0.4791606 0.5056090 0.5421494 0.5436565 0.6344152 0.6968951 #>  [248,] 0.56752002 0.6909313 0.7304347 0.7545064 0.8227176 0.8362974 0.8682414 #>  [249,] 0.29442145 0.5291721 0.5336422 0.5477219 0.6118846 0.7055946 0.7597611 #>  [250,] 0.37099608 0.4723750 0.5122175 0.5293359 0.5874356 0.6010255 0.6401347 #>  [251,] 0.38496416 0.5513021 0.5717612 0.5943405 0.6576633 0.6832439 0.6846858 #>  [252,] 1.34047149 1.4997708 1.6034987 1.7283542 1.7360389 1.7520621 1.7748813 #>  [253,] 0.41549984 0.4358463 0.4473779 0.4986095 0.5073989 0.5201396 0.5705962 #>  [254,] 0.40390017 0.5163987 0.5313875 0.5729650 0.5944944 0.6233748 0.6583955 #>  [255,] 0.46942978 0.6402515 0.6461706 0.6708887 0.6909313 0.7039857 0.7148854 #>  [256,] 0.48381800 0.5943405 0.6307813 0.6409113 0.7963151 0.8026546 0.8270371 #>  [257,] 0.33690627 0.5642240 0.6286296 0.6331563 0.6468588 0.6934045 0.7060469 #>  [258,] 0.53808504 0.5456561 0.5840102 0.6076327 0.6225163 0.6383899 0.6699496 #>  [259,] 0.12849490 0.3799572 0.4609732 0.5030033 0.5137681 0.5487179 0.5627725 #>  [260,] 0.15728306 0.2452248 0.2951984 0.4147482 0.4172196 0.5790325 0.5958184 #>  [261,] 0.21957739 0.3651112 0.4593203 0.5248565 0.5297885 0.5344838 0.5420716 #>  [262,] 0.75759460 0.8252585 1.0343760 1.0499335 1.0626138 1.0825968 1.1187283 #>  [263,] 0.57158582 0.6324941 0.6546816 0.6565199 0.7147322 0.7271090 0.7361959 #>  [264,] 0.29647367 0.5275176 0.5449341 0.6471500 0.6841120 0.6873679 0.7102833 #>  [265,] 0.51615750 0.5570835 0.6274306 0.6650388 0.6707144 0.6942183 0.7353209 #>  [266,] 0.51484090 0.5566002 0.5613393 0.5682984 0.6535853 0.6984804 0.7745099 #>  [267,] 0.36700677 0.5313629 0.5404376 0.5485018 0.5504509 0.5892245 0.5932105 #>  [268,] 0.43773039 0.4629880 0.4878991 0.5618759 0.7370038 0.7499062 0.8097446 #>  [269,] 0.40828619 0.4973929 0.5655989 0.7167360 0.7470190 0.7717553 0.8252099 #>  [270,] 0.39483025 1.0208738 1.2317838 1.2844192 1.2887596 1.2994927 1.4510975 #>  [271,] 0.36490314 0.6867866 0.7161329 0.7189079 0.8093363 0.8141923 0.8179662 #>  [272,] 0.37802975 0.5939646 0.6195542 0.6318619 0.6495393 0.6613567 0.6769237 #>  [273,] 0.47929651 0.6208282 0.6775754 0.7060469 0.7277400 0.7417195 0.7589777 #>  [274,] 0.26946458 0.4270406 0.4383471 0.4792524 0.5688716 0.5777504 0.5949558 #>  [275,] 0.47929651 0.5587160 0.6409113 0.6914182 0.6924478 0.7785106 0.9131072 #>  [276,] 0.73143275 1.0259405 1.0969772 1.1182359 1.1185581 1.1346456 1.2163260 #>  [277,] 0.05867881 0.2490766 0.3401208 0.3790003 0.3875356 0.4076604 0.4088428 #>  [278,] 0.14772488 0.5041253 0.5508537 0.5523577 0.5979467 0.6467127 0.6822051 #>  [279,] 0.35199267 0.4299080 0.4789517 0.5123063 0.5426628 0.5624826 0.6571517 #>  [280,] 0.44995312 0.7355545 0.7356902 0.8168571 0.8993939 0.9105631 0.9214428 #>  [281,] 0.89283255 1.0060287 1.0433599 1.0498633 1.0757157 1.1162759 1.1177607 #>  [282,] 1.01288077 1.0186126 1.5629295 1.5783709 1.6853571 1.6922933 1.7128875 #>  [283,] 0.40085574 0.4809583 0.4903618 0.4971113 0.5002408 0.5077745 0.5346704 #>  [284,] 0.16146285 0.3401208 0.3403236 0.3588919 0.3753667 0.4102269 0.4643010 #>  [285,] 0.52034831 0.5346995 0.5833142 0.6061052 0.6302052 0.6395986 0.6825368 #>  [286,] 0.68599173 0.6909026 0.7497212 0.8047507 0.8578138 0.8905917 0.9153062 #>  [287,] 0.63818365 0.7116927 0.7227868 0.7488101 0.7528384 0.8560135 0.8614176 #>  [288,] 0.37228242 0.4150193 0.4609321 0.5123063 0.5517830 0.5991971 0.6250045 #>  [289,] 0.56256074 0.9115159 0.9253841 1.0036080 1.0088851 1.0095981 1.0423970 #>  [290,] 0.26165504 0.3736180 0.3781773 0.5586554 0.5897470 0.6435305 0.6578760 #>  [291,] 0.51080636 0.5256057 0.5259613 0.5406892 0.5821742 0.5896420 0.5984452 #>  [292,] 0.30292695 0.3496016 0.5026718 0.5043026 0.5205412 0.5463777 0.5635029 #>  [293,] 0.31160635 0.4215584 0.4838180 0.5138689 0.6146040 0.6226107 0.6324504 #>  [294,] 0.37996685 0.4611641 0.5248256 0.5606239 0.5633589 0.5668027 0.5841823 #>  [295,] 1.02835770 1.0581307 1.1528689 1.1624162 1.1655619 1.1806057 1.2092332 #>  [296,] 0.29773455 0.3981614 0.4176108 0.4276784 0.4403556 0.5144100 0.5649197 #>  [297,] 0.57579117 0.8288751 0.8313188 0.9113484 0.9348209 0.9538773 0.9907788 #>  [298,] 0.32793806 0.3483190 0.4910467 0.5280518 0.5615230 0.5674431 0.6254158 #>  [299,] 0.44398136 0.4890921 0.5936290 0.6189360 0.7382115 0.7410095 0.7697490 #>  [300,] 0.27147990 0.2853452 0.3791556 0.4967779 0.5842833 0.5866005 0.6797884 #>  [301,] 0.17095184 0.4160726 0.4230845 0.4286917 0.5197850 0.5631796 0.5657330 #>  [302,] 0.28036224 0.3880582 0.5037481 0.5137642 0.5597055 0.6664396 0.7303743 #>  [303,] 0.42130722 0.4580556 0.4774084 0.5759969 0.5887998 0.5924145 0.6600076 #>  [304,] 0.39449617 0.5378301 0.5918389 0.6269904 0.6726737 0.6928475 0.7149997 #>  [305,] 0.38040428 0.5476001 0.5647197 0.5698525 0.5948210 0.6124112 0.6494131 #>  [306,] 0.38693099 0.4348031 0.4617125 0.4971803 0.5521856 0.5768874 0.5787542 #>  [307,] 0.29700067 0.3600244 0.4243254 0.5014178 0.5220259 0.5869470 0.5902108 #>  [308,] 0.23620717 0.3800295 0.3914411 0.4531267 0.4900331 0.5026718 0.5400989 #>  [309,] 0.44761922 0.5130763 0.5144305 0.5529191 0.5662792 0.5811459 0.6066404 #>  [310,] 0.33498796 0.3784312 0.3800295 0.3809867 0.5006344 0.5648400 0.6019232 #>  [311,] 0.21041551 0.3500838 0.4315974 0.4787380 0.5239163 0.5515448 0.5836575 #>  [312,] 0.56752002 0.5868534 0.6589654 0.7307854 0.8412036 1.0033638 1.0466561 #>  [313,] 0.56273200 0.5943037 0.6208837 0.6231956 0.6344449 0.6794159 0.6859004 #>  [314,] 0.40835558 0.4365672 0.5100292 0.5322726 0.5480094 0.5532005 0.5745854 #>  [315,] 0.05867881 0.2029701 0.3436838 0.3753667 0.3939012 0.4229651 0.4279485 #>  [316,] 0.70785140 0.7443093 0.7606039 0.8305217 0.8764391 0.9283156 0.9301136 #>  [317,] 0.46255599 0.5043094 0.6287639 0.6931524 0.7113152 0.7237908 0.7311356 #>  [318,] 0.57410363 0.7715317 0.8307570 0.8406361 0.8651307 0.8825514 0.9027223 #>  [319,] 0.76753263 0.7826809 0.8200794 0.8953125 0.9055616 0.9133162 0.9228475 #>  [320,] 0.30734433 0.4124799 0.5353525 0.7162853 0.7467847 0.7718316 0.9329598 #>  [321,] 0.42280590 0.4444747 0.4492746 0.5631586 0.6041500 0.6163355 0.6279481 #>  [322,] 0.36492801 0.4428622 0.4714141 0.5042517 0.6626809 0.6696169 0.6757549 #>  [323,] 0.31101054 0.4294652 0.4685132 0.4797946 0.7488101 0.7936362 0.8947338 #>  [324,] 0.99310719 1.1469699 1.3002623 1.3660572 1.3830162 1.3920133 1.4469109 #>  [325,] 0.32054405 0.4375198 0.5155995 0.6199586 0.6875151 0.6950810 0.7305262 #>  [326,] 0.55905651 0.6194762 0.6305834 0.6607772 0.7947337 0.8437476 0.9138682 #>  [327,] 0.42562767 0.6381836 0.6423317 0.7583676 0.8369600 0.8378752 0.8652774 #>  [328,] 0.74753560 0.7507450 0.8382929 0.8889748 0.9218201 0.9361186 0.9781382 #>  [329,] 0.71155611 0.8004506 0.8751916 0.9258767 1.0008713 1.0945535 1.0956736 #>  [330,] 0.35927285 0.4559176 0.4906371 0.5005976 0.5110617 0.5345784 0.5406928 #>  [331,] 0.90180818 0.9489577 1.0013407 1.1084289 1.3554378 1.4443218 1.4957971 #>  [332,] 0.43638945 0.4580556 0.4834392 0.5201555 0.5444178 0.5720773 0.5829828 #>  [333,] 0.41416703 0.4357690 0.5712033 0.5779091 0.6874733 0.7133251 0.7578981 #>  [334,] 0.39347128 0.4363374 0.4433992 0.5338805 0.5379377 0.5390361 0.5814526 #>  [335,] 0.42291393 0.4776945 0.4935992 0.5232087 0.5248256 0.5260113 0.5306993 #>  [336,] 0.34967694 0.4660522 0.6505158 0.7033406 0.7258033 0.7439011 0.7482350 #>  [337,] 0.45169032 0.4808970 0.4857631 0.5062963 0.5088315 0.5274574 0.5859753 #>  [338,] 0.43649923 0.5682984 0.5886064 0.8073762 0.8176553 0.8746955 0.9019593 #>  [339,] 1.30456873 1.4456540 1.4602889 1.5952132 1.6620916 1.7329348 1.7377458 #>  [340,] 0.49158755 0.6385201 0.6578698 0.7336769 0.7706739 0.7816575 0.9613774 #>  [341,] 0.45574689 0.4782438 0.4792285 0.5199276 0.5556153 0.5611019 0.5899783 #>  [342,] 0.48214399 0.5021798 0.5162889 0.6569005 0.7035729 0.7192074 0.7377894 #>  [343,] 1.03456864 1.3098166 1.3727910 1.3911458 1.4666401 1.4759330 1.4940538 #>  [344,] 1.05656901 1.1742886 1.1938989 1.2278827 1.2380360 1.2562630 1.2948441 #>  [345,] 0.71763628 0.9007349 1.0208738 1.0983237 1.1399271 1.1518867 1.1523270 #>  [346,] 0.51601221 0.5468746 0.6115310 0.6456748 0.6725610 0.7127783 0.7206731 #>  [347,] 0.29392131 0.4182906 0.4407556 0.4440988 0.5135950 0.5507103 0.5658368 #>  [348,] 0.28134272 0.3526916 0.4624803 0.4759521 0.4819793 0.5183311 0.5532005 #>  [349,] 0.48033607 0.5505394 0.5659338 0.5693707 0.6345543 0.6938383 0.7099301 #>  [350,] 0.40404174 0.4379438 0.4720437 0.5408734 0.6090332 0.6103032 0.6158299 #>  [351,] 0.32111455 0.4160937 0.5520415 0.5930383 0.6120536 0.6136725 0.6305555 #>  [352,] 0.57218501 0.6584236 0.6761617 0.7729971 0.8637274 0.8670832 0.9150306 #>  [353,] 0.46245091 0.5100211 0.5321872 0.6072052 0.7717553 0.7922072 0.8176312 #>  [354,] 0.30206275 0.3873719 0.4105327 0.4723750 0.5017887 0.6408197 0.6752556 #>  [355,] 0.84980867 1.0403482 1.0812476 1.0964879 1.2082854 1.2633341 1.2857368 #>  [356,] 0.44103872 0.4710623 0.5038891 0.5196003 0.5470151 0.5584398 0.6012620 #>  [357,] 0.55041092 0.5625607 0.9096004 1.0355440 1.0740861 1.0849843 1.1327427 #>  [358,] 0.39853905 0.4380426 0.4907713 0.5128223 0.5423349 0.5631796 0.5675767 #>  [359,] 0.38040428 0.4854956 0.5539536 0.5782477 0.5896420 0.5950057 0.6235567 #>  [360,] 0.84329980 1.0291301 1.0685790 1.1093940 1.1143814 1.2444170 1.2859548 #>  [361,] 0.77033499 0.8182154 0.8811370 1.3339816 1.6486668 1.6691565 1.7422456 #>  [362,] 0.40684390 0.4380638 0.4678999 0.5214361 0.5327495 0.5910466 0.6264071 #>  [363,] 0.42915617 0.4360841 0.5333507 0.5682801 0.5884604 0.6019232 0.6519419 #>  [364,] 0.43121893 0.5393862 0.5932476 0.6449839 0.6634944 0.6719162 0.6738740 #>  [365,] 0.47106644 0.5493634 0.5651214 0.5820767 0.6000353 0.6293054 0.6817027 #>  [366,] 0.37367448 0.3823851 0.3849642 0.5456781 0.5792774 0.6201666 0.6278482 #>  [367,] 0.83454717 0.8538146 0.9857327 1.0204089 1.0306057 1.1275377 1.1473774 #>  [368,] 0.29392131 0.4616058 0.4747718 0.5525259 0.5930383 0.5930880 0.5954613 #>  [369,] 0.40899445 0.6983002 0.7115561 0.8154655 0.8481833 1.0169678 1.0224233 #>  [370,] 0.34967694 0.5594160 0.6021930 0.6157644 0.6464671 0.7022336 0.7184673 #>  [371,] 0.15697035 0.3391935 0.4286224 0.4549596 0.4780959 0.5062963 0.5265781 #>  [372,] 0.42176201 0.4710949 0.4729649 0.5543561 0.6118846 0.6487273 0.6707144 #>  [373,] 0.57233514 0.8076494 0.8116492 0.8511541 0.8764766 0.9149258 0.9258767 #>  [374,] 0.24579558 0.3890920 0.3948862 0.4087001 0.4451597 0.4916355 0.4945847 #>  [375,] 0.52844561 0.6612611 0.7536487 0.8952293 0.9126869 0.9428899 0.9642803 #>  [376,] 0.48535575 0.6549188 0.7078514 0.7277400 0.7516739 0.8203112 0.8643458 #>  [377,] 0.35191762 0.3924935 0.4315884 0.4710623 0.4910250 0.5562699 0.5751814 #>  [378,] 0.27125508 0.3650501 0.4933270 0.6960497 0.7336769 0.7397856 0.7793065 #>  [379,] 0.27513661 0.3501769 0.3598838 0.4640877 0.5144305 0.5435650 0.5445489 #>  [380,] 0.33171703 0.5871431 0.7056785 0.7902047 0.8372413 0.8491255 0.9005382 #>  [381,] 0.20099535 0.4471996 0.5627365 0.6329105 0.6612110 0.6911728 0.7091884 #>  [382,] 0.57093393 0.6165863 0.6251693 0.6518280 0.7130948 0.7613614 0.7948998 #>  [383,] 0.19285204 0.3980170 0.4377304 0.4510730 0.6107803 0.6504235 0.6535431 #>  [384,] 0.37851713 0.4286224 0.4795848 0.5387780 0.5580139 0.5945151 0.6099575 #>  [385,] 0.43542357 0.4493306 0.4890997 0.6392179 0.6673500 0.6822664 0.7000399 #>  [386,] 0.78239374 0.8239880 0.8554854 0.9506240 0.9508255 0.9587136 0.9758611 #>  [387,] 0.52707606 0.9150889 0.9466077 1.0109559 1.0232562 1.0397404 1.0562115 #>  [388,] 0.32793806 0.4677002 0.5117745 0.5761269 0.6130378 0.7008266 0.7084863 #>  [389,] 1.40211196 1.5798818 1.6170981 1.6940082 1.7354727 1.7932272 1.8359999 #>  [390,] 0.38558273 0.4186803 0.4421464 0.4429319 0.5866877 0.6161167 0.6356744 #>  [391,] 0.70666625 0.7481876 0.9713870 1.0633245 1.0794468 1.0874136 1.1013965 #>  [392,] 0.24078963 0.2904994 0.3607357 0.4507354 0.4617434 0.5006344 0.5081447 #>  [393,] 0.27125508 0.5096868 0.6961663 0.7002642 0.7816575 0.8586622 0.8600860 #>  [394,] 0.37774687 0.5014178 0.5380195 0.5515448 0.5867790 0.6056582 0.6231956 #>  [395,] 0.46946157 0.6225936 0.6681706 0.6926448 0.7385542 0.7408482 0.7536624 #>  [396,] 0.33969444 0.3530058 0.3890920 0.4178510 0.4782951 0.4827842 0.4878566 #>  [397,] 0.48972888 0.6486193 0.6622620 0.8432998 0.8500171 0.8893725 0.8930154 #>  [398,] 0.25082367 0.4569831 0.5141743 0.5489707 0.5573514 0.5633589 0.5975123 #>  [399,] 0.20621452 0.3501769 0.3607357 0.4830591 0.5137239 0.5364534 0.5638799 #>  [400,] 0.43353317 0.4458385 0.4494064 0.6437086 0.6634944 0.6711678 0.7543314 #>  [401,] 0.26175281 0.3920234 0.4122170 0.4186007 0.4253323 0.4275688 0.4461322 #>  [402,] 0.39249347 0.5019532 0.5042018 0.5123282 0.5221750 0.5352627 0.5615959 #>  [403,] 0.35443127 0.4741565 0.4839769 0.5969740 0.6160277 0.6210357 0.6322780 #>  [404,] 0.66581305 1.1448378 1.1615457 1.2527696 1.2983249 1.3692350 1.4469763 #>  [405,] 0.76419437 0.7741229 0.9111613 1.3743672 1.4098187 1.4182194 1.4823273 #>  [406,] 0.91985687 0.9814288 0.9911837 1.0176391 1.0983237 1.1299254 1.1695611 #>  [407,] 0.68396498 0.8837073 1.0289055 1.0387879 1.2214178 1.2722625 1.2799205 #>  [408,] 0.46354164 0.5229255 0.5358830 0.5573950 0.5690407 0.5897527 0.5943082 #>  [409,] 0.80634889 0.8250681 1.0404061 1.1664488 1.1836738 1.2187063 1.3061876 #>  [410,] 0.68708076 0.6941433 0.7033629 0.7264231 0.7745785 0.8907778 0.9024532 #>  [411,] 0.42633348 0.5053583 0.5359830 0.5413206 0.5562699 0.5615959 0.5709906 #>  [412,] 0.48796335 0.7009550 0.7059586 0.7485322 0.7497346 0.7817857 0.8330518 #>  [413,] 0.36904676 0.4225441 0.5494433 0.5552377 0.5573950 0.5792523 0.5929455 #>  [414,] 0.85715970 0.8650144 0.9008921 0.9708051 1.0430745 1.1055397 1.1197629 #>  [415,] 0.46096316 0.5327495 0.5375458 0.6471500 0.6662178 0.6705548 0.6776156 #>  [416,] 0.37836726 0.3933264 0.4075681 0.4127442 0.5019532 0.5108064 0.5494433 #>  [417,] 0.74066649 0.7580450 0.7685517 0.8269363 0.9280671 0.9437900 0.9522568 #>  [418,] 0.23243546 0.4860105 0.5155698 0.5463777 0.5522548 0.5841054 0.5863324 #>  [419,] 0.46644993 0.4792068 0.4986095 0.5251612 0.5581422 0.6317721 0.6586216 #>  [420,] 0.33867095 0.3481923 0.4152613 0.4609252 0.4630629 0.5001637 0.5011480 #>  [421,] 0.73910587 0.7729699 0.8586171 1.0853930 1.1108051 1.1387024 1.1573752 #>  [422,] 0.49518000 0.5841653 0.7092425 0.7127551 0.7304347 0.7708605 0.8094257 #>  [423,] 0.15728306 0.2319978 0.2974772 0.3204592 0.5013198 0.5531176 0.6117639 #>  [424,] 0.55537719 0.5743298 0.5793084 0.6005949 0.6486798 0.6654777 0.6822051 #>  [425,] 0.26135719 0.4489088 0.4683921 0.4772735 0.4920899 0.5137445 0.5221750 #>  [426,] 0.17723329 0.2803670 0.4365672 0.4624803 0.4782438 0.4799472 0.5193904 #>  [427,] 0.19913628 0.4141670 0.4622827 0.4885014 0.5146726 0.6064078 0.6145742 #>  [428,] 0.33295554 0.5615230 0.5989279 0.6425851 0.6467511 0.7062238 0.7395510 #>  [429,] 0.37035864 0.3814012 0.4259539 0.4403556 0.4440988 0.5256057 0.5768138 #>  [430,] 0.26946458 0.5105437 0.5613986 0.6007448 0.6015752 0.6055522 0.6136725 #>  [431,] 1.32370995 1.5132775 1.5275518 1.5508230 1.6235463 1.6608998 1.7510243 #>  [432,] 0.33376947 0.4423360 0.6570583 0.6945424 0.7048215 0.7166568 0.7196782 #>  [433,] 0.27937637 0.3040250 0.3322494 0.4376507 0.4531267 0.4535469 0.4628250 #>  [434,] 0.29885260 0.4802242 0.4809262 0.5175534 0.5182935 0.5290614 0.5729650 #>  [435,] 0.25583095 0.2778810 0.3391329 0.4358463 0.4485927 0.4582276 0.5128223 #>  [436,] 0.32080355 0.6051186 0.6708420 0.6738740 0.8329444 0.8868077 0.8927669 #>  [437,] 0.30292695 0.4485263 0.4842653 0.4900331 0.5328713 0.5522548 0.5563813 #>  [438,] 0.26789232 0.4363374 0.4551977 0.4874658 0.4901474 0.4970839 0.5180333 #>  [439,] 0.46306923 0.6660175 1.1013595 1.1159582 1.1202500 1.1407509 1.1541108 #>  [440,] 0.65872584 0.7702600 0.9377506 0.9590155 1.1328342 1.1394068 1.1476552 #>  [441,] 0.76419437 0.8475582 0.8851376 1.2410361 1.2844192 1.3206023 1.4836311 #>  [442,] 0.44883549 0.4677002 0.4910467 0.6225936 0.6944641 0.7271523 0.7423411 #>  [443,] 0.39121500 0.4109332 0.4998102 0.5468746 0.5796688 0.6941950 0.7455975 #>  [444,] 0.34977707 0.4157918 0.5146726 0.5521856 0.5712033 0.5807750 0.6253925 #>  [445,] 0.33925735 0.3559825 0.3635790 0.4271990 0.4476017 0.4991553 0.5433107 #>  [446,] 0.44731229 0.6288670 0.8032654 0.8569672 0.9273488 0.9522568 0.9885957 #>  [447,] 0.65896539 0.7043495 0.7069489 0.8138868 0.8199862 0.8227176 0.8232055 #>  [448,] 0.48033607 0.4904839 0.5146017 0.5306993 0.5348742 0.5709234 0.5896916 #>  [449,] 0.45748258 0.7280487 0.7657059 0.7709302 0.8135025 0.8622437 1.0122533 #>  [450,] 0.29645450 0.3799285 0.3883025 0.4915331 0.5641362 0.5871736 0.5913079 #>  [451,] 0.29706129 0.4199275 0.4357442 0.4839769 0.4970839 0.5266530 0.5331775 #>  [452,] 0.76740458 0.9402681 0.9718117 0.9841824 1.0216351 1.0324704 1.0966535 #>  [453,] 0.18303997 0.3999096 0.4766640 0.4820215 0.5361614 0.5403808 0.5552377 #>  [454,] 0.32054405 0.3960272 0.4669216 0.6194159 0.6478778 0.6998860 0.7062842 #>  [455,] 0.33550818 0.3546689 0.3910042 0.4423901 0.4759521 0.4963266 0.5836575 #>  [456,] 0.33106627 0.3581924 0.3785171 0.4441292 0.4780959 0.5627309 0.5774062 #>  [457,] 0.33941166 0.6862324 0.7151039 0.7414645 0.7624093 0.8562163 0.8613264 #>  [458,] 0.57268721 0.7319019 0.8243789 0.8341502 0.8949508 0.9038406 0.9064387 #>  [459,] 0.19913628 0.3497771 0.3878742 0.4357690 0.6167919 0.6467127 0.6483591 #>  [460,] 0.61183040 0.6421829 0.6536921 0.6558324 0.7075148 0.7243779 0.7280375 #>  [461,] 0.33376947 0.5038891 0.5147232 0.5503724 0.5994053 0.6215030 0.6393210 #>  [462,] 0.35165084 0.4879633 0.6663645 0.7184673 0.7280375 0.9114404 0.9121455 #>  [463,] 0.22854118 0.3453246 0.6906990 0.6991535 0.7215507 0.7251420 0.7392411 #>  [464,] 0.61642628 0.7131145 0.7845989 0.8942563 0.9341427 0.9799408 0.9928346 #>  [465,] 0.46635775 0.6329047 0.6735363 0.7497212 0.7811220 0.7923282 0.9856167 #>  [466,] 0.21957739 0.4568239 0.4770144 0.4820658 0.5290814 0.6366807 0.6396889 #>  [467,] 0.50001179 0.5084815 0.5318620 0.5640055 0.5713808 0.6034219 0.6459211 #>  [468,] 0.33830069 0.4040250 0.4664499 0.4774983 0.5375773 0.5405532 0.5454753 #>  [469,] 0.36741734 0.3803742 0.4402410 0.5390041 0.5745741 0.5848975 0.5856340 #>  [470,] 0.45088281 0.4797946 0.4834416 0.5782994 0.6820155 0.7528384 0.7939564 #>  [471,] 0.22688730 0.2793764 0.4087001 0.4101414 0.4181031 0.4345125 0.4617848 #>  [472,] 0.55600014 0.6153757 0.6737409 0.6986513 0.7093067 0.7281755 0.7370173 #>  [473,] 0.57233514 0.6658022 0.7192569 0.7522827 0.7528814 0.7886239 0.8576885 #>  [474,] 0.34231667 0.3481923 0.3518489 0.3737479 0.4357544 0.4495711 0.4640877 #>  [475,] 0.90076890 1.1640426 1.2059277 1.2065046 1.2258280 1.2966874 1.3117405 #>  [476,] 0.43873810 0.5267036 0.5968160 0.6048939 0.6519038 0.6805291 0.7370173 #>  [477,] 0.43954581 0.4820731 0.4991256 0.5030033 0.5531176 0.5625694 0.5790325 #>  [478,] 0.39711992 0.4364992 0.6252200 0.7779193 0.7793857 0.9379817 1.0051609 #>  [479,] 0.37039167 0.4001186 0.4665721 0.5017887 0.5122175 0.6361574 0.7009433 #>  [480,] 0.68353095 0.7903048 0.8847623 0.9123756 1.0283925 1.0697326 1.1226155 #>  [481,] 0.28278408 0.4423901 0.4675819 0.5221498 0.5843233 0.5850588 0.6149278 #>  [482,] 0.52494371 0.5520984 0.5801738 0.6486377 0.6790444 0.7452561 0.8405231 #>  [483,] 0.20603007 0.3610064 0.4345125 0.4507354 0.4535469 0.4543073 0.4729427 #>  [484,] 0.61363895 0.7286979 0.8430731 0.8753495 0.8980128 0.9135072 0.9535924 #>  [485,] 0.41463031 0.5420706 0.6116068 0.7131145 0.7280487 0.7417379 0.8141923 #>  [486,] 0.20603007 0.3559695 0.4357544 0.4403870 0.4493788 0.4609252 0.4893326 #>  [487,] 0.76330132 0.8620684 0.8973395 1.0367212 1.0509129 1.0544378 1.1202500 #>  [488,] 0.41129292 0.5321872 0.5655989 0.6073661 0.6135129 0.7893189 0.8605687 #>  [489,] 0.41386962 0.4622827 0.5779091 0.5795918 0.6167919 0.6394504 0.6527457 #>  [490,] 0.46124544 0.4894517 0.4943991 0.5133157 0.5286370 0.5747412 0.5867225 #>  [491,] 0.44552205 0.6314427 0.7069304 0.7374639 0.7828188 0.8340967 0.8403938 #>  [492,] 0.24217203 0.3245447 0.3346870 0.4287953 0.4461322 0.4484048 0.4875416 #>  [493,] 0.60736749 0.6553385 0.7692317 0.8234628 0.8635568 0.9027218 0.9421544 #>  [494,] 0.39711992 0.5886064 0.7486694 0.7691199 0.7787885 0.8791463 0.8808331 #>  [495,] 0.49413793 0.5747414 0.5943037 0.7681145 0.8727405 0.8794185 0.9116325 #>  [496,] 1.49607297 1.5861527 1.6686636 1.8283803 1.9218233 1.9876473 2.0050099 #>  [497,] 0.53477229 0.5577900 0.5813127 0.6427882 0.6472395 0.6898853 0.7237974 #>  [498,] 0.29087950 0.5249098 0.5471709 0.6534698 0.7327872 0.7385813 0.7820765 #>  [499,] 0.29442145 0.4834856 0.5388610 0.5539173 0.6223676 0.6313462 0.6525163 #>  [500,] 0.49632662 0.5183311 0.5221498 0.5664336 0.5805350 0.6189645 0.6495393 #>  [501,] 0.31682523 0.3242785 0.4948362 0.5358696 0.5565653 0.5867342 0.6132679 #>  [502,] 0.35724949 0.4842623 0.6822445 0.7206731 0.7948998 0.8068566 0.8239880 #>  [503,] 0.37817729 0.4192170 0.4411566 0.4664123 0.4714141 0.4833013 0.4870075 #>  [504,] 0.45403190 0.5517753 0.5608126 0.6072052 0.7321818 0.7710507 0.7822276 #>  [505,] 0.41018927 1.0506313 1.0937016 1.1000199 1.1915076 1.2127384 1.2732300 #>  [506,] 0.40297457 0.5568250 0.5837825 0.6822381 0.6894365 0.7085792 0.7097793 #>  [507,] 0.58017381 0.6022665 0.7503567 0.7777512 0.7870693 0.8673386 0.8999370 #>  [508,] 0.42266175 0.4312194 0.5137642 0.5965526 0.6569491 0.6927412 0.8424444 #>  [509,] 0.79030481 1.0037249 1.0784667 1.1349819 1.1633015 1.2367422 1.2382928 #>  [510,] 0.63214709 0.6637335 0.6876510 0.7237908 0.7690136 0.8022468 0.8504181 #>  [511,] 0.71570380 0.7272372 0.8048525 1.0037050 1.0117104 1.0498340 1.0730562 #>  [512,] 0.42852161 0.4842623 0.5160122 0.5603246 0.6165863 0.6729953 0.7478425 #>  [513,] 0.68324392 0.7000163 0.7059295 0.7257262 0.7340767 0.7525981 0.7613614 #>  [514,] 0.32080355 0.4810978 0.7206119 0.8048525 0.8181447 0.8389928 0.8459320 #>  [515,] 0.40770017 0.4499531 0.8072181 0.8980128 0.9609399 0.9695221 0.9851041 #>  [516,] 0.72279282 0.7580450 0.8420381 0.8569672 0.9587136 0.9604423 0.9703785 #>  [517,] 0.20297014 0.2490766 0.3252361 0.3308940 0.3774536 0.4643010 0.4935992 #>  [518,] 1.25145751 1.5184600 1.6162123 1.6732285 1.6799324 1.6912570 1.7818943 #>  [519,] 0.46907603 0.5301230 0.6087416 0.6250045 0.6264006 0.6311689 0.6358109 #>  [520,] 0.45797125 0.6235613 0.7330695 0.8600802 0.8640683 0.8717018 0.8801920 #>  [521,] 0.53469947 0.6224733 0.7318212 0.7893189 0.8011613 0.8170873 0.8595541 #>  [522,] 0.42385771 0.4412836 0.4493306 0.5281943 0.5871445 0.5969403 0.6530146 #>  [523,] 0.26188844 0.5351442 0.5896388 0.6277912 0.6560409 0.6593966 0.6791250 #>  [524,] 0.33089398 0.3436838 0.3716194 0.3875356 0.4064944 0.4229139 0.4566508 #>  [525,] 0.24217596 0.2793517 0.4611609 0.4768785 0.4890968 0.4916355 0.5127400 #>  [526,] 0.49185505 0.5216118 0.5233089 0.6731701 0.6799561 0.6992660 0.7188800 #>  [527,] 0.07510491 0.2586206 0.3946372 0.4173669 0.4504325 0.4832636 0.5076441 #>  [528,] 0.47504204 0.6569491 0.6790444 0.7434560 0.7633232 0.7655209 0.7864035 #>  [529,] 0.73078538 0.9247628 0.9273488 1.0985240 1.1115501 1.1693887 1.1740246 #>  [530,] 0.67923990 0.7473751 0.7516739 0.7606039 0.7928186 0.9725130 1.0178765 #>  [531,] 0.62522000 0.7587888 0.7716370 0.7787885 0.8073762 0.8219424 0.8537089 #>  [532,] 0.45882152 0.5355878 0.6167487 0.7237974 0.7330695 0.7958642 0.8095968 #>  [533,] 0.39712271 0.4483890 0.4897307 0.4918550 0.5261354 0.5284111 0.5561967 #>  [534,] 0.37431474 0.3835664 0.4011932 0.4654235 0.4907713 0.5035367 0.5116652 #>  [535,] 0.54498818 0.7140093 0.7367919 0.7491237 0.8189749 0.8847430 0.9047899 #>  [536,] 0.44737806 0.4551738 0.4809262 0.5373775 0.5881784 0.6583955 0.7090245 #>  [537,] 0.39853905 0.5035367 0.5063313 0.5082424 0.5178175 0.5216080 0.5284276 #>  [538,] 0.30598353 0.4658682 0.4758378 0.6281156 0.7102219 0.7627024 0.7858383 #>  [539,] 0.55970554 0.5726872 0.6027349 0.7920620 0.7974711 0.8147120 0.8668477 #>  [540,] 0.41443381 0.5069419 0.5241613 0.5449882 0.6607772 0.6988109 0.8492748 #>  [541,] 0.88014576 1.0178907 1.2291397 1.5427793 1.5856126 1.6162123 1.6891734 #>  [542,] 0.54876539 1.0387879 1.1324308 1.2124210 1.2254065 1.2982751 1.3164621 #>  [543,] 0.32439959 0.4150193 0.4645366 0.4789517 0.5125095 0.5233893 0.5272110 #>  [544,] 0.27487374 0.3121158 0.4400257 0.5405610 0.5436565 0.5665927 0.5969740 #>  [545,] 0.54856731 0.5850588 0.6891595 0.8537089 0.8685284 0.8867372 0.8869957 #>  [546,] 0.44039920 0.4848456 0.5114794 0.7978006 0.8391413 0.8541287 0.8769374 #>  [547,] 0.31841837 0.4943991 0.5028094 0.5342298 0.5711391 0.5856839 0.5866983 #>  [548,] 0.62908504 0.6687548 0.8022468 0.8360750 0.9087749 0.9108743 0.9238968 #>  [549,] 0.33633520 0.4483890 0.4743810 0.4781805 0.4826466 0.5228004 0.5385922 #>  [550,] 0.59919711 0.6136647 0.7397742 0.8788123 0.8907704 0.8964448 0.9661846 #>  [551,] 0.30692156 0.4124799 0.4797284 0.5334560 0.7298373 0.8334108 0.8341589 #>  [552,] 0.51147937 0.6737409 0.7283992 0.7590143 0.7658816 0.7857767 0.7865388 #>  [553,] 0.26135719 0.3363352 0.3512355 0.4389290 0.4523172 0.4523223 0.4858230 #>  [554,] 0.91139058 1.0310712 1.0929537 1.2047192 1.2841038 1.3994075 1.4214629 #>  [555,] 0.31438193 0.3257769 0.4432204 0.5279865 0.5419063 0.5916621 0.6265223 #>  [556,] 0.32212109 0.4788309 0.6219646 0.6898146 0.6915945 0.7000399 0.7008904 #>  [557,] 0.43449632 0.4730115 0.5332431 0.6840444 0.7069304 0.7685336 0.7819460 #>  [558,] 0.35435109 0.3977339 0.6708420 0.6719162 0.7207436 0.8550800 0.8551901 #>  [559,] 0.39649404 0.4056908 0.4566484 0.4851110 0.5852497 0.6281156 0.6490069 #>  [560,] 0.99458747 1.0178907 1.0186126 1.0191208 1.1754704 1.2370860 1.3353388 #>  [561,] 0.73780310 0.8128445 0.8176553 0.8685284 0.9837414 1.0117104 1.0451265 #>  [562,] 0.26186702 0.3941664 0.3946372 0.4040059 0.4346852 0.4433198 0.4612454 #>  [563,] 0.43542357 0.4617045 0.5162889 0.5940007 0.6542033 0.6811738 0.7008904 #>  [564,] 0.40770017 0.7351824 0.7355545 0.8753495 0.8823479 0.8836848 0.8986552 #>  [565,] 0.30439682 0.3512355 0.3871421 0.4003691 0.4006582 0.4635416 0.4683921 #>  [566,] 0.56595647 0.5709339 0.7356902 0.9609399 0.9898578 1.0084496 1.0176787 #>  [567,] 0.40985302 0.4256277 0.5947455 0.6944027 0.7958642 0.7982770 0.7994761 #>  [568,] 0.31841837 0.4711864 0.4829015 0.5225680 0.5261215 0.5916308 0.5945926 #>  [569,] 0.42014688 0.5155995 0.5437317 0.5501571 0.5621750 0.5814526 0.6166183 #>  [570,] 0.36261091 0.4749069 0.4896651 0.4949244 0.5786072 0.6382516 0.6629426 #>  [571,] 0.35008384 0.3777621 0.3784312 0.3910042 0.4331639 0.4819793 0.5238341 #>  [572,] 0.43285234 0.4344963 0.5662659 0.6491792 0.7959564 0.8032654 0.8288345 #>  [573,] 0.19674549 0.3760089 0.5259315 0.5691005 0.6580457 0.6707544 0.7038888 #>  [574,] 0.43399605 0.4360841 0.4395942 0.4832636 0.4880371 0.5152591 0.5431408 #>  [575,] 0.85508004 0.8793428 0.9615040 1.0505356 1.1234614 1.1997599 1.2258280 #>  [576,] 0.25021844 0.5301766 0.5554556 0.5647197 0.6991535 0.7176691 0.7311356 #>  [577,] 0.35487785 0.4611641 0.4949244 0.5164432 0.5771793 0.6157015 0.6388694 #>  [578,] 0.24892651 0.3242785 0.4105327 0.5093210 0.5327251 0.5874356 0.6324111 #>  [579,] 0.30802604 0.5617099 0.6006375 0.6399335 0.6459777 0.6716067 0.6758599 #>  [580,] 0.85329757 0.8801458 0.9932011 1.0191208 1.0417901 1.0506313 1.0821026 #>  [581,] 0.52844561 0.6223163 0.6937501 0.7951236 0.8117435 0.8132976 0.8973272 #>  [582,] 0.26163227 0.4473123 0.8420381 0.8424063 0.8520938 0.9360690 0.9813897 #>  [583,] 0.31415084 0.7094237 0.7135253 0.7674046 0.7820765 0.8344121 0.8672234 #>  [584,] 0.25552242 0.4527396 0.4685132 0.5782994 0.7133056 0.7452899 0.7887546 #>  [585,] 0.69443914 0.7586078 0.8144558 0.8681961 0.9289308 0.9374525 0.9508108 #>  [586,] 0.53808504 0.6033917 0.7246964 0.7408025 0.7821061 0.7894783 0.8068367 #>  [587,] 0.20794539 0.5747414 0.5748020 0.6794159 0.7063612 0.7096876 0.7446053 #>  [588,] 0.32577689 0.5082946 0.5082989 0.5086461 0.5211039 0.5804279 0.6231019 #>  [589,] 0.47676469 0.5164308 0.5897509 0.6001332 0.7089613 0.7109591 0.7340331 #>  [590,] 0.50008113 0.5990230 0.7320285 0.7351824 0.8030696 0.8072181 0.8235728 #>  [591,] 0.57218501 0.6209966 0.8007698 0.9982560 1.0312452 1.0760968 1.1052554 #>  [592,] 0.42880543 0.5208046 0.5379288 0.5460563 0.5745741 0.6061445 0.6180022 #>  [593,] 0.36519545 0.4000315 0.4173396 0.5407534 0.5433270 0.5551389 0.5590254 #>  [594,] 0.40439867 0.4112624 0.4743810 0.5126670 0.5857225 0.6080280 0.6576969 #>  [595,] 0.91986891 1.0471523 1.0962508 1.1457483 1.2063461 1.2096386 1.2818818 #>  [596,] 0.59500565 0.7148854 0.7379580 0.7739052 0.8094257 0.8107059 0.8414397 #>  [597,] 0.82194235 1.0849930 1.2145556 1.2629403 1.2908457 1.3496315 1.3894470 #>  [598,] 0.33690627 0.3679544 0.4280680 0.5894134 0.6021839 0.6208282 0.6555040 #>  [599,] 0.58262761 0.6008988 0.7305949 0.7338809 0.8308169 0.8374191 0.8452652 #>  [600,] 0.43399605 0.4456016 0.5155698 0.5477997 0.6077991 0.6219143 0.6753819 #>  [601,] 0.60506728 0.7302607 0.7756808 0.8797810 0.9470350 0.9631616 1.0700479 #>  [602,] 0.32593493 0.4792285 0.4799472 0.5080980 0.5322726 0.6021226 0.6039506 #>  [603,] 0.65604089 0.6746200 0.6775397 0.7948843 0.8542375 0.9704047 0.9728632 #>  [604,] 0.33231838 0.3592729 0.4039050 0.4122170 0.4414478 0.4579893 0.4852641 #>  [605,] 0.29316252 0.3392573 0.3536436 0.4399865 0.4887359 0.4982067 0.5001500 #>  [606,] 0.83679265 0.8469814 0.8851508 0.9166844 1.0088851 1.2263677 1.2544270 #>  [607,] 0.76854388 0.7923282 0.8367926 0.8483389 0.8984769 0.9828325 0.9841403 #>  [608,] 0.53324310 0.5978407 0.6879790 0.7828188 0.7959564 0.8002629 0.8520938 #>  [609,] 0.44690597 0.7365226 0.9039323 0.9100012 0.9113906 0.9228475 0.9304846 #>  [610,] 0.26789232 0.4182155 0.5025165 0.5390361 0.5800269 0.5815716 0.5966373 #>  [611,] 0.56580200 0.6795234 0.6890756 0.7043495 0.7545064 0.8935188 0.8959022 #>  [612,] 0.37080109 0.3722054 0.3930774 0.4613165 0.4773540 0.4888534 0.4911732 #>  [613,] 0.84750678 0.8847430 0.9432073 0.9878426 1.0031528 1.0179961 1.0356788 #>  [614,] 0.41492306 0.4940675 0.6253834 0.6381218 0.6842904 0.7119517 0.7755235 #>  [615,] 0.45072024 0.4558588 0.4895479 0.4919001 0.5091485 0.5459968 0.5826496 #>  [616,] 1.18732030 1.2110640 1.2361110 1.2380360 1.2822861 1.3045687 1.3125648 #>  [617,] 0.45780567 0.5249098 0.6170434 0.6222772 0.6460896 0.8167483 0.8282113 #>  [618,] 0.29163090 0.3937905 0.4468319 0.5161140 0.6277912 0.6676670 0.7167713 #>  [619,] 0.26016348 0.2745817 0.3721806 0.4357442 0.5081759 0.5258651 0.5408570 #>  [620,] 0.44447466 0.6933832 0.7153387 0.7663746 0.7675326 0.7735789 0.7799644 #>  [621,] 0.33171703 0.5972364 0.6871728 0.6962401 0.7402222 0.7823818 0.7841900 #>  [622,] 0.27935169 0.4072987 0.4163113 0.4451597 0.4659561 0.4684110 0.4853470 #>  [623,] 0.47477177 0.5347266 0.5658368 0.6055522 0.6120536 0.6378061 0.6535431 #>  [624,] 0.66226203 0.7529468 0.7663246 0.8554706 0.9385181 0.9784023 1.0528652 #>  [625,] 0.41251476 0.5117745 0.5199276 0.5211797 0.5280518 0.5571889 0.6098461 #>  [626,] 0.66945601 0.8082124 0.8157529 0.8947934 0.9093647 0.9783872 0.9908390 #>  [627,] 0.70116770 0.7119517 0.7200968 0.7473022 0.7685439 0.7862799 0.8469814 #>  [628,] 0.29519842 0.2974772 0.4436954 0.5347723 0.5371710 0.6060097 0.6103223 #>  [629,] 0.19481641 0.4097905 0.4980947 0.5000118 0.5130763 0.5193904 0.6039506 #>  [630,] 0.45585884 0.5044109 0.5160934 0.5406976 0.5863324 0.5995646 0.6167798 #>  [631,] 0.41474824 0.4395458 0.4421464 0.4906371 0.5013198 0.5041168 0.5414372 #>  [632,] 0.29057698 0.3573658 0.3599168 0.3931620 0.4039050 0.4043936 0.4619813 #>  [633,] 0.67316926 0.7768336 0.9009444 1.1910133 1.1954297 1.2135391 1.2220785 #>  [634,] 0.55041092 0.7274719 0.9253841 1.0214112 1.0766071 1.1589518 1.2618424 #>  [635,] 0.46657209 0.6010255 0.6425716 0.7003910 0.7072415 0.7485606 0.7592790 #>  [636,] 0.44412917 0.4549596 0.4795848 0.4859473 0.5081744 0.5480094 0.5627410 #>  [637,] 0.91970024 1.0203991 1.1796746 1.1904191 1.2186310 1.2311420 1.2451331 #>  [638,] 0.41868025 0.5174883 0.5512099 0.5809064 0.6082092 0.6252683 0.7092452 #>  [639,] 0.30439682 0.3492437 0.4122193 0.4184817 0.4489088 0.4858230 0.4985720 #>  [640,] 0.24579558 0.3396944 0.4617848 0.4659561 0.4814010 0.4951638 0.5349157 #>  [641,] 0.25082367 0.3734730 0.3838300 0.4645366 0.5164432 0.5285997 0.5580892 #>  [642,] 0.40684390 0.4609632 0.4973929 0.5444901 0.5545381 0.5848975 0.5916572 #>  [643,] 0.41492306 0.4675810 0.5244642 0.5284839 0.5842833 0.6948972 0.7200968 #>  [644,] 0.27941887 0.3310663 0.3391935 0.4010472 0.4473181 0.4516903 0.4775186 #>  [645,] 0.67439476 0.7863468 0.8056699 0.8168571 0.8170959 0.9099256 0.9921083 #>  [646,] 0.55034466 0.6915945 0.7406665 0.7627618 0.8168280 0.9141672 0.9308950 #>  [647,] 0.47240257 0.4820658 0.5553772 0.5796688 0.5914164 0.6635223 0.6750074 #>  [648,] 0.26131817 0.2988526 0.3322494 0.3591994 0.3914411 0.4902615 0.5218686 #>  [649,] 0.35819237 0.3598838 0.4116118 0.4775186 0.5081744 0.5236091 0.5519487 #>  [650,] 0.32111455 0.3819319 0.5563963 0.5729979 0.6046723 0.6460554 0.6504235 #>  [651,] 0.50829459 0.6955363 0.7237800 0.7325308 0.7522087 0.7582351 0.7632292 #>  [652,] 0.56595647 0.6518280 0.8562963 0.8842466 0.9235141 0.9377506 0.9611886 #>  [653,] 0.46355946 0.4688679 0.4847671 0.5869157 0.6087416 0.6954692 0.7076619 #>  [654,] 0.48909967 0.5281943 0.6219646 0.6554335 0.7517141 0.7627618 0.7827973 #>  [655,] 0.76524354 0.8336802 0.9178866 1.1798504 1.2397083 1.2480568 1.3700990 #>  [656,] 0.42068847 0.5545774 0.5978056 0.6317115 0.6525163 0.6674976 0.7577862 #>  [657,] 0.41980594 0.4456016 0.4809583 0.5206930 0.5656590 0.6133254 0.6282834 #>  [658,] 0.37992855 0.4423075 0.4432204 0.4481779 0.4568193 0.5198903 0.5444287 #>  [659,] 0.29195256 0.3368837 0.3530870 0.3719959 0.3764694 0.3842973 0.4370949 #>  [660,] 0.39202341 0.3948862 0.4072987 0.4611609 0.4782951 0.4814010 0.4851833 #>  [661,] 0.29039540 0.3522923 0.4022364 0.5541733 0.5969403 0.6157475 0.6222588 #>  [662,] 0.33666138 0.4256233 0.5991461 0.6275177 0.6425851 0.6769773 0.7294826 #>  [663,] 0.38830152 0.5028539 0.5034634 0.5268799 0.5707602 0.5767881 0.6015356 #>  [664,] 0.39602715 0.4375198 0.4788309 0.6314427 0.6471102 0.6493712 0.7246878 #>  [665,] 0.54202685 0.7741139 0.8658882 0.8953125 0.9100012 0.9352679 0.9932252 #>  [666,] 0.75388508 0.8046442 0.8889724 0.9053398 0.9999897 1.0032998 1.0356788 #>  [667,] 0.33688374 0.3934713 0.4141342 0.4266323 0.4499429 0.4596798 0.5613495 #>  [668,] 0.45882152 0.5577900 0.6232106 0.8640683 0.9560542 1.0141776 1.0154513 #>  [669,] 0.35656176 0.3996581 0.4708138 0.5144100 0.5653578 0.6012620 0.6315405 #>  [670,] 0.37802975 0.4299080 0.5634630 0.7275405 0.7410968 0.7536500 0.7945570 #>  [671,] 0.40672803 0.4173669 0.4198059 0.4880371 0.4971113 0.4997584 0.5477997 #>  [672,] 0.72692876 0.9706719 1.0441205 1.1687629 1.2223616 1.2379451 1.2382128 #>  [673,] 0.40887948 0.5285997 0.5632034 0.5771793 0.6148634 0.6417328 0.6570734 #>  [674,] 0.32523609 0.3403236 0.3939012 0.4064944 0.4076604 0.4122994 0.4381175 #>  [675,] 0.36146784 0.3852774 0.4887359 0.5218188 0.5288019 0.5319760 0.5631667 #>  [676,] 0.37439528 0.3973100 0.4109332 0.5129201 0.5233893 0.5301230 0.6501041 #>  [677,] 0.25583095 0.3670068 0.4154998 0.4792068 0.5215293 0.5361685 0.5601039 #>  [678,] 0.54853180 0.5820011 0.6402676 0.7633013 0.8392914 0.8460153 0.9391645 #>  [679,] 0.71169265 0.7326171 0.7590143 0.8332108 0.8453021 0.8652774 0.9671847 #>  [680,] 0.47504204 0.5249437 0.6658772 0.6927412 0.7097793 0.8398521 0.8840160 #>  [681,] 0.15697035 0.3838515 0.4473181 0.5227852 0.5387780 0.5448878 0.5627410 #>  [682,] 0.52046977 0.5233089 0.6694560 0.7396316 0.7621470 0.8325586 0.8434820 #>  [683,] 0.23620717 0.2613182 0.3349880 0.4376507 0.4491710 0.5154816 0.5182935 #>  [684,] 0.37600894 0.3849938 0.4072703 0.4354120 0.4890921 0.5506037 0.5872709 #>  [685,] 0.19424838 0.5603246 0.6136389 0.6251693 0.6725610 0.8425907 0.8476725 #>  [686,] 0.19285204 0.3473729 0.4878991 0.5286005 0.5344180 0.5347266 0.5729979 #>  [687,] 0.26669317 0.3235329 0.3391329 0.4611479 0.4679357 0.5073989 0.5601039 #>  [688,] 0.29195256 0.3846466 0.3881952 0.4266323 0.4648014 0.4839721 0.4884518 #>  [689,] 0.75288139 0.8154655 0.8751916 0.8764766 0.8898245 0.9831371 1.0301574 #>  [690,] 0.24892651 0.3168252 0.3873719 0.6040635 0.6113531 0.6565168 0.6681040 #>  [691,] 0.48531044 0.5520984 0.6022665 0.6658772 0.8718112 0.9717690 1.0194818 #>  [692,] 0.43638945 0.4409299 0.5759969 0.5933341 0.5978056 0.6568031 0.6786847 #>  [693,] 0.49975837 0.5596718 0.5877228 0.5897509 0.6246000 0.6413234 0.6436289 #>  [694,] 0.72692876 0.9329452 0.9442355 0.9656824 1.0035334 1.0592012 1.1114934 #>  [695,] 0.37996685 0.4549827 0.4864058 0.5374963 0.5776435 0.6091945 0.6115515 #>  [696,] 0.21127051 0.4383471 0.4445260 0.4679357 0.4848315 0.4988260 0.5112452 #>  [697,] 0.35466894 0.3666392 0.4078329 0.4315974 0.4331639 0.4995779 0.5594419 #>  [698,] 0.38714206 0.4043987 0.4389290 0.5123282 0.5229255 0.5385922 0.5444218 #>  [699,] 0.47026142 0.5482637 0.5784525 0.6759504 0.6798270 0.6883781 0.7195045 #>  [700,] 0.26835905 0.3047915 0.4154044 0.4175232 0.4588073 0.5099229 0.5310791 #>  [701,] 0.71979860 0.8718112 0.9273751 1.1238500 1.1316304 1.1414003 1.1690461 #>  [702,] 0.19208548 0.3783673 0.4380352 0.5202819 0.5441640 0.5992319 0.6193202 #>  [703,] 0.18800702 0.3719647 0.4370949 0.5324410 0.5351907 0.5532837 0.5613495 #>  [704,] 0.35899249 0.3708011 0.3835664 0.3901952 0.4300679 0.4464990 0.4476017 #>  [705,] 0.23899681 0.2756387 0.2964545 0.4040059 0.4481779 0.5346704 0.5458267 #>  [706,] 1.04783436 1.1287887 1.1483398 1.1568887 1.2464863 1.2863301 1.3261657 #>  [707,] 0.26188844 0.4102297 0.4468319 0.4800060 0.5963536 0.6775397 0.7609252 #>  [708,] 0.33726252 0.4085803 0.4985720 0.5826496 0.5943082 0.6235700 0.6555040 #>  [709,] 0.53558777 0.5560001 0.6232106 0.6235613 0.6313175 0.6898853 0.7283992 #>  [710,] 0.41139347 0.4256233 0.5829259 0.6962401 0.7056785 0.7062238 0.7769617 #>  [711,] 0.68981456 0.7234943 0.7441239 0.8403938 0.9602548 0.9862784 0.9868777 #>  [712,] 0.73493260 0.8472202 0.8597953 0.8752983 0.8811370 0.9291718 1.1006391 #>  [713,] 0.21127051 0.3901952 0.4375253 0.4504961 0.4744580 0.4792524 0.4858607 #>  [714,] 0.55510233 0.7157038 0.7378031 0.8389928 0.8987329 1.1983548 1.2015437 #>  [715,] 0.30206275 0.3703917 0.5293359 0.5996253 0.6093408 0.6681040 0.6691864 #>  [716,] 0.43710668 0.5244642 0.5836701 0.5886175 0.6253834 0.7163206 0.7165319 #>  [717,] 0.48345578 0.6116068 0.7233970 0.7406071 0.7659614 0.7791587 0.8176044 #>  [718,] 0.61537571 0.7659614 0.8672518 0.8942477 0.9312638 0.9611901 1.0477763 #>  [719,] 0.20718907 0.2771811 0.3047915 0.4000315 0.4533851 0.4685595 0.5290814 #>  [720,] 0.38037421 0.4160726 0.4482299 0.4540357 0.4640625 0.5172776 0.5214361 #>  [721,] 0.35635425 0.3907523 0.5043094 0.5554556 0.6132218 0.6906990 0.7245906 #>  [722,] 0.51611397 0.5197850 0.5218355 0.5571655 0.5963536 0.6000947 0.6524790 #>  [723,] 0.82499372 1.0128808 1.2845540 1.2982751 1.4281727 1.5167170 1.5180963 #>  [724,] 0.65488694 0.6704927 0.7264231 0.9324755 1.0104835 1.0228112 1.0348616 #>  [725,] 0.48705270 0.5367756 0.5989762 0.6420617 0.6840779 0.7162853 0.7298373 #>  [726,] 0.56425120 0.5826276 0.6033917 0.7950448 0.8114512 0.8269363 0.8391981 #>  [727,] 0.22653388 0.3302201 0.4154044 0.5248565 0.5272064 0.5316061 0.5405330 #>  [728,] 0.26389565 0.4307807 0.4588073 0.4903618 0.5125312 0.5206930 0.5267481 #>  [729,] 0.40011856 0.5952966 0.6093408 0.6721278 0.6970826 0.7271112 0.7592790 #>  [730,] 0.54717086 0.7582110 0.8722083 0.8756748 0.8985295 0.9404245 1.0220494 #>  [731,] 0.29171054 0.4847671 0.4903076 0.6707920 0.7753231 0.8214549 0.8281629 #>  [732,] 0.59092893 0.5922141 0.6319449 0.6671393 0.6822445 0.7780801 0.8336798 #>  [733,] 0.55510233 0.7272372 1.0451265 1.0899133 1.2219712 1.2246234 1.2566521 #>  [734,] 0.40328656 0.4486017 0.4856274 0.5418958 0.5541733 0.5809064 0.5905127 #>  [735,] 0.38243981 0.4578057 0.6865319 0.7419477 0.7490240 0.7657059 0.7690994 #>  [736,] 0.29771358 0.3016265 0.3411326 0.3503381 0.4286917 0.4387867 0.4402410 #>  [737,] 0.58685342 0.7069489 1.0756205 1.0985240 1.0990692 1.1504657 1.1665054 #>  [738,] 0.18558019 0.3973100 0.4998102 0.5125095 0.5416997 0.5624826 0.5683898 #>  [739,] 0.47676469 0.5691005 0.5981203 0.7467847 0.7963972 0.8341589 0.8434736 #>  [740,] 0.48966513 0.4990395 0.5521895 0.5530759 0.5719127 0.6558082 0.6968951 #>  [741,] 0.35598250 0.3589925 0.4011932 0.4399865 0.4753504 0.4799649 0.4940856 #>  [742,] 0.53345601 0.6361161 0.6983399 0.7287083 0.7332115 0.7439276 0.7640470 #>  [743,] 0.43285234 0.4392924 0.4694298 0.6923151 0.7257262 0.7471913 0.7815560 #>  [744,] 0.75917071 0.9274277 0.9619235 1.0186761 1.1249077 1.1338802 1.1997856 #>  [745,] 0.18152960 0.1957971 0.4235199 0.4559176 0.4899982 0.4927228 0.4956376 #>  [746,] 0.24247399 0.2794189 0.3361951 0.3599093 0.4497131 0.4813826 0.5103667 #>  [747,] 0.27487374 0.3544313 0.4662689 0.4709810 0.5198701 0.5593353 0.5969086 #>  [748,] 0.58975270 0.5971753 0.6269904 0.6317037 0.6452388 0.6468738 0.7276981 #>  [749,] 1.05892816 1.0614190 1.2632755 1.3351365 1.4677852 1.5027885 1.5178777 #>  [750,] 0.07756028 0.6633503 0.7227617 0.7461769 0.7948843 0.8190308 0.8256740 #>  [751,] 0.42113733 0.5167969 0.6325829 0.6507291 0.7481876 0.7510397 0.7519371 #>  [752,] 0.37367448 0.4808764 0.5391860 0.5456561 0.5598049 0.5934364 0.6703414 #>  [753,] 0.40099761 0.4990395 0.5577792 0.5896976 0.6064078 0.6394504 0.6644540 #>  [754,] 0.46771789 0.6184250 0.6729916 0.6744800 0.6911374 0.6933832 0.7777778 #>  [755,] 0.40569085 0.5300789 0.6696169 0.6722027 0.7322407 0.7335610 0.7442075 #>  [756,] 0.41443381 0.5590565 0.6845125 0.7140093 0.7768723 0.8959242 0.9394272 #>  [757,] 0.35033811 0.4288054 0.4609732 0.4639865 0.4650493 0.5045223 0.5076246 #>  [758,] 0.29039540 0.3967127 0.4580609 0.4856274 0.5140156 0.5487522 0.5618277 #>  [759,] 0.31211583 0.3527218 0.3567889 0.3772615 0.4662689 0.5167295 0.5698466 #>  [760,] 0.62550442 0.6909026 0.7741165 0.8507377 0.8936872 0.9179482 0.9680439 #>  [761,] 0.41465725 0.5696764 0.5875087 0.5991461 0.6381773 0.6584482 0.6693524 #>  [762,] 0.36947910 0.4026400 0.5214670 0.6331563 0.6375243 0.6460832 0.6819199 #>  [763,] 0.55902535 0.5642512 0.6070243 0.6134010 0.6202454 0.6298365 0.6591737 #>  [764,] 0.63171146 0.7120582 0.7222590 0.8382929 0.9197002 0.9224501 0.9527348 #>  [765,] 0.28482475 0.5420315 0.5617099 0.6052717 0.6853870 0.7299632 0.7311887 #>  [766,] 0.65551035 0.9535352 0.9965357 1.0980309 1.1960071 1.2025509 1.2148534 #>  [767,] 0.43400236 0.4675819 0.4842653 0.5961777 0.6328655 0.6477358 0.6678797 #>  [768,] 0.19481641 0.4657468 0.4842376 0.5318620 0.5398479 0.5662792 0.5745212 #>  [769,] 0.31344568 0.3323184 0.3610064 0.3744287 0.4181031 0.4403870 0.4496057 #>  [770,] 0.50314434 0.5613393 0.5689064 0.6859004 0.7192989 0.7793857 0.8068408 #>  [771,] 0.28534521 0.3600480 0.5329999 0.5609500 0.5889689 0.6547016 0.6876261 #>  [772,] 0.27993007 0.5241613 0.5713808 0.6379296 0.6644709 0.7505821 0.8189749 #>  [773,] 0.40979050 0.4842376 0.5784525 0.6901354 0.7122162 0.7287667 0.7313732 #>  [774,] 0.59921865 0.6053702 0.6694252 0.6707544 0.6864353 0.7179171 0.7234545 #>  [775,] 0.51484090 0.6636098 0.7302607 0.7741165 0.8068408 0.8289731 0.8312553 #>  [776,] 0.28235641 0.3785802 0.4182906 0.4419846 0.4569047 0.4616058 0.5422474 #>  [777,] 0.36586366 0.4287953 0.4582472 0.4646109 0.5208046 0.5273791 0.5988802 #>  [778,] 0.37218059 0.4898051 0.5306798 0.6041500 0.6466223 0.6708797 0.6839659 #>  [779,] 0.48214399 0.5874592 0.6209966 0.6375057 0.6584236 0.7204023 0.7512784 #>  [780,] 0.36505008 0.4169392 0.4447088 0.4915876 0.5096868 0.7124419 0.7193505 #>  [781,] 0.60736749 0.7086176 0.9980114 1.1146102 1.1655619 1.1810370 1.1938989 #>  [782,] 0.47584683 0.5618759 0.6381547 0.7113617 0.7161329 0.7191747 0.7338988 #>  [783,] 0.36663921 0.5467808 0.5805350 0.5831395 0.6313156 0.6984804 0.7118241 #>  [784,] 0.37220541 0.3799572 0.4375253 0.4935404 0.5065269 0.5097294 0.5341475 #>  [785,] 0.67698706 0.8048461 0.9044901 0.9153062 1.0114771 1.0307976 1.0407293 #>  [786,] 0.36586366 0.5272499 0.5399433 0.5585134 0.5681938 0.5740424 0.5968160 #>  [787,] 0.44425682 0.8653591 0.8810030 0.9005579 0.9856085 0.9914559 1.0387393 #>  [788,] 0.52161182 0.5374572 0.7332386 0.7640470 0.8225009 0.8306533 0.8733624 #>  [789,] 0.40568773 0.4125148 0.5410793 0.5611019 0.5992800 0.6178867 0.6216261 #>  [790,] 0.73700377 0.7845989 0.9180609 0.9727283 1.0219778 1.0267216 1.0971110 #>  [791,] 0.41463031 0.6164263 0.7233970 0.8809378 0.9552388 1.0008277 1.0571906 #>  [792,] 0.44761922 0.4557469 0.4980947 0.6541853 0.6607397 0.6699518 0.6779744 #>  [793,] 0.67045423 0.7690668 0.8538146 0.9099256 1.0059648 1.1866953 1.2090461 #>  [794,] 0.41609369 0.4429319 0.4486017 0.5455288 0.5512099 0.5954613 0.6046723 #>  [795,] 0.23243546 0.4339198 0.4340024 0.4485263 0.5043026 0.5160934 0.5872580 #>  [796,] 0.28482475 0.6920794 0.7034800 0.7347639 0.7909774 0.8299110 0.8319290 #>  [797,] 0.43806377 0.4707085 0.5643793 0.5895720 0.5916572 0.6452580 0.6531233 #>  [798,] 0.45026217 0.5202819 0.5448821 0.5449341 0.5977752 0.6626809 0.6674704 #>  [799,] 0.56346304 0.6195542 0.6571517 0.6827666 0.7063955 0.7313732 0.8958601 #>  [800,] 0.62440475 0.6549188 0.7826283 0.9342707 0.9628701 0.9951750 1.0206394 #>  [801,] 0.44259397 0.6735363 0.7277619 0.7331014 0.8492748 0.8984769 0.9078187 #>  [802,] 0.90073485 0.9814288 1.0417901 1.0878500 1.2428404 1.2474951 1.2625845 #>  [803,] 0.82346281 0.8698409 0.9549817 0.9891219 1.0644350 1.1146102 1.1396168 #>  [804,] 0.19579715 0.2931847 0.3530058 0.3566676 0.4568193 0.5184458 0.5195556 #>  [805,] 0.27513661 0.3518489 0.4116118 0.4630629 0.5124799 0.5137239 0.5480369 #>  [806,] 0.42385771 0.4618116 0.5141889 0.5771732 0.6439948 0.6655123 0.6761360 #>  [807,] 0.47098099 0.5665927 0.5696764 0.5905374 0.6210357 0.6464387 0.7473022 #>  [808,] 0.24217203 0.3184980 0.3871593 0.3890574 0.3891708 0.4275688 0.4436049 #>  [809,] 0.39860692 0.4689321 0.4973907 0.5371710 0.5768874 0.6290449 0.6397325 #>  [810,] 0.43658289 0.4428622 0.4983945 0.5403583 0.5855745 0.6032817 0.6305297 #>  [811,] 0.67045423 1.1869324 1.3218139 1.3975437 1.4672396 1.5096197 1.5305105 #>  [812,] 0.47248092 0.5031443 0.8370645 0.8400062 0.8494418 0.8594912 0.8794185 #>  [813,] 0.46011357 0.7247530 0.7269070 0.7512370 0.7645738 0.7922072 0.8528542 #>  [814,] 0.47362581 0.6167798 0.6671393 0.6710991 0.6799471 0.7262120 0.7659699 #>  [815,] 0.31101054 0.4508828 0.4527396 0.5611753 0.7547701 0.7702928 0.8015995 #>  [816,] 0.77296991 0.8515315 1.1449945 1.1927506 1.2811002 1.3038481 1.3413582 #>  [817,] 0.27229643 0.4319564 0.4774983 0.5340576 0.5403583 0.5404376 0.6082648 #>  [818,] 0.41744766 0.4563054 0.4787092 0.5924145 0.6375057 0.6610497 0.7471865 #>  [819,] 0.38819517 0.4387423 0.5081293 0.5452148 0.5480369 0.5606239 0.5866005 #>  [820,] 0.28766330 0.4283451 0.4540319 0.6213764 0.6387727 0.6809829 0.7195003 #>  [821,] 0.83215800 0.9709082 0.9763775 0.9809248 0.9936921 1.0475912 1.1048669 #>  [822,] 0.78268086 0.9932252 1.0980354 1.1283397 1.2047192 1.2130720 1.2674392 #>  [823,] 1.80929466 1.8893919 1.9329721 2.0512655 2.0517282 2.0721139 2.1287109 #>  [824,] 0.32439959 0.3734730 0.3947866 0.4609321 0.4690760 0.5058113 0.5129201 #>  [825,] 0.61873277 0.6361161 0.6400761 0.6600076 0.6647937 0.6694250 0.7057536 #>  [826,] 0.19424838 0.6729953 0.6796123 0.6930371 0.7130948 0.7163930 0.7286979 #>  [827,] 0.44039920 0.5379288 0.5631611 0.6578746 0.6863897 0.7012983 0.7035933 #>  [828,] 0.59333415 0.7209359 0.7306753 0.7601763 0.7735916 0.7950448 0.7991021 #>  [829,] 0.24567152 0.3063528 0.4497131 0.5042466 0.5197454 0.5220079 0.5634577 #>  [830,] 0.97582821 1.2391119 1.2470136 1.3459758 1.3590492 1.3631720 1.3729217 #>  [831,] 0.31160635 0.3430707 0.3923058 0.4851110 0.5039993 0.5300789 0.6307813 #>  [832,] 0.40568773 0.5364534 0.5435650 0.5519487 0.6103353 0.6381218 0.6552750 #>  [833,] 0.25552242 0.4294652 0.5611753 0.6820155 0.6865319 0.7466587 0.7810148 #>  [834,] 0.52469509 0.6491792 0.6840444 0.7732823 0.8144558 0.8499977 0.8541531 #>  [835,] 0.24247399 0.3228067 0.3559695 0.3737479 0.4010472 0.4387908 0.4543073 #>  [836,] 0.30402498 0.3537788 0.4101414 0.5218686 0.5371929 0.5446160 0.5472306 #>  [837,] 0.42779509 0.5741036 0.5788411 0.6112612 0.6607397 0.6726818 0.7763707 #>  [838,] 0.44103872 0.4920899 0.5017724 0.5503724 0.5889555 0.6436879 0.6694250 #>  [839,] 0.76632461 0.8133975 0.9759469 1.0087753 1.1128409 1.1185581 1.1497573 #>  [840,] 0.36146784 0.4621086 0.4898180 0.5115457 0.5358696 0.5631742 0.5908304 #>  [841,] 0.41487405 0.4502622 0.4658682 0.5441640 0.5731625 0.5988865 0.6914460 #>  [842,] 0.43121939 0.4826395 0.5037481 0.6507202 0.8147120 0.8870629 1.0078075 #>  [843,] 0.58445731 0.7222590 0.7577862 0.7792710 0.8738554 0.9340375 0.9526255 #>  [844,] 0.44470875 0.6385201 0.6960497 0.6961663 0.7835910 0.7866091 0.8384421 #>  [845,] 0.40404174 0.4897307 0.5464271 0.5810122 0.6466309 0.6671353 0.6960210 #>  [846,] 0.90180818 1.3653905 1.3857329 1.4217375 1.4882855 1.6132422 1.6924795 #>  [847,] 0.27458169 0.3491021 0.4199275 0.4606719 0.4617434 0.4713524 0.5338805 #>  [848,] 0.75759460 0.8189146 0.9391760 1.2134207 1.2668459 1.3008309 1.3480183 #>  [849,] 0.70861757 0.7125766 0.7692317 0.7842405 0.7875709 0.8406361 0.8644892 #>  [850,] 0.42845425 0.5223966 0.8698409 1.0428900 1.2501181 1.2709531 1.3154459 #>  [851,] 0.30590078 0.3883015 0.3890574 0.4861107 0.5203573 0.5390073 0.5585134 #>  [852,] 0.65383415 0.8650144 0.8752983 0.9169891 0.9440800 1.0866058 1.1327742 #>  [853,] 0.52707606 0.6941433 0.8417736 0.8808331 0.9023563 0.9787346 1.0224389 #>  [854,] 0.81821544 0.8472202 1.2938839 1.3932673 1.3941717 1.4355963 1.5699636 #>  [855,] 0.60291632 0.6867866 0.7069295 0.7093067 0.7406071 0.7892287 0.8287154 #>  [856,] 0.65676488 0.6660175 0.8171470 0.8271485 0.8773103 0.9360080 1.0033390 #>  [857,] 0.41863335 0.5026707 0.6409466 0.6883781 0.7587634 0.8322600 0.8372582 #>  [858,] 0.33468703 0.3953128 0.4436049 0.4582472 0.4639865 0.5036554 0.5460563 #>  [859,] 0.36519545 0.5317823 0.5337374 0.5714825 0.6008988 0.6724847 0.6786847 #>  [860,] 0.23112638 0.3470762 0.4276004 0.5485018 0.5527330 0.5571655 0.5643793 #>  [861,] 0.24966952 0.7686979 0.7765622 0.7870693 0.8158618 0.8329640 0.8343304 #>  [862,] 0.23595328 0.2767584 0.2932143 0.3931620 0.3969491 0.4810235 0.4858607 #>  [863,] 0.41713601 0.4425940 0.6329047 0.7505821 0.7732478 0.8217801 0.8301675 #>  [864,] 0.64257162 0.6795234 0.7023438 0.7858032 0.7861659 0.8137644 0.8185268 #>  [865,] 0.44197133 0.5044014 0.6187328 0.6217338 0.6315405 0.6392569 0.6562380 #>  [866,] 0.28036224 0.2829959 0.4226618 0.4826395 0.6027349 0.7319019 0.8244292 #>  [867,] 0.28209545 0.4138696 0.4660165 0.5896976 0.6145742 0.6528266 0.7697805 #>  [868,] 0.54069498 0.6663645 0.7247530 0.7439011 0.7497346 0.7864640 0.8561620 #>  [869,] 0.36490314 0.5669402 0.6029163 0.6095596 0.7281755 0.7668626 0.8332532 #>  [870,] 0.37161942 0.3774536 0.4040250 0.4197628 0.4685053 0.4904839 0.5260113 #>  [871,] 0.61796537 0.7285928 0.7336064 0.7857403 0.8158618 0.8377369 0.8671622 #>  [872,] 0.42739736 0.4807708 0.4967779 0.5056090 0.5167295 0.5206453 0.5609500 #>  [873,] 0.35165084 0.5406950 0.5594160 0.7009550 0.7127100 0.7353120 0.7368551 #>  [874,] 0.31344568 0.3953128 0.4414478 0.4506310 0.4842041 0.4996095 0.5042466 #>  [875,] 0.44002569 0.5421494 0.5698466 0.5905374 0.5994636 0.6028812 0.7226762 #>  [876,] 0.70988967 0.8424063 0.8527684 0.9094975 0.9604423 1.1166870 1.2254275 #>  [877,] 0.72278683 0.7326171 0.8295420 1.0958249 1.1048283 1.1098160 1.1239750 #>  [878,] 0.40985302 0.4175239 0.4689321 0.5325677 0.6423317 0.6694821 0.7225749 #>  [879,] 0.24078963 0.3809867 0.4713524 0.5028094 0.5201331 0.5261480 0.5638799 #>  [880,] 0.35919944 0.4029746 0.4491710 0.5175534 0.5448878 0.5776059 0.5867790 #>  [881,] 0.53737750 0.6133634 0.6143286 0.6248042 0.6389689 0.6436361 0.6487615 #>  [882,] 0.49030762 0.5485018 0.5609260 0.5788515 0.5869157 0.6358109 0.6629426 #>  [883,] 0.25862064 0.3177643 0.4020937 0.4346852 0.4385004 0.4686877 0.5431408 #>  [884,] 0.70050852 0.8984231 0.9121860 0.9911837 0.9958333 1.0318333 1.0965091 #>  [885,] 0.31849795 0.3795550 0.3824383 0.4186007 0.4484048 0.4861107 0.4879684 #>  [886,] 0.99458747 1.0672899 1.0746880 1.0858577 1.1541687 1.2291397 1.2365648 #>  [887,] 0.68353095 0.7209359 0.7685517 0.9391760 1.0665888 1.0760218 1.2367422 #>  [888,] 0.20794539 0.4941379 0.6640591 0.6874664 0.7246637 0.7829339 0.7840036 #>  [889,] 0.25021844 0.5476001 0.6201916 0.7102833 0.7127100 0.7245906 0.7251420 #>  [890,] 0.34307072 0.3964940 0.5144611 0.5412533 0.5447846 0.6146040 0.6443941 #>  [891,] 0.41018927 1.2329373 1.2405833 1.2845540 1.3488981 1.4021120 1.4353705 #>  [892,] 0.74596454 0.9023563 1.0993212 1.1212467 1.1477648 1.2179078 1.2449918 #>  [893,] 0.24061352 0.2771811 0.4173396 0.4350018 0.4950868 0.5099229 0.5714825 #>  [894,] 0.51500123 0.5669402 0.7417379 0.7592120 0.7703908 0.7791587 0.7934319 #>  [895,] 0.25146968 0.4186333 0.4657468 0.5482637 0.5640055 0.6118514 0.6590331 #>  [896,] 0.24567152 0.3228067 0.3423167 0.3599093 0.3661315 0.4496057 0.4506310 #>  [897,] 0.28855704 0.3033653 0.4307807 0.4729649 0.5055142 0.5068138 0.5272064 #>  [898,] 0.44092985 0.4617045 0.4669216 0.5201555 0.6199586 0.6940940 0.7254700 #>  [899,] 0.57439020 0.6021226 0.6962272 0.7576918 0.7732478 0.7811220 0.7960769 #>  [900,] 0.53828551 0.5939850 0.6313462 0.6863811 0.8184247 0.8232994 0.8535188 #>  [901,] 0.22147278 0.4585906 0.6364447 0.6729916 0.7150528 0.7358885 0.7402222 #>  [902,] 0.38385147 0.4039002 0.4766086 0.5333078 0.5403808 0.5732097 0.5742830 #>  [903,] 0.90608583 0.9420620 0.9988598 1.0730090 1.1347264 1.1383104 1.1796746 #>  [904,] 0.62908504 0.7473751 0.7925934 0.8252585 0.8460214 0.9112579 1.0219295 #>  [905,] 0.51500123 0.5896388 0.6095596 0.7153208 0.7796438 0.8175388 0.8179662 #>  [906,] 0.46258459 0.5955290 0.6397100 0.7525390 0.7948289 0.8366025 0.8377206 #>  [907,] 0.59781096 0.6969952 0.8377206 0.9176260 0.9720128 0.9751103 0.9931072 #>  [908,] 0.51036456 0.7023438 0.8232055 1.0390236 1.1324021 1.1449918 1.1462896 #>  [909,] 0.18152960 0.2931847 0.3927503 0.4182155 0.4901474 0.5005976 0.5198903 #>  [910,] 0.33702670 0.4726763 0.5530759 0.5577792 0.5776435 0.5786072 0.5955290 #>  [911,] 0.42760037 0.4316440 0.5586554 0.6077285 0.6511595 0.6978762 0.7123274 #>  [912,] 0.26505869 0.3679544 0.6084569 0.6286296 0.6437086 0.6914182 0.6955287 #>  [913,] 0.30651417 0.3785802 0.3938433 0.3967127 0.4485269 0.4546992 0.5056649 #>  [914,] 0.47870920 0.5545774 0.5844573 0.5887998 0.6785683 0.7601763 0.8218413 #>  [915,] 0.40858034 0.4184817 0.4339198 0.4507202 0.4860105 0.5289033 0.5364537 #>  [916,] 1.02584150 1.0828285 1.0885369 1.0971110 1.1042813 1.1449918 1.2919591 #>  [917,] 0.30042296 0.3026130 0.3565618 0.3981614 0.5127400 0.5725146 0.5815952 #>  [918,] 0.52253095 0.5885502 0.6179654 0.8710349 0.8870629 0.8875815 0.9343499 #>  [919,] 0.20099535 0.2749247 0.5325677 0.5490741 0.6531211 0.6658022 0.6814466 #>  [920,] 0.44583849 0.4810978 0.5405619 0.5932476 0.5971753 0.6051186 0.7492998 #>  [921,] 0.34737286 0.3980170 0.4629880 0.6017961 0.6329105 0.6856702 0.6874733 #>  [922,] 0.34532461 0.4628218 0.7361727 0.8439061 0.8747765 0.8862730 0.9033291 #>  [923,] 0.90229047 0.9198689 1.0207799 1.1089972 1.1556626 1.2064820 1.3264570 #>  [924,] 0.72747193 0.8250681 1.0355440 1.0867590 1.1713836 1.1790244 1.1825153 #>  [925,] 0.45797125 0.6504010 0.6578746 0.7710482 0.7800602 0.7811786 0.8214881 #>  [926,] 0.73493260 0.7703350 1.1855629 1.2938839 1.3251974 1.3370503 1.4777104 #>  [927,] 0.63336316 0.7143309 0.7362073 0.7756732 0.8002629 0.8188014 0.8283885 #>  [928,] 0.53331798 0.7658372 0.8411038 0.8435176 0.8557778 0.9534445 1.0531291 #>  [929,] 0.37124830 0.4394802 0.4785945 0.4895479 0.4936070 0.5214670 0.6070243 #>  [930,] 0.15257575 0.2679852 0.4043936 0.5492259 0.5753782 0.5777504 0.6074259 #>  [931,] 0.43850043 0.4710949 0.5225874 0.5979093 0.6274306 0.6376453 0.6383452 #>  [932,] 0.16954488 0.4413771 0.4936070 0.5091485 0.5406976 0.5841054 0.6319375 #>  [933,] 0.60216961 0.8325986 0.9017701 1.0527966 1.0873008 1.1047051 1.1403903 #>  [934,] 0.22391198 0.2359533 0.3311175 0.3573658 0.4699063 0.4768151 0.4989236 #>  [935,] 0.33702670 0.3626109 0.5521895 0.6697020 0.6755909 0.6801242 0.7083752 #>  [936,] 0.25911696 0.3956943 0.3969163 0.4120540 0.4417291 0.4853470 0.4890968 #>  [937,] 0.31687833 0.4004550 0.4102269 0.4143324 0.4438383 0.4654235 0.4780128 #>  [938,] 0.41693924 0.4785945 0.4919001 0.4933270 0.5044109 0.6134010 0.6578698 #>  [939,] 0.42834510 0.5492523 0.5517753 0.6181850 0.7786371 0.8124025 0.8341238 #>  [940,] 0.29773455 0.3026130 0.3996581 0.4525703 0.4910250 0.5470151 0.6076327 #>  [941,] 0.26798522 0.3289737 0.3927503 0.4899982 0.5082989 0.5110617 0.5450175 #>  [942,] 0.41465725 0.6028812 0.6464387 0.6744800 0.7294826 0.7380562 0.7701428 #>  [943,] 0.62090223 0.6667493 0.7408558 0.7975806 0.9164685 0.9282413 0.9811421 #>  [944,] 0.27147990 0.3600480 0.4387423 0.4807708 0.5511082 0.5705962 0.6196778 #>  [945,] 0.45690470 0.4623513 0.6157644 0.6505158 0.6629279 0.6879367 0.7054842 #>  [946,] 0.59092893 0.6203725 0.6325829 0.7002421 0.7046044 0.7097977 0.7455975 #>  [947,] 0.26186702 0.3033653 0.4020937 0.4275672 0.4418920 0.4504325 0.5074709 #>  [948,] 0.20718907 0.2406135 0.3310914 0.4175232 0.4568239 0.4593203 0.4721441 #>  [949,] 0.26016348 0.3491021 0.4898051 0.5266530 0.5286370 0.5490676 0.5525549 #>  [950,] 0.32885595 0.3823851 0.4026400 0.4808764 0.5335939 0.5717612 0.6699496 #>  [951,] 0.27563871 0.3135447 0.3941664 0.4606719 0.5111282 0.5133157 0.5308687 #>  [952,] 0.41139347 0.6275177 0.6621554 0.7701428 0.8022547 0.9038958 0.9156446 #>  [953,] 0.63297974 0.7300008 0.7863523 0.8056914 0.8225283 0.8375461 0.8434820 #>  [954,] 0.33550818 0.3777621 0.4078329 0.4787380 0.5641065 0.5728212 0.6327113 #>  [955,] 0.20621452 0.2904994 0.4141342 0.4246063 0.5261480 0.5445489 0.5538226 #>  [956,] 0.33022011 0.5297885 0.5300319 0.5989279 0.6036421 0.6184250 0.6381773 #>  [957,] 1.25595711 1.3820718 1.4184096 1.4314642 1.4423312 1.4454670 1.4513562 #>  [958,] 0.70988967 0.7227928 1.1853574 1.2638200 1.3025318 1.3112967 1.3491461 #>  [959,] 0.39483025 0.7176363 1.1000722 1.1127286 1.1695611 1.2329311 1.2853193 #>  [960,] 0.48835350 0.6731693 0.6949812 0.8851376 0.9111613 1.3334468 1.4069899 #>  [961,] 1.67451342 1.6954189 1.7142653 1.7439973 1.7604529 1.8083119 1.8190374 #>  [962,] 0.39449617 0.6678797 0.8067734 0.8116096 0.8276085 0.8675993 0.8683853 #>  [963,] 0.07510491 0.3177643 0.4067280 0.4374085 0.4433198 0.4829015 0.5074709 #>  [964,] 0.41713601 0.4663578 0.5743902 0.6859917 0.7331014 0.8889724 0.9072601 #>  [965,] 0.68643527 0.7458120 0.7796270 0.8057398 0.8336802 0.9259180 0.9271132 #>  [966,] 0.64937117 0.6905490 0.6940940 0.7165164 0.7269116 0.7367842 0.7433650 #>  [967,] 0.64608961 0.6848530 0.7327872 0.7858383 0.7858602 0.7861659 0.8051202 #>  [968,] 0.45394745 0.4948362 0.5327251 0.5359659 0.6040635 0.6115310 0.6130825 #>  [969,] 0.69498116 0.8184989 0.9009444 1.2410361 1.4182194 1.4240630 1.4444941 #>  [970,] 0.73182117 0.7594684 0.7962947 0.8048461 0.8302031 0.8398521 0.8507377 #>  [971,] 0.34079246 0.3969163 0.4485269 0.4568257 0.4720437 0.4949334 0.5422474 #>  [972,] 0.47737947 0.5267036 0.7153208 0.7258033 0.7703908 0.8229032 0.8313553 #>  [973,] 0.97586111 1.1553675 1.1633015 1.2981368 1.3989349 1.4274155 1.4616761 #>  [974,] 0.47106644 0.5581422 0.5911198 0.6023233 0.6395887 0.6670735 0.6861339 #>  [975,] 0.46011357 0.4624509 0.6135129 0.6303735 0.7312550 0.7321818 0.7463151 #>  [976,] 0.35377876 0.3690468 0.3999096 0.4523223 0.4553059 0.5127837 0.5352627 #>  [977,] 0.59449443 0.6704927 0.7537130 0.8050565 0.9070311 0.9198027 0.9638986 #>  [978,] 0.65488694 0.6870808 0.8417736 1.1157628 1.1369690 1.2395723 1.2423392 #>  [979,] 0.52580913 0.5485318 0.5887248 0.6367696 0.6721906 0.6844724 0.7525390 #>  [980,] 0.30042296 0.4525703 0.4708138 0.4824120 0.4950389 0.5129997 0.5444178 #>  [981,] 0.33830069 0.4197628 0.5251612 0.5313967 0.5504257 0.5788411 0.5811459 #>  [982,] 0.65872584 0.7162868 0.9482095 1.1136789 1.1884978 1.2158234 1.2514575 #>  [983,] 0.36352311 0.4797284 0.4870527 0.5353525 0.7193505 0.7835910 0.7854638 #>  [984,] 0.26389565 0.2885570 0.4418920 0.4834856 0.5428177 0.5477219 0.5596718 #>  [985,] 0.39694910 0.3974439 0.4180806 0.4259539 0.4464990 0.4753504 0.4768151 #>  [986,] 0.54640309 0.6402515 0.6443941 0.7162868 0.7702600 0.8038900 0.8118915 #>  [987,] 0.16685135 0.5788307 0.5899783 0.6541853 0.6733752 0.6840404 0.7173468 #>  [988,] 0.41129292 0.6224733 0.7481150 0.7684111 0.8063489 0.8077231 0.8176312 #>  [989,] 0.11859239 0.4127442 0.4315884 0.5391860 0.5405018 0.5782477 0.5792774 #>  [990,] 0.52253095 0.6920794 0.6945745 0.7765622 0.7857403 0.9117759 0.9215669 #>  [991,] 0.17723329 0.2149349 0.3526916 0.4083556 0.5080980 0.5556153 0.5571889 #>  [992,] 0.21493492 0.2803670 0.2813427 0.5100292 0.5211797 0.5410793 0.5614509 #>  [993,] 0.46255599 0.4854956 0.5698525 0.6104659 0.6393210 0.6558324 0.6876510 #>  [994,] 0.46046910 0.4724026 0.5359659 0.5743298 0.6365114 0.6624506 0.6724351 #>  [995,] 0.70050852 0.7718764 0.9700215 0.9754953 1.0087753 1.0358064 1.0699789 #>  [996,] 0.30074143 0.3567889 0.3869310 0.4574960 0.4791606 0.5206453 0.5719127 #>  [997,] 0.33726252 0.4335332 0.5364537 0.6021839 0.6084569 0.6822370 0.6934045 #>  [998,] 0.48484559 0.5631611 0.6452580 0.6894359 0.6988109 0.7103865 0.7481150 #>  [999,] 0.40730448 0.4213072 0.4563054 0.5093903 0.5699993 0.6400761 0.6785683 #> [1000,] 0.27229643 0.3588919 0.4004550 0.4088428 0.4122994 0.4279485 0.4555945 #>              [,8]      [,9]     [,10] #>    [1,] 0.8059124 0.8868077 0.9343320 #>    [2,] 0.5775601 0.5891959 0.5986504 #>    [3,] 0.8980142 0.9375722 0.9841824 #>    [4,] 0.7810148 0.7859364 0.8015257 #>    [5,] 0.5742830 0.5989919 0.6191465 #>    [6,] 0.7276199 0.7473483 0.7552360 #>    [7,] 0.6449334 0.6534546 0.6927625 #>    [8,] 0.5563963 0.5807750 0.6107803 #>    [9,] 0.7051125 0.7176691 0.7184379 #>   [10,] 0.9501727 0.9689211 0.9692057 #>   [11,] 0.7791790 0.7796063 0.7796564 #>   [12,] 0.8213952 0.8681768 0.8795834 #>   [13,] 1.4242779 1.4292599 1.4322177 #>   [14,] 0.7919322 0.7990128 0.8566458 #>   [15,] 0.8181447 0.8677651 0.9140326 #>   [16,] 0.7378815 0.7502435 0.7641227 #>   [17,] 0.6471084 0.6499350 0.6738594 #>   [18,] 1.0602323 1.0885369 1.1504075 #>   [19,] 1.5849841 1.6013853 1.6074664 #>   [20,] 0.7748789 0.7824363 0.7966165 #>   [21,] 0.5408570 0.5555997 0.5771976 #>   [22,] 0.8603167 0.8678915 0.8874613 #>   [23,] 0.7013073 0.7357150 0.7669559 #>   [24,] 0.6421061 0.6576633 0.6752556 #>   [25,] 0.7392126 0.7998847 0.8116212 #>   [26,] 0.7178511 0.7202541 0.7208992 #>   [27,] 0.5621750 0.5948343 0.5955058 #>   [28,] 0.7156510 0.7167713 0.7212307 #>   [29,] 0.6226107 0.6235567 0.6421061 #>   [30,] 0.5218355 0.5527330 0.5558903 #>   [31,] 0.6278482 0.6386500 0.6654564 #>   [32,] 0.8566458 0.8622176 0.8734320 #>   [33,] 0.9548272 0.9856851 0.9898578 #>   [34,] 0.9086553 0.9195540 0.9530629 #>   [35,] 0.5195556 0.5437317 0.5829828 #>   [36,] 0.5441844 0.5499801 0.5542626 #>   [37,] 0.5265203 0.5349157 0.5390073 #>   [38,] 0.7066663 0.7097977 0.7665105 #>   [39,] 0.6926448 0.7952127 0.8049787 #>   [40,] 0.7526438 0.7683604 0.7739052 #>   [41,] 0.6016925 0.6175890 0.6534370 #>   [42,] 0.5316061 0.5481625 0.5543071 #>   [43,] 1.0540216 1.0836585 1.1109860 #>   [44,] 0.5568603 0.5735667 0.5745807 #>   [45,] 0.5916355 0.6072961 0.6104659 #>   [46,] 1.4384865 1.4602048 1.4991822 #>   [47,] 0.7099039 0.7360644 0.7414414 #>   [48,] 0.4991560 0.5081447 0.5493938 #>   [49,] 0.6648021 0.6814042 0.6916528 #>   [50,] 0.7393118 0.7399130 0.7722243 #>   [51,] 0.7392254 0.7702165 0.7905010 #>   [52,] 0.6358178 0.6395887 0.6774522 #>   [53,] 0.6854125 0.7026464 0.7279154 #>   [54,] 0.6962933 0.7024421 0.7404088 #>   [55,] 1.2824345 1.2894566 1.3311382 #>   [56,] 0.5405610 0.5704291 0.5735667 #>   [57,] 1.2308003 1.2505731 1.3419802 #>   [58,] 0.7858456 0.7887345 0.8150642 #>   [59,] 0.8385003 0.8719239 0.9624100 #>   [60,] 0.5140156 0.5442450 0.5815952 #>   [61,] 0.5515184 0.6170945 0.6350732 #>   [62,] 0.7376214 0.7943590 0.8062845 #>   [63,] 0.7400611 0.7481524 0.7581405 #>   [64,] 0.9887863 1.0166411 1.0307086 #>   [65,] 0.6805291 0.7319028 0.7860949 #>   [66,] 0.7355779 0.7368755 0.8039298 #>   [67,] 0.9261680 0.9347578 0.9615887 #>   [68,] 0.6478778 0.6503598 0.6722790 #>   [69,] 0.5573514 0.5882574 0.5914164 #>   [70,] 0.6664396 0.7621017 0.7696633 #>   [71,] 0.7114367 0.7129118 0.7416292 #>   [72,] 0.8093535 0.8106133 0.8345961 #>   [73,] 0.9444658 0.9848875 0.9880104 #>   [74,] 0.8522049 0.8680686 0.8707989 #>   [75,] 0.6681706 0.7310674 0.7451409 #>   [76,] 1.2016778 1.2194960 1.2913888 #>   [77,] 0.7772457 0.7804344 0.8020792 #>   [78,] 0.4988260 0.5752162 0.5804311 #>   [79,] 0.7858602 0.8168257 0.8510892 #>   [80,] 1.5403713 1.5742527 1.6165215 #>   [81,] 0.6819199 0.7246964 0.7340767 #>   [82,] 0.8571597 0.8651307 0.8932705 #>   [83,] 0.5289033 0.5361614 0.5378301 #>   [84,] 0.8113923 0.8190144 0.8645477 #>   [85,] 1.3173443 1.3459341 1.3678018 #>   [86,] 0.5800269 0.6064881 0.6156248 #>   [87,] 0.5918389 0.6087093 0.6175890 #>   [88,] 0.5300319 0.5420716 0.5959669 #>   [89,] 0.6386954 0.6832458 0.6966655 #>   [90,] 1.0406491 1.0733257 1.1167851 #>   [91,] 0.6295875 0.6534307 0.6673500 #>   [92,] 1.1237042 1.1336075 1.2034693 #>   [93,] 0.8451673 0.8895287 0.8948640 #>   [94,] 0.5328713 0.5400989 0.5503362 #>   [95,] 1.1209854 1.1394068 1.1399143 #>   [96,] 0.5813127 0.6861072 0.7575570 #>   [97,] 0.5137141 0.5203573 0.5540359 #>   [98,] 0.5840288 0.6117639 0.6272591 #>   [99,] 0.7924606 0.7974191 0.8336551 #>  [100,] 1.2452542 1.3047652 1.3261144 #>  [101,] 0.7122162 0.7538851 0.7931353 #>  [102,] 0.5103413 0.5525259 0.5618277 #>  [103,] 1.0383447 1.0456765 1.0513088 #>  [104,] 0.9515636 0.9631428 0.9781276 #>  [105,] 0.7064478 0.7281443 0.7293583 #>  [106,] 0.8706676 0.9043662 0.9111791 #>  [107,] 0.6753819 0.6966040 0.7070553 #>  [108,] 0.6080280 0.6256096 0.6478308 #>  [109,] 0.9868777 1.0020707 1.0229545 #>  [110,] 0.8366336 0.8969407 0.9114621 #>  [111,] 1.1164197 1.1307881 1.1447128 #>  [112,] 0.9032264 0.9219206 0.9375722 #>  [113,] 0.7776328 0.8098772 0.8206874 #>  [114,] 0.6170587 0.6466364 0.6536921 #>  [115,] 0.8329444 0.8356641 0.9254022 #>  [116,] 0.9830987 1.0251249 1.0291301 #>  [117,] 0.8633291 0.8920707 0.8926324 #>  [118,] 1.7678827 1.8236134 1.8297012 #>  [119,] 0.7123755 0.7216348 0.7260148 #>  [120,] 0.9163852 0.9468682 0.9577993 #>  [121,] 0.5402650 0.5678482 0.5805782 #>  [122,] 0.8013241 0.9027223 0.9169891 #>  [123,] 0.7965936 0.8235394 0.8538701 #>  [124,] 0.7368551 0.7708594 0.8271645 #>  [125,] 0.7408025 0.7450016 0.7583880 #>  [126,] 0.7054842 0.7929885 0.7970958 #>  [127,] 0.7147322 0.7309459 0.7469249 #>  [128,] 0.5965167 0.5966111 0.6018960 #>  [129,] 0.5707602 0.5740424 0.5806874 #>  [130,] 0.9636888 1.0170567 1.0670544 #>  [131,] 1.2115636 1.2198066 1.2464530 #>  [132,] 0.9706206 0.9708018 0.9759469 #>  [133,] 0.8123722 0.8222942 0.8302031 #>  [134,] 0.9839634 1.0169120 1.0550337 #>  [135,] 0.5215293 0.5402650 0.5775601 #>  [136,] 0.5155655 0.5352890 0.5719799 #>  [137,] 0.6827666 0.7677410 0.7915757 #>  [138,] 0.7063955 0.7275405 0.7320285 #>  [139,] 0.6060097 0.6322780 0.6477516 #>  [140,] 0.9809618 1.0536380 1.0566933 #>  [141,] 0.5768476 0.5804311 0.5867660 #>  [142,] 0.8223303 0.8608931 0.9064931 #>  [143,] 0.8027293 0.8454235 0.8529465 #>  [144,] 0.8788308 0.8970614 0.9056986 #>  [145,] 0.9949775 0.9974196 1.0075389 #>  [146,] 0.8062966 0.8186298 0.8299160 #>  [147,] 0.5969108 0.6015356 0.6274103 #>  [148,] 1.6651029 1.7462726 1.8752530 #>  [149,] 0.8377073 0.8441608 0.8694753 #>  [150,] 0.8492347 0.8534718 0.9093647 #>  [151,] 0.5963294 0.6007448 0.6085294 #>  [152,] 1.0255957 1.0281832 1.0716807 #>  [153,] 0.6468845 0.6942793 0.7004626 #>  [154,] 0.5713543 0.6056582 0.6636098 #>  [155,] 0.4884518 0.4918882 0.4991560 #>  [156,] 0.5492508 0.5541846 0.5675767 #>  [157,] 0.8315983 0.8913504 0.8927948 #>  [158,] 0.7441606 0.7480828 0.7568321 #>  [159,] 0.5569790 0.5613986 0.5620986 #>  [160,] 0.8804504 0.8932950 0.8995105 #>  [161,] 0.7522524 0.7708198 0.8132693 #>  [162,] 0.7177715 0.7179171 0.7219801 #>  [163,] 1.0782456 1.2037909 1.2056655 #>  [164,] 0.8083669 0.8132253 0.8960354 #>  [165,] 1.0728799 1.0745517 1.1015611 #>  [166,] 0.9653338 0.9800104 1.0034309 #>  [167,] 0.7441239 0.7707323 0.8558371 #>  [168,] 1.1432333 1.1878302 1.2081912 #>  [169,] 0.8668477 0.8881607 0.9128282 #>  [170,] 0.6969437 0.7373947 0.7377894 #>  [171,] 0.7183003 0.7382115 0.7467744 #>  [172,] 1.3947432 1.4460044 1.4657114 #>  [173,] 1.1056481 1.1590721 1.2172608 #>  [174,] 0.7705822 0.7710507 0.7741235 #>  [175,] 0.6015527 0.6061445 0.6238077 #>  [176,] 0.7325308 0.7512784 0.8007698 #>  [177,] 0.8919162 0.9060083 0.9327082 #>  [178,] 0.8343689 0.9015174 0.9549817 #>  [179,] 0.7600638 0.7750003 0.7857767 #>  [180,] 0.7192569 0.7243883 0.7332500 #>  [181,] 0.5795561 0.5806874 0.6568443 #>  [182,] 0.8635568 0.8693972 0.8809910 #>  [183,] 0.6751226 0.6799093 0.6881946 #>  [184,] 0.7157008 0.7412490 0.7414645 #>  [185,] 0.7402570 0.7565754 0.8239186 #>  [186,] 0.5082552 0.5132118 0.5855745 #>  [187,] 1.3809906 1.4163839 1.4201312 #>  [188,] 1.1283397 1.1551016 1.1776864 #>  [189,] 0.8769669 0.8977898 0.9461300 #>  [190,] 0.8240597 0.8481936 0.8539555 #>  [191,] 0.8323153 0.8435176 0.9275736 #>  [192,] 1.0625336 1.1534059 1.1625756 #>  [193,] 0.6690633 0.7213613 0.7345009 #>  [194,] 1.0788492 1.1162539 1.2135526 #>  [195,] 1.0258133 1.0494248 1.1483445 #>  [196,] 1.3424479 1.4412211 1.4474391 #>  [197,] 1.0555880 1.0780874 1.0817304 #>  [198,] 1.0901863 1.1196797 1.1594372 #>  [199,] 1.0483903 1.0563520 1.0620426 #>  [200,] 1.0345751 1.0923400 1.1453461 #>  [201,] 0.6603713 0.7330639 0.7384455 #>  [202,] 1.0616501 1.0700150 1.1348118 #>  [203,] 0.7439276 0.7669559 0.7905804 #>  [204,] 0.8207165 0.8267311 0.8626651 #>  [205,] 0.8555327 0.8692125 0.8929562 #>  [206,] 1.5919210 1.6298322 1.6565283 #>  [207,] 0.5172776 0.5895720 0.5982449 #>  [208,] 0.9170739 0.9480754 0.9944108 #>  [209,] 1.2526092 1.2533556 1.2777277 #>  [210,] 0.8289731 0.8944422 0.9241514 #>  [211,] 1.0911886 1.1215540 1.1459893 #>  [212,] 0.7033629 0.7082474 0.7119375 #>  [213,] 0.7409098 0.7468219 0.7573211 #>  [214,] 0.4809933 0.4945847 0.5340320 #>  [215,] 0.5988865 0.6311913 0.6490069 #>  [216,] 1.0061967 1.0511086 1.0520745 #>  [217,] 0.7960949 0.8485358 0.8563164 #>  [218,] 0.7923508 0.8146831 0.8151540 #>  [219,] 0.6961535 0.7234019 0.7313908 #>  [220,] 1.3243082 1.4209413 1.4632763 #>  [221,] 0.5975123 0.6620554 0.6697020 #>  [222,] 0.9479218 0.9804111 1.0050758 #>  [223,] 0.7787314 0.8069176 0.8423151 #>  [224,] 0.6283414 0.6298119 0.6458608 #>  [225,] 1.2731531 1.2930039 1.3003183 #>  [226,] 0.7361727 0.7434314 0.7468219 #>  [227,] 1.2150733 1.2317838 1.2329311 #>  [228,] 0.5986742 0.6262385 0.6265718 #>  [229,] 0.5092515 0.5097294 0.5103667 #>  [230,] 0.5775970 0.5879504 0.6123139 #>  [231,] 1.1162325 1.1404739 1.1581414 #>  [232,] 0.7227617 0.7490240 0.7742332 #>  [233,] 0.5566405 0.5725146 0.5821581 #>  [234,] 1.0308250 1.0331859 1.0667433 #>  [235,] 0.8341502 0.8549282 0.8617135 #>  [236,] 0.7681145 0.7920620 0.8871457 #>  [237,] 0.8637274 0.8930154 0.9274277 #>  [238,] 1.4290901 1.4817983 1.4853239 #>  [239,] 0.5487522 0.5693690 0.5930880 #>  [240,] 0.8984231 0.9020378 0.9046858 #>  [241,] 0.7183216 0.7598290 0.7610038 #>  [242,] 0.5390041 0.5657330 0.5842866 #>  [243,] 0.8760533 0.8809378 0.9170404 #>  [244,] 0.6900000 0.7023005 0.7169563 #>  [245,] 1.0013836 1.0371369 1.0513202 #>  [246,] 0.7582110 0.7690994 0.7859364 #>  [247,] 0.7355418 0.7790375 0.7921807 #>  [248,] 0.9247628 0.9547470 1.0253554 #>  [249,] 0.7770224 0.7799644 0.8279911 #>  [250,] 0.6930062 0.7105841 0.7283204 #>  [251,] 0.6955760 0.7030297 0.7134055 #>  [252,] 1.8082649 1.8376684 1.9263571 #>  [253,] 0.6391029 0.6464365 0.6589566 #>  [254,] 0.6627541 0.6678129 0.6994070 #>  [255,] 0.8251310 0.8412036 0.8585403 #>  [256,] 0.8768961 0.8873786 0.9008819 #>  [257,] 0.7180586 0.7718457 0.7719682 #>  [258,] 0.6768229 0.6872141 0.7558750 #>  [259,] 0.5637630 0.5936305 0.6015752 #>  [260,] 0.6386933 0.6427882 0.6531138 #>  [261,] 0.5660962 0.6010895 0.6364447 #>  [262,] 1.1735591 1.1933603 1.2415220 #>  [263,] 0.7487476 0.7966053 0.8034730 #>  [264,] 0.7138210 0.7205242 0.7208420 #>  [265,] 0.7423411 0.7742870 0.7923531 #>  [266,] 0.7779193 0.7907882 0.8128445 #>  [267,] 0.6013924 0.6077285 0.6138454 #>  [268,] 0.8144773 0.8980125 0.9005579 #>  [269,] 0.8426864 0.8542392 0.8606787 #>  [270,] 1.4624040 1.4712778 1.4823273 #>  [271,] 0.8410300 0.8458614 0.8760533 #>  [272,] 0.6910797 0.6965373 0.7146509 #>  [273,] 0.8873786 0.9243532 0.9974937 #>  [274,] 0.6510168 0.6608621 0.6720760 #>  [275,] 0.9190937 0.9220742 0.9538773 #>  [276,] 1.2187789 1.2749848 1.2817443 #>  [277,] 0.4143324 0.4898180 0.5109378 #>  [278,] 0.6871966 0.6905509 0.7156510 #>  [279,] 0.6613567 0.6663331 0.6814042 #>  [280,] 0.9550710 0.9662303 1.0059648 #>  [281,] 1.1426563 1.1448378 1.1504116 #>  [282,] 1.7911637 1.8533863 1.8750700 #>  [283,] 0.5352673 0.5720773 0.5871736 #>  [284,] 0.4833013 0.5088315 0.5627552 #>  [285,] 0.7026464 0.7242788 0.7470190 #>  [286,] 0.9268532 0.9570840 1.0579099 #>  [287,] 0.9771741 1.0550033 1.0655015 #>  [288,] 0.6374374 0.6934746 0.6936820 #>  [289,] 1.0588954 1.0814915 1.1757905 #>  [290,] 0.6776156 0.6799093 0.6837602 #>  [291,] 0.6133335 0.6142123 0.6193202 #>  [292,] 0.5835968 0.5900336 0.5969018 #>  [293,] 0.7005346 0.7134055 0.7229932 #>  [294,] 0.5920494 0.5994045 0.6382516 #>  [295,] 1.3006234 1.3296936 1.3685230 #>  [296,] 0.5960875 0.6166938 0.6197161 #>  [297,] 1.0046440 1.0134342 1.0330499 #>  [298,] 0.6376453 0.6547366 0.7393096 #>  [299,] 0.7990128 0.7991353 0.8129193 #>  [300,] 0.6842904 0.7055637 0.7163206 #>  [301,] 0.5694232 0.5811162 0.5982449 #>  [302,] 0.8118257 0.8859701 0.8949508 #>  [303,] 0.6674976 0.7013073 0.7306753 #>  [304,] 0.7288202 0.7401109 0.7630092 #>  [305,] 0.6714204 0.6841120 0.6891938 #>  [306,] 0.5836466 0.5949558 0.6176877 #>  [307,] 0.5945151 0.6231343 0.6405649 #>  [308,] 0.5610574 0.5803042 0.5932289 #>  [309,] 0.6112612 0.6394537 0.6438113 #>  [310,] 0.6028886 0.6145420 0.6293728 #>  [311,] 0.6145420 0.6208837 0.6294660 #>  [312,] 1.1355820 1.2235490 1.2396294 #>  [313,] 0.7540115 0.7691199 0.7745099 #>  [314,] 0.5774062 0.5831395 0.6099575 #>  [315,] 0.4438383 0.4685053 0.4776945 #>  [316,] 0.9348209 0.9405277 0.9964849 #>  [317,] 0.7373027 0.7412004 0.8254647 #>  [318,] 0.9156081 0.9208277 0.9440800 #>  [319,] 0.9748518 0.9993559 1.0058673 #>  [320,] 0.9712101 1.0218843 1.0479535 #>  [321,] 0.6422542 0.6773705 0.6965084 #>  [322,] 0.6784462 0.7001690 0.7194141 #>  [323,] 0.9138682 0.9267972 0.9627026 #>  [324,] 1.4500368 1.4520388 1.4637100 #>  [325,] 0.7433650 0.7547198 0.7817066 #>  [326,] 0.9212736 0.9545504 1.0536953 #>  [327,] 0.8720209 0.9523813 1.0032501 #>  [328,] 0.9797605 1.0323629 1.0544378 #>  [329,] 1.1205106 1.1333258 1.2226759 #>  [330,] 0.5492128 0.5510464 0.5594460 #>  [331,] 1.5178154 1.5745528 1.5850390 #>  [332,] 0.6132564 0.6492021 0.6773231 #>  [333,] 0.7691959 0.7823899 0.8061181 #>  [334,] 0.6213396 0.6296756 0.6369537 #>  [335,] 0.5489707 0.5809477 0.5882574 #>  [336,] 0.7802380 0.8194999 0.8448678 #>  [337,] 0.5860728 0.5883144 0.6077066 #>  [338,] 0.9328405 0.9465614 0.9521457 #>  [339,] 1.8543116 1.8694288 1.8923475 #>  [340,] 0.9628701 0.9891566 1.0086480 #>  [341,] 0.6103353 0.6120240 0.6421135 #>  [342,] 0.7395467 0.7471865 0.7724949 #>  [343,] 1.4992563 1.6179286 1.6525414 #>  [344,] 1.3281133 1.3620807 1.3748240 #>  [345,] 1.1739502 1.2098995 1.2559106 #>  [346,] 0.7390752 0.7397864 0.7702286 #>  [347,] 0.6024873 0.6065339 0.6199959 #>  [348,] 0.6299579 0.6317363 0.6388909 #>  [349,] 0.7353637 0.7697612 0.7924632 #>  [350,] 0.6548158 0.6738339 0.7380327 #>  [351,] 0.6574814 0.6979188 0.7017956 #>  [352,] 0.9488707 0.9501323 0.9506515 #>  [353,] 0.9088865 0.9295140 0.9388447 #>  [354,] 0.6903611 0.7271112 0.7514094 #>  [355,] 1.3152194 1.3603511 1.4146682 #>  [356,] 0.6216225 0.6613564 0.6872141 #>  [357,] 1.3122002 1.3577201 1.3631425 #>  [358,] 0.5751953 0.5809139 0.6043898 #>  [359,] 0.6386500 0.6576525 0.6665234 #>  [360,] 1.4629077 1.4706712 1.4807790 #>  [361,] 1.8520560 1.8779252 1.8938086 #>  [362,] 0.6377792 0.6461135 0.6873679 #>  [363,] 0.6547366 0.6559865 0.6580561 #>  [364,] 0.7206119 0.7958950 0.8063108 #>  [365,] 0.7291997 0.7676943 0.8004171 #>  [366,] 0.6708887 0.6719379 0.6841554 #>  [367,] 1.1603219 1.1643951 1.1814718 #>  [368,] 0.6381569 0.6403658 0.6460554 #>  [369,] 1.0646470 1.0847236 1.0966924 #>  [370,] 0.7550662 0.7708594 0.7864640 #>  [371,] 0.5333078 0.5893066 0.5902108 #>  [372,] 0.7151619 0.7213660 0.7297827 #>  [373,] 1.0041971 1.0302851 1.0563520 #>  [374,] 0.5472306 0.5566405 0.6176050 #>  [375,] 1.0168016 1.0516036 1.0719958 #>  [376,] 0.9329564 0.9357227 0.9596605 #>  [377,] 0.5934364 0.5994053 0.6166938 #>  [378,] 0.7854638 0.8019586 0.8213952 #>  [379,] 0.5614509 0.5670554 0.5766397 #>  [380,] 0.9017701 0.9193567 1.0023177 #>  [381,] 0.7225749 0.7352015 0.7522827 #>  [382,] 0.8430731 0.8449971 0.9041268 #>  [383,] 0.6890756 0.7191747 0.7578981 #>  [384,] 0.6461209 0.6667070 0.6918864 #>  [385,] 0.7288898 0.7402570 0.7724949 #>  [386,] 0.9932273 1.0149406 1.0319299 #>  [387,] 1.0823106 1.0849930 1.0993212 #>  [388,] 0.7104567 0.7149413 0.7703653 #>  [389,] 1.9318621 1.9330174 2.0319109 #>  [390,] 0.6404231 0.6640963 0.6979188 #>  [391,] 1.1605594 1.1755275 1.1835628 #>  [392,] 0.5333507 0.5827247 0.6020408 #>  [393,] 0.8788308 0.8847623 0.9219866 #>  [394,] 0.6233748 0.6728727 0.6831844 #>  [395,] 0.7587888 0.7713808 0.7961776 #>  [396,] 0.5153631 0.5256756 0.5688585 #>  [397,] 0.9076162 0.9525159 0.9559272 #>  [398,] 0.5992498 0.6003851 0.6116154 #>  [399,] 0.5798567 0.5826832 0.5885790 #>  [400,] 0.8134890 0.8171165 0.8227581 #>  [401,] 0.4699711 0.5265203 0.5861256 #>  [402,] 0.5665622 0.5729993 0.5743114 #>  [403,] 0.7004789 0.7503567 0.7504121 #>  [404,] 1.4787025 1.5938841 1.6019959 #>  [405,] 1.6309979 1.6439320 1.6499609 #>  [406,] 1.2203316 1.3171730 1.3463533 #>  [407,] 1.3177160 1.3198024 1.3248359 #>  [408,] 0.6552517 0.6564712 0.6568909 #>  [409,] 1.3065678 1.3367335 1.3378754 #>  [410,] 0.9152464 0.9466425 0.9664774 #>  [411,] 0.6045473 0.6113531 0.6116859 #>  [412,] 0.8340053 0.8407475 0.8461408 #>  [413,] 0.5945086 0.5988390 0.6064467 #>  [414,] 1.1752404 1.1822033 1.2521524 #>  [415,] 0.7157503 0.7178599 0.7424167 #>  [416,] 0.5539536 0.5709906 0.5751814 #>  [417,] 0.9627678 0.9816498 1.0131884 #>  [418,] 0.5908304 0.5932289 0.6010965 #>  [419,] 0.6826107 0.7676943 0.7880011 #>  [420,] 0.5085830 0.5305814 0.5645209 #>  [421,] 1.2093165 1.2353002 1.3146825 #>  [422,] 0.8217100 0.8388834 0.8670284 #>  [423,] 0.6290449 0.6472395 0.6778517 #>  [424,] 0.6875151 0.7076789 0.7143103 #>  [425,] 0.5228004 0.5284111 0.5774040 #>  [426,] 0.5398479 0.5670554 0.6060217 #>  [427,] 0.6597517 0.6894880 0.6905509 #>  [428,] 0.7952780 0.8273665 0.8293848 #>  [429,] 0.6024168 0.6512812 0.6576525 #>  [430,] 0.6140330 0.6277104 0.6356744 #>  [431,] 1.7917782 1.8175276 1.8215742 #>  [432,] 0.7227286 0.7243779 0.7332386 #>  [433,] 0.4788946 0.4893326 0.5046162 #>  [434,] 0.5886920 0.5953025 0.6036117 #>  [435,] 0.5257977 0.5313629 0.6127085 #>  [436,] 0.8987329 0.9246596 0.9608011 #>  [437,] 0.5820575 0.6378179 0.6447282 #>  [438,] 0.5956477 0.6100082 0.6283499 #>  [439,] 1.1886411 1.2049974 1.2338496 #>  [440,] 1.1618665 1.1649033 1.1961998 #>  [441,] 1.4947216 1.5644691 1.6343923 #>  [442,] 0.7568321 0.7716370 0.7787314 #>  [443,] 0.7478425 0.7583385 0.7951627 #>  [444,] 0.6636128 0.6733829 0.6879929 #>  [445,] 0.5624684 0.5746554 0.5771732 #>  [446,] 0.9932273 0.9955574 0.9986345 #>  [447,] 0.8651107 0.9742932 0.9811421 #>  [448,] 0.5910655 0.5937550 0.6522434 #>  [449,] 1.0186306 1.0571906 1.0665630 #>  [450,] 0.6331382 0.6492021 0.6775207 #>  [451,] 0.5793616 0.5969086 0.6185636 #>  [452,] 1.1196482 1.1295882 1.1543223 #>  [453,] 0.5730872 0.5746889 0.5789747 #>  [454,] 0.7169619 0.7338809 0.7367842 #>  [455,] 0.5899228 0.6166203 0.6299624 #>  [456,] 0.5883144 0.6203840 0.6493544 #>  [457,] 0.8625156 0.8694753 0.9120572 #>  [458,] 0.9213089 0.9285383 0.9489577 #>  [459,] 0.6644540 0.7085000 0.7428318 #>  [460,] 0.7307429 0.7353120 0.8201843 #>  [461,] 0.6614961 0.6637335 0.6800617 #>  [462,] 0.9195783 0.9478743 0.9692897 #>  [463,] 0.8177914 0.8263152 0.8939334 #>  [464,] 1.0186306 1.1423111 1.1735757 #>  [465,] 1.0307976 1.2034693 1.2310479 #>  [466,] 0.6806058 0.6826075 0.7154654 #>  [467,] 0.6759504 0.6779744 0.7287667 #>  [468,] 0.5824909 0.6023233 0.6358178 #>  [469,] 0.5910466 0.5930197 0.6182921 #>  [470,] 0.7982770 0.8059420 0.8369600 #>  [471,] 0.4878566 0.5222462 0.5361046 #>  [472,] 0.7592120 0.8176044 0.8249989 #>  [473,] 0.8720209 0.9447999 1.0213352 #>  [474,] 0.4813826 0.4827630 0.4830591 #>  [475,] 1.3432130 1.3464487 1.3888728 #>  [476,] 0.7800602 0.8192316 0.8382598 #>  [477,] 0.6131169 0.6313175 0.6496738 #>  [478,] 1.0094797 1.0327617 1.0651765 #>  [479,] 0.7229125 0.7573401 0.7823887 #>  [480,] 1.1399975 1.1810060 1.1903609 #>  [481,] 0.6609819 0.7215934 0.7274777 #>  [482,] 0.8460267 0.8666785 0.8701729 #>  [483,] 0.4809933 0.4827630 0.4888534 #>  [484,] 0.9550710 0.9670398 1.0193862 #>  [485,] 0.8820754 0.9018666 0.9209991 #>  [486,] 0.4901692 0.5222462 0.5288019 #>  [487,] 1.1431519 1.1652101 1.1851560 #>  [488,] 0.8840120 0.9206869 0.9263677 #>  [489,] 0.6667493 0.8261604 0.8682759 #>  [490,] 0.5923668 0.5967512 0.6163355 #>  [491,] 0.8529465 0.8617805 0.8885996 #>  [492,] 0.4908292 0.4933199 0.5069190 #>  [493,] 1.0021335 1.0151370 1.0562232 #>  [494,] 0.8907778 0.8961650 0.9198298 #>  [495,] 0.9232887 0.9303427 0.9501656 #>  [496,] 2.0420639 2.0442087 2.1573063 #>  [497,] 0.7616144 0.7781054 0.8062966 #>  [498,] 0.7887546 0.8294863 0.8404699 #>  [499,] 0.6993448 0.7297827 0.7407002 #>  [500,] 0.6820687 0.6916910 0.7129633 #>  [501,] 0.6343919 0.6365114 0.6408197 #>  [502,] 0.8425907 0.8653449 0.9500378 #>  [503,] 0.5447651 0.6084877 0.6347190 #>  [504,] 0.8442929 0.8884278 0.9222247 #>  [505,] 1.3099373 1.3124167 1.3607844 #>  [506,] 0.7273810 0.7354734 0.7381834 #>  [507,] 0.9014913 0.9119886 0.9395711 #>  [508,] 0.8440472 0.8756344 0.8768479 #>  [509,] 1.2962428 1.3534727 1.3610534 #>  [510,] 0.8946561 0.9112579 0.9551525 #>  [511,] 1.0983901 1.1838610 1.2882760 #>  [512,] 0.8548908 0.8806010 0.8852005 #>  [513,] 0.7663831 0.7708198 0.7989903 #>  [514,] 0.9202302 0.9445766 1.0644450 #>  [515,] 0.9851783 1.0816470 1.0838481 #>  [516,] 1.0069834 1.0104754 1.0960076 #>  [517,] 0.5082552 0.5094358 0.5274574 #>  [518,] 1.8472708 1.8622313 1.8894231 #>  [519,] 0.6405659 0.7310007 0.7395746 #>  [520,] 0.9202274 0.9312638 1.0101990 #>  [521,] 0.8606787 0.8679365 0.8768642 #>  [522,] 0.6542033 0.6900000 0.6950999 #>  [523,] 0.7322758 0.7709302 0.7732158 #>  [524,] 0.4683421 0.5085830 0.5287012 #>  [525,] 0.5408734 0.5462750 0.5525615 #>  [526,] 0.7781572 0.8082124 0.8234482 #>  [527,] 0.5225680 0.5925094 0.6105933 #>  [528,] 0.8263606 0.8341309 0.8444423 #>  [529,] 1.2281450 1.2632755 1.2811844 #>  [530,] 1.0654647 1.0783664 1.1223274 #>  [531,] 0.9010801 0.9466077 0.9501727 #>  [532,] 0.8162542 0.8332108 0.8824717 #>  [533,] 0.6671224 0.6738339 0.6832406 #>  [534,] 0.5259613 0.5397278 0.5413206 #>  [535,] 0.9064931 0.9210981 0.9545504 #>  [536,] 0.7183003 0.7249434 0.7411682 #>  [537,] 0.5489944 0.5508537 0.5621215 #>  [538,] 0.7955539 0.8185268 0.8296688 #>  [539,] 0.8756344 0.8829715 0.8981984 #>  [540,] 0.8525165 0.9052362 0.9422232 #>  [541,] 1.6922933 1.7053654 1.7153333 #>  [542,] 1.3277501 1.3329672 1.3366588 #>  [543,] 0.5456107 0.5632034 0.6003851 #>  [544,] 0.6517133 0.7011677 0.7227565 #>  [545,] 0.8943729 0.9439179 0.9485633 #>  [546,] 0.9068405 0.9422232 0.9803632 #>  [547,] 0.5925094 0.6053349 0.6095044 #>  [548,] 0.9440753 0.9662630 1.0343760 #>  [549,] 0.5424109 0.5490071 0.6016925 #>  [550,] 1.0536274 1.0674723 1.1333706 #>  [551,] 0.9056986 0.9960360 1.0210353 #>  [552,] 0.7987166 0.8261212 0.8567570 #>  [553,] 0.4887616 0.5110219 0.5261354 #>  [554,] 1.4510269 1.6053982 1.6114291 #>  [555,] 0.6511755 0.7023005 0.7270694 #>  [556,] 0.7169619 0.7269116 0.7374639 #>  [557,] 0.8188014 0.9230348 0.9374525 #>  [558,] 0.8570611 0.9274727 0.9445766 #>  [559,] 0.7177272 0.7776845 0.8488467 #>  [560,] 1.3740990 1.4281727 1.4904465 #>  [561,] 1.0457515 1.0498698 1.0512886 #>  [562,] 0.5002408 0.5068138 0.5406897 #>  [563,] 0.7169563 0.7405293 0.7449405 #>  [564,] 0.9672168 1.0399724 1.0826760 #>  [565,] 0.4910652 0.5127837 0.5424109 #>  [566,] 1.0309764 1.0634117 1.1531537 #>  [567,] 0.8287154 0.8453021 0.8614176 #>  [568,] 0.6135262 0.6190790 0.6293728 #>  [569,] 0.6169823 0.6194159 0.6655123 #>  [570,] 0.7112997 0.7225728 0.7302554 #>  [571,] 0.5296760 0.6105765 0.6279759 #>  [572,] 0.8504535 0.8540247 0.8585403 #>  [573,] 0.7089613 0.7287083 0.7397733 #>  [574,] 0.6028886 0.6035498 0.6147960 #>  [575,] 1.2623271 1.3610653 1.4510958 #>  [576,] 0.7644381 0.7894255 0.8177420 #>  [577,] 0.6726818 0.6763652 0.7036025 #>  [578,] 0.6425774 0.6522434 0.6631889 #>  [579,] 0.6774408 0.6824968 0.6992544 #>  [580,] 1.0858577 1.1943253 1.2010424 #>  [581,] 0.9344264 0.9508146 0.9633618 #>  [582,] 1.0166995 1.0380197 1.0774277 #>  [583,] 0.8776542 0.8923806 0.9164908 #>  [584,] 0.8194396 0.8344121 0.8476586 #>  [585,] 0.9782307 0.9869561 1.0441055 #>  [586,] 0.8133567 0.8168280 0.8415461 #>  [587,] 0.7576143 0.7823567 0.7991147 #>  [588,] 0.6361424 0.6380360 0.6634201 #>  [589,] 0.7384801 0.7439241 0.7646649 #>  [590,] 0.8385003 0.8653351 0.8806010 #>  [591,] 1.1213040 1.1458923 1.1694355 #>  [592,] 0.6182142 0.6188674 0.6488536 #>  [593,] 0.5970336 0.6007030 0.7062842 #>  [594,] 0.6786676 0.6881946 0.6908943 #>  [595,] 1.3055457 1.3491650 1.3755629 #>  [596,] 0.8439489 0.8487228 0.8516064 #>  [597,] 1.4171601 1.4367480 1.4474931 #>  [598,] 0.6922303 0.6924478 0.6955760 #>  [599,] 0.8487061 0.8900032 0.9210995 #>  [600,] 0.6860524 0.6860870 0.7042371 #>  [601,] 1.0814386 1.1083224 1.2008187 #>  [602,] 0.6773934 0.6974795 0.7334962 #>  [603,] 0.9772943 0.9894535 1.0142760 #>  [604,] 0.4879684 0.4933199 0.4956376 #>  [605,] 0.5374963 0.5638251 0.5750497 #>  [606,] 1.2607233 1.3065500 1.3431281 #>  [607,] 1.0075556 1.0103386 1.0307086 #>  [608,] 0.8541531 0.8554854 0.9094975 #>  [609,] 1.0041631 1.0207799 1.0820811 #>  [610,] 0.6171739 0.6231019 0.6330335 #>  [611,] 0.8970934 0.9088243 0.9290058 #>  [612,] 0.5326643 0.5337556 0.5551554 #>  [613,] 1.0876105 1.1356140 1.1452853 #>  [614,] 0.7857811 0.7907553 0.8160604 #>  [615,] 0.5872580 0.6010965 0.6139215 #>  [616,] 1.3162502 1.3260595 1.3270180 #>  [617,] 0.8756748 0.9022697 0.9416340 #>  [618,] 0.7495521 0.7677847 0.7771203 #>  [619,] 0.5875087 0.6574546 0.6710083 #>  [620,] 0.7866182 0.8007229 0.8033064 #>  [621,] 0.8022547 0.8325986 0.8365715 #>  [622,] 0.5042018 0.5219129 0.5561967 #>  [623,] 0.6676670 0.6791250 0.7001196 #>  [624,] 1.1143814 1.1456062 1.1592352 #>  [625,] 0.6318619 0.6417328 0.6670766 #>  [626,] 1.0092990 1.0993594 1.1710798 #>  [627,] 0.8693972 0.8738301 0.9102605 #>  [628,] 0.6877022 0.7196981 0.7198775 #>  [629,] 0.6118514 0.6421135 0.6579482 #>  [630,] 0.6477358 0.6556587 0.6757551 #>  [631,] 0.5940630 0.6023467 0.6103223 #>  [632,] 0.5137681 0.5174643 0.5414372 #>  [633,] 1.2289003 1.2487062 1.2535435 #>  [634,] 1.3145998 1.3281876 1.4074771 #>  [635,] 0.7835716 0.8313470 0.8422802 #>  [636,] 0.5951701 0.6449406 0.6682400 #>  [637,] 1.2656214 1.3061771 1.3703165 #>  [638,] 0.7338791 0.7663759 0.8019824 #>  [639,] 0.5729993 0.5825958 0.5985047 #>  [640,] 0.5371929 0.5462750 0.5495944 #>  [641,] 0.5841823 0.6115515 0.6501041 #>  [642,] 0.6194603 0.7269070 0.7463151 #>  [643,] 0.7294831 0.7399593 0.7427296 #>  [644,] 0.4859473 0.5271295 0.5339686 #>  [645,] 1.0464334 1.0714325 1.0766811 #>  [646,] 0.9360389 0.9636082 0.9784339 #>  [647,] 0.6899872 0.7316012 0.7371995 #>  [648,] 0.5261215 0.5616806 0.5648400 #>  [649,] 0.5745854 0.5917098 0.6273726 #>  [650,] 0.6596776 0.6733829 0.6856702 #>  [651,] 0.7755287 0.8141730 0.8575116 #>  [652,] 1.0139213 1.0597470 1.0663889 #>  [653,] 0.8328754 0.8499179 0.8544680 #>  [654,] 0.8245151 0.8325591 0.8524776 #>  [655,] 1.3765472 1.3926197 1.4305401 #>  [656,] 0.7597611 0.8103800 0.8232994 #>  [657,] 0.6298365 0.6605305 0.6772529 #>  [658,] 0.5477445 0.6015391 0.6239306 #>  [659,] 0.4433992 0.4874658 0.5331775 #>  [660,] 0.5155655 0.5253889 0.5340320 #>  [661,] 0.6327429 0.6569005 0.6764035 #>  [662,] 0.8161857 0.8292791 0.8475749 #>  [663,] 0.6464671 0.6471084 0.6531117 #>  [664,] 0.7304432 0.7962877 0.8234125 #>  [665,] 1.0442814 1.0498713 1.0761256 #>  [666,] 1.0449185 1.0604449 1.0802002 #>  [667,] 0.5638251 0.5668027 0.5745807 #>  [668,] 1.0171973 1.0192556 1.0193942 #>  [669,] 0.6383899 0.6566976 0.6824877 #>  [670,] 0.8543416 0.8634003 0.8846498 #>  [671,] 0.5637302 0.5931337 0.6040679 #>  [672,] 1.2709679 1.2728839 1.2799974 #>  [673,] 0.7123671 0.7225728 0.7304387 #>  [674,] 0.4857631 0.5581658 0.6009431 #>  [675,] 0.5771008 0.5809477 0.5928308 #>  [676,] 0.6674793 0.6934746 0.7316012 #>  [677,] 0.5734307 0.5879504 0.6043898 #>  [678,] 0.9425360 0.9470844 0.9577771 #>  [679,] 0.9994090 1.0095981 1.0245906 #>  [680,] 0.8982204 0.9222247 0.9319561 #>  [681,] 0.5655754 0.5833142 0.5869470 #>  [682,] 0.8911088 0.8926006 0.9195783 #>  [683,] 0.5296760 0.5563813 0.5795336 #>  [684,] 0.6694252 0.7812451 0.7963972 #>  [685,] 0.8478065 0.8482862 0.8645154 #>  [686,] 0.6305555 0.6381547 0.7461403 #>  [687,] 0.5795090 0.5882774 0.6086311 #>  [688,] 0.5326643 0.5538226 0.5826832 #>  [689,] 1.0722468 1.1809528 1.1959612 #>  [690,] 0.7127783 0.7188234 0.7254060 #>  [691,] 1.0236250 1.0345751 1.0792659 #>  [692,] 0.6868393 0.6998860 0.7409204 #>  [693,] 0.6605305 0.6822288 0.7071317 #>  [694,] 1.1235231 1.1368028 1.1579456 #>  [695,] 0.6116154 0.6122430 0.6238334 #>  [696,] 0.5397357 0.5423890 0.5489944 #>  [697,] 0.5664336 0.6149278 0.6317363 #>  [698,] 0.5570540 0.5754211 0.5875847 #>  [699,] 0.8046442 0.8486656 0.8656021 #>  [700,] 0.5428177 0.5433270 0.5501571 #>  [701,] 1.2147483 1.2593045 1.3064333 #>  [702,] 0.6324504 0.6347726 0.6654564 #>  [703,] 0.5836466 0.5868884 0.5977865 #>  [704,] 0.4699063 0.4982067 0.5237638 #>  [705,] 0.5631586 0.5867225 0.5959669 #>  [706,] 1.3308909 1.3356918 1.3554960 #>  [707,] 0.8135025 0.8757630 0.8822077 #>  [708,] 0.7037126 0.7180586 0.7288202 #>  [709,] 0.7575570 0.7710482 0.8378895 #>  [710,] 0.8101203 0.8493538 0.8505477 #>  [711,] 1.0217064 1.0433137 1.0589282 #>  [712,] 1.2092181 1.3616830 1.3861137 #>  [713,] 0.5216080 0.5399467 0.5564433 #>  [714,] 1.2146432 1.2194992 1.2218686 #>  [715,] 0.7059295 0.7072415 0.7552360 #>  [716,] 0.7638962 0.7761266 0.7929244 #>  [717,] 0.8295420 0.8332532 0.8622437 #>  [718,] 1.0642300 1.0722106 1.0918394 #>  [719,] 0.5317823 0.5344838 0.5540939 #>  [720,] 0.5545381 0.5624137 0.5761797 #>  [721,] 0.7308328 0.7721933 0.7775831 #>  [722,] 0.6884717 0.7125875 0.7710718 #>  [723,] 1.5275467 1.5538280 1.5601171 #>  [724,] 1.0849795 1.1480281 1.1521584 #>  [725,] 0.7452416 0.7751324 0.7781572 #>  [726,] 0.8578101 0.8797333 0.9028720 #>  [727,] 0.5525422 0.5973268 0.5979093 #>  [728,] 0.5407534 0.5623769 0.5931337 #>  [729,] 0.8187902 0.8370617 0.8413379 #>  [730,] 1.0574846 1.0803181 1.1042813 #>  [731,] 0.8847387 0.8855953 0.8962599 #>  [732,] 0.8352368 0.8548908 0.8586171 #>  [733,] 1.4275172 1.4411590 1.5026355 #>  [734,] 0.6338301 0.6404231 0.6708518 #>  [735,] 0.8051202 0.8294863 0.8380904 #>  [736,] 0.4482299 0.5305814 0.5777166 #>  [737,] 1.1735423 1.2168809 1.2739491 #>  [738,] 0.5992498 0.6106341 0.6374374 #>  [739,] 0.8518650 0.8547660 0.8569680 #>  [740,] 0.7652696 0.7828912 0.7960996 #>  [741,] 0.4951638 0.5256756 0.5319760 #>  [742,] 0.7712192 0.7718316 0.7799663 #>  [743,] 0.7819460 0.7853793 0.8499977 #>  [744,] 1.2218457 1.2250658 1.3710403 #>  [745,] 0.5441844 0.5444287 0.5552286 #>  [746,] 0.5265781 0.5627309 0.5655754 #>  [747,] 0.5994636 0.6428411 0.6904537 #>  [748,] 0.7649970 0.8029351 0.8066542 #>  [749,] 1.5625293 1.5745250 1.5979766 #>  [750,] 0.8358564 0.8781470 0.8822077 #>  [751,] 0.8458045 0.8644228 0.9569123 #>  [752,] 0.6846858 0.7017185 0.7522524 #>  [753,] 0.6755909 0.7384455 0.7688912 #>  [754,] 0.7800175 0.8067347 0.8753577 #>  [755,] 0.7496812 0.7531105 0.7998847 #>  [756,] 0.9829315 1.0122701 1.0261075 #>  [757,] 0.5155533 0.5399433 0.5636961 #>  [758,] 0.5812968 0.6081670 0.6140073 #>  [759,] 0.5787542 0.6983469 0.6997383 #>  [760,] 0.9940917 0.9941857 1.0441187 #>  [761,] 0.6839659 0.6862722 0.7012009 #>  [762,] 0.6841554 0.6922303 0.6959957 #>  [763,] 0.6860870 0.6966040 0.7046044 #>  [764,] 0.9658174 1.0038264 1.0476135 #>  [765,] 0.8206874 0.8258940 0.8375461 #>  [766,] 1.2210051 1.2259315 1.2293125 #>  [767,] 0.6820687 0.6891595 0.7055712 #>  [768,] 0.6267066 0.6378199 0.6490029 #>  [769,] 0.4788946 0.4911732 0.5510464 #>  [770,] 0.8150266 0.8640930 0.8746955 #>  [771,] 0.7639051 0.7704916 0.7805117 #>  [772,] 0.8437476 0.8511928 0.8656021 #>  [773,] 0.7340861 0.7410340 0.7578099 #>  [774,] 0.7300008 0.7467744 0.7497106 #>  [775,] 0.8474840 0.8661607 0.9349357 #>  [776,] 0.5693690 0.5916355 0.6200572 #>  [777,] 0.6496738 0.6504010 0.6519038 #>  [778,] 0.7048553 0.7625410 0.7714349 #>  [779,] 0.8680686 0.8738554 0.9191789 #>  [780,] 0.7686832 0.7992704 0.8009717 #>  [781,] 1.2401860 1.2429471 1.3240048 #>  [782,] 0.7419477 0.8351181 0.8561332 #>  [783,] 0.7218410 0.7364300 0.7412385 #>  [784,] 0.5787946 0.5799902 0.5817742 #>  [785,] 1.0508764 1.0609743 1.0887530 #>  [786,] 0.6182142 0.6296609 0.6570845 #>  [787,] 1.0531291 1.0602323 1.0646470 #>  [788,] 0.8746852 0.8911088 0.9025409 #>  [789,] 0.6254158 0.6519419 0.6579869 #>  [790,] 1.1320036 1.1358264 1.1524630 #>  [791,] 1.0940186 1.2133864 1.2681926 #>  [792,] 0.7029586 0.7058362 0.7334962 #>  [793,] 1.2294759 1.2657425 1.3008977 #>  [794,] 0.6424040 0.6473904 0.6534307 #>  [795,] 0.6319375 0.6327712 0.6618794 #>  [796,] 0.8336551 0.8950369 0.8953674 #>  [797,] 0.6662178 0.6863897 0.7264538 #>  [798,] 0.7127209 0.7178599 0.7335821 #>  [799,] 0.9039617 0.9110518 0.9174814 #>  [800,] 1.0291759 1.0702881 1.0967396 #>  [801,] 0.9115159 0.9332891 1.0214112 #>  [802,] 1.2902132 1.3055740 1.3492139 #>  [803,] 1.1649533 1.1657428 1.1739952 #>  [804,] 0.5279865 0.5347073 0.5510628 #>  [805,] 0.5529191 0.5848392 0.6438932 #>  [806,] 0.6811738 0.6822664 0.7010901 #>  [807,] 0.8069485 0.8347630 0.8381761 #>  [808,] 0.4646109 0.4690741 0.5028539 #>  [809,] 0.6531211 0.7175408 0.7243883 #>  [810,] 0.6347190 0.6661234 0.6970826 #>  [811,] 1.5393754 1.6612644 1.7141605 #>  [812,] 0.9136933 0.9159804 0.9681391 #>  [813,] 0.8754429 0.8840120 0.9553983 #>  [814,] 0.8254075 0.8258023 0.8458563 #>  [815,] 0.8033266 0.8560135 0.9212736 #>  [816,] 1.3537884 1.4012957 1.4312648 #>  [817,] 0.6180260 0.6220943 0.6349195 #>  [818,] 0.7716107 0.7792710 0.8103800 #>  [819,] 0.6066404 0.6119764 0.6174084 #>  [820,] 0.7403488 0.7434560 0.7860949 #>  [821,] 1.2153653 1.2186278 1.2390939 #>  [822,] 1.3199170 1.3544360 1.3603518 #>  [823,] 2.1362395 2.1480684 2.2023559 #>  [824,] 0.5141743 0.5416997 0.5485018 #>  [825,] 0.7091213 0.7147432 0.7158804 #>  [826,] 0.8093441 0.8355215 0.8391469 #>  [827,] 0.7312550 0.7658816 0.7684111 #>  [828,] 0.8350802 0.8693432 0.9123756 #>  [829,] 0.5837825 0.6224340 0.6293504 #>  [830,] 1.3963209 1.4210472 1.4759330 #>  [831,] 0.6886999 0.6987242 0.7213433 #>  [832,] 0.6605899 0.6733752 0.6815934 #>  [833,] 0.8167483 0.8404699 0.8433529 #>  [834,] 0.8937163 0.9506240 0.9539657 #>  [835,] 0.4887388 0.5001637 0.5046162 #>  [836,] 0.5503362 0.5789747 0.5816370 #>  [837,] 0.7799061 0.8103286 0.8125999 #>  [838,] 0.6697131 0.6840779 0.7120010 #>  [839,] 1.2001541 1.2205909 1.2230680 #>  [840,] 0.6183656 0.6327712 0.6390645 #>  [841,] 0.7177272 0.7184379 0.7392126 #>  [842,] 1.0302046 1.0398091 1.1032194 #>  [843,] 1.0021776 1.0640791 1.0657750 #>  [844,] 0.9809618 1.0037249 1.0634872 #>  [845,] 0.7033295 0.7289703 0.7560520 #>  [846,] 1.7178090 1.7498991 1.8068860 #>  [847,] 0.5555997 0.5568603 0.5857700 #>  [848,] 1.3518840 1.3610534 1.3627925 #>  [849,] 0.8916944 0.9004730 0.9058615 #>  [850,] 1.3930037 1.4392880 1.4460044 #>  [851,] 0.6085294 0.6166883 0.6253850 #>  [852,] 1.1855629 1.2091334 1.2236705 #>  [853,] 1.0327617 1.0794489 1.1487289 #>  [854,] 1.5863486 1.6616816 1.7397168 #>  [855,] 0.8378752 0.8587839 0.8954289 #>  [856,] 1.0288208 1.0799112 1.0962508 #>  [857,] 0.8436956 0.8511928 0.8551901 #>  [858,] 0.5606962 0.5637630 0.5719799 #>  [859,] 0.6845646 0.7376739 0.7510397 #>  [860,] 0.5761797 0.5784045 0.5811162 #>  [861,] 0.9001007 0.9071838 0.9107937 #>  [862,] 0.5150910 0.5237638 0.5294943 #>  [863,] 0.9052362 0.9187379 0.9342649 #>  [864,] 0.8199862 0.8256740 0.8811329 #>  [865,] 0.6570583 0.6939768 0.6952468 #>  [866,] 0.8365835 0.8711840 0.9062482 #>  [867,] 0.7751191 0.7975806 0.8681182 #>  [868,] 0.8581945 0.9282957 0.9586907 #>  [869,] 0.8434409 0.8735277 0.8778578 #>  [870,] 0.5360740 0.5541846 0.5581658 #>  [871,] 0.9039323 0.9080045 0.9231285 #>  [872,] 0.5740507 0.7161778 0.7297617 #>  [873,] 0.7482350 0.8177420 0.8177914 #>  [874,] 0.5069190 0.5116034 0.5367252 #>  [875,] 0.7820650 0.7897353 0.8171470 #>  [876,] 1.2669839 1.2801000 1.2994109 #>  [877,] 1.1568882 1.2246978 1.2249396 #>  [878,] 0.7548024 0.7562325 0.7750003 #>  [879,] 0.5674287 0.5818538 0.5884604 #>  [880,] 0.5893066 0.5945926 0.5951701 #>  [881,] 0.6794007 0.6809829 0.6960210 #>  [882,] 0.6710482 0.7036025 0.7083752 #>  [883,] 0.5561903 0.5705864 0.5923668 #>  [884,] 1.1000722 1.2098468 1.2304009 #>  [885,] 0.5116034 0.5253889 0.5456261 #>  [886,] 1.3366678 1.3492139 1.3590492 #>  [887,] 1.2397303 1.2493635 1.3037845 #>  [888,] 0.8217048 0.8491610 0.8560074 #>  [889,] 0.7550662 0.7765646 0.7802380 #>  [890,] 0.6722027 0.8113900 0.8270371 #>  [891,] 1.4508955 1.4773237 1.4835700 #>  [892,] 1.2810814 1.2848119 1.2889062 #>  [893,] 0.6064145 0.6507291 0.6734255 #>  [894,] 0.8093363 0.8672518 0.9552388 #>  [895,] 0.6644709 0.7227387 0.7410340 #>  [896,] 0.4729427 0.4901692 0.5092515 #>  [897,] 0.5291721 0.5310791 0.5539173 #>  [898,] 0.7304432 0.7395467 0.7707323 #>  [899,] 0.8273152 0.8479568 0.8578138 #>  [900,] 0.8604709 0.8688761 0.8858304 #>  [901,] 0.7507450 0.7523357 0.7665105 #>  [902,] 0.5886920 0.5997109 0.6446650 #>  [903,] 1.2179078 1.2414338 1.2588157 #>  [904,] 1.0647802 1.0673807 1.1121529 #>  [905,] 0.8194999 0.8331656 0.8486662 #>  [906,] 0.8387180 0.8665296 0.8725962 #>  [907,] 0.9981603 1.0138369 1.0175600 #>  [908,] 1.1495980 1.1601857 1.1975164 #>  [909,] 0.5211039 0.5383639 0.5419063 #>  [910,] 0.6915176 0.7254704 0.7262886 #>  [911,] 0.7157503 0.7264538 0.7367919 #>  [912,] 0.7417195 0.8056028 0.8316892 #>  [913,] 0.5220003 0.5537303 0.5649197 #>  [914,] 0.8484167 0.8486684 0.8790716 #>  [915,] 0.5635029 0.5917011 0.6143213 #>  [916,] 1.3556232 1.4476097 1.4614092 #>  [917,] 0.5864086 0.6216225 0.6257255 #>  [918,] 0.9507369 0.9584287 0.9902471 #>  [919,] 0.6986932 0.7047170 0.7810674 #>  [920,] 0.8376420 0.8507497 0.8980302 #>  [921,] 0.7113617 0.7214507 0.7376186 #>  [922,] 0.9114404 0.9452593 0.9454475 #>  [923,] 1.3924955 1.4023697 1.4107899 #>  [924,] 1.2174468 1.2776154 1.3025068 #>  [925,] 0.8391413 0.8973108 0.9181686 #>  [926,] 1.4830699 1.5090212 1.5331395 #>  [927,] 0.8328754 0.8340967 0.8769669 #>  [928,] 1.0599798 1.0614190 1.0687632 #>  [929,] 0.6757551 0.7067874 0.7718457 #>  [930,] 0.6128342 0.6197959 0.6217350 #>  [931,] 0.6449269 0.6467511 0.6543232 #>  [932,] 0.6566572 0.6710991 0.6860524 #>  [933,] 1.1550701 1.2150879 1.2614023 #>  [934,] 0.5104165 0.5399467 0.5487179 #>  [935,] 0.7392254 0.7804381 0.7909508 #>  [936,] 0.6090324 0.6103032 0.6200572 #>  [937,] 0.5132118 0.5287012 0.5340576 #>  [938,] 0.6690633 0.6778206 0.7002642 #>  [939,] 0.8416406 0.8566819 0.8602392 #>  [940,] 0.6810115 0.6827445 0.6873290 #>  [941,] 0.5689599 0.5840288 0.5966373 #>  [942,] 0.7784869 0.7898662 0.8026311 #>  [943,] 0.9914559 1.0182915 1.0464137 #>  [944,] 0.6438113 0.6535900 0.6600545 #>  [945,] 0.7303067 0.7587870 0.7711895 #>  [946,] 0.7506492 0.7759579 0.7904589 #>  [947,] 0.5125312 0.5308687 0.5458267 #>  [948,] 0.5448374 0.5525422 0.5551389 #>  [949,] 0.5674287 0.6267761 0.6514656 #>  [950,] 0.6923151 0.7000163 0.7498396 #>  [951,] 0.5405330 0.5490676 0.5561903 #>  [952,] 0.9193567 0.9581708 0.9988739 #>  [953,] 0.8570907 0.8588354 0.8602392 #>  [954,] 0.6344449 0.6388909 0.6762379 #>  [955,] 0.5682801 0.5822417 0.5857700 #>  [956,] 0.6543232 0.6710083 0.7005815 #>  [957,] 1.4620042 1.5375033 1.5470597 #>  [958,] 1.3595516 1.4182778 1.4247606 #>  [959,] 1.2877378 1.3046910 1.3111170 #>  [960,] 1.4110661 1.5077455 1.5755298 #>  [961,] 1.8581882 1.8614803 1.8717057 #>  [962,] 0.8725050 0.8796014 0.8874613 #>  [963,] 0.5152591 0.5866983 0.5947074 #>  [964,] 0.9675160 1.0122661 1.0388263 #>  [965,] 0.9356635 0.9636888 1.0277348 #>  [966,] 0.7999083 0.8024495 0.8460153 #>  [967,] 0.8665210 0.8722083 0.9755049 #>  [968,] 0.6238334 0.6486798 0.6750074 #>  [969,] 1.4818750 1.4969822 1.5033114 #>  [970,] 0.8768479 0.9362471 0.9534721 #>  [971,] 0.5525615 0.5715858 0.6140073 #>  [972,] 0.8565041 0.9063133 0.9112045 #>  [973,] 1.4821901 1.5160074 1.5488018 #>  [974,] 0.7064478 0.7185376 0.8063819 #>  [975,] 0.7611404 0.7953488 0.8077231 #>  [976,] 0.5570540 0.5582105 0.5774040 #>  [977,] 0.9679292 0.9829424 0.9862557 #>  [978,] 1.2653571 1.2823082 1.2929181 #>  [979,] 0.7547198 0.7624093 0.7900366 #>  [980,] 0.5584398 0.6300681 0.6629908 #>  [981,] 0.5911198 0.5932687 0.6000353 #>  [982,] 1.2535295 1.2581249 1.2814047 #>  [983,] 0.7912613 0.8691061 0.9393304 #>  [984,] 0.6007030 0.6037517 0.6160763 #>  [985,] 0.5082424 0.5103413 0.5116652 #>  [986,] 0.8216975 0.8741700 0.8988547 #>  [987,] 0.7544749 0.8161857 0.8647989 #>  [988,] 0.8426864 0.8773801 0.9706898 #>  [989,] 0.6045473 0.6347726 0.6521737 #>  [990,] 1.0940208 1.1234142 1.1537429 #>  [991,] 0.5939646 0.6428562 0.6579869 #>  [992,] 0.5922961 0.6105765 0.6120240 #>  [993,] 0.7043947 0.7161877 0.7164152 #>  [994,] 0.6815169 0.6875907 0.7090799 #>  [995,] 1.2046982 1.2372266 1.2559571 #>  [996,] 0.6062226 0.6117811 0.6180281 #>  [997,] 0.6955801 0.7178681 0.7205692 #>  [998,] 0.7491237 0.8222442 0.8593639 #>  [999,] 0.6863811 0.7410095 0.7989829 #> [1000,] 0.4683421 0.4799244 0.4983945 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure CyTOF panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) CyTOF panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   rsplit_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `rsplit_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a color palette using tidytof. — tof_generate_palette","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"function generates color palette based color palette author's favorite pokemon.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"","code":"tof_generate_palette(num_colors)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"num_colors integer specifying number colors like generate.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"character vector hex codes specifying colors palette.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"","code":"tof_generate_palette(num_colors = 5L) #> [1] \"#D86020\" \"#28A8B8\" \"#F89040\" \"#D0D0D0\" \"#903000\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 0.003162278"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample   cd45 pstat5   cd34 outcome class  multiclass event time_to_event #>    <chr>   <dbl>  <dbl>  <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 60     0.287   0.446 0.572     3.39 class2 class2         1         12.5  #>  2 40     0.810   0.335 0.0882    2.82 class2 class2         1          9.85 #>  3 56     0.513   0.414 0.639     3.42 class2 class2         1          9.72 #>  4 30     0.400   0.651 0.953     3.83 class1 class1         0          9.00 #>  5 67     0.684   0.897 0.127     4.78 class1 class3         1          8.37 #>  6 80     0.0830  0.554 0.900     2.10 class2 class3         1          7.63 #>  7 69     0.846   0.147 0.828     3.48 class2 class3         1         10.1  #>  8 12     0.539   0.674 0.674     6.22 class1 class1         0         10.3  #>  9 10     0.214   0.218 0.455     2.00 class2 class1         0          8.39 #> 10 57     0.756   0.654 0.611     3.96 class1 class2         1          9.09 #> # ℹ 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>               cd45      pstat5         cd34 #>   [1,]  1.28870999 -0.27898585 -0.818953374 #>   [2,]  0.04174575  0.01684689 -1.620095038 #>   [3,] -1.50063491  0.69780814  0.094343926 #>   [4,] -1.22020348 -1.73325561  0.039547005 #>   [5,]  0.18727212  0.76156416  0.820374493 #>   [6,] -0.02205691 -0.76980293  1.138985929 #>   [7,] -0.23864435 -1.57643310  0.517636615 #>   [8,] -1.42599459  0.99257802 -0.175047634 #>   [9,] -1.69128920  0.45097870  1.079898740 #>  [10,]  1.17695956  0.12472243  0.052834414 #>  [11,] -0.29432083  0.53975862 -0.651012139 #>  [12,] -1.26055554 -0.71330514  0.369326863 #>  [13,]  1.10211056 -0.09671901 -1.440854100 #>  [14,] -0.58800112  0.95808395 -1.426915731 #>  [15,]  1.17126429 -0.66432117  0.690762750 #>  [16,] -0.74642980 -0.28784688  1.202457375 #>  [17,] -0.24622914  0.29851415 -0.669415297 #>  [18,] -0.55682819 -1.66223823 -0.874200940 #>  [19,] -0.02143726 -0.36871605  1.307628172 #>  [20,] -0.89399104 -0.28706490  1.394072793 #>  [21,] -0.76813239 -0.62700117 -0.044160748 #>  [22,] -0.20822117 -0.06991997  1.534198986 #>  [23,]  0.49154968  1.20890839  1.264854561 #>  [24,]  1.26951240  0.52801068 -0.771885335 #>  [25,]  0.03292761 -1.35650171 -1.356407906 #>  [26,]  1.39650034 -0.09785965 -1.059697318 #>  [27,]  0.91538336  0.89863455  1.043981895 #>  [28,]  0.73826332 -0.03436657  0.774197049 #>  [29,] -1.03743324 -1.22159954  0.661244173 #>  [30,]  0.64271548 -1.04250351 -1.372652302 #>  [31,]  0.88810157 -1.34769236  0.143771431 #>  [32,]  1.01029931  1.12590092 -1.438009707 #>  [33,]  0.56097199  1.05414205 -0.158635517 #>  [34,]  1.33130918  1.24000360 -0.425096847 #>  [35,] -0.84799451  1.28859147  0.728472339 #>  [36,]  1.47084986 -0.78495726  0.897877440 #>  [37,] -1.66736671  0.45401659 -1.626892768 #>  [38,] -0.03556914  1.07084099 -0.435685646 #>  [39,] -1.37148784 -1.65682456  1.351483394 #>  [40,]  1.30536013  0.59887050 -1.215227688 #>  [41,] -1.22793843  1.34989144 -1.201722742 #>  [42,]  0.48230948 -0.27440484 -1.012007907 #>  [43,]  1.64577661  1.74023246 -0.628952281 #>  [44,] -0.42298620 -0.03149390 -1.069058866 #>  [45,] -0.06189066  0.12185358 -0.851334712 #>  [46,] -0.49617689 -1.63146171  0.326800354 #>  [47,]  0.07418383 -0.35259312  1.411239393 #>  [48,] -1.25647168 -0.15941209  0.367120145 #>  [49,] -0.70432304 -0.65123809  1.091217009 #>  [50,]  1.62222920 -0.46267284  0.072750029 #>  [51,]  0.85296246  1.66530644 -1.069098910 #>  [52,]  0.04518573  0.59904798 -0.680702532 #>  [53,]  1.00778015 -0.59047443 -0.017342590 #>  [54,] -1.61102730  0.96361370 -1.626705571 #>  [55,]  1.35456386 -0.19376075  1.246307261 #>  [56,]  0.15608207  1.40504257 -0.647342894 #>  [57,] -0.30411561  0.91338396  1.152745872 #>  [58,]  1.46267683 -1.78030134 -1.176678862 #>  [59,] -1.32063865  1.34899730 -0.994178551 #>  [60,] -0.39391128  0.70976253  0.773796151 #>  [61,]  0.92826471 -0.04039129  1.259999775 #>  [62,]  1.22994595  0.37193157  0.481766419 #>  [63,] -0.98635473 -1.55664936  1.019373749 #>  [64,] -0.91728565  1.13015544  0.369930102 #>  [65,]  0.04457882 -1.00694338 -0.336285159 #>  [66,] -0.51065444 -0.49190550 -1.188764990 #>  [67,] -0.37664666  1.59225658  0.002115106 #>  [68,]  1.22603082 -1.46165229 -1.099310125 #>  [69,]  1.33833138 -1.13685373  1.064634379 #>  [70,] -1.49975302 -1.62605846 -1.134903147 #>  [71,] -0.66811179  1.50997410  0.974889128 #>  [72,] -0.25500114 -0.95025276 -0.010574147 #>  [73,]  1.28323174  0.35441127  1.449564131 #>  [74,] -1.22084226 -0.34538203 -0.528043256 #>  [75,] -0.53595474 -1.85671611  1.114214747 #>  [76,] -0.96486292 -0.82279585 -0.480847186 #>  [77,]  1.33928651  0.66564166  1.395090024 #>  [78,] -0.88903866 -0.49661932  0.171606631 #>  [79,] -1.52750161 -0.77343048 -0.813557111 #>  [80,] -1.20946169  1.15659669  0.939812631 #>  [81,]  0.41560912  1.68089510  0.718524991 #>  [82,]  0.88596711 -0.62320358  1.591480076 #>  [83,]  1.47599929  1.73162719  1.472989567 #>  [84,] -1.46003449 -1.53482620  0.102921851 #>  [85,] -1.08895689 -0.10789284 -0.783799234 #>  [86,]  0.45565439  0.04470999 -1.431436324 #>  [87,] -0.44513951  0.24798873  0.885093783 #>  [88,] -0.36808969  1.16937712 -1.409444397 #>  [89,]  0.28634673 -0.05834757 -1.606040332 #>  [90,] -0.69961005  0.92199998 -1.427353170 #>  [91,]  1.14524423 -0.44093504 -0.637600208 #>  [92,]  1.22606063 -0.93972153 -1.316920794 #>  [93,] -0.73988128  1.21145388  1.496539758 #>  [94,]  1.57878753 -1.16223016 -0.526998539 #>  [95,]  1.00450229 -0.24020649  0.981781497 #>  [96,] -1.38690537  1.70607144  0.789324355 #>  [97,]  0.33166727  1.36464244  0.147977320 #>  [98,]  0.38729389 -0.35260268  0.916540959 #>  [99,]  1.06201724 -0.60808133 -0.772003646 #> [100,] -1.17798865 -0.54621376  1.163756681"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  2.21958414  2.94004129  4.45334261  4.16876157  5.05346042  2.08070621 #>   [7]  6.17902214  2.22861853  3.59217907  5.04980232  1.61646570  3.49879018 #>  [13]  0.09669632  2.37424278  4.76615642  3.69035026  5.72751344  4.05816580 #>  [19]  4.82068586  5.43275002  2.23910993  3.95600599  1.18480343  6.00437364 #>  [25]  2.01140436  2.19286630  1.99643675  3.84903827 -0.10502788  1.65506972 #>  [31]  2.90870608  1.26664979  1.04385612  4.12128453  2.16485785  6.21853659 #>  [37]  0.85648080  2.16893644  4.84275659  2.92635135  3.07436273  2.49842722 #>  [43]  3.94281202  3.67174228  5.93265931  3.65051641  2.89063005  1.98523641 #>  [49]  1.77970253  4.67582115  6.34523155  6.43961917  5.97660655  5.91476530 #>  [55]  0.18241922  2.92400095  2.78000242  2.11664373  2.91807024  5.59839844 #>  [61]  6.08095223  4.30553580  3.97014301  1.95506987  1.56761017  4.53195290 #>  [67]  7.13930401  0.87513673  1.80418533  3.21945414  2.29414091  2.93848913 #>  [73]  0.38293396  3.27447155  2.49096864  2.60249400  1.64893815  2.85751421 #>  [79]  6.02949067  3.07170660  0.26063529  4.40555031  1.26841802  3.10442199 #>  [85]  3.67590709  3.76281871 -0.53913255  1.85881381  2.49588976  3.69739693 #>  [91]  1.37546573  3.04382640  4.75501869  2.68829044  5.30247586  4.12475343 #>  [97]  6.68874686  3.01651899  3.81348090  0.72390355"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # ℹ 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode CyTOF measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing CyTOF data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"      ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction  )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>       cd45    cd38    cd34    cd19 cluster_id .flowsom_metacluster #>      <dbl>   <dbl>   <dbl>   <dbl> <chr>      <chr>                #>  1 -0.0322  0.826  -1.46   -1.15   w          3                    #>  2  0.851   0.738  -0.405  -0.0231 t          3                    #>  3  0.375   0.208  -1.48   -0.401  q          3                    #>  4 -1.26   -0.384  -0.311  -0.202  k          3                    #>  5  0.108  -0.632   0.648   0.503  q          3                    #>  6  0.677   0.117   0.637  -0.535  j          6                    #>  7  0.407   0.775  -0.255  -0.365  f          5                    #>  8 -0.177  -0.0320 -1.76    0.0387 a          1                    #>  9  0.642  -1.67    0.318  -0.559  a          1                    #> 10  0.286  -0.0491  0.0361 -0.767  x          6                    #> # ℹ 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>       cd45    cd38    cd34    cd19 cluster_id .phenograph_metacluster #>      <dbl>   <dbl>   <dbl>   <dbl> <chr>      <chr>                   #>  1 -0.0322  0.826  -1.46   -1.15   w          1                       #>  2  0.851   0.738  -0.405  -0.0231 t          1                       #>  3  0.375   0.208  -1.48   -0.401  q          1                       #>  4 -1.26   -0.384  -0.311  -0.202  k          4                       #>  5  0.108  -0.632   0.648   0.503  q          1                       #>  6  0.677   0.117   0.637  -0.535  j          5                       #>  7  0.407   0.775  -0.255  -0.365  f          4                       #>  8 -0.177  -0.0320 -1.76    0.0387 a          3                       #>  9  0.642  -1.67    0.318  -0.559  a          3                       #> 10  0.286  -0.0491  0.0361 -0.767  x          5                       #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 3                      #>  2 3                      #>  3 1                      #>  4 8                      #>  5 3                      #>  6 5                      #>  7 7                      #>  8 9                      #>  9 9                      #> 10 6                      #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 5                    #>  2 2                    #>  3 5                    #>  4 2                    #>  5 2                    #>  6 3                    #>  7 2                    #>  8 1                    #>  9 2                    #> 10 4                    #> # ℹ 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 3                    #>  2 2                    #>  3 3                    #>  4 3                    #>  5 3                    #>  6 4                    #>  7 2                    #>  8 1                    #>  9 2                    #> 10 3                    #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 6                         #>  2 1                         #>  3 7                         #>  4 6                         #>  5 1                         #>  6 8                         #>  7 6                         #>  8 3                         #>  9 1                         #> 10 8                         #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 6                   #>  2 10                  #>  3 6                   #>  4 3                   #>  5 6                   #>  6 10                  #>  7 4                   #>  8 6                   #>  9 8                   #> 10 1                   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 2                       #>  2 1                       #>  3 1                       #>  4 4                       #>  5 3                       #>  6 1                       #>  7 1                       #>  8 4                       #>  9 1                       #> 10 2                       #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   compute_embedding_cols = where(tof_is_numeric),   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   embedding_args = list(),   theme = ggplot2::theme_bw(),   ...,   method = c(\"ggplot2\", \"scattermore\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `embedding_args`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. compute_embedding_cols Unquoted column names indicating columns 'tof_tibble' use computing embeddings method specified `embedding_method`. Defaults numeric columns 'tof_tibble'. Supports tidyselect helpers. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (passed tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". embedding_args Optional additional arguments pass tof_reduce_dimensions. example, `method = \"tsne\"`, might include `num_comp`, `perplexity`, `theta`. theme ggplot2 theme apply scatterplot. Defaults theme_bw. ... Optional additional arguments pass tof_plot_cells_scatter. method string indicating plotting engine used. Valid values include \"ggplot2\" (default) \"scattermore\" (recommended 100K cells plotted). Note method = \"scattermore\" requires scattermore package installed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         compute_embedding_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cluster_id,         embedding_method = \"tsne\",         compute_embedding_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments pass ggraph","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"function makes scatterplots single-cell data using user-specified x- y-axes. Additionally, point scatterplot can colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"","code":"tof_plot_cells_scatter(   tof_tibble,   x_col,   y_col,   color_col,   facet_cols,   theme = ggplot2::theme_bw(),   ...,   method = c(\"ggplot2\", \"scattermore\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"tof_tibble `tof_tbl` `tibble`. x_col unquoted column name specifying column `tof_tibble` used x-axis. y_col unquoted column name specifying column `tof_tibble` used y-axis. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. theme ggplot2 theme apply scatterplot. Defaults theme_bw. ... Optional additional arguments pass geom_point method = \"ggplot2\" geom_scattermore method = \"scattermore\". method string indicating plotting engine used. Valid values include \"ggplot2\" (default) \"scattermore\" (recommended 100K cells plotted). Note method = \"scattermore\" requires scattermore package installed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"tof_plot_cluster_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_cluster_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"tof_plot_cluster_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... currently used.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )   # use the same layout as the plot above to color the same  # tree using a different marker  layout_cd45 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"tof_plot_cluster_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )   attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"   # create the volcano plot  volcano <- tof_plot_cluster_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(        tof_tibble = sim_data,        cluster_col = cluster_id,        group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1  2.63 #>  2  5.27 #>  3  3.93 #>  4  4.01 #>  5  3.71 #>  6  5.58 #>  7  4.02 #>  8  1.80 #>  9  2.26 #> 10  1.79 #> 11  6.06 #> 12  1.88 #> 13  2.21 #> 14  4.83 #> 15  2.44 #> 16  1.18 #> 17  2.64 #> 18  3.64 #> 19  5.45 #> 20  4.24"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts, reads, fluorescence intensity units directly measured cytometer using user-provided function. can used perform standard pre-processing steps (.e. arcsinh transformation) cytometry data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurements aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read CyTOF data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing CyTOF data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents CyTOF measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads CyTOF data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read CyTOF data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction single-cell data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>      cd45    cd38    cd34   cd19   .pc1    .pc2    .pc3   .pc4 #>     <dbl>   <dbl>   <dbl>  <dbl>  <dbl>   <dbl>   <dbl>  <dbl> #>  1  1.52  -0.114   1.80   -0.814 -1.91   0.349  -1.34    0.305 #>  2  0.708  0.436  -0.557   2.93  -0.801 -1.35    2.18    0.210 #>  3  1.85  -0.255   1.86   -0.599 -2.24   0.359  -1.18    0.470 #>  4  0.880 -0.0502 -0.140  -0.399 -0.398 -0.0388 -0.389   0.934 #>  5  0.472 -0.525   2.00    0.619 -1.73   0.613  -0.0652 -0.738 #>  6  0.512 -0.221  -0.0399  0.295 -0.404  0.0342  0.208   0.514 #>  7  1.81   0.556   0.0594  0.283 -1.24  -0.907  -0.197   1.13  #>  8 -2.46  -0.528   0.384   1.22   1.06   0.790   1.17   -1.83  #>  9 -1.43   1.05    0.470  -1.32   1.12  -0.162  -1.43   -0.989 #> 10 -1.90  -0.148  -0.309   1.93   0.970  0.0277  1.76   -1.29  #> # ℹ 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>      cd45    cd38    cd34   cd19 .tsne_1 .tsne_2 #>     <dbl>   <dbl>   <dbl>  <dbl>   <dbl>   <dbl> #>  1  1.52  -0.114   1.80   -0.814   2.78  -3.95   #>  2  0.708  0.436  -0.557   2.93    3.79  -0.0870 #>  3  1.85  -0.255   1.86   -0.599   2.84  -3.98   #>  4  0.880 -0.0502 -0.140  -0.399   0.602  2.26   #>  5  0.472 -0.525   2.00    0.619   1.48  -3.15   #>  6  0.512 -0.221  -0.0399  0.295   1.15   1.41   #>  7  1.81   0.556   0.0594  0.283   1.10   0.511  #>  8 -2.46  -0.528   0.384   1.22   -2.21  -2.75   #>  9 -1.43   1.05    0.470  -1.32   -3.49   1.21   #> 10 -1.90  -0.148  -0.309   1.93   -1.99  -2.93   #> # ℹ 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>      cd45    cd38    cd34   cd19 .umap1 .umap2 #>     <dbl>   <dbl>   <dbl>  <dbl>  <dbl>  <dbl> #>  1  1.52  -0.114   1.80   -0.814 -2.51   0.723 #>  2  0.708  0.436  -0.557   2.93  -0.576 -2.48  #>  3  1.85  -0.255   1.86   -0.599 -2.35   0.610 #>  4  0.880 -0.0502 -0.140  -0.399 -2.39   2.09  #>  5  0.472 -0.525   2.00    0.619 -1.74  -0.508 #>  6  0.512 -0.221  -0.0399  0.295 -2.46   2.43  #>  7  1.81   0.556   0.0594  0.283  0.353  1.30  #>  8 -2.46  -0.528   0.384   1.22   1.38  -2.78  #>  9 -1.43   1.05    0.470  -1.32   2.90   0.405 #> 10 -1.90  -0.148  -0.309   1.93   1.13  -2.57  #> # ℹ 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on single-cell data — tof_reduce_pca","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>       .pc1   .pc2 #>      <dbl>  <dbl> #>  1  1.21   -0.269 #>  2 -1.96   -0.874 #>  3 -0.111   0.906 #>  4  0.0885  0.188 #>  5  0.0363 -0.434 #>  6  1.05   -1.92  #>  7 -0.983  -0.101 #>  8 -0.564  -0.831 #>  9  0.117   0.149 #> 10  0.735   0.977 #> # ℹ 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>         PC1    PC2     PC3     PC4 #>       <dbl>  <dbl>   <dbl>   <dbl> #>  1  0.721   -0.454  1.19    1.72   #>  2  0.201   -1.32   0.496   0.851  #>  3 -0.115   -1.05  -0.493  -0.593  #>  4 -0.180   -1.44  -1.51    1.21   #>  5  0.418    0.418 -0.123   0.235  #>  6  0.754    0.289 -0.0607  0.115  #>  7  1.16     0.329  1.51   -0.0850 #>  8  0.237    0.251  2.53   -0.286  #>  9 -1.13     2.47   0.131  -0.294  #> 10  0.00696 -1.68  -1.06   -0.0459 #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -5.94    0.785 #>  2  -4.90    1.87  #>  3  -7.35    1.83  #>  4  -0.224  -6.51  #>  5   2.79    6.28  #>  6  -9.02    1.69  #>  7  -0.603  -2.12  #>  8   7.73    2.15  #>  9  -1.60    6.21  #> 10  -6.72   -5.42  #> # ℹ 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -5.69  -1.64   #>  2  -3.71   2.19   #>  3  -6.51  -1.83   #>  4   3.98  -7.93   #>  5  -2.82   6.42   #>  6  -4.72  -2.48   #>  7   6.28  -0.0960 #>  8   8.19  -2.27   #>  9  -7.27   3.48   #> 10  -0.870 -6.15   #> # ℹ 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1 -2.47  -1.57  #>  2  3.67   1.65  #>  3  0.556 -2.89  #>  4  3.50   2.86  #>  5 -1.98  -0.458 #>  6  2.28   1.46  #>  7  5.00   2.28  #>  8 -5.10  -1.67  #>  9  0.992  3.29  #> 10  1.41  -2.56  #> # ℹ 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -4.57    0.672 #>  2   7.59   -0.599 #>  3  -5.80   -0.272 #>  4   0.186   4.89  #>  5   2.35   -7.48  #>  6   3.99    0.394 #>  7   2.83    6.83  #>  8  -6.36   -2.06  #>  9   3.87    4.18  #> 10   1.36   -3.55  #> # ℹ 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>     UMAP1  UMAP2 #>     <dbl>  <dbl> #>  1  2.39  -2.75  #>  2 -0.938  0.224 #>  3  2.16  -3.25  #>  4  2.53  -1.33  #>  5 -2.33   1.60  #>  6 -1.64  -0.240 #>  7  2.37   2.05  #>  8 -1.29   0.319 #>  9 -1.01   0.799 #> 10 -1.73   1.18  #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing CyTOF data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              1 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # ℹ 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.7 #>  2            0.7 #>  3            0.4 #>  4            0.6 #>  5            0.4 #>  6            0.3 #>  7            1   #>  8            0.5 #>  9            0.7 #> 10            0.7 #> # ℹ 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            1   #>  2            1   #>  3            1   #>  4            1   #>  5            1   #>  6            0.1 #>  7            0.6 #>  8            0.6 #>  9            1   #> 10            1   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split CyTOF data into a training and test set — tof_split_data","title":"Split CyTOF data into a training and test set — tof_split_data","text":"Split CyTOF data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split CyTOF data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split CyTOF data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/34]> Bootstrap01 #>  2 <split [100/32]> Bootstrap02 #>  3 <split [100/35]> Bootstrap03 #>  4 <split [100/34]> Bootstrap04 #>  5 <split [100/35]> Bootstrap05 #>  6 <split [100/38]> Bootstrap06 #>  7 <split [100/41]> Bootstrap07 #>  8 <split [100/39]> Bootstrap08 #>  9 <split [100/41]> Bootstrap09 #> 10 <split [100/36]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Training/Testing/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)      3.51   #> 2 pstat5           1.19   #> 3 cd45             0.828  #> 4 cd34             0.0206  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 pstat5       -0.176     #> 2 cd45         -0.138     #> 3 cd34         -0.0274    #> 4 (Intercept)  -0.0000248  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 0 × 2 #> # ℹ 2 variables: feature <chr>, coefficient <dbl>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform raw high-dimensional cytometry data. — tof_transform","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"function transforms `tof_tbl` raw ion counts, reads, fluorescence intensity units directly measured cytometer using user-provided function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"","code":"tof_transform(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   transform_fun )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. transform_fun vectorized function apply protein value variance stabilization.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>      cd45   cd38    cd34   cd19 .upsample_cluster #>     <dbl>  <dbl>   <dbl>  <dbl> <chr>             #>  1 -0.431  0.628  1.05    0.971 b                 #>  2  0.198 -0.764  0.929  -0.806 b                 #>  3  0.590  0.459 -0.417   1.63  b                 #>  4  1.05  -1.91  -0.0695 -0.550 b                 #>  5  1.26   1.17  -1.57   -1.00  b                 #>  6  0.757  2.34  -0.360  -1.16  a                 #>  7 -0.739 -2.58  -0.179  -0.138 b                 #>  8  0.875  0.249  1.93   -0.574 a                 #>  9  1.37   1.64  -0.770   3.30  b                 #> 10 -1.59  -0.271 -0.357   0.400 a                 #> # ℹ 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>      cd45   cd38    cd34   cd19 .upsample_cluster #>     <dbl>  <dbl>   <dbl>  <dbl> <chr>             #>  1 -0.431  0.628  1.05    0.971 b                 #>  2  0.198 -0.764  0.929  -0.806 a                 #>  3  0.590  0.459 -0.417   1.63  b                 #>  4  1.05  -1.91  -0.0695 -0.550 b                 #>  5  1.26   1.17  -1.57   -1.00  b                 #>  6  0.757  2.34  -0.360  -1.16  a                 #>  7 -0.739 -2.58  -0.179  -0.138 a                 #>  8  0.875  0.249  1.93   -0.574 b                 #>  9  1.37   1.64  -0.770   3.30  b                 #> 10 -1.59  -0.271 -0.357   0.400 b                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 a                 #>  4 b                 #>  5 a                 #>  6 a                 #>  7 b                 #>  8 b                 #>  9 b                 #> 10 a                 #> # ℹ 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 b                 #>  4 b                 #>  5 a                 #>  6 a                 #>  7 b                 #>  8 b                 #>  9 b                 #> 10 a                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   num_neighbors = 1L,   distance_function = c(\"euclidean\", \"cosine\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating many neighbors used nearest neighbor calculation. Clusters assigned based majority vote. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 b                 #>  4 b                 #>  5 b                 #>  6 b                 #>  7 b                 #>  8 b                 #>  9 a                 #> 10 a                 #> # ℹ 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 a                 #>  3 b                 #>  4 b                 #>  5 b                 #>  6 a                 #>  7 a                 #>  8 b                 #>  9 a                 #> 10 b                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write cytof data to a file or to a directory of files — tof_write_data","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""}]
