[{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidytof","title":"Contributing to tidytof","text":"outlines propose change tidytof. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidytof","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidytof","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidytof","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"keyes-timothy/tidytof\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidytof","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidytof","text":"Please note tidytof project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = starts_with(\"cd\"),      num_neighbors = 50L,      distance_function = \"cosine\",      method = \"phenograph\"   ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster,     metacluster_cols = starts_with(\"cd\"),     num_metaclusters = 3L,     method = \"kmeans\"   )  phenograph_clusters %>%   dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) %>%   head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 5                   2                   #> 2 H1_PhenoGraph_cluster1 5                   2                   #> 3 H1_PhenoGraph_cluster1 5                   2                   #> 4 H1_PhenoGraph_cluster1 5                   2                   #> 5 H1_PhenoGraph_cluster1 5                   2                   #> 6 H1_PhenoGraph_cluster1 5                   2 phenograph_clusters %>%    dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster1           2                    1000 #> 2 cluster3           2                    1000 #> 3 cluster2           3                     517 #> 4 cluster2           1                     483 # use the kmeans algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\"   )  # use the flowsom algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"flowsom\"   ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\",      augment = FALSE   ) %>%    head()  #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 4               #> 2 18              #> 3 4               #> 4 14              #> 5 4               #> 6 15"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"example, wanted write tidytof-style interface new clustering algorithm “supercluster”, might write something like :","code":"tof_cluster_supercluster <-    function(tof_tibble, cluster_cols, ...) {      cluster_data <- dplyr::select(tof_tibble, {{cluster_cols}})          result <-        cluster_data %>%        do_something(...) %>%        do_something_else(...)   }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"’s possible algorithm doesn’t…","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_analyze_abundance","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_analyze_abundance()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_analyze_abundance() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_analyze_abundance depends slightly underlying statistical method used, details can found documentation tof_analyze_abundance_* function family member: tof_analyze_abundance_diffcyt tof_analyze_abundance_glmm tof_analyze_abundance_ttest","code":"daa_result <-    citrus_data %>%    tof_analyze_abundance(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )   significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_analyze_expression","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_analyze_expression()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_analyze_expression verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_analyze_expression() also depends underlying test used, can see result looks relatively similar output tof_analyze_abundance(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_analyze_expression_* function family member: tof_analyze_expression_diffcyt tof_analyze_expression_lmm tof_analyze_expression_ttest","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_analyze_expression(     method = \"ttest\",      cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-    dea_result %>%    mutate(     log2_fc = log(mean_fc, base = 2),      log_p = -log(p_adj),      significance =        case_when(         p_adj < 0.05 & mean_fc > 1 ~ \"increased\",          p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",         TRUE ~ NA_character_       ),      marker =        str_extract(marker, \".+_\") %>%        str_remove(\"_\"),      pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")   )  volcano_data %>%    ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +    geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +    geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +   geom_point(shape = 21, size = 2) +    ggrepel::geom_text_repel(     aes(label = pair),      data = slice_head(volcano_data, n = 10L),      size = 2   ) +    scale_fill_manual(     values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),      na.value = \"#cdcdcd\"   ) +    labs(     x = \"log2(Fold-change)\",      y = \"-log10(p-value)\",      fill = NULL,      caption = \"Labels indicate the 10 most significant marker-cluster pairs\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-    phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1   0.606    16.0 #> 2   5.47     15.9 #> 3  23.2      26.9 #> 4  15.7      12.6 #> 5   3.26     17.5 #> 6  15.4      21.0 phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -10.4   -12.2  #>  2   -5.40  -13.6  #>  3    7.60  -34.2  #>  4    4.53  -16.9  #>  5   -9.85  -15.1  #>  6    1.94  -21.5  #>  7   -4.02  -15.0  #>  8    9.24  -26.1  #>  9    3.56  -19.0  #> 10   -7.35   -6.10 #> # ℹ 2,990 more rows phenograph_data %>%    tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1  6.60   6.07  #>  2  6.74   4.76  #>  3  8.73  -0.721 #>  4  7.46  -1.29  #>  5  6.41   5.96  #>  6 -0.956 -4.04  #>  7  6.08   5.68  #>  8  8.78  -1.57  #>  9  6.89  -0.529 #> 10  8.50   6.14  #> # ℹ 2,990 more rows  phenograph_data %>%    tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23    -0.868  0.978   3.49  #>  2 -0.969  -1.02    -0.787  1.22    0.329 #>  3 -2.36    2.54    -1.95  -0.882  -1.30  #>  4 -3.68   -0.00565  0.962  0.410   0.788 #>  5 -4.03    2.07    -0.829  1.59    5.39  #>  6 -2.59   -0.108    1.32  -1.41   -1.24  #>  7 -1.55   -0.651   -0.233  1.08    0.129 #>  8 -1.18   -0.446    0.134 -0.771  -0.932 #>  9 -2.00   -0.485    0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924   -0.692  1.45    0.270 #> # ℹ 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # ℹ 2,990 more rows # 3 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23    -0.868 #>  2 -0.969  -1.02    -0.787 #>  3 -2.36    2.54    -1.95  #>  4 -3.68   -0.00565  0.962 #>  5 -4.03    2.07    -0.829 #>  6 -2.59   -0.108    1.32  #>  7 -1.55   -0.651   -0.233 #>  8 -1.18   -0.446    0.134 #>  9 -2.00   -0.485    0.593 #> 10 -0.0356 -0.924   -0.692 #> # ℹ 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = phenograph_cluster   ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = cd11b   ) +    ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data %>%    dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     group_cols = phenograph_cluster,      method = \"constant\",     num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     group_cols = phenograph_cluster,      method = \"prop\",     prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-    function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {      x/from[2] * to[2]   }  phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +   scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)   ) +    labs(     fill = \"relative density\"   ) phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)     ) +    labs(     fill = \"relative density\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # ℹ 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          4.80                  0.0967 #> 2 patient1 Basal                           4.68                  0.765  #> 3 patient2 BCR-XL                          5.00                 -0.0579 #> 4 patient2 Basal                           4.88                  0.808  #> 5 patient3 BCR-XL                          5.04                 -0.0432 #> 6 patient3 Basal                           4.98                  0.745  #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, … citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = function(x) quantile(x = x, probs = 0.75)   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          5.30                 -0.0186 #> 2 patient1 Basal                           5.18                  1.32   #> 3 patient2 BCR-XL                          5.41                 -0.0201 #> 4 patient2 Basal                           5.28                  1.39   #> 5 patient3 BCR-XL                          5.42                 -0.0362 #> 6 patient3 Basal                           5.41                  1.27   #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_threshold` CD4_Nd145@cluster1_thre…¹ #>   <chr>    <chr>                                 <dbl>                     <dbl> #> 1 patient1 BCR-XL                                0.516                         0 #> 2 patient1 Basal                                 0.365                         0 #> 3 patient2 BCR-XL                                0.554                         0 #> 4 patient2 Basal                                 0.452                         0 #> 5 patient3 BCR-XL                                0.547                         0 #> 6 patient3 Basal                                 0.549                         0 #> # ℹ abbreviated name: ¹​`CD4_Nd145@cluster1_threshold` #> # ℹ 22 more variables: `CD20_Sm147@cluster1_threshold` <dbl>, #> #   `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                   0.864                   2.47                  13.0  #> 2 patient2                   1.11                    7.05                  10.8  #> 3 patient3                   0.670                   6.23                  10.5  #> 4 patient4                   2.64                    5.86                   9.90 #> 5 patient5                   0.594                   7.56                   8.13 #> 6 patient6                   0.661                   4.77                   7.97 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_emd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_emd`, ³​`BCR-XL_CD20_Sm147@cluster3_emd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                 0.0367                  0.0513                  0.347 #> 2 patient2                 0.00831                 0.168                   0.401 #> 3 patient3                 0.0104                  0.115                   0.357 #> 4 patient4                 0.0301                  0.135                   0.205 #> 5 patient5                 0.00911                 0.0789                  0.274 #> 6 patient6                 0.00972                 0.0346                  0.214 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_jsd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_jsd`, ³​`BCR-XL_CD20_Sm147@cluster3_jsd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # ℹ 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    dplyr::left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns  ddpr_patients %>%    dplyr::select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # ℹ 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor   # and create the time_to_event and event columns for survival modeling   dplyr::mutate(     relapse_status = as.factor(relapse_status),      time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients %>%    dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-    ddpr_patients %>%    dplyr::filter(is.na(relapse_status))  ddpr_patients <-    ddpr_patients %>%    dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-    ddpr_patients %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 10,      strata = relapse_status   )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # ℹ 18 more rows training_classifier_metrics <-    class_mod %>%    tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod %>%    tof_plot_model() cv_classifier_metrics <-    class_mod %>%    tof_assess_model(new_data = \"tuning\")  class_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      time_col = time_to_event,      event_col = event,      model_type = \"survival\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # ℹ 30 more rows survival_metrics <-    survival_mod %>%    tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # ℹ 51 more rows survival_mod %>%    tof_plot_model() cv_survival_metrics <-   survival_mod %>%   tof_assess_model(new_data = \"tuning\") survival_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # ℹ 2 more rows phenograph_data %>%    # perform preprocessing   tof_preprocess() %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # ℹ 2 more rows phenograph_data %>%    # preprocess   tof_preprocess(transform_fun = scale) %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 3,000 × 25 #>   sample_name  phenograph_cluster    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>        <chr>                <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGra… cluster1           -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGra… cluster1            1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGra… cluster1            2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGra… cluster1            0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # ℹ 2,996 more rows #> # ℹ 16 more variables: cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, #> #   cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, #> #   pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, #> #   prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # ℹ 2 more rows  # after preprocessing and post-processing, the data are the same  # except that the re-added noise component is different for each value  phenograph_data %>%    tof_preprocess() %>%    tof_postprocess(redo_noise = TRUE) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45     cd34   cd38 #>   <dbl>    <dbl>  <dbl> #> 1  130.  2.94     0.686 #> 2  230. -0.690   10.5   #> 3  293.  4.37     1.75  #> 4  430. -0.00415 12.7   #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Quality control","text":"demonstrate use {tidytof}’s quality control verbs, use combination simulated real data vignette. Simulated data generated --fly sections , walk download real dataset section. want download dataset originally collected development PhenoGraph algorithm. data built HDCytoData package, available Bioconductor can downloaded following command: load PhenoGraph data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s. also add lines dplyr code clean column names perform standard arcsinh transformation. Thus, can see levine tof_tbl 265627 cells (one row) 40 pieces information cell (one column).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") levine <-   HDCytoData::Levine_32dim_flowSet() |>   as_tof_tbl() |>   # a bit of data cleaning   dplyr::mutate(population_id = as.character(population_id)) |>   dplyr::rename_with(     .fn = \\(x) stringr::str_to_lower(stringr::str_remove(x, \"\\\\|.+\"))   ) |>   dplyr::mutate(dplyr::across(c(file_number, population_id), as.character)) |>   # arcsinh transformation   tof_preprocess(     channel_cols =        c(-time, -cell_length, -event_number, -file_number, -population_id)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"detect-low-expression-i-e--potentially-failed-channels-with-tof_assess_channels","dir":"Articles","previous_headings":"","what":"Detect low-expression (i.e. potentially failed) channels with tof_assess_channels()","title":"Quality control","text":"data collection, might wonder channels include downstream analyses. particular, might want exclude channels positive values, situation indicates antibody may failed, signal particular channel may weak detected. , can use tof_assess_channels(), verb calculates many cells negative (.e. use-specified threshold, negative_threshold) channel flags channels user-specified proportion negative cells (negative_proportion_flag). levine dataset, look markers 97.5% cells threshold 5 ion counts: can see two channels 97.5% cells dataset 5 counts. given experiment, might expected (.e. marker expressed rare cell population) unexpected (marker expressed many cells). case, can visualize marker negative cells manually inspect (recommend flagged channels).  case, looks like small population cells slightly positive cd14, simply measurement noise/nonspecific binding antibody. user whether include cd14 downstream analyses.","code":"# convert 5 counts to asinh value with a cofactor of 5 threshold <- asinh(5/5)  levine |>    tof_assess_channels(     negative_threshold = threshold,      negative_proportion_flag = 0.975   ) #> # A tibble: 38 × 3 #>    channel negative_proportion flagged_channel #>    <chr>                 <dbl> <lgl>           #>  1 cd14                  0.988 TRUE            #>  2 cd133                 0.975 TRUE            #>  3 cd117                 0.969 FALSE           #>  4 cd16                  0.967 FALSE           #>  5 flt3                  0.960 FALSE           #>  6 cd15                  0.940 FALSE           #>  7 cd41                  0.923 FALSE           #>  8 cd34                  0.909 FALSE           #>  9 cd61                  0.890 FALSE           #> 10 cd33                  0.885 FALSE           #> # ℹ 28 more rows levine |>    tof_plot_cells_density(marker_col = cd14)"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"identify-time-periods-of-abnormally-low-or-high-flow-rate-during-data-acquisition-using-tof_assess_flow_rate","dir":"Articles","previous_headings":"","what":"Identify time periods of abnormally low or high flow rate during data acquisition using tof_assess_flow_rate()","title":"Quality control","text":"Large changes flow rate cytometer can impact quality signal acquired data collection: example, abnormally low flow rates can caused partial occlusions cytometer’s flow cell, leading debris air infiltration cytometer’s microfluidics system. Thus, can useful perform quality control step explicitly interrogates flow rate course cytometry experiment order flag cells collected unusually high low rates acquisition. , {tidytof} provides tof_assess_flow_rate(), function implements simplified version FlowAI’s flow rate analysis. short, relative flow rates timestep cytometry experiment calculated, outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distibution across timesteps) flagged. size timesteps user-defined parameter calculation, significance level (0 1) within t-distribution determines anomalous time step’s flow rate must cells flagged. can apply tof_assess_flow_rate() levine dataset , using  result , can see last several timesteps flagged potentially low flow rates. decision include exclude cells analyses left user. group_cols argument can also used analyze flow rates samples, patients, mass cytometry barcode plates, etc. separately.","code":"levine |>    tof_assess_flow_rate(     time_col = time,      num_timesteps = 200,      # flag timepoints in which flow rates are high or low at a signicance level      # of p = 0.01     alpha_threshold = 0.01,      # plot the number of cells in each timestep, and whether or not the      # rates were flagged as too high or too low      visualize = TRUE   ) #> # A tibble: 265,627 × 3 #>     time timestep flagged_window #>    <dbl>    <dbl> <lgl>          #>  1  2693        1 FALSE          #>  2   850        1 FALSE          #>  3  3002        1 FALSE          #>  4  3082        1 FALSE          #>  5  3248        1 FALSE          #>  6  3363        1 FALSE          #>  7  3521        1 FALSE          #>  8  1680        1 FALSE          #>  9  3072        1 FALSE          #> 10  3339        1 FALSE          #> # ℹ 265,617 more rows levine |>    tof_assess_flow_rate(     time_col = time,      # analyze two files in the levine dataset separately      group_cols = file_number,      alpha_threshold = 0.01,      visualize = TRUE   ) #> # A tibble: 265,627 × 4 #>    file_number  time timestep flagged_window #>    <chr>       <dbl>    <dbl> <lgl>          #>  1 94            850        1 TRUE           #>  2 94           1680        1 TRUE           #>  3 94            856        1 TRUE           #>  4 94           1982        1 TRUE           #>  5 94           2163        1 TRUE           #>  6 94            689        1 TRUE           #>  7 94           1353        1 TRUE           #>  8 94            176        1 TRUE           #>  9 94            193        1 TRUE           #> 10 94            468        1 TRUE           #> # ℹ 265,617 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"flag-cells-that-are-unusually-far-from-the-centroid-of-a-cluster-to-which-they-have-been-assigned-with-tof_assess_clusters_distance","dir":"Articles","previous_headings":"","what":"Flag cells that are unusually far from the centroid of a cluster to which they have been assigned with tof_assess_clusters_distance()","title":"Quality control","text":"using favorite clustering algorithm define cell subpopulations (example, using tof_cluster()), may wonder well clustering procedure worked. example, may clusters contain outliers - , cells less similar cells cluster typical. detect cells, tidytof provides tof_assess_clusters_distance() verb, computes Mahalanobis distance cell centroid cluster assigned. , computes z-score mahalanobis distances cells cluster flags cells z-score user-specified threshold. Altogether, procedure flags cells unusually far cluster centroid - .e. candidate outliers. demonstrate use tof_assess_clusters_distance() simulated data. simulate data 3 clusters, large population cells “truly” belong cluster well small population outliers cells erroneously assigned cluster. following plots visualize simulated data described :   Using dataset, see tof_assess_clusters_distance() can successfully flag majority outlier cells cluster.","code":"set.seed(2020L)  # simulate large population of cells that truly belong in their assigned cluster sim_data_base <-   dplyr::tibble(     cd45 = c(rnorm(n = 600), rnorm(n = 500, mean = -4)),     cd38 =        c(         rnorm(n = 100, sd = 0.5),          rnorm(n = 500, mean = -3),          rnorm(n = 500, mean = 8)       ),     cd34 =        c(         rnorm(n = 100, sd = 0.2, mean = -10),          rnorm(n = 500, mean = 4),          rnorm(n = 500, mean = 60)       ),     cd19 = c(rnorm(n = 100, sd = 0.3, mean = 10), rnorm(n = 1000)),     cluster_id = c(rep(\"a\", 100), rep(\"b\", 500), rep(\"c\", 500)),     dataset = \"non-outlier\"   )  # simulate outlier cells that do not belong in their assigned cluster sim_data_outlier <-   dplyr::tibble(     cd45 = c(rnorm(n = 10), rnorm(50, mean = 3), rnorm(n = 50, mean = -12)),     cd38 =        c(         rnorm(n = 10, sd = 0.5),          rnorm(n = 50, mean = -10),          rnorm(n = 50, mean = 10)       ),     cd34 =        c(         rnorm(n = 10, sd = 0.2, mean = -15),          rnorm(n = 50, mean = 15),          rnorm(n = 50, mean = 70)       ),     cd19 = c(rnorm(n = 10, sd = 0.3, mean = 19), rnorm(n = 100)),     cluster_id = c(rep(\"a\", 10), rep(\"b\", 50), rep(\"c\", 50)),     dataset = \"outlier\"   )  # bind simulated data together sim_data <- bind_rows(sim_data_base, sim_data_outlier) sim_data |>    tof_plot_cells_embedding(color_col = cluster_id) sim_data |>    tof_plot_cells_embedding(color_col = dataset) sim_data |>   tof_assess_clusters_distance(     cluster_col = cluster_id,     # flag cells with a mahalanobis distance z-score over 3     z_threshold = 3,     augment = TRUE   ) |>    # visualize result as above   dplyr::select(-dplyr::starts_with(\".mahala\"), -z_score) |>    dplyr::mutate(flagged_cell = as.character(flagged_cell)) |>    tof_plot_cells_embedding(color_col = flagged_cell) +    scale_fill_manual(values = tof_generate_palette(num_colors = 2))"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"flag-cells-whose-cluster-assignment-is-ambiguous-with-tof_assess_clusters_entropy","dir":"Articles","previous_headings":"","what":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","title":"Quality control","text":"may also wish evaluate clustering result based cell’s absolute distance centroid cluster assigned, based relative distances cell cluster centroids. , order confident cell’s cluster assignment, ideally want cell close centroid cluster assigned, relatively distant clusters. contrasts scenario cell might similarly close centroids 2-3 clusters, case might think cell “ambiguous” phenotype, phenotype intermediate clusters clustering algorithm identified. flag “ambiguous” clusters, {tidytof} provides tof_assess_clusters_entropy() verb. tof_assess_clusters_entropy() computes entropy L1-scaled mahalanobis distance vector (.e. mahalanobis distance cell centroids clusters dataset) - entropy low (close 0) confident cell’s cluster assignment, high (near 1) equally close multiple cluster centroids. demonstrate use function simulated data levine dataset .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"simulated-data","dir":"Articles","previous_headings":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","what":"Simulated data","title":"Quality control","text":"First, simulate fake dataset 3000 cells 4 channels. simulated dataset, two well-defined clusters (“b” “c”) dispersed cluster intermediate others (“”). data visualized :  dataset, can imagine first analysis approach might involve clustering cells 2 distinct clusters. data simulated, already know number clusters small - can calculating entropy cells resulting clusters help us realize without prior knowledge? check, can use tof_assess_clusters_entropy():   plots , can see cells middle 2 k-means clusters (correspond well ground-truth clusters “b” “c” ) high entropy values, whereas cells closer one centroids low entropy values. can also see tof_assess_clusters_entropy() flags cells potentially anomalous (.e. intermediate phenotype two clusters identified) entropy values 75th percentile (user-specified parameter) entropy values dataset. user wish recluster dataset, filter anomalous cells, processing steps.  can see , expected, intermediate cluster (“”) higher entropies either distinct clusters (“b” “c”).","code":"sim_data <-   dplyr::tibble(     cd45 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cd38 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cd34 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cd19 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))   ) sim_data |>   tof_reduce_dimensions(method = \"pca\") |>   tof_plot_cells_embedding(     embedding_cols = c(.pc1, .pc2),     color_col = cluster_id   ) set.seed(17L)  entropy_result <-    sim_data |>    # cluster into 2 clusters   tof_cluster(     num_clusters = 2,      method = \"kmeans\"   ) |>    # calculate the entropy of all cells   tof_assess_clusters_entropy(     cluster_col = .kmeans_cluster,      marker_cols = starts_with(\"cd\"),      entropy_quantile = 0.8,      augment = TRUE   )   # plot the clusters in PCA space entropy_result |>    select(-starts_with(\".mahala\"), -flagged_cell) |>    tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>   tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = .kmeans_cluster) # show the entropy values for each cell entropy_result |>    select(-starts_with(\".mahala\"), -flagged_cell) |>    tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>   tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = entropy) +    scale_fill_viridis_c() entropy_result |>    select(-starts_with(\".mahala\")) |>    tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>   tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = flagged_cell) +    scale_fill_viridis_d() entropy_result |>   ggplot(aes(x = entropy, fill = cluster_id)) +   geom_density(alpha = 0.4) +   theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"real-data","dir":"Articles","previous_headings":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","what":"Real data","title":"Quality control","text":"can also apply tof_assess_clusters_entropy() dataset derived levine data. Suppose take 5 largest clusters levine save result small_levine tof_tbl. , can perturb dataset replacing labels cells smallest cluster (cluster 9) random labels. effectively creates population cells dataset whose “true” cluster label absent. scenario, expect cells perturbed cluster relatively distant remaining clusters, whereas unperturbed cells relatively close cluster centroid (correct centroid). Thus, can test tof_assess_clusters_entropy() successfully flags cells perturbed cluster relative others: plot , can see cells cluster 9 larger entropy values cells clusters, expected.  Similarly, can see majority cells 9 successfully flagged tof_assess_clusters_entropy() using entropy quantile threshold 0.9. Conversely, cells cluster (cluster 15) flagged.","code":"clusters_to_keep <-   levine |>   dplyr::count(population_id) |>   dplyr::slice_max(order_by = n, n = 5L) |>   dplyr::arrange(n) |>   pull(population_id)  smallest_cluster <- clusters_to_keep[1] largest_cluster <- clusters_to_keep[[length(clusters_to_keep)]]  small_levine <-   levine |>   dplyr::filter(population_id %in% clusters_to_keep) # perform the perturbation small_levine <-   small_levine |>   dplyr::mutate(     new_population_id =       dplyr::if_else(         population_id %in% smallest_cluster,         sample(           clusters_to_keep[-which(clusters_to_keep %in% smallest_cluster)],           size = nrow(small_levine),           replace = TRUE         ),         population_id       )   )  # perform the entropy assessment  entropy_levine <-   small_levine |>   tof_assess_clusters_entropy(     cluster_col = new_population_id,     marker_cols = starts_with(\"cd\"),     augment = TRUE   ) entropy_levine |>   mutate(population_id = fct_reorder(population_id, entropy)) |>   tof_plot_cells_density(     marker_col = entropy,     group_col = population_id,     use_ggridges = TRUE,     scale = 0.1   ) +    ggplot2::theme(legend.position = \"none\") +    ggplot2::labs(x = \"Entropy\", y = \"Cluster ID\") entropy_levine |>   mutate(flagged_cell = entropy > quantile(entropy, prob = 0.9)) |>   dplyr::count(population_id, flagged_cell) |>   group_by(population_id) |>   mutate(prop = n / sum(n)) |>   ungroup() |>   dplyr::filter(flagged_cell)  #> # A tibble: 2 × 4 #>   population_id flagged_cell     n   prop #>   <chr>         <lgl>        <int>  <dbl> #> 1 15            TRUE         12888 0.0798 #> 2 9             TRUE         11666 0.706"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files “phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class()  #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show    # that the columns have been changed   select(where(is.character))  #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # ℹ 296 more rows phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data() %>%    tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble  # to tof_read_data phenograph_panel <-    phenograph %>%    tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data(panel_info = phenograph_panel) %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name  phenograph_cluster    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>        <chr>                <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGra… cluster1           -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGra… cluster1            1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGra… cluster1            2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGra… cluster1            0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # ℹ 2,996 more rows #> # ℹ 16 more variables: cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, #> #   cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, #> #   pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, #> #   prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%    # create a variable representing if a cell is above or below    # the median expression level of pstat5   mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   ) phenograph_data %>%    mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting started with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"Getting started with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied CyTOF data tof_metacluster() agglomerates clusters smaller number metaclusters tof_daa() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_dea() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"Getting started with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (%>%) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers. Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data %>%    tof_preprocess() %>%   tof_cluster(     cluster_cols = starts_with(\"cd\"), # column specification     method = \"phenograph\", # method specification,    ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster, # column specification     num_metaclusters = 4, # method specification     method = \"kmeans\" # method specification   ) %>%    tof_downsample(     group_cols = .kmeans_metacluster, # column specification     num_cells = 200, # method specification     method = \"constant\" # method specification   ) %>%   tof_plot_cells_layout(     knn_cols = starts_with(\"cd\"), # column specification     color_col = .kmeans_metacluster, # column specification     num_neighbors = 7L, # method specification     node_size = 2L # method specification   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Getting started with tidytof","text":"tidytof verbs can used combination one another using pipe (%>%) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data %>%    # step 1   tof_preprocess() %>%    # step 2   tof_cluster(     cluster_cols = starts_with(\"cd\"),      method = \"phenograph\",      #num_metaclusters = 4L,      seed = 2020L   ) %>%   # step 3   tof_downsample(     group_cols = .phenograph_cluster,      method = \"constant\",      num_cells = 400   ) %>%    # step 4   tof_reduce_dimensions(method = \"tsne\") %>%    # step 5   tof_plot_cells_embedding(     embedding_cols = contains(\"tsne\"),     color_col = .phenograph_cluster    ) +    ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"Getting started with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every CyTOF analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T (2023). tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles. https://keyes-timothy.github.io/tidytof, https://keyes-timothy.github.io/tidytof/.","code":"@Manual{,   title = {tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles},   author = {Timothy Keyes},   year = {2023},   note = {https://keyes-timothy.github.io/tidytof, https://keyes-timothy.github.io/tidytof/}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-highly-reproducible-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze Mass Cytometry Data Using Tidy Data Principles","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis high-dimensional cytometry data (.e. mass cytometry, full-spectrum flow cytometry, sequence-based cytometry). Specifically, tidytof provides easy--use pipeline handling high-dimensional cytometry data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first pipe (|>), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels cytometry data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if(!require(devtools)) install.packages(\"devtools\")  devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if(!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if(!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing cytometry data local machine), can use tof_read_data read cytometry data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing cytometry data individual experiments, cytometry users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one cytometry channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #>  [1] \"aml\"                  \"ddpr\"                 \"ddpr_metadata.csv\"    #>  [4] \"mix\"                  \"mix2\"                 \"phenograph\"           #>  [7] \"phenograph_csv\"       \"scaffold\"             \"statistical_scaffold\" #> [10] \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/tidytof/extdata/phenograph\" phenograph <-    tidytof_example_data(\"phenograph\") |>    tof_read_data()  phenograph |>    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-    phenograph |>    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph |>    # use dplyr's select method to show that the columns have been changed   select(where(is.character)) |>    head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph |>    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph |>    tof_get_panel() |>    head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed cytometry data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph |>    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) |>    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-    phenograph |>    tof_preprocess()  # inspect new values phenograph |>    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) |>    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Often, cytometry experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"data(phenograph_data)  phenograph_data |>    count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data |>    # downsample    tof_downsample(     method = \"constant\",      group_cols = phenograph_cluster,      num_cells = 200   ) |>    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data |>    # downsample   tof_downsample(     method = \"prop\",     group_cols = phenograph_cluster,      prop_cells = 0.5   ) |>    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data |>    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) |>    # make a scatterplot   ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw() phenograph_data |>    tof_preprocess(undo_noise = FALSE) |>    tof_downsample(     density_cols = c(cd34, cd38),      target_prop_cells = 0.25,      method = \"density\",    ) |>    ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple cytometry runs.","code":"# when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data |>    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data |>    # create a variable representing if a cell is above or below the median    # expression level of pstat5   mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) |>    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-    phenograph_data |>    tof_preprocess() |>    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters |>    select(sample_name, .flowsom_metacluster, everything()) |>    head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacluster phenograph_cluster    cd19 cd11b    cd34 #>   <chr>            <chr>                <chr>                <dbl> <dbl>   <dbl> #> 1 H1_PhenoGraph_c… 8                    cluster1           -0.0336 2.46   0.608  #> 2 H1_PhenoGraph_c… 9                    cluster1            0.324  0.856 -0.116  #> 3 H1_PhenoGraph_c… 8                    cluster1            0.532  2.67   0.909  #> 4 H1_PhenoGraph_c… 2                    cluster1            0.0163 2.97   0.0725 #> 5 H1_PhenoGraph_c… 8                    cluster1            0.144  2.98   0.128  #> 6 H1_PhenoGraph_c… 1                    cluster1            0.742  3.41   0.336  #> # ℹ 20 more variables: cd45 <dbl>, cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, #> #   cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, #> #   cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, #> #   ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters |>    count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 24 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster3           15                     426 #>  2 cluster2           17                     299 #>  3 cluster2           5                      291 #>  4 cluster1           3                      228 #>  5 cluster3           16                     196 #>  6 cluster3           19                     184 #>  7 cluster1           1                      173 #>  8 cluster1           6                      173 #>  9 cluster2           12                     173 #> 10 cluster1           2                      170 #> # ℹ 14 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data |>    tof_preprocess() |>    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) |>    head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 13                   #> 2 14                   #> 3 13                   #> 4 18                   #> 5 15                   #> 6 18"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-    phenograph_clusters |>    tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne |>    select(contains(\"tsne\")) |>    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1   13.8   -14.8  #> 2    5.10   -7.82 #> 3    7.70  -36.1  #> 4   -1.95  -17.0  #> 5   11.2   -18.7  #> 6    1.50  -25.5 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne |>    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = phenograph_cluster)) +    geom_point(shape = 21) +    theme_bw() +    labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne |>    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = cd11b)) +    geom_point(shape = 21) +    scale_fill_viridis_c() +   theme_bw() +    labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_analyze_abundance-and-tof_analyze_expression","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_analyze_abundance and tof_analyze_expression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many cytometry users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_analyze_abundance tof_analyze_expression verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_analyze_abundance verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_analyze_abundance depends slightly underlying statistical method used, details can found documentation tof_analyze_abundance_* function family member: tof_analyze_abundance_diffcyt tof_analyze_abundance_glmm tof_analyze_abundance_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_analyze_expression verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_analyze_expression() also depends underlying test used, can see result looks relatively similar output tof_analyze_abundance(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw |>    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = str_extract(file_name, \"patient[:digit:]\"),      stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")   ) |>    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata |>   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data |>    left_join(citrus_metadata, by = \"sample_id\") daa_result <-    citrus_data |>    tof_analyze_abundance(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data |>    mutate(population_id = as.character(population_id)) |>   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) |>    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") |>    group_by(patient, stimulation) |>    mutate(prop = n / sum(n)) |>    ungroup() |>    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) |>    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )  significance_data <-    plot_data |>    group_by(population_id, significant, direction) |>    summarize(diff = max(diff), fc = max(fc)) |>    ungroup()  plot_data |>    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data |>    tof_preprocess(channel_cols = any_of(signaling_markers)) |>    tof_analyze_expression(     cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  dea_result |>    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-    dea_result |>    tof_plot_cluster_volcano(     use_ggrepel = TRUE   )   volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition verbs operate single-cell data directly, tidytof implements functions aggregating single-cell measurements cluster- sample-level summary statistics can analyzed using variety statistical models.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing cytometry data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data |>    mutate(cluster = str_c(\"cluster\", population_id)) |>    tof_preprocess()  citrus_data |>    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) |>    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # ℹ 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data |>    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) |>    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data |>    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) |>    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          4.80                  0.0967 #> 2 patient1 Basal                           4.68                  0.765  #> 3 patient2 BCR-XL                          5.00                 -0.0579 #> 4 patient2 Basal                           4.88                  0.808  #> 5 patient3 BCR-XL                          5.04                 -0.0432 #> 6 patient3 Basal                           4.98                  0.745  #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, … citrus_data |>    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) |>    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_threshold` CD4_Nd145@cluster1_thre…¹ #>   <chr>    <chr>                                 <dbl>                     <dbl> #> 1 patient1 BCR-XL                                0.516                         0 #> 2 patient1 Basal                                 0.365                         0 #> 3 patient2 BCR-XL                                0.554                         0 #> 4 patient2 Basal                                 0.452                         0 #> 5 patient3 BCR-XL                                0.547                         0 #> 6 patient3 Basal                                 0.549                         0 #> # ℹ abbreviated name: ¹​`CD4_Nd145@cluster1_threshold` #> # ℹ 22 more variables: `CD20_Sm147@cluster1_threshold` <dbl>, #> #   `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, … # Earth-mover's distance citrus_data |>    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) |>    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                   0.864                   2.47                  13.0  #> 2 patient2                   1.11                    7.05                  10.8  #> 3 patient3                   0.670                   6.23                  10.5  #> 4 patient4                   2.64                    5.86                   9.90 #> 5 patient5                   0.594                   7.56                   8.13 #> 6 patient6                   0.661                   4.77                   7.97 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_emd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_emd`, ³​`BCR-XL_CD20_Sm147@cluster3_emd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data |>    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) |>    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                 0.0367                  0.0513                  0.347 #> 2 patient2                 0.00831                 0.168                   0.401 #> 3 patient3                 0.0104                  0.115                   0.357 #> 4 patient4                 0.0301                  0.135                   0.205 #> 5 patient5                 0.00911                 0.0789                  0.274 #> 6 patient6                 0.00972                 0.0346                  0.214 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_jsd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_jsd`, ³​`BCR-XL_CD20_Sm147@cluster3_jsd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, … citrus_data |>    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) |>    head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) |>    dplyr::rename(patient_id = Patient_ID) |>    left_join(ddpr_metadata, by = \"patient_id\") |>    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients |>    select(where(~ !is.numeric(.x))) |>    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # ℹ 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients |>    # convert the relapse_status variable to a factor first,    # which is something we'll want for fitting the model later   # and create the time_to_event and event columns for survival modeling   mutate(     relapse_status = as.factor(relapse_status),      time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-    ddpr_patients |>    dplyr::filter(cohort == \"Training\")   ddpr_validation <-    ddpr_patients |>    dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training |>    dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-    ddpr_training |>    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 5,      strata = relapse_status   )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample |>    rsample::training() |>    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 4 UPN6           5.62      0.550    0.00374    0.622       2.86     0.342 #> 5 UPN7           0.474     0.966    0.124      1.24        2.59     0.243 #> 6 UPN9          15.6       0.446    0.0445     0.163       2.86     0.434 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample |>    rsample::testing() |>    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 2 UPN8           0.951     0.958    0.161      0.556       3.18     0.556 #> 3 UPN11          0.332     0.488    0.0146     0.598       2.16     0.320 #> 4 UPN22-Rx       0.0643    1.68     0.0804     1.56        3.06     0.529 #> 5 UPN25          0.0181    0.0266   0.00152    0.108       2.73     0.386 #> 6 UPN29          1.09      1.63     0.00561    1.29        3.05     0.606 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-    training_split |>    tof_train_model(     predictor_cols = contains(\"Pop2\"),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = tof_create_grid(mixture_values = 1),      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # ℹ 15 more rows class_predictions <-    class_mod |>    tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions |>    dplyr::mutate(     truth = ddpr_validation$relapse_status   ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-    class_mod |>    tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # ℹ 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod |>    tof_plot_model() +    labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-    class_mod |>    tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod |>    tof_plot_model(new_data = ddpr_validation) +    labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze cytometry kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. details design principles, check Getting Started tidytof vignette","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path |>    # step 1   tof_read_data() |>    # step 2   tof_preprocess() |>    # step 3   tof_cluster(method = \"phenograph\") |>   # step 4   tof_downsample(     group_cols = .phenograph_cluster,      num_cells = 100,     method = \"constant\"    ) |>    # step 5   tof_reduce_dimensions(perplexity = 50, method = \"tsne\") |>    # step 6   tof_plot_cells_embedding(     embedding_cols = starts_with(\".tsne\"),     color_col = .phenograph_cluster   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for flowSet as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang :=, .data tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1/5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_analyze_abundance_*` function family: tof_analyze_abundance_diffcyt, tof_analyze_abundance_glmm, tof_analyze_abundance_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"","code":"tof_analyze_abundance(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_analyze_abundance_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"tibble nested tibble containing differential abundance results chosen method. See tof_analyze_abundance_diffcyt, tof_analyze_abundance_glmm, tof_analyze_abundance_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"","code":"tof_analyze_abundance_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"","code":"tof_analyze_abundance_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"","code":"tof_analyze_abundance_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_analyze_abundance_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_analyze_expression_*` function family: tof_analyze_expression_diffcyt, tof_analyze_expression_lmm, tof_analyze_expression_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"","code":"tof_analyze_expression(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_analyze_expression_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"tibble nested tibble containing differential abundance results chosen method. See tof_analyze_expression_diffcyt, tof_analyze_expression_lmm, tof_analyze_expression_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"","code":"tof_analyze_expression_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"","code":"tof_analyze_expression_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"","code":"tof_analyze_expression_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_analyze_abundance_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"function adds additional column `tibble` `tof_tbl` allow users incorporate manual cell type labels clusters identified using unsupervised algorithms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"","code":"tof_annotate_clusters(tof_tibble, cluster_col, annotations)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` contains ids unsupervised cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. annotations data structure indicating annotate cluster id `cluster_col`. `annotations` can provided data.frame two columns (first name `cluster_col` contain unique cluster id; second can name contain character vector indicating manual annotation matched cluster id first column). `annotations` can also provided named character vector; case, entry `annotations` unique cluster id, names entry corresponding manual cluster annotation. See examples.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"`tof_tbl` number rows `tof_tibble` one additional column containing manual cluster annotations cell (character vector). `annotations` provided data.frame, new column name column containing cluster annotations `annotations`. `annotations` provided named character vector, new column named `cluster_col_annotation`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"","code":"sim_data <-   dplyr::tibble(     cd45 = rnorm(n = 1000),     cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),     cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),     cd19 = rnorm(n = 1000),     cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))   )  # using named character vector sim_data |>   tof_annotate_clusters(     cluster_col = cluster_id,     annotations = c(\"macrophage\" = \"a\", \"dendritic cell\" = \"b\")   ) #> # A tibble: 1,000 × 6 #>      cd45    cd38    cd34    cd19 cluster_id cluster_id_annotation #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>      <chr>                 #>  1  0.343 -0.853  -1.23   -0.0559 a          macrophage            #>  2  0.300  0.459  -0.317   0.931  a          macrophage            #>  3  1.15  -0.478  -1.46   -1.05   a          macrophage            #>  4  0.305  0.358  -0.877   0.748  a          macrophage            #>  5 -0.504 -0.121  -1.65    0.589  a          macrophage            #>  6 -1.48   1.40   -2.06   -0.667  a          macrophage            #>  7 -0.338  0.741   1.64   -1.12   a          macrophage            #>  8 -1.91   1.17    0.361  -0.450  a          macrophage            #>  9  0.534 -0.0866 -0.0750 -1.94   a          macrophage            #> 10  0.170  0.117  -0.177   1.19   a          macrophage            #> # ℹ 990 more rows  # using two-column data.frame annotation_data_frame <-   data.frame(     cluster_id = c(\"a\", \"b\"),     cluster_annotation = c(\"macrophage\", \"dendritic cell\")   )  sim_data |>   tof_annotate_clusters(     cluster_col = cluster_id,     annotations = annotation_data_frame   ) #> # A tibble: 1,000 × 6 #>      cd45    cd38    cd34    cd19 cluster_id cluster_annotation #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>      <chr>              #>  1  0.343 -0.853  -1.23   -0.0559 a          macrophage         #>  2  0.300  0.459  -0.317   0.931  a          macrophage         #>  3  1.15  -0.478  -1.46   -1.05   a          macrophage         #>  4  0.305  0.358  -0.877   0.748  a          macrophage         #>  5 -0.504 -0.121  -1.65    0.589  a          macrophage         #>  6 -1.48   1.40   -2.06   -0.667  a          macrophage         #>  7 -0.338  0.741   1.64   -1.12   a          macrophage         #>  8 -1.91   1.17    0.361  -0.450  a          macrophage         #>  9  0.534 -0.0866 -0.0750 -1.94   a          macrophage         #> 10  0.170  0.117  -0.177   1.19   a          macrophage         #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"Detect low-expression (.e. potentially failed) channels high-dimensional cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"","code":"tof_assess_channels(   tof_tibble,   channel_cols = where(tof_is_numeric),   negative_threshold = asinh(10/5),   negative_proportion_flag = 0.95 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default analyze numeric columns. negative_threshold scalar indicating threshold measurement considered negative. Defaults hyperbolic arcsine transformation 10 counts. negative_proportion_flag scalar 0 1 indicating proportion cells tof_tibble need `negative_threshold` given marker order marker flagged. Defaults 0.95.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"tibble 3 columns number rows equal number columns `tof_tibble` chosen `channel_cols`. three columns \"channel\", character vector channel names, \"negative_proportion\", numeric vector values 0 1 indicating many cells `tof_tibble` `negative_threshold` channel, `flagged_channel`, boolean vector indicating whether channel flagged potentially failed (TRUE means channel large number cells `negative_threshold`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"","code":"# simulate some data sim_data <-    data.frame(    cd4 = rnorm(n = 100, mean = 5, sd = 0.5),    cd8 = rnorm(n = 100, mean = 0, sd = 0.1),    cd33 = rnorm(n = 100, mean = 10, sd = 0.1) )  tof_assess_channels(tof_tibble = sim_data) #> # A tibble: 3 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE           #> 3 cd33                      0 FALSE            tof_assess_channels(tof_tibble = sim_data, channel_cols = c(cd4, cd8)) #> # A tibble: 2 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE            tof_assess_channels(tof_tibble = sim_data, negative_threshold = 2) #> # A tibble: 3 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE           #> 3 cd33                      0 FALSE"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"function evaluates result clustering procedure comparing mahalanobis distance cell centroid cluster assigned among cells given cluster. cells mahalanobis-distance z-score user-specified threshold flagged potentially anomalous. Note z-score calculated using modified formula minimize effect outliers (Z = x - median(x) / mad(x)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"","code":"tof_assess_clusters_distance(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   z_threshold = 3,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. z_threshold scalar indicating distance z-score threshold cell considered anomalous. Defaults 3. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"augment = FALSE (default), tibble 3 columns: \".mahalanobis_distance\" (mahalanobis distance cell centroid tits assigned cluster), \"z_score\" (modified z-score cell's mahalanobis distance relative cells dataset), \"flagged_cell\" (boolean indicating whether cell flagged z-score z_threshold). augment = TRUE, 3 columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"","code":"# simulate data sim_data_inner <-     dplyr::tibble(         cd45 = c(rnorm(n = 600), rnorm(n = 500, mean = -4)),         cd38 = c(rnorm(n = 100, sd = 0.5), rnorm(n = 500, mean = -3), rnorm(n = 500, mean = 8)),         cd34 = c(rnorm(n = 100, sd = 0.2, mean = -10), rnorm(n = 500, mean = 4), rnorm(n = 500, mean = 60)),         cd19 = c(rnorm(n = 100, sd = 0.3, mean = 10), rnorm(n = 1000)),         cluster_id = c(rep(\"a\", 100), rep(\"b\", 500), rep(\"c\", 500)),         dataset = \"inner\"     )  sim_data_outer <-   dplyr::tibble(     cd45 = c(rnorm(n = 10), rnorm(50, mean = 3), rnorm(n = 50, mean = -12)),     cd38 =       c(         rnorm(n = 10, sd = 0.5),         rnorm(n = 50, mean = -10),         rnorm(n = 50, mean = 10)       ),     cd34 =       c(         rnorm(n = 10, sd = 0.2, mean = -15),         rnorm(n = 50, mean = 15),         rnorm(n = 50, mean = 70)       ),     cd19 = c(rnorm(n = 10, sd = 0.3, mean = 19), rnorm(n = 100)),     cluster_id = c(rep(\"a\", 10), rep(\"b\", 50), rep(\"c\", 50)),     dataset = \"outer\"   )  sim_data <- rbind(sim_data_inner, sim_data_outer)  # detect anomalous cells (in this case, the \"outer\" dataset contains small # clusters that get lumped into the larger clusters in the \"inner\" dataset) z_result <-   sim_data |>   tof_assess_clusters_distance(cluster_col = cluster_id, z_threshold = 2.5)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"function evaluates result clustering procedure calculating mahalanobis distance cell centroids clusters dataset finding shannon entropy resulting vector distances. cells entropy threshold user-specified threshold flagged potentially anomalous. Entropy minimized (0) cell close one (small number) clusters, far rest . cell close multiple cluster centroids (.e. ambiguous phenotype), entropy large.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"","code":"tof_assess_clusters_entropy(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   entropy_threshold,   entropy_quantile = 0.9,   num_closest_clusters,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. entropy_threshold scalar indicating entropy threshold cell considered anomalous. unspecified, threshold computed using `entropy_quantile` (see ). (Note: Entropy often 0 1, can larger many classes/clusters). entropy_quantile scalar 0 1 indicating entropy quantile cell considered anomalous. Defaults 0.9, means cells entropy 90th percentile flagged. Ignored entropy_threshold specified directly. num_closest_clusters integer indicating many cell's closest cluster centroids mahalanobis distance included entropy calculation. Playing argument allow ignore distances clusters far away cell (thus may distort result, many distant centroids large distances can artificially inflate cells' entropy value; said, rarely issue empirically). Defaults clusters tof_tibble. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"augment = FALSE (default), tibble 2 + NUM_CLUSTERS columns. NUM_CLUSTERS number unique clusters cluster_col. Two columns \"entropy\" (entropy value cell) \"flagged_cell\" (boolean value indicating cell entropy value entropy_threshold). NUM_CLUSTERS columns contain mahalanobis distances cell clusters cluster_col (named \".mahalanobis_cluster_name\"). augment = TRUE, 2 + NUM_CLUSTERS columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"","code":"# simulate data sim_data <-   dplyr::tibble(     cd45 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd38 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd34 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd19 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))   )  # imagine a \"reference\" dataset in which \"cluster a\" isn't present sim_data_reference <-   sim_data |>   dplyr::filter(cluster_id %in% c(\"b\", \"c\"))  # if we cluster into the reference dataset, we will force all cells in # cluster a into a population where they don't fit very well sim_data <-   sim_data |>   tof_cluster(     healthy_tibble = sim_data_reference,     healthy_label_col = cluster_id,     method = \"ddpr\"   )  # we can evaluate the clustering quality by calculating by the entropy of the # mahalanobis distance vector for each cell to all cluster centroids entropy_result <-   sim_data |>   tof_assess_clusters_entropy(     cluster_col = .mahalanobis_cluster,     marker_cols = starts_with(\"cd\"),     entropy_quantile = 0.8,     augment = TRUE   )  # most cells in \"cluster a\" are flagged, and few cells in the other clusters are flagged_cluster_proportions <-   entropy_result |>   dplyr::group_by(cluster_id) |>   dplyr::summarize(     prop_flagged = mean(flagged_cell)   )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"function evaluates result clustering procedure finding cell's K nearest neighbors, determining cluster majority assigned , checking matches cell's cluster assignment. cluster assignment majority cell's nearest neighbors match cell's cluster assignment, cell flagged potentially anomalous.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"","code":"tof_assess_clusters_knn(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   num_neighbors = min(10, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. num_neighbors integer indicating many neighbors found nearest neighbor calculation. distance_function string indicating distance function used perform k nearest neighbor calculation.  Options \"euclidean\" (default) \"cosine\". augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"augment = FALSE (default), tibble 2 columns: \".knn_cluster\" (character vector indicating cluster received majority vote cell's k nearest neighbors) \"flagged_cell\" (boolean value indicating cell's cluster assignment matched majority vote (TRUE) (FALSE)). augment = TRUE, 2 columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"","code":"sim_data <-   dplyr::tibble(     cd45 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd38 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd34 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd19 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))   )  knn_result <-   sim_data |>   tof_assess_clusters_knn(     cluster_col = cluster_id,     num_neighbors = 10   )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"function performs simplified version flowAI's statistical test detect time periods abnormal flow rates course flow cytometry experiment. Briefly, relative flow rates timestep throughout data acquisition calculated (see tof_calculate_flow_rate), outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"","code":"tof_assess_flow_rate(   tof_tibble,   time_col,   group_cols,   num_timesteps = nrow(tof_tibble)/1000,   alpha_threshold = 0.01,   visualize = FALSE,   ...,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. group_cols Optional. Unquoted column names indicating columns used group cells analysis. Flow rate calculation performed independently within group. Supports tidyselect helpers. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection. alpha_threshold scalar 0 1 indicating two-tailed significance level draw outlier thresholds t-distribution `num_timesteps` - 1 degrees freedom. Defaults 0.01. visualize boolean value indicating plot generated visualize timestep's relative flow rate (group). plot printed console side-effect function; non-interactive R sessions, argument always FALSE (default). ... Optional additional arguments pass facet_wrap. Ignored visualize = FALSE. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"tibble number rows `tof_tibble`. augment = FALSE (default), 3 columns: \"time_col\" (column `time_col`), \"timestep\" (numeric timestep cell assigned based value `time_col`), \"flagged_window\" (boolean vector indicating cell collecting timestep flagged high low flow rate). augment = TRUE, 3 columns column-bound `tof_tibble` return augmented version input dataset. (Note case, time_col duplicated).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"","code":"set.seed(1000L) sim_data <-   data.frame(     cd4 = rnorm(n = 1000, mean = 5, sd = 0.5),     cd8 = rnorm(n = 1000, mean = 0, sd = 0.1),     cd33 = rnorm(n = 1000, mean = 10, sd = 0.1),     file_name = c(rep(\"a\", times = 500), rep(\"b\", times = 500)),     time =       c(         sample(1:100, size = 200, replace = TRUE),         sample(100:400, size = 300, replace = TRUE),         sample(1:150, size = 400, replace = TRUE),         sample(1:500, size = 100, replace = TRUE)       )   )  sim_data |>   tof_assess_flow_rate(     time_col = time,     num_timesteps = 20,     visualize = TRUE   )  #> # A tibble: 1,000 × 3 #>     time timestep flagged_window #>    <int>    <dbl> <lgl>          #>  1    13        1 TRUE           #>  2     6        1 TRUE           #>  3     3        1 TRUE           #>  4     3        1 TRUE           #>  5    15        1 TRUE           #>  6     7        1 TRUE           #>  7    23        1 TRUE           #>  8     6        1 TRUE           #>  9     3        1 TRUE           #> 10     4        1 TRUE           #> # ℹ 990 more rows  sim_data |>   tof_assess_flow_rate(     time_col = time,     group_cols = file_name,     num_timesteps = 20,     visualize = TRUE   )  #> # A tibble: 1,000 × 4 #>    file_name  time timestep flagged_window #>    <chr>     <int>    <dbl> <lgl>          #>  1 a            13        1 TRUE           #>  2 a             6        1 TRUE           #>  3 a             3        1 TRUE           #>  4 a             3        1 TRUE           #>  5 a            15        1 TRUE           #>  6 a             7        1 TRUE           #>  7 a             6        1 TRUE           #>  8 a             3        1 TRUE           #>  9 a             4        1 TRUE           #> 10 a             5        1 TRUE           #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"function performs simplified version flowAI's statistical test detect time periods abnormal flow rates course flow cytometry experiment. Briefly, relative flow rates timestep throughout data acquisition calculated (see tof_calculate_flow_rate), outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"","code":"tof_assess_flow_rate_tibble(   tof_tibble,   time_col,   num_timesteps = nrow(tof_tibble)/1000,   alpha_threshold = 0.01,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection. alpha_threshold scalar 0 1 indicating two-tailed significance level draw outlier thresholds t-distribution `num_timesteps` - 1 degrees freedom. Defaults 0.01. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"tibble number rows `tof_tibble`. augment = FALSE (default), 3 columns: \"time_col\" (column `time_col`), \"timestep\" (numeric timestep cell assigned based value `time_col`), \"flagged_window\" (boolean vector indicating cell collecting timestep flagged high low flow rate). augment = TRUE, 3 columns column-bound `tof_tibble` return augmented version input dataset. (Note case, time_col duplicated).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"","code":"set.seed(1000L) sim_data <-   data.frame(     cd4 = rnorm(n = 1000, mean = 5, sd = 0.5),     cd8 = rnorm(n = 1000, mean = 0, sd = 0.1),     cd33 = rnorm(n = 1000, mean = 10, sd = 0.1),     time =       c(         sample(1:100, size = 200, replace = TRUE),         sample(100:400, size = 300, replace = TRUE),         sample(1:150, size = 400, replace = TRUE),         sample(1:500, size = 100, replace = TRUE)       )   )  sim_data |>   tof_assess_flow_rate(     time_col = time,     num_timesteps = 20,     visualize = TRUE   )  #> # A tibble: 1,000 × 3 #>     time timestep flagged_window #>    <int>    <dbl> <lgl>          #>  1    13        1 TRUE           #>  2     6        1 TRUE           #>  3     3        1 TRUE           #>  4     3        1 TRUE           #>  5    15        1 TRUE           #>  6     7        1 TRUE           #>  7    23        1 TRUE           #>  8     6        1 TRUE           #>  9     3        1 TRUE           #> 10     4        1 TRUE           #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    0.795 #> 2 mae    0.788 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"function performs quantile normalization high-dimensional cytometry data tidy format using either linear rescaling quantile normalization. channel specified `channel_cols` batch corrected, `group_cols` can used break cells groups batch correction performed separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"","code":"tof_batch_correct(   tof_tibble,   channel_cols,   group_cols,   augment = TRUE,   method = c(\"rescale\", \"quantile\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted. method string indicating batch correction method used. Valid options \"rescale\" linear scaling (default) \"quantile\" quantile normalization using normalize.quantiles.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"function performs quantile normalization high-dimensional cytometry data tidy format using normalize.quantiles. Optionally, groups can specified normalized separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"","code":"tof_batch_correct_quantile(   tof_tibble,   channel_cols,   group_cols,   augment = TRUE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"function performs quantile normalization high-dimensional cytometry data tidy format using normalize.quantiles.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"","code":"tof_batch_correct_quantile_tibble(tof_tibble, channel_cols, augment = TRUE)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"function performs quantile normalization high-dimensional cytometry data tidy format using linear rescaling. channel specified `channel_cols` rescaled maximum value 1 minimum value 0. `group_cols` specifies columns used break cells groups rescaling performed separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"","code":"tof_batch_correct_rescale(tof_tibble, channel_cols, group_cols, augment = TRUE)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"Calculate relative flow rates different timepoints throughout flow mass cytometry run.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"","code":"tof_calculate_flow_rate(   tof_tibble,   time_col,   num_timesteps = nrow(tof_tibble)/1000 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"tibble 3 columns num_timesteps rows. row represent single timestep (error thrown `num_timesteps` larger number rows `tof_tibble`). three columns follows: \"timestep\", numeric vector indicating timestep represented given row; \"time_window\", factor showing interval `time_col` \"timestep\" defined; \"num_cells\", number cells collected timestep.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"","code":"# simulate some data sim_data <-    data.frame(    cd4 = rnorm(n = 100, mean = 5, sd = 0.5),    cd8 = rnorm(n = 100, mean = 0, sd = 0.1),    cd33 = rnorm(n = 100, mean = 10, sd = 0.1),    time = sample(1:300, size = 100) )  tof_calculate_flow_rate(tof_tibble = sim_data, time_col = time, num_timesteps = 20L) #>    timestep time_window num_cells #> 1         1 (6.71,21.6]         4 #> 2         2 (21.6,36.2]         6 #> 3         3 (36.2,50.8]         7 #> 4         4 (50.8,65.4]         7 #> 5         5   (65.4,80]         5 #> 6         6   (80,94.6]         4 #> 7         7  (94.6,109]         5 #> 8         8   (109,124]         4 #> 9         9   (124,138]         1 #> 10       10   (138,153]         7 #> 11       11   (153,168]         5 #> 12       12   (168,182]         2 #> 13       13   (182,197]         7 #> 14       14   (197,211]         7 #> 15       15   (211,226]         5 #> 16       16   (226,241]         2 #> 17       17   (241,255]         4 #> 18       18   (255,270]         5 #> 19       19   (270,284]         7 #> 20       20   (284,299]         6"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster CyTOF data. — tof_cluster","title":"Cluster CyTOF data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster CyTOF data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells clustering. Clustering performed group independently. Supports tidyselect helpers. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster CyTOF data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 .kmeans_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>           #>  1  1.33  -0.447  1.50   0.436 11              #>  2 -1.20  -0.481 -0.391 -1.54  9               #>  3 -0.541  0.666 -1.68  -0.986 16              #>  4 -1.22   1.32   0.689 -0.791 10              #>  5  0.639  0.519 -1.32  -0.204 18              #>  6 -0.239  0.397 -0.780  0.372 1               #>  7  0.651  0.997 -0.665  0.805 18              #>  8  0.788  1.26   0.584 -0.953 19              #>  9 -0.344  0.388 -0.407 -0.442 13              #> 10  0.120  0.885 -2.26   0.583 17              #> # ℹ 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 .phenograph_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>               #>  1  1.33  -0.447  1.50   0.436 2                   #>  2 -1.20  -0.481 -0.391 -1.54  5                   #>  3 -0.541  0.666 -1.68  -0.986 5                   #>  4 -1.22   1.32   0.689 -0.791 3                   #>  5  0.639  0.519 -1.32  -0.204 1                   #>  6 -0.239  0.397 -0.780  0.372 1                   #>  7  0.651  0.997 -0.665  0.805 1                   #>  8  0.788  1.26   0.584 -0.953 5                   #>  9 -0.344  0.388 -0.407 -0.442 5                   #> 10  0.120  0.885 -2.26   0.583 1                   #> # ℹ 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"function performs distance-based clustering CyTOF data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.distance_function_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.distance_function_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 a                    #>  2 a                    #>  3 b                    #>  4 a                    #>  5 b                    #>  6 b                    #>  7 a                    #>  8 b                    #>  9 a                    #> 10 a                    #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"function performs FlowSOM clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 10                   #>  2 17                   #>  3 11                   #>  4 4                    #>  5 2                    #>  6 19                   #>  7 1                    #>  8 1                    #>  9 11                   #> 10 8                    #> # ℹ 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"function performs k-means clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 7               #>  2 14              #>  3 9               #>  4 1               #>  5 1               #>  6 15              #>  7 19              #>  8 15              #>  9 9               #> 10 2               #> # ℹ 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 13              #>  2 5               #>  3 18              #>  4 2               #>  5 6               #>  6 4               #>  7 10              #>  8 6               #>  9 18              #> 10 3               #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering CyTOF data using user-specified selection input variables/CyTOF measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 1                   #>  2 4                   #>  3 5                   #>  4 2                   #>  5 2                   #>  6 1                   #>  7 8                   #>  8 3                   #>  9 9                   #> 10 9                   #> # ℹ 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 1                   #>  2 3                   #>  3 10                  #>  4 2                   #>  5 7                   #>  6 1                   #>  7 7                   #>  8 6                   #>  9 5                   #> 10 2                   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # ℹ 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # ℹ 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data. — tof_downsample","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>      cd45   cd38    cd34    cd19 cluster_id #>     <dbl>  <dbl>   <dbl>   <dbl> <chr>      #>  1 -0.167 -2.06  -1.25   -0.668  n          #>  2 -1.74   0.707 -0.139  -0.615  d          #>  3 -0.594 -1.12  -0.963  -0.231  d          #>  4 -1.63  -2.07  -0.734  -0.322  d          #>  5  0.137 -0.845  1.38    0.109  p          #>  6 -0.435 -0.242 -1.94   -0.0626 n          #>  7 -2.60  -1.15  -0.939   0.105  o          #>  8 -0.925 -0.286 -0.0731  0.204  x          #>  9  1.39  -0.565 -0.957   0.221  x          #> 10 -0.972  0.213 -0.648  -0.741  u          #> # ℹ 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>      cd45    cd38    cd34    cd19 cluster_id #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1 -0.444 -0.764  -1.38   -1.04   v          #>  2 -1.49  -0.290   0.573   0.482  r          #>  3 -1.11   2.63    2.13    0.470  i          #>  4 -0.558 -0.989   0.848  -0.0963 s          #>  5  0.352  0.274   0.0845 -0.753  u          #>  6  2.34  -0.0986 -0.818  -0.795  d          #>  7  0.602  0.493   0.393  -1.30   r          #>  8 -1.28   1.28   -0.914  -0.970  r          #>  9  0.525 -0.836  -0.304   1.03   r          #> 10  1.32  -0.229   0.184  -0.248  i          #> # ℹ 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 84 × 5 #>       cd45   cd38   cd34   cd19 cluster_id #>      <dbl>  <dbl>  <dbl>  <dbl> <chr>      #>  1  0.539  -0.214  0.122 -1.62  y          #>  2 -1.65   -0.738 -1.12   1.37  g          #>  3  0.389   0.513 -1.82   1.46  a          #>  4  0.322  -0.413  0.305 -1.61  u          #>  5  0.167   0.481  1.61  -1.75  b          #>  6 -0.473  -0.261 -0.511 -2.02  q          #>  7 -0.0330  1.72  -1.06   0.697 y          #>  8 -1.52    0.336  1.35   2.32  l          #>  9 -0.505  -0.974  0.136  0.126 b          #> 10 -0.625   0.291 -0.275 -0.724 i          #> # ℹ 74 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>       cd45     cd38    cd34    cd19 cluster_id #>      <dbl>    <dbl>   <dbl>   <dbl> <chr>      #>  1 -0.849   0.00982  2.32   -1.07   m          #>  2  0.914   0.494    1.31    1.55   t          #>  3 -0.0505  0.0465   0.666   0.597  a          #>  4  1.91   -1.79    -0.878  -0.106  b          #>  5 -1.95    0.557   -0.0636 -0.465  k          #>  6 -0.381  -0.758    0.0404  1.05   v          #>  7  0.211  -1.21    -2.21    0.0750 i          #>  8  1.94    1.64    -0.224  -0.936  s          #>  9  0.729   0.218   -0.419   0.364  m          #> 10 -1.57    0.156    1.40   -2.58   m          #> # ℹ 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>       cd45   cd38   cd34    cd19 cluster_id #>      <dbl>  <dbl>  <dbl>   <dbl> <chr>      #>  1  0.914   0.494  1.31   1.55   t          #>  2 -1.78   -1.74  -2.17   0.401  c          #>  3  0.211  -1.21  -2.21   0.0750 i          #>  4  1.94    1.64  -0.224 -0.936  s          #>  5  0.729   0.218 -0.419  0.364  m          #>  6 -1.57    0.156  1.40  -2.58   m          #>  7 -0.734   0.179  0.178 -0.0269 u          #>  8 -1.82    0.111  1.33  -0.478  e          #>  9  0.0773  0.496 -0.576  0.819  p          #> 10 -0.280  -2.19   0.304 -0.680  b          #> # ℹ 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 485 × 4 #>      cd45   cd38   cd34     cd19 #>     <dbl>  <dbl>  <dbl>    <dbl> #>  1  0.984  0.466 -0.186 -1.31    #>  2  2.32   1.61   0.111 -0.347   #>  3  0.537 -1.20   2.06   0.0423  #>  4  2.74   0.696  1.48  -1.02    #>  5  1.31   1.65  -0.472 -1.09    #>  6  0.110  0.697 -0.284 -0.277   #>  7  0.377  0.992  2.14   1.02    #>  8 -0.973  0.938 -0.302 -0.00681 #>  9  1.85  -0.561  1.68   0.177   #> 10  1.90  -0.926  1.09   1.23    #> # ℹ 475 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 182 × 4 #>       cd45     cd38    cd34   cd19 #>      <dbl>    <dbl>   <dbl>  <dbl> #>  1  0.0376  0.760   -1.16    1.41  #>  2  1.31    1.65    -0.472  -1.09  #>  3  0.110   0.697   -0.284  -0.277 #>  4 -0.0243  0.750    0.337   0.694 #>  5 -0.164   0.280    1.89   -0.979 #>  6 -0.500   1.01     0.433   0.380 #>  7  0.197   1.75    -0.965   1.42  #>  8 -0.580  -1.57     0.105   0.267 #>  9 -0.143   0.00761  0.0535 -0.169 #> 10  0.862   0.191   -0.440  -0.854 #> # ℹ 172 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 182 × 4 #>       cd45    cd38    cd34   cd19 #>      <dbl>   <dbl>   <dbl>  <dbl> #>  1  1.37    0.143   0.0997  0.738 #>  2 -0.695   0.0292 -0.821   0.506 #>  3 -0.0243  0.750   0.337   0.694 #>  4  1.08   -1.42   -1.30   -0.190 #>  5  0.304   0.199  -0.477   0.146 #>  6 -0.109  -2.09    0.814   0.566 #>  7  0.399  -0.345   1.22   -0.680 #>  8  1.24    0.0945  0.484   1.31  #>  9  2.44   -0.482  -0.515  -0.262 #> 10  1.24   -1.00    1.38    2.13  #> # ℹ 172 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>       cd45    cd38   cd34    cd19 cluster_id #>      <dbl>   <dbl>  <dbl>   <dbl> <chr>      #>  1  0.0104 -0.745   0.687  0.232  j          #>  2  1.13    0.821   0.431 -0.573  j          #>  3  0.837   0.679   0.583  0.971  i          #>  4 -0.239   1.53    0.535 -0.147  t          #>  5 -0.148  -0.534   0.378  0.287  e          #>  6 -1.15    0.814   0.381 -0.834  w          #>  7  0.695  -0.915   0.929 -1.83   x          #>  8  0.764   0.566  -1.20   0.623  k          #>  9  0.0573  0.0396 -1.06   0.377  k          #> 10  1.92    0.537   0.217  0.0689 j          #> # ℹ 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 87 × 5 #>       cd45     cd38    cd34   cd19 cluster_id #>      <dbl>    <dbl>   <dbl>  <dbl> <chr>      #>  1 -0.692  -0.00381 -0.522  -0.330 a          #>  2  0.351  -0.100   -2.91    0.268 a          #>  3 -0.761  -1.06    -0.920   0.493 b          #>  4 -1.25    0.482    0.393  -0.767 b          #>  5  1.60    2.35    -2.41    1.59  b          #>  6  0.326  -0.558    0.0682 -0.341 b          #>  7 -1.00    0.616    0.479  -2.46  c          #>  8  0.0635  0.474    1.29   -0.847 c          #>  9 -0.414   2.10    -1.60    0.129 c          #> 10  0.348   0.718    0.230   0.579 d          #> # ℹ 77 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation CyTOF data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>       cd45    cd38    cd34    cd19 .spade_density #>      <dbl>   <dbl>   <dbl>   <dbl>          <dbl> #>  1 -0.838  -0.220  -1.13    0.624            1    #>  2 -0.0297  0.0140 -0.732  -1.13             1    #>  3 -0.559   0.931   0.0905  1.27             1    #>  4 -1.31   -0.853   0.519   0.443            1    #>  5 -1.50    0.0731  1.42   -0.125            1    #>  6 -0.234   0.360  -0.0122  0.0705           1    #>  7  0.463  -3.18   -1.19   -2.02             0.25 #>  8 -1.02   -0.872   1.04    0.896            1    #>  9  0.315   1.21   -0.148  -0.137            1    #> 10  0.699  -0.121   0.859   1.02             1    #> # ℹ 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>       cd45    cd38    cd34    cd19 .spade_density #>      <dbl>   <dbl>   <dbl>   <dbl>          <dbl> #>  1 -0.838  -0.220  -1.13    0.624             1   #>  2 -0.0297  0.0140 -0.732  -1.13              1   #>  3 -0.559   0.931   0.0905  1.27              1   #>  4 -1.31   -0.853   0.519   0.443             0.8 #>  5 -1.50    0.0731  1.42   -0.125             1   #>  6 -0.234   0.360  -0.0122  0.0705            1   #>  7  0.463  -3.18   -1.19   -2.02              0   #>  8 -1.02   -0.872   1.04    0.896             0.4 #>  9  0.315   1.21   -0.148  -0.137             1   #> 10  0.699  -0.121   0.859   1.02              1   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby         0.234       0.321     -0.499       0.128       -0.158 #> 2 mario        -0.100       0.332      0.0637     -0.0528       0.263 #> # ℹ 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, `cd19@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, `cd19@c_ct` <dbl>, #> #   `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, `cd19@d_ct` <dbl>, #> #   `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, `cd19@e_ct` <dbl>, #> #   `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, `cd19@f_ct` <dbl>, #> #   `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, `cd19@g_ct` <dbl>, #> #   `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, `cd34@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel  values #>    <chr>   <chr>      <chr>     <dbl> #>  1 kirby   a          cd45     0.234  #>  2 kirby   a          cd38     0.321  #>  3 kirby   a          cd34    -0.499  #>  4 kirby   a          cd19     0.128  #>  5 kirby   b          cd45    -0.158  #>  6 kirby   b          cd38    -0.501  #>  7 kirby   b          cd34     0.0165 #>  8 kirby   b          cd19     0.100  #>  9 kirby   c          cd45     0.405  #> 10 kirby   c          cd38     0.600  #> # ℹ 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@g_emd` `stim_cd38@g_emd` `stim_cd34@g_emd` #>   <chr>               <dbl>             <dbl>             <dbl> #> 1 kirby               NA                NA                NA    #> 2 mario                6.80              7.90              7.20 #> # ℹ 101 more variables: `stim_cd19@g_emd` <dbl>, `stim_cd45@k_emd` <dbl>, #> #   `stim_cd38@k_emd` <dbl>, `stim_cd34@k_emd` <dbl>, `stim_cd19@k_emd` <dbl>, #> #   `stim_cd45@y_emd` <dbl>, `stim_cd38@y_emd` <dbl>, `stim_cd34@y_emd` <dbl>, #> #   `stim_cd19@y_emd` <dbl>, `stim_cd45@s_emd` <dbl>, `stim_cd38@s_emd` <dbl>, #> #   `stim_cd34@s_emd` <dbl>, `stim_cd19@s_emd` <dbl>, `stim_cd45@j_emd` <dbl>, #> #   `stim_cd38@j_emd` <dbl>, `stim_cd34@j_emd` <dbl>, `stim_cd19@j_emd` <dbl>, #> #   `stim_cd45@r_emd` <dbl>, `stim_cd38@r_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 g          cd45   stim         6.65 #>  2 g          cd38   stim         5.88 #>  3 g          cd34   stim         6.61 #>  4 g          cd19   stim        15.4  #>  5 k          cd45   stim         3.08 #>  6 k          cd38   stim        12.7  #>  7 k          cd34   stim         7.30 #>  8 k          cd19   stim         7.92 #>  9 y          cd45   stim         4.06 #> 10 y          cd38   stim         9.50 #> # ℹ 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby      0.048    0.02     0.04     0.032    0.046    0.024    0.044 #> 2 mario      0.046    0.034    0.032    0.032    0.032    0.044    0.034 #> # ℹ 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby      0.048    0.02     0.04     0.032    0.046    0.024    0.044 #> 2 mario      0.046    0.034    0.032    0.032    0.032    0.044    0.034 #> # ℹ 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@j_jsd` `stim_cd38@j_jsd` `stim_cd34@j_jsd` #>   <chr>               <dbl>             <dbl>             <dbl> #> 1 kirby                  NA                NA                NA #> 2 mario                  NA                NA                NA #> # ℹ 101 more variables: `stim_cd19@j_jsd` <dbl>, `stim_cd45@u_jsd` <dbl>, #> #   `stim_cd38@u_jsd` <dbl>, `stim_cd34@u_jsd` <dbl>, `stim_cd19@u_jsd` <dbl>, #> #   `stim_cd45@c_jsd` <dbl>, `stim_cd38@c_jsd` <dbl>, `stim_cd34@c_jsd` <dbl>, #> #   `stim_cd19@c_jsd` <dbl>, `stim_cd45@n_jsd` <dbl>, `stim_cd38@n_jsd` <dbl>, #> #   `stim_cd34@n_jsd` <dbl>, `stim_cd19@n_jsd` <dbl>, `stim_cd45@t_jsd` <dbl>, #> #   `stim_cd38@t_jsd` <dbl>, `stim_cd34@t_jsd` <dbl>, `stim_cd19@t_jsd` <dbl>, #> #   `stim_cd45@r_jsd` <dbl>, `stim_cd38@r_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   jsd #>    <chr>      <chr>  <chr>       <dbl> #>  1 j          cd45   stim        0.818 #>  2 j          cd38   stim        0.909 #>  3 j          cd34   stim        0.694 #>  4 j          cd19   stim        0.818 #>  5 u          cd45   stim        0.818 #>  6 u          cd38   stim        0.727 #>  7 u          cd34   stim        0.891 #>  8 u          cd19   stim        0.853 #>  9 c          cd45   stim        0.790 #> 10 c          cd38   stim        0.790 #> # ℹ 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0368   0.0522   0.0445   0.0387   0.0503   0.0329   0.0368 #> 2 mario     0.0331   0.0435   0.0435   0.0352   0.0414   0.0393   0.0311 #> # ℹ 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0368 #>  2 kirby   b          0.0522 #>  3 kirby   c          0.0445 #>  4 kirby   d          0.0387 #>  5 kirby   e          0.0503 #>  6 kirby   f          0.0329 #>  7 kirby   g          0.0368 #>  8 kirby   h          0.0271 #>  9 kirby   i          0.0484 #> 10 kirby   j          0.0329 #> # ℹ 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_threshold` `cd34@a_threshold` #>   <chr>                <dbl>              <dbl>              <dbl> #> 1 kirby               0.0625             0.0938             0.125  #> 2 mario               0.0588             0                  0.0588 #> # ℹ 101 more variables: `cd19@a_threshold` <dbl>, `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0.0625 #>  2 kirby   a          cd38    0.0938 #>  3 kirby   a          cd34    0.125  #>  4 kirby   a          cd19    0.0938 #>  5 kirby   b          cd45    0.267  #>  6 kirby   b          cd38    0.2    #>  7 kirby   b          cd34    0      #>  8 kirby   b          cd19    0.2    #>  9 kirby   c          cd45    0      #> 10 kirby   c          cd38    0.1    #> # ℹ 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   rsplit_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `rsplit_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"Find k-nearest neighbors cell CyTOF dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents CyTOF measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional arguments pass RANN::nn2","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  246  220  412  867  921   26  856  919  124   801 #>    [2,]  422  234  776  313  976  259  855  669  928   997 #>    [3,]  688  684  700  309  361  683  962  211   18   217 #>    [4,]   54  602  832  938  859  481  572  649  354   373 #>    [5,]  875  611  157  800  245  487  610  966  743   141 #>    [6,]  476  467  877  948  611  692  972  486  464   245 #>    [7,]  529  762  191  389  846  135  589  583  476   917 #>    [8,]  425  914  218  734  344  506  590  895   85   103 #>    [9,]  489  117  299  733  386  313  543  855  169   554 #>   [10,]  211  741  700   30  812  580  217  840  493   824 #>   [11,]  906  809  297  382   76  606  927  105  502   254 #>   [12,]  327  930  894  511  337  184  441   45  626   334 #>   [13,]  510  786  963   22  895  866  420    5  133   726 #>   [14,]  330  371  892  440  212  214  732  640  255   744 #>   [15,]  777  282  500   71  213   79  271  111  188   884 #>   [16,]   74  907  436  188  107  764  661  473  500   499 #>   [17,]  409  142  811  649  572  712  988  261  140   225 #>   [18,]  129  375  960  160  459  683  688  503   61   224 #>   [19,]  676  960  203  922  680  324  224  691  795   298 #>   [20,]   50  408  512  333  612  677  462  696  251   289 #>   [21,]  497  755  339    1  635  124  559  272  665   921 #>   [22,]  805  961  866  879  786  726  963  405  781   817 #>   [23,]  962  308  846  309  490  390  321  991  191   217 #>   [24,]   67   77  780  935  210  521  662  916  264   955 #>   [25,]  666  290  685  118  792  553  646  804  421   113 #>   [26,]  801  410  874  355  246  867  331  774  807   921 #>   [27,]  622  825  393  451  293  237  150  525  272   138 #>   [28,]  245  395  247  506  173  236  460  161  563   438 #>   [29,]  910  260  222  154  596  810   66  581  870   902 #>   [30,]  812  217  815  211  565  785  580  648  840   699 #>   [31,]  276  492  257  291  253  799  551  525  975   738 #>   [32,]  835  576  232  719  871  403  888  842  480   108 #>   [33,]  477  526  171  813  562  403  264  260  373   185 #>   [34,]   69  778  693  268  596  181   80  239  901   541 #>   [35,]  262  571  990  307  946   99  123  522  448   958 #>   [36,]  278  565  300  594   62   37  407  312  455   785 #>   [37,]  762  191  634  312  455  594  565  785   36   278 #>   [38,]  708  466  463  126  199   56  381   65  736   802 #>   [39,]  200  145  713  814  533  377  433  569  194   427 #>   [40,]  624  655  235  229  558  397  694  464  743   642 #>   [41,]  296  705  166  401  721  402  230  215  280   829 #>   [42,]  775  950  657  849  204  552  184  598  832   482 #>   [43,]  516  251  345  242  994  546  545  612   53   754 #>   [44,]  929  221  473  468  534   88  730  900  503   224 #>   [45,]  894   85  441  511  184  327   12  269  956   914 #>   [46,]  603  269  956  766  127  441  656  437  183   751 #>   [47,]  586  992  596   48  239  682  391  374  721   260 #>   [48,]  391  682  268  778  399  238   69   47  596   349 #>   [49,]  808  669  488  715  183  833  250  766  791   976 #>   [50,]   20  408  512  494  462  535  333  637  767   627 #>   [51,]  744  445  679  316  212  732  770   14  371    64 #>   [52,]  986  605  318  967  912  737  539  862  532   343 #>   [53,]  737  532  242  517   43  605  986  623  443   516 #>   [54,]  373  827  231  336  334    4  354  859   80   602 #>   [55,]  215  190  717  139  568  829  515  816  530   402 #>   [56,]  736  802  720  164  997  466  405  961  422   860 #>   [57,]  458  340  216  790  599  578  570  567  821   388 #>   [58,]  650  355  434  148  383  410  331  314  400   993 #>   [59,]  190  705  515  402  829  215  942  230   55   925 #>   [60,]  609  982  203  324  315  664  411  351  853   795 #>   [61,]  160  683  349  820  815  275  428  565  406    30 #>   [62,]  594  785  278   36  328  298  220  528  115   996 #>   [63,]  926  366 1000  546  595  818  437  771  345   754 #>   [64,]  114  316  168  644  517  689  445  674   51   255 #>   [65,]  727  126  463  258  199  776  736  531  928   422 #>   [66,]  154  830  910  539   29  870  810  544  757   222 #>   [67,]  521  671  935  569  238   24  575  662  713   176 #>   [68,]  277  904  654  985  897  219  592  513  325   987 #>   [69,]  778   34  693  268  596   80  901  239   48   349 #>   [70,]  171   95  507  618  249  403  108  541  430   222 #>   [71,]  282  319  777  764  111  661  844   15  907   244 #>   [72,]  470  865  819  498  435  424  230  198  228   883 #>   [73,]  660  256  122  837  882  642  432  452  457   739 #>   [74,]  907   16  281  764  472  661  710  634  473   107 #>   [75,]  469  621  369  134  481  903  806  845  849   787 #>   [76,]   11  396  121  382  120  927  102  254  199   828 #>   [77,]   24  780  310  210  992  959  104  586  403   955 #>   [78,]  100  252  891  208  393  772  223  673  825   640 #>   [79,]  752  514  493  111  533  213   15  377  500   699 #>   [80,]  859  601  354  620  336  231  827  268  573    69 #>   [81,]  668  585  109  573  638  292  820  859  300    80 #>   [82,]  225  238  625  268  317  620  602  859  347   142 #>   [83,]  898  348   87  466  208  223  536  673  736   131 #>   [84,]  840  924  292  648  638  745  803  109  585   144 #>   [85,]   45  894  983  425  511  184  793  914  775   101 #>   [86,]  667  152  911  670  415  419  932  449  130   556 #>   [87,]  208  673  131  536  891  720  637   78  362   201 #>   [88,]  468  929  416  984  224  167  321   44  503   680 #>   [89,]  507  102  871  386  396  489  480  828  719   970 #>   [90,]   97  630  451  896  524  392  263  110  311   794 #>   [91,]  717  816  181  867  747  240  681  132  763   801 #>   [92,]  264  955  185  254  403  477  465  171  773    33 #>   [93,]  124  265  774  287  873  412  119  588  582   964 #>   [94,]  653  123  323  579  783  606  863  297  482   906 #>   [95,]  581   70  970  636  973  618  222  507  902   480 #>   [96,]  388  216  202  458  356  739  180  394  195   758 #>   [97,]   90  896  451  639  622  630  272  524   21   263 #>   [98,]  483  439  155  186  718  394  537  749  170   555 #>   [99,]  522  441  626   46  511  269  307  930  914    45 #>  [100,]  850  393  640  779  748   78  765  665  755   378 #>  [101,]  843  983   85  425  218    8  427  734  590   493 #>  [102,]   89  507  927  828  386  502  396  465  871   162 #>  [103,]  590  731  687  368  699  899  144  460  271   438 #>  [104,]  163  280  721  296  992   82  586   77  391   149 #>  [105,]  845  363  723  134  811  120  809  621  382   600 #>  [106,]  198  228  380  153  156  288  577  722  499   176 #>  [107,]  614  294  156   16  288  907  698   74  920   111 #>  [108,]  193  232   70  636   95  547  842  260   29   480 #>  [109,]  585  668   81  803  638  292   84  793  924   184 #>  [110,]  628  524  861  121  794  283  199  738  396   970 #>  [111,]  514  319   71  647  661  288  920   79  213   752 #>  [112,]  248  732  212  371  697  679  750  807  999   400 #>  [113,]  421  290  685  474  553  118   25  665  378   753 #>  [114,]  689   64  644  568  316  816  951  518  759   168 #>  [115,]  589  762  594  528  191  704  839  846  785    62 #>  [116,]  761  333  366  818  545  177 1000  716  439   512 #>  [117,]  733    9  299  489  386  855  162  828  169   847 #>  [118,]  685  421   25  290  792  553  440  384  753   113 #>  [119,]  137   93  414  326  378  124  339  964  265   774 #>  [120,]  363  105  811  382   76  927  723  311   17   121 #>  [121,]  199  828  463  396  927  102  733  531  126   386 #>  [122,]  256  882   64  837  445  517  660  623  532    53 #>  [123,]   94  653  571  323   35  579  482  863  783   897 #>  [124,]   93  856  755  412  665    1  339  528  774   265 #>  [125,]  932  192  431  306  557  670  746  415  244   491 #>  [126,]  463   65  199  733  727  117  274  776  855   828 #>  [127,]  742   46  226  751  437  771  603  496  651   872 #>  [128,]  647  329  319  876  980  300  731  549  939   699 #>  [129,]   18  937  149  459  160  446  900  688  533   671 #>  [130,]  667  306  706  484  821  718  415  782  195   449 #>  [131,]  720   87  891  362  637  233  673  997  879   234 #>  [132,]   91  639  717  816  374  240  272  759  181   867 #>  [133,]  510   13  420  895  678  125  963  946  513   571 #>  [134,]  845  621  369  105  469  317  811  723  600    75 #>  [135,]  839  589  948  389  476  191  917  455  151     7 #>  [136,]  150  608  943  674  293  364  690   27  255   696 #>  [137,]  119  588  385   93  538  339  265  964  635   414 #>  [138,]  525  765  266  205  237  252  799  931  886   291 #>  [139,]  530  717  301   55  763  568  816  639  675    91 #>  [140,]  740  261  919  409  973  478  629  921  165    17 #>  [141,]  352  453  798  487  711  610  270  875  646   157 #>  [142,]  712   17  347  225   82  409  988  756  728   625 #>  [143,]  417  561  429  559  273  675  139  339  680   869 #>  [144,]  438  418  590  924  952  833  455   84  103   987 #>  [145,]  427  533  500  377   15   79  700  884  188   684 #>  [146,]  574  249  773  430  543  376  813  930  871   327 #>  [147,]  612  516  255  744   43  690  229   14  330   789 #>  [148,]  434   58  650  715  833  355  993  974  697   300 #>  [149,]  163  459  937  848  428  347  160  391  503   625 #>  [150,]  136   27  293  454  622  825  608  451  393   674 #>  [151,]  831  619  839  873  666  209  389  917  207   135 #>  [152,]   86  670  911  667  884  419  932  556  415   125 #>  [153,]  584  335  156  106  294  107  198  577  380   179 #>  [154,]  810   66  910   29  544  260  870  222  539   652 #>  [155,]  394  703   98  830  862  177  358  537  170   295 #>  [156,]  107  288  294  380  920  577  614  698  868   965 #>  [157,]    5  875  611  141  487  270  743  519  966   800 #>  [158,]  915  681  934  302  747  181  996  286  243   278 #>  [159,]  729  716  851  637  786  253  969  720  597   551 #>  [160,]  275  428  459   61  683  900  503  937  349   848 #>  [161,]  781  173  563  227  332  788  797  974  805    28 #>  [162,]  386  342  376  169  733  502  117  828  489     9 #>  [163,]  149  721  104  937  848  391  459  424  883   346 #>  [164,]  872  405  496  817  422  259  860  976  226   855 #>  [165,]  748  874  237  973  266  801  919  765  581   593 #>  [166,]  401  728  296  559  263  988  142  280  347   756 #>  [167,]  826  416  984  561   88  566  429  328  929   468 #>  [168,]  623  517   64  971  881  909  674  644  724   114 #>  [169,]  376  162  386  342  847  337  733  489    9   531 #>  [170,]  186  658  822  537  555  155  912   98  244   706 #>  [171,]   70  465  403  477   33  185  871  507  813   574 #>  [172,]  836  769  902  444  581  222  994  314  909   540 #>  [173,]  161  563  227  781  974  267   28  607  332   788 #>  [174,]  851  289  462  512  694  627   20  637  516   690 #>  [175,]  448  254  523  262  338  475  890   92  906   626 #>  [176,]  575  521  713  671  399  182   67  935  200   406 #>  [177,]  545  116  333  358  394  677  242  761  749   155 #>  [178,]  760  732  212  112  792  440  248  583  996   807 #>  [179,]  461  584  882  698  243  942  730  644  498   190 #>  [180,]  757  652  971  388  881  830  810   66  154   193 #>  [181,]  747   91  867  239  240  693  302  816  681   717 #>  [182,]  406  752  713  820  367  493  176  827   54   575 #>  [183,]  715  766  976  496  313  993  847  808  956    46 #>  [184,]  894   45  793   12  327  441   85  939  511   775 #>  [185,]  465  264  955  403   92  171  602  477  502   254 #>  [186,]  555  170  761  822  818   98  483  491  893   658 #>  [187,]  796  735  531  989  938  787  928  591  169   776 #>  [188,]  436  500  907   16  884  764   15   71  514   684 #>  [189,]  555  431  893  746  196  186  353  483  495   457 #>  [190,]   55  730  215  515   59  689  402  301  179   341 #>  [191,]  762   37  529  589  115  846    7  634  135   594 #>  [192,]  933  236  460  822  932  491  244  731  734   563 #>  [193,]  232  108  257  636  931  480  842   32  936    95 #>  [194,]  241  981  834  200  357  575  841  752  213   182 #>  [195,]  483  343  718  706  295  986   98  196   52   555 #>  [196,]  189  737  986  555  457   53  542  242  483   195 #>  [197,]  452  944  495  556  432  670  542  614  486   557 #>  [198,]  228  819  470  424  435   72  883  965  577   498 #>  [199,]  121  463  828  126  733   65  117  531  396   727 #>  [200,]  713  194  176  377  569  671  575  834  182   514 #>  [201,]  701  364  696  851  208  253  551   87  673   690 #>  [202,]   96  881  388  180  608  878  320  216  677   696 #>  [203,]  795  324  609   19   60  664  960  922  321   308 #>  [204,]  598  775  657  218  418   42  592  344  438   425 #>  [205,]  266  789  765  769  892  400  138  251  331   874 #>  [206,]  760  634  267  732  476  248  692  999  178   112 #>  [207,]  520  858  404  725  619  209  287  791  873   788 #>  [208,]   87  673  536   78  891  131  252  291  201   772 #>  [209,]  839  725  520  619  207  287  404  151  858   833 #>  [210,]  995  780   24  403  570   77  264  477  526   916 #>  [211,]  217  812   30  309   10  700  580  361  815   684 #>  [212,]  371  732  112  679  248  892   14  440  178   372 #>  [213,]   15  777  357  329  983  752  282  111  957    79 #>  [214,]  440  371  892   14  400  520  330  858  404   212 #>  [215,]  402  230   55  865  190  498   72  132  717   341 #>  [216,]  388  458  295  652   96  578  394  180  718   830 #>  [217,]  211  812  309   30  361  580   10  815  191   700 #>  [218,]  425    8  344  204  775  598  101   85  590   843 #>  [219,]  853   68  482  897  552  904  592  982  806   615 #>  [220,]  246  298    1  681  763  328  856  922  412    62 #>  [221,]  473   44  762  929  529  312  191  534  361    74 #>  [222,]  581   29  902  910  541  596  836  172  618    95 #>  [223,]  233  613  362  234  378  941  527  891  772   997 #>  [224,]  503  962  960  416  900   88  984  459  468   308 #>  [225,]   82  238  268  625  859  620  347   80  602   682 #>  [226,]  313  976  127  496  771  872  183    9  535   855 #>  [227,]  974  788  173  725  332  404  161  754  797   999 #>  [228,]  198  819  424  883  470   72  435  641  106   722 #>  [229,]  624  655  516  999  558  345  235  147   43   464 #>  [230,]  402  215  865   72  470  498  942  925  721   819 #>  [231,]  336  827  373  354  945   54  601  939   80   334 #>  [232,]  193  108  842   32  936  257  835  888  260   652 #>  [233,]  362  997  234  223  891  259  879  613  797     2 #>  [234,]  362  259  233  891  997    2  252  223  422   797 #>  [235,]  624  384  397  229  655  792  464   40  206   954 #>  [236,]  506  460  963   28  895  563  192  245  395   368 #>  [237,]  165  748  272  636  525  266  759  765  902   138 #>  [238,]  225   82  620  682  602   48  268  859   80   601 #>  [239,]  693  596  915  181   69   47  901  778  498    34 #>  [240,]  867  747  801  816  372  759   91  181  779   874 #>  [241,]  981  885  841  357  334  575  549  194  945   784 #>  [242,]  545   43  358  862  177  761  677  737  116    53 #>  [243,]  644  918  915  302  965  498  698  544  365   158 #>  [244,]  933  282  777  844  449  822   71  319  170   192 #>  [245,]   28  395  875  236  563  247  173  800  161   460 #>  [246,]    1  220  867   26  412  801  919  921  298   856 #>  [247,]  395  985  325  987  823   28  438  952  418   245 #>  [248,]  112  732  697  212  807  999  750  371  679   754 #>  [249,]  430  146  574  376  813  354  171  632  507   489 #>  [250,]  550  791  669   49  798  808  964  610  509   422 #>  [251,]  994  789   43  540  345  769  754  546  205   909 #>  [252,]  259  891  494  234  291  274  138  765    2    78 #>  [253,]  729   31  551  320  276  799  201  696  408   159 #>  [254,]   92  955  502  465  264  185  871  773  719   403 #>  [255,]  640  284  892  293  943  674   14  330  789   316 #>  [256,]  122  660  882  623  837  532   53  517   73   737 #>  [257,]  276  931  975  193  480  283  108  232  636    31 #>  [258,]  727  560  531   65  905  863  600  796  187   887 #>  [259,]  234  252  891  494  362  164  997  535    2   817 #>  [260,]  910   29  154  916  810   33   70  222  596   477 #>  [261,]  140  740  919  988  409  311  973   17  921   707 #>  [262,]  958   35  338  522  990  616  548  279  448    99 #>  [263,]  988  311  728  261  166  310   17  559  142   140 #>  [264,]  955   92  185  477  403  780   33  465  171   254 #>  [265,]   93  774  582  964  423  287  873  791  591   619 #>  [266,]  765  205  769  138  165  886  789  748  874   525 #>  [267,]  974  173  833  227  455  687  476  206  607   563 #>  [268,]  778  349  625   48   69  225   80  859   34   347 #>  [269,]  956   46  656  914  603  766  441  360   45   894 #>  [270,]  948  917  654  141  325  389  151  277  135   831 #>  [271,]  777  899  282  731  557  508  699  103   71   764 #>  [272,]  237  759  165  919  748  240  779  801  393   132 #>  [273,]  635  339  137  588  315  143  119  412  429    21 #>  [274,]  861  970  748  973  252    2  126  765  291   313 #>  [275,]  428  160  286  848  341  349  459  322   61   504 #>  [276,]  257  975   31  931  940  799  551  878  320   480 #>  [277,]   68  654  413  513  985  897  325  610  800   904 #>  [278,]  594  312   36  565   62   37  407  785  996   158 #>  [279,]  958  940  633  888  338  567  742  522  651   597 #>  [280,]  104  166  296  263  756  988  310  142   82    77 #>  [281,]  710  472  844  443   74  698  686  978  365   907 #>  [282,]  777   71  244   15  319  271  213  449  111   844 #>  [283,]  738  923  492  257  695  628  975  794  193   276 #>  [284,]  640  255  330  293   14  779  744  892  674   421 #>  [285,]  672  508  473  309  877  188  972  217  557   500 #>  [286,]  341  915  275  848  965  428  498  424  158   322 #>  [287,]  873  619  265  520  209  207   93   26  582   858 #>  [288,]  957  920  156  380  111  514  868  834  357   107 #>  [289,]  627  462  637  851   50   20  690  767  174   512 #>  [290,]  553  113   25  421  685  118  646  772  666   378 #>  [291,]  252  617  861  525  274  138  628   31  494    78 #>  [292,]   84  840  924  638   81  109  648  585  793   820 #>  [293,]  640  255  674  284  622  943  393   27  779   759 #>  [294,]  614  107  156  967  153  556  698  432  335   318 #>  [295,]  718  838  155  706  821  394   98  195  830   703 #>  [296,]  721  586  992   47  166  310  104  402  988   374 #>  [297,]  906  809  606   11  783  579  381  863  448   258 #>  [298,]  922  220  328   62  691  960  246  763  681   984 #>  [299,]    9  117  543  733  489  496  847  386  860   226 #>  [300,]   36  980  820   81  148  565  128  407  292   833 #>  [301,]  530  387  139  816  730  717  681  763  568   675 #>  [302,]  372  934  679  747  158  316  996  181  918   243 #>  [303,]  860  961  802  989  496  360  872  669  598   571 #>  [304,]  629  385  478  591  593  409  774  921  383   776 #>  [305,]  436  188  884  911   16  500  499  377  145   684 #>  [306,]  130  483  706   98  415  667  449  431  484   186 #>  [307,]  360  895  914   99    8  425  269  571  479   218 #>  [308,]  846  962  321   23  795  416  115  191  929   762 #>  [309,]  217  211  361  812   30   23  962  191  683   700 #>  [310,]  707  311  988  794  811  261  403  620  263   602 #>  [311,]  988  310  794  261  263  707  140  740   17   409 #>  [312,]  278  594   37  565  634   36  762  361  661   785 #>  [313,]  976  855  226  496  183    9  554  422    2   776 #>  [314,]  410  769  434  400  750  355  874  331  836    58 #>  [315,]   60  609  203  273  982   19  411  351  588   370 #>  [316,]  679  372   51   64  302  540  445  212  644   114 #>  [317,]  621   82  225  369  811  134    4  142  625   481 #>  [318,]   52  605  539  544  912  757  532  577   66   698 #>  [319,]  647   71  128  111  661  844  282  329  777   876 #>  [320,]  729  551  799  878  408  749  716  633  940   177 #>  [321,]  308  416  795  846  929  962   88   23  203   224 #>  [322,]  504  965  920  901  915  693  365  918  544   275 #>  [323,]  783   94  606  653  123  523  890  906  579   297 #>  [324,]  375  795  203  960  691  609  768  390  962    60 #>  [325,]  247  985  823  948  395  654  987  135  952    28 #>  [326,]  414  378  964  119    2  774  385  593  629   941 #>  [327,]   12  930  894  441  511  337  184   45  626   945 #>  [328,]  416  681  220  984  298   62  856  528  594   922 #>  [329,]  549  128  939  647  752  979  357  319  980   885 #>  [330,]   14  440  892  371  214  212  640  284  255   744 #>  [331,]  400  410  874  314  858  850   58  750  650   434 #>  [332,]  788  404  227  464  161  725  966  173  974   781 #>  [333,]  116  545  512  716  177  761   20  408  366    50 #>  [334,]  827   54  231   12  945  939  373  241  327   511 #>  [335,]  584  153  294  179  967  882  758  942  156   107 #>  [336,]  231  827  354  373  945  601   80   54  813   939 #>  [337,]  342  376  354   12  327  847  169  938  668   249 #>  [338,]  567  790  968  949  279  522  888  599  930   773 #>  [339,]  124  635  119  588  137  273   93   21  412     1 #>  [340,]  995  570   57  599  210  790  505  852  562   526 #>  [341,]  286  848  915  424  498  883  275  819  965   239 #>  [342,]  376  337  162  502  169  386  847  938  465    12 #>  [343,]  195   52  706  986  967  170  449  356  295   758 #>  [344,]  218  425  598  418  204    8  987  506  438   360 #>  [345,]  754   43  251  546  999   63 1000  512  516   697 #>  [346,]  641  721  722  104  586  163  992  228  296   391 #>  [347,]  268  142  625  225  848  778  712   82  349   428 #>  [348,]  898  453  798  527  941  711  736  997  233   223 #>  [349,]  268  625  778  406  428  573   69   61  275    80 #>  [350,]  925  547  180  374  631  168  923  971  636   881 #>  [351,]  423  370  411  768  588  412  609  704  265   564 #>  [352,]  453  141  527  941  645  798  348  666  711   414 #>  [353,]  893  558  746  491  495  189  555  359 1000   467 #>  [354,]  601  336   80  231  337  827  859  602  373   249 #>  [355,]   58  650  434  410  148  314  383   26  331   993 #>  [356,]  758  967  986   52  757  343  195  318  737   623 #>  [357,]  957  549  981  885  241  841  834  868  329   213 #>  [358,]  862  444  545  177  909  994  242  830  677   394 #>  [359,]  447  761  491  818  716 1000  116  893  595   512 #>  [360,]  479  269  914  956  307  895  598  506  656   425 #>  [361,]  683  309  217  684  211  312   30  812   61   688 #>  [362,]  233  234  891  997  259  627  797  223  637   879 #>  [363,]  120  105  811  382   17  723  845  134  988   927 #>  [364,]  696  608  943  690  201  612   20  799  289   551 #>  [365,]  686  918  978  407  698  901  504  322  710   912 #>  [366,]  818  595 1000  926  116   63  761  333  437   651 #>  [367,]  638  824  406  292  493  573  481  375  182    81 #>  [368,]  103  460  590  899  418  438  687  506  144   731 #>  [369,]  134  621  845  411  370  317  806  768  481    75 #>  [370,]  411  768  351  423  691  609  369  913  412   591 #>  [371,]  212   14  892  440  112  732  214  330  999   248 #>  [372,]  302  679  750  747  316  212  240  996  807   934 #>  [373,]  231   54  336  813  354  945  827  334  601   602 #>  [374,]  547   29   47  132  636  222  596  260  108   902 #>  [375,]  691  324  960  367  840  785  745  638   18   648 #>  [376,]  342  162  337  386  169  249  146  465  489   502 #>  [377,]  514  533   79  500  436  200  684  145  288   176 #>  [378,]  414  326  941  527  223  850   93  119  665   520 #>  [379,]  398  977  389  917  664  270  566  666  948   846 #>  [380,]  577  288  834  156  957  868  852  106  357   198 #>  [381,]  448  463  733  297  802  162  117  199  860   121 #>  [382,]  811   11  927  105  363  502  120  572   76   809 #>  [383,]  582  650  478   58  488  593  776  355  774   928 #>  [384,]  235  954  397  792  624  118  655  744  229   642 #>  [385,]  560  304  538  591  964  265  582  998  564   928 #>  [386,]  162  376  489  507  169  733  828  342   89     9 #>  [387,]  301  501  770  753  934  534  530  730  372   954 #>  [388,]  216  458  180  652   96  757  202  830  356   232 #>  [389,]  917  135  839  948  589  151    7  977  831   115 #>  [390,]  589  991  580  211  664   23  741  324  785   309 #>  [391,]   48  992  268  586   47  399  238  778  848   349 #>  [392,]  110   90   97  896  120  630  524  263  363   709 #>  [393,]  622  825  100   27  640  293  272  748  237    78 #>  [394,]  155  177  830  358  703   98  545  749  862   439 #>  [395,]  247   28  245  460  506  987  368  325  236   823 #>  [396,]   89  719  102  828  121  386  871  507  199   162 #>  [397,]  235  519  384   40  624  792    6  655  118   917 #>  [398,]  379    7  389  917  604  566  846  804  948   977 #>  [399,]   48  521  870  575  916  682  391  322  336   176 #>  [400,]  331  410  314  750  874  769  112  434  248   858 #>  [401,]  166  559  728  705   41  639  139  263  829   417 #>  [402,]  215  230  721   72   55  865  498  424  341   819 #>  [403,]  171  185  477  264   92   33   70  465  955   707 #>  [404,]  725  788  858  520  332  207  227  974  209   214 #>  [405,]  872  817  164  456  496  969  226  879  860   616 #>  [406,]  349  820  182  859  625  573   80  367  827   268 #>  [407,]  978  686  365  901  504  918   36  300  278   661 #>  [408,]   50  551   20  799  333  494  878  716  696   512 #>  [409,]   17  140  649  478  572  740  261  304  629   919 #>  [410,]  874  314  750  331  400  355   26  801   58   434 #>  [411,]  370  768  351  423  609  913  369  806  691   591 #>  [412,]  423  588    1  351  246   93  265  124  220   856 #>  [413,]  800  866  610  654  277  487  711  395  961   985 #>  [414,]  941  527  378  964  326  119   93  265  223   774 #>  [415,]  449  667  932  213  777  306  282  244   15   734 #>  [416,]  984  328  224  308   88  321  167  922  929   795 #>  [417,]  561  429  143  559  139  530  984  763  167   675 #>  [418,]  952  438  987  592  144  590  204  368  344   247 #>  [419,]  911   86  556  343  667  130  542  152  670   195 #>  [420,]  395  245  460  236   28  963  506  247  611   368 #>  [421,]  685  113  553  290  118  665  753  330  440   474 #>  [422,]  669    2  855  928  976  776  164  313  808   997 #>  [423,]  412  351  588  265  370  411  591  768   93     1 #>  [424,]  819  883  228  341   72  470  198  498  286   965 #>  [425,]    8  218  914   85  590  344  734  204  101   360 #>  [426,]  615  903  824  657  552   42  204  775  741   481 #>  [427,]  843  101   79  145   15  493  533  983  699   500 #>  [428,]  275  160  848  349  459  778  286  625  268    61 #>  [429,]  417  561  984  763  922  826  328  220  298   167 #>  [430,]  249  146  574  554  489  632  543  507  480    70 #>  [431,]  746  189  893  555  353  483  491  457  306   196 #>  [432,]  452  614  197  542  281  944  495  294  556   472 #>  [433,]  426  824  741  427   10  615  903  700  843   702 #>  [434,]   58  355  650  148  314  993  410  715  400   331 #>  [435,]  470   72  865  577  198  819  810  544  498   965 #>  [436,]  188  500   16  907  514  684  377  764  111   499 #>  [437,]  751  658  537  742  603   46  127  771  926    63 #>  [438,]  418  144  987  952  590  247  592  368  204   506 #>  [439,]  749   98  483  450  116  761  716  177  555   651 #>  [440,]  214  371   14  330  212  178  892  732  112   999 #>  [441,]  894   45  327   46  269   12  956  511  184   766 #>  [442,]  539  912  870  647  836  862  868  979  901   978 #>  [443,]  532  445  698  517  281  605  710   53  365   737 #>  [444,]  886  172  358  994  862  836  909  771  830   703 #>  [445,]   51  443  316  517  679  770  532  710  644   302 #>  [446,]  587  676   18  129   19  960  375  149  691   324 #>  [447,]  595  491  926  818 1000  366  359  761  822   656 #>  [448,]  381  626  162  342  930  502  386  376  522   299 #>  [449,]  244  282  415  170  213  706  777  556  957   319 #>  [450,]  439  749  716  729  333  116  177  320  483   761 #>  [451,]  622   27  825   97  393   90  272  150  454   524 #>  [452,]  197  432  944  542  556  495  614  281  472   294 #>  [453,]  798  352  348  711  941  527  141  550  487   414 #>  [454,]  864  497  293  284  150  474  518  622  393   640 #>  [455,]  833   37  648  144  565  267   36  580  785   634 #>  [456,]  817  405  969  797  872  879  535  462  603   781 #>  [457,]  196  542  189  431  746  739  893  353  432   555 #>  [458,]  216  388   57   96  295  652  356  718  757   180 #>  [459,]  503  900  937  160  428  848  275  149  224   286 #>  [460,]  368  236  506  103  395   28  899  192  687   731 #>  [461,]  179  698  534  882  443  837   74  445  243   770 #>  [462,]  627  637  512  767  797   50  289  535  456    20 #>  [463,]  199  126   65  121  733  727  117  828  531   381 #>  [464,]  332  227  743  404  966  999  624  646  788   267 #>  [465,]  185  502  171  507  602  871  376  773  342   102 #>  [466,]  736   56   65   38  727  463  126  802  887   898 #>  [467,]  563  692  558  476  267  173  899  607  245   353 #>  [468,]   88  984   44  416  503  730  224  929  167   900 #>  [469,]   75  787  845  796  600  849  806  134  621   369 #>  [470,]   72  819  435  865  498  198  424  228  965   544 #>  [471,]  854  991  982  904  853  664   60  390  977   379 #>  [472,]  281  710  844  692   74  944  634  206  495   443 #>  [473,]  221  672   44   74  361   16  529  929  309   762 #>  [474,]  113  497  421  753  685  454  869  864  665   518 #>  [475,]  780  570  955  210   92  264  599  254   24   175 #>  [476,]    6  267  206  135  972  467  877  529  899   634 #>  [477,]   33  526  171  264  403  813   92  185  562   955 #>  [478,]  629  593  383  776  140  740  304  409  921   973 #>  [479,]  360  506  956  269  656  963  438  895  344   598 #>  [480,]  835  871  507   89  489  543  975  719  430   888 #>  [481,]  832  849    4  638  367  938   42  803  369   657 #>  [482,]  653  552  598   42  897  615  657  592  204   849 #>  [483,]   98  439  555  195  186  718  450  189  761   155 #>  [484,]  821  949  841  306  706  338   99  130  968   415 #>  [485,]  538  898  645  137  550  348  385  887  453   560 #>  [486,]  944  508  692  877  472  557  495    6  529   476 #>  [487,]  711  610  800  726  413  798  141  453  866     5 #>  [488,]  808  383  591  582  803  585   49  650  509   109 #>  [489,]    9  386  507  543  117  299  733  430  554   376 #>  [490,]   23  929  962  321  308   88  846  224    3    44 #>  [491,]  447  822  818  595  926  893  933 1000  359   761 #>  [492,]  738  923  283   31  257  628  276  291  861   975 #>  [493,]  793  752  292   79  367  824  843  820   84   840 #>  [494,]   50  259  535  408  252  551  226  637  886   617 #>  [495,]  944  844  692  353  558  197  893  244  472   189 #>  [496,]  872  183  860  164  855  226  313  976  847   405 #>  [497,]   21  864  518  755  454  474  665  779  753   568 #>  [498,]  965  865   72  819  470  915  544  341  424   243 #>  [499,]  160  900  937  436  920  683  275  514  684    16 #>  [500,]  188  436   15  514  684  764   79   71  907   111 #>  [501,]  387  954  583  804  753  770  566  826  792   384 #>  [502,]  465  342  927  162  386  376  102  254  185   572 #>  [503,]  900  459  224  160  428  683  275  848  937   960 #>  [504,]  322  920  407  901  365  686  965  647  275   918 #>  [505,]  834  852  200  194  380  981  957  935  106   575 #>  [506,]  236  479   28  460  963  895    8  368  360   395 #>  [507,]   89  871  102  386  489   70  465  480  171   376 #>  [508,]  877  764  557  972  271  486  899  634  907    71 #>  [509,]  913  998  564  745  791  488  768  803  591   806 #>  [510,]   13  895  307  963  571  946  786  133   22   866 #>  [511,]   45  894  327   12  930  968  441   85  626   334 #>  [512,]  333   20  462   50  116 1000  366  345  767   627 #>  [513,]  277  897   68  413  985  654  395  987  344   592 #>  [514,]  111  377   79  288  920  752  500  436  533    61 #>  [515,]  829   55  190  705   59  139  675  953  301   530 #>  [516,]   43  345  229  147  612  242  251   53  558   512 #>  [517,]  532  623  443  168  445  644   53   64  316   737 #>  [518,]  864  568  497  114  951  753  689  816  454   284 #>  [519,]  397  235  917  157  141  384   40   25  118     6 #>  [520,]  858  207  404  725  209  287  214  331  619   873 #>  [521,]  935  575  852   67  399  176  916  562   48   391 #>  [522,]   99  626  930  441   46  299  127  543  511   279 #>  [523,]  890  323  175  783  606  906   94  880  814   448 #>  [524,]  861  740  973  628  748  629  110  970  140   237 #>  [525,]  138  765  237  266  931  291  274  799  970   748 #>  [526,]   33  562  477  813  916  838  936  171  260   599 #>  [527,]  941  414  378  223  798  453  348  964  352   326 #>  [528,]  856  996  287  115  328  178  826  124  807    62 #>  [529,]  762  191    7  634   37  476  206  972  221   135 #>  [530,]  301  139  763  717  681  816   55   91  568   984 #>  [531,]  187  169  735  733  776  989  928  828  258   796 #>  [532,]  517  443   53  623  605  737  318   52  445   986 #>  [533,]  377   79  684  700  514  145  500  688   61   182 #>  [534,]  770  730  461  934  221  387   44  158  837   445 #>  [535,]  767   50  797  771  494  226  259  627  462   976 #>  [536,]  208   87  673   83  201  131   78  891  720   291 #>  [537,]  658  751  979  437  742  703  651  155  170    46 #>  [538,]  385  564  560  964  550  998  137  791  643   485 #>  [539,]  912  442  862   66  605  318  870  836  358   978 #>  [540,]  769  994  251  172  789  316  750  314  697   909 #>  [541,]  618  222  632  596  601  836  554  581  620    70 #>  [542,]  432  457  452  196  189  556  197  614  495   195 #>  [543,]  299  146  489  574  871  386    9  480  773   835 #>  [544,]  154  965  498  810  318  322  865   66  243   918 #>  [545,]  177  242  333  116  677  358  761  862  366   818 #>  [546,]   63  754  345  697  876  607  994  978  926  1000 #>  [547,]  374  636  108   29  902  971  260  222  724   910 #>  [548,]  576  719  975  616  708  396  381  958  262   543 #>  [549,]  329  885  357  979  647  868  841  939  128   957 #>  [550,]  250  538  887  791  798  964  669  711  560   564 #>  [551,]  799  408  696  320  878  494   50   20  729   716 #>  [552,]  657  592  803  924   42  204  482  952  987   598 #>  [553,]  290  421  772  646  685  118  613  113  440    25 #>  [554,]  430  632  313  489    9  541  249  169  618   993 #>  [555,]  186  761  893  189  483  818  439  170  822   491 #>  [556,]  614  670  197  911  449  452  107  294  542   282 #>  [557,]  508  271  877  972  899  486  944  932  777   764 #>  [558,]  353  692  655  893  467  229  624  495  516   345 #>  [559,]  728  166  763  139    1  417   21  429  712   263 #>  [560,]  385  600  258  998  796  538  787  727  591   643 #>  [561,]  417  429  167  984  143  530  680  826  416   763 #>  [562,]  526   33  981  477  813  838  852  945  241   885 #>  [563,]  173  161  467  607  236  781   28  267  245   227 #>  [564,]  538  913  998  509  791  385  964  806  265   591 #>  [565,]  815   36   30  312  661   37  278  300  699   455 #>  [566,]  804  826  583  115  167  846  528  501  308   321 #>  [567,]  338  888  790  576  279  578  835  599  773   936 #>  [568,]  518  816  114  717  639  139   55  689  864   951 #>  [569,]  713  671   67  200  814  182  662  176  521   575 #>  [570,]  599  790  526   92  264  562  477  780  784    33 #>  [571,]  307  303  961   35  866  360  598   22  123   479 #>  [572,]  649  927  811  602  409   17  502  938  707     4 #>  [573,]   81  859  638  625   80  349  668  406  268   585 #>  [574,]  146  773  249  430  543  871  813  171  835   930 #>  [575,]  521  176  834  981  852  399  241  357  935   562 #>  [576,]  719  835   32  888  567  975  480  871  548   543 #>  [577,]  380  435  318  156  198  470  544  810  868   757 #>  [578,]  567  279  576  888  940  958  338  216  276   936 #>  [579,]  863  905  297   94  606  258  809  887  906   783 #>  [580,]  812   30  648  823  211  217  840  455  144    10 #>  [581,]  902  222   95  172  636  541  618  836  165    29 #>  [582,]  774  383  265  488  650  591  593  964   58   928 #>  [583,]  804  760  954  792  178  528  566  206  762   115 #>  [584,]  335  153  179  942  435  294  156  461  470   198 #>  [585,]  109  668   81  803  638  292  488   84  924   573 #>  [586,]  992   47  721  916  391   48  296  682  260   238 #>  [587,]  446  676   18  129  317   19  375  824   75   149 #>  [588,]  412  423  351  265   93  137  124    1  339   370 #>  [589,]  135  115  839  191  762  389   37  846  785     7 #>  [590,]  103  368  438  418  144  425  731    8  793   687 #>  [591,]  488  383  582  385  998  265  304  423  187   796 #>  [592,]  952  987  418  552  438  985  204  657  598   924 #>  [593,]  629  921  478  774  383  850  582   26  748   874 #>  [594,]  278  312   62  785   36   37  115  762  328   996 #>  [595,]  926 1000  818  447  366   63  761  437  491   116 #>  [596,]  693  682  222   69  239  618  541   29   47    48 #>  [597,]  969  651  751  742  633  990  456  958  749   279 #>  [598,]  204  775  344  360  218   42  657  987  418   592 #>  [599,]  570  790  562  526  784  567  880  338  477   949 #>  [600,]  643  560  845  796  787  723  998  806  258   469 #>  [601,]   80  354  620  859  336  602  682  231  618   541 #>  [602,]  620  601  354  465  185  859  238  649  572   707 #>  [603,]   46  656  956  269  766  437  127  183  751   926 #>  [604,]  954    7  947  398  529  384  486  397  672   501 #>  [605,]   52  912  532  986  539  318  862  443  737   242 #>  [606,]  906  783  297  809   11  579   94  890  469   323 #>  [607,]  876  822  926  933  687  173  595   63  563   546 #>  [608,]  943  696  364  136  799  674  881  612  878   293 #>  [609,]   60  351  411  370  203  982  768  664  324   795 #>  [610,]  800  711  413  487  798  654  866  250  805   332 #>  [611,]  875    5  245    6  157  467  420  743  464   563 #>  [612,]  677  147   20   43  251  943  516  789  696   255 #>  [613,]  223  772  233  646  362  553  673  694  941   527 #>  [614,]  294  107  556  432  156  281   74  452  698   907 #>  [615,]  426  903  204  482   42  775  552  657  592   598 #>  [616,]  299  405  617  958  969  860  522  872  279   802 #>  [617,]  291  494  975  616  252  274  259  299  117     9 #>  [618,]  541  596  601  222  620   70   95  682  581   554 #>  [619,]  873  831  151  287  207  839  209  791  265   520 #>  [620,]  601  682  602   80  859  238  707  618  354   225 #>  [621,]  134  369  317  845   75  469  811  105  481     4 #>  [622,]   27  825  393  451  293  272  237  150  640   100 #>  [623,]  517  532  168   53  737  443  318  967  605   986 #>  [624,]  229  235  655  558  464  999   40  516  384   345 #>  [625,]  268  349  225  573  347  406  778   82  859   428 #>  [626,]  930  522   12  327  511  441   99  968  894   448 #>  [627,]  462  767  797  289  637  362  535  512   50    20 #>  [628,]  861  970  110  524  274  199  291  828  121   973 #>  [629,]  593  478  921  304  740  774  748  383  919   973 #>  [630,]  923   90  738  283   97  110  451  794  492    27 #>  [631,]  842  652  547  232  180  210  810  995  260   108 #>  [632,]  993  836  554  541  430  771  434  249  314   618 #>  [633,]  651  940  742  749  751  177  116  366  127   716 #>  [634,]   37  312  206  565  529  661  764  762  455   191 #>  [635,]  273  339  137  119   21  588    1  412  304   559 #>  [636,]  902  581   95  237  108  547  193  931  222   970 #>  [637,]  462  627   50  289  494  851  362  891  259   456 #>  [638,]  292  803   84   81  109  585  367  924  840   573 #>  [639,]  132  568  717  139   55  816   91  272  559   728 #>  [640,]  779  255  284  892  293  100  330   14  205   393 #>  [641,]  346  722  721  228  586   72  470  819  198   992 #>  [642,]  655  229  624  558  516  692  384  472  235   944 #>  [643,]  600  560  806  723  998  845  538  385  913   564 #>  [644,]  243  302  316  114  517   64  918  724  445   689 #>  [645,]  352  666  453  527  538  941  414  137  564   485 #>  [646,]  404  214  520  553  332  613  464  440  223   788 #>  [647,]  319  128  329  442  549  868  111  912  876   979 #>  [648,]  840   84  785  745  924  292  455   30  580   144 #>  [649,]  572  409  602  927  811   17  620  938  169   859 #>  [650,]   58  355  434  148  383  582  410  331  400   314 #>  [651,]  633  751  742  749  366  437  116  597  969   537 #>  [652,]  757  810   66  154  936  180  830  910  838   260 #>  [653,]  482   94  123  897  615   42  598  323  863   579 #>  [654,]  277  985  610  325   68  413  800  247  711   250 #>  [655,]  642  624  558  229  692  235   40  516  353   384 #>  [656,]  603  269  956   46  766  914  926  437  607   595 #>  [657,]  552   42  204  803  924  775  592  793  849   598 #>  [658,]  537  979  437  876  751  926   63  822  170   549 #>  [659,]  951  689  953  515  675  387  190  301  518   829 #>  [660,]   73  256  122  882  837  739  642   53  737   623 #>  [661,]  764  907  565   71  319  815  111  699  634   407 #>  [662,]   67    4  955  569   24  780   54  238   82   373 #>  [663,]  678  702  513  344  433  218  427  368  952   418 #>  [664,]  977  704  795  609  390  203  982  589  324    60 #>  [665,]  755  779  850  100  124  685  421  378  874   331 #>  [666,]   25  151  873  831  619  917  941  414  527   839 #>  [667,]  130  415   86  306  449  706  932  484  670   911 #>  [668,]  585  109   81  573  859  803  638  337   80   354 #>  [669,]  422  808  928   49  976  250  855    2  164   496 #>  [670,]  884  556  911  932  282  197  777  449   15   244 #>  [671,]  569  713   67  176  521  200  182  935  391   575 #>  [672,]  473  285  221  947   44  529  490  309  929    16 #>  [673,]   87  208  772  613  131  891   78  289  223   362 #>  [674,]  255  293  943   64  168  114  284  608  881   640 #>  [675,]  139  301  530  953  417  515  561  518  568   167 #>  [676,]   19  960  691  446  922  375  324   18  587   712 #>  [677,]  545  612  177  358   20  878  242  333  909   251 #>  [678,]  663  344  218  843  702  101    8  425  427   368 #>  [679,]  212  732  372  112  302  316  248  934   51   750 #>  [680,]   19  561   88  984  417  429  224  321  203   416 #>  [681,]  763  220  158  747  328   91  717  181  816   530 #>  [682,]  620  596   48  238  601   80  618  268   69   602 #>  [683,]  361  684   61  160  312   30  900  503  217   688 #>  [684,]  688  683  361  533    3  700  500  436  211   217 #>  [685,]  421  118  113   25  753  665  290  553  440   792 #>  [686,]  365  978  407  918  710  698  901  934  504   302 #>  [687,]  731  103  899  699  607  267  368  876  590   144 #>  [688,]    3  684  700  683  361  309  533  211   18   217 #>  [689,]  951  114   64  568  644  518  190   55  816   316 #>  [690,]  289  364  147  772  943  612  640  174  255   330 #>  [691,]  375  960  922  768  298  370  324  573  411   625 #>  [692,]  467  558  472  495  206  944  655  476  486   844 #>  [693,]  901   69  239  596   34  778  181  836  322   870 #>  [694,]  743  851  174  289  966  627  613  462  646   624 #>  [695,]  842  283  257  232   32  193  576  738  923   276 #>  [696,]  364  799  551  408  878   20  608  943  612    50 #>  [697,]  248  754  112  546  314  999  400  974  148   750 #>  [698,]  365  918  443  686  965  243  461  978  281   322 #>  [699,]  815  103  731  687  565  812  661   30  899   128 #>  [700,]   10  211  688  684  533  217  309    3  812    30 #>  [701,]  201  364  253  696  851  159  174  729  551   320 #>  [702,]  663  678  433  427  700   10  991  741  145   823 #>  [703,]  155  830  537  742  751  936  979  394  444   940 #>  [704,]  977  873  664  351  619  115  831  795  423   588 #>  [705,]  829  515   59  402   55   41  401  215  190   230 #>  [706,]  170  295  449  821  718   98  343  841  195   957 #>  [707,]  310  620  602  682   70  185  572  403  102   618 #>  [708,]   38  548  463  381  199  396  121  628  126    76 #>  [709,]  492  110  825  451  738  861  628  291  923    27 #>  [710,]  281  472  978  686  844  443  365  546  445   407 #>  [711,]  487  798  610  453  800  348  413  550  250   654 #>  [712,]  142   17  756  347  728  298  246  370  922   409 #>  [713,]  569  671  200  182  176   67  575  194  814   521 #>  [714,]  484  338  821  790  782  262  130   35  968   880 #>  [715,]  183  766  993  148  976  434  956  808   58   650 #>  [716,]  749  333  116  450  439  408  512  359  761   633 #>  [717,]   91  816  763  681  530  181  139  747  240   132 #>  [718,]  295   98  483  706  195  155  394  821  439   838 #>  [719,]  835  871  396  576   89  480  543  507  975    32 #>  [720,]  131   56  997  891  164  405  879  637  259   362 #>  [721,]  296  586  992  402  163   47  391  641  424   230 #>  [722,]  641  935  852  228  198  995  916  435  521   470 #>  [723,]  105  600  845  643  134  363  258  560  809   469 #>  [724,]  902  759  971  172  222  581  909  644  181    29 #>  [725,]  404  858  974  788  520  207  227  209  148   332 #>  [726,]   22  487  805  866  961  879  711  720  610   131 #>  [727,]   65  258  463  126  560  531  736  887  928   199 #>  [728,]  559  263  988  261  142  712  166    1   17   919 #>  [729,]  320  749  716  450  551  253  633  408  439   940 #>  [730,]  534  190  158  301  915  286  468  341  461   243 #>  [731,]  687  103  699  128  899  590  876  933  607   271 #>  [732,]  112  212  248  679  371  178  760  999  807   697 #>  [733,]  117    9  162  386  828  299  489  169  855   531 #>  [734,]  914    8  425  269   85  933  731  983  656    45 #>  [735,]  989  187  938  796  849  531  832  787  847   342 #>  [736,]   56  466  727  887  802   65  997  422  126   669 #>  [737,]   53  532  986  605  242   52  196   43  443   623 #>  [738,]  923  283  492  257   31  630  695  628  110   276 #>  [739,]  196  737   53  356  457  986   96  256  202   623 #>  [740,]  140  973  261  919  478  629  921  409  165   524 #>  [741,]   10  840  211  390  580  824  426  375  924    84 #>  [742,]  751  127  651  437  633  537   46  703  771   366 #>  [743,]  966  464  694  332  875  797  781  161  627   646 #>  [744,]   51   14  330  147  316  255  284  371  212   679 #>  [745,]  648   84  840  768  803  924  509  638  292   488 #>  [746,]  431  893  189  353  359  555  491  761  483   196 #>  [747,]  181  867  240  372  302  750   91  681  801   996 #>  [748,]  165  237  765  850  266  874  274  593  973   629 #>  [749,]  439  716  633  651  450  116  177  333  320   729 #>  [750,]  807  410  314  112  372  400  248  996  747   874 #>  [751,]  742  651  437  537  127  658   46  633  603   703 #>  [752,]   79  329  182  493  820  213  939  514  111   983 #>  [753,]  685  421  387  518  474  284  118  501  665   330 #>  [754,]  345  697  999  546  974  227   63  248  251   112 #>  [755,]  665  850  779  124  100  921  874  801  240    93 #>  [756,]  712  142  728  559   17  676  166  280  347   263 #>  [757,]  652  180   66  318  758  810  830  154   52   356 #>  [758,]  356  967  757   52  986  318  623  343  577   532 #>  [759,]  240  724  902  272  237  779  165  581  874   266 #>  [760,]  178  732  206  792  583  248  112  212  209   440 #>  [761,]  116  818 1000  366  333  555  545  186  595   926 #>  [762,]  191   37  529  589  115  594  312  634    7   846 #>  [763,]  681  717  530  220   91  298  139  328  984   816 #>  [764,]  907  661   71  508  634  699   74  271  500   319 #>  [765,]  266  205  138  748  525  165  789  769  100   237 #>  [766,]  956  715  183   46  269  603  993  656  980   441 #>  [767,]  797  535  627  462  788  227  512   50  754   974 #>  [768,]  370  411  745  351  509  913  691  423  803   609 #>  [769,]  314  205  540  789  172  994  266  251  400   410 #>  [770,]  534  954   51  445  837  934  387  679  461   501 #>  [771,]  993  886  127  437  226   63  535  632  366   742 #>  [772,]  553  613  673  223   78  690  421  289  646   290 #>  [773,]  574  146  871  930  543  376  465  813  249   171 #>  [774,]  582  593  265   93  383  921   26  629  850   964 #>  [775,]   42  950  204  598  657  184  218   85   45   894 #>  [776,]  928  855  383  478  422    2  313  531  808   582 #>  [777,]  282   15   71  271  244  213  319  731  449   111 #>  [778,]   69  268   34  349   48  693   80  239  428   625 #>  [779,]  665  755  640  892  240  850  874  100  759   205 #>  [780,]  955  264   92  475   24  185  210  570  254   403 #>  [781,]  161  805  173  797  879  788  332  227  966   563 #>  [782,]  130  718  484  306  821  483   98  578  946   295 #>  [783,]  606  906  809  323  297   94  890  469  579    11 #>  [784,]  880  241  981  562  599  334  968  373  570   885 #>  [785,]  648  594   30   62   37   36  565  278  745   455 #>  [786,]   22  805  456  990  963  597  969  817  405   879 #>  [787,]  796  998  806  913  187  735  560  849  600   469 #>  [788,]  404  227  332  725  797  974  858  767  161   781 #>  [789,]  205  892  251  769  994  266  371  540  400   765 #>  [790,]  599  570  338  567  949  821  968  562  838   526 #>  [791,]  964  250  265  619  582  207  509  488  831   564 #>  [792,]  760  178  583  804  440  118   25  954  235   206 #>  [793,]  184  493  292  109   85  939  980   45  924   590 #>  [794,]  311  310  102  707  108   89  988   95  970   973 #>  [795,]  203  308  324  664  704  115  321  609  416   977 #>  [796,]  787  187  735  998  938  600  560  531  591   849 #>  [797,]  767  627  788  462  535  781  227  879  161   456 #>  [798,]  453  711  941  610  527  348  250  550  487   791 #>  [799,]  878  551  696  408  320  138   50   20  931   525 #>  [800,]  610  413  866  245  395  487  654   28  247   875 #>  [801,]  874  867   26  410  919  921  240  165  747   750 #>  [802,]  860   56  164  303  736  961  496  405  117   855 #>  [803,]  585  109  638  924   84  745  657  488  668   292 #>  [804,]  583  792  566  760  178  528   25  389  954   115 #>  [805,]  879   22  781  161  817  961  456  479  963   866 #>  [806,]  913  998  787  600  509  796  411  643  564   768 #>  [807,]  750  996  112  248  410  372   26  732  747   400 #>  [808,]   49  928  488  669  183  383  715  976  855   650 #>  [809,]  297  906  606   11  783  105  469  845  579   382 #>  [810,]  154  910   29  544  260   66  435  916  652   757 #>  [811,]  572   17  649  105  382  927  363  409  845   317 #>  [812,]  217   30  211  580  309  815  699  565   10    37 #>  [813,]  945  574   33  373  146  249  477  336  171   231 #>  [814,]  569  713  880  182  784  194  334   54  662   903 #>  [815,]  565  699   30  661  812  292   61  300  820   648 #>  [816,]  717   91  240  568  747  181  681  530  867   372 #>  [817,]  456  405  872  164  879  969  496  259  226   797 #>  [818,] 1000  761  595  926  366  116  447   63  491   186 #>  [819,]  424  470   72  198  498  883  228  965  865   341 #>  [820,]   81  406  939  827  300  292  752   61  349   231 #>  [821,]  706  295  790  718  838  841  484  949  599   981 #>  [822,]  933  491  607  186  926  447  876  818  658   244 #>  [823,]  325  247  952  985  580  987  418  395  438   368 #>  [824,]  367  493  426  903  638   10  182  741  375   481 #>  [825,]   27  622  393  451  525   78  138  237  293   861 #>  [826,]  566  167  528  856  328  416  429  804  115   984 #>  [827,]  231  336  939   54  354  334   80  820  373   859 #>  [828,]  121  199  733  386  102  162   89  117  927   169 #>  [829,]  515  705   55   59  190  139  215  639  568   402 #>  [830,]   66  394  703  936  155  358  444  862  757   539 #>  [831,]  619  151  873  839  791  207  704  209  287   666 #>  [832,]  938  849  481  735    4   42  337  342  989   950 #>  [833,]  148  455  267  974  144  715  725  209  300    49 #>  [834,]  957  981  357  575  852  380  288  241  194   868 #>  [835,]  871  480  719  888   32  576  574  543  507    89 #>  [836,]  172  632  222  314  901  442  541  444  693   581 #>  [837,]  882  770  461  122  445  443  534  179  281   472 #>  [838,]  936  562  295  703  526  885  830  981  155   949 #>  [839,]  135  151  209  589  619  831  389  873  115   455 #>  [840,]   84  924  648  292  745  638  803  144   30   580 #>  [841,]  885  241  357  981  549  949  983  957  213   329 #>  [842,]  232  108   32  193  695  631  403  547  210   257 #>  [843,]  101  427  983  493  218   85  425  590  793     8 #>  [844,]  319  281  244  710   71  472  495  876  647   933 #>  [845,]  134  105  600  369  621  723  469  796  811   643 #>  [846,]  308   23  191  115  589  762    7  321  962   390 #>  [847,]  989  169  855  337  183  496  376  342    9   313 #>  [848,]  428  341  286  275  459  347  149  160  391   503 #>  [849,]  832   42  735  938  481  989  657  787  796   950 #>  [850,]  755  100  874  331  665  593  748  921  774   779 #>  [851,]  174  289  637  462  627  694  512   50   20   364 #>  [852,]  935  521  575  834  562  916  399  981  526   380 #>  [853,]  982  219  904   60   68  806  913  609  509   564 #>  [854,]  991  471  390  904  664  982   23  741  977   324 #>  [855,]  313  422  776  928  496  976  847  117    9   733 #>  [856,]  528  124  220  328    1  412  996  826  246    26 #>  [857,]  726   13  487  866   22  711    5  413  961   786 #>  [858,]  520  725  207  404  331  400  788  214  650   287 #>  [859,]   80  601  573  620  354  602  268   81  827   225 #>  [860,]  496  802  303  872  164  855  299  847  117   989 #>  [861,]  628  274  970  524  291  525  748  973  237   110 #>  [862,]  358  539  912  242  994  444  442  605  155   545 #>  [863,]  579  905  258  887  727  297  381  303  560    94 #>  [864,]  518  497  454  568  951  114  474  639  293   753 #>  [865,]   72  470  498  435  230  819  544  810  215   965 #>  [866,]  413  961   22  800  805  610  479  360  726   303 #>  [867,]  801  747  240   91  919  181  246   26  874     1 #>  [868,]  957  357  647  549  912  442  288  539  111   329 #>  [869,]  474   21  497  339  864  143  454  896  113   675 #>  [870,]  442  910  154  399   66  836  693  539   29   901 #>  [871,]  835  507  719   89  773  574  480  543  386   171 #>  [872,]  496  405  164  817  226  860  976  183  456   127 #>  [873,]  619  287  831  151  704  265  207   93  839   209 #>  [874,]  410  801  331  165  400  314   26  850  750   748 #>  [875,]    5  611  245  966  743  800  610  464  332   157 #>  [876,]  607  128  658  546  980  647  822   63  731   687 #>  [877,]  972  508  899  557  476  271    6  529  634   486 #>  [878,]  799  408  677  551  320  931  696  881  177    20 #>  [879,]  805  817  781  797  456  164  997  362  405    22 #>  [880,]  784  241  599  334  981  968  814  562  570   373 #>  [881,]  971  909  878  677  168  358  943  902  444   724 #>  [882,]  837  461  179  122  256  443  445  532  770   517 #>  [883,]  424  819  228  341  198  286   72  470  498   937 #>  [884,]  188  670   15  500  777  282  436  911  145   557 #>  [885,]  241  841  549  981  357  945  949  334  329   979 #>  [886,]  444  771  266  172  769  226  554  994  535   931 #>  [887,]  905  863  727  736  550  258  560   65  250   466 #>  [888,]  835  936  567  574  480  940  146  576  543   871 #>  [889,]  905  643  469  723  600  579  806   75  853   219 #>  [890,]  606  783  523  906   11  323  809  297  175    94 #>  [891,]  362  234  252  259  233  997  637  223  131    78 #>  [892,]  371   14  789  330  212  205  214  400  779   640 #>  [893,]  353  555  491  746  189  761  558  818  186  1000 #>  [894,]   45  441  184  327   12  511   85  269  956   930 #>  [895,]  963  307  236  506  360  914    8  479  656   344 #>  [896,]   97   90   21  263  728  559  639  635  392   451 #>  [897,]  482  513   68  653  277  219  592  598  413   615 #>  [898,]  348  326   83  527  941  414  736  485  223   466 #>  [899,]  687  972  103  368  271  731  877  699  460   267 #>  [900,]  503  459  937  160  224  683  275  428  499   848 #>  [901,]  693  918  322  365  407  836   69  504  978   239 #>  [902,]  581  222  172  636  724  759  971   95  836   266 #>  [903,]  426  615  824  481   75   42  367  849  433   657 #>  [904,]   68  985  325  823  853  277  654  390  854   592 #>  [905,]  887  863  258  560  579  600  727  787  643   796 #>  [906,]  297  809  606   11  783  448  502  381  832   382 #>  [907,]   74  764   16  661   71  436  188  111  500   281 #>  [908,]  746  359  450  431  174  159  851  701  716   457 #>  [909,]  971  358  994  881  172  444  540  862  251   677 #>  [910,]   29  260  154  222   66  870  810  596   70   916 #>  [911,]  670  556  884  449   86   15  188  282  614   107 #>  [912,]  539  442  605  862  868  647  978  365   52   318 #>  [913,]  998  806  509  787  564  768  591  796  411   370 #>  [914,]  269  734    8  425  956  360  656   45   85   307 #>  [915,]  286  243  965  158  341  239  498  322  918   901 #>  [916,]  260  399  935  521   33  586  910  852  810   992 #>  [917,]  389  948  151  135  839  666    7  792  831   804 #>  [918,]  365  686  901  978  243  698  407  302  915   322 #>  [919,]  921  801  740  140  261  867  165  629  593   272 #>  [920,]  504  322  288  111  514  156  965  275  868   661 #>  [921,]  593  919  629  801  478  774   26  850  740   874 #>  [922,]  298  960  691  220  328  984   62  416  763   795 #>  [923,]  738  283  492  630  257  695   31  628  636   110 #>  [924,]   84  840  292  803  648  638  745  657  144   109 #>  [925,]  942  230  865  215  168  350  689   72  644   547 #>  [926,]  595 1000  818   63  366  447  437  607  761   822 #>  [927,]  102  502  572  828  649  162  121  386  169   465 #>  [928,]  776  855  422  808  383  669  187  582  531     2 #>  [929,]   44   88  221  416  321  308  468  224  490   167 #>  [930,]  327   12  626  968  773  511  146  441  574   522 #>  [931,]  257  480  878  886  525  940  276  193  975    95 #>  [932,]  192  244  670  777  282  415  125  449  271   557 #>  [933,]  822  244  607  192  491  731  876  734  186   658 #>  [934,]  996  302  679  158  372  807  686  732  747   278 #>  [935,]  521  852  916   67  575  399  722   24  562   176 #>  [936,]  888  830  703  838  526  232   66  652  574   910 #>  [937,]  459  900  149  160  275  503  848  883  499   428 #>  [938,]  832  735  187  849  337  342  989  796    4   649 #>  [939,]  827  329  231  980  820  336  184  334  793   945 #>  [940,]  633  931  888  279  742  703  651  394  320   878 #>  [941,]  527  414  378  798  223  453  964  348  326   352 #>  [942,]  865  925   72  230  179  584  435  215  470   498 #>  [943,]  608  255  696  612  364  293  674  640  881   138 #>  [944,]  495  486  197  692  472  452  508  844  281   432 #>  [945,]  813  231  336  373  885  334  327  827  939    12 #>  [946,]  990  597  786  958  969  510   35  307   99   262 #>  [947,]  672  929  490  604   44  473  221  846   23    88 #>  [948,]  135  389  917  325  839  589  270  151  476   823 #>  [949,]  968  885  511  930  945  841  790  338  241   327 #>  [950,]  775   42  184  894   45  849  204  598  511   626 #>  [951,]  689  114  518  568   64  864  659   55  190   644 #>  [952,]  418  592  987  438  823  144  985  247  204   590 #>  [953,]  675  468  515  301  167   88  530  730  659   561 #>  [954,]  583  770  760  501  384  792  206  178  804    51 #>  [955,]  264   92  185  780  254  477  465  403  171    33 #>  [956,]  269  766   46  656  603  441  980  715  183   914 #>  [957,]  357  868  834  288  549  981  213  380  841   885 #>  [958,]  279  616  597  990  262  969  522  338   99   633 #>  [959,]   77   76  382  310  794  780  403  254  210   955 #>  [960,]  922  691  298  324  224  375   19  676  503   795 #>  [961,]  303   22  866  805  164  879  860  802  872   405 #>  [962,]   23  308  224  309  321  846  324  960  390   795 #>  [963,]  895  236  506  479  656  360  805  781  161    22 #>  [964,]  791  265  414  582  385  774  326  538  207    93 #>  [965,]  498  322  915  544  243  286  819  698  470   504 #>  [966,]  743  332  781  797  161  464  879  788  875   627 #>  [967,]  758   52  986  356  318  532  605  623  737   343 #>  [968,]  949  930  511  626  327   12  334  773  338   945 #>  [969,]  597  456  405  651  817  742  633  127  872   751 #>  [970,]  973   95  274   89  628  489  861  480  507   828 #>  [971,]  881  909  724  902  172  581  168  222   66   636 #>  [972,]  877  899  508  476  812  580  634  529  271   191 #>  [973,]  740  970  165  140   95  478  748  629  274   554 #>  [974,]  227  725  788  754  173  267  148  404  833   697 #>  [975,]  480  276  257  719  931  617  576  835  543   970 #>  [976,]  313  183  226  496  855  715  422  872  808     2 #>  [977,]  664  704  389  589  115  795  831  873  151   839 #>  [978,]  365  686  407  918  710  901  697  546  540   912 #>  [979,]  658  537  549  437  329  703  751  442  945   939 #>  [980,]  128  956  766  939  300  876  793  269  715   329 #>  [981,]  241  357  885  834  841  575  562  957  194   784 #>  [982,]  853   60  609  664  904  219  564  324  913   806 #>  [983,]  101   85  213  843  329  841  752  734   45   885 #>  [984,]  416  328  468  922   88  763  298  429  167   224 #>  [985,]  247  987  325  823  952  592  654  418  438   395 #>  [986,]   52  605  737  967   53  242  532  318  196   862 #>  [987,]  952  418  438  592  985  247  144  823  395   344 #>  [988,]  311  263  261  310   17  140  707  728  142   740 #>  [989,]  735  847  187  938  531  342  337  169  849   860 #>  [990,]  946  597  958  969  786  616   99  405   35    22 #>  [991,]  854  390   23  741  309  211   10  962  217   700 #>  [992,]  586   47  391   48  916  721  682  238  296   399 #>  [993,]  632  715  771  434  148  766  183   58  355   314 #>  [994,]  251  769  540  909  444  172  358  789  862   546 #>  [995,]  210  340  722   24  916  935  852  526  570   631 #>  [996,]  807  934  750  372  747  302  679  528  178   112 #>  [997,]  233  234  362  891  259  422  879    2  164   669 #>  [998,]  913  806  787  509  796  560  591  564  600   385 #>  [999,]  754  248  112  371  732  345  697  227  974   212 #> [1000,]  818  595  926  366   63  761  447  116  345   512 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.33320897 0.4936747 0.5080292 0.6065770 0.6498432 0.6635243 0.6640559 #>    [2,] 0.40656772 0.5088734 0.5781254 0.5885196 0.5891085 0.5928902 0.6070002 #>    [3,] 0.28675143 0.7304048 0.8930866 0.9309899 0.9382942 0.9573639 1.0635662 #>    [4,] 0.54877678 0.5816388 0.6355623 0.6464815 0.6603681 0.6626598 0.7156543 #>    [5,] 0.45100336 0.8296369 0.8507537 0.8894662 0.9802474 0.9907079 1.0380059 #>    [6,] 0.58366744 0.8862030 0.9026041 0.9772677 0.9935480 1.0056469 1.0106705 #>    [7,] 0.55074408 0.7058115 0.7112743 0.7393235 0.7794418 0.7821356 0.7852797 #>    [8,] 0.24877463 0.4716083 0.4912053 0.5293517 0.6292865 0.6339414 0.6472884 #>    [9,] 0.26469039 0.2996395 0.3236376 0.3957908 0.4998188 0.5054889 0.5271991 #>   [10,] 0.45716039 0.5248572 0.5597037 0.6750908 0.7070276 0.7102139 0.7110391 #>   [11,] 0.56052941 0.6036774 0.7008242 0.7725426 0.7949052 0.8625345 1.0262828 #>   [12,] 0.09264610 0.3312582 0.4246496 0.4607841 0.4722689 0.4733116 0.5015422 #>   [13,] 0.84629264 1.1723106 1.3001492 1.3114395 1.3828850 1.4011769 1.4293015 #>   [14,] 0.15973661 0.3255263 0.3595530 0.3986254 0.4586901 0.5672494 0.6766384 #>   [15,] 0.40156437 0.5009913 0.6125057 0.6409297 0.6454112 0.7266591 0.7686437 #>   [16,] 0.46408084 0.4690122 0.6273553 0.7207028 0.8379299 0.8404805 0.9338492 #>   [17,] 0.42503333 0.5631904 0.5892891 0.6593877 0.6801115 0.6921511 0.7091854 #>   [18,] 0.77637804 0.8422119 0.9214696 0.9219122 0.9451641 0.9469874 0.9786173 #>   [19,] 0.68460707 0.7642190 0.8600948 0.9912124 1.0026335 1.0304243 1.1301230 #>   [20,] 0.29584251 0.4313897 0.4357215 0.5127341 0.5844533 0.5973330 0.6594944 #>   [21,] 0.69586488 0.8814124 0.9286943 0.9642135 0.9756221 1.0087224 1.0309844 #>   [22,] 0.42719682 0.5902467 0.6784613 0.6997878 0.7184678 0.7750223 0.8497456 #>   [23,] 0.52429343 0.5811294 0.6604883 0.7871819 0.8531866 0.8775793 0.9267980 #>   [24,] 0.80134029 0.8138361 0.8438184 0.8448423 0.9234200 0.9709699 1.0104976 #>   [25,] 0.59719116 0.6080726 0.7255290 0.7294251 0.8226023 0.8731855 0.8819191 #>   [26,] 0.40908515 0.4207614 0.4973629 0.5372019 0.5405101 0.5648644 0.5697601 #>   [27,] 0.28126546 0.3617986 0.6448653 0.7780667 0.8352271 0.9608145 0.9676046 #>   [28,] 0.42138359 0.4580135 0.5104830 0.5237653 0.5651552 0.5866667 0.6538284 #>   [29,] 0.22179389 0.3696375 0.3733416 0.4085216 0.5689988 0.5826454 0.5909944 #>   [30,] 0.35276972 0.4267099 0.4280919 0.4325845 0.5182628 0.5570910 0.5612429 #>   [31,] 0.66517674 0.7732773 0.8853450 0.9111301 0.9134093 0.9315121 0.9576972 #>   [32,] 0.50736700 0.5890231 0.6226906 0.7011852 0.7382759 0.7487686 0.7527671 #>   [33,] 0.13761279 0.3296651 0.4855052 0.4909635 0.5460890 0.5987747 0.6044887 #>   [34,] 0.24267550 0.3633249 0.4982862 0.5664751 0.6368039 0.6669546 0.6671054 #>   [35,] 0.88849795 0.9866872 1.0954633 1.2439975 1.3296671 1.3545138 1.3701992 #>   [36,] 0.39054207 0.4903020 0.5328039 0.5376487 0.6135761 0.6201920 0.6202173 #>   [37,] 0.40809656 0.4258201 0.4494840 0.4805357 0.5229958 0.5406588 0.5720149 #>   [38,] 0.77108131 0.9126600 1.2023723 1.4224387 1.4277434 1.4305376 1.4435732 #>   [39,] 1.48799363 1.5206702 1.6645938 1.6874075 1.6954009 1.7374570 1.7747666 #>   [40,] 0.86604273 0.9116066 0.9648823 1.0392506 1.1183754 1.1516997 1.1844311 #>   [41,] 1.18407640 1.2764497 1.2980104 1.3612716 1.4521669 1.4643155 1.5770180 #>   [42,] 0.36201539 0.4476251 0.4548488 0.4632175 0.5863629 0.6697857 0.6699575 #>   [43,] 0.42215355 0.4702680 0.4761455 0.5113246 0.6351100 0.6616292 0.6859794 #>   [44,] 0.66330334 0.7256621 0.8710555 0.8754365 0.9433221 1.0463089 1.1023099 #>   [45,] 0.19324472 0.3441800 0.3643519 0.3775057 0.3889301 0.5223925 0.5287872 #>   [46,] 0.25657646 0.3432129 0.3785672 0.3989171 0.4535359 0.4564003 0.4780473 #>   [47,] 0.49102697 0.4910285 0.5909949 0.6037115 0.6052222 0.6712949 0.7342716 #>   [48,] 0.44903679 0.4541788 0.4696230 0.4952878 0.5146174 0.5734906 0.5802232 #>   [49,] 0.35913748 0.5842848 0.6076039 0.6170354 0.6421783 0.7087212 0.7098025 #>   [50,] 0.29584251 0.3218037 0.4504554 0.5087771 0.5148992 0.5352670 0.5669786 #>   [51,] 0.43605113 0.5465248 0.5597026 0.5788705 0.6953284 0.6960740 0.7228201 #>   [52,] 0.26857078 0.4140491 0.5720637 0.6730140 0.6944665 0.7341509 0.7434224 #>   [53,] 0.19334775 0.4902990 0.6831658 0.7044840 0.7149560 0.7167684 0.7174538 #>   [54,] 0.39980325 0.4055425 0.4511367 0.5300963 0.5327075 0.5487768 0.5684397 #>   [55,] 0.64808338 0.6754984 0.7551298 0.7713814 0.7924056 0.8160080 0.8233904 #>   [56,] 0.55472220 0.5676050 0.6505416 0.7000494 0.7592217 0.8055591 0.8776527 #>   [57,] 1.13241001 1.1758217 1.1947783 1.2309303 1.2532812 1.2608847 1.2729836 #>   [58,] 0.07637815 0.1667546 0.1857287 0.4059219 0.4759978 0.4832739 0.5219100 #>   [59,] 0.96814087 1.0069994 1.0250457 1.0444566 1.0592491 1.0884317 1.0912339 #>   [60,] 0.47358281 0.5770577 0.8797952 0.9601944 0.9610086 0.9759137 1.0358115 #>   [61,] 0.56136394 0.5811131 0.6531948 0.6579318 0.6705471 0.7069993 0.7108007 #>   [62,] 0.46504292 0.5861363 0.5949830 0.6135761 0.6188046 0.6237519 0.6948734 #>   [63,] 0.33738967 0.3734872 0.3894532 0.4092403 0.4252128 0.4372633 0.5192237 #>   [64,] 0.55926980 0.5845617 0.6855677 0.6983545 0.7257708 0.7694152 0.8045298 #>   [65,] 0.31437068 0.4305082 0.5551817 0.6811928 0.7049551 0.7543950 0.7709723 #>   [66,] 0.34963362 0.5120821 0.5284258 0.5395776 0.5909944 0.5962518 0.6447372 #>   [67,] 0.52132311 0.5986330 0.6781876 0.7224444 0.7627384 0.8013403 0.8130439 #>   [68,] 0.50560499 0.6883962 0.7677618 0.7692167 0.9084058 0.9091004 0.9407688 #>   [69,] 0.22443515 0.2426755 0.3850621 0.4803062 0.5146007 0.5650926 0.5771107 #>   [70,] 0.35847269 0.4888512 0.4899177 0.5455938 0.5963319 0.6064846 0.6179717 #>   [71,] 0.36826841 0.4110101 0.4474681 0.5086220 0.5473456 0.5760742 0.6371038 #>   [72,] 0.22974326 0.3432899 0.3795114 0.4853756 0.5464167 0.5726009 0.6933421 #>   [73,] 0.81125916 1.3088885 1.4452745 1.5276928 1.5957467 1.5983387 1.7495370 #>   [74,] 0.40814173 0.4640808 0.6918162 0.7014470 0.7152557 0.7909309 0.9069559 #>   [75,] 0.69957504 0.7736989 0.8678461 0.9381650 0.9397855 0.9738494 1.0649487 #>   [76,] 0.79490522 0.8568976 0.9835142 1.0126364 1.0144644 1.0532438 1.0865182 #>   [77,] 0.81383609 1.0255561 1.0447902 1.0516185 1.1227258 1.1339630 1.1602939 #>   [78,] 0.66748392 0.7576590 0.7743609 0.8303448 0.8337361 0.8343785 0.8833807 #>   [79,] 0.40490562 0.5597603 0.6656510 0.6815402 0.6842969 0.7113503 0.7266591 #>   [80,] 0.17150843 0.2600662 0.4121097 0.4226778 0.4834661 0.5280154 0.5370563 #>   [81,] 0.32272573 0.3283008 0.3456662 0.4350125 0.4502674 0.4836229 0.4864847 #>   [82,] 0.23193974 0.4378231 0.6784099 0.6830516 0.7300812 0.7311138 0.7622518 #>   [83,] 0.87613622 1.0883546 1.2901201 1.3089740 1.3097177 1.3410479 1.3946685 #>   [84,] 0.15793197 0.2166949 0.2287818 0.3569337 0.4384523 0.4832703 0.5177965 #>   [85,] 0.34417999 0.5169962 0.5200675 0.5261316 0.5271642 0.5562491 0.5823557 #>   [86,] 0.94020080 0.9555392 1.1864516 1.2805996 1.3955065 1.5566545 1.6314612 #>   [87,] 0.49472628 0.5864696 0.6638819 0.8653645 0.9585525 1.0475774 1.1455222 #>   [88,] 0.59239752 0.7338046 0.7838205 0.7975771 0.8184496 0.8817613 0.8992689 #>   [89,] 0.26769508 0.3611439 0.4516664 0.4992772 0.5038736 0.5403294 0.5430513 #>   [90,] 0.45893605 0.9022867 1.0418817 1.0867157 1.2272607 1.3002151 1.3083297 #>   [91,] 0.30001875 0.4334226 0.4515194 0.4760902 0.5349501 0.5693113 0.5826414 #>   [92,] 0.25467816 0.3465901 0.4897840 0.5121611 0.5650681 0.5660566 0.6257518 #>   [93,] 0.37925404 0.4289419 0.4833930 0.6033399 0.6327947 0.6501234 0.6509638 #>   [94,] 0.67653039 0.7517871 0.8619005 0.8645869 0.8753186 0.9699410 1.0566301 #>   [95,] 0.44039344 0.4888512 0.5238482 0.5466947 0.5720406 0.5888028 0.5934634 #>   [96,] 1.06993587 1.1170796 1.1297632 1.2352794 1.3441275 1.4656814 1.6463742 #>   [97,] 0.45893605 0.8098362 0.8879344 1.2640939 1.2711006 1.2804266 1.2970512 #>   [98,] 0.49769597 0.5201248 0.5441933 0.6213377 0.6529377 0.6913456 0.7230355 #>   [99,] 0.34005854 0.6095370 0.6302301 0.6543855 0.6729165 0.7386520 0.7503298 #>  [100,] 0.51206239 0.5714999 0.6241663 0.6377034 0.6446298 0.6674839 0.6760396 #>  [101,] 0.34332942 0.5018607 0.6656643 0.6797835 0.6863212 0.7542649 0.7968189 #>  [102,] 0.36114388 0.4242231 0.4485479 0.4954662 0.5485612 0.5968797 0.6065157 #>  [103,] 0.33353948 0.3415766 0.3905625 0.4077135 0.5125184 0.5615606 0.6264908 #>  [104,] 0.92470361 0.9907398 1.0102954 1.0531388 1.0940640 1.1170946 1.1524044 #>  [105,] 0.52470456 0.6253316 0.6371911 0.6756628 0.7234324 0.8053355 0.8772812 #>  [106,] 0.85978953 0.9075500 0.9207407 0.9541817 1.0576379 1.0736124 1.1025325 #>  [107,] 0.42485080 0.4498919 0.4632685 0.8379299 0.8558811 0.8687853 0.8744345 #>  [108,] 0.38996899 0.4905381 0.6179717 0.6292867 0.6475076 0.7061478 0.7315159 #>  [109,] 0.10540724 0.3038202 0.3456662 0.3949007 0.4554645 0.4911964 0.5643303 #>  [110,] 0.70182498 0.8530957 0.9156722 1.1035428 1.1147249 1.1480124 1.1518089 #>  [111,] 0.46538934 0.4857843 0.5473456 0.5870209 0.6023108 0.6347660 0.6357482 #>  [112,] 0.14497914 0.2379350 0.2850986 0.4062461 0.4232399 0.4432055 0.4547102 #>  [113,] 0.55220653 0.5679776 0.7240818 0.7660399 0.8330466 0.9996779 1.0158857 #>  [114,] 0.55513535 0.5592698 0.6772467 0.7017922 0.7187628 0.8083335 0.8486127 #>  [115,] 0.49676666 0.6562537 0.6690268 0.6829477 0.6947332 0.6969723 0.7130125 #>  [116,] 0.26072784 0.2875755 0.3620183 0.3850199 0.4081393 0.4301400 0.4963594 #>  [117,] 0.13569927 0.2996395 0.3677441 0.4655046 0.5046764 0.5175956 0.5246583 #>  [118,] 0.67826488 0.7288330 0.7294251 0.7663848 0.8001804 0.8091214 0.9387097 #>  [119,] 0.40929619 0.6509638 0.6765079 0.7087235 0.7667496 0.7977269 0.7980421 #>  [120,] 0.43795017 0.8053355 0.9717400 0.9877802 1.0144644 1.1036057 1.1528755 #>  [121,] 0.26513468 0.3641863 0.5949946 0.6542293 0.6701341 0.7000746 0.7017221 #>  [122,] 0.67663117 0.8623822 0.8902605 0.9226858 0.9280070 0.9436049 0.9517676 #>  [123,] 0.75178711 0.9430822 1.1851875 1.2226546 1.3701992 1.4458555 1.4777859 #>  [124,] 0.37925404 0.5612632 0.6343214 0.6848315 0.6917977 0.7104460 0.7233732 #>  [125,] 0.99392625 1.2938224 1.3697400 1.5733771 1.5944546 1.6131131 1.6225211 #>  [126,] 0.39428886 0.4305082 0.5314982 0.6419264 0.6577924 0.6678952 0.6959795 #>  [127,] 0.31929130 0.4535359 0.4553470 0.4852406 0.4904860 0.4979332 0.5472189 #>  [128,] 0.35316712 0.4071002 0.4410517 0.4670922 0.4983054 0.5937900 0.5974255 #>  [129,] 0.77637804 1.0687861 1.1039915 1.1382706 1.2063634 1.2406298 1.2460122 #>  [130,] 0.78052407 0.8476426 1.0876455 1.2007236 1.2392633 1.2465515 1.2749841 #>  [131,] 0.63635555 0.6638819 0.7581955 0.7669603 0.8213554 0.8481761 0.8584272 #>  [132,] 0.60365238 0.6608670 0.7141737 0.7724112 0.8124798 0.8201659 0.8277441 #>  [133,] 1.39272345 1.4772063 2.0793682 2.2968481 2.3157368 2.3966830 2.3990484 #>  [134,] 0.37400875 0.4440870 0.6176794 0.6756628 0.8361427 0.9020382 0.9020441 #>  [135,] 0.43687630 0.4423205 0.5014776 0.5291528 0.7173183 0.7374405 0.7378424 #>  [136,] 0.79468963 0.8123001 0.9837914 1.1030727 1.1351998 1.1585110 1.2391058 #>  [137,] 0.40929619 0.6817282 0.7850764 0.8145561 0.8215886 0.8382928 0.8496180 #>  [138,] 0.21559037 0.4096761 0.5162898 0.6321686 0.7008388 0.7196368 0.7328807 #>  [139,] 0.43049473 0.6718791 0.7391521 0.7713814 0.7834506 0.7913768 0.8004374 #>  [140,] 0.20903988 0.3075590 0.4671057 0.4788569 0.5167783 0.5483254 0.6455719 #>  [141,] 0.80015340 0.8685284 0.9010723 0.9454519 0.9637786 1.0414372 1.0798755 #>  [142,] 0.31522903 0.5631904 0.5711716 0.7321739 0.8130941 0.8419560 0.8634794 #>  [143,] 0.64539204 0.9042904 1.0210506 1.2587738 1.3259347 1.4339276 1.4733379 #>  [144,] 0.34145143 0.5152206 0.5311697 0.5633938 0.5747950 0.5811210 0.6081336 #>  [145,] 0.82938368 0.8867989 0.8982692 0.9413123 0.9907487 1.0474397 1.0926199 #>  [146,] 0.13657853 0.3106255 0.3581343 0.3923103 0.4506103 0.5033109 0.5140929 #>  [147,] 0.54614764 0.6921028 0.7366327 0.7595028 0.8179120 0.8256839 0.8519938 #>  [148,] 0.31625337 0.4059219 0.4153771 0.4234344 0.4296528 0.4404965 0.4807697 #>  [149,] 0.66118798 0.6881604 0.7376756 0.8184880 0.9856100 1.0247394 1.0284658 #>  [150,] 0.79468963 0.9676046 1.0453516 1.0468914 1.0691070 1.1376882 1.2574858 #>  [151,] 0.34592840 0.4423549 0.4572812 0.5412945 0.6057902 0.6447366 0.6501275 #>  [152,] 0.95553921 1.6448211 1.7308826 1.7822628 1.9324145 2.0368236 2.0526965 #>  [153,] 0.60230259 0.8205998 0.9344682 0.9541817 0.9680088 1.1141819 1.1893135 #>  [154,] 0.34773665 0.3496336 0.3658949 0.4085216 0.5240363 0.5428405 0.5783030 #>  [155,] 0.34981032 0.4300390 0.5441933 0.5680502 0.6236453 0.6393585 0.6526055 #>  [156,] 0.46326852 0.6205107 0.6853186 0.6988698 0.7160859 0.7894947 0.8281187 #>  [157,] 0.85075367 1.0199067 1.1170142 1.1213144 1.3789024 1.4543627 1.4691854 #>  [158,] 0.49195706 0.5357379 0.5487941 0.5811986 0.6699927 0.6847269 0.6849946 #>  [159,] 1.10448897 1.1919382 1.1922065 1.1992410 1.2167524 1.2929953 1.2938728 #>  [160,] 0.40865417 0.4684249 0.5427874 0.5613639 0.6115439 0.6580191 0.7020964 #>  [161,] 0.21596063 0.2903811 0.5020439 0.5166793 0.5733186 0.5976691 0.6097627 #>  [162,] 0.23264498 0.3485338 0.3549732 0.4498173 0.4595627 0.4623773 0.5246583 #>  [163,] 0.66118798 0.8069734 0.9247036 0.9690766 1.0235999 1.0500307 1.1555972 #>  [164,] 0.33883353 0.3765060 0.4458431 0.4666007 0.5534736 0.5749872 0.5826448 #>  [165,] 0.32759184 0.4596497 0.4817790 0.5039489 0.5327237 0.5540437 0.5883926 #>  [166,] 0.75725601 0.9132398 0.9229082 0.9519649 0.9841020 1.1723511 1.1752920 #>  [167,] 0.66472988 0.7979358 0.8371371 0.8443504 0.8817613 0.9305689 0.9922339 #>  [168,] 0.61528015 0.6327408 0.6855677 0.7697942 0.7816848 0.8301074 0.8424082 #>  [169,] 0.41782859 0.4498173 0.4728031 0.4778043 0.4896874 0.5163652 0.5392462 #>  [170,] 0.43287300 0.6429590 0.6832575 0.6944751 0.6972318 0.7128775 0.7395068 #>  [171,] 0.35847269 0.4451055 0.4466854 0.4469318 0.4855052 0.4984030 0.5202331 #>  [172,] 0.31868615 0.4448657 0.4548676 0.4556674 0.4599421 0.5130394 0.5228631 #>  [173,] 0.29038113 0.3915711 0.4611907 0.4879140 0.5129529 0.5433548 0.5651552 #>  [174,] 0.48731018 0.7381614 0.8037018 0.8215043 0.8464098 0.8966459 0.9392374 #>  [175,] 1.17301556 1.1966784 1.2846573 1.3678866 1.3936647 1.3982280 1.4186001 #>  [176,] 0.54625174 0.6483922 0.7361554 0.7714077 0.7731047 0.7755245 0.8467695 #>  [177,] 0.26406906 0.4301400 0.4475093 0.4873848 0.4885246 0.5522868 0.5636512 #>  [178,] 0.27489761 0.4401889 0.5310747 0.5538059 0.5583273 0.5648409 0.5800271 #>  [179,] 0.61243142 0.8133132 0.8620435 0.9556268 0.9853236 0.9987971 1.0258985 #>  [180,] 0.67406726 0.8087952 0.8417653 0.8850054 0.9451678 0.9830485 1.0003318 #>  [181,] 0.30741098 0.4515194 0.5370376 0.5610640 0.5700220 0.5877499 0.5963474 #>  [182,] 0.56002120 0.5809655 0.6964895 0.7217809 0.7529461 0.7566200 0.7755245 #>  [183,] 0.28472736 0.3272188 0.3831039 0.4241345 0.4791298 0.5248234 0.5265669 #>  [184,] 0.30783416 0.3889301 0.4595979 0.4733116 0.5136146 0.5541023 0.5562491 #>  [185,] 0.33869784 0.3868842 0.3975681 0.4854788 0.4897840 0.4984030 0.5274977 #>  [186,] 0.30868219 0.4328730 0.5178281 0.5414301 0.5856409 0.6213377 0.7040224 #>  [187,] 0.31380138 0.3297394 0.4008448 0.5162768 0.5278106 0.5849524 0.5969928 #>  [188,] 0.32608504 0.4220482 0.7093473 0.7207028 0.7452457 0.7933898 0.8275318 #>  [189,] 0.54069889 0.5652119 0.6206828 0.6303256 0.6357051 0.7984617 0.8053766 #>  [190,] 0.67549839 0.7232592 0.8132158 0.9190209 0.9681409 0.9685656 0.9827482 #>  [191,] 0.15733470 0.4258201 0.5014951 0.5365851 0.6947332 0.6986426 0.7112743 #>  [192,] 0.58409909 0.6897317 0.7141067 0.7664119 0.7881502 0.7916708 0.8013683 #>  [193,] 0.35646671 0.3899690 0.6119598 0.7148744 0.7228644 0.7429829 0.7727432 #>  [194,] 0.68875772 0.7189778 0.7770964 0.7806625 0.7964278 0.8392598 0.8770237 #>  [195,] 0.67678860 0.7324964 0.8230921 0.8845754 0.9033339 0.9077659 0.9108041 #>  [196,] 0.63570512 0.7348450 0.8110059 0.8367195 0.8756147 0.8992596 0.9439857 #>  [197,] 0.50354047 0.6505265 0.7833600 0.8098356 0.8579608 0.9554723 1.0688377 #>  [198,] 0.26234724 0.4699939 0.5370131 0.5769330 0.6798075 0.7105857 0.7188092 #>  [199,] 0.26513468 0.3384830 0.4728952 0.5314982 0.6366732 0.7049551 0.7269806 #>  [200,] 0.64702337 0.7806625 0.8675748 0.8750932 0.9044477 0.9804356 1.0279479 #>  [201,] 0.77626997 0.7936963 1.0266906 1.1353206 1.1502969 1.1559444 1.1832396 #>  [202,] 1.12976321 1.2011369 1.2034974 1.2203004 1.2821082 1.3363017 1.3653478 #>  [203,] 0.42762418 0.7264004 0.7695012 0.8600948 0.8797952 0.9290759 0.9384245 #>  [204,] 0.36991422 0.4156147 0.4969528 0.5203659 0.5381903 0.5863629 0.6264361 #>  [205,] 0.27109287 0.3219335 0.3335726 0.4014588 0.5163762 0.5976731 0.6321686 #>  [206,] 0.50597776 0.6279276 0.6701691 0.6755843 0.6832611 0.7004793 0.7036933 #>  [207,] 0.33236535 0.3712879 0.4562779 0.4580055 0.5083943 0.5367951 0.5861422 #>  [208,] 0.49472628 0.6393724 0.7970550 0.8303448 0.9681105 1.0440734 1.1057151 #>  [209,] 0.46501069 0.4983881 0.5296864 0.5347317 0.5367951 0.5539200 0.5674496 #>  [210,] 0.79299819 0.9008850 0.9234200 1.0220035 1.0342638 1.0516185 1.0608985 #>  [211,] 0.27015593 0.4052767 0.4325845 0.4472732 0.4571604 0.6088264 0.6467455 #>  [212,] 0.24577553 0.2684923 0.2850986 0.3424899 0.4226947 0.4544832 0.4586901 #>  [213,] 0.64541115 0.6506679 0.6546473 0.6559331 0.6630064 0.6703872 0.6828399 #>  [214,] 0.36730116 0.4336705 0.5467663 0.5672494 0.5841725 0.5877579 0.5904876 #>  [215,] 0.45899657 0.5472876 0.6480834 0.7874958 0.8132158 0.8579533 0.9062561 #>  [216,] 0.48082990 0.7998270 1.0542069 1.0918235 1.1170796 1.1181983 1.1328989 #>  [217,] 0.27015593 0.2920488 0.3263727 0.4267099 0.5366267 0.6597925 0.7110391 #>  [218,] 0.34035160 0.4912053 0.5076791 0.5203659 0.6435715 0.6807536 0.6863212 #>  [219,] 0.63771610 0.9091004 0.9915339 1.0326244 1.0519849 1.0967622 1.1184147 #>  [220,] 0.39460028 0.4762465 0.4936747 0.5240643 0.5904592 0.5991337 0.6266378 #>  [221,] 0.42777760 0.7256621 0.8260353 0.8284906 0.8389723 0.8596104 0.9145398 #>  [222,] 0.33640916 0.3733416 0.4402252 0.4960802 0.5070417 0.5123386 0.5129393 #>  [223,] 0.50907533 0.5103462 0.6667541 0.6875069 0.6882965 0.6971136 0.7334115 #>  [224,] 0.54426341 0.7271139 0.7460303 0.7464571 0.8042436 0.8184496 0.8495015 #>  [225,] 0.23193974 0.4303114 0.5026009 0.5338993 0.5830010 0.5944927 0.6772880 #>  [226,] 0.35586529 0.4377213 0.4553470 0.4599199 0.5152242 0.5168999 0.5620190 #>  [227,] 0.23658888 0.3662962 0.4611907 0.4632167 0.4648630 0.4810058 0.5166793 #>  [228,] 0.26234724 0.5036895 0.5220515 0.6459949 0.6483323 0.7655254 0.8647559 #>  [229,] 0.26221014 0.6125194 0.6434553 0.7034577 0.7184077 0.7662638 0.7749480 #>  [230,] 0.53873028 0.5472876 0.6136132 0.6933421 0.8921770 0.9267238 0.9378682 #>  [231,] 0.11385865 0.2706084 0.3855567 0.4204461 0.4210874 0.4511367 0.5043888 #>  [232,] 0.35646671 0.4905381 0.5274332 0.6226906 0.7714252 0.8728444 0.8751769 #>  [233,] 0.29166433 0.3632250 0.3818954 0.5090753 0.5170808 0.6847826 0.7362102 #>  [234,] 0.37094950 0.3741709 0.3818954 0.4060324 0.4146436 0.5088734 0.5762647 #>  [235,] 0.53962238 0.5915317 0.7328715 0.7749480 0.8038526 0.8475956 0.8733022 #>  [236,] 0.31568046 0.4460953 0.4905930 0.5866667 0.6244658 0.6754986 0.6897317 #>  [237,] 0.48177903 0.5062225 0.5454101 0.6086170 0.6353647 0.6373554 0.6559596 #>  [238,] 0.43031144 0.4378231 0.4785976 0.4794833 0.5649043 0.5734906 0.5937256 #>  [239,] 0.41580704 0.5168549 0.5478629 0.5610640 0.5800238 0.6052222 0.6056943 #>  [240,] 0.43306665 0.4636667 0.5278777 0.5280130 0.5476377 0.5493087 0.5693113 #>  [241,] 0.27421979 0.3401908 0.4679244 0.5015384 0.5951705 0.6589710 0.6843000 #>  [242,] 0.35277249 0.5113246 0.5446964 0.5501168 0.5636512 0.6097028 0.6252463 #>  [243,] 0.40368459 0.4628502 0.4709858 0.6024872 0.6196611 0.6371968 0.6841998 #>  [244,] 0.49049729 0.4984175 0.5984524 0.6218133 0.6219574 0.6379936 0.6696673 #>  [245,] 0.42138359 0.5548590 0.6907589 0.6975568 0.7170688 0.7291138 0.7550013 #>  [246,] 0.33320897 0.3946003 0.5404918 0.5405101 0.6029794 0.6447222 0.6923358 #>  [247,] 0.35809595 0.4249996 0.4485172 0.4874000 0.4886085 0.5104830 0.6041066 #>  [248,] 0.14497914 0.2945955 0.3443294 0.4226947 0.4751519 0.4795986 0.5075104 #>  [249,] 0.24132467 0.3106255 0.3855052 0.4904334 0.5211150 0.5305430 0.5715680 #>  [250,] 0.44751160 0.5764682 0.6202845 0.7098025 0.7896446 0.8204784 0.8523061 #>  [251,] 0.27717054 0.4043964 0.4702680 0.4866325 0.4943793 0.5022536 0.5811566 #>  [252,] 0.44761837 0.4541726 0.5748039 0.5762647 0.6273536 0.6746376 0.7196368 #>  [253,] 0.88271964 0.9134093 0.9337774 0.9605926 1.0560220 1.1276204 1.1559444 #>  [254,] 0.51216105 0.6144050 0.6456828 0.6647219 0.6714378 0.6728462 0.7228273 #>  [255,] 0.55116003 0.5989262 0.6461671 0.6666488 0.6671452 0.6698724 0.6947198 #>  [256,] 0.67663117 0.8651747 0.9299794 1.0754174 1.2261886 1.2283352 1.2438684 #>  [257,] 0.48647176 0.5579976 0.6006649 0.6119598 0.7387974 0.7802803 0.8583442 #>  [258,] 0.43506913 0.5391376 0.6461015 0.6811928 0.6904930 0.6969626 0.7252567 #>  [259,] 0.37417090 0.4476184 0.4882234 0.5305497 0.5619262 0.5749872 0.5780573 #>  [260,] 0.26602341 0.3696375 0.5428405 0.5524009 0.6190162 0.6323793 0.6631650 #>  [261,] 0.30755896 0.4069907 0.4897795 0.5896025 0.6423458 0.6619335 0.7380835 #>  [262,] 0.87513212 0.8884979 1.0680420 1.1393274 1.1396031 1.1860521 1.1896254 #>  [263,] 0.49525537 0.6725715 0.6761964 0.9199260 0.9841020 0.9978282 1.0117157 #>  [264,] 0.18827720 0.2546782 0.3868842 0.4716379 0.5429071 0.5956364 0.6044887 #>  [265,] 0.42894189 0.4353319 0.4432302 0.4857164 0.5329026 0.5482758 0.5635393 #>  [266,] 0.25045672 0.2710929 0.4708972 0.5162898 0.5327237 0.5524315 0.5699487 #>  [267,] 0.52834264 0.5433548 0.5604826 0.5959849 0.6236188 0.6259892 0.6426364 #>  [268,] 0.32988129 0.3793187 0.3844583 0.4696230 0.4803062 0.5026009 0.5390381 #>  [269,] 0.18300368 0.3432129 0.3918867 0.3968774 0.3993446 0.4137245 0.4676192 #>  [270,] 0.86896451 0.9639243 1.0017350 1.0798755 1.0816994 1.1340912 1.1946051 #>  [271,] 0.56897844 0.6081810 0.6576379 0.6616638 0.6855399 0.6938124 0.6972943 #>  [272,] 0.54541010 0.6420312 0.6608451 0.6613899 0.6681265 0.7305295 0.7430614 #>  [273,] 0.73347994 0.8465477 1.1160790 1.1382766 1.2940348 1.3259347 1.3295703 #>  [274,] 0.56179790 0.5633598 0.6046600 0.6593915 0.6746376 0.6802847 0.6959795 #>  [275,] 0.30184308 0.4086542 0.5028624 0.5976579 0.6483097 0.6551563 0.6860164 #>  [276,] 0.48647176 0.5944359 0.6651767 0.6984652 0.8284555 0.8775649 0.9186421 #>  [277,] 0.50560499 0.5145091 0.8132974 0.8498104 0.8627283 1.0182137 1.0242913 #>  [278,] 0.33895914 0.3857887 0.3905421 0.5841207 0.5949830 0.6395879 0.6679342 #>  [279,] 0.53922460 0.6949346 0.7261193 0.7608118 0.7728020 0.7753395 0.7791474 #>  [280,] 0.99073983 1.1883962 1.2130722 1.2594632 1.2628498 1.3213913 1.3542232 #>  [281,] 0.32496451 0.3293844 0.6091527 0.6186299 0.6918162 0.7492617 0.7573279 #>  [282,] 0.17114958 0.3682684 0.4984175 0.5009913 0.6056312 0.6576379 0.6828399 #>  [283,] 0.37956358 0.4741423 0.7434177 0.7802803 0.9009052 1.0024264 1.0787113 #>  [284,] 0.57630488 0.5989262 0.6371668 0.6986623 0.7165424 0.8522693 0.8607963 #>  [285,] 0.96127875 1.1456643 1.1858160 1.1887501 1.2111925 1.2455425 1.2512319 #>  [286,] 0.23071329 0.4220676 0.5028624 0.5756321 0.6216857 0.6470824 0.6672852 #>  [287,] 0.45179510 0.4902426 0.5482758 0.5528379 0.5539200 0.5861422 0.6033399 #>  [288,] 0.60463571 0.6141290 0.6205107 0.6227454 0.6347660 0.6388860 0.7071117 #>  [289,] 0.43646265 0.5629448 0.6015098 0.6556296 0.6576418 0.6755581 0.7216820 #>  [290,] 0.56585902 0.5679776 0.6080726 0.6872571 0.7498082 0.7663848 1.0141766 #>  [291,] 0.62735364 0.6495029 0.6625934 0.7151501 0.7515179 0.7710486 0.8507664 #>  [292,] 0.22878182 0.3396584 0.3892892 0.4104549 0.4836229 0.4911964 0.4954789 #>  [293,] 0.60634613 0.6666488 0.6861381 0.6986623 0.7545343 0.7649585 0.7910862 #>  [294,] 0.38805056 0.4498919 0.6853186 0.9474066 0.9680088 0.9994424 1.0367832 #>  [295,] 0.51757256 0.6747283 0.7298909 0.7571095 0.8113156 0.8283727 0.8496084 #>  [296,] 0.63212619 0.8047347 0.8152201 0.8836643 0.9229082 1.0349735 1.0531388 #>  [297,] 0.32900153 0.3444804 0.5011929 0.7008242 0.8476209 0.8540642 0.9150012 #>  [298,] 0.26273814 0.4762465 0.6166295 0.6237519 0.6945691 0.7132237 0.7343668 #>  [299,] 0.32363757 0.3677441 0.4370087 0.4815012 0.4927753 0.5824831 0.6065853 #>  [300,] 0.53280391 0.5650569 0.5718724 0.5727189 0.5839480 0.5864405 0.5937900 #>  [301,] 0.41688403 0.6499172 0.7391521 0.8168438 0.8183633 0.8485043 0.8685294 #>  [302,] 0.35683283 0.4759985 0.4871968 0.5153501 0.5811986 0.5849063 0.5945904 #>  [303,] 0.53749139 0.5700176 0.7094925 0.7627864 0.8229863 0.8233338 0.8733209 #>  [304,] 0.52492380 0.5265993 0.5521428 0.6326560 0.6572142 0.6924296 0.6952549 #>  [305,] 1.39703563 1.4033121 1.4962233 1.5342968 1.6452324 1.6769069 1.7124617 #>  [306,] 0.84764263 0.9538255 0.9577152 0.9988434 1.0378118 1.0722361 1.0803385 #>  [307,] 0.59936167 0.6205217 0.6336612 0.7503298 0.7979978 0.8203545 0.8302238 #>  [308,] 0.47915846 0.5605553 0.5808979 0.5811294 0.6716297 0.7484315 0.7896864 #>  [309,] 0.32637271 0.4472732 0.5173477 0.6028971 0.7055776 0.7871819 0.8010309 #>  [310,] 0.51275938 0.5154280 0.5943197 0.8088378 0.9379039 0.9439662 0.9487413 #>  [311,] 0.35478609 0.5154280 0.6445435 0.6619335 0.6725715 0.7594103 0.8315241 #>  [312,] 0.38578868 0.4649801 0.4805357 0.5250736 0.6207739 0.6277543 0.6854813 #>  [313,] 0.29978427 0.3183795 0.3558653 0.4606527 0.4791298 0.5054889 0.5188999 #>  [314,] 0.30483092 0.3777833 0.4262917 0.4441846 0.4473519 0.4794480 0.4941092 #>  [315,] 0.96100860 1.1087384 1.2162566 1.2940348 1.4469828 1.4714347 1.4781760 #>  [316,] 0.48949255 0.5325063 0.5788705 0.5845617 0.5849063 0.6005189 0.6471264 #>  [317,] 0.66386778 0.7300812 0.8050419 0.8178860 0.8552304 0.9020382 0.9099141 #>  [318,] 0.57206369 0.6150804 0.6406516 0.6676718 0.6991062 0.7232132 0.7347795 #>  [319,] 0.33665044 0.4110101 0.4410517 0.4857843 0.5824235 0.5862089 0.6056312 #>  [320,] 0.49595953 0.5964400 0.6285624 0.6466962 0.6510060 0.7038352 0.7355442 #>  [321,] 0.58089787 0.7932522 0.8454796 0.8815356 0.8914334 0.8949897 0.8992689 #>  [322,] 0.31172176 0.4158863 0.4973407 0.5179107 0.5768342 0.6228972 0.6251583 #>  [323,] 0.84289775 0.8619005 1.1663163 1.2063106 1.2226546 1.2624525 1.2866420 #>  [324,] 0.64840508 0.6848707 0.7264004 0.7426644 0.7459183 0.8536422 0.8610445 #>  [325,] 0.44851717 0.4722927 0.4728345 0.6716294 0.6955927 0.7489983 0.8049712 #>  [326,] 0.59658097 0.6190225 0.6870597 0.7087235 0.7291209 0.7471520 0.7868124 #>  [327,] 0.09264610 0.2986939 0.4194199 0.4547967 0.4606917 0.4871268 0.5136146 #>  [328,] 0.57013102 0.5795669 0.5991337 0.6152089 0.6166295 0.6188046 0.6575761 #>  [329,] 0.33049323 0.4071002 0.4590610 0.4876406 0.5530217 0.5997464 0.6254507 #>  [330,] 0.15973661 0.4220069 0.4525059 0.4570490 0.5904876 0.6099311 0.6340673 #>  [331,] 0.16384041 0.3834915 0.4068355 0.5051892 0.5111909 0.5148367 0.5219100 #>  [332,] 0.40059847 0.4336712 0.4648630 0.5240293 0.5733186 0.5968819 0.6226108 #>  [333,] 0.28757548 0.3994294 0.4097271 0.4451620 0.4475093 0.4941980 0.5127341 #>  [334,] 0.52417810 0.5327075 0.5511458 0.5547268 0.5630224 0.5857379 0.5945732 #>  [335,] 0.57829312 0.8205998 1.0720157 1.1270571 1.1513176 1.2885444 1.3046630 #>  [336,] 0.11385865 0.3560302 0.3957990 0.4066190 0.4291361 0.4323948 0.4834661 #>  [337,] 0.33762280 0.3644681 0.4438898 0.4722689 0.4871268 0.5145684 0.5163652 #>  [338,] 0.52839554 0.6810432 0.7388299 0.7590968 0.7728020 0.8786167 0.9131434 #>  [339,] 0.72337321 0.7657519 0.7980421 0.8322180 0.8382928 0.8465477 0.9087380 #>  [340,] 0.95586884 1.1434552 1.1758217 1.1896264 1.3388191 1.4114340 1.4410743 #>  [341,] 0.23071329 0.5229960 0.5364420 0.5645295 0.6121149 0.6467638 0.6483097 #>  [342,] 0.23227173 0.3376228 0.3485338 0.4581076 0.4778043 0.4853453 0.5644730 #>  [343,] 0.73249644 0.7916668 0.8718715 0.8837718 0.9402543 0.9891305 0.9964043 #>  [344,] 0.50767908 0.6020568 0.6117965 0.6211115 0.6273695 0.6292865 0.6739771 #>  [345,] 0.34103192 0.4761455 0.4943793 0.4963708 0.5385889 0.5456726 0.5490092 #>  [346,] 0.56411305 1.0268650 1.1317621 1.2064823 1.2248829 1.2426631 1.3014474 #>  [347,] 0.56956637 0.5711716 0.5902476 0.6772880 0.6981290 0.7261384 0.7478822 #>  [348,] 0.62683368 0.6534946 0.7522906 0.7590683 0.7722264 0.8733297 0.9590086 #>  [349,] 0.37931868 0.3996034 0.4002825 0.4732887 0.5023200 0.5622260 0.5852560 #>  [350,] 1.19569127 1.3777556 1.5594700 1.5778751 1.6037402 1.6522831 1.6719931 #>  [351,] 0.37713451 0.4674927 0.5085814 0.5499298 0.5501306 0.5757111 0.5819610 #>  [352,] 0.54397808 0.8001534 0.8474790 0.8808708 0.8987976 0.9454327 1.0291767 #>  [353,] 0.30265640 0.4515339 0.6757969 0.7553914 0.7786231 0.8053766 0.8200832 #>  [354,] 0.27253036 0.3957990 0.4121097 0.4204461 0.4438898 0.4540991 0.4708804 #>  [355,] 0.16675459 0.2207788 0.2213901 0.4170733 0.4404965 0.4794480 0.5254510 #>  [356,] 0.43920040 0.7248170 0.8398839 0.9218868 0.9457345 1.0213071 1.0472074 #>  [357,] 0.32589349 0.4493798 0.4639484 0.4728720 0.5015384 0.5230872 0.5415420 #>  [358,] 0.34432341 0.4663684 0.4761947 0.4873848 0.4987085 0.5372583 0.5446964 #>  [359,] 0.58723992 0.6518823 0.6553773 0.6727212 0.6948689 0.7069972 0.7231017 #>  [360,] 0.28753525 0.5395772 0.5831157 0.5982360 0.5993617 0.6376698 0.6485342 #>  [361,] 0.39484888 0.5173477 0.5366267 0.5805340 0.6701564 0.6879880 0.6882930 #>  [362,] 0.29166433 0.3709495 0.4043286 0.5110600 0.5619262 0.5980034 0.6175919 #>  [363,] 0.43795017 0.6253316 0.7804054 0.9325104 1.0419792 1.0461011 1.0508151 #>  [364,] 0.39591120 0.7267307 0.7633628 0.7856840 0.7936963 0.8479531 0.8548373 #>  [365,] 0.20565379 0.2825492 0.2924426 0.3865451 0.4864442 0.5222855 0.5978089 #>  [366,] 0.32498092 0.3257801 0.3529146 0.3612818 0.3620183 0.3734872 0.4597652 #>  [367,] 0.49329181 0.4969880 0.6285286 0.6792715 0.6965077 0.7039570 0.7287890 #>  [368,] 0.40771354 0.4235132 0.4659465 0.5891303 0.6071685 0.6091096 0.6357548 #>  [369,] 0.61767943 0.6433221 0.6766698 0.7302169 0.7648353 0.8178860 0.8282420 #>  [370,] 0.14923617 0.3736255 0.4674927 0.5616858 0.6994986 0.7589937 0.7648353 #>  [371,] 0.24577553 0.3255263 0.3319527 0.3872288 0.4062461 0.4280563 0.4336705 #>  [372,] 0.35683283 0.3833418 0.4646070 0.4906479 0.5325063 0.5437360 0.5476377 #>  [373,] 0.38555668 0.3998032 0.4066190 0.5002653 0.5249243 0.5342270 0.5582592 #>  [374,] 0.36075204 0.7332057 0.7921911 0.8124798 0.8265301 0.8467156 0.8468371 #>  [375,] 0.56359942 0.6484051 0.7510524 0.7516923 0.7940095 0.8103922 0.8313747 #>  [376,] 0.23227173 0.3549732 0.3644681 0.3708714 0.4178286 0.4904334 0.5033109 #>  [377,] 0.55363397 0.5963860 0.7637623 0.8470036 0.8682726 0.8750932 0.8963105 #>  [378,] 0.46127835 0.6190225 0.6612137 0.6737604 0.6882965 0.7209005 0.7633981 #>  [379,] 0.97714416 1.0833669 1.1389182 1.2652150 1.3440570 1.3468882 1.4332618 #>  [380,] 0.51286644 0.6227454 0.6707661 0.6988698 0.7322471 0.8206869 0.9128331 #>  [381,] 0.63930826 0.8420370 0.8822166 0.9150012 0.9229652 0.9310855 0.9378289 #>  [382,] 0.73586059 0.7725426 0.8783582 0.9206959 0.9325104 0.9800820 0.9877802 #>  [383,] 0.33893763 0.4374798 0.4749802 0.4759978 0.4893140 0.4934228 0.4937165 #>  [384,] 0.59153169 0.8178844 0.9177932 0.9333028 0.9388718 0.9603576 1.0295447 #>  [385,] 0.51345387 0.5265993 0.5544450 0.5670350 0.6030360 0.7268454 0.7584169 #>  [386,] 0.23264498 0.3708714 0.3747914 0.4358022 0.4728031 0.4750619 0.4834017 #>  [387,] 0.64991719 0.7618960 0.8794045 0.8852594 0.9138068 0.9399565 1.0133782 #>  [388,] 0.48082990 0.8092623 0.8850054 1.0608725 1.0699359 1.1437537 1.2034974 #>  [389,] 0.42792814 0.5291528 0.5717433 0.6022260 0.6041286 0.6501275 0.7393235 #>  [390,] 0.83039661 0.8315643 0.8626644 0.8684044 0.8736451 0.8775793 0.8799495 #>  [391,] 0.44903679 0.6447991 0.7056075 0.7180029 0.7342716 0.7363363 0.7469018 #>  [392,] 1.27295698 1.3002151 1.5010944 1.5332080 1.5432959 1.5727286 1.6656172 #>  [393,] 0.53671923 0.5434676 0.5714999 0.6448653 0.7501965 0.7910862 0.8011135 #>  [394,] 0.34981032 0.4885246 0.5391909 0.6052670 0.6319952 0.6913456 0.7002086 #>  [395,] 0.35809595 0.4580135 0.5548590 0.6485247 0.6550126 0.6679863 0.6925922 #>  [396,] 0.50387357 0.5450374 0.6065157 0.6195511 0.6542293 0.6932657 0.7312848 #>  [397,] 0.73287154 0.8128872 0.9177932 1.1516997 1.2213397 1.2573432 1.2710683 #>  [398,] 0.97714416 1.1968051 1.3339641 1.3977465 1.4435494 1.4512482 1.4524331 #>  [399,] 0.51461738 0.5563139 0.5824501 0.6496164 0.6642630 0.7170544 0.7363363 #>  [400,] 0.16384041 0.4128020 0.4441846 0.4773690 0.4818558 0.5162194 0.5188630 #>  [401,] 0.75725601 1.1071738 1.3087544 1.3522474 1.3612716 1.4088868 1.4091522 #>  [402,] 0.45899657 0.5387303 0.7775440 0.8491732 0.8733115 0.8978619 0.9513088 #>  [403,] 0.44668542 0.4854788 0.5134891 0.5429071 0.5650681 0.5987747 0.6064846 #>  [404,] 0.26614652 0.3597163 0.4035137 0.4038492 0.4336712 0.4562779 0.4810058 #>  [405,] 0.31434557 0.3353735 0.3765060 0.5338129 0.5506415 0.5788999 0.6790753 #>  [406,] 0.47328870 0.5036067 0.5600212 0.5918565 0.6058425 0.6075533 0.6144054 #>  [407,] 0.32763508 0.3687349 0.3865451 0.5375960 0.5418696 0.5848288 0.6202173 #>  [408,] 0.32180370 0.4068171 0.4313897 0.5168037 0.5214221 0.5735838 0.5849558 #>  [409,] 0.42503333 0.4788569 0.5431709 0.5600070 0.6164373 0.6198936 0.6423458 #>  [410,] 0.29712305 0.3048309 0.3608982 0.3834915 0.4128020 0.4170733 0.4207614 #>  [411,] 0.14923617 0.4070119 0.5085814 0.6317119 0.6953241 0.7231510 0.7302169 #>  [412,] 0.35062600 0.3871472 0.5080292 0.5757111 0.6029794 0.6501234 0.6677680 #>  [413,] 0.46436442 0.4732303 0.5807523 0.7692808 0.8132974 0.8604506 0.9092865 #>  [414,] 0.38058861 0.3821449 0.4612784 0.5268288 0.5965810 0.6765079 0.7620607 #>  [415,] 0.77062918 0.8887522 0.9304296 0.9377795 1.0131506 1.0378118 1.0493909 #>  [416,] 0.46247427 0.5701310 0.7464571 0.7484315 0.7838205 0.7932522 0.7979358 #>  [417,] 0.37841384 0.4517760 0.6453920 1.0196440 1.0501254 1.0610421 1.0796580 #>  [418,] 0.20599068 0.2659855 0.3247494 0.4411470 0.5152206 0.5219731 0.5381903 #>  [419,] 1.50165164 1.5566545 1.7562097 1.7781163 1.8526217 1.9944888 1.9959545 #>  [420,] 0.81859155 0.8780857 0.9018925 0.9411896 1.0966700 1.1186711 1.1234300 #>  [421,] 0.41949584 0.5522065 0.5780912 0.6872571 0.7288330 0.7911677 0.8066617 #>  [422,] 0.33332867 0.4065677 0.4189319 0.4599582 0.5427179 0.5443775 0.5534736 #>  [423,] 0.35062600 0.3771345 0.4051693 0.5329026 0.5616858 0.6317119 0.6499900 #>  [424,] 0.24539365 0.3055800 0.5220515 0.5645295 0.5726009 0.5752391 0.5769330 #>  [425,] 0.24877463 0.3403516 0.5012212 0.5261316 0.5376911 0.6020568 0.6328536 #>  [426,] 0.43766175 0.6287463 0.7358413 0.7534718 0.8051021 0.8202954 0.8804819 #>  [427,] 0.58987297 0.7968189 0.8139191 0.8293837 0.8868067 0.9157723 1.0249528 #>  [428,] 0.30184308 0.4684249 0.4866521 0.5023200 0.6287097 0.6325972 0.6470824 #>  [429,] 0.45177604 0.4941703 0.8057426 0.9143950 0.9217400 0.9324001 0.9365115 #>  [430,] 0.24132467 0.3923103 0.4582989 0.4866541 0.5227396 0.5416229 0.6058351 #>  [431,] 0.42001543 0.5652119 0.8454878 0.8882427 0.9403110 1.0172094 1.0498040 #>  [432,] 0.51321712 0.8164687 0.8579608 0.8920081 0.9723560 0.9831813 1.0222538 #>  [433,] 1.01222969 1.0500083 1.0545793 1.1011729 1.1103671 1.1375053 1.1868614 #>  [434,] 0.18572872 0.2213901 0.2470806 0.3162534 0.4262917 0.4307927 0.4845802 #>  [435,] 0.39425896 0.5464167 0.5756912 0.5775620 0.6798075 0.6968326 0.7089528 #>  [436,] 0.32608504 0.4914423 0.6273553 0.6945955 0.7511034 0.7578897 0.8682726 #>  [437,] 0.34778487 0.3594215 0.4012463 0.4290355 0.4688063 0.4837338 0.4904860 #>  [438,] 0.26598554 0.3414514 0.3439987 0.3912617 0.5118463 0.6041066 0.6064915 #>  [439,] 0.38165349 0.5201248 0.5235431 0.5301581 0.5487316 0.5629739 0.6012823 #>  [440,] 0.36730116 0.3872288 0.3986254 0.4220069 0.5105140 0.5648409 0.5983522 #>  [441,] 0.26185737 0.3643519 0.4547967 0.4564003 0.4676192 0.5015422 0.5102585 #>  [442,] 0.40163003 0.4501130 0.4769364 0.5594759 0.5616067 0.6179074 0.6418433 #>  [443,] 0.40384467 0.5578626 0.5667210 0.5976073 0.6186299 0.6344208 0.6355452 #>  [444,] 0.44371287 0.4556674 0.4663684 0.5155855 0.5720596 0.5782733 0.5909827 #>  [445,] 0.54652483 0.5578626 0.6471264 0.6512282 0.7213584 0.7248475 0.7554409 #>  [446,] 0.42217148 0.9146240 1.1108272 1.2406298 1.2672037 1.4422839 1.4768891 #>  [447,] 0.31381081 0.3215900 0.3965095 0.4075164 0.4363674 0.5776085 0.5872399 #>  [448,] 0.63930826 0.7068138 0.7905586 0.8485288 0.9448100 0.9454826 0.9463739 #>  [449,] 0.62195737 0.7026467 0.7706292 0.7774977 0.7842577 0.7873064 0.7992068 #>  [450,] 0.53015814 0.5585327 0.5782388 0.7680610 0.7996677 0.8266175 0.8280137 #>  [451,] 0.70417733 0.7780667 0.8783416 0.8879344 1.0176479 1.0418817 1.2696049 #>  [452,] 0.50354047 0.5132171 0.8498347 0.9109355 0.9793724 1.0243700 1.0253382 #>  [453,] 0.52170688 0.5439781 0.6534946 0.6685688 0.7427960 0.7450305 0.8685284 #>  [454,] 0.80351764 0.8532130 0.9507968 0.9810141 1.0468914 1.0584270 1.0669432 #>  [455,] 0.46280133 0.5229958 0.5764522 0.6081336 0.6152350 0.6236188 0.6359586 #>  [456,] 0.26869731 0.5338129 0.5427306 0.6119627 0.6125931 0.6205152 0.6449372 #>  [457,] 0.87561469 0.8968453 0.9726383 1.0795648 1.1334146 1.3649339 1.3836707 #>  [458,] 0.79982698 0.8092623 1.1324100 1.2352794 1.2629159 1.3370564 1.3601596 #>  [459,] 0.40448080 0.4182446 0.5172354 0.5427874 0.6287097 0.6452659 0.6860164 #>  [460,] 0.42351320 0.4460953 0.5320984 0.6444653 0.6485247 0.6538284 0.6867619 #>  [461,] 0.61243142 0.6903371 0.7423286 0.7912806 0.8678948 0.8774237 0.9365715 #>  [462,] 0.32897241 0.4332854 0.4388504 0.4872580 0.5133867 0.5148992 0.5629448 #>  [463,] 0.33848304 0.3942889 0.5551817 0.5949946 0.6539644 0.6548030 0.7181175 #>  [464,] 0.52402932 0.6358272 0.6989289 0.7186997 0.7526134 0.7627532 0.7737235 #>  [465,] 0.33869784 0.4217906 0.4451055 0.5199285 0.5272405 0.5281799 0.5352541 #>  [466,] 0.62023075 0.8055591 0.8706024 0.9126600 0.9148494 0.9700600 0.9813962 #>  [467,] 0.53177739 0.5775509 0.6965567 0.7393516 0.7445203 0.8152895 0.8313566 #>  [468,] 0.59239752 0.7239992 0.8754365 0.9070943 0.9336997 0.9399318 0.9399565 #>  [469,] 0.69957504 0.7011178 0.7517258 0.7554027 0.8010461 0.8049261 0.8078077 #>  [470,] 0.22974326 0.3341520 0.3942590 0.4430572 0.5006644 0.5370131 0.5752391 #>  [471,] 0.89498122 1.5337193 1.5472375 1.7110910 1.7227622 1.7304236 1.7410348 #>  [472,] 0.32938440 0.3845408 0.6645202 0.6656692 0.7152557 0.8008561 0.8070347 #>  [473,] 0.42777760 0.7259542 0.8710555 0.9214144 0.9290528 0.9609171 0.9653723 #>  [474,] 0.76603993 0.8581779 0.8886171 0.9190550 0.9891400 1.0584270 1.1529873 #>  [475,] 0.77726715 1.1098039 1.2262261 1.2654249 1.2723441 1.2752180 1.3760421 #>  [476,] 0.58366744 0.6426364 0.6832611 0.7173183 0.7370398 0.7393516 0.7537245 #>  [477,] 0.13761279 0.3944048 0.4469318 0.4716379 0.5134891 0.5294680 0.5660566 #>  [478,] 0.31583596 0.4054191 0.4749802 0.5201450 0.5483254 0.5512335 0.5521428 #>  [479,] 0.28753525 0.5008775 0.6269081 0.6378631 0.6505448 0.6657796 0.6929623 #>  [480,] 0.39950149 0.4916994 0.5214541 0.5430513 0.5443225 0.5468600 0.5844119 #>  [481,] 0.58655601 0.5960008 0.6626598 0.6983580 0.7287890 0.7326394 0.8154726 #>  [482,] 0.63039712 0.6876750 0.7656657 0.7757077 0.8108355 0.8265923 0.8490086 #>  [483,] 0.49769597 0.5235431 0.6090764 0.6767886 0.7040224 0.8078088 0.8285459 #>  [484,] 1.03005851 1.0591070 1.0854438 1.1137166 1.1365819 1.1688640 1.1905522 #>  [485,] 0.91294242 1.0354632 1.2017778 1.2398530 1.2638908 1.2698381 1.3198699 #>  [486,] 0.59014553 0.7887583 0.7944107 0.9499849 0.9881559 0.9889523 1.0482489 #>  [487,] 0.41575517 0.5989865 0.7778703 0.8464341 0.8604506 0.8716993 0.9454519 #>  [488,] 0.47028570 0.4893140 0.5010677 0.5132861 0.5696109 0.5717142 0.6076039 #>  [489,] 0.26469039 0.3747914 0.4492595 0.4514373 0.4655046 0.4927753 0.5191488 #>  [490,] 0.85318661 0.9859578 1.0294552 1.0826005 1.1597600 1.2830096 1.2887715 #>  [491,] 0.32159000 0.4785917 0.5605023 0.5713210 0.5969857 0.5988442 0.6097561 #>  [492,] 0.44131381 0.6992137 0.7434177 0.7732773 1.1004053 1.1313126 1.1603603 #>  [493,] 0.51596135 0.6168797 0.6240537 0.6656510 0.6965077 0.6989282 0.7209382 #>  [494,] 0.50877707 0.5305497 0.5628012 0.5735838 0.5748039 0.6161371 0.6401227 #>  [495,] 0.54050609 0.6888260 0.6984455 0.7786231 0.7796350 0.7833600 0.8039336 #>  [496,] 0.26597476 0.4241345 0.4441853 0.4458431 0.4575622 0.4599199 0.4606527 #>  [497,] 0.69586488 0.8029193 0.8278103 0.8286602 0.8532130 0.8581779 0.8600516 #>  [498,] 0.40381719 0.4687001 0.4853756 0.4905121 0.5006644 0.5695137 0.5982686 #>  [499,] 0.87391223 0.8765178 0.8973212 0.9429621 0.9590074 0.9801095 0.9896054 #>  [500,] 0.42204818 0.4914423 0.6125057 0.7348791 0.7510285 0.7619560 0.7669684 #>  [501,] 0.76189601 0.7840481 0.8823333 0.9408537 0.9828514 1.0495458 1.0585420 #>  [502,] 0.42179058 0.4581076 0.4612797 0.4623773 0.5391146 0.5418420 0.5968797 #>  [503,] 0.35927611 0.4044808 0.5442634 0.7020964 0.7658580 0.8191116 0.8340703 #>  [504,] 0.31172176 0.4119396 0.5418696 0.5934188 0.5978089 0.6980159 0.6985284 #>  [505,] 1.01482077 1.1859332 1.2202678 1.2253239 1.2368638 1.2700034 1.3877294 #>  [506,] 0.31568046 0.5008775 0.5237653 0.5320984 0.5750439 0.6323055 0.6339414 #>  [507,] 0.26769508 0.3693587 0.4242231 0.4358022 0.4492595 0.4899177 0.5199285 #>  [508,] 0.55703918 0.5640150 0.6200190 0.6619203 0.6938124 0.7887583 0.8061597 #>  [509,] 0.39953155 0.5285368 0.6004608 0.6064321 0.6354256 0.6405840 0.6444376 #>  [510,] 0.84629264 0.9804617 1.1221070 1.1423025 1.2855747 1.3229535 1.3305998 #>  [511,] 0.37750570 0.4455877 0.4606917 0.4607841 0.5075487 0.5157298 0.5163133 #>  [512,] 0.40972713 0.4357215 0.4388504 0.4504554 0.5518156 0.5526944 0.5661026 #>  [513,] 0.84981037 0.8874781 0.9756547 1.0930675 1.2284050 1.2310120 1.3003956 #>  [514,] 0.46538934 0.5536340 0.5597603 0.6388860 0.6663305 0.6946238 0.7348791 #>  [515,] 0.39095019 0.8233904 0.9190209 0.9636443 1.0250457 1.1696396 1.2000606 #>  [516,] 0.42215355 0.6273300 0.6434553 0.6921028 0.7311006 0.7446318 0.8102643 #>  [517,] 0.38079533 0.4159646 0.5976073 0.6327408 0.6512282 0.6972006 0.7044840 #>  [518,] 0.49531253 0.5670245 0.8278103 0.8683974 0.8894576 0.9077918 0.9612524 #>  [519,] 0.81288717 1.4432566 1.5188627 1.5383684 1.6320416 1.6556939 1.6676806 #>  [520,] 0.26472027 0.3323653 0.4038492 0.4284577 0.5296864 0.5528379 0.5877579 #>  [521,] 0.33009762 0.4830914 0.5115742 0.5213231 0.5563139 0.6483922 0.6947833 #>  [522,] 0.34005854 0.4937364 0.6052557 0.6318218 0.7156928 0.7347204 0.7424546 #>  [523,] 1.04533705 1.2624525 1.2846573 1.3535788 1.5649542 1.6477822 1.7021908 #>  [524,] 0.64655077 0.7033830 0.7468988 0.7688183 0.8237459 0.8281722 0.8530957 #>  [525,] 0.21559037 0.5687630 0.6353647 0.6359485 0.6626566 0.7151501 0.7609164 #>  [526,] 0.32966510 0.3720357 0.3944048 0.6241143 0.7354569 0.7372228 0.7481284 #>  [527,] 0.11014585 0.3821449 0.6737604 0.7334115 0.7408824 0.7450305 0.7590683 #>  [528,] 0.35444866 0.6228079 0.6425978 0.6829477 0.6915035 0.7073909 0.7168803 #>  [529,] 0.46089443 0.5014951 0.5507441 0.6619961 0.6780399 0.7639565 0.8203909 #>  [530,] 0.41688403 0.4304947 0.5820362 0.6056666 0.7095518 0.7129964 0.8507649 #>  [531,] 0.40084481 0.5522254 0.5654279 0.5772985 0.5950111 0.6245131 0.6261714 #>  [532,] 0.38079533 0.4038447 0.4902990 0.4991854 0.5342959 0.5477619 0.7347795 #>  [533,] 0.59638597 0.6842969 0.6843928 0.7759565 0.7986166 0.8867989 0.8909814 #>  [534,] 0.62018242 0.6706836 0.7423286 0.8565488 0.9186459 0.9399565 0.9433221 #>  [535,] 0.33160695 0.5352670 0.5429895 0.5486217 0.5628012 0.5872724 0.5902972 #>  [536,] 0.79705500 0.8653645 1.2117551 1.3946685 1.4618463 1.5006401 1.5779180 #>  [537,] 0.30054048 0.3494427 0.3954204 0.4012463 0.5441546 0.5635931 0.6187139 #>  [538,] 0.55444502 0.5728185 0.6483425 0.7023191 0.7578219 0.8172540 0.8215886 #>  [539,] 0.32656845 0.4016300 0.4225708 0.5395776 0.5811302 0.6406516 0.6562056 #>  [540,] 0.40947820 0.4472378 0.4866325 0.5723292 0.5952403 0.6005189 0.6111583 #>  [541,] 0.13605342 0.5070417 0.5295698 0.5307206 0.5359880 0.5649974 0.5880154 #>  [542,] 0.89200814 0.8968453 0.9109355 0.9439857 0.9831988 1.0145061 1.0688377 #>  [543,] 0.43700867 0.4506103 0.4514373 0.4757521 0.4954672 0.5271303 0.5271991 #>  [544,] 0.52403629 0.5430272 0.5982686 0.6084430 0.6676718 0.6715535 0.6827524 #>  [545,] 0.26406906 0.3527725 0.3994294 0.4081393 0.4576793 0.4761947 0.5109304 #>  [546,] 0.40924030 0.4618772 0.4963708 0.5370692 0.5622166 0.6283467 0.6302799 #>  [547,] 0.36075204 0.6924369 0.7061478 0.7082476 0.8253049 0.8388957 0.8538466 #>  [548,] 0.92449631 0.9488214 0.9638535 1.0437005 1.1064288 1.1448842 1.1810709 #>  [549,] 0.33049323 0.4348400 0.4493798 0.4662409 0.5681195 0.5831249 0.5862775 #>  [550,] 0.44751160 0.7578219 0.7720874 0.7964321 0.8217016 0.8852683 0.8980910 #>  [551,] 0.36990975 0.4068171 0.5887291 0.5964400 0.6114813 0.6161371 0.6396644 #>  [552,] 0.34462970 0.4995926 0.6419276 0.6628079 0.6697857 0.6818518 0.6876750 #>  [553,] 0.56585902 0.5780912 0.5873839 0.7292244 0.7809619 0.8091214 0.8241424 #>  [554,] 0.48665410 0.5052197 0.5188999 0.5300460 0.5438196 0.5880154 0.5948096 #>  [555,] 0.30868219 0.4988244 0.5194916 0.5406989 0.6090764 0.6459945 0.6731011 #>  [556,] 0.72606662 0.7853102 0.8098356 0.8502315 0.8831779 0.9793724 0.9924276 #>  [557,] 0.62001905 0.6855399 0.7175596 0.9201843 0.9864097 0.9889523 0.9939295 #>  [558,] 0.45153387 0.5875832 0.6071064 0.6741233 0.6965567 0.7184077 0.7720202 #>  [559,] 0.46834021 0.9519649 0.9682620 1.0114219 1.0166187 1.0196440 1.0309844 #>  [560,] 0.51345387 0.5207672 0.5391376 0.5907716 0.6477271 0.6483425 0.6724075 #>  [561,] 0.37841384 0.4941703 0.8443504 0.8713161 0.9042904 1.0825557 1.0921531 #>  [562,] 0.37203569 0.5460890 0.6097233 0.6147053 0.6381927 0.6710613 0.6789451 #>  [563,] 0.39157107 0.5020439 0.5317774 0.6223959 0.6754986 0.6903727 0.6934095 #>  [564,] 0.57281847 0.5847738 0.5929792 0.6004608 0.6879317 0.7822059 0.7919644 #>  [565,] 0.29056256 0.4903020 0.5182628 0.5250736 0.5587434 0.5720149 0.5841207 #>  [566,] 0.63704601 0.6398175 0.8445840 0.8783896 0.9305689 0.9399246 1.0077010 #>  [567,] 0.52839554 0.5733805 0.6895491 0.7163225 0.7753395 0.7951380 0.8349838 #>  [568,] 0.56702448 0.6013228 0.7017922 0.7676044 0.7749511 0.7913768 0.7924056 #>  [569,] 0.42724301 0.4691420 0.7224444 0.9044477 0.9248496 1.0038575 1.0076223 #>  [570,] 0.31980172 0.6696607 0.7978085 0.8283067 0.8734606 0.8833447 0.9079143 #>  [571,] 0.85323256 0.9009176 0.9809515 0.9866872 1.0140269 1.0272686 1.0432349 #>  [572,] 0.14725011 0.4872070 0.5586845 0.5776000 0.6164373 0.6801115 0.6824805 #>  [573,] 0.43501249 0.4604540 0.5370100 0.5494835 0.5500191 0.5622260 0.5687533 #>  [574,] 0.13657853 0.3074406 0.3855052 0.4582989 0.4757521 0.4777456 0.4811377 #>  [575,] 0.48309140 0.5462517 0.5483014 0.5905782 0.6065193 0.6496164 0.6589710 #>  [576,] 0.55803263 0.5649146 0.5890231 0.6981628 0.7163225 0.7662558 0.8077645 #>  [577,] 0.51286644 0.5775620 0.7559686 0.7894947 0.8420151 0.8846168 0.9078214 #>  [578,] 0.79513801 0.8883866 0.9737139 1.0060876 1.0672923 1.1106708 1.1172508 #>  [579,] 0.47560114 0.8227617 0.8540642 0.8645869 0.9122751 1.0059919 1.0492076 #>  [580,] 0.41245096 0.5612429 0.6299614 0.6363851 0.6467455 0.6597925 0.6670808 #>  [581,] 0.20704385 0.3364092 0.4403934 0.4599421 0.5307354 0.5960711 0.6078455 #>  [582,] 0.33298143 0.3389376 0.4432302 0.5132861 0.5222582 0.5528588 0.5548113 #>  [583,] 0.46229949 0.5324730 0.5675156 0.6004920 0.6299978 0.8367253 0.8445840 #>  [584,] 0.57829312 0.6023026 0.8133132 1.0223142 1.1233097 1.1286578 1.1305746 #>  [585,] 0.10540724 0.2642339 0.3283008 0.3908982 0.4670581 0.5188914 0.5717142 #>  [586,] 0.14239550 0.4910270 0.7041250 0.7162773 0.7180029 0.7887302 0.8047347 #>  [587,] 0.42217148 1.1152745 1.3280204 1.3972565 1.4389646 1.5975047 1.6102139 #>  [588,] 0.38714719 0.4051693 0.5501306 0.6603728 0.6747291 0.6817282 0.7846648 #>  [589,] 0.44232046 0.4967667 0.4990915 0.5365851 0.5968873 0.6041286 0.7157375 #>  [590,] 0.33353948 0.4659465 0.5118463 0.5219731 0.5311697 0.5376911 0.6246006 #>  [591,] 0.50106768 0.5415271 0.5528588 0.5670350 0.5914062 0.6312271 0.6326560 #>  [592,] 0.31577407 0.4125208 0.4411470 0.4995926 0.6064915 0.6076908 0.6264361 #>  [593,] 0.26825880 0.3554180 0.4054191 0.4068689 0.4934228 0.5464039 0.5548113 #>  [594,] 0.33895914 0.4649801 0.4650429 0.5128200 0.5376487 0.5406588 0.6690268 #>  [595,] 0.13915496 0.2340584 0.2708912 0.3138108 0.3257801 0.4252128 0.5275008 #>  [596,] 0.43897067 0.4527128 0.5123386 0.5146007 0.5168549 0.5232744 0.5307206 #>  [597,] 0.34941916 0.6032275 0.7214574 0.7547169 0.7614115 0.7885007 0.8018159 #>  [598,] 0.36991422 0.5645590 0.6117965 0.6485342 0.6807536 0.6848283 0.6898545 #>  [599,] 0.31980172 0.3788752 0.7674403 0.7739283 0.8189743 0.8722788 0.9361623 #>  [600,] 0.48426099 0.5207672 0.6194549 0.6393379 0.6932989 0.6973646 0.7007186 #>  [601,] 0.26006617 0.2725304 0.3158967 0.3668764 0.4323948 0.4552401 0.4840158 #>  [602,] 0.38769156 0.4552401 0.5095269 0.5272405 0.5274977 0.5441699 0.5649043 #>  [603,] 0.25657646 0.2836042 0.3949034 0.3993446 0.4173535 0.4688063 0.5472189 #>  [604,] 1.32156809 1.3504924 1.3969555 1.4435494 1.4801797 1.4848366 1.4868430 #>  [605,] 0.41404907 0.4704737 0.5342959 0.5345244 0.5811302 0.6150804 0.6210127 #>  [606,] 0.43306321 0.4586969 0.5011929 0.5145463 0.8625345 0.9122751 0.9699410 #>  [607,] 0.34329210 0.4830193 0.5118004 0.5476977 0.5932659 0.6057762 0.6194134 #>  [608,] 0.42596607 0.6944233 0.7267307 0.8123001 0.9014772 0.9925119 0.9933604 #>  [609,] 0.47358281 0.5819610 0.6953241 0.7589937 0.7695012 0.7875780 0.7886602 #>  [610,] 0.34534730 0.5612812 0.5807523 0.5989865 0.6997752 0.7098896 0.7948941 #>  [611,] 0.64972373 0.8296369 0.9359347 0.9935480 1.1170142 1.1857734 1.1874665 #>  [612,] 0.49950962 0.5461476 0.5844533 0.6887232 0.6939027 0.7236162 0.7311006 #>  [613,] 0.51034624 0.7005292 0.7464162 0.7627591 0.8220422 0.8241424 0.8468164 #>  [614,] 0.38805056 0.4248508 0.7260666 0.8164687 0.8281187 0.8882345 1.0117543 #>  [615,] 0.43766175 0.8169650 0.8245007 0.8265923 0.8405998 0.8724613 0.8773107 #>  [616,] 0.69532453 0.7127862 0.7691807 0.7691884 0.7951309 0.8584633 0.8640262 #>  [617,] 0.64950287 0.7247861 0.7384675 0.7691807 0.7726700 0.8476682 0.8815145 #>  [618,] 0.13605342 0.5232744 0.5260483 0.5335993 0.5367502 0.5455938 0.5888028 #>  [619,] 0.25825923 0.2879840 0.4423549 0.4902426 0.5083943 0.5250959 0.5347317 #>  [620,] 0.31589674 0.3201407 0.3876916 0.4226778 0.4617350 0.4785976 0.5274924 #>  [621,] 0.44408698 0.6433221 0.6638678 0.6777232 0.7736989 0.8373940 0.9120165 #>  [622,] 0.28126546 0.5167060 0.5367192 0.7041773 0.7545343 0.8406691 0.8651369 #>  [623,] 0.41596465 0.4991854 0.6152802 0.7225992 0.8132627 0.8433781 0.8465809 #>  [624,] 0.26221014 0.5396224 0.5595993 0.7720202 0.7737235 0.8131691 0.8660427 #>  [625,] 0.38445831 0.3996034 0.5338993 0.5494835 0.5902476 0.6058425 0.6347119 #>  [626,] 0.36658742 0.4937364 0.5472774 0.5476168 0.5586766 0.5969436 0.6302301 #>  [627,] 0.32897241 0.3486599 0.4220429 0.4364627 0.5622200 0.5980034 0.6064031 #>  [628,] 0.37410624 0.6279502 0.7018250 0.7688183 0.7724568 0.8454031 0.8507664 #>  [629,] 0.26825880 0.3158360 0.3937187 0.5249238 0.5618557 0.5973146 0.6264150 #>  [630,] 0.84463280 0.9022867 1.0874911 1.1521451 1.2804266 1.2991575 1.3448541 #>  [631,] 0.98897071 1.2417789 1.2483729 1.2487001 1.2849074 1.3082085 1.3190040 #>  [632,] 0.32574572 0.5030405 0.5052197 0.5295698 0.5416229 0.5672956 0.5750323 #>  [633,] 0.30270901 0.4509553 0.4590145 0.4887628 0.5700626 0.6730666 0.6831005 #>  [634,] 0.44948403 0.6207739 0.6279276 0.6566831 0.6619961 0.6659709 0.6783613 #>  [635,] 0.73347994 0.7657519 0.8861932 0.9669530 0.9756221 0.9824648 1.0882357 #>  [636,] 0.50484981 0.5307354 0.5466947 0.6086170 0.6292867 0.6924369 0.7148744 #>  [637,] 0.43328537 0.5622200 0.5982544 0.6015098 0.6658604 0.6797140 0.6816178 #>  [638,] 0.41045489 0.4320986 0.4384523 0.4502674 0.4554645 0.4670581 0.4932918 #>  [639,] 0.66086701 0.7749511 0.8464659 0.8518666 0.9008446 0.9173914 0.9406284 #>  [640,] 0.54476219 0.5511600 0.5763049 0.5958946 0.6063461 0.6241663 0.6340673 #>  [641,] 0.56411305 0.7459298 0.8866105 0.8905610 0.9595519 1.0019762 1.0151421 #>  [642,] 0.54500583 0.9673268 0.9894972 1.0137514 1.0668762 1.0915144 1.1120387 #>  [643,] 0.48426099 0.7384290 0.7874671 0.8274262 0.8342725 0.9013973 0.9054635 #>  [644,] 0.40368459 0.6131296 0.6675235 0.6772467 0.6972006 0.6983545 0.7128151 #>  [645,] 0.89879764 1.0247809 1.0521670 1.1185554 1.1617251 1.1665788 1.1691636 #>  [646,] 0.62876271 0.7177355 0.7281564 0.7292244 0.7359161 0.7627591 0.7793370 #>  [647,] 0.33665044 0.3531671 0.4876406 0.5594759 0.5681195 0.5719950 0.5870209 #>  [648,] 0.32606763 0.3569337 0.4322474 0.4492386 0.4954379 0.4954789 0.5764522 #>  [649,] 0.14725011 0.5431709 0.5708888 0.5966825 0.6538272 0.6593877 0.6732282 #>  [650,] 0.07637815 0.2207788 0.2470806 0.4153771 0.4374798 0.5222582 0.5330448 #>  [651,] 0.30270901 0.3407108 0.3557947 0.5113557 0.5512574 0.5949562 0.6009989 #>  [652,] 0.61830674 0.7341037 0.7748527 0.7758678 0.7865625 0.8087952 0.8117512 #>  [653,] 0.63039712 0.6765304 0.9430822 1.0162572 1.1465133 1.1485756 1.1951987 #>  [654,] 0.51450906 0.6629193 0.7098896 0.7489983 0.7677618 0.7692808 0.7863360 #>  [655,] 0.54500583 0.5595993 0.6071064 0.6125194 0.7765280 0.8038526 0.9116066 #>  [656,] 0.28360423 0.3918867 0.3937756 0.4780473 0.5184394 0.5858439 0.6270771 #>  [657,] 0.34462970 0.4548488 0.4969528 0.5376085 0.5398089 0.6002691 0.6335110 #>  [658,] 0.30054048 0.3126420 0.3594215 0.5350553 0.5454839 0.6213356 0.6301865 #>  [659,] 1.20182935 1.4486069 1.4698750 1.4833409 1.5672992 1.5837809 1.6682926 #>  [660,] 0.81125916 0.8651747 0.9517676 1.4962686 1.5231156 1.5239422 1.5367968 #>  [661,] 0.43040417 0.5000667 0.5587434 0.5760742 0.5824235 0.5951037 0.6023108 #>  [662,] 0.81968467 0.9210994 0.9602663 1.0076223 1.0104976 1.0173370 1.0274899 #>  [663,] 0.59668335 0.8984694 1.4052774 1.4679823 1.5275814 1.5736547 1.5979775 #>  [664,] 0.36421767 0.6314360 0.7358797 0.8023494 0.8736451 0.9290759 0.9463395 #>  [665,] 0.22118093 0.5257332 0.5364084 0.6771546 0.6917977 0.7471495 0.7911677 #>  [666,] 0.59719116 0.6057902 0.7122500 0.8067836 0.8223282 0.8907746 0.9391039 #>  [667,] 0.78052407 0.8887522 0.9402008 1.0722361 1.2622028 1.3658451 1.3981191 #>  [668,] 0.26423390 0.3038202 0.3227257 0.5687533 0.5876697 0.5878029 0.5908022 #>  [669,] 0.33332867 0.5075538 0.5521372 0.5842848 0.6057657 0.6202845 0.6290491 #>  [670,] 0.74577000 0.7853102 0.8376724 0.8449323 0.9255412 0.9554723 0.9805734 #>  [671,] 0.46914203 0.5151282 0.5986330 0.7714077 0.8923293 0.9804356 1.0037609 #>  [672,] 0.72595420 0.9612788 1.0927463 1.2598877 1.3599056 1.3681906 1.4105007 #>  [673,] 0.58646964 0.6393724 0.7488919 0.8468164 0.8584272 0.8771873 0.8869364 #>  [674,] 0.66987238 0.6861381 0.7888735 0.8082972 0.8424082 0.9268503 0.9462525 #>  [675,] 0.88663770 0.9476694 0.9812513 1.0784046 1.1888129 1.2000606 1.2040945 #>  [676,] 0.68460707 0.7938946 0.8666066 0.9146240 1.0227699 1.1104297 1.1121059 #>  [677,] 0.45767932 0.4995096 0.5522868 0.5931316 0.5973330 0.6063485 0.6252463 #>  [678,] 0.59668335 1.0645720 1.0783123 1.2501743 1.2705879 1.2908415 1.2969669 #>  [679,] 0.34248988 0.3603835 0.3833418 0.4432055 0.4871968 0.4894926 0.5381686 #>  [680,] 1.00263347 1.0921531 1.1507294 1.2838994 1.3154759 1.3193360 1.3586238 #>  [681,] 0.47597076 0.5240643 0.5357379 0.5388629 0.5795669 0.5826414 0.5872101 #>  [682,] 0.32014071 0.4527128 0.4541788 0.4794833 0.4840158 0.5728666 0.6018630 #>  [683,] 0.39484888 0.5421936 0.5811131 0.6115439 0.8074229 0.8104821 0.8107831 #>  [684,] 0.52168359 0.5421936 0.5805340 0.6843928 0.7304048 0.7457809 0.7510285 #>  [685,] 0.41949584 0.6782649 0.7240818 0.7255290 0.7281784 0.7471495 0.7498082 #>  [686,] 0.20565379 0.2945258 0.3687349 0.3926069 0.5899905 0.5927908 0.6253967 #>  [687,] 0.32467196 0.3905625 0.4201676 0.5828751 0.5932659 0.6259892 0.6357548 #>  [688,] 0.28675143 0.5216836 0.6797832 0.8227968 0.8484445 0.8885148 0.9076409 #>  [689,] 0.44621650 0.5551353 0.7694152 0.8003845 0.8333664 0.9612524 0.9685656 #>  [690,] 0.72168202 0.7856840 0.8256839 0.8738200 0.9693358 0.9712229 0.9730422 #>  [691,] 0.56359942 0.5927624 0.6618614 0.6677318 0.6945691 0.6994986 0.7459183 #>  [692,] 0.57755092 0.5875832 0.6656692 0.6984455 0.7036933 0.7227886 0.7765280 #>  [693,] 0.28665828 0.3850621 0.4158070 0.4389707 0.4982862 0.5387931 0.5877499 #>  [694,] 0.72046694 0.8308249 0.8464098 0.8606090 0.8921775 0.9044903 0.9370844 #>  [695,] 0.84688472 0.9009052 0.9889049 1.0086108 1.0227152 1.0867670 1.0919964 #>  [696,] 0.39591120 0.4771193 0.5887291 0.6284792 0.6571294 0.6614363 0.6944233 #>  [697,] 0.34432937 0.3759157 0.4232399 0.5370692 0.5557818 0.5585644 0.5642954 #>  [698,] 0.48644418 0.5414902 0.5667210 0.5927908 0.6776303 0.6841998 0.6903371 #>  [699,] 0.37948895 0.5125184 0.5745248 0.5828751 0.5962334 0.6542268 0.6595898 #>  [700,] 0.55970373 0.6088264 0.6797832 0.7457809 0.7759565 0.7956221 0.8338482 #>  [701,] 0.77626997 1.1707056 1.3005191 1.3439592 1.3775877 1.4364625 1.4878438 #>  [702,] 0.89846938 1.2705879 1.3210965 1.3890841 1.4622718 1.5189225 1.5436820 #>  [703,] 0.43003899 0.5632438 0.5635931 0.6083708 0.6165837 0.6209113 0.6237400 #>  [704,] 0.54044946 0.5630972 0.6314360 0.6620198 0.6856244 0.6969723 0.7094579 #>  [705,] 0.72064056 0.9636443 1.0069994 1.2226138 1.2246342 1.2764497 1.3522474 #>  [706,] 0.75303657 0.7571095 0.7873064 0.7910397 0.8168283 0.8378612 0.8718715 #>  [707,] 0.51275938 0.5274924 0.5777857 0.6462955 0.6618976 0.7015422 0.7139986 #>  [708,] 0.77108131 1.1064288 1.1142672 1.1820811 1.1905444 1.2754824 1.3267374 #>  [709,] 1.30600318 1.3793398 1.4644270 1.5017220 1.5343687 1.5379538 1.5683705 #>  [710,] 0.32496451 0.3845408 0.5553328 0.5899905 0.6349549 0.6355452 0.6613045 #>  [711,] 0.41575517 0.5298213 0.5612812 0.6685688 0.8692454 0.8733297 0.9092865 #>  [712,] 0.31522903 0.6921511 0.7065053 0.7478822 0.8851041 0.8927398 0.9237734 #>  [713,] 0.42724301 0.5151282 0.6470234 0.6964895 0.7361554 0.8298444 0.9297470 #>  [714,] 1.40212899 1.8857384 1.9256373 1.9957508 2.0098606 2.0155409 2.0273586 #>  [715,] 0.28472736 0.2948773 0.3849689 0.4234344 0.4969497 0.5251180 0.5291195 #>  [716,] 0.41332981 0.4451620 0.5146623 0.5782388 0.6012823 0.6084620 0.6660110 #>  [717,] 0.30001875 0.3045613 0.5782897 0.5872101 0.6056666 0.6556395 0.6718791 #>  [718,] 0.51757256 0.6529377 0.8078088 0.8168283 0.8230921 0.8632866 0.9023682 #>  [719,] 0.40155938 0.4410557 0.5450374 0.5580326 0.5787678 0.5890791 0.6326969 #>  [720,] 0.63635555 0.6505416 0.8944471 0.9209704 0.9546440 0.9582228 0.9850717 #>  [721,] 0.63212619 0.7041250 0.7478745 0.7775440 0.8069734 0.8246486 0.8815015 #>  [722,] 0.74592976 0.8173655 0.9199281 0.9208325 0.9595080 0.9656247 0.9708512 #>  [723,] 0.63719109 0.6973646 0.7103186 0.8274262 0.9160237 1.0461011 1.0601625 #>  [724,] 0.51793781 0.5627517 0.5696949 0.6447134 0.6618370 0.6659346 0.7056397 #>  [725,] 0.26614652 0.3315366 0.4048491 0.4110980 0.4284577 0.4580055 0.4632167 #>  [726,] 0.77502226 0.8464341 0.9493694 0.9701860 0.9710994 0.9812741 0.9868110 #>  [727,] 0.31437068 0.4350691 0.6548030 0.6577924 0.7289075 0.7289741 0.7313606 #>  [728,] 0.46834021 0.6761964 0.8312567 0.8636090 0.8789634 0.8851041 0.9132398 #>  [729,] 0.49595953 0.7049195 0.7473863 0.7680610 0.8759170 0.8827196 0.9007535 #>  [730,] 0.67068364 0.7232592 0.7969776 0.8183633 0.9361650 0.9364727 0.9399318 #>  [731,] 0.32467196 0.3415766 0.5745248 0.5974255 0.6161131 0.6246006 0.6278293 #>  [732,] 0.23793500 0.2684923 0.2945955 0.3603835 0.4280563 0.4401889 0.4915420 #>  [733,] 0.13569927 0.3957908 0.4595627 0.4750619 0.4770060 0.4815012 0.5191488 #>  [734,] 0.41206066 0.5293517 0.6328536 0.6989055 0.7033483 0.7183756 0.7337156 #>  [735,] 0.29692859 0.3297394 0.3875895 0.4489252 0.5085992 0.5654279 0.6003980 #>  [736,] 0.55472220 0.6202308 0.7313606 0.7546835 0.7646445 0.7709723 0.8300631 #>  [737,] 0.19334775 0.5477619 0.5698853 0.6433227 0.6449438 0.7341509 0.7348450 #>  [738,] 0.36125721 0.3795636 0.4413138 1.0073636 1.0489215 1.0874911 1.0982044 #>  [739,] 1.08068933 1.1872884 1.2191084 1.3593294 1.3649339 1.3820577 1.4656814 #>  [740,] 0.20903988 0.4053673 0.4069907 0.4572226 0.5512335 0.5618557 0.6110795 #>  [741,] 0.52485725 0.8467928 0.8764645 0.8799495 0.8917778 0.9122339 0.9189834 #>  [742,] 0.24135010 0.3192913 0.3557947 0.4290355 0.4590145 0.5441546 0.5967190 #>  [743,] 0.24216088 0.6989289 0.7204669 0.7406238 0.8140316 0.8140582 0.8698878 #>  [744,] 0.43605113 0.6965941 0.7391180 0.7595028 0.7734707 0.8314073 0.8607963 #>  [745,] 0.44923860 0.4832703 0.5108095 0.5137443 0.5230528 0.5383407 0.6064321 #>  [746,] 0.42001543 0.6184261 0.6303256 0.6757969 0.7579396 0.7965969 0.8876405 #>  [747,] 0.30741098 0.4256526 0.4636667 0.4906479 0.5153501 0.5228434 0.5349501 #>  [748,] 0.32759184 0.5062225 0.5391034 0.5647432 0.5930981 0.5932272 0.6046600 #>  [749,] 0.38165349 0.4133298 0.4887628 0.5113557 0.5585327 0.5620177 0.6059020 #>  [750,] 0.28115810 0.3608982 0.4473519 0.4547102 0.4646070 0.4773690 0.5075104 #>  [751,] 0.24135010 0.3407108 0.3477849 0.3494427 0.4852406 0.5454839 0.5690194 #>  [752,] 0.40490562 0.5530217 0.5809655 0.6168797 0.6354808 0.6703872 0.6916040 #>  [753,] 0.72817843 0.8066617 0.8852594 0.9077918 0.9190550 0.9576294 0.9685932 #>  [754,] 0.34103192 0.3759157 0.3796793 0.4618772 0.4823813 0.5490086 0.5534571 #>  [755,] 0.22118093 0.4810001 0.5298777 0.6343214 0.7023594 0.7274751 0.7314038 #>  [756,] 0.70650534 0.8724674 1.0752597 1.1345561 1.1463146 1.1896140 1.2049210 #>  [757,] 0.61830674 0.6740673 0.6949820 0.7232132 0.7637358 0.7762299 0.7781544 #>  [758,] 0.43920040 0.5022522 0.7637358 0.8379596 0.8553712 0.8733456 0.9965934 #>  [759,] 0.54930871 0.5627517 0.5832413 0.6420312 0.6559596 0.6838702 0.7105185 #>  [760,] 0.27489761 0.4915420 0.5059778 0.5258297 0.5324730 0.6107542 0.6381014 #>  [761,] 0.26072784 0.2643815 0.4161911 0.4597652 0.4941980 0.4988244 0.5109304 #>  [762,] 0.15733470 0.4080966 0.4608944 0.5968873 0.6562537 0.6696475 0.6854813 #>  [763,] 0.47597076 0.5782897 0.5820362 0.5904592 0.6576152 0.7560798 0.7834506 #>  [764,] 0.41374729 0.4304042 0.5086220 0.5640150 0.6783613 0.6997067 0.7014470 #>  [765,] 0.25045672 0.3335726 0.4096761 0.5391034 0.5687630 0.6209562 0.6286228 #>  [766,] 0.25875427 0.2948773 0.3272188 0.3989171 0.4137245 0.4173535 0.5174176 #>  [767,] 0.31966600 0.3316070 0.3486599 0.4872580 0.5796872 0.6114713 0.6260469 #>  [768,] 0.37362545 0.4070119 0.5137443 0.5499298 0.6444376 0.6460900 0.6677318 #>  [769,] 0.37778327 0.4014588 0.4094782 0.4215406 0.4448657 0.4452662 0.4708972 #>  [770,] 0.62018242 0.7038625 0.7228201 0.7248475 0.8044206 0.8289746 0.8794045 #>  [771,] 0.41526999 0.4633789 0.4979332 0.5030396 0.5152242 0.5439987 0.5486217 #>  [772,] 0.58738389 0.7005292 0.7488919 0.7617604 0.8343785 0.8738200 0.9876898 #>  [773,] 0.30744062 0.3581343 0.4673582 0.4917650 0.5514407 0.5527031 0.5616974 #>  [774,] 0.33298143 0.4068689 0.4353319 0.4833930 0.5287851 0.5752796 0.5775846 #>  [775,] 0.36201539 0.3644548 0.4156147 0.5645590 0.6002691 0.6210832 0.6435715 #>  [776,] 0.25442613 0.4339430 0.4937165 0.5201450 0.5443775 0.5781254 0.5934607 #>  [777,] 0.17114958 0.4015644 0.4474681 0.5689784 0.5984524 0.6506679 0.6712053 #>  [778,] 0.22443515 0.3298813 0.3633249 0.4002825 0.4952878 0.5387931 0.6053932 #>  [779,] 0.52573322 0.5298777 0.5447622 0.5912188 0.5922980 0.6124847 0.6138644 #>  [780,] 0.54829968 0.5956364 0.7049948 0.7772671 0.8438184 0.8836365 0.9008850 #>  [781,] 0.21596063 0.4555506 0.4879140 0.5631649 0.5650799 0.6157233 0.6438900 #>  [782,] 1.31620235 1.4625066 1.6017584 1.6069952 1.7563295 1.8066520 1.8264473 #>  [783,] 0.45869690 0.7300690 0.7870551 0.8428978 0.8476209 0.8753186 1.0230719 #>  [784,] 0.22963150 0.7154549 0.7624596 0.7902643 0.8189743 0.8527182 0.8848355 #>  [785,] 0.43224739 0.5128200 0.5570910 0.5861363 0.6045868 0.6572186 0.6650753 #>  [786,] 0.71846784 0.8970145 0.9135531 0.9234074 0.9370629 0.9389883 0.9552253 #>  [787,] 0.31067704 0.4093810 0.5266588 0.5325749 0.5849524 0.6144317 0.6724075 #>  [788,] 0.35971629 0.3662962 0.4005985 0.4110980 0.4677275 0.4714167 0.5667766 #>  [789,] 0.32193351 0.4012438 0.4043964 0.4215406 0.5651737 0.5699487 0.5940515 #>  [790,] 0.37887516 0.6696607 0.6810432 0.6895491 0.7382613 0.8135347 0.8390589 #>  [791,] 0.46030421 0.5764682 0.5894187 0.6171152 0.6244219 0.6278351 0.6354256 #>  [792,] 0.52582973 0.5583273 0.6004920 0.6121482 0.7110858 0.8001804 0.8226023 #>  [793,] 0.45959789 0.5159613 0.5481655 0.5798013 0.5823557 0.5951442 0.6042008 #>  [794,] 0.64454351 0.8088378 0.9063399 0.9129473 0.9371642 0.9437349 0.9934721 #>  [795,] 0.42762418 0.6716297 0.6848707 0.7358797 0.8173095 0.8281406 0.8454796 #>  [796,] 0.31067704 0.3138014 0.4489252 0.5698752 0.6289822 0.6393379 0.6477271 #>  [797,] 0.31966600 0.4220429 0.4677275 0.5133867 0.5429895 0.5631649 0.5689220 #>  [798,] 0.52170688 0.5298213 0.6674265 0.6997752 0.7408824 0.7522906 0.7896446 #>  [799,] 0.30941443 0.3699098 0.4771193 0.5168037 0.6285624 0.7328807 0.7410329 #>  [800,] 0.34534730 0.4643644 0.6903427 0.7603657 0.7768475 0.7778703 0.7863360 #>  [801,] 0.31365130 0.3179672 0.4090852 0.4260122 0.4440184 0.5019973 0.5278777 #>  [802,] 0.48429340 0.5676050 0.7036313 0.7094925 0.7646445 0.8300877 0.8406260 #>  [803,] 0.39089819 0.3949007 0.4320986 0.4625124 0.5177965 0.5230528 0.5376085 #>  [804,] 0.46229949 0.6121482 0.6370460 0.8415888 0.8553535 0.8930812 0.9030371 #>  [805,] 0.41339519 0.4271968 0.4555506 0.6625195 0.6672203 0.6793476 0.7191409 #>  [806,] 0.32910303 0.3876959 0.5266588 0.7122552 0.7162127 0.7210717 0.7748530 #>  [807,] 0.28115810 0.3082220 0.4662254 0.4751519 0.5112347 0.5604408 0.5782986 #>  [808,] 0.35913748 0.4599622 0.4702857 0.5075538 0.5364438 0.5784359 0.5817940 #>  [809,] 0.34448040 0.3544017 0.5145463 0.6036774 0.7870551 0.8772812 0.9238284 #>  [810,] 0.34773665 0.5792382 0.5826454 0.6084430 0.6190162 0.6447372 0.7089528 #>  [811,] 0.55868449 0.5892891 0.6538272 0.7234324 0.7358606 0.7796742 0.7804054 #>  [812,] 0.29204878 0.3527697 0.4052767 0.4124510 0.6028971 0.6100455 0.6542268 #>  [813,] 0.33220568 0.4811377 0.4909635 0.5002653 0.5140929 0.5211150 0.5294680 #>  [814,] 0.92484957 0.9739743 0.9780079 1.0554747 1.0765231 1.1057117 1.1368654 #>  [815,] 0.29056256 0.3794890 0.4280919 0.5951037 0.6100455 0.6371450 0.6705471 #>  [816,] 0.30456128 0.4334226 0.5280130 0.6013228 0.6235767 0.6284040 0.6791254 #>  [817,] 0.26869731 0.3353735 0.3903350 0.4666007 0.5047320 0.6217379 0.6276983 #>  [818,] 0.20019723 0.2643815 0.2708912 0.2905400 0.3249809 0.3850199 0.4075164 #>  [819,] 0.24539365 0.3341520 0.3795114 0.4699939 0.4905121 0.5003894 0.5036895 #>  [820,] 0.48648469 0.5036067 0.5427824 0.5527397 0.5718724 0.5913548 0.6354808 #>  [821,] 0.79103969 0.8113156 0.8135347 0.9107811 0.9163276 0.9979781 1.0300585 #>  [822,] 0.24819954 0.4785917 0.4830193 0.5414301 0.5564632 0.6088210 0.6110628 #>  [823,] 0.47283452 0.4886085 0.5552184 0.5569549 0.6363851 0.6569678 0.6686506 #>  [824,] 0.49698796 0.6989282 0.7358413 0.8591591 0.8716749 0.8737697 0.8964612 #>  [825,] 0.36179861 0.5167060 0.5434676 0.8783416 0.9234322 0.9551841 0.9819237 #>  [826,] 0.63981749 0.6647299 0.7168803 0.7252861 0.7508647 0.8708839 0.9324001 #>  [827,] 0.27060836 0.3560302 0.3912932 0.4055425 0.4540991 0.5241781 0.5370563 #>  [828,] 0.36418632 0.4728952 0.4770060 0.4834017 0.4954662 0.5522224 0.5628048 #>  [829,] 0.39095019 0.7206406 0.8160080 1.0592491 1.1274604 1.1634239 1.2542013 #>  [830,] 0.51208211 0.5391909 0.5632438 0.5663222 0.5680502 0.5698225 0.6480659 #>  [831,] 0.28798399 0.3459284 0.4539414 0.5457430 0.6577438 0.6848691 0.7094579 #>  [832,] 0.38116096 0.3910728 0.5865560 0.6003980 0.6355623 0.6942062 0.7130024 #>  [833,] 0.42965278 0.4628013 0.5604826 0.5701761 0.5811210 0.6426285 0.6482282 #>  [834,] 0.50717171 0.5219496 0.5415420 0.5483014 0.6313588 0.6707661 0.7102418 #>  [835,] 0.32919385 0.3995015 0.4015594 0.4912774 0.5073670 0.5649146 0.5705277 #>  [836,] 0.31868615 0.5030405 0.5129393 0.5144100 0.5600090 0.5616067 0.5649974 #>  [837,] 0.50072483 0.8044206 0.8774237 0.9226858 0.9440305 1.0256469 1.0309766 #>  [838,] 0.66363316 0.6710613 0.6747283 0.7157326 0.7372228 0.7720022 0.8149270 #>  [839,] 0.43687630 0.4572812 0.4650107 0.4990915 0.5250959 0.5457430 0.5717433 #>  [840,] 0.15793197 0.2529111 0.3260676 0.3396584 0.5108095 0.5352231 0.6316401 #>  [841,] 0.34257424 0.4679244 0.5230872 0.5574504 0.5862775 0.6779871 0.7001389 #>  [842,] 0.52743324 0.7315159 0.7643313 0.7727432 0.8468847 0.9889707 1.0491799 #>  [843,] 0.34332942 0.5898730 0.6705449 0.7209382 0.7374655 0.7798207 0.7862995 #>  [844,] 0.58620893 0.6091527 0.6218133 0.6349549 0.6371038 0.6645202 0.6888260 #>  [845,] 0.37400875 0.5247046 0.6194549 0.6766698 0.6777232 0.7103186 0.7517258 #>  [846,] 0.47915846 0.6604883 0.6986426 0.7193516 0.7201049 0.7231246 0.7794418 #>  [847,] 0.40602238 0.4896874 0.5140472 0.5145684 0.5265669 0.5441480 0.5458012 #>  [848,] 0.48665208 0.5229960 0.5756321 0.5976579 0.6452659 0.6981290 0.8184880 #>  [849,] 0.39107282 0.4632175 0.5085992 0.5279253 0.5960008 0.6766188 0.6789030 #>  [850,] 0.48100008 0.5120624 0.5128517 0.5148367 0.5364084 0.5464039 0.5647432 #>  [851,] 0.48731018 0.6556296 0.6797140 0.7042682 0.8304584 0.8308249 0.9244780 #>  [852,] 0.37408974 0.5115742 0.6065193 0.6313588 0.6789451 0.7231608 0.7852995 #>  [853,] 0.54892922 0.6377161 1.0361172 1.0521183 1.1340620 1.1641521 1.2278594 #>  [854,] 0.72764753 0.8949812 0.9913636 1.0889161 1.1924440 1.2948119 1.3362033 #>  [855,] 0.31837954 0.4189319 0.4339430 0.4374673 0.4575622 0.4925229 0.5140472 #>  [856,] 0.35444866 0.5612632 0.6266378 0.6575761 0.6640559 0.7013417 0.7211809 #>  [857,] 1.78456359 1.9517635 2.1339278 2.2634665 2.2996021 2.4005549 2.4034793 #>  [858,] 0.26472027 0.3315366 0.3712879 0.4035137 0.5111909 0.5641910 0.5667766 #>  [859,] 0.17150843 0.3668764 0.4604540 0.4617350 0.4708804 0.5441699 0.5462910 #>  [860,] 0.44418528 0.4842934 0.5374914 0.5518384 0.5826448 0.5930384 0.6251684 #>  [861,] 0.37410624 0.5617979 0.6393043 0.6465508 0.6625934 0.8039381 0.8272177 #>  [862,] 0.34432341 0.4225708 0.5398605 0.5501168 0.5670792 0.5720596 0.6179074 #>  [863,] 0.47560114 0.6783117 0.6969626 0.7291894 0.8734396 0.9405769 1.0362314 #>  [864,] 0.49531253 0.8029193 0.8035176 0.8486726 1.1353811 1.1992840 1.2030919 #>  [865,] 0.34328995 0.4430572 0.4687001 0.5756912 0.6136132 0.6607851 0.6827524 #>  [866,] 0.47323028 0.5962904 0.6784613 0.6903427 0.7888949 0.7948941 0.8580215 #>  [867,] 0.31796721 0.4256526 0.4330667 0.4760902 0.5029026 0.5370376 0.5404918 #>  [868,] 0.44933561 0.5639394 0.5719950 0.5831249 0.5882285 0.6418433 0.7071117 #>  [869,] 1.15298728 1.2866000 1.2969474 1.4729480 1.5538852 1.5987542 1.6662705 #>  [870,] 0.47693636 0.5778481 0.5783030 0.5824501 0.5962518 0.6341620 0.6532132 #>  [871,] 0.32919385 0.3693587 0.4410557 0.4516664 0.4673582 0.4777456 0.4916994 #>  [872,] 0.26597476 0.3143456 0.3388335 0.3903350 0.5168999 0.5518384 0.5722593 #>  [873,] 0.25825923 0.4517951 0.4539414 0.5412945 0.5630972 0.5635393 0.6315417 #>  [874,] 0.29712305 0.3136513 0.4068355 0.4596497 0.4818558 0.4941092 0.4973629 #>  [875,] 0.45100336 0.6497237 0.6907589 0.8114743 0.8140316 0.8345334 0.9588125 #>  [876,] 0.34329210 0.4670922 0.5350553 0.5622166 0.5813340 0.6104428 0.6110628 #>  [877,] 0.26161632 0.5570392 0.6531434 0.7175596 0.7537245 0.8267145 0.9026041 #>  [878,] 0.30941443 0.5849558 0.6063485 0.6114813 0.6466962 0.6557666 0.6571294 #>  [879,] 0.41339519 0.5047320 0.5650799 0.5939127 0.6205152 0.6278191 0.6528815 #>  [880,] 0.22963150 0.9010500 0.9361623 0.9593557 0.9720886 0.9733575 0.9780079 #>  [881,] 0.45165882 0.5142246 0.7250952 0.7283629 0.7816848 0.8165187 0.8521400 #>  [882,] 0.50072483 0.7912806 0.8620435 0.8623822 0.9299794 0.9327288 1.0234709 #>  [883,] 0.30558002 0.5003894 0.6459949 0.6467638 0.7188092 0.7430736 0.7824136 #>  [884,] 0.74524571 0.7457700 0.8387825 0.8662894 1.0141347 1.0338558 1.0443227 #>  [885,] 0.34019080 0.3425742 0.4348400 0.4665653 0.4728720 0.5372039 0.5615175 #>  [886,] 0.44371287 0.4633789 0.5524315 0.5997892 0.6312661 0.6321915 0.6360786 #>  [887,] 0.66791611 0.7291894 0.7469500 0.7546835 0.7720874 0.8234367 0.9145116 #>  [888,] 0.49127743 0.5098943 0.5733805 0.5856914 0.6316907 0.6835840 0.6845029 #>  [889,] 1.54415609 1.6971955 1.7423996 1.7518987 1.7948480 1.7980014 1.8771506 #>  [890,] 1.00485293 1.0230719 1.0453370 1.1463240 1.2596600 1.2866420 1.3262310 #>  [891,] 0.40432858 0.4060324 0.4541726 0.4882234 0.5170808 0.5690595 0.7142736 #>  [892,] 0.33195268 0.3595530 0.4012438 0.4525059 0.4544832 0.5163762 0.5467663 #>  [893,] 0.30265640 0.5194916 0.5988442 0.6184261 0.6206828 0.6536717 0.6741233 #>  [894,] 0.19324472 0.2618574 0.3078342 0.4194199 0.4246496 0.4455877 0.5169962 #>  [895,] 0.36985185 0.6205217 0.6244658 0.6323055 0.6376698 0.6453127 0.6855362 #>  [896,] 0.80983617 1.0867157 1.2960321 1.3275433 1.3373759 1.3541658 1.4565627 #>  [897,] 0.81083546 0.8874781 0.9084058 1.0162572 1.0182137 1.0326244 1.1057960 #>  [898,] 0.62683368 0.8657665 0.8761362 0.8932655 0.9461308 0.9605386 0.9924427 #>  [899,] 0.42016764 0.5566641 0.5615606 0.5891303 0.6081810 0.6161131 0.6531434 #>  [900,] 0.35927611 0.4182446 0.6277172 0.6580191 0.8042436 0.8107831 0.8265642 #>  [901,] 0.28665828 0.4387953 0.5179107 0.5222855 0.5375960 0.5600090 0.5771107 #>  [902,] 0.20704385 0.4402252 0.4548676 0.5048498 0.5179378 0.5832413 0.5997572 #>  [903,] 0.62874627 0.8169650 0.8591591 0.8877479 0.9738494 1.1009820 1.1293677 #>  [904,] 0.68839618 0.8961322 0.9188582 0.9976473 1.0361172 1.0610588 1.0758177 #>  [905,] 0.66791611 0.6783117 0.6904930 0.7753998 0.8227617 0.8696852 0.9420724 #>  [906,] 0.32900153 0.3544017 0.4330632 0.5605294 0.7300690 0.9962523 1.0174707 #>  [907,] 0.40814173 0.4137473 0.4690122 0.5000667 0.6567682 0.6945955 0.7093473 #>  [908,] 1.39404183 1.5304639 1.5701111 1.6061071 1.6177671 1.6365786 1.7037054 #>  [909,] 0.46843294 0.4987085 0.5098215 0.5142246 0.5607606 0.5909827 0.6295371 #>  [910,] 0.22179389 0.2660234 0.3658949 0.4960802 0.5284258 0.5778481 0.5792382 #>  [911,] 0.83767242 0.8502315 1.0645142 1.1598986 1.1864516 1.2669814 1.2680894 #>  [912,] 0.32656845 0.4501130 0.4704737 0.5398605 0.5882285 0.6057263 0.6574537 #>  [913,] 0.23368062 0.3291030 0.3995316 0.5325749 0.5847738 0.6460900 0.6665533 #>  [914,] 0.39687743 0.4120607 0.4716083 0.5012212 0.5492972 0.5831157 0.5858439 #>  [915,] 0.42206765 0.4709858 0.4844542 0.4919571 0.5364420 0.5478629 0.5695137 #>  [916,] 0.55240092 0.6642630 0.6718313 0.6947833 0.7051680 0.7162773 0.7227731 #>  [917,] 0.42792814 0.6258361 0.6503653 0.7378424 0.7401187 0.8907746 0.9380114 #>  [918,] 0.28254921 0.3926069 0.4387953 0.4610387 0.4628502 0.5414902 0.5848288 #>  [919,] 0.37373297 0.4440184 0.4572226 0.4671057 0.4897795 0.5029026 0.5883926 #>  [920,] 0.41193956 0.4973407 0.6141290 0.6357482 0.6663305 0.7160859 0.7218826 #>  [921,] 0.35541800 0.3737330 0.3937187 0.5019973 0.5704629 0.5752796 0.5832504 #>  [922,] 0.26273814 0.5325297 0.6618614 0.6896106 0.7264707 0.7496078 0.7896346 #>  [923,] 0.36125721 0.4741423 0.6992137 0.8446328 1.0927738 1.2001683 1.2210363 #>  [924,] 0.21669490 0.2529111 0.3892892 0.4625124 0.4954379 0.5053341 0.5383407 #>  [925,] 0.82852284 0.9562790 1.0600732 1.0683919 1.1038026 1.1956913 1.3137306 #>  [926,] 0.13915496 0.2630851 0.2905400 0.3373897 0.3612818 0.3965095 0.5060421 #>  [927,] 0.44854794 0.4612797 0.4872070 0.5854813 0.5966825 0.6424350 0.6701341 #>  [928,] 0.25442613 0.4374673 0.4599582 0.4599622 0.5365297 0.5521372 0.5969928 #>  [929,] 0.66330334 0.7338046 0.8284906 0.8369771 0.8914334 0.9202239 0.9424442 #>  [930,] 0.29869392 0.3312582 0.3665874 0.4872197 0.4917650 0.5075487 0.5197259 #>  [931,] 0.55799764 0.6343611 0.6557666 0.6557740 0.6626566 0.6749556 0.6984652 #>  [932,] 0.78815025 0.8369849 0.8449323 0.9065312 0.9164668 0.9304296 0.9939262 #>  [933,] 0.24819954 0.4904973 0.5476977 0.5840991 0.6097561 0.6282642 0.6642278 #>  [934,] 0.42659870 0.4759985 0.5402732 0.5487941 0.6080367 0.6659707 0.6912560 #>  [935,] 0.33009762 0.3740897 0.6718313 0.6781876 0.6926856 0.7857457 0.8173655 #>  [936,] 0.50989426 0.5663222 0.6209113 0.6636332 0.7481284 0.7714252 0.7724892 #>  [937,] 0.51723538 0.6277172 0.7376756 0.7451266 0.8431958 0.8489408 0.8605486 #>  [938,] 0.38116096 0.3875895 0.5278106 0.5279253 0.5530354 0.5660122 0.5826695 #>  [939,] 0.39129320 0.4590610 0.5120453 0.5411603 0.5427824 0.5754572 0.5769407 #>  [940,] 0.45095529 0.6749556 0.6835840 0.6949346 0.6969097 0.7083006 0.7163706 #>  [941,] 0.11014585 0.3805886 0.6612137 0.6674265 0.6971136 0.7427960 0.7496699 #>  [942,] 0.82502256 0.8285228 0.9160737 0.9378682 0.9987971 1.0223142 1.0603742 #>  [943,] 0.42596607 0.6671452 0.7051500 0.7236162 0.7633628 0.7649585 0.7888735 #>  [944,] 0.54050609 0.5901455 0.6505265 0.7227886 0.8008561 0.8498347 0.8821232 #>  [945,] 0.33220568 0.4210874 0.4291361 0.5342270 0.5372039 0.5630224 0.5949791 #>  [946,] 0.63424483 1.0588586 1.0887589 1.1553972 1.3130274 1.3229535 1.3296671 #>  [947,] 1.25988767 1.3474610 1.3824433 1.3969555 1.5325401 1.5436123 1.6086821 #>  [948,] 0.50147757 0.6022260 0.6258361 0.6716294 0.7958233 0.8683189 0.8689645 #>  [949,] 0.36177409 0.5615175 0.6530897 0.6736190 0.6759667 0.6779871 0.7382613 #>  [950,] 0.36445482 0.4476251 0.6320512 0.6569680 0.7027010 0.7333821 0.7499263 #>  [951,] 0.44621650 0.8486127 0.8894576 0.8979212 1.0585158 1.1353811 1.2018294 #>  [952,] 0.20599068 0.3157741 0.3172319 0.3912617 0.5552184 0.5747950 0.5769551 #>  [953,] 1.07840464 1.1867681 1.2103126 1.2711802 1.3515421 1.4125433 1.4239145 #>  [954,] 0.56751557 0.7038625 0.7463194 0.7840481 0.8178844 0.8250634 0.8772758 #>  [955,] 0.18827720 0.3465901 0.3975681 0.5482997 0.6144050 0.6402044 0.6468045 #>  [956,] 0.18300368 0.2587543 0.3785672 0.3937756 0.3949034 0.5102585 0.5165690 #>  [957,] 0.32589349 0.4493356 0.5071717 0.6046357 0.6482742 0.6832854 0.7065753 #>  [958,] 0.53922460 0.7691884 0.8037378 0.8617779 0.8751321 0.9102862 0.9208043 #>  [959,] 1.13396305 1.2282315 1.2337913 1.2806431 1.3018025 1.3578682 1.3666564 #>  [960,] 0.53252968 0.5927624 0.7132237 0.7426644 0.7460303 0.7510524 0.7642190 #>  [961,] 0.57001757 0.5902467 0.5962904 0.6793476 0.8149503 0.8172139 0.8240780 #>  [962,] 0.52429343 0.5605553 0.7271139 0.8010309 0.8949897 0.9227925 0.9461225 #>  [963,] 0.36985185 0.4905930 0.5750439 0.6657796 0.7293020 0.7439237 0.7673338 #>  [964,] 0.46030421 0.4857164 0.5268288 0.5865029 0.6030360 0.6450226 0.6870597 #>  [965,] 0.40381719 0.4158863 0.4844542 0.5430272 0.6196611 0.6216857 0.6487706 #>  [966,] 0.24216088 0.6226108 0.6762191 0.6769658 0.7188312 0.7526134 0.7753026 #>  [967,] 0.50225217 0.6730140 0.6896678 0.7248170 0.7751879 0.8492158 0.8816658 #>  [968,] 0.36177409 0.4872197 0.5157298 0.6366373 0.6490550 0.6592940 0.7032413 #>  [969,] 0.34941916 0.5427306 0.5788999 0.6165739 0.6217379 0.6946043 0.7008609 #>  [970,] 0.45505086 0.5238482 0.5633598 0.6255450 0.6279502 0.6373045 0.6393043 #>  [971,] 0.45165882 0.4684329 0.5696949 0.5997572 0.7236614 0.7543476 0.7697942 #>  [972,] 0.26161632 0.5566641 0.6619203 0.7370398 0.7389019 0.8107175 0.8342561 #>  [973,] 0.40536726 0.4550509 0.5039489 0.5167783 0.5720406 0.6037277 0.6116344 #>  [974,] 0.23658888 0.4048491 0.4714167 0.4823813 0.5129529 0.5283426 0.5453079 #>  [975,] 0.58441188 0.5944359 0.6006649 0.6932177 0.7276661 0.7384675 0.7662558 #>  [976,] 0.29978427 0.3831039 0.4377213 0.4722554 0.4925229 0.4969497 0.5427179 #>  [977,] 0.36421767 0.5404495 0.8412040 0.8502831 0.8682342 0.8786797 0.9197168 #>  [978,] 0.29244255 0.2945258 0.3276351 0.4610387 0.5553328 0.6036580 0.6290607 #>  [979,] 0.31264201 0.3954204 0.4662409 0.5210952 0.5997464 0.6237400 0.6480339 #>  [980,] 0.49830538 0.5165690 0.5222053 0.5411603 0.5650569 0.5813340 0.6042008 #>  [981,] 0.27421979 0.4639484 0.4665653 0.5219496 0.5574504 0.5905782 0.6097233 #>  [982,] 0.54892922 0.5770577 0.7875780 0.9463395 1.1129606 1.1352357 1.1640474 #>  [983,] 0.50186066 0.5200675 0.6630064 0.6705449 0.6892008 0.7001389 0.7025888 #>  [984,] 0.46247427 0.6152089 0.7239992 0.7496078 0.7975771 0.7989860 0.8034664 #>  [985,] 0.42499963 0.4429471 0.4722927 0.5569549 0.5769551 0.6076908 0.6629193 #>  [986,] 0.26857078 0.5345244 0.5698853 0.6896678 0.7174538 0.7507117 0.7664765 #>  [987,] 0.31723191 0.3247494 0.3439987 0.4125208 0.4429471 0.4874000 0.6297205 #>  [988,] 0.35478609 0.4952554 0.5896025 0.5943197 0.7091854 0.8088337 0.8182303 #>  [989,] 0.29692859 0.4060224 0.5162768 0.5826695 0.6245131 0.6594255 0.6642674 #>  [990,] 0.63424483 0.7885007 0.8617779 0.9141788 0.9234074 1.0156007 1.0596294 #>  [991,] 0.72764753 0.8315643 1.0009845 1.1501848 1.1613562 1.2035578 1.2367012 #>  [992,] 0.14239550 0.4910285 0.6447991 0.7012139 0.7301023 0.7478745 0.7645179 #>  [993,] 0.32574572 0.3849689 0.4152700 0.4307927 0.4807697 0.5174176 0.5248234 #>  [994,] 0.27717054 0.4452662 0.4472378 0.5098215 0.5155855 0.5228631 0.5372583 #>  [995,] 0.79299819 0.9558688 0.9656247 1.0885931 1.1095504 1.1127355 1.1423540 #>  [996,] 0.30822200 0.4265987 0.5158582 0.5489649 0.5659951 0.5945904 0.5985598 #>  [997,] 0.36322502 0.4146436 0.5110600 0.5690595 0.5780573 0.6455346 0.6528815 #>  [998,] 0.23368062 0.3876959 0.4093810 0.5285368 0.5698752 0.5907716 0.5914062 #>  [999,] 0.37967928 0.4795986 0.5036302 0.5219666 0.5324831 0.5385889 0.5585644 #> [1000,] 0.20019723 0.2340584 0.2630851 0.3529146 0.3894532 0.4161911 0.4363674 #>              [,8]      [,9]     [,10] #>    [1,] 0.7047332 0.7104460 0.7326619 #>    [2,] 0.6414205 0.6415020 0.6631974 #>    [3,] 1.0939107 1.1140356 1.1387780 #>    [4,] 0.7210711 0.7579554 0.7887600 #>    [5,] 1.0896030 1.1124498 1.1959187 #>    [6,] 1.0492808 1.0758368 1.0759479 #>    [7,] 0.8786338 0.9377627 0.9380114 #>    [8,] 0.6855362 0.7025049 0.7494383 #>    [9,] 0.5280844 0.5413577 0.5438196 #>   [10,] 0.8048108 0.8704662 0.8737697 #>   [11,] 1.0392956 1.0645166 1.1065404 #>   [12,] 0.5287872 0.5472774 0.5547268 #>   [13,] 1.4451194 1.4772063 1.4955067 #>   [14,] 0.6869493 0.6947198 0.6965941 #>   [15,] 0.8040278 0.8275318 0.8387825 #>   [16,] 0.9609171 0.9941081 1.0382032 #>   [17,] 0.7425354 0.7437852 0.8863495 #>   [18,] 1.0203966 1.0615853 1.0751695 #>   [19,] 1.1355856 1.1363839 1.2490887 #>   [20,] 0.6614363 0.6725697 0.6755581 #>   [21,] 1.0361721 1.0383561 1.0632297 #>   [22,] 0.8517062 0.8628349 0.8681297 #>   [23,] 1.0009845 1.0262881 1.0567624 #>   [24,] 1.0575662 1.0645872 1.0804330 #>   [25,] 0.9030371 0.9546155 1.0158857 #>   [26,] 0.5775846 0.5782986 0.5832504 #>   [27,] 1.0233038 1.0676185 1.0965351 #>   [28,] 0.6854221 0.6934095 0.7165395 #>   [29,] 0.6591386 0.6706770 0.7069264 #>   [30,] 0.5791865 0.6507790 0.6606484 #>   [31,] 1.0014908 1.0446547 1.0489215 #>   [32,] 0.7643313 0.7796916 0.7857249 #>   [33,] 0.6323793 0.6637462 0.6847933 #>   [34,] 0.6702968 0.6713808 0.6727000 #>   [35,] 1.4064125 1.4350775 1.4556977 #>   [36,] 0.6277543 0.6359586 0.6572186 #>   [37,] 0.6045868 0.6201920 0.6395879 #>   [38,] 1.4607721 1.4711567 1.4876207 #>   [39,] 1.7774030 1.8036953 1.8943860 #>   [40,] 1.2545416 1.2837260 1.3021823 #>   [41,] 1.6999062 1.7300284 1.7342850 #>   [42,] 0.6848283 0.6942062 0.7757077 #>   [43,] 0.6887232 0.7149560 0.7240836 #>   [44,] 1.1435178 1.1542172 1.1579388 #>   [45,] 0.5465096 0.6041297 0.6109977 #>   [46,] 0.4837338 0.5543552 0.5690194 #>   [47,] 0.7921911 0.8246486 0.8252888 #>   [48,] 0.6037115 0.6123237 0.6660933 #>   [49,] 0.7191846 0.7507268 0.7532008 #>   [50,] 0.5982544 0.6293052 0.6319741 #>   [51,] 0.7756363 0.7937723 0.8426905 #>   [52,] 0.7440182 0.7483403 0.7916668 #>   [53,] 0.7225992 0.7592109 0.8423453 #>   [54,] 0.6175817 0.6594238 0.6869414 #>   [55,] 0.8329539 0.8507649 0.8733115 #>   [56,] 0.8964702 0.8988305 0.9142341 #>   [57,] 1.3117622 1.3919736 1.4419024 #>   [58,] 0.5299289 0.5676788 0.5831593 #>   [59,] 1.1545776 1.1793605 1.3831688 #>   [60,] 1.0497360 1.0521183 1.1024626 #>   [61,] 0.7126811 0.7310955 0.7361964 #>   [62,] 0.7389643 0.7457688 0.7751983 #>   [63,] 0.5439987 0.5456726 0.5534571 #>   [64,] 0.8082972 0.8426905 0.8753901 #>   [65,] 0.7845275 0.8054137 0.8470599 #>   [66,] 0.6932998 0.6949820 0.7091576 #>   [67,] 0.8196847 0.8298444 0.8467695 #>   [68,] 0.9756547 1.0112890 1.0512436 #>   [69,] 0.5800238 0.5802232 0.5852560 #>   [70,] 0.6230198 0.6288973 0.6475655 #>   [71,] 0.6409297 0.6567682 0.6696673 #>   [72,] 0.7105857 0.7655254 0.7824136 #>   [73,] 1.9550339 2.0513082 2.0591274 #>   [74,] 0.9202517 0.9214144 0.9265076 #>   [75,] 1.1059536 1.1360822 1.2005077 #>   [76,] 1.1169678 1.1638809 1.1901252 #>   [77,] 1.1698177 1.1761615 1.2321204 #>   [78,] 0.8869364 0.9551841 0.9573257 #>   [79,] 0.7637623 0.7669684 0.7684635 #>   [80,] 0.5390381 0.5500191 0.5650926 #>   [81,] 0.5711702 0.5727189 0.5782860 #>   [82,] 0.7698447 0.7844985 0.8130941 #>   [83,] 1.4286012 1.4583198 1.4590016 #>   [84,] 0.5643303 0.5785462 0.6130396 #>   [85,] 0.6222185 0.6478088 0.6656643 #>   [86,] 1.6389567 1.6432748 1.6461691 #>   [87,] 1.1561932 1.1571157 1.2080822 #>   [88,] 1.0463089 1.1338747 1.1507294 #>   [89,] 0.5628048 0.5787678 0.6255450 #>   [90,] 1.3249476 1.3271320 1.3384066 #>   [91,] 0.6036524 0.6576152 0.7644141 #>   [92,] 0.6300940 0.6752946 0.7001117 #>   [93,] 0.6747291 0.7093290 0.7208012 #>   [94,] 1.1766815 1.1977276 1.2520610 #>   [95,] 0.6021086 0.6110002 0.6383946 #>   [96,] 1.6673013 1.6782049 1.6980877 #>   [97,] 1.3332987 1.3515569 1.4214892 #>   [98,] 0.7253566 0.7414471 0.7426260 #>   [99,] 0.7533535 0.7616604 0.7735016 #>  [100,] 0.6771546 0.7023594 0.8107139 #>  [101,] 0.8865021 0.8924009 0.9499924 #>  [102,] 0.6082331 0.6641389 0.6703715 #>  [103,] 0.6444653 0.6980437 0.7000706 #>  [104,] 1.1602939 1.1635266 1.2051096 #>  [105,] 0.9196217 0.9206959 0.9464433 #>  [106,] 1.2031767 1.2083649 1.2483391 #>  [107,] 0.9265076 0.9317027 0.9615351 #>  [108,] 0.7497950 0.7565222 0.7801127 #>  [109,] 0.5798013 0.5974423 0.6212158 #>  [110,] 1.1892846 1.2028318 1.2123868 #>  [111,] 0.6815402 0.6830330 0.6946996 #>  [112,] 0.4662254 0.5036302 0.5188630 #>  [113,] 1.1246306 1.1343079 1.1695031 #>  [114,] 0.8683974 0.8733620 0.8968910 #>  [115,] 0.7193516 0.7412404 0.7457688 #>  [116,] 0.5146623 0.5487316 0.5518156 #>  [117,] 0.5629128 0.5880514 0.6209538 #>  [118,] 0.9603576 0.9685932 0.9996779 #>  [119,] 0.8097122 0.8287996 0.8314241 #>  [120,] 1.1739251 1.1866713 1.1914146 #>  [121,] 0.7142653 0.7489929 0.7901127 #>  [122,] 1.0063105 1.0323132 1.0488041 #>  [123,] 1.5509247 1.5629724 1.6245558 #>  [124,] 0.7320595 0.7510982 0.7812457 #>  [125,] 1.6869592 1.6889436 1.7264095 #>  [126,] 0.7116770 0.7298320 0.7454396 #>  [127,] 0.6087222 0.6240622 0.6254836 #>  [128,] 0.6451952 0.6528065 0.6798189 #>  [129,] 1.2755986 1.3241582 1.3277889 #>  [130,] 1.3162023 1.3163519 1.4222784 #>  [131,] 0.8952236 1.0098039 1.0264929 #>  [132,] 0.8294458 0.8392996 0.8608176 #>  [133,] 2.3994421 2.4597615 2.4619286 #>  [134,] 0.9160237 0.9308473 0.9381650 #>  [135,] 0.7417892 0.7646430 0.7821356 #>  [136,] 1.3353172 1.3360749 1.3642037 #>  [137,] 0.8615261 0.8861932 0.9035626 #>  [138,] 0.7514427 0.7556226 0.7710486 #>  [139,] 0.8518666 0.8866377 0.9337507 #>  [140,] 0.6524881 0.7343591 0.7437852 #>  [141,] 1.0815386 1.0960821 1.1213144 #>  [142,] 0.8724674 0.8789634 0.8937551 #>  [143,] 1.5240546 1.5949144 1.5987542 #>  [144,] 0.6130396 0.6264908 0.6297205 #>  [145,] 1.1185659 1.1683018 1.2046995 #>  [146,] 0.5197259 0.5422118 0.6067990 #>  [147,] 0.8890482 0.8911134 0.9323240 #>  [148,] 0.5453079 0.5819347 0.5839480 #>  [149,] 1.0346725 1.0386870 1.0578980 #>  [150,] 1.2804134 1.3122137 1.3239088 #>  [151,] 0.6503653 0.7154720 0.7646430 #>  [152,] 2.1285161 2.1691262 2.1703967 #>  [153,] 1.2035937 1.2397023 1.2742472 #>  [154,] 0.6735878 0.7555265 0.7758678 #>  [155,] 0.6918506 0.7128775 0.7298909 #>  [156,] 0.8627988 0.9117700 0.9340442 #>  [157,] 1.5383684 1.5464890 1.5922001 #>  [158,] 0.7011941 0.7076910 0.7252061 #>  [159,] 1.3541154 1.3602691 1.3898938 #>  [160,] 0.7451266 0.7528417 0.8213767 #>  [161,] 0.6483000 0.6625195 0.6854221 #>  [162,] 0.5522224 0.5594382 0.5973001 #>  [163,] 1.1623252 1.2270912 1.2426631 #>  [164,] 0.6179231 0.6210994 0.6254180 #>  [165,] 0.6209562 0.6366081 0.6485965 #>  [166,] 1.1883962 1.1961451 1.2049210 #>  [167,] 1.0098973 1.0307187 1.0326367 #>  [168,] 0.8430446 0.8510476 0.8968910 #>  [169,] 0.5408953 0.5413577 0.5522254 #>  [170,] 0.7414471 0.7492466 0.7530366 #>  [171,] 0.5299735 0.5375676 0.5450930 #>  [172,] 0.5380507 0.5607606 0.5723292 #>  [173,] 0.6057762 0.6368288 0.6676156 #>  [174,] 0.9946684 1.0020593 1.0097652 #>  [175,] 1.4337850 1.4590160 1.4855847 #>  [176,] 0.8527991 0.8675748 0.8723392 #>  [177,] 0.5927002 0.6059020 0.6393585 #>  [178,] 0.6299978 0.6415623 0.6423463 #>  [179,] 1.0519481 1.0684201 1.0690919 #>  [180,] 1.0311467 1.0789439 1.0853533 #>  [181,] 0.6284040 0.6324714 0.6556395 #>  [182,] 0.7859150 0.7909059 0.7944686 #>  [183,] 0.5364438 0.5373288 0.5543552 #>  [184,] 0.5769407 0.6111880 0.6210832 #>  [185,] 0.5829708 0.6476495 0.6728462 #>  [186,] 0.7047198 0.7066446 0.7137666 #>  [187,] 0.6502066 0.6617013 0.6700790 #>  [188,] 0.8590557 0.9326644 0.9494090 #>  [189,] 0.8343105 0.9048640 0.9726383 #>  [190,] 1.0308487 1.0690919 1.0835299 #>  [191,] 0.7252901 0.7374405 0.7386560 #>  [192,] 0.8274669 0.8571935 0.8987606 #>  [193,] 0.7876220 0.8018881 0.8132722 #>  [194,] 0.8813065 0.9099878 0.9236403 #>  [195,] 0.9649863 0.9973717 1.0150620 #>  [196,] 0.9510213 0.9553197 0.9649863 #>  [197,] 1.0744763 1.1482496 1.1659051 #>  [198,] 0.8220495 0.8420151 0.8565579 #>  [199,] 0.7283517 0.7699282 0.8290198 #>  [200,] 1.0553861 1.0848784 1.1842237 #>  [201,] 1.2080822 1.2621266 1.2624160 #>  [202,] 1.3732753 1.3943308 1.4094856 #>  [203,] 0.9807261 0.9846618 1.0018153 #>  [204,] 0.6273695 0.6296342 0.6369300 #>  [205,] 0.6504684 0.6592839 0.6629635 #>  [206,] 0.7068664 0.7506993 0.7924247 #>  [207,] 0.6278351 0.6315417 0.6346851 #>  [208,] 1.1393812 1.1502969 1.2008525 #>  [209,] 0.6447366 0.6488016 0.6554532 #>  [210,] 1.0609250 1.0764759 1.1093181 #>  [211,] 0.6701564 0.8053309 0.8361862 #>  [212,] 0.5105140 0.5310747 0.5437360 #>  [213,] 0.6830330 0.7065753 0.7113503 #>  [214,] 0.6015393 0.6015542 0.6109370 #>  [215,] 0.9659034 1.0014171 1.0259460 #>  [216,] 1.1436300 1.1640397 1.1748123 #>  [217,] 0.7608458 0.7795133 0.7956221 #>  [218,] 0.6886339 0.7112047 0.7374655 #>  [219,] 1.1352357 1.1820504 1.1922415 #>  [220,] 0.6896106 0.6907030 0.6948734 #>  [221,] 0.9186459 0.9374610 0.9530520 #>  [222,] 0.5130394 0.5335993 0.5934634 #>  [223,] 0.7373350 0.7617604 0.7873689 #>  [224,] 0.8864736 0.9399565 0.9638177 #>  [225,] 0.6804958 0.6902001 0.7249318 #>  [226,] 0.5695927 0.5872724 0.5996268 #>  [227,] 0.5490086 0.5689220 0.5887924 #>  [228,] 0.8905610 0.9075500 0.9208325 #>  [229,] 0.8519938 0.8704716 0.8775600 #>  [230,] 0.9562790 0.9934583 1.0029470 #>  [231,] 0.5120453 0.5280154 0.5511458 #>  [232,] 0.8849972 0.8981198 0.9029892 #>  [233,] 0.7464162 0.7967011 0.8007873 #>  [234,] 0.6875069 0.7112358 0.7387635 #>  [235,] 0.9648823 1.0728910 1.0825284 #>  [236,] 0.6975568 0.7079818 0.7526756 #>  [237,] 0.6814139 0.6826835 0.7008388 #>  [238,] 0.6124717 0.6345789 0.6534097 #>  [239,] 0.6087236 0.6489770 0.6702968 #>  [240,] 0.5700220 0.5922980 0.6338938 #>  [241,] 0.6887577 0.6893468 0.7154549 #>  [242,] 0.6449438 0.6522079 0.6831658 #>  [243,] 0.7000453 0.7013417 0.7076910 #>  [244,] 0.6822859 0.7492466 0.8013683 #>  [245,] 0.7603657 0.7789974 0.7922624 #>  [246,] 0.7029356 0.7343668 0.7468968 #>  [247,] 0.6418458 0.6665865 0.7291138 #>  [248,] 0.5255129 0.5381686 0.5561923 #>  [249,] 0.5818625 0.5891629 0.5917282 #>  [250,] 0.8728829 0.8915923 0.9021102 #>  [251,] 0.6461410 0.6504684 0.6692322 #>  [252,] 0.7362918 0.7365015 0.7576590 #>  [253,] 1.2293732 1.2753239 1.2929953 #>  [254,] 0.7810681 0.7918153 0.8691459 #>  [255,] 0.7095891 0.7200465 0.7358993 #>  [256,] 1.2446084 1.3088885 1.3181414 #>  [257,] 0.8728444 0.8809330 0.8853450 #>  [258,] 0.7529363 0.7534889 0.8234367 #>  [259,] 0.5902972 0.5928902 0.6308346 #>  [260,] 0.6718197 0.7106755 0.7262962 #>  [261,] 0.7425354 0.7910531 0.8270597 #>  [262,] 1.1997473 1.2073546 1.2511650 #>  [263,] 1.0737080 1.0846505 1.1634936 #>  [264,] 0.6337146 0.6397812 0.6714378 #>  [265,] 0.5894187 0.6312271 0.6571348 #>  [266,] 0.5930981 0.6305166 0.6359485 #>  [267,] 0.6701691 0.6837886 0.6969339 #>  [268,] 0.5462910 0.5664751 0.5695664 #>  [269,] 0.5395772 0.5465096 0.5706228 #>  [270,] 1.3048490 1.3166211 1.3252675 #>  [271,] 0.6980437 0.7020965 0.7444436 #>  [272,] 0.7935173 0.8011135 0.8277441 #>  [273,] 1.3738066 1.4129677 1.4566993 #>  [274,] 0.7171945 0.7515179 0.7517438 #>  [275,] 0.6921267 0.7069993 0.7301444 #>  [276,] 0.9402936 0.9448445 0.9600733 #>  [277,] 1.0525800 1.0595558 1.0610588 #>  [278,] 0.6808497 0.6851222 0.7252061 #>  [279,] 0.7815055 0.8064172 0.8468132 #>  [280,] 1.3808879 1.4096142 1.4355093 #>  [281,] 0.7822619 0.7940733 0.8339535 #>  [282,] 0.7026467 0.7727260 0.8042984 #>  [283,] 1.0868234 1.0955112 1.1188925 #>  [284,] 0.8707431 0.9462525 0.9574392 #>  [285,] 1.2886716 1.3098118 1.3109613 #>  [286,] 0.6881313 0.7011941 0.7270770 #>  [287,] 0.6186616 0.6282704 0.6284530 #>  [288,] 0.7102418 0.7968462 0.8558811 #>  [289,] 0.7234398 0.7381614 0.7674279 #>  [290,] 1.0499355 1.0672302 1.0777120 #>  [291,] 0.9111301 0.9179055 0.9634648 #>  [292,] 0.5188914 0.5481655 0.5913548 #>  [293,] 0.8352271 0.8452204 0.9327998 #>  [294,] 1.0379926 1.0720157 1.1078455 #>  [295,] 0.9033339 0.9088798 0.9200165 #>  [296,] 1.0674152 1.0726240 1.1531050 #>  [297,] 0.9405769 0.9858961 1.0169845 #>  [298,] 0.7560798 0.7703281 0.8034664 #>  [299,] 0.6066695 0.6251684 0.6254802 #>  [300,] 0.6369705 0.6423369 0.6656108 #>  [301,] 0.9242277 0.9348738 0.9476694 #>  [302,] 0.5963474 0.5970435 0.6024872 #>  [303,] 0.8737768 0.8869972 0.9009176 #>  [304,] 0.7123307 0.7418367 0.7556182 #>  [305,] 1.7347919 1.7694638 1.8451193 #>  [306,] 1.0881068 1.1137166 1.1326235 #>  [307,] 0.8532326 0.8580553 0.8703862 #>  [308,] 0.9183210 0.9202239 0.9332303 #>  [309,] 0.8173546 0.8297603 0.8338482 #>  [310,] 0.9672253 0.9978282 1.0016866 #>  [311,] 0.8583569 0.9420993 1.0453889 #>  [312,] 0.6879880 0.6909103 0.7135974 #>  [313,] 0.5659517 0.5885196 0.5934607 #>  [314,] 0.5051892 0.5144100 0.5299289 #>  [315,] 1.5151442 1.5554906 1.5597036 #>  [316,] 0.6633638 0.6675235 0.7187628 #>  [317,] 1.0006400 1.0213396 1.0693693 #>  [318,] 0.7559686 0.7692655 0.7735351 #>  [319,] 0.6266141 0.6712053 0.6810414 #>  [320,] 0.7707400 0.7882731 0.8053350 #>  [321,] 0.9267980 0.9846618 1.0352317 #>  [322,] 0.6422244 0.6715535 0.6921267 #>  [323,] 1.5148519 1.5245245 1.5993052 #>  [324,] 0.8840006 0.9461225 0.9601944 #>  [325,] 0.8635800 0.8695582 0.8748257 #>  [326,] 0.8359788 0.8368975 0.8599840 #>  [327,] 0.5223925 0.5476168 0.5949791 #>  [328,] 0.6915035 0.6952236 0.7264707 #>  [329,] 0.6266141 0.6324249 0.6507609 #>  [330,] 0.6371668 0.7095891 0.7391180 #>  [331,] 0.5316566 0.5363043 0.5497515 #>  [332,] 0.6368288 0.6374088 0.6438900 #>  [333,] 0.5214221 0.5232992 0.5669786 #>  [334,] 0.5951705 0.5970384 0.6087219 #>  [335,] 1.3078149 1.3603938 1.4241865 #>  [336,] 0.5300963 0.5367432 0.5754572 #>  [337,] 0.5530354 0.5977071 0.5991555 #>  [338,] 0.9542710 0.9638495 0.9672024 #>  [339,] 0.9286943 0.9615989 1.0383871 #>  [340,] 1.4523259 1.4772548 1.4797834 #>  [341,] 0.6697829 0.7023633 0.7418957 #>  [342,] 0.5660122 0.5926328 0.6218399 #>  [343,] 1.0213071 1.0319657 1.0607571 #>  [344,] 0.6866361 0.7025294 0.7253721 #>  [345,] 0.6254308 0.6273300 0.6678857 #>  [346,] 1.3602058 1.3707460 1.5081733 #>  [347,] 0.7844985 0.7865505 0.8005759 #>  [348,] 0.9678829 0.9939987 1.0011931 #>  [349,] 0.6531948 0.6551563 0.6606734 #>  [350,] 1.6774413 1.7045468 1.7255003 #>  [351,] 0.6620198 0.7971390 0.8171032 #>  [352,] 1.0825134 1.1347221 1.1624359 #>  [353,] 0.8339538 0.8564208 0.8792170 #>  [354,] 0.5095269 0.5249243 0.5305430 #>  [355,] 0.5372019 0.5751283 0.5944731 #>  [356,] 1.1766834 1.2276929 1.2479664 #>  [357,] 0.5639394 0.6254507 0.6546473 #>  [358,] 0.5698225 0.5931316 0.6052670 #>  [359,] 0.7410501 0.7510554 0.7520733 #>  [360,] 0.6504436 0.6846867 0.7108606 #>  [361,] 0.7568506 0.8202051 0.8484445 #>  [362,] 0.6667541 0.6816178 0.6892280 #>  [363,] 1.0970660 1.2004969 1.2058457 #>  [364,] 0.8560704 0.8864458 0.8885843 #>  [365,] 0.6251583 0.6613045 0.6821412 #>  [366,] 0.5232992 0.5255045 0.5512574 #>  [367,] 0.7516923 0.7529461 0.7560778 #>  [368,] 0.6426710 0.6815502 0.6867777 #>  [369,] 0.8321651 0.8542277 0.8678461 #>  [370,] 0.7863399 0.7903002 0.8251574 #>  [371,] 0.4570490 0.5219666 0.5255129 #>  [372,] 0.5489649 0.5604408 0.6080367 #>  [373,] 0.5945732 0.6077787 0.6164800 #>  [374,] 0.8500054 0.8519240 0.8753933 #>  [375,] 0.8381460 0.8422119 0.8505305 #>  [376,] 0.5352541 0.5357802 0.5418420 #>  [377,] 0.9413123 0.9416822 0.9811382 #>  [378,] 0.7667496 0.8075683 0.8077714 #>  [379,] 1.4446264 1.4598577 1.4837283 #>  [380,] 0.9207407 0.9827432 0.9980256 #>  [381,] 0.9434217 1.0235849 1.0304359 #>  [382,] 0.9987884 1.0126364 1.0508752 #>  [383,] 0.5254510 0.5287851 0.5365297 #>  [384,] 1.0526032 1.0821451 1.1120387 #>  [385,] 0.7818137 0.7822059 0.7826278 #>  [386,] 0.4853453 0.4992772 0.4998188 #>  [387,] 1.0335580 1.0604612 1.0810862 #>  [388,] 1.3170670 1.3354038 1.3486437 #>  [389,] 0.8412040 0.8492821 0.8823997 #>  [390,] 0.8840006 0.9014968 0.9156229 #>  [391,] 0.8114918 0.8235063 0.8345844 #>  [392,] 1.8001090 1.8495661 1.8599373 #>  [393,] 0.8119024 0.8142179 0.8337361 #>  [394,] 0.7434977 0.7489527 0.7555524 #>  [395,] 0.6955927 0.7079818 0.7233384 #>  [396,] 0.7358988 0.7699282 0.8112320 #>  [397,] 1.3249629 1.3293615 1.3609592 #>  [398,] 1.4945139 1.5963429 1.6900510 #>  [399,] 0.7401457 0.7640925 0.7731047 #>  [400,] 0.5413423 0.5633472 0.5641910 #>  [401,] 1.4504172 1.4719863 1.5572822 #>  [402,] 0.9608456 0.9677030 0.9807607 #>  [403,] 0.6528512 0.6749686 0.7165665 #>  [404,] 0.5481405 0.5674496 0.6015542 #>  [405,] 0.6908090 0.6927312 0.7127862 #>  [406,] 0.6285286 0.6459050 0.6555909 #>  [407,] 0.6369705 0.6679342 0.6865174 #>  [408,] 0.6084620 0.6284792 0.6295416 #>  [409,] 0.6924296 0.7573924 0.7937460 #>  [410,] 0.4260122 0.4832739 0.4845802 #>  [411,] 0.7748530 0.8011611 0.8550012 #>  [412,] 0.6848315 0.6907030 0.7013417 #>  [413,] 0.9359060 0.9407715 0.9426938 #>  [414,] 0.8215090 0.8429600 0.8498222 #>  [415,] 1.0799644 1.1012694 1.1095425 #>  [416,] 0.8337611 0.8369771 0.8683412 #>  [417,] 1.1072299 1.1335416 1.1888129 #>  [418,] 0.6071685 0.6211115 0.6665865 #>  [419,] 2.0368236 2.0622770 2.0732479 #>  [420,] 1.1579784 1.1874665 1.1943955 #>  [421,] 0.8437701 0.8633034 0.8886171 #>  [422,] 0.5659517 0.6307840 0.6455346 #>  [423,] 0.7159624 0.7358489 0.7841837 #>  [424,] 0.6296331 0.6881313 0.7679130 #>  [425,] 0.6369300 0.6797835 0.7108606 #>  [426,] 0.9107758 0.9189834 0.9334186 #>  [427,] 1.0364651 1.0753184 1.0753738 #>  [428,] 0.6887844 0.7065494 0.7108007 #>  [429,] 0.9388490 0.9886052 0.9922339 #>  [430,] 0.6201057 0.6269690 0.6288973 #>  [431,] 1.0795648 1.0881068 1.0997755 #>  [432,] 1.0379926 1.0691786 1.0755834 #>  [433,] 1.1935930 1.2136506 1.3210965 #>  [434,] 0.5251180 0.5413423 0.5497515 #>  [435,] 0.7207410 0.7480937 0.8258053 #>  [436,] 0.8751890 0.8974858 0.9429621 #>  [437,] 0.5030396 0.5060421 0.5192237 #>  [438,] 0.6091096 0.6296342 0.6605546 #>  [439,] 0.6507153 0.6731011 0.6824017 #>  [440,] 0.6268266 0.6691882 0.6959807 #>  [441,] 0.5163133 0.5541023 0.5578565 #>  [442,] 0.6496324 0.6529263 0.6909794 #>  [443,] 0.7592109 0.7849160 0.7991259 #>  [444,] 0.6337632 0.6480659 0.6865030 #>  [445,] 0.7564317 0.7714710 0.8010342 #>  [446,] 1.5084274 1.5559028 1.5755323 #>  [447,] 0.5996479 0.6088210 0.6822883 #>  [448,] 0.9625666 0.9704369 0.9799864 #>  [449,] 0.8831779 0.9316208 0.9385488 #>  [450,] 0.8281287 0.8285459 0.9066625 #>  [451,] 1.2804134 1.3044121 1.3245982 #>  [452,] 1.2597318 1.2861475 1.2959427 #>  [453,] 0.9689464 0.9801442 1.0259247 #>  [454,] 1.1111103 1.1118867 1.1893486 #>  [455,] 0.6917033 0.6978447 0.7015404 #>  [456,] 0.6590761 0.6941419 0.7036027 #>  [457,] 1.3920763 1.3989042 1.4473129 #>  [458,] 1.4213550 1.4589644 1.5273005 #>  [459,] 0.6881604 0.8864736 0.9002664 #>  [460,] 0.7141067 0.7376464 0.7484661 #>  [461,] 0.9437557 0.9843238 0.9936820 #>  [462,] 0.6259386 0.6590761 0.6594944 #>  [463,] 0.7233402 0.7995105 0.8420370 #>  [464,] 0.7793370 0.8025691 0.8044773 #>  [465,] 0.5616974 0.5926328 0.6082331 #>  [466,] 1.0323286 1.0718966 1.1102586 #>  [467,] 0.8498368 0.8743226 0.8792170 #>  [468,] 0.9424442 1.0326367 1.0721550 #>  [469,] 0.8361427 0.8373940 0.8989414 #>  [470,] 0.6483323 0.6891220 0.7550641 #>  [471,] 1.8366318 1.9283131 1.9869037 #>  [472,] 0.8140066 0.8452733 0.8533514 #>  [473,] 1.0418663 1.0485898 1.0507061 #>  [474,] 1.2030919 1.2069265 1.2217792 #>  [475,] 1.3845539 1.3957080 1.3982280 #>  [476,] 0.7639565 0.7646057 0.7866773 #>  [477,] 0.5829708 0.6147053 0.6402044 #>  [478,] 0.5600070 0.5704629 0.6037277 #>  [479,] 0.6982415 0.7304507 0.7345190 #>  [480,] 0.5890791 0.6269690 0.6316907 #>  [481,] 0.8250618 0.8542277 0.8841978 #>  [482,] 0.8984606 0.9004955 0.9191842 #>  [483,] 0.8343105 0.8633965 0.8682689 #>  [484,] 1.2007236 1.2023102 1.2107606 #>  [485,] 1.3325529 1.3339828 1.3617193 #>  [486,] 1.0492808 1.0660843 1.0809645 #>  [487,] 0.9801442 0.9856327 0.9907079 #>  [488,] 0.6149703 0.6405840 0.6482627 #>  [489,] 0.5227396 0.5300460 0.5357802 #>  [490,] 1.2932576 1.3370283 1.3646813 #>  [491,] 0.6223394 0.6553773 0.6833607 #>  [492,] 1.1625769 1.2127428 1.2806805 #>  [493,] 0.7221304 0.7477089 0.7481848 #>  [494,] 0.6658604 0.7178302 0.7247861 #>  [495,] 0.8268985 0.8452733 0.9048640 #>  [496,] 0.4722554 0.5441480 0.5506415 #>  [497,] 0.9635406 1.0323436 1.0328125 #>  [498,] 0.6121149 0.6296331 0.6371968 #>  [499,] 0.9970754 1.0116667 1.0382032 #>  [500,] 0.7979995 0.8307779 0.8356522 #>  [501,] 1.1299210 1.1637945 1.1665016 #>  [502,] 0.6456828 0.6476495 0.6824805 #>  [503,] 0.8343515 0.8489408 0.8855354 #>  [504,] 0.7221569 0.7301444 0.7341606 #>  [505,] 1.3949529 1.3990695 1.4151882 #>  [506,] 0.6426710 0.6504436 0.6550126 #>  [507,] 0.5214541 0.5299735 0.5880431 #>  [508,] 0.8200966 0.8473559 0.8793822 #>  [509,] 0.6767477 0.6975288 0.7162127 #>  [510,] 1.3927235 1.3937287 1.3955870 #>  [511,] 0.5271642 0.5586766 0.6087219 #>  [512,] 0.6254308 0.6260469 0.6272554 #>  [513,] 1.3174235 1.3175279 1.3359981 #>  [514,] 0.7511034 0.7986166 0.8103244 #>  [515,] 1.2103126 1.2724506 1.2894302 #>  [516,] 0.8423453 0.8465814 0.8484863 #>  [517,] 0.7257708 0.8026458 0.8323968 #>  [518,] 1.0107187 1.0669432 1.0955477 #>  [519,] 1.6797456 1.6961179 1.6986499 #>  [520,] 0.6636637 0.6652031 0.6924623 #>  [521,] 0.8046708 0.8270457 0.8349331 #>  [522,] 0.7585633 0.7678116 0.7815055 #>  [523,] 1.7619805 1.7620456 1.8495963 #>  [524,] 0.8918863 0.9056971 0.9078606 #>  [525,] 0.7711311 0.7892421 0.7995517 #>  [526,] 0.7506998 0.7514039 0.7739283 #>  [527,] 0.7933943 0.8474790 0.8649767 #>  [528,] 0.7320595 0.7338424 0.7389643 #>  [529,] 0.8389431 0.8389723 0.8822914 #>  [530,] 0.8626965 0.9194272 0.9361871 #>  [531,] 0.6322816 0.6461015 0.6551826 #>  [532,] 0.7483403 0.7554409 0.7664765 #>  [533,] 0.9076409 0.9603202 0.9636447 #>  [534,] 0.9659640 1.0309766 1.0468901 #>  [535,] 0.6064031 0.6259386 0.6431618 #>  [536,] 1.6996776 1.7350338 1.7650267 #>  [537,] 0.6918506 0.6944751 0.7035849 #>  [538,] 0.8539143 0.9054635 0.9129424 #>  [539,] 0.6610957 0.6858007 0.7083119 #>  [540,] 0.6120866 0.6137684 0.6295371 #>  [541,] 0.5960711 0.6081654 0.6230198 #>  [542,] 1.2517210 1.2621590 1.2839675 #>  [543,] 0.5468600 0.5514407 0.5791009 #>  [544,] 0.6932998 0.7000453 0.7130851 #>  [545,] 0.6298960 0.6315137 0.6678122 #>  [546,] 0.6316042 0.6413394 0.6419751 #>  [547,] 0.8554872 0.8725733 0.8774862 #>  [548,] 1.1854489 1.1896254 1.2142408 #>  [549,] 0.6225665 0.6451952 0.6482742 #>  [550,] 0.9122546 0.9278065 0.9614304 #>  [551,] 0.7644397 0.8759170 0.8800282 #>  [552,] 0.7181626 0.7696635 0.7717347 #>  [553,] 0.8330466 0.8384350 0.8731855 #>  [554,] 0.6114660 0.6280712 0.6312099 #>  [555,] 0.6972318 0.6999118 0.7073940 #>  [556,] 0.9994424 1.0145061 1.0658889 #>  [557,] 1.0325793 1.0636037 1.0689653 #>  [558,] 0.7796350 0.8465814 0.8745539 #>  [559,] 1.0523630 1.0677928 1.0737080 #>  [560,] 0.7289075 0.7295944 0.7384290 #>  [561,] 1.0983935 1.1204454 1.1626528 #>  [562,] 0.6934351 0.7214226 0.7646761 #>  [563,] 0.6969339 0.7170688 0.7245057 #>  [564,] 0.7931867 0.7979054 0.7987465 #>  [565,] 0.5864405 0.5962334 0.6152350 #>  [566,] 1.0585420 1.0962442 1.1045095 #>  [567,] 0.8722788 0.9316868 0.9318368 #>  [568,] 0.8003845 0.8486726 0.8979212 #>  [569,] 1.0221183 1.0737526 1.1279051 #>  [570,] 0.9283802 0.9401285 0.9708070 #>  [571,] 1.1835831 1.1851875 1.2102178 #>  [572,] 0.6957065 0.7139986 0.7156543 #>  [573,] 0.6075533 0.6122092 0.6468738 #>  [574,] 0.5450930 0.5705277 0.5832061 #>  [575,] 0.6639336 0.6926856 0.7663376 #>  [576,] 0.8394596 0.9244963 0.9410156 #>  [577,] 0.9092800 0.9495892 0.9668692 #>  [578,] 1.1181983 1.2022061 1.2527229 #>  [579,] 1.0982948 1.1178313 1.1343650 #>  [580,] 0.6917033 0.6929541 0.7102139 #>  [581,] 0.6110179 0.6366081 0.6591386 #>  [582,] 0.5865029 0.5883754 0.6184856 #>  [583,] 0.8689489 0.8713700 0.8742315 #>  [584,] 1.2001631 1.2111082 1.2208875 #>  [585,] 0.5785462 0.6309084 0.6468738 #>  [586,] 0.8632478 0.9246157 0.9253353 #>  [587,] 1.6182427 1.6469082 1.6623264 #>  [588,] 0.8239318 0.8322180 0.8346758 #>  [589,] 0.7201049 0.7744149 0.7852797 #>  [590,] 0.6472884 0.6504390 0.6595492 #>  [591,] 0.6499900 0.6502066 0.6583784 #>  [592,] 0.6335110 0.7314742 0.7697863 #>  [593,] 0.5965391 0.6092272 0.6143856 #>  [594,] 0.6696475 0.6952236 0.7305111 #>  [595,] 0.5694813 0.5713210 0.5738686 #>  [596,] 0.5689988 0.5909949 0.6123237 #>  [597,] 0.8037378 0.8236783 0.8468132 #>  [598,] 0.7076544 0.7280388 0.7314742 #>  [599,] 0.9542710 0.9598425 0.9609042 #>  [600,] 0.7122552 0.7252567 0.8010461 #>  [601,] 0.5043888 0.5260483 0.5359880 #>  [602,] 0.5708888 0.5776000 0.5777857 #>  [603,] 0.5923602 0.6156591 0.6236697 #>  [604,] 1.4967843 1.5261073 1.5391861 #>  [605,] 0.6344208 0.6433227 0.6978417 #>  [606,] 1.0048529 1.1238924 1.1663163 #>  [607,] 0.6206189 0.6223959 0.6283467 #>  [608,] 1.0082365 1.0089055 1.0192989 #>  [609,] 0.8023494 0.8536422 0.8667761 #>  [610,] 0.8728829 0.8791238 0.9481648 #>  [611,] 1.2183901 1.2264854 1.2784561 #>  [612,] 0.7493424 0.7571816 0.7652569 #>  [613,] 0.9370844 0.9378633 0.9704766 #>  [614,] 1.0253382 1.0341568 1.0421121 #>  [615,] 0.8805531 0.9180486 0.9890504 #>  [616,] 0.8644061 0.8927731 0.8996746 #>  [617,] 0.8826524 0.8950090 0.8982028 #>  [618,] 0.6018630 0.6078455 0.6280712 #>  [619,] 0.6171152 0.6571348 0.6652031 #>  [620,] 0.5367502 0.5530591 0.5944927 #>  [621,] 0.9196217 0.9211956 0.9638174 #>  [622,] 1.0691070 1.0693567 1.0845007 #>  [623,] 0.8884526 0.9298823 0.9560965 #>  [624,] 0.8954325 0.9388718 0.9780213 #>  [625,] 0.6784099 0.6846910 0.6887844 #>  [626,] 0.6366373 0.6645156 0.7068138 #>  [627,] 0.6272554 0.6319741 0.7273997 #>  [628,] 0.8739521 0.8763842 0.9011812 #>  [629,] 0.6327154 0.6330009 0.6411958 #>  [630,] 1.3647476 1.3971116 1.5556589 #>  [631,] 1.3383258 1.4176684 1.4199142 #>  [632,] 0.5818625 0.6313948 0.6478334 #>  [633,] 0.6911991 0.6927948 0.6984632 #>  [634,] 0.6946352 0.7015404 0.7252901 #>  [635,] 1.1106586 1.1305985 1.1561571 #>  [636,] 0.7494311 0.7523884 0.7806192 #>  [637,] 0.7142736 0.7309029 0.7378334 #>  [638,] 0.5053341 0.5352231 0.5370100 #>  [639,] 1.0883164 1.1285231 1.1324501 #>  [640,] 0.6869493 0.7058293 0.7501965 #>  [641,] 1.0350087 1.0547686 1.0627694 #>  [642,] 1.1187312 1.1667589 1.1800682 #>  [643,] 0.9212192 0.9316373 0.9615458 #>  [644,] 0.7653432 0.7714710 0.8333664 #>  [645,] 1.1796202 1.1970941 1.2017778 #>  [646,] 0.8217957 0.8446917 0.8529926 #>  [647,] 0.6057263 0.6104428 0.7060885 #>  [648,] 0.5791865 0.6299614 0.6642824 #>  [649,] 0.6801022 0.6911235 0.7140283 #>  [650,] 0.5363043 0.5934036 0.5991295 #>  [651,] 0.6032275 0.6165739 0.6187139 #>  [652,] 0.8573883 0.8858543 0.8998728 #>  [653,] 1.2063106 1.2063451 1.2082663 #>  [654,] 0.8652811 0.9522926 0.9677344 #>  [655,] 0.9519594 0.9933560 1.0295447 #>  [656,] 0.6351153 0.6382597 0.6448234 #>  [657,] 0.6583510 0.6789030 0.6898545 #>  [658,] 0.6345132 0.6429590 0.6829485 #>  [659,] 1.6694271 1.7098825 1.7994794 #>  [660,] 1.6022668 1.6923704 1.7233775 #>  [661,] 0.6595898 0.6659709 0.6865174 #>  [662,] 1.0534389 1.0643914 1.0821283 #>  [663,] 1.6040380 1.6109316 1.6206263 #>  [664,] 0.9491015 0.9631516 0.9759137 #>  [665,] 0.8075683 0.8215408 0.8388250 #>  [666,] 0.9569248 0.9592373 0.9705222 #>  [667,] 1.4778947 1.4791164 1.5490838 #>  [668,] 0.5977071 0.6105702 0.6141399 #>  [669,] 0.6414205 0.6720598 0.7199142 #>  [670,] 1.0045843 1.0397756 1.0995174 #>  [671,] 1.0090117 1.0389491 1.0492488 #>  [672,] 1.4352610 1.4363488 1.4454380 #>  [673,] 0.9429846 0.9439894 0.9762117 #>  [674,] 0.9925119 1.0276477 1.0605241 #>  [675,] 1.2672290 1.2674232 1.2800383 #>  [676,] 1.1137643 1.1152745 1.1182967 #>  [677,] 0.6259066 0.6741026 0.6865902 #>  [678,] 1.3147000 1.3520007 1.3591388 #>  [679,] 0.5402732 0.5597026 0.5605741 #>  [680,] 1.4048986 1.4197497 1.4520644 #>  [681,] 0.6324714 0.6791254 0.7095518 #>  [682,] 0.6216446 0.6227934 0.6396500 #>  [683,] 0.8191116 0.8227252 0.8227968 #>  [684,] 0.7578897 0.8361862 0.8477020 #>  [685,] 0.7809619 0.8022207 0.9169606 #>  [686,] 0.6912560 0.6980159 0.7001974 #>  [687,] 0.6396881 0.6595492 0.6608365 #>  [688,] 0.9389011 0.9786173 1.0203455 #>  [689,] 1.0327764 1.0356586 1.0942342 #>  [690,] 1.0097652 1.0168569 1.0242121 #>  [691,] 0.7815342 0.8011611 0.8290332 #>  [692,] 0.7871776 0.7944107 0.8269135 #>  [693,] 0.5903307 0.6228972 0.6532132 #>  [694,] 1.0301478 1.0712819 1.0860212 #>  [695,] 1.0982044 1.2001683 1.2087601 #>  [696,] 0.7051500 0.7571816 0.7623088 #>  [697,] 0.5705964 0.5819347 0.5934052 #>  [698,] 0.7250594 0.7492617 0.7493448 #>  [699,] 0.6606484 0.6631976 0.6798189 #>  [700,] 0.8930866 0.9300010 0.9593590 #>  [701,] 1.5080146 1.5347144 1.5522718 #>  [702,] 1.5765386 1.6582394 1.6619402 #>  [703,] 0.6319952 0.6865030 0.7083006 #>  [704,] 0.8173095 0.8319102 0.8374934 #>  [705,] 1.3976005 1.4553816 1.5463344 #>  [706,] 0.8836750 0.8845754 0.9364194 #>  [707,] 0.7165665 0.7170963 0.7263721 #>  [708,] 1.3919483 1.4140123 1.4266226 #>  [709,] 1.6026818 1.6457764 1.6749081 #>  [710,] 0.7295703 0.7564317 0.7691372 #>  [711,] 0.9122546 0.9433326 0.9522926 #>  [712,] 0.9266317 0.9296969 0.9347825 #>  [713,] 0.9685092 0.9739743 1.0203926 #>  [714,] 2.0304680 2.0668551 2.0990286 #>  [715,] 0.5817940 0.6003385 0.6047075 #>  [716,] 0.6948689 0.6957559 0.6984632 #>  [717,] 0.7020968 0.7043039 0.7141737 #>  [718,] 0.9107811 1.0219495 1.0931537 #>  [719,] 0.6883178 0.6932177 0.7011852 #>  [720,] 0.9904054 0.9955265 1.0317158 #>  [721,] 0.8866105 0.9696600 0.9934583 #>  [722,] 1.0699764 1.0709464 1.0869387 #>  [723,] 1.1036780 1.1350567 1.1460244 #>  [724,] 0.7653432 0.7677583 0.7710446 #>  [725,] 0.4983881 0.5906181 0.5968819 #>  [726,] 1.0878615 1.0978591 1.1236317 #>  [727,] 0.7469500 0.8104873 0.8290198 #>  [728,] 0.9469084 0.9862035 1.0049498 #>  [729,] 0.9400008 1.0145627 1.0247582 #>  [730,] 0.9736194 0.9956035 1.0122740 #>  [731,] 0.6282642 0.6302717 0.6616638 #>  [732,] 0.5324831 0.5812490 0.6073629 #>  [733,] 0.5392462 0.5520688 0.5772985 #>  [734,] 0.7464483 0.7771891 0.8006961 #>  [735,] 0.6144317 0.6381688 0.7062620 #>  [736,] 0.8461322 0.9300457 0.9473064 #>  [737,] 0.7876525 0.7991259 0.8132627 #>  [738,] 1.1131678 1.1892846 1.2306954 #>  [739,] 1.4660641 1.4853820 1.5127962 #>  [740,] 0.6198936 0.6491675 0.7033830 #>  [741,] 0.9278128 0.9344952 0.9915174 #>  [742,] 0.6083708 0.6174449 0.6428052 #>  [743,] 0.8726737 0.8880480 0.9144870 #>  [744,] 0.8621433 0.8746084 0.8786229 #>  [745,] 0.6145898 0.6554567 0.6782950 #>  [746,] 1.0037320 1.0356976 1.0662797 #>  [747,] 0.5388629 0.5556132 0.5659951 #>  [748,] 0.6092272 0.6116344 0.6264150 #>  [749,] 0.6367610 0.7038352 0.7049195 #>  [750,] 0.5158582 0.5228434 0.5230733 #>  [751,] 0.5700626 0.6156591 0.6165837 #>  [752,] 0.6946238 0.6946996 0.7025888 #>  [753,] 0.9828514 0.9892936 0.9990607 #>  [754,] 0.5561923 0.5811566 0.6127122 #>  [755,] 0.7454933 0.7707893 0.8120324 #>  [756,] 1.2628498 1.2738177 1.2757721 #>  [757,] 0.7918893 0.8363661 0.9457345 #>  [758,] 1.0607571 1.1302767 1.1430333 #>  [759,] 0.7321957 0.7516337 0.7685542 #>  [760,] 0.6853753 0.6987554 0.7383736 #>  [761,] 0.5178281 0.5275008 0.5492349 #>  [762,] 0.6946352 0.7058115 0.7231246 #>  [763,] 0.7852900 0.7989860 0.8287287 #>  [764,] 0.7444436 0.7619560 0.7685267 #>  [765,] 0.6613003 0.6760396 0.6814139 #>  [766,] 0.5184394 0.5222053 0.5578565 #>  [767,] 0.6293052 0.6681488 0.7006785 #>  [768,] 0.7159624 0.7667240 0.7886602 #>  [769,] 0.5022536 0.5162194 0.5880370 #>  [770,] 0.9604144 0.9936820 1.0495458 #>  [771,] 0.5672956 0.6106569 0.6174449 #>  [772,] 1.0016119 1.0319963 1.0499355 #>  [773,] 0.5763536 0.5933931 0.6111864 #>  [774,] 0.5973146 0.6116958 0.6450226 #>  [775,] 0.6478088 0.6981025 0.7059879 #>  [776,] 0.5950111 0.6350558 0.6421638 #>  [777,] 0.7618450 0.7992068 0.8153786 #>  [778,] 0.6087236 0.6325972 0.6347119 #>  [779,] 0.6377034 0.6838702 0.7091966 #>  [780,] 0.9283802 0.9495652 0.9603662 #>  [781,] 0.6501760 0.6762191 0.6903727 #>  [782,] 1.8676643 1.8684958 1.9238197 #>  [783,] 1.0251402 1.1343650 1.2003396 #>  [784,] 0.9328662 0.9401285 0.9428743 #>  [785,] 0.6808497 0.6920953 0.6978447 #>  [786,] 1.0426916 1.0749256 1.0832654 #>  [787,] 0.6811325 0.6932989 0.7011178 #>  [788,] 0.5796872 0.5976691 0.6157233 #>  [789,] 0.5952403 0.6243248 0.6286228 #>  [790,] 0.8887436 0.8963901 0.9203485 #>  [791,] 0.6535740 0.6577438 0.6879317 #>  [792,] 0.8250634 0.8475956 0.8807772 #>  [793,] 0.6356892 0.6421232 0.6504390 #>  [794,] 1.0263756 1.0498989 1.0506778 #>  [795,] 0.8667761 0.8683412 0.8786797 #>  [796,] 0.6551826 0.6583784 0.6894053 #>  [797,] 0.5939127 0.6097627 0.6119627 #>  [798,] 0.8217016 0.8716993 0.9007525 #>  [799,] 0.7440452 0.7482042 0.7711311 #>  [800,] 0.8189251 0.8249653 0.8345334 #>  [801,] 0.5540437 0.5556132 0.6207737 #>  [802,] 0.8495469 0.8581893 0.8600159 #>  [803,] 0.5696109 0.5878029 0.6001676 #>  [804,] 0.9085386 0.9159732 0.9333718 #>  [805,] 0.7614613 0.7673338 0.7888949 #>  [806,] 0.7874671 0.7931867 0.7950386 #>  [807,] 0.5812490 0.5832089 0.5978354 #>  [808,] 0.5819897 0.6026932 0.6211842 #>  [809,] 1.0159346 1.0492076 1.0508752 #>  [810,] 0.7300388 0.7341037 0.7762299 #>  [811,] 0.8393728 0.8414773 0.8552304 #>  [812,] 0.7030217 0.7070276 0.7307254 #>  [813,] 0.5367432 0.5375676 0.5714431 #>  [814,] 1.1913554 1.2072413 1.2382841 #>  [815,] 0.6797838 0.7068978 0.7073605 #>  [816,] 0.7129964 0.7149142 0.7546332 #>  [817,] 0.6308346 0.6378182 0.6521675 #>  [818,] 0.4372633 0.5605023 0.5856409 #>  [819,] 0.6487706 0.6607851 0.6697829 #>  [820,] 0.6579318 0.6756524 0.6842524 #>  [821,] 1.0379748 1.0556244 1.0937884 #>  [822,] 0.6149527 0.6345132 0.6379936 #>  [823,] 0.7233384 0.7259108 0.7319371 #>  [824,] 0.9122339 0.9225015 0.9311287 #>  [825,] 0.9876868 1.0046072 1.0079397 #>  [826,] 0.9418299 0.9491046 1.0032053 #>  [827,] 0.5527397 0.5582592 0.5723400 #>  [828,] 0.5629128 0.5854813 0.5886410 #>  [829,] 1.2824250 1.2993021 1.3126443 #>  [830,] 0.6682165 0.7781544 0.8013996 #>  [831,] 0.7168591 0.7762624 0.8067836 #>  [832,] 0.7171020 0.7497152 0.7787340 #>  [833,] 0.6554532 0.6656108 0.7087212 #>  [834,] 0.7364156 0.7770964 0.8133622 #>  [835,] 0.5791009 0.6055214 0.6288123 #>  [836,] 0.5782733 0.5903307 0.6110179 #>  [837,] 1.1769351 1.1794767 1.1937630 #>  [838,] 0.8270530 0.8319599 0.8371421 #>  [839,] 0.6572075 0.7130125 0.7315517 #>  [840,] 0.6480608 0.6507790 0.6670808 #>  [841,] 0.7458261 0.7508345 0.7691063 #>  [842,] 1.0830214 1.1324827 1.1494758 #>  [843,] 0.8167265 0.8834671 0.9155159 #>  [844,] 0.7416638 0.7546287 0.7587506 #>  [845,] 0.8309483 0.8414773 0.9013973 #>  [846,] 0.8815356 0.9227925 0.9360585 #>  [847,] 0.5644730 0.5730541 0.6049935 #>  [848,] 0.8213767 0.8235063 0.8343515 #>  [849,] 0.6811325 0.6894053 0.7333821 #>  [850,] 0.6063638 0.6116958 0.6124847 #>  [851,] 0.9633232 1.0172182 1.0544612 #>  [852,] 0.7948180 0.8767487 0.9128331 #>  [853,] 1.2328109 1.3060682 1.3131808 #>  [854,] 1.4039361 1.4105761 1.4338107 #>  [855,] 0.5175956 0.5280844 0.5520688 #>  [856,] 0.7252861 0.7468968 0.7525092 #>  [857,] 2.4620334 2.4656497 2.4706069 #>  [858,] 0.6015393 0.6091990 0.6284530 #>  [859,] 0.5711702 0.5723400 0.5830010 #>  [860,] 0.6298889 0.6657809 0.6823739 #>  [861,] 0.8279568 0.8756918 0.9156722 #>  [862,] 0.6210127 0.6236453 0.6298960 #>  [863,] 1.0407409 1.0491975 1.0566301 #>  [864,] 1.2329577 1.2402349 1.2449845 #>  [865,] 0.7842000 0.7874958 0.7952668 #>  [866,] 0.9507940 0.9701860 0.9828654 #>  [867,] 0.5648644 0.6058319 0.6065770 #>  [868,] 0.7433239 0.7489036 0.7567039 #>  [869,] 1.6821039 1.7047096 1.7163822 #>  [870,] 0.6562056 0.6706770 0.6776965 #>  [871,] 0.4954672 0.5001183 0.5202331 #>  [872,] 0.5840516 0.6125931 0.6254836 #>  [873,] 0.6327947 0.6572075 0.6682147 #>  [874,] 0.5128517 0.5230733 0.5932272 #>  [875,] 0.9928779 0.9981311 1.0199067 #>  [876,] 0.6193215 0.6278293 0.6396881 #>  [877,] 0.9114634 0.9378238 0.9499849 #>  [878,] 0.7250952 0.7375913 0.7468874 #>  [879,] 0.6892280 0.6908090 0.6997878 #>  [880,] 1.0099069 1.0253730 1.0657104 #>  [881,] 0.8862557 0.9135281 0.9236848 #>  [882,] 1.1092249 1.1483110 1.1516656 #>  [883,] 0.8054412 0.8158241 0.8733001 #>  [884,] 1.0645142 1.1185659 1.1447058 #>  [885,] 0.6366282 0.6507609 0.7117721 #>  [886,] 0.6416477 0.6554775 0.6557740 #>  [887,] 1.0077947 1.0622568 1.0718966 #>  [888,] 0.6981628 0.7025094 0.7251107 #>  [889,] 1.8794967 1.9580895 1.9658908 #>  [890,] 1.4031266 1.4186001 1.6265560 #>  [891,] 0.7373350 0.7581955 0.7743609 #>  [892,] 0.5781488 0.5912188 0.5958946 #>  [893,] 0.6845470 0.7066446 0.7145371 #>  [894,] 0.5706228 0.5929143 0.6232908 #>  [895,] 0.6982415 0.7839698 0.8397277 #>  [896,] 1.4879664 1.5332080 1.5726515 #>  [897,] 1.1200301 1.2161887 1.2251083 #>  [898,] 1.0354632 1.1047688 1.1102586 #>  [899,] 0.6631976 0.6867619 0.7218904 #>  [900,] 0.8747034 0.8765178 0.9369624 #>  [901,] 0.5934188 0.6036580 0.6056943 #>  [902,] 0.6110002 0.6770926 0.6818561 #>  [903,] 1.1650495 1.1868614 1.2195083 #>  [904,] 1.0872208 1.0889161 1.0965272 #>  [905,] 1.0483821 1.0668040 1.1226537 #>  [906,] 1.0788472 1.0795457 1.0871165 #>  [907,] 0.7794371 0.8307779 0.8339535 #>  [908,] 1.7263543 1.7806430 1.7946837 #>  [909,] 0.6676738 0.6692322 0.6741026 #>  [910,] 0.6614449 0.6777041 0.7227731 #>  [911,] 1.3028077 1.3049783 1.3294276 #>  [912,] 0.6821412 0.6944665 0.6991062 #>  [913,] 0.7087127 0.7231510 0.7863399 #>  [914,] 0.6109977 0.6222185 0.6336612 #>  [915,] 0.5768342 0.6271728 0.6605717 #>  [916,] 0.7231608 0.7300388 0.7301023 #>  [917,] 0.9420159 0.9539432 0.9637479 #>  [918,] 0.5970435 0.6271728 0.6422244 #>  [919,] 0.6330009 0.6452374 0.6613899 #>  [920,] 0.7673061 0.8058218 0.8400958 #>  [921,] 0.6063638 0.6110795 0.6265918 #>  [922,] 0.8337611 0.8894861 0.9192811 #>  [923,] 1.2236458 1.2483489 1.2553304 #>  [924,] 0.5398089 0.5633938 0.5974423 #>  [925,] 1.3241416 1.3276561 1.3379262 #>  [926,] 0.5118004 0.5492349 0.5564632 #>  [927,] 0.6796833 0.6991153 0.7165858 #>  [928,] 0.6184856 0.6261714 0.6415020 #>  [929,] 0.9856823 0.9859578 1.0307187 #>  [930,] 0.5683766 0.5832061 0.6052557 #>  [931,] 0.7228644 0.7276661 0.7367229 #>  [932,] 1.0080811 1.0202241 1.0325793 #>  [933,] 0.7183756 0.7283409 0.7442883 #>  [934,] 0.7115747 0.7615930 0.7719870 #>  [935,] 0.8448423 0.8497234 0.8527991 #>  [936,] 0.7865625 0.7881288 0.7909163 #>  [937,] 0.8733001 0.8973212 0.9292330 #>  [938,] 0.6289822 0.6464815 0.6801022 #>  [939,] 0.5857379 0.5951442 0.5990992 #>  [940,] 0.7826584 0.7882731 0.7894357 #>  [941,] 0.7722264 0.8599840 0.8808708 #>  [942,] 1.0613844 1.0614582 1.0816093 #>  [943,] 0.8230899 0.8521400 0.8623385 #>  [944,] 0.9667551 0.9717448 0.9831813 #>  [945,] 0.5952514 0.5990992 0.6285706 #>  [946,] 1.3891899 1.4117854 1.4163078 #>  [947,] 1.8230693 1.8458030 1.8552915 #>  [948,] 0.8695294 0.8943513 0.9339473 #>  [949,] 0.7590968 0.7777798 0.7807961 #>  [950,] 0.7649150 0.7687499 0.7689906 #>  [951,] 1.2154473 1.2236371 1.2734731 #>  [952,] 0.6418458 0.6589573 0.6868936 #>  [953,] 1.4307615 1.4698750 1.4847263 #>  [954,] 0.8781508 0.9159732 0.9370051 #>  [955,] 0.6749686 0.7657137 0.7668846 #>  [956,] 0.5291195 0.5373288 0.5492972 #>  [957,] 0.7322471 0.7458261 0.7615346 #>  [958,] 1.0064425 1.0399131 1.0667986 #>  [959,] 1.4250258 1.4725344 1.5067130 #>  [960,] 0.7938946 0.8855354 0.9053477 #>  [961,] 0.8300877 0.8628371 0.8755627 #>  [962,] 0.9496758 0.9524073 0.9633929 #>  [963,] 0.7877084 0.8226220 0.8497456 #>  [964,] 0.7023191 0.7105156 0.7208012 #>  [965,] 0.6776303 0.6891220 0.6985284 #>  [966,] 0.7882480 0.8114743 0.8475879 #>  [967,] 0.8884526 0.9211420 0.9402543 #>  [968,] 0.7328385 0.7388299 0.7447916 #>  [969,] 0.7034657 0.7401818 0.7515799 #>  [970,] 0.6948404 0.6982964 0.7224331 #>  [971,] 0.7756047 0.7923838 0.8010402 #>  [972,] 0.8389431 0.8402952 0.8900467 #>  [973,] 0.6411958 0.6593915 0.6881816 #>  [974,] 0.5481405 0.5701761 0.5705964 #>  [975,] 0.7723002 0.8222653 0.8554446 #>  [976,] 0.5722593 0.5819897 0.5891085 #>  [977,] 0.9737474 0.9797495 0.9911423 #>  [978,] 0.6316042 0.6539992 0.6574537 #>  [979,] 0.6496324 0.6877159 0.6979943 #>  [980,] 0.6140017 0.6320566 0.6324249 #>  [981,] 0.6832854 0.7189778 0.7624596 #>  [982,] 1.1941917 1.2158129 1.2170352 #>  [983,] 0.7464483 0.7863797 0.7957749 #>  [984,] 0.8057426 0.8371371 0.8495015 #>  [985,] 0.7007767 0.7083554 0.7284534 #>  [986,] 0.7954077 0.8110059 0.8251384 #>  [987,] 0.6569678 0.6679863 0.6739771 #>  [988,] 0.8312567 0.8634794 0.8956440 #>  [989,] 0.6646705 0.6766188 0.6823739 #>  [990,] 1.0639573 1.0954633 1.1053707 #>  [991,] 1.2527108 1.2922820 1.2956935 #>  [992,] 0.7881651 0.8152201 0.9160962 #>  [993,] 0.5831593 0.5944731 0.6246307 #>  [994,] 0.5651737 0.5670792 0.6302799 #>  [995,] 1.2700727 1.3318702 1.3383258 #>  [996,] 0.6228079 0.6415623 0.6500501 #>  [997,] 0.6631974 0.6830851 0.7341348 #>  [998,] 0.5929792 0.7007186 0.7818137 #>  [999,] 0.5887924 0.6019316 0.6163977 #> [1000,] 0.4963594 0.5490092 0.5526944 #>   # Find the 10 approximate nearest neighbors (see RANN::nn2) tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\",     eps = 0.3 ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  246  220  412  867  921   26  856  919  124   423 #>    [2,]  422  234  776  313  976  259  855  669  997   274 #>    [3,]  688  684  700  309  361  683  962  211   18   217 #>    [4,]   54  602  832  938  859  481  572  649  354   373 #>    [5,]  875  611  157  800  245  487  610  966  743   141 #>    [6,]  476  467  877  948  611  692  972  486  464   245 #>    [7,]  529  762  191  389  846  135  589  583  476   917 #>    [8,]  425  914  218  734  344  506  590  895   85   101 #>    [9,]  489  117  299  733  386  313  543  855  169   554 #>   [10,]  211  741  700   30  812  580  217  840  493   824 #>   [11,]  906  809  297  382   76  606  927  105  502   254 #>   [12,]  327  930  894  511  337  184  441   45  626   334 #>   [13,]  510  786  963   22  895  866  420    5  133   805 #>   [14,]  330  371  892  440  212  214  732  640  255   744 #>   [15,]  777  282  500   71  213   79  271  111  188   884 #>   [16,]   74  907  436  188  107  764  661  473  500   499 #>   [17,]  409  142  811  649  572  712  988  261  140   225 #>   [18,]  129  375  960  160  459  683  688  503   61   224 #>   [19,]  676  960  203  922  680  324  224  691  795   298 #>   [20,]   50  408  512  333  612  677  462  696  251   289 #>   [21,]  497  755  339    1  635  124  559  272  665   921 #>   [22,]  805  961  866  879  786  726  963  405  781   817 #>   [23,]  962  308  846  309  490  390  321  991  191   217 #>   [24,]   67   77  780  935  210  521  662  916  264   955 #>   [25,]  666  290  685  118  792  553  646  804  421   113 #>   [26,]  801  410  874  355  246  867  774  807  921   593 #>   [27,]  622  825  393  451  293  237  150  525  272   138 #>   [28,]  245  395  247  506  173  236  460  161  563   438 #>   [29,]  910  260  222  154  596  810   66  581  870   902 #>   [30,]  812  217  815  211  565  785  580  648  840   699 #>   [31,]  276  492  257  291  253  799  551  525  975   738 #>   [32,]  835  576  232  719  871  403  888  842  480   108 #>   [33,]  477  526  171  813  562  403  264  260  373   185 #>   [34,]   69  778  693  268  596  181   80  239  901   541 #>   [35,]  262  571  990  307  946   99  123  522  448   958 #>   [36,]  278  565  300  594   62   37  407  312  455   785 #>   [37,]  762  191  634  312  455  594  565  785   36   278 #>   [38,]  708  466  463  126  199   56  381   65  736   802 #>   [39,]  200  145  713  814  533  377  433  569  194   427 #>   [40,]  624  655  235  229  558  397  694  464  743   642 #>   [41,]  296  705  166  401  721  402  230  215  280   346 #>   [42,]  775  950  657  849  204  552  184  598  832   482 #>   [43,]  516  251  345  242  994  546  545  612   53   754 #>   [44,]  929  221  473  468  534   88  730  900  503   224 #>   [45,]  894   85  441  511  184  327   12  269  956   914 #>   [46,]  603  269  956  766  127  441  656  437  183   751 #>   [47,]  586  992  596   48  239  682  391  374  721    29 #>   [48,]  391  682  268  778  399  238   69   47  596   349 #>   [49,]  808  669  488  715  183  833  250  766  791   976 #>   [50,]   20  408  512  494  462  535  333  637  767   627 #>   [51,]  744  445  679  316  212  732  770   14  371    64 #>   [52,]  986  605  318  967  912  737  539  862  532   343 #>   [53,]  737  532  242  517   43  605  986  623  443   516 #>   [54,]  373  827  231  336  334    4  354  859   80   602 #>   [55,]  215  190  717  139  568  829  515  816  530   402 #>   [56,]  736  802  720  164  997  466  405  961  422   860 #>   [57,]  458  340  216  790  599  578  570  567  821   388 #>   [58,]  650  355  434  148  383  410  331  314  400   993 #>   [59,]  190  705  515  402  829  215  942  230   55   925 #>   [60,]  609  982  203  324  315  664  411  351  853   795 #>   [61,]  160  683  349  820  815  275  428  565   30   504 #>   [62,]  594  785  278   36  328  298  220  528  115   996 #>   [63,]  926  366 1000  546  595  818  437  771  345   754 #>   [64,]  114  316  168  644  517  689  445  674   51   255 #>   [65,]  727  126  463  258  199  776  736  531  928   422 #>   [66,]  154  830  910  539   29  870  810  544  757   222 #>   [67,]  521  671  935  569  238   24  575  662  713   176 #>   [68,]  277  904  654  985  897  219  592  513  325   987 #>   [69,]  778   34  693  268  596   80  901  239   48   349 #>   [70,]  171   95  507  618  249  108  541  430  222   260 #>   [71,]  282  319  777  764  111  661  844   15  907   244 #>   [72,]  470  865  819  498  435  424  230  198  228   883 #>   [73,]  660  256  122  837  882  642  432  452  457   739 #>   [74,]  907   16  281  764  472  661  634  473  107   508 #>   [75,]  469  621  369  134  481  903  806  845  849   787 #>   [76,]   11  396  121  120  927  102  254  199  828   502 #>   [77,]   24  780  310  210  992  959  104  586  403   955 #>   [78,]  100  252  891  208  393  772  223  673  825   640 #>   [79,]  752  514  493  111  533  213   15  377  500   182 #>   [80,]  859  601  354  620  336  231  827  268  573    69 #>   [81,]  668  585  109  573  638  292  820  859  300    80 #>   [82,]  225  238  625  268  317  620  602  859  347   142 #>   [83,]  898  348   87  466  208  223  536  673  736   131 #>   [84,]  840  924  292  648  638  745  803  109  585   144 #>   [85,]   45  894  983  425  511  184  793  914  775   101 #>   [86,]  667  152  911  670  415  419  932  449  130   556 #>   [87,]  208  673  131  536  891  720  637   78  362   201 #>   [88,]  468  929  416  984  224  167  321   44  503   680 #>   [89,]  507  102  871  386  396  489  480  828  719   970 #>   [90,]   97  630  451  896  524  392  263  311  794   622 #>   [91,]  717  816  181  867  747  240  681  132  763   220 #>   [92,]  264  955  185  254  403  477  465  171  773    33 #>   [93,]  124  265  774  287  873  412  119  588  582   964 #>   [94,]  653  123  323  579  783  606  863  297  482   906 #>   [95,]  581   70  970  636  973  618  222  507  902   480 #>   [96,]  388  216  202  458  356  739  180  195  758   718 #>   [97,]   90  896  451  639  622  630  272  524   21   263 #>   [98,]  483  439  155  186  718  394  537  749  170   555 #>   [99,]  522  441  626   46  511  269  307  930  914    45 #>  [100,]  850  393  640  779  748   78  765  665  755   378 #>  [101,]  843  983   85  425  218    8  427  590  493   793 #>  [102,]   89  507  927  828  386  502  396  465  871   162 #>  [103,]  590  731  687  368  699  899  144  460  271   980 #>  [104,]  163  280  721  296  992   82  586   77  391   149 #>  [105,]  845  363  723  134  811  120  809  621  382   600 #>  [106,]  198  228  380  153  156  288  577  722  499   176 #>  [107,]  614  294  156   16  288  907  698  920  111   281 #>  [108,]  193  232   70  636   95  547  842  260   29   480 #>  [109,]  585  668   81  803  638  292   84  793  924   488 #>  [110,]  628  524  861  121  794  283  199  738  396   970 #>  [111,]  514  319   71  647  661  288  920   79  213   752 #>  [112,]  248  732  212  371  697  679  750  807  999   400 #>  [113,]  421  290  685  474  553  118   25  665  378   753 #>  [114,]  689   64  644  568  316  816  951  518  759   168 #>  [115,]  589  762  594  528  704  839  846  785   62    37 #>  [116,]  761  333  366  818  545  177 1000  716  439   512 #>  [117,]  733    9  299  489  386  855  162  828  169   847 #>  [118,]  685  421   25  290  792  553  440  753  113   804 #>  [119,]  137   93  414  326  378  124  339  964  265   774 #>  [120,]  363  105  811  382   76  927  723  311   17   121 #>  [121,]  199  828  463  396  927  102  733  531  126   386 #>  [122,]  256  882   64  837  445  517  660  623  532    53 #>  [123,]   94  653  571  323   35  579  482  783  897   950 #>  [124,]   93  856  755  412    1  339  528  774  265   588 #>  [125,]  932  192  431  306  557  670  746  415  495   933 #>  [126,]  463   65  199  733  117  274  776  855  828   121 #>  [127,]  742   46  226  751  437  771  603  496  651   872 #>  [128,]  647  329  319  876  980  300  731  939  699   979 #>  [129,]   18  937  149  459  160  446  900  688  533   671 #>  [130,]  667  306  706  484  821  718  415  782  195   449 #>  [131,]  720   87  891  362  637  233  673  997  879   234 #>  [132,]   91  639  717  816  374  240  272  759  181   867 #>  [133,]  510   13  420  895  678  125  946  513  571   307 #>  [134,]  845  621  369  105  469  317  811  723  600    75 #>  [135,]  839  589  948  389  476  191  917  455  151     7 #>  [136,]  150  608  943  674  293  364  690   27  255   696 #>  [137,]  119  588  385   93  538  339  265  964  635   414 #>  [138,]  525  765  266  205  237  252  799  931  886   291 #>  [139,]  530  717  301   55  763  568  816  639  675    91 #>  [140,]  740  261  919  409  973  478  629  921   17   593 #>  [141,]  352  453  798  487  711  610  270  875  646   157 #>  [142,]  712   17  347  225   82  409  988  756  728   625 #>  [143,]  417  561  429  559  273  675  139  339  680   869 #>  [144,]  438  418  590  924  952  833  455   84  103   987 #>  [145,]  427  533  500  377   15   79  700  884  188   684 #>  [146,]  574  249  773  430  543  376  813  930  871   327 #>  [147,]  612  516  255  744   43  690  229   14  330   789 #>  [148,]  434   58  650  715  833  355  993  974  697   300 #>  [149,]  163  459  937  848  428  347  160  391  503   625 #>  [150,]  136   27  293  454  622  825  608  451  393   674 #>  [151,]  831  619  839  873  666  209  389  917  207   135 #>  [152,]   86  670  911  667  884  419  932  556  415   125 #>  [153,]  584  335  156  106  294  107  198  577  380   179 #>  [154,]  810   66  910   29  544  260  870  222  539   652 #>  [155,]  394  703   98  830  862  177  358  537  170   295 #>  [156,]  107  288  294  380  920  577  614  698  868   965 #>  [157,]    5  875  611  141  487  270  743  519  966   800 #>  [158,]  915  681  934  302  747  181  996  286  243   278 #>  [159,]  729  716  851  637  786  253  969  720  597   359 #>  [160,]  275  428  459   61  683  900  503  937  349   848 #>  [161,]  781  173  563  227  332  788  797  974  805    28 #>  [162,]  386  342  376  169  733  502  117  828  489     9 #>  [163,]  149  721  104  937  848  391  459  424  883   346 #>  [164,]  872  405  496  817  422  259  860  976  855   879 #>  [165,]  748  874  237  973  266  801  919  765  581   593 #>  [166,]  401  728  296  559  263  988  280  347  756   721 #>  [167,]  826  416  984  561   88  566  429  328  468   321 #>  [168,]  623  517   64  971  881  909  674  644  724   114 #>  [169,]  376  162  386  342  847  337  733  489    9   531 #>  [170,]  186  658  822  537  555  155  912   98  244   706 #>  [171,]   70  465  403  477   33  185  871  507  813   574 #>  [172,]  836  769  902  444  581  222  994  314  909   540 #>  [173,]  161  563  227  781  974  267   28  607  332   788 #>  [174,]  851  289  462  512  694  627   20  516  690    50 #>  [175,]  448  254  523  262  338  475  890   92  906   626 #>  [176,]  575  521  713  671  399  182  935  200  406   920 #>  [177,]  545  116  333  358  394  677  242  761  749   155 #>  [178,]  760  732  212  112  792  440  248  583  996   807 #>  [179,]  461  584  882  698  243  942  730  644  498   190 #>  [180,]  757  652  971  388  881  830  810   66  154   193 #>  [181,]  747   91  867  239  240  693  302  816  681   717 #>  [182,]  406  752  713  820  367  493  176   54  575    79 #>  [183,]  715  766  976  496  313  993  847  808  956    46 #>  [184,]  894   45  793   12  327  441   85  939  511   775 #>  [185,]  465  264  955  403   92  171  602  477  502   254 #>  [186,]  555  170  761  822  818   98  483  491  893   658 #>  [187,]  796  735  531  989  938  787  928  591  169   776 #>  [188,]  436  500  907   16  884  764   15   71  514   684 #>  [189,]  555  431  893  746  196  186  353  483  495   457 #>  [190,]   55  730  215  515   59  689  402  301  179   341 #>  [191,]  762   37  529  589  115  846    7  634  135   594 #>  [192,]  933  236  460  822  932  491  244  731  734   563 #>  [193,]  232  108  257  636  931  480  842   32   95   835 #>  [194,]  241  981  834  200  357  575  841  752  213   182 #>  [195,]  483  343  718  706  295  986   98  196   52   555 #>  [196,]  189  737  986  555  457   53  542  242  483   195 #>  [197,]  452  944  495  556  432  670  542  614  486   557 #>  [198,]  228  819  470  424  435   72  883  965  577   498 #>  [199,]  121  463  828  126  733   65  117  531  396   727 #>  [200,]  713  194  176  377  569  671  575  182  514   533 #>  [201,]  701  364  696  851  208  253  551   87  673   690 #>  [202,]   96  881  388  180  608  878  320  216  677   696 #>  [203,]  795  324  609   19   60  664  960  922  321   308 #>  [204,]  598  775  657  218  418  592  344  438  425   952 #>  [205,]  266  789  765  769  892  400  138  251  331   874 #>  [206,]  760  634  267  732  476  248  692  999  178   112 #>  [207,]  520  858  404  725  619  209  287  791  873   788 #>  [208,]   87  673  536   78  891  131  252  291  201   772 #>  [209,]  839  725  520  619  207  287  404  151  858   833 #>  [210,]  995  780   24  403  570   77  264  477  526   916 #>  [211,]  217  812   30  309   10  700  580  361  815   684 #>  [212,]  371  732  112  679  248  892   14  440  178   372 #>  [213,]   15  777  357  329  983  752  282  111  957    79 #>  [214,]  440  371  892   14  400  520  330  858  404   999 #>  [215,]  402  230   55  865  190  498   72  132  717   341 #>  [216,]  388  458  295  652   96  578  180  718  830    57 #>  [217,]  211  812  309   30  361  580   10  815  191   700 #>  [218,]  425    8  344  204  775  598  101   85  590   843 #>  [219,]  853   68  482  897  552  904  592  982  806   615 #>  [220,]  246  298    1  681  763  328  856  922  412    62 #>  [221,]  473   44  762  929  529  312  191  534  361    74 #>  [222,]  581   29  902  910  541  596  836  172  618    95 #>  [223,]  233  613  362  234  378  941  527  891  772   997 #>  [224,]  503  962  960  416  900   88  984  459  468   308 #>  [225,]   82  238  268  625  859  620  347   80  602   682 #>  [226,]  313  976  127  496  771  872  183    9  535   855 #>  [227,]  974  788  173  725  332  404  161  754  797   267 #>  [228,]  198  819  424  883  470   72  435  641  106   722 #>  [229,]  624  655  516  999  558  345  235  147   43   464 #>  [230,]  402  215  865   72  470  498  942  925  721   819 #>  [231,]  336  827  373  354  945   54  601  939   80   334 #>  [232,]  193  108  842   32  936  257  835  888  260   652 #>  [233,]  362  997  234  223  891  259  879  797    2   788 #>  [234,]  362  259  233  891  997    2  252  223  422   767 #>  [235,]  624  384  397  229  655  792  464   40  206   954 #>  [236,]  506  460  963   28  895  563  192  245  395   368 #>  [237,]  165  748  272  636  525  266  759  765  902   138 #>  [238,]  225   82  620  682  602   48  268  859   80   601 #>  [239,]  693  596  915  181   69   47  901  778  498    34 #>  [240,]  867  747  801  816  372  759   91  181  779   874 #>  [241,]  981  885  841  357  334  575  549  194  945   784 #>  [242,]  545   43  358  862  177  761  677  737  116    53 #>  [243,]  644  918  915  302  965  498  698  544  365   158 #>  [244,]  933  282  777  844  449  822   71  319  170   495 #>  [245,]   28  395  875  236  563  247  173  800  161   460 #>  [246,]    1  220  867   26  412  919  921  298  856    34 #>  [247,]  395  985  325  987  823   28  438  952  418   245 #>  [248,]  112  732  697  212  807  999  750  371  679   754 #>  [249,]  430  146  574  376  813  354  171  632  507   489 #>  [250,]  550  791  669   49  798  808  964  509  422   928 #>  [251,]  994  789   43  540  345  769  754  546  205   909 #>  [252,]  259  891  494  234  291  274  138  765    2    78 #>  [253,]  729   31  551  320  276  799  201  696  408   159 #>  [254,]   92  955  502  465  264  185  871  773  719   403 #>  [255,]  640  284  892  293  943  674   14  330  789   316 #>  [256,]  122  660  882  623  837  532   53  517   73   737 #>  [257,]  276  931  975  193  480  283  108  232  636    31 #>  [258,]  727  560  531   65  905  863  600  796  187   787 #>  [259,]  234  252  891  494  362  164  997  535    2   817 #>  [260,]  910   29  154  916  810   33   70  222  596   682 #>  [261,]  140  740  919  988  409  311  973   17  921   707 #>  [262,]  958   35  338  522  990  616  548  279  448    99 #>  [263,]  988  311  728  261  166  310   17  559  140   296 #>  [264,]  955   92  185  477  403  780   33  465  171   254 #>  [265,]   93  774  582  964  423  287  873  791  591   619 #>  [266,]  765  205  769  138  165  886  789  748  874   525 #>  [267,]  974  173  833  227  455  687  476  206  607   563 #>  [268,]  778  349  625   48   69  225   80  859   34   347 #>  [269,]  956   46  656  914  603  766  441  360   45   894 #>  [270,]  948  917  654  141  325  389  151  277  831   379 #>  [271,]  777  899  282  731  557  508  699  103   71   764 #>  [272,]  237  759  165  919  748  240  779  801  393   622 #>  [273,]  635  339  137  588  315  143  119  412  429    21 #>  [274,]  861  970  748  973  252    2  126  765  291   313 #>  [275,]  428  160  286  848  341  349  459  322   61   504 #>  [276,]  257  975   31  931  940  799  878  320  480   617 #>  [277,]   68  654  413  513  985  897  325  904  247   987 #>  [278,]  594  312   36  565   62   37  407  785  996   158 #>  [279,]  958  940  633  888  338  567  742  522  651   597 #>  [280,]  104  166  296  263  756  988  310  142   82    77 #>  [281,]  710  472  844  443   74  698  686  978  365   907 #>  [282,]  777   71  244   15  319  271  213  449  111   844 #>  [283,]  738  923  492  257  695  628  975  794  193   276 #>  [284,]  640  255  330  293   14  779  744  892  674   421 #>  [285,]  672  508  473  309  877  972  217  557  500   884 #>  [286,]  341  915  275  848  965  428  498  424  158   322 #>  [287,]  873  619  265  520  209  207   93   26  582   858 #>  [288,]  957  920  156  380  111  514  868  834  357   107 #>  [289,]  627  462  637  851   50   20  690  767  512   362 #>  [290,]  553  113   25  421  685  118  646  772  666   378 #>  [291,]  252  617  861  525  274  138  628   31  494    78 #>  [292,]   84  840  924  638   81  109  648  585  793   820 #>  [293,]  640  255  674  284  622  943  393   27  779   759 #>  [294,]  614  107  156  967  153  556  698  432  335   318 #>  [295,]  718  838  155  706  821  394   98  195  830   703 #>  [296,]  721  586  992   47  166  310  104  402  988   374 #>  [297,]  906  809  606   11  783  579  381  863  448   258 #>  [298,]  922  220  328   62  691  960  246  763  681   984 #>  [299,]    9  117  543  733  489  496  847  386  860   226 #>  [300,]   36  980  820   81  148  565  128  407  292   833 #>  [301,]  530  387  139  816  730  717  681  763  568   675 #>  [302,]  372  934  679  747  158  316  996  918  243   750 #>  [303,]  860  961  802  989  496  360  872  669  598   571 #>  [304,]  629  385  478  591  593  409  774  921  383   776 #>  [305,]  436  188  884  911   16  500  499  377  145   684 #>  [306,]  130  483  706   98  415  667  449  431  186   555 #>  [307,]  360  895  914   99    8  425  269  571  479   218 #>  [308,]  846  962  321   23  795  416  115  191  762   390 #>  [309,]  217  211  361  812   30   23  962  191  683   700 #>  [310,]  707  311  988  794  811  261  403  263   82   102 #>  [311,]  988  310  794  261  263  707  140  740   17   409 #>  [312,]  278  594   37  565  634   36  762  361  661   785 #>  [313,]  976  855  226  496  183    9  554  422    2   776 #>  [314,]  410  769  434  400  750  874  331  836   58   172 #>  [315,]   60  609  203  273  982   19  411  351  588   370 #>  [316,]  679  372   51   64  302  540  445  212  644   114 #>  [317,]  621   82  225  369  811  134    4  142  625    17 #>  [318,]   52  605  539  544  912  757  532  577   66   698 #>  [319,]  647   71  128  111  661  844  282  329  777   876 #>  [320,]  729  551  799  878  408  749  716  633  940   177 #>  [321,]  308  416  795  846  929  962   88   23  203   224 #>  [322,]  504  965  920  901  915  693  365  918  544   275 #>  [323,]  783   94  606  653  123  523  890  906  579   297 #>  [324,]  375  795  203  960  691  609  768  390  962    60 #>  [325,]  247  985  823  948  395  654  987  135  952    28 #>  [326,]  414  378  964  119    2  774  385  593  629   941 #>  [327,]   12  930  894  441  511  337  184   45  626   945 #>  [328,]  416  681  220  984  298   62  856  528  594   922 #>  [329,]  549  128  939  647  752  979  357  319  980   885 #>  [330,]   14  440  892  371  214  212  640  284  255   744 #>  [331,]  400  410  874  314  858  850   58  750  650   434 #>  [332,]  788  404  227  464  161  725  966  173  974   781 #>  [333,]  116  545  512  716  177  761   20  408  366    50 #>  [334,]  827   54  231   12  945  939  373  241  327   511 #>  [335,]  584  153  294  179  967  882  758  942  156   107 #>  [336,]  231  827  354  373  945  601   80   54  813   939 #>  [337,]  342  376  354   12  327  847  169  938  668   249 #>  [338,]  567  790  968  949  279  522  888  599  930   773 #>  [339,]  124  635  119  588  137  273   93   21  412     1 #>  [340,]  995  570   57  599  210  790  505  852  562   526 #>  [341,]  286  848  915  424  498  883  275  819  965   239 #>  [342,]  376  337  162  502  169  386  847  938  465    12 #>  [343,]  195   52  706  986  967  170  449  356  295   758 #>  [344,]  218  425  598  418  204    8  987  506  438   360 #>  [345,]  754   43  251  546  999   63 1000  512  516   994 #>  [346,]  641  721  722  104  586  163  992  228  296   391 #>  [347,]  268  142  625  225  848  778  712   82  349   428 #>  [348,]  898  453  798  527  941  711  736  997  233   223 #>  [349,]  268  625  778  406  428  573   69   61  275    80 #>  [350,]  925  547  180  374  631  168  923  971  636   674 #>  [351,]  423  370  411  768  588  412  609  704  265   564 #>  [352,]  453  141  527  941  645  798  348  666  711   414 #>  [353,]  893  558  746  491  495  189  359 1000  467   818 #>  [354,]  601  336   80  231  337  827  859  602  373   249 #>  [355,]   58  650  434  410  148  314  383   26  331   993 #>  [356,]  758  967  986   52  757  343  195  318  737   623 #>  [357,]  957  549  981  885  241  841  834  868  329   213 #>  [358,]  862  444  545  177  909  994  242  830  677   394 #>  [359,]  447  761  491  818  716 1000  116  893  595   746 #>  [360,]  479  269  914  956  307  895  598  506  656   425 #>  [361,]  683  309  217  684  211  312   30  812   61   688 #>  [362,]  233  234  891  997  259  627  797  223  637   879 #>  [363,]  120  105  811  382   17  723  845  134  988   927 #>  [364,]  696  608  943  690  201  612   20  799  289   551 #>  [365,]  686  918  978  407  698  901  504  322  710   912 #>  [366,]  818  595 1000  926  116   63  761  333  437   651 #>  [367,]  638  824  406  292  493  573  481  375  182    81 #>  [368,]  103  460  590  899  418  438  687  506  144   731 #>  [369,]  134  621  845  411  370  317  806  768  481    75 #>  [370,]  411  768  351  423  691  609  369  913  412   591 #>  [371,]  212   14  892  440  112  732  214  330  999   248 #>  [372,]  302  679  750  747  316  212  240  996  807   934 #>  [373,]  231   54  336  813  354  945  827  334  601   602 #>  [374,]  547   29   47  132  636  222  596  108  902   724 #>  [375,]  691  324  960  367  840  785  745  638   18   648 #>  [376,]  342  162  337  386  169  249  146  465  489   502 #>  [377,]  514  533   79  500  436  200  684  145  288   176 #>  [378,]  414  326  941  527  223  850   93  119  665   520 #>  [379,]  398  977  389  917  664  270  566  666  948     7 #>  [380,]  577  288  834  156  957  868  852  106  357   198 #>  [381,]  448  463  733  297  802  162  117  199  860   121 #>  [382,]  811   11  927  105  363  502  120  572   76   254 #>  [383,]  582  650  478   58  488  593  776  355  774   928 #>  [384,]  235  954  397  792  624  118  655  229  642    51 #>  [385,]  560  304  538  591  964  265  582  998  564   928 #>  [386,]  162  376  489  507  169  733  828  342   89     9 #>  [387,]  301  501  770  753  934  534  530  730  372   954 #>  [388,]  216  458  180  652   96  757  202  830  356   232 #>  [389,]  917  135  839  948  589  151    7  977  831   115 #>  [390,]  589  991  580  211  664   23  741  324  785   309 #>  [391,]   48  992  268  586   47  399  238  778  848   349 #>  [392,]  110   90   97  896  120  630  524  263  363   709 #>  [393,]  622  825  100   27  640  293  272  748  237    78 #>  [394,]  155  177  830  358  703   98  545  749  862   439 #>  [395,]  247   28  245  460  506  987  368  325  236   823 #>  [396,]   89  719  102  828  121  386  871  507  199   162 #>  [397,]  235  519  384   40  624  792    6  655  118   917 #>  [398,]  379    7  389  917  604  566  846  804  589   135 #>  [399,]   48  521  870  575  916  682  391  322  336   176 #>  [400,]  331  410  314  750  874  769  112  434  248   697 #>  [401,]  166  559  728  705   41  639  139  263  829   417 #>  [402,]  215  230  721   72   55  865  498  424  341   819 #>  [403,]  171  185  477  264   92   33   70  465  955   707 #>  [404,]  725  788  858  520  332  207  227  974  209   214 #>  [405,]  872  817  164  456  496  969  226  879  860   616 #>  [406,]  349  820  182  859  625  573   80  367  827   268 #>  [407,]  978  686  365  901  504  918   36  300  278   661 #>  [408,]   50  551   20  799  333  494  878  716  696   512 #>  [409,]   17  140  649  478  572  740  261  304  629   919 #>  [410,]  874  314  750  331  400  355   26  801   58   434 #>  [411,]  370  768  351  423  609  913  369  806  691   591 #>  [412,]  423  588    1  351  246   93  265  124  220   856 #>  [413,]  800  866  610  654  277  487  711  395  961   985 #>  [414,]  941  527  378  964  326  119   93  265  223   207 #>  [415,]  449  667  932  213  777  306  282  244   15   706 #>  [416,]  984  328  224  308   88  321  167  922  795   826 #>  [417,]  561  429  143  559  139  530  984  763  167   675 #>  [418,]  952  438  987  592  144  590  204  368  344   247 #>  [419,]  911   86  556  343  667  130  152  670  195   449 #>  [420,]  395  245  460  236   28  963  506  247  611   368 #>  [421,]  685  113  553  290  118  665  753  330  440   474 #>  [422,]  669    2  855  928  976  776  164  313  808   997 #>  [423,]  412  351  588  265  370  411  591  768   93     1 #>  [424,]  819  883  228  341   72  470  198  498  286   965 #>  [425,]    8  218  914   85  590  344  734  204  101   360 #>  [426,]  615  903  824  657  552  204  775  741  481   592 #>  [427,]  843  101   79  145   15  493  533  983  500   752 #>  [428,]  275  160  848  349  459  778  286  625  268    61 #>  [429,]  417  561  984  763  922  826  328  220  298   167 #>  [430,]  249  146  574  554  489  632  543  507  480    70 #>  [431,]  746  189  893  555  353  483  491  457  306   196 #>  [432,]  452  614  197  542  281  944  495  294  556   472 #>  [433,]  426  824  741  427   10  615  903  700  843   702 #>  [434,]   58  355  650  148  314  993  410  715  400   331 #>  [435,]  470   72  865  577  198  819  810  544  498   965 #>  [436,]  188  500   16  907  514  684  377  764  111   499 #>  [437,]  751  658  537  742  603   46  771  926   63   979 #>  [438,]  418  144  987  952  590  247  592  368  204   506 #>  [439,]  749   98  483  450  116  761  716  177  555   651 #>  [440,]  214  371   14  330  212  178  892  732  112   999 #>  [441,]  894   45  327   46  269   12  956  511  184   766 #>  [442,]  539  912  870  647  836  862  868  979  901   978 #>  [443,]  532  445  698  517  281  605  710   53  365   737 #>  [444,]  886  172  358  994  862  836  909  771  830   703 #>  [445,]   51  443  316  517  679  770  532  710  644   302 #>  [446,]  587  676   18  129   19  960  375  149  691   324 #>  [447,]  595  491  926  818 1000  366  359  761  822   656 #>  [448,]  381  626  162  342  930  502  386  376  522   299 #>  [449,]  244  282  415  170  213  706  777  556  957   319 #>  [450,]  439  749  716  729  116  177  320  483  761   359 #>  [451,]  622   27  825   97  393   90  272  150  454   524 #>  [452,]  197  432  944  542  556  495  614  281  472   294 #>  [453,]  798  352  348  711  941  527  141  550  487   414 #>  [454,]  864  497  293  284  150  474  518  622  393   640 #>  [455,]  833   37  648  144  565  267   36  580  785   634 #>  [456,]  817  405  969  797  872  879  535  462  603   781 #>  [457,]  196  542  189  431  746  739  893  353  432   737 #>  [458,]  216  388   57   96  295  652  356  718  757   180 #>  [459,]  503  900  937  160  428  848  275  149  224   286 #>  [460,]  368  236  506  103  395   28  899  192  687   731 #>  [461,]  179  698  534  882  443  837   74  445  243   770 #>  [462,]  627  637  512  767  797   50  289  535  456    20 #>  [463,]  199  126   65  121  733  727  117  828  531   381 #>  [464,]  332  227  743  404  966  999  624  646  788   267 #>  [465,]  185  502  171  507  602  871  376  773  342   102 #>  [466,]  736   56   65   38  727  463  126  802  887   898 #>  [467,]  563  692  558  476  267  173  899  607  245   353 #>  [468,]   88  984   44  416  503  730  224  929  167   900 #>  [469,]   75  787  845  796  600  849  806  134  621   369 #>  [470,]   72  819  435  865  498  198  424  228  965   544 #>  [471,]  854  991  982  904  853  664   60  390  977   203 #>  [472,]  281  710  844  692   74  944  634  206  495   443 #>  [473,]  221  672   44   74  361   16  529  929  309   762 #>  [474,]  113  497  421  753  685  454  869  864  665   518 #>  [475,]  780  570  955  210   92  264  599  254   24   175 #>  [476,]    6  267  206  135  972  467  877  529  899   634 #>  [477,]   33  526  171  264  403  813   92  185  562   955 #>  [478,]  629  593  383  776  140  740  304  409  921   973 #>  [479,]  360  506  956  269  656  963  438  895  344   598 #>  [480,]  835  871  507   89  489  543  975  719  430   888 #>  [481,]  832  849    4  638  367  938   42  803  369   657 #>  [482,]  653  552  598   42  897  615  657  204  849   775 #>  [483,]   98  439  555  195  186  718  450  189  155   749 #>  [484,]  821  949  841  306  706   99  130  968  415   734 #>  [485,]  538  898  645  137  550  348  385  887  453   564 #>  [486,]  944  508  692  877  472  557  495    6  529   476 #>  [487,]  711  610  800  726  413  798  141  453  866     5 #>  [488,]  808  383  591  582  803  585   49  650  509   109 #>  [489,]    9  386  507  543  117  299  733  430  554   376 #>  [490,]   23  929  962  321  308   88  846  224    3    44 #>  [491,]  447  822  818  595  926  893  933 1000  359   761 #>  [492,]  738  923  283   31  257  628  276  291  861   975 #>  [493,]  793  752  292   79  367  824  843  820   84   840 #>  [494,]   50  259  535  408  252  551  226  637  886   617 #>  [495,]  944  844  692  353  558  197  893  244  472   189 #>  [496,]  872  183  860  164  855  226  313  976  847   405 #>  [497,]   21  864  518  755  454  474  665  779  753   568 #>  [498,]  965  865   72  819  470  915  544  341  424   243 #>  [499,]  160  900  937  436  920  683  275  514  684    16 #>  [500,]  188  436   15  514  684  764   79   71  907   111 #>  [501,]  387  954  583  804  753  770  566  826  384   118 #>  [502,]  465  342  927  162  386  376  102  254  185   572 #>  [503,]  900  459  224  160  428  683  275  848  937   960 #>  [504,]  322  920  407  901  365  686  965  647  275   918 #>  [505,]  834  852  200  194  380  981  957  935  106   575 #>  [506,]  236  479   28  460  963  895    8  368  360   395 #>  [507,]   89  871  102  386  489   70  465  480  171   376 #>  [508,]  877  764  557  972  271  486  899  634  907   944 #>  [509,]  913  998  564  745  791  488  768  803  591   806 #>  [510,]   13  895  307  963  571  946  786  133   22   866 #>  [511,]   45  894  327   12  930  968  441   85  626   334 #>  [512,]  333   20  462   50  116 1000  366  345  767   627 #>  [513,]  277  897   68  413  985  654  344  592  325   247 #>  [514,]  111  377   79  288  920  752  500  436  533    61 #>  [515,]  829   55  190  705   59  139  675  953  301   530 #>  [516,]   43  345  229  147  612  242  251   53  558   512 #>  [517,]  532  623  443  168  445  644   53   64  316   737 #>  [518,]  864  568  497  114  951  753  689  816  454   284 #>  [519,]  397  235  917  157  141  384   40   25  118     6 #>  [520,]  858  207  404  725  209  287  214  331  619   788 #>  [521,]  935  575  852   67  399  176  916  562   48   391 #>  [522,]   99  626  930  441   46  299  127  543  511   279 #>  [523,]  890  323  175  783  606  906   94  880  814   297 #>  [524,]  861  740  973  628  748  629  110  970  140   237 #>  [525,]  138  765  237  266  931  291  274  799  970   748 #>  [526,]   33  562  477  813  916  838  936  171  260   599 #>  [527,]  941  414  378  223  798  453  348  964  352   326 #>  [528,]  856  996  287  115  328  178  826  124  807    62 #>  [529,]  762  191    7  634   37  476  206  972  221   135 #>  [530,]  301  139  763  717  681  816   55   91  568   984 #>  [531,]  187  169  735  733  776  989  928  828  258   796 #>  [532,]  517  443   53  623  605  737  318   52  986   698 #>  [533,]  377   79  684  700  514  145  500  688   61   182 #>  [534,]  770  730  461  934  221  387   44  158  837   445 #>  [535,]  767   50  797  771  494  226  259  627  462   976 #>  [536,]  208   87  673   83  201  131   78  891  720   291 #>  [537,]  658  751  979  437  742  703  651  155  170    46 #>  [538,]  385  564  560  964  550  998  137  791  643   485 #>  [539,]  912  442  862   66  605  318  870  836  358   978 #>  [540,]  769  994  251  172  789  316  750  314  697   909 #>  [541,]  618  222  632  596  601  836  554  581  620    70 #>  [542,]  432  457  452  196  189  556  197  614  495   195 #>  [543,]  299  146  489  574  871  386    9  480  773   835 #>  [544,]  154  965  498  810  318  322  865   66  243   918 #>  [545,]  177  242  333  116  677  358  761  862  366   818 #>  [546,]   63  754  345  697  876  607  994  978  926  1000 #>  [547,]  374  636  108   29  902  971  222  724  910   581 #>  [548,]  576  719  975  616  708  396  381  958  262   543 #>  [549,]  329  885  357  979  647  868  841  939  128   957 #>  [550,]  250  538  887  791  798  964  669  711  560   564 #>  [551,]  799  408  696  320  878  494   50   20  729   138 #>  [552,]  657  592  803  924   42  204  482  952  987   598 #>  [553,]  290  421  772  646  685  118  613  113  440    25 #>  [554,]  430  632  313  489    9  541  249  169  618   993 #>  [555,]  186  761  893  189  483  818  439  170  822   491 #>  [556,]  614  670  197  911  449  452  107  294  542   282 #>  [557,]  508  271  877  972  899  486  944  932  777   764 #>  [558,]  353  692  655  893  467  229  624  495  516   345 #>  [559,]  728  166  763  139    1  417   21  429  712   263 #>  [560,]  385  600  258  998  796  538  787  727  591   643 #>  [561,]  417  429  167  984  143  530  680  826  416   763 #>  [562,]  526   33  981  477  813  838  852  945  241   885 #>  [563,]  173  161  467  607  236  781   28  267  245   227 #>  [564,]  538  913  998  509  791  385  964  806  265   591 #>  [565,]  815   36   30  312  661   37  278  300  699   455 #>  [566,]  804  826  583  115  167  846  528  501  308   321 #>  [567,]  338  888  790  576  279  578  835  599  773   936 #>  [568,]  518  816  114  717  639  139   55  689  864   951 #>  [569,]  713  671   67  200  814  182  662  176  521   575 #>  [570,]  599  790  526   92  264  562  477  784   33   955 #>  [571,]  307  303  961   35  866  360  598   22  123   950 #>  [572,]  649  927  811  602  409   17  502  938  707     4 #>  [573,]   81  859  638  625   80  349  668  406  268   585 #>  [574,]  146  773  249  430  543  871  813  171  835   930 #>  [575,]  521  176  834  981  852  399  241  357  935   562 #>  [576,]  719  835   32  888  567  975  480  871  548   543 #>  [577,]  380  435  318  156  198  470  544  810  868   757 #>  [578,]  567  279  576  888  940  958  338  216  276   936 #>  [579,]  863  905  297   94  606  258  809  906  783   381 #>  [580,]  812   30  648  823  211  217  840  455  144    10 #>  [581,]  902  222   95  172  636  541  618  836  165    29 #>  [582,]  774  383  265  488  650  591  593  964   58   928 #>  [583,]  804  760  954  792  178  528  566  206  762   115 #>  [584,]  335  153  179  942  435  294  156  461  470   198 #>  [585,]  109  668   81  803  638  292  488   84  924   573 #>  [586,]  992   47  721  916  391   48  296  682  238   399 #>  [587,]  446  676   18  129  317   19  375   75  149   691 #>  [588,]  412  423  351  265   93  137  124    1  339   370 #>  [589,]  135  115  839  191  762  389   37  846  785     7 #>  [590,]  103  368  438  418  144  425  731    8  793   687 #>  [591,]  488  383  582  385  998  265  304  423  187   796 #>  [592,]  952  987  418  552  438  985  204  657  598   924 #>  [593,]  629  921  478  774  383  850  582   26  748   874 #>  [594,]  278  312   62  785   36   37  115  762  328   996 #>  [595,]  926 1000  818  447  366   63  761  437  491   116 #>  [596,]  693  682  222   69  239  618  541   29   47    48 #>  [597,]  969  651  751  742  633  990  456  958  749   279 #>  [598,]  204  775  344  360  218   42  657  987  418   592 #>  [599,]  570  790  562  526  784  567  880  338  477   949 #>  [600,]  643  560  845  796  787  723  998  806  258   469 #>  [601,]   80  354  620  859  336  602  682  231  618   541 #>  [602,]  620  601  354  465  185  859  238  649  572     4 #>  [603,]   46  656  956  269  766  437  127  183  751   926 #>  [604,]  954    7  947  398  529  384  486  397  672   501 #>  [605,]   52  912  532  986  539  318  862  443  737   242 #>  [606,]  906  783  297  809   11  579   94  890  469   323 #>  [607,]  876  822  926  933  687  173  595   63  563   546 #>  [608,]  943  696  364  136  799  674  881  612  878   293 #>  [609,]   60  351  411  370  203  982  768  664  324   795 #>  [610,]  800  711  413  487  798  654  866  250  805   332 #>  [611,]  875    5  245    6  157  467  420  743  464   563 #>  [612,]  677  147   20   43  251  943  516  789  696   255 #>  [613,]  223  772  233  646  362  553  673  694  941   891 #>  [614,]  294  107  556  432  156  281  452  698  907   443 #>  [615,]  426  903  204  482   42  775  552  657  592   598 #>  [616,]  299  405  617  958  969  860  522  872  279   802 #>  [617,]  291  494  975  616  252  274  259  299  117     9 #>  [618,]  541  596  601  222  620   70   95  682  581   554 #>  [619,]  873  831  151  287  207  839  209  791  265   704 #>  [620,]  601  682  602   80  859  238  707  618  354   225 #>  [621,]  134  369  317  845   75  469  811  105  481     4 #>  [622,]   27  825  393  451  293  272  237  150  640   100 #>  [623,]  517  532  168   53  737  443  318  967  605    64 #>  [624,]  229  235  655  558  464  999   40  516  384   345 #>  [625,]  268  349  225  573  347  406  778   82  859   428 #>  [626,]  930  522   12  327  511  441   99  968  448   773 #>  [627,]  462  767  797  289  637  362  535  512   50    20 #>  [628,]  861  970  110  524  274  199  291  828  121   973 #>  [629,]  593  478  921  304  740  774  748  383  919   973 #>  [630,]  923   90  738  283   97  110  451  794  492    27 #>  [631,]  842  652  547  232  180  210  810  995  260   108 #>  [632,]  993  836  554  541  430  771  434  249  314   618 #>  [633,]  651  940  742  749  751  177  116  127  969   703 #>  [634,]   37  312  206  565  529  661  764  762  455   191 #>  [635,]  273  339  137  119   21  588    1  412  304   559 #>  [636,]  902  581   95  237  108  547  193  931  222   970 #>  [637,]  462  627   50  289  494  851  362  891  259   456 #>  [638,]  292  803   84   81  109  585  367  924  840   573 #>  [639,]  132  568  717  139   55  816   91  272  559   728 #>  [640,]  779  255  284  892  293  100  330  205  393   789 #>  [641,]  346  722  721  228  586   72  470  819  198   424 #>  [642,]  655  229  624  558  516  692  384  472  235   944 #>  [643,]  600  560  806  723  998  845  538  385  913   564 #>  [644,]  243  302  316  114  517   64  918  724  445   689 #>  [645,]  352  666  453  538  414  137  564  485  964   831 #>  [646,]  404  214  520  553  332  613  464  223  788   207 #>  [647,]  319  128  329  442  549  868  111  912  876   979 #>  [648,]  840   84  785  745  924  292  455   30  580   144 #>  [649,]  572  409  602  927  811   17  620  938  169   859 #>  [650,]   58  355  434  148  383  582  410  331  400   314 #>  [651,]  633  751  742  749  366  437  116  597  969   537 #>  [652,]  757  810   66  154  936  180  830  910  838   260 #>  [653,]  482   94  123  897  615   42  598  323  863   579 #>  [654,]  277  985  610  325   68  413  800  247  711   250 #>  [655,]  642  624  558  229  692  235   40  516  353   384 #>  [656,]  603  269  956   46  766  914  926  437  607   479 #>  [657,]  552   42  204  803  924  775  592  793  598   418 #>  [658,]  537  979  437  876  751  926   63  822  170   549 #>  [659,]  951  689  953  515  675  387  190  301  518   829 #>  [660,]   73  256  122  882  837  739  642   53  737   623 #>  [661,]  764  907  565   71  319  815  111  699  634   407 #>  [662,]   67    4  955  569   24  780   54  238   82   373 #>  [663,]  678  702  513  344  433  218  427  368  952   418 #>  [664,]  977  704  795  609  390  203  982  589  324    60 #>  [665,]  755  779  850  100  124  685  421  378  874   331 #>  [666,]   25  151  873  831  619  941  414  527  839   520 #>  [667,]  130  415   86  306  449  706  932  670  911   556 #>  [668,]  585  109   81  573  859  803  638  337   80   354 #>  [669,]  422  808  928   49  976  250  855    2  164   496 #>  [670,]  884  556  911  932  282  197  777  449   15   244 #>  [671,]  569  713   67  176  521  200  182  935  391   575 #>  [672,]  473  285  221  947   44  529  490  309  929    16 #>  [673,]   87  208  772  613  131  891   78  289  223   362 #>  [674,]  255  293  943   64  168  114  284  608  640   316 #>  [675,]  139  301  530  953  417  515  561  518  568   167 #>  [676,]   19  960  691  446  922  375  324  587  712   149 #>  [677,]  545  612  177  358   20  878  242  333  909   251 #>  [678,]  663  344  218  843  702  101    8  425  368   418 #>  [679,]  212  732  372  112  302  316  248  934   51   750 #>  [680,]   19  561   88  984  417  429  224  321  203   960 #>  [681,]  763  220  158  747  328   91  717  181  816   530 #>  [682,]  620  596   48  238  601   80  618  268   69   602 #>  [683,]  361  684   61  160  312   30  900  503  217   688 #>  [684,]  688  683  361  533    3  700  500  436  211   217 #>  [685,]  421  118  113   25  753  665  290  553  440   792 #>  [686,]  365  978  407  918  710  698  901  934  504   302 #>  [687,]  731  103  899  699  607  267  368  876  590   144 #>  [688,]    3  684  700  683  361  309  533  211   18   217 #>  [689,]  951  114   64  568  644  518  190   55  816   316 #>  [690,]  289  364  147  772  943  612  640  255  330   696 #>  [691,]  375  960  922  768  298  370  324  573  625   745 #>  [692,]  467  558  472  495  206  944  655  476  486   844 #>  [693,]  901   69  239  596   34  778  181  836  322   870 #>  [694,]  743  851  174  289  966  627  613  462  646   624 #>  [695,]  842  283  257  232   32  193  576  738  276   108 #>  [696,]  364  799  551  408  878   20  608  943  612    50 #>  [697,]  248  754  112  546  314  999  400  974  148   750 #>  [698,]  365  918  443  686  965  243  461  978  281   322 #>  [699,]  815  103  731  687  565  812  661   30  899   128 #>  [700,]   10  211  688  684  533  217  309    3  812    30 #>  [701,]  201  364  253  696  851  159  174  729  551   320 #>  [702,]  663  678  433  427  700  991  741  145  823   580 #>  [703,]  155  830  537  742  751  936  979  394  444   940 #>  [704,]  977  873  664  351  619  115  831  795  423   588 #>  [705,]  829  515   59  402   55   41  401  215  190   230 #>  [706,]  170  295  449  821  718   98  343  841  195   957 #>  [707,]  310  620  602  682   70  185  572  403  102   618 #>  [708,]   38  548  463  381  199  396  121  628  126    76 #>  [709,]  492  110  825  451  738  861  628  291  923    27 #>  [710,]  281  472  978  686  844  443  365  546  445   407 #>  [711,]  487  798  610  453  800  348  413  550  250   654 #>  [712,]  142   17  756  347  728  298  246  370  922   409 #>  [713,]  569  671  200  182  176   67  575  194  814   521 #>  [714,]  484  338  821  790  782  130   35  968  880   175 #>  [715,]  183  766  993  148  976  434  956  808   58   650 #>  [716,]  749  333  116  450  439  408  512  359  761   633 #>  [717,]   91  816  763  681  530  181  139  747  240   867 #>  [718,]  295   98  483  706  195  155  394  821  439   838 #>  [719,]  835  871  396  576   89  480  543  507  975    32 #>  [720,]  131   56  997  891  164  405  879  637  259   362 #>  [721,]  296  586  992  402  163   47  391  641  424   230 #>  [722,]  641  935  852  228  198  995  916  435  586   346 #>  [723,]  105  600  845  643  134  363  258  560  809   469 #>  [724,]  902  759  971  172  222  581  909  644   29   540 #>  [725,]  404  858  974  788  520  207  227  209  148   332 #>  [726,]   22  487  805  866  961  879  711  720  610   131 #>  [727,]   65  258  463  126  560  531  736  887  928   199 #>  [728,]  559  263  988  261  142  712  166    1   17   919 #>  [729,]  320  749  716  450  551  253  633  408  439   940 #>  [730,]  534  190  158  301  915  468  341  243  179   387 #>  [731,]  687  103  699  128  899  590  876  933  607   271 #>  [732,]  112  212  248  679  371  178  760  999  807   697 #>  [733,]  117    9  162  386  828  299  489  169  855   531 #>  [734,]  914    8  425  269   85  933  983  656   45   956 #>  [735,]  989  187  938  796  849  531  832  787  847   342 #>  [736,]   56  466  727  887  802   65  997  422  126   669 #>  [737,]   53  532  986  605  242   52  196   43  443   623 #>  [738,]  923  283  492  257   31  630  695  628  110   276 #>  [739,]  196  737   53  356  457  986   96  256  202   623 #>  [740,]  140  973  261  919  478  629  921  409  165   524 #>  [741,]   10  840  211  390  580  426  375  924   84   700 #>  [742,]  751  127  651  437  633  537   46  703  771   603 #>  [743,]  966  464  694  332  875  797  781  161  627   646 #>  [744,]   51   14  330  147  316  255  284  371  212   679 #>  [745,]  648   84  840  768  803  924  509  638  292   488 #>  [746,]  431  893  189  353  359  555  491  761  483   196 #>  [747,]  181  867  240  372  302  750   91  681  801   996 #>  [748,]  165  237  765  850  266  874  274  973  629   100 #>  [749,]  439  716  633  651  450  116  177  333  320   729 #>  [750,]  807  410  314  112  372  400  248  996  747   874 #>  [751,]  742  651  437  537  127  658   46  633  603   703 #>  [752,]   79  329  182  493  820  213  939  514  111   983 #>  [753,]  685  421  387  518  474  284  118  501  665   330 #>  [754,]  345  697  999  546  974  227   63  248  251   112 #>  [755,]  665  850  779  124  100  921  874  801  240    93 #>  [756,]  712  142  559   17  676  166  280  347  263   317 #>  [757,]  652  180   66  318  758  810  830  154   52   356 #>  [758,]  356  967  757   52  986  318  623  343  577   532 #>  [759,]  240  724  902  272  237  779  165  581  874   266 #>  [760,]  178  732  206  792  583  248  112  212  209   440 #>  [761,]  116  818 1000  366  333  555  545  186  595   926 #>  [762,]  191   37  529  589  115  594  312  634    7   846 #>  [763,]  681  717  530  220   91  298  139  328  984   816 #>  [764,]  907  661   71  508  634  699   74  271  500   319 #>  [765,]  266  205  138  748  525  165  789  769  100   237 #>  [766,]  956  715  183   46  269  603  993  656  980   441 #>  [767,]  797  535  627  462  788  227  512   50  754   974 #>  [768,]  370  411  745  351  509  913  691  423  803   609 #>  [769,]  314  205  540  789  172  994  266  251  400   410 #>  [770,]  534  954   51  445  837  934  387  679  461   501 #>  [771,]  993  886  127  437  226   63  535  632  366   742 #>  [772,]  553  613  673  223   78  690  421  289  646   290 #>  [773,]  574  146  871  930  543  376  465  813  249   171 #>  [774,]  582  593  265   93  383  921   26  629  850   964 #>  [775,]   42  950  204  598  657  184  218   85   45   894 #>  [776,]  928  855  383  478  422    2  313  531  808   582 #>  [777,]  282   15   71  271  244  213  319  731  449   111 #>  [778,]   69  268   34  349   48  693   80  239  428   625 #>  [779,]  665  755  640  892  240  850  874  100  759   205 #>  [780,]  955  264   92  475   24  185  210  570  254   403 #>  [781,]  161  805  173  797  879  788  332  227  966   563 #>  [782,]  130  718  484  306  821  483   98  578  946   295 #>  [783,]  606  906  809  323  297   94  890  469  579    11 #>  [784,]  880  241  981  562  599  334  968  373  570   885 #>  [785,]  648  594   30   62   37   36  565  278  745   455 #>  [786,]   22  805  456  990  963  597  969  817  405   879 #>  [787,]  796  998  806  913  187  735  560  849  600   469 #>  [788,]  404  227  332  725  797  974  858  767  161   781 #>  [789,]  205  892  251  769  994  266  371  540  400   765 #>  [790,]  599  570  338  567  949  821  968  562  838   526 #>  [791,]  964  250  265  619  582  207  509  488  831   564 #>  [792,]  760  178  583  804  440  118   25  954  235   206 #>  [793,]  184  493  292  109   85  939  980   45  924   590 #>  [794,]  311  310  102  707  108   89  988   95  970   973 #>  [795,]  203  308  324  664  704  115  321  416  977   960 #>  [796,]  787  187  735  998  938  600  560  531  591   849 #>  [797,]  767  627  788  462  535  781  227  879  161   456 #>  [798,]  453  711  941  610  527  348  250  550  487   791 #>  [799,]  878  551  696  408  320  138   50   20  931   525 #>  [800,]  610  413  866  245  395  487  654  247  875   805 #>  [801,]  874  867   26  410  919  921  240  165  747   750 #>  [802,]  860   56  164  303  736  961  496  405  117   855 #>  [803,]  585  109  638  924   84  745  657  488  668   840 #>  [804,]  583  792  566  760  178  528   25  389  954   115 #>  [805,]  879   22  781  161  817  961  456  479  963   866 #>  [806,]  913  998  787  600  509  796  411  643  564   768 #>  [807,]  750  996  112  248  410  372   26  732  747   400 #>  [808,]   49  928  488  669  183  383  715  976  855   650 #>  [809,]  297  906  606   11  783  105  469  845  579   927 #>  [810,]  154  910   29  544  260   66  435  916  652   757 #>  [811,]  572   17  649  105  382  927  363  409  845   317 #>  [812,]  217   30  211  580  309  815  699  565   10    37 #>  [813,]  945  574   33  373  146  249  477  336  171   773 #>  [814,]  569  713  880  182  784  194  334   54  662   903 #>  [815,]  565  699   30  661  812  292   61  300  820   648 #>  [816,]  717   91  240  568  747  181  681  530  867   372 #>  [817,]  456  405  872  164  879  969  496  259  226   797 #>  [818,] 1000  761  595  926  366  116  447   63  491   186 #>  [819,]  424  470   72  198  498  883  228  965  865   341 #>  [820,]   81  406  939  827  300  292  752   61  231    80 #>  [821,]  706  295  790  718  838  841  484  949  599   981 #>  [822,]  933  491  607  186  926  447  876  818  658   244 #>  [823,]  325  247  952  985  580  987  418  395  438   368 #>  [824,]  367  493  426  903  638   10  182  375  481   840 #>  [825,]   27  622  393  451  525   78  138  237  293   861 #>  [826,]  566  167  528  856  328  416  429  804  115   984 #>  [827,]  231  336  939   54  354  334   80  820  373   859 #>  [828,]  121  199  733  386  102  162   89  117  927   169 #>  [829,]  515  705   55   59  190  139  215  639  568   402 #>  [830,]   66  394  703  936  155  358  444  862  539   652 #>  [831,]  619  151  873  839  791  207  704  209  287   666 #>  [832,]  938  849  481  735    4   42  337  342  989   950 #>  [833,]  148  455  267  974  144  715  725  209  300    49 #>  [834,]  957  981  357  575  852  380  288  241  194   868 #>  [835,]  871  480  719  888   32  576  574  543  507    89 #>  [836,]  172  632  222  314  901  541  444  693  581   769 #>  [837,]  882  770  461  122  445  443  534  179  281   472 #>  [838,]  936  562  295  703  526  885  830  981  155   949 #>  [839,]  135  151  209  589  619  831  389  873  115   455 #>  [840,]   84  924  648  292  745  638  803  144   30   580 #>  [841,]  885  241  357  981  549  949  983  957  213   329 #>  [842,]  232  108   32  193  695  631  403  547  210   257 #>  [843,]  101  427  983  493  218   85  425  590  793     8 #>  [844,]  319  281  244  710   71  472  495  876  647   933 #>  [845,]  134  105  600  369  621  723  469  796  811   806 #>  [846,]  308   23  191  115  589  762    7  321  962   390 #>  [847,]  989  169  855  337  183  496  376    9  313   299 #>  [848,]  428  341  286  275  459  347  149  391  503   778 #>  [849,]  832   42  735  938  481  989  657  787  796   950 #>  [850,]  755  100  874  331  665  593  748  921  774   779 #>  [851,]  174  289  637  462  627  694  512   50   20   364 #>  [852,]  935  521  575  834  562  916  399  981  526   380 #>  [853,]  982  219  904   60   68  806  913  609  509   564 #>  [854,]  991  471  390  904  664  982   23  741  977   324 #>  [855,]  313  422  776  928  496  976  847  117    9   733 #>  [856,]  528  124  220  328    1  412  996  826  246    26 #>  [857,]  726   13  487  866   22    5  961  786  720   571 #>  [858,]  520  725  207  404  331  400  788  214  650   287 #>  [859,]   80  601  573  620  354  602  268   81  827   225 #>  [860,]  496  802  303  872  164  855  299  847  117   989 #>  [861,]  628  274  970  524  291  525  748  973  237   110 #>  [862,]  358  539  912  242  994  444  442  605  155   545 #>  [863,]  579  905  258  887  727  297  381  303  560    94 #>  [864,]  518  497  454  568  951  114  474  293  753   284 #>  [865,]   72  470  498  435  230  819  544  810  215   965 #>  [866,]  413  961   22  800  805  610  479  360  726   303 #>  [867,]  801  747  240   91  919  181  246   26  874     1 #>  [868,]  957  357  647  549  912  442  288  539  111   870 #>  [869,]  474   21  497  339  864  143  454  896  113   675 #>  [870,]  442  910  154  399   66  836  693  539   29   901 #>  [871,]  835  507  719   89  773  574  480  543  386   171 #>  [872,]  496  405  164  817  226  860  976  183  456   127 #>  [873,]  619  287  831  151  704  265  207   93  839   209 #>  [874,]  410  801  331  165  400  314   26  850  750   748 #>  [875,]    5  611  245  966  743  800  610  464  332   157 #>  [876,]  607  128  658  546  980  647  822   63  731   687 #>  [877,]  972  508  899  557  476  271    6  529  634   486 #>  [878,]  799  408  677  551  320  931  696  881  177    20 #>  [879,]  805  817  781  797  456  164  997  362  405    22 #>  [880,]  784  241  599  334  981  968  814  562  570   373 #>  [881,]  971  909  878  677  168  358  943  902  444   724 #>  [882,]  837  461  179  122  256  443  532  770  517   698 #>  [883,]  424  819  228  341  198  286   72  470  498   937 #>  [884,]  188  670   15  500  777  282  436  911  145   557 #>  [885,]  241  841  549  981  357  945  949  334  329   979 #>  [886,]  444  771  266  172  769  226  554  994  535   931 #>  [887,]  905  863  727  736  550  258  560   65  250   466 #>  [888,]  835  936  567  574  480  940  146  576  543   871 #>  [889,]  905  643  469  723  600  579  806   75  853   219 #>  [890,]  606  783  523  906   11  323  809  297  175    94 #>  [891,]  362  234  252  259  233  997  637  223  131    78 #>  [892,]  371   14  789  330  212  205  214  400  779   640 #>  [893,]  353  555  491  746  189  761  558  818  186  1000 #>  [894,]   45  441  184  327   12  511   85  269  956   930 #>  [895,]  963  307  236  506  360  914    8  479  656   344 #>  [896,]   97   90   21  263  728  559  639  635  392   451 #>  [897,]  482  513   68  653  277  219  598  413  615   985 #>  [898,]  348  326   83  527  941  414  736  485  223   466 #>  [899,]  687  972  103  368  271  731  877  699  460   267 #>  [900,]  503  459  937  160  224  683  275  428  499   848 #>  [901,]  693  918  322  365  407  836   69  504  978   239 #>  [902,]  581  222  172  636  724  759  971   95  836   266 #>  [903,]  426  615  824  481   75   42  849  433  657   814 #>  [904,]   68  985  325  823  853  277  654  390  854   592 #>  [905,]  887  863  258  560  579  600  727  787  643   796 #>  [906,]  297  809  606   11  783  448  502  381  832   927 #>  [907,]   74  764   16  661   71  436  188  111  500   281 #>  [908,]  746  359  450  431  174  159  851  701  716   457 #>  [909,]  971  358  994  881  172  444  540  251  677   724 #>  [910,]   29  260  154  222   66  870  810  596   70   916 #>  [911,]  670  556  884  449   86   15  188  282  614   107 #>  [912,]  539  442  605  862  868  647  978  365   52   318 #>  [913,]  998  806  509  787  564  768  591  796  411   803 #>  [914,]  269  734    8  425  956  360  656   45   85   307 #>  [915,]  286  243  965  158  341  239  498  322  918   693 #>  [916,]  260  399  935  521   33  586  910  810  992   526 #>  [917,]  389  948  151  135  839  666    7  792  831   804 #>  [918,]  365  686  901  978  243  698  407  302  915   322 #>  [919,]  921  801  740  140  261  867  165  629  593   272 #>  [920,]  504  322  288  111  514  156  965  275  868   661 #>  [921,]  593  919  629  801  478  774   26  850  740   874 #>  [922,]  298  960  691  220  328  984   62  416  763   795 #>  [923,]  738  283  492  630  257  695   31  636  110    27 #>  [924,]   84  840  292  803  648  638  745  657  144   109 #>  [925,]  942  230  865  215  168  350  689  644  547   114 #>  [926,]  595 1000  818   63  366  447  437  607  761   822 #>  [927,]  102  502  572  828  649  162  121  386  169   465 #>  [928,]  776  855  422  808  383  669  187  582  531     2 #>  [929,]   44   88  221  416  321  308  468  224  490   473 #>  [930,]  327   12  626  968  773  511  146  574  522   376 #>  [931,]  257  480  878  886  940  276  193  975   95   799 #>  [932,]  192  244  670  777  282  415  125  449  271   557 #>  [933,]  822  244  607  192  491  731  876  734  186   658 #>  [934,]  996  302  679  158  372  807  686  732  747   278 #>  [935,]  521  852  916   67  575  399  722   24  562   176 #>  [936,]  888  830  703  838  526  232   66  652  574   910 #>  [937,]  459  900  149  160  275  503  848  883  499   428 #>  [938,]  832  735  187  849  337  342  989  796    4   649 #>  [939,]  827  329  231  980  820  336  184  334  793   945 #>  [940,]  633  931  888  279  742  703  651  394  878   936 #>  [941,]  527  414  378  798  223  453  964  348  326   352 #>  [942,]  865  925   72  230  179  584  435  215  470   498 #>  [943,]  608  255  696  612  364  293  674  640  881   138 #>  [944,]  495  486  197  692  472  452  508  844  281   432 #>  [945,]  813  231  336  373  885  334  327  827  354   549 #>  [946,]  990  597  786  958  969  510   35  307   99   262 #>  [947,]  672  929  490  604   44  473  221   23   88   321 #>  [948,]  135  389  917  325  839  589  270  151  476   823 #>  [949,]  968  885  511  930  945  841  790  338  241   327 #>  [950,]  775   42  184  894   45  204  598  511  626    85 #>  [951,]  689  114  518  568   64  864  659   55  190   644 #>  [952,]  418  592  987  438  823  144  985  247  204   590 #>  [953,]  675  468  515  301  167   88  530  730  190   829 #>  [954,]  583  770  760  501  384  792  206  178  804    51 #>  [955,]  264   92  185  780  254  477  465  403  171    33 #>  [956,]  269  766   46  656  603  441  980  715  183   914 #>  [957,]  357  868  834  288  549  981  213  380  841   885 #>  [958,]  279  616  597  990  262  969  522  338   99   633 #>  [959,]   77   76  382  310  794  780  403  254  210   185 #>  [960,]  922  691  298  324  224  375   19  676  503   795 #>  [961,]  303   22  866  805  164  879  860  802  872   405 #>  [962,]   23  308  224  309  321  846  324  960  390   795 #>  [963,]  895  236  506  479  656  360  805  781  161    22 #>  [964,]  791  265  414  582  385  774  326  538  207   941 #>  [965,]  498  322  915  544  243  286  819  698  470   918 #>  [966,]  743  332  781  797  161  464  879  788  875   627 #>  [967,]  758   52  986  356  318  532  605  623  737   343 #>  [968,]  949  930  511  626  327   12  334  338  945   885 #>  [969,]  597  456  405  651  817  742  633  127  872   751 #>  [970,]  973   95  274   89  628  489  861  480  507   828 #>  [971,]  881  909  724  902  172  581  168  222   66   636 #>  [972,]  877  899  508  476  812  580  634  529  271   191 #>  [973,]  740  970  165  140   95  478  748  629  274   554 #>  [974,]  227  725  788  754  173  267  148  404  833   697 #>  [975,]  480  276  257  719  931  617  576  835  543   970 #>  [976,]  313  183  226  496  855  715  422  872  808     2 #>  [977,]  664  704  389  589  115  795  831  873  151   839 #>  [978,]  365  686  407  918  710  901  697  546  540   912 #>  [979,]  658  537  549  437  329  703  751  442  945   647 #>  [980,]  128  956  766  939  300  876  793  269  715   329 #>  [981,]  241  357  885  834  841  575  562  957  194   784 #>  [982,]  853   60  609  664  904  219  564  324  913   977 #>  [983,]  101   85  213  843  329  841  752  734   45   885 #>  [984,]  416  328  468  922   88  763  298  429  167   224 #>  [985,]  247  987  325  823  952  592  654  418  438   395 #>  [986,]   52  605  737  967   53  242  532  318  196   862 #>  [987,]  952  418  438  592  985  247  144  823  395   344 #>  [988,]  311  263  261  310   17  140  707  728  142   740 #>  [989,]  735  847  187  938  531  342  337  169  849   860 #>  [990,]  946  597  958  969  786  616   99  405   35    22 #>  [991,]  854  390   23  741  309  211  962  217  700   580 #>  [992,]  586   47  391   48  916  721  682  238  296   399 #>  [993,]  632  715  771  434  148  766   58  355  314   554 #>  [994,]  251  769  540  909  444  172  358  789  862   546 #>  [995,]  210  340  722   24  916  935  852  526  570   631 #>  [996,]  807  934  750  372  747  302  679  528  178   112 #>  [997,]  233  234  362  891  259  422  879    2  164   669 #>  [998,]  913  806  787  509  796  560  591  564  600   385 #>  [999,]  754  248  112  371  732  345  697  974  214   725 #> [1000,]  818  595  926  366   63  761  447  116  345   512 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.33320897 0.4936747 0.5080292 0.6065770 0.6498432 0.6635243 0.6640559 #>    [2,] 0.40656772 0.5088734 0.5781254 0.5885196 0.5891085 0.5928902 0.6070002 #>    [3,] 0.28675143 0.7304048 0.8930866 0.9309899 0.9382942 0.9573639 1.0635662 #>    [4,] 0.54877678 0.5816388 0.6355623 0.6464815 0.6603681 0.6626598 0.7156543 #>    [5,] 0.45100336 0.8296369 0.8507537 0.8894662 0.9802474 0.9907079 1.0380059 #>    [6,] 0.58366744 0.8862030 0.9026041 0.9772677 0.9935480 1.0056469 1.0106705 #>    [7,] 0.55074408 0.7058115 0.7112743 0.7393235 0.7794418 0.7821356 0.7852797 #>    [8,] 0.24877463 0.4716083 0.4912053 0.5293517 0.6292865 0.6339414 0.6472884 #>    [9,] 0.26469039 0.2996395 0.3236376 0.3957908 0.4998188 0.5054889 0.5271991 #>   [10,] 0.45716039 0.5248572 0.5597037 0.6750908 0.7070276 0.7102139 0.7110391 #>   [11,] 0.56052941 0.6036774 0.7008242 0.7725426 0.7949052 0.8625345 1.0262828 #>   [12,] 0.09264610 0.3312582 0.4246496 0.4607841 0.4722689 0.4733116 0.5015422 #>   [13,] 0.84629264 1.1723106 1.3001492 1.3114395 1.3828850 1.4011769 1.4293015 #>   [14,] 0.15973661 0.3255263 0.3595530 0.3986254 0.4586901 0.5672494 0.6766384 #>   [15,] 0.40156437 0.5009913 0.6125057 0.6409297 0.6454112 0.7266591 0.7686437 #>   [16,] 0.46408084 0.4690122 0.6273553 0.7207028 0.8379299 0.8404805 0.9338492 #>   [17,] 0.42503333 0.5631904 0.5892891 0.6593877 0.6801115 0.6921511 0.7091854 #>   [18,] 0.77637804 0.8422119 0.9214696 0.9219122 0.9451641 0.9469874 0.9786173 #>   [19,] 0.68460707 0.7642190 0.8600948 0.9912124 1.0026335 1.0304243 1.1301230 #>   [20,] 0.29584251 0.4313897 0.4357215 0.5127341 0.5844533 0.5973330 0.6594944 #>   [21,] 0.69586488 0.8814124 0.9286943 0.9642135 0.9756221 1.0087224 1.0309844 #>   [22,] 0.42719682 0.5902467 0.6784613 0.6997878 0.7184678 0.7750223 0.8497456 #>   [23,] 0.52429343 0.5811294 0.6604883 0.7871819 0.8531866 0.8775793 0.9267980 #>   [24,] 0.80134029 0.8138361 0.8438184 0.8448423 0.9234200 0.9709699 1.0104976 #>   [25,] 0.59719116 0.6080726 0.7255290 0.7294251 0.8226023 0.8731855 0.8819191 #>   [26,] 0.40908515 0.4207614 0.4973629 0.5372019 0.5405101 0.5648644 0.5775846 #>   [27,] 0.28126546 0.3617986 0.6448653 0.7780667 0.8352271 0.9608145 0.9676046 #>   [28,] 0.42138359 0.4580135 0.5104830 0.5237653 0.5651552 0.5866667 0.6538284 #>   [29,] 0.22179389 0.3696375 0.3733416 0.4085216 0.5689988 0.5826454 0.5909944 #>   [30,] 0.35276972 0.4267099 0.4280919 0.4325845 0.5182628 0.5570910 0.5612429 #>   [31,] 0.66517674 0.7732773 0.8853450 0.9111301 0.9134093 0.9315121 0.9576972 #>   [32,] 0.50736700 0.5890231 0.6226906 0.7011852 0.7382759 0.7487686 0.7527671 #>   [33,] 0.13761279 0.3296651 0.4855052 0.4909635 0.5460890 0.5987747 0.6044887 #>   [34,] 0.24267550 0.3633249 0.4982862 0.5664751 0.6368039 0.6669546 0.6671054 #>   [35,] 0.88849795 0.9866872 1.0954633 1.2439975 1.3296671 1.3545138 1.3701992 #>   [36,] 0.39054207 0.4903020 0.5328039 0.5376487 0.6135761 0.6201920 0.6202173 #>   [37,] 0.40809656 0.4258201 0.4494840 0.4805357 0.5229958 0.5406588 0.5720149 #>   [38,] 0.77108131 0.9126600 1.2023723 1.4224387 1.4277434 1.4305376 1.4435732 #>   [39,] 1.48799363 1.5206702 1.6645938 1.6874075 1.6954009 1.7374570 1.7747666 #>   [40,] 0.86604273 0.9116066 0.9648823 1.0392506 1.1183754 1.1516997 1.1844311 #>   [41,] 1.18407640 1.2764497 1.2980104 1.3612716 1.4521669 1.4643155 1.5770180 #>   [42,] 0.36201539 0.4476251 0.4548488 0.4632175 0.5863629 0.6697857 0.6699575 #>   [43,] 0.42215355 0.4702680 0.4761455 0.5113246 0.6351100 0.6616292 0.6859794 #>   [44,] 0.66330334 0.7256621 0.8710555 0.8754365 0.9433221 1.0463089 1.1023099 #>   [45,] 0.19324472 0.3441800 0.3643519 0.3775057 0.3889301 0.5223925 0.5287872 #>   [46,] 0.25657646 0.3432129 0.3785672 0.3989171 0.4535359 0.4564003 0.4780473 #>   [47,] 0.49102697 0.4910285 0.5909949 0.6037115 0.6052222 0.6712949 0.7342716 #>   [48,] 0.44903679 0.4541788 0.4696230 0.4952878 0.5146174 0.5734906 0.5802232 #>   [49,] 0.35913748 0.5842848 0.6076039 0.6170354 0.6421783 0.7087212 0.7098025 #>   [50,] 0.29584251 0.3218037 0.4504554 0.5087771 0.5148992 0.5352670 0.5669786 #>   [51,] 0.43605113 0.5465248 0.5597026 0.5788705 0.6953284 0.6960740 0.7228201 #>   [52,] 0.26857078 0.4140491 0.5720637 0.6730140 0.6944665 0.7341509 0.7434224 #>   [53,] 0.19334775 0.4902990 0.6831658 0.7044840 0.7149560 0.7167684 0.7174538 #>   [54,] 0.39980325 0.4055425 0.4511367 0.5300963 0.5327075 0.5487768 0.5684397 #>   [55,] 0.64808338 0.6754984 0.7551298 0.7713814 0.7924056 0.8160080 0.8233904 #>   [56,] 0.55472220 0.5676050 0.6505416 0.7000494 0.7592217 0.8055591 0.8776527 #>   [57,] 1.13241001 1.1758217 1.1947783 1.2309303 1.2532812 1.2608847 1.2729836 #>   [58,] 0.07637815 0.1667546 0.1857287 0.4059219 0.4759978 0.4832739 0.5219100 #>   [59,] 0.96814087 1.0069994 1.0250457 1.0444566 1.0592491 1.0884317 1.0912339 #>   [60,] 0.47358281 0.5770577 0.8797952 0.9601944 0.9610086 0.9759137 1.0358115 #>   [61,] 0.56136394 0.5811131 0.6531948 0.6579318 0.6705471 0.7069993 0.7108007 #>   [62,] 0.46504292 0.5861363 0.5949830 0.6135761 0.6188046 0.6237519 0.6948734 #>   [63,] 0.33738967 0.3734872 0.3894532 0.4092403 0.4252128 0.4372633 0.5192237 #>   [64,] 0.55926980 0.5845617 0.6855677 0.6983545 0.7257708 0.7694152 0.8045298 #>   [65,] 0.31437068 0.4305082 0.5551817 0.6811928 0.7049551 0.7543950 0.7709723 #>   [66,] 0.34963362 0.5120821 0.5284258 0.5395776 0.5909944 0.5962518 0.6447372 #>   [67,] 0.52132311 0.5986330 0.6781876 0.7224444 0.7627384 0.8013403 0.8130439 #>   [68,] 0.50560499 0.6883962 0.7677618 0.7692167 0.9084058 0.9091004 0.9407688 #>   [69,] 0.22443515 0.2426755 0.3850621 0.4803062 0.5146007 0.5650926 0.5771107 #>   [70,] 0.35847269 0.4888512 0.4899177 0.5455938 0.5963319 0.6179717 0.6230198 #>   [71,] 0.36826841 0.4110101 0.4474681 0.5086220 0.5473456 0.5760742 0.6371038 #>   [72,] 0.22974326 0.3432899 0.3795114 0.4853756 0.5464167 0.5726009 0.6933421 #>   [73,] 0.81125916 1.3088885 1.4452745 1.5276928 1.5957467 1.5983387 1.7495370 #>   [74,] 0.40814173 0.4640808 0.6918162 0.7014470 0.7152557 0.7909309 0.9202517 #>   [75,] 0.69957504 0.7736989 0.8678461 0.9381650 0.9397855 0.9738494 1.0649487 #>   [76,] 0.79490522 0.8568976 0.9835142 1.0144644 1.0532438 1.0865182 1.1169678 #>   [77,] 0.81383609 1.0255561 1.0447902 1.0516185 1.1227258 1.1339630 1.1602939 #>   [78,] 0.66748392 0.7576590 0.7743609 0.8303448 0.8337361 0.8343785 0.8833807 #>   [79,] 0.40490562 0.5597603 0.6656510 0.6815402 0.6842969 0.7113503 0.7266591 #>   [80,] 0.17150843 0.2600662 0.4121097 0.4226778 0.4834661 0.5280154 0.5370563 #>   [81,] 0.32272573 0.3283008 0.3456662 0.4350125 0.4502674 0.4836229 0.4864847 #>   [82,] 0.23193974 0.4378231 0.6784099 0.6830516 0.7300812 0.7311138 0.7622518 #>   [83,] 0.87613622 1.0883546 1.2901201 1.3089740 1.3097177 1.3410479 1.3946685 #>   [84,] 0.15793197 0.2166949 0.2287818 0.3569337 0.4384523 0.4832703 0.5177965 #>   [85,] 0.34417999 0.5169962 0.5200675 0.5261316 0.5271642 0.5562491 0.5823557 #>   [86,] 0.94020080 0.9555392 1.1864516 1.2805996 1.3955065 1.5566545 1.6314612 #>   [87,] 0.49472628 0.5864696 0.6638819 0.8653645 0.9585525 1.0475774 1.1455222 #>   [88,] 0.59239752 0.7338046 0.7838205 0.7975771 0.8184496 0.8817613 0.8992689 #>   [89,] 0.26769508 0.3611439 0.4516664 0.4992772 0.5038736 0.5403294 0.5430513 #>   [90,] 0.45893605 0.9022867 1.0418817 1.0867157 1.2272607 1.3002151 1.3083297 #>   [91,] 0.30001875 0.4334226 0.4515194 0.4760902 0.5349501 0.5693113 0.5826414 #>   [92,] 0.25467816 0.3465901 0.4897840 0.5121611 0.5650681 0.5660566 0.6257518 #>   [93,] 0.37925404 0.4289419 0.4833930 0.6033399 0.6327947 0.6501234 0.6509638 #>   [94,] 0.67653039 0.7517871 0.8619005 0.8645869 0.8753186 0.9699410 1.0566301 #>   [95,] 0.44039344 0.4888512 0.5238482 0.5466947 0.5720406 0.5888028 0.5934634 #>   [96,] 1.06993587 1.1170796 1.1297632 1.2352794 1.3441275 1.4656814 1.6463742 #>   [97,] 0.45893605 0.8098362 0.8879344 1.2640939 1.2711006 1.2804266 1.2970512 #>   [98,] 0.49769597 0.5201248 0.5441933 0.6213377 0.6529377 0.6913456 0.7230355 #>   [99,] 0.34005854 0.6095370 0.6302301 0.6543855 0.6729165 0.7386520 0.7503298 #>  [100,] 0.51206239 0.5714999 0.6241663 0.6377034 0.6446298 0.6674839 0.6760396 #>  [101,] 0.34332942 0.5018607 0.6656643 0.6797835 0.6863212 0.7542649 0.7968189 #>  [102,] 0.36114388 0.4242231 0.4485479 0.4954662 0.5485612 0.5968797 0.6065157 #>  [103,] 0.33353948 0.3415766 0.3905625 0.4077135 0.5125184 0.5615606 0.6264908 #>  [104,] 0.92470361 0.9907398 1.0102954 1.0531388 1.0940640 1.1170946 1.1524044 #>  [105,] 0.52470456 0.6253316 0.6371911 0.6756628 0.7234324 0.8053355 0.8772812 #>  [106,] 0.85978953 0.9075500 0.9207407 0.9541817 1.0576379 1.0736124 1.1025325 #>  [107,] 0.42485080 0.4498919 0.4632685 0.8379299 0.8558811 0.8687853 0.8744345 #>  [108,] 0.38996899 0.4905381 0.6179717 0.6292867 0.6475076 0.7061478 0.7315159 #>  [109,] 0.10540724 0.3038202 0.3456662 0.3949007 0.4554645 0.4911964 0.5643303 #>  [110,] 0.70182498 0.8530957 0.9156722 1.1035428 1.1147249 1.1480124 1.1518089 #>  [111,] 0.46538934 0.4857843 0.5473456 0.5870209 0.6023108 0.6347660 0.6357482 #>  [112,] 0.14497914 0.2379350 0.2850986 0.4062461 0.4232399 0.4432055 0.4547102 #>  [113,] 0.55220653 0.5679776 0.7240818 0.7660399 0.8330466 0.9996779 1.0158857 #>  [114,] 0.55513535 0.5592698 0.6772467 0.7017922 0.7187628 0.8083335 0.8486127 #>  [115,] 0.49676666 0.6562537 0.6690268 0.6829477 0.6969723 0.7130125 0.7193516 #>  [116,] 0.26072784 0.2875755 0.3620183 0.3850199 0.4081393 0.4301400 0.4963594 #>  [117,] 0.13569927 0.2996395 0.3677441 0.4655046 0.5046764 0.5175956 0.5246583 #>  [118,] 0.67826488 0.7288330 0.7294251 0.7663848 0.8001804 0.8091214 0.9387097 #>  [119,] 0.40929619 0.6509638 0.6765079 0.7087235 0.7667496 0.7977269 0.7980421 #>  [120,] 0.43795017 0.8053355 0.9717400 0.9877802 1.0144644 1.1036057 1.1528755 #>  [121,] 0.26513468 0.3641863 0.5949946 0.6542293 0.6701341 0.7000746 0.7017221 #>  [122,] 0.67663117 0.8623822 0.8902605 0.9226858 0.9280070 0.9436049 0.9517676 #>  [123,] 0.75178711 0.9430822 1.1851875 1.2226546 1.3701992 1.4458555 1.4777859 #>  [124,] 0.37925404 0.5612632 0.6343214 0.6848315 0.7104460 0.7233732 0.7320595 #>  [125,] 0.99392625 1.2938224 1.3697400 1.5733771 1.5944546 1.6131131 1.6225211 #>  [126,] 0.39428886 0.4305082 0.5314982 0.6419264 0.6678952 0.6959795 0.7116770 #>  [127,] 0.31929130 0.4535359 0.4553470 0.4852406 0.4904860 0.4979332 0.5472189 #>  [128,] 0.35316712 0.4071002 0.4410517 0.4670922 0.4983054 0.5937900 0.5974255 #>  [129,] 0.77637804 1.0687861 1.1039915 1.1382706 1.2063634 1.2406298 1.2460122 #>  [130,] 0.78052407 0.8476426 1.0876455 1.2007236 1.2392633 1.2465515 1.2749841 #>  [131,] 0.63635555 0.6638819 0.7581955 0.7669603 0.8213554 0.8481761 0.8584272 #>  [132,] 0.60365238 0.6608670 0.7141737 0.7724112 0.8124798 0.8201659 0.8277441 #>  [133,] 1.39272345 1.4772063 2.0793682 2.2968481 2.3157368 2.3966830 2.3994421 #>  [134,] 0.37400875 0.4440870 0.6176794 0.6756628 0.8361427 0.9020382 0.9020441 #>  [135,] 0.43687630 0.4423205 0.5014776 0.5291528 0.7173183 0.7374405 0.7378424 #>  [136,] 0.79468963 0.8123001 0.9837914 1.1030727 1.1351998 1.1585110 1.2391058 #>  [137,] 0.40929619 0.6817282 0.7850764 0.8145561 0.8215886 0.8382928 0.8496180 #>  [138,] 0.21559037 0.4096761 0.5162898 0.6321686 0.7008388 0.7196368 0.7328807 #>  [139,] 0.43049473 0.6718791 0.7391521 0.7713814 0.7834506 0.7913768 0.8004374 #>  [140,] 0.20903988 0.3075590 0.4671057 0.4788569 0.5167783 0.5483254 0.6455719 #>  [141,] 0.80015340 0.8685284 0.9010723 0.9454519 0.9637786 1.0414372 1.0798755 #>  [142,] 0.31522903 0.5631904 0.5711716 0.7321739 0.8130941 0.8419560 0.8634794 #>  [143,] 0.64539204 0.9042904 1.0210506 1.2587738 1.3259347 1.4339276 1.4733379 #>  [144,] 0.34145143 0.5152206 0.5311697 0.5633938 0.5747950 0.5811210 0.6081336 #>  [145,] 0.82938368 0.8867989 0.8982692 0.9413123 0.9907487 1.0474397 1.0926199 #>  [146,] 0.13657853 0.3106255 0.3581343 0.3923103 0.4506103 0.5033109 0.5140929 #>  [147,] 0.54614764 0.6921028 0.7366327 0.7595028 0.8179120 0.8256839 0.8519938 #>  [148,] 0.31625337 0.4059219 0.4153771 0.4234344 0.4296528 0.4404965 0.4807697 #>  [149,] 0.66118798 0.6881604 0.7376756 0.8184880 0.9856100 1.0247394 1.0284658 #>  [150,] 0.79468963 0.9676046 1.0453516 1.0468914 1.0691070 1.1376882 1.2574858 #>  [151,] 0.34592840 0.4423549 0.4572812 0.5412945 0.6057902 0.6447366 0.6501275 #>  [152,] 0.95553921 1.6448211 1.7308826 1.7822628 1.9324145 2.0368236 2.0526965 #>  [153,] 0.60230259 0.8205998 0.9344682 0.9541817 0.9680088 1.1141819 1.1893135 #>  [154,] 0.34773665 0.3496336 0.3658949 0.4085216 0.5240363 0.5428405 0.5783030 #>  [155,] 0.34981032 0.4300390 0.5441933 0.5680502 0.6236453 0.6393585 0.6526055 #>  [156,] 0.46326852 0.6205107 0.6853186 0.6988698 0.7160859 0.7894947 0.8281187 #>  [157,] 0.85075367 1.0199067 1.1170142 1.1213144 1.3789024 1.4543627 1.4691854 #>  [158,] 0.49195706 0.5357379 0.5487941 0.5811986 0.6699927 0.6847269 0.6849946 #>  [159,] 1.10448897 1.1919382 1.1922065 1.1992410 1.2167524 1.2929953 1.2938728 #>  [160,] 0.40865417 0.4684249 0.5427874 0.5613639 0.6115439 0.6580191 0.7020964 #>  [161,] 0.21596063 0.2903811 0.5020439 0.5166793 0.5733186 0.5976691 0.6097627 #>  [162,] 0.23264498 0.3485338 0.3549732 0.4498173 0.4595627 0.4623773 0.5246583 #>  [163,] 0.66118798 0.8069734 0.9247036 0.9690766 1.0235999 1.0500307 1.1555972 #>  [164,] 0.33883353 0.3765060 0.4458431 0.4666007 0.5534736 0.5749872 0.5826448 #>  [165,] 0.32759184 0.4596497 0.4817790 0.5039489 0.5327237 0.5540437 0.5883926 #>  [166,] 0.75725601 0.9132398 0.9229082 0.9519649 0.9841020 1.1723511 1.1883962 #>  [167,] 0.66472988 0.7979358 0.8371371 0.8443504 0.8817613 0.9305689 0.9922339 #>  [168,] 0.61528015 0.6327408 0.6855677 0.7697942 0.7816848 0.8301074 0.8424082 #>  [169,] 0.41782859 0.4498173 0.4728031 0.4778043 0.4896874 0.5163652 0.5392462 #>  [170,] 0.43287300 0.6429590 0.6832575 0.6944751 0.6972318 0.7128775 0.7395068 #>  [171,] 0.35847269 0.4451055 0.4466854 0.4469318 0.4855052 0.4984030 0.5202331 #>  [172,] 0.31868615 0.4448657 0.4548676 0.4556674 0.4599421 0.5130394 0.5228631 #>  [173,] 0.29038113 0.3915711 0.4611907 0.4879140 0.5129529 0.5433548 0.5651552 #>  [174,] 0.48731018 0.7381614 0.8037018 0.8215043 0.8464098 0.8966459 0.9392374 #>  [175,] 1.17301556 1.1966784 1.2846573 1.3678866 1.3936647 1.3982280 1.4186001 #>  [176,] 0.54625174 0.6483922 0.7361554 0.7714077 0.7731047 0.7755245 0.8527991 #>  [177,] 0.26406906 0.4301400 0.4475093 0.4873848 0.4885246 0.5522868 0.5636512 #>  [178,] 0.27489761 0.4401889 0.5310747 0.5538059 0.5583273 0.5648409 0.5800271 #>  [179,] 0.61243142 0.8133132 0.8620435 0.9556268 0.9853236 0.9987971 1.0258985 #>  [180,] 0.67406726 0.8087952 0.8417653 0.8850054 0.9451678 0.9830485 1.0003318 #>  [181,] 0.30741098 0.4515194 0.5370376 0.5610640 0.5700220 0.5877499 0.5963474 #>  [182,] 0.56002120 0.5809655 0.6964895 0.7217809 0.7529461 0.7566200 0.7755245 #>  [183,] 0.28472736 0.3272188 0.3831039 0.4241345 0.4791298 0.5248234 0.5265669 #>  [184,] 0.30783416 0.3889301 0.4595979 0.4733116 0.5136146 0.5541023 0.5562491 #>  [185,] 0.33869784 0.3868842 0.3975681 0.4854788 0.4897840 0.4984030 0.5274977 #>  [186,] 0.30868219 0.4328730 0.5178281 0.5414301 0.5856409 0.6213377 0.7040224 #>  [187,] 0.31380138 0.3297394 0.4008448 0.5162768 0.5278106 0.5849524 0.5969928 #>  [188,] 0.32608504 0.4220482 0.7093473 0.7207028 0.7452457 0.7933898 0.8275318 #>  [189,] 0.54069889 0.5652119 0.6206828 0.6303256 0.6357051 0.7984617 0.8053766 #>  [190,] 0.67549839 0.7232592 0.8132158 0.9190209 0.9681409 0.9685656 0.9827482 #>  [191,] 0.15733470 0.4258201 0.5014951 0.5365851 0.6947332 0.6986426 0.7112743 #>  [192,] 0.58409909 0.6897317 0.7141067 0.7664119 0.7881502 0.7916708 0.8013683 #>  [193,] 0.35646671 0.3899690 0.6119598 0.7148744 0.7228644 0.7429829 0.7727432 #>  [194,] 0.68875772 0.7189778 0.7770964 0.7806625 0.7964278 0.8392598 0.8770237 #>  [195,] 0.67678860 0.7324964 0.8230921 0.8845754 0.9033339 0.9077659 0.9108041 #>  [196,] 0.63570512 0.7348450 0.8110059 0.8367195 0.8756147 0.8992596 0.9439857 #>  [197,] 0.50354047 0.6505265 0.7833600 0.8098356 0.8579608 0.9554723 1.0688377 #>  [198,] 0.26234724 0.4699939 0.5370131 0.5769330 0.6798075 0.7105857 0.7188092 #>  [199,] 0.26513468 0.3384830 0.4728952 0.5314982 0.6366732 0.7049551 0.7269806 #>  [200,] 0.64702337 0.7806625 0.8675748 0.8750932 0.9044477 0.9804356 1.0279479 #>  [201,] 0.77626997 0.7936963 1.0266906 1.1353206 1.1502969 1.1559444 1.1832396 #>  [202,] 1.12976321 1.2011369 1.2034974 1.2203004 1.2821082 1.3363017 1.3653478 #>  [203,] 0.42762418 0.7264004 0.7695012 0.8600948 0.8797952 0.9290759 0.9384245 #>  [204,] 0.36991422 0.4156147 0.4969528 0.5203659 0.5381903 0.6264361 0.6273695 #>  [205,] 0.27109287 0.3219335 0.3335726 0.4014588 0.5163762 0.5976731 0.6321686 #>  [206,] 0.50597776 0.6279276 0.6701691 0.6755843 0.6832611 0.7004793 0.7036933 #>  [207,] 0.33236535 0.3712879 0.4562779 0.4580055 0.5083943 0.5367951 0.5861422 #>  [208,] 0.49472628 0.6393724 0.7970550 0.8303448 0.9681105 1.0440734 1.1057151 #>  [209,] 0.46501069 0.4983881 0.5296864 0.5347317 0.5367951 0.5539200 0.5674496 #>  [210,] 0.79299819 0.9008850 0.9234200 1.0220035 1.0342638 1.0516185 1.0608985 #>  [211,] 0.27015593 0.4052767 0.4325845 0.4472732 0.4571604 0.6088264 0.6467455 #>  [212,] 0.24577553 0.2684923 0.2850986 0.3424899 0.4226947 0.4544832 0.4586901 #>  [213,] 0.64541115 0.6506679 0.6546473 0.6559331 0.6630064 0.6703872 0.6828399 #>  [214,] 0.36730116 0.4336705 0.5467663 0.5672494 0.5841725 0.5877579 0.5904876 #>  [215,] 0.45899657 0.5472876 0.6480834 0.7874958 0.8132158 0.8579533 0.9062561 #>  [216,] 0.48082990 0.7998270 1.0542069 1.0918235 1.1170796 1.1181983 1.1436300 #>  [217,] 0.27015593 0.2920488 0.3263727 0.4267099 0.5366267 0.6597925 0.7110391 #>  [218,] 0.34035160 0.4912053 0.5076791 0.5203659 0.6435715 0.6807536 0.6863212 #>  [219,] 0.63771610 0.9091004 0.9915339 1.0326244 1.0519849 1.0967622 1.1184147 #>  [220,] 0.39460028 0.4762465 0.4936747 0.5240643 0.5904592 0.5991337 0.6266378 #>  [221,] 0.42777760 0.7256621 0.8260353 0.8284906 0.8389723 0.8596104 0.9145398 #>  [222,] 0.33640916 0.3733416 0.4402252 0.4960802 0.5070417 0.5123386 0.5129393 #>  [223,] 0.50907533 0.5103462 0.6667541 0.6875069 0.6882965 0.6971136 0.7334115 #>  [224,] 0.54426341 0.7271139 0.7460303 0.7464571 0.8042436 0.8184496 0.8495015 #>  [225,] 0.23193974 0.4303114 0.5026009 0.5338993 0.5830010 0.5944927 0.6772880 #>  [226,] 0.35586529 0.4377213 0.4553470 0.4599199 0.5152242 0.5168999 0.5620190 #>  [227,] 0.23658888 0.3662962 0.4611907 0.4632167 0.4648630 0.4810058 0.5166793 #>  [228,] 0.26234724 0.5036895 0.5220515 0.6459949 0.6483323 0.7655254 0.8647559 #>  [229,] 0.26221014 0.6125194 0.6434553 0.7034577 0.7184077 0.7662638 0.7749480 #>  [230,] 0.53873028 0.5472876 0.6136132 0.6933421 0.8921770 0.9267238 0.9378682 #>  [231,] 0.11385865 0.2706084 0.3855567 0.4204461 0.4210874 0.4511367 0.5043888 #>  [232,] 0.35646671 0.4905381 0.5274332 0.6226906 0.7714252 0.8728444 0.8751769 #>  [233,] 0.29166433 0.3632250 0.3818954 0.5090753 0.5170808 0.6847826 0.7362102 #>  [234,] 0.37094950 0.3741709 0.3818954 0.4060324 0.4146436 0.5088734 0.5762647 #>  [235,] 0.53962238 0.5915317 0.7328715 0.7749480 0.8038526 0.8475956 0.8733022 #>  [236,] 0.31568046 0.4460953 0.4905930 0.5866667 0.6244658 0.6754986 0.6897317 #>  [237,] 0.48177903 0.5062225 0.5454101 0.6086170 0.6353647 0.6373554 0.6559596 #>  [238,] 0.43031144 0.4378231 0.4785976 0.4794833 0.5649043 0.5734906 0.5937256 #>  [239,] 0.41580704 0.5168549 0.5478629 0.5610640 0.5800238 0.6052222 0.6056943 #>  [240,] 0.43306665 0.4636667 0.5278777 0.5280130 0.5476377 0.5493087 0.5693113 #>  [241,] 0.27421979 0.3401908 0.4679244 0.5015384 0.5951705 0.6589710 0.6843000 #>  [242,] 0.35277249 0.5113246 0.5446964 0.5501168 0.5636512 0.6097028 0.6252463 #>  [243,] 0.40368459 0.4628502 0.4709858 0.6024872 0.6196611 0.6371968 0.6841998 #>  [244,] 0.49049729 0.4984175 0.5984524 0.6218133 0.6219574 0.6379936 0.6696673 #>  [245,] 0.42138359 0.5548590 0.6907589 0.6975568 0.7170688 0.7291138 0.7550013 #>  [246,] 0.33320897 0.3946003 0.5404918 0.5405101 0.6029794 0.6923358 0.7029356 #>  [247,] 0.35809595 0.4249996 0.4485172 0.4874000 0.4886085 0.5104830 0.6041066 #>  [248,] 0.14497914 0.2945955 0.3443294 0.4226947 0.4751519 0.4795986 0.5075104 #>  [249,] 0.24132467 0.3106255 0.3855052 0.4904334 0.5211150 0.5305430 0.5715680 #>  [250,] 0.44751160 0.5764682 0.6202845 0.7098025 0.7896446 0.8204784 0.8523061 #>  [251,] 0.27717054 0.4043964 0.4702680 0.4866325 0.4943793 0.5022536 0.5811566 #>  [252,] 0.44761837 0.4541726 0.5748039 0.5762647 0.6273536 0.6746376 0.7196368 #>  [253,] 0.88271964 0.9134093 0.9337774 0.9605926 1.0560220 1.1276204 1.1559444 #>  [254,] 0.51216105 0.6144050 0.6456828 0.6647219 0.6714378 0.6728462 0.7228273 #>  [255,] 0.55116003 0.5989262 0.6461671 0.6666488 0.6671452 0.6698724 0.6947198 #>  [256,] 0.67663117 0.8651747 0.9299794 1.0754174 1.2261886 1.2283352 1.2438684 #>  [257,] 0.48647176 0.5579976 0.6006649 0.6119598 0.7387974 0.7802803 0.8583442 #>  [258,] 0.43506913 0.5391376 0.6461015 0.6811928 0.6904930 0.6969626 0.7252567 #>  [259,] 0.37417090 0.4476184 0.4882234 0.5305497 0.5619262 0.5749872 0.5780573 #>  [260,] 0.26602341 0.3696375 0.5428405 0.5524009 0.6190162 0.6323793 0.6631650 #>  [261,] 0.30755896 0.4069907 0.4897795 0.5896025 0.6423458 0.6619335 0.7380835 #>  [262,] 0.87513212 0.8884979 1.0680420 1.1393274 1.1396031 1.1860521 1.1896254 #>  [263,] 0.49525537 0.6725715 0.6761964 0.9199260 0.9841020 0.9978282 1.0117157 #>  [264,] 0.18827720 0.2546782 0.3868842 0.4716379 0.5429071 0.5956364 0.6044887 #>  [265,] 0.42894189 0.4353319 0.4432302 0.4857164 0.5329026 0.5482758 0.5635393 #>  [266,] 0.25045672 0.2710929 0.4708972 0.5162898 0.5327237 0.5524315 0.5699487 #>  [267,] 0.52834264 0.5433548 0.5604826 0.5959849 0.6236188 0.6259892 0.6426364 #>  [268,] 0.32988129 0.3793187 0.3844583 0.4696230 0.4803062 0.5026009 0.5390381 #>  [269,] 0.18300368 0.3432129 0.3918867 0.3968774 0.3993446 0.4137245 0.4676192 #>  [270,] 0.86896451 0.9639243 1.0017350 1.0798755 1.0816994 1.1340912 1.1946051 #>  [271,] 0.56897844 0.6081810 0.6576379 0.6616638 0.6855399 0.6938124 0.6972943 #>  [272,] 0.54541010 0.6420312 0.6608451 0.6613899 0.6681265 0.7305295 0.7430614 #>  [273,] 0.73347994 0.8465477 1.1160790 1.1382766 1.2940348 1.3259347 1.3295703 #>  [274,] 0.56179790 0.5633598 0.6046600 0.6593915 0.6746376 0.6802847 0.6959795 #>  [275,] 0.30184308 0.4086542 0.5028624 0.5976579 0.6483097 0.6551563 0.6860164 #>  [276,] 0.48647176 0.5944359 0.6651767 0.6984652 0.8284555 0.8775649 0.9402936 #>  [277,] 0.50560499 0.5145091 0.8132974 0.8498104 0.8627283 1.0182137 1.0242913 #>  [278,] 0.33895914 0.3857887 0.3905421 0.5841207 0.5949830 0.6395879 0.6679342 #>  [279,] 0.53922460 0.6949346 0.7261193 0.7608118 0.7728020 0.7753395 0.7791474 #>  [280,] 0.99073983 1.1883962 1.2130722 1.2594632 1.2628498 1.3213913 1.3542232 #>  [281,] 0.32496451 0.3293844 0.6091527 0.6186299 0.6918162 0.7492617 0.7573279 #>  [282,] 0.17114958 0.3682684 0.4984175 0.5009913 0.6056312 0.6576379 0.6828399 #>  [283,] 0.37956358 0.4741423 0.7434177 0.7802803 0.9009052 1.0024264 1.0787113 #>  [284,] 0.57630488 0.5989262 0.6371668 0.6986623 0.7165424 0.8522693 0.8607963 #>  [285,] 0.96127875 1.1456643 1.1858160 1.1887501 1.2111925 1.2512319 1.2886716 #>  [286,] 0.23071329 0.4220676 0.5028624 0.5756321 0.6216857 0.6470824 0.6672852 #>  [287,] 0.45179510 0.4902426 0.5482758 0.5528379 0.5539200 0.5861422 0.6033399 #>  [288,] 0.60463571 0.6141290 0.6205107 0.6227454 0.6347660 0.6388860 0.7071117 #>  [289,] 0.43646265 0.5629448 0.6015098 0.6556296 0.6576418 0.6755581 0.7216820 #>  [290,] 0.56585902 0.5679776 0.6080726 0.6872571 0.7498082 0.7663848 1.0141766 #>  [291,] 0.62735364 0.6495029 0.6625934 0.7151501 0.7515179 0.7710486 0.8507664 #>  [292,] 0.22878182 0.3396584 0.3892892 0.4104549 0.4836229 0.4911964 0.4954789 #>  [293,] 0.60634613 0.6666488 0.6861381 0.6986623 0.7545343 0.7649585 0.7910862 #>  [294,] 0.38805056 0.4498919 0.6853186 0.9474066 0.9680088 0.9994424 1.0367832 #>  [295,] 0.51757256 0.6747283 0.7298909 0.7571095 0.8113156 0.8283727 0.8496084 #>  [296,] 0.63212619 0.8047347 0.8152201 0.8836643 0.9229082 1.0349735 1.0531388 #>  [297,] 0.32900153 0.3444804 0.5011929 0.7008242 0.8476209 0.8540642 0.9150012 #>  [298,] 0.26273814 0.4762465 0.6166295 0.6237519 0.6945691 0.7132237 0.7343668 #>  [299,] 0.32363757 0.3677441 0.4370087 0.4815012 0.4927753 0.5824831 0.6065853 #>  [300,] 0.53280391 0.5650569 0.5718724 0.5727189 0.5839480 0.5864405 0.5937900 #>  [301,] 0.41688403 0.6499172 0.7391521 0.8168438 0.8183633 0.8485043 0.8685294 #>  [302,] 0.35683283 0.4759985 0.4871968 0.5153501 0.5811986 0.5849063 0.5945904 #>  [303,] 0.53749139 0.5700176 0.7094925 0.7627864 0.8229863 0.8233338 0.8733209 #>  [304,] 0.52492380 0.5265993 0.5521428 0.6326560 0.6572142 0.6924296 0.6952549 #>  [305,] 1.39703563 1.4033121 1.4962233 1.5342968 1.6452324 1.6769069 1.7124617 #>  [306,] 0.84764263 0.9538255 0.9577152 0.9988434 1.0378118 1.0722361 1.0803385 #>  [307,] 0.59936167 0.6205217 0.6336612 0.7503298 0.7979978 0.8203545 0.8302238 #>  [308,] 0.47915846 0.5605553 0.5808979 0.5811294 0.6716297 0.7484315 0.7896864 #>  [309,] 0.32637271 0.4472732 0.5173477 0.6028971 0.7055776 0.7871819 0.8010309 #>  [310,] 0.51275938 0.5154280 0.5943197 0.8088378 0.9379039 0.9439662 0.9487413 #>  [311,] 0.35478609 0.5154280 0.6445435 0.6619335 0.6725715 0.7594103 0.8315241 #>  [312,] 0.38578868 0.4649801 0.4805357 0.5250736 0.6207739 0.6277543 0.6854813 #>  [313,] 0.29978427 0.3183795 0.3558653 0.4606527 0.4791298 0.5054889 0.5188999 #>  [314,] 0.30483092 0.3777833 0.4262917 0.4441846 0.4473519 0.4941092 0.5051892 #>  [315,] 0.96100860 1.1087384 1.2162566 1.2940348 1.4469828 1.4714347 1.4781760 #>  [316,] 0.48949255 0.5325063 0.5788705 0.5845617 0.5849063 0.6005189 0.6471264 #>  [317,] 0.66386778 0.7300812 0.8050419 0.8178860 0.8552304 0.9020382 0.9099141 #>  [318,] 0.57206369 0.6150804 0.6406516 0.6676718 0.6991062 0.7232132 0.7347795 #>  [319,] 0.33665044 0.4110101 0.4410517 0.4857843 0.5824235 0.5862089 0.6056312 #>  [320,] 0.49595953 0.5964400 0.6285624 0.6466962 0.6510060 0.7038352 0.7355442 #>  [321,] 0.58089787 0.7932522 0.8454796 0.8815356 0.8914334 0.8949897 0.8992689 #>  [322,] 0.31172176 0.4158863 0.4973407 0.5179107 0.5768342 0.6228972 0.6251583 #>  [323,] 0.84289775 0.8619005 1.1663163 1.2063106 1.2226546 1.2624525 1.2866420 #>  [324,] 0.64840508 0.6848707 0.7264004 0.7426644 0.7459183 0.8536422 0.8610445 #>  [325,] 0.44851717 0.4722927 0.4728345 0.6716294 0.6955927 0.7489983 0.8049712 #>  [326,] 0.59658097 0.6190225 0.6870597 0.7087235 0.7291209 0.7471520 0.7868124 #>  [327,] 0.09264610 0.2986939 0.4194199 0.4547967 0.4606917 0.4871268 0.5136146 #>  [328,] 0.57013102 0.5795669 0.5991337 0.6152089 0.6166295 0.6188046 0.6575761 #>  [329,] 0.33049323 0.4071002 0.4590610 0.4876406 0.5530217 0.5997464 0.6254507 #>  [330,] 0.15973661 0.4220069 0.4525059 0.4570490 0.5904876 0.6099311 0.6340673 #>  [331,] 0.16384041 0.3834915 0.4068355 0.5051892 0.5111909 0.5148367 0.5219100 #>  [332,] 0.40059847 0.4336712 0.4648630 0.5240293 0.5733186 0.5968819 0.6226108 #>  [333,] 0.28757548 0.3994294 0.4097271 0.4451620 0.4475093 0.4941980 0.5127341 #>  [334,] 0.52417810 0.5327075 0.5511458 0.5547268 0.5630224 0.5857379 0.5945732 #>  [335,] 0.57829312 0.8205998 1.0720157 1.1270571 1.1513176 1.2885444 1.3046630 #>  [336,] 0.11385865 0.3560302 0.3957990 0.4066190 0.4291361 0.4323948 0.4834661 #>  [337,] 0.33762280 0.3644681 0.4438898 0.4722689 0.4871268 0.5145684 0.5163652 #>  [338,] 0.52839554 0.6810432 0.7388299 0.7590968 0.7728020 0.8786167 0.9131434 #>  [339,] 0.72337321 0.7657519 0.7980421 0.8322180 0.8382928 0.8465477 0.9087380 #>  [340,] 0.95586884 1.1434552 1.1758217 1.1896264 1.3388191 1.4114340 1.4410743 #>  [341,] 0.23071329 0.5229960 0.5364420 0.5645295 0.6121149 0.6467638 0.6483097 #>  [342,] 0.23227173 0.3376228 0.3485338 0.4581076 0.4778043 0.4853453 0.5644730 #>  [343,] 0.73249644 0.7916668 0.8718715 0.8837718 0.9402543 0.9891305 0.9964043 #>  [344,] 0.50767908 0.6020568 0.6117965 0.6211115 0.6273695 0.6292865 0.6739771 #>  [345,] 0.34103192 0.4761455 0.4943793 0.4963708 0.5385889 0.5456726 0.5490092 #>  [346,] 0.56411305 1.0268650 1.1317621 1.2064823 1.2248829 1.2426631 1.3014474 #>  [347,] 0.56956637 0.5711716 0.5902476 0.6772880 0.6981290 0.7261384 0.7478822 #>  [348,] 0.62683368 0.6534946 0.7522906 0.7590683 0.7722264 0.8733297 0.9590086 #>  [349,] 0.37931868 0.3996034 0.4002825 0.4732887 0.5023200 0.5622260 0.5852560 #>  [350,] 1.19569127 1.3777556 1.5594700 1.5778751 1.6037402 1.6522831 1.6719931 #>  [351,] 0.37713451 0.4674927 0.5085814 0.5499298 0.5501306 0.5757111 0.5819610 #>  [352,] 0.54397808 0.8001534 0.8474790 0.8808708 0.8987976 0.9454327 1.0291767 #>  [353,] 0.30265640 0.4515339 0.6757969 0.7553914 0.7786231 0.8053766 0.8339538 #>  [354,] 0.27253036 0.3957990 0.4121097 0.4204461 0.4438898 0.4540991 0.4708804 #>  [355,] 0.16675459 0.2207788 0.2213901 0.4170733 0.4404965 0.4794480 0.5254510 #>  [356,] 0.43920040 0.7248170 0.8398839 0.9218868 0.9457345 1.0213071 1.0472074 #>  [357,] 0.32589349 0.4493798 0.4639484 0.4728720 0.5015384 0.5230872 0.5415420 #>  [358,] 0.34432341 0.4663684 0.4761947 0.4873848 0.4987085 0.5372583 0.5446964 #>  [359,] 0.58723992 0.6518823 0.6553773 0.6727212 0.6948689 0.7069972 0.7231017 #>  [360,] 0.28753525 0.5395772 0.5831157 0.5982360 0.5993617 0.6376698 0.6485342 #>  [361,] 0.39484888 0.5173477 0.5366267 0.5805340 0.6701564 0.6879880 0.6882930 #>  [362,] 0.29166433 0.3709495 0.4043286 0.5110600 0.5619262 0.5980034 0.6175919 #>  [363,] 0.43795017 0.6253316 0.7804054 0.9325104 1.0419792 1.0461011 1.0508151 #>  [364,] 0.39591120 0.7267307 0.7633628 0.7856840 0.7936963 0.8479531 0.8548373 #>  [365,] 0.20565379 0.2825492 0.2924426 0.3865451 0.4864442 0.5222855 0.5978089 #>  [366,] 0.32498092 0.3257801 0.3529146 0.3612818 0.3620183 0.3734872 0.4597652 #>  [367,] 0.49329181 0.4969880 0.6285286 0.6792715 0.6965077 0.7039570 0.7287890 #>  [368,] 0.40771354 0.4235132 0.4659465 0.5891303 0.6071685 0.6091096 0.6357548 #>  [369,] 0.61767943 0.6433221 0.6766698 0.7302169 0.7648353 0.8178860 0.8282420 #>  [370,] 0.14923617 0.3736255 0.4674927 0.5616858 0.6994986 0.7589937 0.7648353 #>  [371,] 0.24577553 0.3255263 0.3319527 0.3872288 0.4062461 0.4280563 0.4336705 #>  [372,] 0.35683283 0.3833418 0.4646070 0.4906479 0.5325063 0.5437360 0.5476377 #>  [373,] 0.38555668 0.3998032 0.4066190 0.5002653 0.5249243 0.5342270 0.5582592 #>  [374,] 0.36075204 0.7332057 0.7921911 0.8124798 0.8265301 0.8467156 0.8468371 #>  [375,] 0.56359942 0.6484051 0.7510524 0.7516923 0.7940095 0.8103922 0.8313747 #>  [376,] 0.23227173 0.3549732 0.3644681 0.3708714 0.4178286 0.4904334 0.5033109 #>  [377,] 0.55363397 0.5963860 0.7637623 0.8470036 0.8682726 0.8750932 0.8963105 #>  [378,] 0.46127835 0.6190225 0.6612137 0.6737604 0.6882965 0.7209005 0.7633981 #>  [379,] 0.97714416 1.0833669 1.1389182 1.2652150 1.3440570 1.3468882 1.4332618 #>  [380,] 0.51286644 0.6227454 0.6707661 0.6988698 0.7322471 0.8206869 0.9128331 #>  [381,] 0.63930826 0.8420370 0.8822166 0.9150012 0.9229652 0.9310855 0.9378289 #>  [382,] 0.73586059 0.7725426 0.8783582 0.9206959 0.9325104 0.9800820 0.9877802 #>  [383,] 0.33893763 0.4374798 0.4749802 0.4759978 0.4893140 0.4934228 0.4937165 #>  [384,] 0.59153169 0.8178844 0.9177932 0.9333028 0.9388718 0.9603576 1.0295447 #>  [385,] 0.51345387 0.5265993 0.5544450 0.5670350 0.6030360 0.7268454 0.7584169 #>  [386,] 0.23264498 0.3708714 0.3747914 0.4358022 0.4728031 0.4750619 0.4834017 #>  [387,] 0.64991719 0.7618960 0.8794045 0.8852594 0.9138068 0.9399565 1.0133782 #>  [388,] 0.48082990 0.8092623 0.8850054 1.0608725 1.0699359 1.1437537 1.2034974 #>  [389,] 0.42792814 0.5291528 0.5717433 0.6022260 0.6041286 0.6501275 0.7393235 #>  [390,] 0.83039661 0.8315643 0.8626644 0.8684044 0.8736451 0.8775793 0.8799495 #>  [391,] 0.44903679 0.6447991 0.7056075 0.7180029 0.7342716 0.7363363 0.7469018 #>  [392,] 1.27295698 1.3002151 1.5010944 1.5332080 1.5432959 1.5727286 1.6656172 #>  [393,] 0.53671923 0.5434676 0.5714999 0.6448653 0.7501965 0.7910862 0.8011135 #>  [394,] 0.34981032 0.4885246 0.5391909 0.6052670 0.6319952 0.6913456 0.7002086 #>  [395,] 0.35809595 0.4580135 0.5548590 0.6485247 0.6550126 0.6679863 0.6925922 #>  [396,] 0.50387357 0.5450374 0.6065157 0.6195511 0.6542293 0.6932657 0.7312848 #>  [397,] 0.73287154 0.8128872 0.9177932 1.1516997 1.2213397 1.2573432 1.2710683 #>  [398,] 0.97714416 1.1968051 1.3339641 1.3977465 1.4435494 1.4512482 1.4524331 #>  [399,] 0.51461738 0.5563139 0.5824501 0.6496164 0.6642630 0.7170544 0.7363363 #>  [400,] 0.16384041 0.4128020 0.4441846 0.4773690 0.4818558 0.5162194 0.5188630 #>  [401,] 0.75725601 1.1071738 1.3087544 1.3522474 1.3612716 1.4088868 1.4091522 #>  [402,] 0.45899657 0.5387303 0.7775440 0.8491732 0.8733115 0.8978619 0.9513088 #>  [403,] 0.44668542 0.4854788 0.5134891 0.5429071 0.5650681 0.5987747 0.6064846 #>  [404,] 0.26614652 0.3597163 0.4035137 0.4038492 0.4336712 0.4562779 0.4810058 #>  [405,] 0.31434557 0.3353735 0.3765060 0.5338129 0.5506415 0.5788999 0.6790753 #>  [406,] 0.47328870 0.5036067 0.5600212 0.5918565 0.6058425 0.6075533 0.6144054 #>  [407,] 0.32763508 0.3687349 0.3865451 0.5375960 0.5418696 0.5848288 0.6202173 #>  [408,] 0.32180370 0.4068171 0.4313897 0.5168037 0.5214221 0.5735838 0.5849558 #>  [409,] 0.42503333 0.4788569 0.5431709 0.5600070 0.6164373 0.6198936 0.6423458 #>  [410,] 0.29712305 0.3048309 0.3608982 0.3834915 0.4128020 0.4170733 0.4207614 #>  [411,] 0.14923617 0.4070119 0.5085814 0.6317119 0.6953241 0.7231510 0.7302169 #>  [412,] 0.35062600 0.3871472 0.5080292 0.5757111 0.6029794 0.6501234 0.6677680 #>  [413,] 0.46436442 0.4732303 0.5807523 0.7692808 0.8132974 0.8604506 0.9092865 #>  [414,] 0.38058861 0.3821449 0.4612784 0.5268288 0.5965810 0.6765079 0.7620607 #>  [415,] 0.77062918 0.8887522 0.9304296 0.9377795 1.0131506 1.0378118 1.0493909 #>  [416,] 0.46247427 0.5701310 0.7464571 0.7484315 0.7838205 0.7932522 0.7979358 #>  [417,] 0.37841384 0.4517760 0.6453920 1.0196440 1.0501254 1.0610421 1.0796580 #>  [418,] 0.20599068 0.2659855 0.3247494 0.4411470 0.5152206 0.5219731 0.5381903 #>  [419,] 1.50165164 1.5566545 1.7562097 1.7781163 1.8526217 1.9944888 2.0368236 #>  [420,] 0.81859155 0.8780857 0.9018925 0.9411896 1.0966700 1.1186711 1.1234300 #>  [421,] 0.41949584 0.5522065 0.5780912 0.6872571 0.7288330 0.7911677 0.8066617 #>  [422,] 0.33332867 0.4065677 0.4189319 0.4599582 0.5427179 0.5443775 0.5534736 #>  [423,] 0.35062600 0.3771345 0.4051693 0.5329026 0.5616858 0.6317119 0.6499900 #>  [424,] 0.24539365 0.3055800 0.5220515 0.5645295 0.5726009 0.5752391 0.5769330 #>  [425,] 0.24877463 0.3403516 0.5012212 0.5261316 0.5376911 0.6020568 0.6328536 #>  [426,] 0.43766175 0.6287463 0.7358413 0.7534718 0.8051021 0.8804819 0.9107758 #>  [427,] 0.58987297 0.7968189 0.8139191 0.8293837 0.8868067 0.9157723 1.0249528 #>  [428,] 0.30184308 0.4684249 0.4866521 0.5023200 0.6287097 0.6325972 0.6470824 #>  [429,] 0.45177604 0.4941703 0.8057426 0.9143950 0.9217400 0.9324001 0.9365115 #>  [430,] 0.24132467 0.3923103 0.4582989 0.4866541 0.5227396 0.5416229 0.6058351 #>  [431,] 0.42001543 0.5652119 0.8454878 0.8882427 0.9403110 1.0172094 1.0498040 #>  [432,] 0.51321712 0.8164687 0.8579608 0.8920081 0.9723560 0.9831813 1.0222538 #>  [433,] 1.01222969 1.0500083 1.0545793 1.1011729 1.1103671 1.1375053 1.1868614 #>  [434,] 0.18572872 0.2213901 0.2470806 0.3162534 0.4262917 0.4307927 0.4845802 #>  [435,] 0.39425896 0.5464167 0.5756912 0.5775620 0.6798075 0.6968326 0.7089528 #>  [436,] 0.32608504 0.4914423 0.6273553 0.6945955 0.7511034 0.7578897 0.8682726 #>  [437,] 0.34778487 0.3594215 0.4012463 0.4290355 0.4688063 0.4837338 0.5030396 #>  [438,] 0.26598554 0.3414514 0.3439987 0.3912617 0.5118463 0.6041066 0.6064915 #>  [439,] 0.38165349 0.5201248 0.5235431 0.5301581 0.5487316 0.5629739 0.6012823 #>  [440,] 0.36730116 0.3872288 0.3986254 0.4220069 0.5105140 0.5648409 0.5983522 #>  [441,] 0.26185737 0.3643519 0.4547967 0.4564003 0.4676192 0.5015422 0.5102585 #>  [442,] 0.40163003 0.4501130 0.4769364 0.5594759 0.5616067 0.6179074 0.6418433 #>  [443,] 0.40384467 0.5578626 0.5667210 0.5976073 0.6186299 0.6344208 0.6355452 #>  [444,] 0.44371287 0.4556674 0.4663684 0.5155855 0.5720596 0.5782733 0.5909827 #>  [445,] 0.54652483 0.5578626 0.6471264 0.6512282 0.7213584 0.7248475 0.7554409 #>  [446,] 0.42217148 0.9146240 1.1108272 1.2406298 1.2672037 1.4422839 1.4768891 #>  [447,] 0.31381081 0.3215900 0.3965095 0.4075164 0.4363674 0.5776085 0.5872399 #>  [448,] 0.63930826 0.7068138 0.7905586 0.8485288 0.9448100 0.9454826 0.9463739 #>  [449,] 0.62195737 0.7026467 0.7706292 0.7774977 0.7842577 0.7873064 0.7992068 #>  [450,] 0.53015814 0.5585327 0.5782388 0.7680610 0.8266175 0.8280137 0.8281287 #>  [451,] 0.70417733 0.7780667 0.8783416 0.8879344 1.0176479 1.0418817 1.2696049 #>  [452,] 0.50354047 0.5132171 0.8498347 0.9109355 0.9793724 1.0243700 1.0253382 #>  [453,] 0.52170688 0.5439781 0.6534946 0.6685688 0.7427960 0.7450305 0.8685284 #>  [454,] 0.80351764 0.8532130 0.9507968 0.9810141 1.0468914 1.0584270 1.0669432 #>  [455,] 0.46280133 0.5229958 0.5764522 0.6081336 0.6152350 0.6236188 0.6359586 #>  [456,] 0.26869731 0.5338129 0.5427306 0.6119627 0.6125931 0.6205152 0.6449372 #>  [457,] 0.87561469 0.8968453 0.9726383 1.0795648 1.1334146 1.3649339 1.3836707 #>  [458,] 0.79982698 0.8092623 1.1324100 1.2352794 1.2629159 1.3370564 1.3601596 #>  [459,] 0.40448080 0.4182446 0.5172354 0.5427874 0.6287097 0.6452659 0.6860164 #>  [460,] 0.42351320 0.4460953 0.5320984 0.6444653 0.6485247 0.6538284 0.6867619 #>  [461,] 0.61243142 0.6903371 0.7423286 0.7912806 0.8678948 0.8774237 0.9365715 #>  [462,] 0.32897241 0.4332854 0.4388504 0.4872580 0.5133867 0.5148992 0.5629448 #>  [463,] 0.33848304 0.3942889 0.5551817 0.5949946 0.6539644 0.6548030 0.7181175 #>  [464,] 0.52402932 0.6358272 0.6989289 0.7186997 0.7526134 0.7627532 0.7737235 #>  [465,] 0.33869784 0.4217906 0.4451055 0.5199285 0.5272405 0.5281799 0.5352541 #>  [466,] 0.62023075 0.8055591 0.8706024 0.9126600 0.9148494 0.9700600 0.9813962 #>  [467,] 0.53177739 0.5775509 0.6965567 0.7393516 0.7445203 0.8152895 0.8313566 #>  [468,] 0.59239752 0.7239992 0.8754365 0.9070943 0.9336997 0.9399318 0.9399565 #>  [469,] 0.69957504 0.7011178 0.7517258 0.7554027 0.8010461 0.8049261 0.8078077 #>  [470,] 0.22974326 0.3341520 0.3942590 0.4430572 0.5006644 0.5370131 0.5752391 #>  [471,] 0.89498122 1.5337193 1.5472375 1.7110910 1.7227622 1.7304236 1.7410348 #>  [472,] 0.32938440 0.3845408 0.6645202 0.6656692 0.7152557 0.8008561 0.8070347 #>  [473,] 0.42777760 0.7259542 0.8710555 0.9214144 0.9290528 0.9609171 0.9653723 #>  [474,] 0.76603993 0.8581779 0.8886171 0.9190550 0.9891400 1.0584270 1.1529873 #>  [475,] 0.77726715 1.1098039 1.2262261 1.2654249 1.2723441 1.2752180 1.3760421 #>  [476,] 0.58366744 0.6426364 0.6832611 0.7173183 0.7370398 0.7393516 0.7537245 #>  [477,] 0.13761279 0.3944048 0.4469318 0.4716379 0.5134891 0.5294680 0.5660566 #>  [478,] 0.31583596 0.4054191 0.4749802 0.5201450 0.5483254 0.5512335 0.5521428 #>  [479,] 0.28753525 0.5008775 0.6269081 0.6378631 0.6505448 0.6657796 0.6929623 #>  [480,] 0.39950149 0.4916994 0.5214541 0.5430513 0.5443225 0.5468600 0.5844119 #>  [481,] 0.58655601 0.5960008 0.6626598 0.6983580 0.7287890 0.7326394 0.8154726 #>  [482,] 0.63039712 0.6876750 0.7656657 0.7757077 0.8108355 0.8265923 0.8490086 #>  [483,] 0.49769597 0.5235431 0.6090764 0.6767886 0.7040224 0.8078088 0.8285459 #>  [484,] 1.03005851 1.0591070 1.0854438 1.1137166 1.1365819 1.1905522 1.2007236 #>  [485,] 0.91294242 1.0354632 1.2017778 1.2398530 1.2638908 1.2698381 1.3198699 #>  [486,] 0.59014553 0.7887583 0.7944107 0.9499849 0.9881559 0.9889523 1.0482489 #>  [487,] 0.41575517 0.5989865 0.7778703 0.8464341 0.8604506 0.8716993 0.9454519 #>  [488,] 0.47028570 0.4893140 0.5010677 0.5132861 0.5696109 0.5717142 0.6076039 #>  [489,] 0.26469039 0.3747914 0.4492595 0.4514373 0.4655046 0.4927753 0.5191488 #>  [490,] 0.85318661 0.9859578 1.0294552 1.0826005 1.1597600 1.2830096 1.2887715 #>  [491,] 0.32159000 0.4785917 0.5605023 0.5713210 0.5969857 0.5988442 0.6097561 #>  [492,] 0.44131381 0.6992137 0.7434177 0.7732773 1.1004053 1.1313126 1.1603603 #>  [493,] 0.51596135 0.6168797 0.6240537 0.6656510 0.6965077 0.6989282 0.7209382 #>  [494,] 0.50877707 0.5305497 0.5628012 0.5735838 0.5748039 0.6161371 0.6401227 #>  [495,] 0.54050609 0.6888260 0.6984455 0.7786231 0.7796350 0.7833600 0.8039336 #>  [496,] 0.26597476 0.4241345 0.4441853 0.4458431 0.4575622 0.4599199 0.4606527 #>  [497,] 0.69586488 0.8029193 0.8278103 0.8286602 0.8532130 0.8581779 0.8600516 #>  [498,] 0.40381719 0.4687001 0.4853756 0.4905121 0.5006644 0.5695137 0.5982686 #>  [499,] 0.87391223 0.8765178 0.8973212 0.9429621 0.9590074 0.9801095 0.9896054 #>  [500,] 0.42204818 0.4914423 0.6125057 0.7348791 0.7510285 0.7619560 0.7669684 #>  [501,] 0.76189601 0.7840481 0.8823333 0.9408537 0.9828514 1.0495458 1.0585420 #>  [502,] 0.42179058 0.4581076 0.4612797 0.4623773 0.5391146 0.5418420 0.5968797 #>  [503,] 0.35927611 0.4044808 0.5442634 0.7020964 0.7658580 0.8191116 0.8340703 #>  [504,] 0.31172176 0.4119396 0.5418696 0.5934188 0.5978089 0.6980159 0.6985284 #>  [505,] 1.01482077 1.1859332 1.2202678 1.2253239 1.2368638 1.2700034 1.3877294 #>  [506,] 0.31568046 0.5008775 0.5237653 0.5320984 0.5750439 0.6323055 0.6339414 #>  [507,] 0.26769508 0.3693587 0.4242231 0.4358022 0.4492595 0.4899177 0.5199285 #>  [508,] 0.55703918 0.5640150 0.6200190 0.6619203 0.6938124 0.7887583 0.8061597 #>  [509,] 0.39953155 0.5285368 0.6004608 0.6064321 0.6354256 0.6405840 0.6444376 #>  [510,] 0.84629264 0.9804617 1.1221070 1.1423025 1.2855747 1.3229535 1.3305998 #>  [511,] 0.37750570 0.4455877 0.4606917 0.4607841 0.5075487 0.5157298 0.5163133 #>  [512,] 0.40972713 0.4357215 0.4388504 0.4504554 0.5518156 0.5526944 0.5661026 #>  [513,] 0.84981037 0.8874781 0.9756547 1.0930675 1.2284050 1.2310120 1.3175279 #>  [514,] 0.46538934 0.5536340 0.5597603 0.6388860 0.6663305 0.6946238 0.7348791 #>  [515,] 0.39095019 0.8233904 0.9190209 0.9636443 1.0250457 1.1696396 1.2000606 #>  [516,] 0.42215355 0.6273300 0.6434553 0.6921028 0.7311006 0.7446318 0.8102643 #>  [517,] 0.38079533 0.4159646 0.5976073 0.6327408 0.6512282 0.6972006 0.7044840 #>  [518,] 0.49531253 0.5670245 0.8278103 0.8683974 0.8894576 0.9077918 0.9612524 #>  [519,] 0.81288717 1.4432566 1.5188627 1.5383684 1.6320416 1.6556939 1.6676806 #>  [520,] 0.26472027 0.3323653 0.4038492 0.4284577 0.5296864 0.5528379 0.5877579 #>  [521,] 0.33009762 0.4830914 0.5115742 0.5213231 0.5563139 0.6483922 0.6947833 #>  [522,] 0.34005854 0.4937364 0.6052557 0.6318218 0.7156928 0.7347204 0.7424546 #>  [523,] 1.04533705 1.2624525 1.2846573 1.3535788 1.5649542 1.6477822 1.7021908 #>  [524,] 0.64655077 0.7033830 0.7468988 0.7688183 0.8237459 0.8281722 0.8530957 #>  [525,] 0.21559037 0.5687630 0.6353647 0.6359485 0.6626566 0.7151501 0.7609164 #>  [526,] 0.32966510 0.3720357 0.3944048 0.6241143 0.7354569 0.7372228 0.7481284 #>  [527,] 0.11014585 0.3821449 0.6737604 0.7334115 0.7408824 0.7450305 0.7590683 #>  [528,] 0.35444866 0.6228079 0.6425978 0.6829477 0.6915035 0.7073909 0.7168803 #>  [529,] 0.46089443 0.5014951 0.5507441 0.6619961 0.6780399 0.7639565 0.8203909 #>  [530,] 0.41688403 0.4304947 0.5820362 0.6056666 0.7095518 0.7129964 0.8507649 #>  [531,] 0.40084481 0.5522254 0.5654279 0.5772985 0.5950111 0.6245131 0.6261714 #>  [532,] 0.38079533 0.4038447 0.4902990 0.4991854 0.5342959 0.5477619 0.7347795 #>  [533,] 0.59638597 0.6842969 0.6843928 0.7759565 0.7986166 0.8867989 0.8909814 #>  [534,] 0.62018242 0.6706836 0.7423286 0.8565488 0.9186459 0.9399565 0.9433221 #>  [535,] 0.33160695 0.5352670 0.5429895 0.5486217 0.5628012 0.5872724 0.5902972 #>  [536,] 0.79705500 0.8653645 1.2117551 1.3946685 1.4618463 1.5006401 1.5779180 #>  [537,] 0.30054048 0.3494427 0.3954204 0.4012463 0.5441546 0.5635931 0.6187139 #>  [538,] 0.55444502 0.5728185 0.6483425 0.7023191 0.7578219 0.8172540 0.8215886 #>  [539,] 0.32656845 0.4016300 0.4225708 0.5395776 0.5811302 0.6406516 0.6562056 #>  [540,] 0.40947820 0.4472378 0.4866325 0.5723292 0.5952403 0.6005189 0.6111583 #>  [541,] 0.13605342 0.5070417 0.5295698 0.5307206 0.5359880 0.5649974 0.5880154 #>  [542,] 0.89200814 0.8968453 0.9109355 0.9439857 0.9831988 1.0145061 1.0688377 #>  [543,] 0.43700867 0.4506103 0.4514373 0.4757521 0.4954672 0.5271303 0.5271991 #>  [544,] 0.52403629 0.5430272 0.5982686 0.6084430 0.6676718 0.6715535 0.6827524 #>  [545,] 0.26406906 0.3527725 0.3994294 0.4081393 0.4576793 0.4761947 0.5109304 #>  [546,] 0.40924030 0.4618772 0.4963708 0.5370692 0.5622166 0.6283467 0.6302799 #>  [547,] 0.36075204 0.6924369 0.7061478 0.7082476 0.8253049 0.8388957 0.8554872 #>  [548,] 0.92449631 0.9488214 0.9638535 1.0437005 1.1064288 1.1448842 1.1810709 #>  [549,] 0.33049323 0.4348400 0.4493798 0.4662409 0.5681195 0.5831249 0.5862775 #>  [550,] 0.44751160 0.7578219 0.7720874 0.7964321 0.8217016 0.8852683 0.8980910 #>  [551,] 0.36990975 0.4068171 0.5887291 0.5964400 0.6114813 0.6161371 0.6396644 #>  [552,] 0.34462970 0.4995926 0.6419276 0.6628079 0.6697857 0.6818518 0.6876750 #>  [553,] 0.56585902 0.5780912 0.5873839 0.7292244 0.7809619 0.8091214 0.8241424 #>  [554,] 0.48665410 0.5052197 0.5188999 0.5300460 0.5438196 0.5880154 0.5948096 #>  [555,] 0.30868219 0.4988244 0.5194916 0.5406989 0.6090764 0.6459945 0.6731011 #>  [556,] 0.72606662 0.7853102 0.8098356 0.8502315 0.8831779 0.9793724 0.9924276 #>  [557,] 0.62001905 0.6855399 0.7175596 0.9201843 0.9864097 0.9889523 0.9939295 #>  [558,] 0.45153387 0.5875832 0.6071064 0.6741233 0.6965567 0.7184077 0.7720202 #>  [559,] 0.46834021 0.9519649 0.9682620 1.0114219 1.0166187 1.0196440 1.0309844 #>  [560,] 0.51345387 0.5207672 0.5391376 0.5907716 0.6477271 0.6483425 0.6724075 #>  [561,] 0.37841384 0.4941703 0.8443504 0.8713161 0.9042904 1.0825557 1.0921531 #>  [562,] 0.37203569 0.5460890 0.6097233 0.6147053 0.6381927 0.6710613 0.6789451 #>  [563,] 0.39157107 0.5020439 0.5317774 0.6223959 0.6754986 0.6903727 0.6934095 #>  [564,] 0.57281847 0.5847738 0.5929792 0.6004608 0.6879317 0.7822059 0.7919644 #>  [565,] 0.29056256 0.4903020 0.5182628 0.5250736 0.5587434 0.5720149 0.5841207 #>  [566,] 0.63704601 0.6398175 0.8445840 0.8783896 0.9305689 0.9399246 1.0077010 #>  [567,] 0.52839554 0.5733805 0.6895491 0.7163225 0.7753395 0.7951380 0.8349838 #>  [568,] 0.56702448 0.6013228 0.7017922 0.7676044 0.7749511 0.7913768 0.7924056 #>  [569,] 0.42724301 0.4691420 0.7224444 0.9044477 0.9248496 1.0038575 1.0076223 #>  [570,] 0.31980172 0.6696607 0.7978085 0.8283067 0.8734606 0.8833447 0.9079143 #>  [571,] 0.85323256 0.9009176 0.9809515 0.9866872 1.0140269 1.0272686 1.0432349 #>  [572,] 0.14725011 0.4872070 0.5586845 0.5776000 0.6164373 0.6801115 0.6824805 #>  [573,] 0.43501249 0.4604540 0.5370100 0.5494835 0.5500191 0.5622260 0.5687533 #>  [574,] 0.13657853 0.3074406 0.3855052 0.4582989 0.4757521 0.4777456 0.4811377 #>  [575,] 0.48309140 0.5462517 0.5483014 0.5905782 0.6065193 0.6496164 0.6589710 #>  [576,] 0.55803263 0.5649146 0.5890231 0.6981628 0.7163225 0.7662558 0.8077645 #>  [577,] 0.51286644 0.5775620 0.7559686 0.7894947 0.8420151 0.8846168 0.9078214 #>  [578,] 0.79513801 0.8883866 0.9737139 1.0060876 1.0672923 1.1106708 1.1172508 #>  [579,] 0.47560114 0.8227617 0.8540642 0.8645869 0.9122751 1.0059919 1.0492076 #>  [580,] 0.41245096 0.5612429 0.6299614 0.6363851 0.6467455 0.6597925 0.6670808 #>  [581,] 0.20704385 0.3364092 0.4403934 0.4599421 0.5307354 0.5960711 0.6078455 #>  [582,] 0.33298143 0.3389376 0.4432302 0.5132861 0.5222582 0.5528588 0.5548113 #>  [583,] 0.46229949 0.5324730 0.5675156 0.6004920 0.6299978 0.8367253 0.8445840 #>  [584,] 0.57829312 0.6023026 0.8133132 1.0223142 1.1233097 1.1286578 1.1305746 #>  [585,] 0.10540724 0.2642339 0.3283008 0.3908982 0.4670581 0.5188914 0.5717142 #>  [586,] 0.14239550 0.4910270 0.7041250 0.7162773 0.7180029 0.7887302 0.8047347 #>  [587,] 0.42217148 1.1152745 1.3280204 1.3972565 1.4389646 1.5975047 1.6102139 #>  [588,] 0.38714719 0.4051693 0.5501306 0.6603728 0.6747291 0.6817282 0.7846648 #>  [589,] 0.44232046 0.4967667 0.4990915 0.5365851 0.5968873 0.6041286 0.7157375 #>  [590,] 0.33353948 0.4659465 0.5118463 0.5219731 0.5311697 0.5376911 0.6246006 #>  [591,] 0.50106768 0.5415271 0.5528588 0.5670350 0.5914062 0.6312271 0.6326560 #>  [592,] 0.31577407 0.4125208 0.4411470 0.4995926 0.6064915 0.6076908 0.6264361 #>  [593,] 0.26825880 0.3554180 0.4054191 0.4068689 0.4934228 0.5464039 0.5548113 #>  [594,] 0.33895914 0.4649801 0.4650429 0.5128200 0.5376487 0.5406588 0.6690268 #>  [595,] 0.13915496 0.2340584 0.2708912 0.3138108 0.3257801 0.4252128 0.5275008 #>  [596,] 0.43897067 0.4527128 0.5123386 0.5146007 0.5168549 0.5232744 0.5307206 #>  [597,] 0.34941916 0.6032275 0.7214574 0.7547169 0.7614115 0.7885007 0.8018159 #>  [598,] 0.36991422 0.5645590 0.6117965 0.6485342 0.6807536 0.6848283 0.6898545 #>  [599,] 0.31980172 0.3788752 0.7674403 0.7739283 0.8189743 0.8722788 0.9361623 #>  [600,] 0.48426099 0.5207672 0.6194549 0.6393379 0.6932989 0.6973646 0.7007186 #>  [601,] 0.26006617 0.2725304 0.3158967 0.3668764 0.4323948 0.4552401 0.4840158 #>  [602,] 0.38769156 0.4552401 0.5095269 0.5272405 0.5274977 0.5441699 0.5649043 #>  [603,] 0.25657646 0.2836042 0.3949034 0.3993446 0.4173535 0.4688063 0.5472189 #>  [604,] 1.32156809 1.3504924 1.3969555 1.4435494 1.4801797 1.4848366 1.4868430 #>  [605,] 0.41404907 0.4704737 0.5342959 0.5345244 0.5811302 0.6150804 0.6210127 #>  [606,] 0.43306321 0.4586969 0.5011929 0.5145463 0.8625345 0.9122751 0.9699410 #>  [607,] 0.34329210 0.4830193 0.5118004 0.5476977 0.5932659 0.6057762 0.6194134 #>  [608,] 0.42596607 0.6944233 0.7267307 0.8123001 0.9014772 0.9925119 0.9933604 #>  [609,] 0.47358281 0.5819610 0.6953241 0.7589937 0.7695012 0.7875780 0.7886602 #>  [610,] 0.34534730 0.5612812 0.5807523 0.5989865 0.6997752 0.7098896 0.7948941 #>  [611,] 0.64972373 0.8296369 0.9359347 0.9935480 1.1170142 1.1857734 1.1874665 #>  [612,] 0.49950962 0.5461476 0.5844533 0.6887232 0.6939027 0.7236162 0.7311006 #>  [613,] 0.51034624 0.7005292 0.7464162 0.7627591 0.8220422 0.8241424 0.8468164 #>  [614,] 0.38805056 0.4248508 0.7260666 0.8164687 0.8281187 0.8882345 1.0253382 #>  [615,] 0.43766175 0.8169650 0.8245007 0.8265923 0.8405998 0.8724613 0.8773107 #>  [616,] 0.69532453 0.7127862 0.7691807 0.7691884 0.7951309 0.8584633 0.8640262 #>  [617,] 0.64950287 0.7247861 0.7384675 0.7691807 0.7726700 0.8476682 0.8815145 #>  [618,] 0.13605342 0.5232744 0.5260483 0.5335993 0.5367502 0.5455938 0.5888028 #>  [619,] 0.25825923 0.2879840 0.4423549 0.4902426 0.5083943 0.5250959 0.5347317 #>  [620,] 0.31589674 0.3201407 0.3876916 0.4226778 0.4617350 0.4785976 0.5274924 #>  [621,] 0.44408698 0.6433221 0.6638678 0.6777232 0.7736989 0.8373940 0.9120165 #>  [622,] 0.28126546 0.5167060 0.5367192 0.7041773 0.7545343 0.8406691 0.8651369 #>  [623,] 0.41596465 0.4991854 0.6152802 0.7225992 0.8132627 0.8433781 0.8465809 #>  [624,] 0.26221014 0.5396224 0.5595993 0.7720202 0.7737235 0.8131691 0.8660427 #>  [625,] 0.38445831 0.3996034 0.5338993 0.5494835 0.5902476 0.6058425 0.6347119 #>  [626,] 0.36658742 0.4937364 0.5472774 0.5476168 0.5586766 0.5969436 0.6302301 #>  [627,] 0.32897241 0.3486599 0.4220429 0.4364627 0.5622200 0.5980034 0.6064031 #>  [628,] 0.37410624 0.6279502 0.7018250 0.7688183 0.7724568 0.8454031 0.8507664 #>  [629,] 0.26825880 0.3158360 0.3937187 0.5249238 0.5618557 0.5973146 0.6264150 #>  [630,] 0.84463280 0.9022867 1.0874911 1.1521451 1.2804266 1.2991575 1.3448541 #>  [631,] 0.98897071 1.2417789 1.2483729 1.2487001 1.2849074 1.3082085 1.3190040 #>  [632,] 0.32574572 0.5030405 0.5052197 0.5295698 0.5416229 0.5672956 0.5750323 #>  [633,] 0.30270901 0.4509553 0.4590145 0.4887628 0.5700626 0.6730666 0.6831005 #>  [634,] 0.44948403 0.6207739 0.6279276 0.6566831 0.6619961 0.6659709 0.6783613 #>  [635,] 0.73347994 0.7657519 0.8861932 0.9669530 0.9756221 0.9824648 1.0882357 #>  [636,] 0.50484981 0.5307354 0.5466947 0.6086170 0.6292867 0.6924369 0.7148744 #>  [637,] 0.43328537 0.5622200 0.5982544 0.6015098 0.6658604 0.6797140 0.6816178 #>  [638,] 0.41045489 0.4320986 0.4384523 0.4502674 0.4554645 0.4670581 0.4932918 #>  [639,] 0.66086701 0.7749511 0.8464659 0.8518666 0.9008446 0.9173914 0.9406284 #>  [640,] 0.54476219 0.5511600 0.5763049 0.5958946 0.6063461 0.6241663 0.6340673 #>  [641,] 0.56411305 0.7459298 0.8866105 0.8905610 0.9595519 1.0019762 1.0151421 #>  [642,] 0.54500583 0.9673268 0.9894972 1.0137514 1.0668762 1.0915144 1.1120387 #>  [643,] 0.48426099 0.7384290 0.7874671 0.8274262 0.8342725 0.9013973 0.9054635 #>  [644,] 0.40368459 0.6131296 0.6675235 0.6772467 0.6972006 0.6983545 0.7128151 #>  [645,] 0.89879764 1.0247809 1.0521670 1.1617251 1.1691636 1.1796202 1.1970941 #>  [646,] 0.62876271 0.7177355 0.7281564 0.7292244 0.7359161 0.7627591 0.7793370 #>  [647,] 0.33665044 0.3531671 0.4876406 0.5594759 0.5681195 0.5719950 0.5870209 #>  [648,] 0.32606763 0.3569337 0.4322474 0.4492386 0.4954379 0.4954789 0.5764522 #>  [649,] 0.14725011 0.5431709 0.5708888 0.5966825 0.6538272 0.6593877 0.6732282 #>  [650,] 0.07637815 0.2207788 0.2470806 0.4153771 0.4374798 0.5222582 0.5330448 #>  [651,] 0.30270901 0.3407108 0.3557947 0.5113557 0.5512574 0.5949562 0.6009989 #>  [652,] 0.61830674 0.7341037 0.7748527 0.7758678 0.7865625 0.8087952 0.8117512 #>  [653,] 0.63039712 0.6765304 0.9430822 1.0162572 1.1465133 1.1485756 1.1951987 #>  [654,] 0.51450906 0.6629193 0.7098896 0.7489983 0.7677618 0.7692808 0.7863360 #>  [655,] 0.54500583 0.5595993 0.6071064 0.6125194 0.7765280 0.8038526 0.9116066 #>  [656,] 0.28360423 0.3918867 0.3937756 0.4780473 0.5184394 0.5858439 0.6270771 #>  [657,] 0.34462970 0.4548488 0.4969528 0.5376085 0.5398089 0.6002691 0.6335110 #>  [658,] 0.30054048 0.3126420 0.3594215 0.5350553 0.5454839 0.6213356 0.6301865 #>  [659,] 1.20182935 1.4486069 1.4698750 1.4833409 1.5672992 1.5837809 1.6682926 #>  [660,] 0.81125916 0.8651747 0.9517676 1.4962686 1.5231156 1.5239422 1.5367968 #>  [661,] 0.43040417 0.5000667 0.5587434 0.5760742 0.5824235 0.5951037 0.6023108 #>  [662,] 0.81968467 0.9210994 0.9602663 1.0076223 1.0104976 1.0173370 1.0274899 #>  [663,] 0.59668335 0.8984694 1.4052774 1.4679823 1.5275814 1.5736547 1.5979775 #>  [664,] 0.36421767 0.6314360 0.7358797 0.8023494 0.8736451 0.9290759 0.9463395 #>  [665,] 0.22118093 0.5257332 0.5364084 0.6771546 0.6917977 0.7471495 0.7911677 #>  [666,] 0.59719116 0.6057902 0.7122500 0.8067836 0.8223282 0.9391039 0.9569248 #>  [667,] 0.78052407 0.8887522 0.9402008 1.0722361 1.2622028 1.3658451 1.3981191 #>  [668,] 0.26423390 0.3038202 0.3227257 0.5687533 0.5876697 0.5878029 0.5908022 #>  [669,] 0.33332867 0.5075538 0.5521372 0.5842848 0.6057657 0.6202845 0.6290491 #>  [670,] 0.74577000 0.7853102 0.8376724 0.8449323 0.9255412 0.9554723 0.9805734 #>  [671,] 0.46914203 0.5151282 0.5986330 0.7714077 0.8923293 0.9804356 1.0037609 #>  [672,] 0.72595420 0.9612788 1.0927463 1.2598877 1.3599056 1.3681906 1.4105007 #>  [673,] 0.58646964 0.6393724 0.7488919 0.8468164 0.8584272 0.8771873 0.8869364 #>  [674,] 0.66987238 0.6861381 0.7888735 0.8082972 0.8424082 0.9268503 0.9462525 #>  [675,] 0.88663770 0.9476694 0.9812513 1.0784046 1.1888129 1.2000606 1.2040945 #>  [676,] 0.68460707 0.7938946 0.8666066 0.9146240 1.0227699 1.1104297 1.1121059 #>  [677,] 0.45767932 0.4995096 0.5522868 0.5931316 0.5973330 0.6063485 0.6252463 #>  [678,] 0.59668335 1.0645720 1.0783123 1.2501743 1.2705879 1.2908415 1.2969669 #>  [679,] 0.34248988 0.3603835 0.3833418 0.4432055 0.4871968 0.4894926 0.5381686 #>  [680,] 1.00263347 1.0921531 1.1507294 1.2838994 1.3154759 1.3193360 1.3586238 #>  [681,] 0.47597076 0.5240643 0.5357379 0.5388629 0.5795669 0.5826414 0.5872101 #>  [682,] 0.32014071 0.4527128 0.4541788 0.4794833 0.4840158 0.5728666 0.6018630 #>  [683,] 0.39484888 0.5421936 0.5811131 0.6115439 0.8074229 0.8104821 0.8107831 #>  [684,] 0.52168359 0.5421936 0.5805340 0.6843928 0.7304048 0.7457809 0.7510285 #>  [685,] 0.41949584 0.6782649 0.7240818 0.7255290 0.7281784 0.7471495 0.7498082 #>  [686,] 0.20565379 0.2945258 0.3687349 0.3926069 0.5899905 0.5927908 0.6253967 #>  [687,] 0.32467196 0.3905625 0.4201676 0.5828751 0.5932659 0.6259892 0.6357548 #>  [688,] 0.28675143 0.5216836 0.6797832 0.8227968 0.8484445 0.8885148 0.9076409 #>  [689,] 0.44621650 0.5551353 0.7694152 0.8003845 0.8333664 0.9612524 0.9685656 #>  [690,] 0.72168202 0.7856840 0.8256839 0.8738200 0.9693358 0.9712229 0.9730422 #>  [691,] 0.56359942 0.5927624 0.6618614 0.6677318 0.6945691 0.6994986 0.7459183 #>  [692,] 0.57755092 0.5875832 0.6656692 0.6984455 0.7036933 0.7227886 0.7765280 #>  [693,] 0.28665828 0.3850621 0.4158070 0.4389707 0.4982862 0.5387931 0.5877499 #>  [694,] 0.72046694 0.8308249 0.8464098 0.8606090 0.8921775 0.9044903 0.9370844 #>  [695,] 0.84688472 0.9009052 0.9889049 1.0086108 1.0227152 1.0867670 1.0919964 #>  [696,] 0.39591120 0.4771193 0.5887291 0.6284792 0.6571294 0.6614363 0.6944233 #>  [697,] 0.34432937 0.3759157 0.4232399 0.5370692 0.5557818 0.5585644 0.5642954 #>  [698,] 0.48644418 0.5414902 0.5667210 0.5927908 0.6776303 0.6841998 0.6903371 #>  [699,] 0.37948895 0.5125184 0.5745248 0.5828751 0.5962334 0.6542268 0.6595898 #>  [700,] 0.55970373 0.6088264 0.6797832 0.7457809 0.7759565 0.7956221 0.8338482 #>  [701,] 0.77626997 1.1707056 1.3005191 1.3439592 1.3775877 1.4364625 1.4878438 #>  [702,] 0.89846938 1.2705879 1.3210965 1.3890841 1.4622718 1.5436820 1.5765386 #>  [703,] 0.43003899 0.5632438 0.5635931 0.6083708 0.6165837 0.6209113 0.6237400 #>  [704,] 0.54044946 0.5630972 0.6314360 0.6620198 0.6856244 0.6969723 0.7094579 #>  [705,] 0.72064056 0.9636443 1.0069994 1.2226138 1.2246342 1.2764497 1.3522474 #>  [706,] 0.75303657 0.7571095 0.7873064 0.7910397 0.8168283 0.8378612 0.8718715 #>  [707,] 0.51275938 0.5274924 0.5777857 0.6462955 0.6618976 0.7015422 0.7139986 #>  [708,] 0.77108131 1.1064288 1.1142672 1.1820811 1.1905444 1.2754824 1.3267374 #>  [709,] 1.30600318 1.3793398 1.4644270 1.5017220 1.5343687 1.5379538 1.5683705 #>  [710,] 0.32496451 0.3845408 0.5553328 0.5899905 0.6349549 0.6355452 0.6613045 #>  [711,] 0.41575517 0.5298213 0.5612812 0.6685688 0.8692454 0.8733297 0.9092865 #>  [712,] 0.31522903 0.6921511 0.7065053 0.7478822 0.8851041 0.8927398 0.9237734 #>  [713,] 0.42724301 0.5151282 0.6470234 0.6964895 0.7361554 0.8298444 0.9297470 #>  [714,] 1.40212899 1.8857384 1.9256373 1.9957508 2.0098606 2.0273586 2.0304680 #>  [715,] 0.28472736 0.2948773 0.3849689 0.4234344 0.4969497 0.5251180 0.5291195 #>  [716,] 0.41332981 0.4451620 0.5146623 0.5782388 0.6012823 0.6084620 0.6660110 #>  [717,] 0.30001875 0.3045613 0.5782897 0.5872101 0.6056666 0.6556395 0.6718791 #>  [718,] 0.51757256 0.6529377 0.8078088 0.8168283 0.8230921 0.8632866 0.9023682 #>  [719,] 0.40155938 0.4410557 0.5450374 0.5580326 0.5787678 0.5890791 0.6326969 #>  [720,] 0.63635555 0.6505416 0.8944471 0.9209704 0.9546440 0.9582228 0.9850717 #>  [721,] 0.63212619 0.7041250 0.7478745 0.7775440 0.8069734 0.8246486 0.8815015 #>  [722,] 0.74592976 0.8173655 0.9199281 0.9208325 0.9595080 0.9656247 0.9708512 #>  [723,] 0.63719109 0.6973646 0.7103186 0.8274262 0.9160237 1.0461011 1.0601625 #>  [724,] 0.51793781 0.5627517 0.5696949 0.6447134 0.6618370 0.6659346 0.7056397 #>  [725,] 0.26614652 0.3315366 0.4048491 0.4110980 0.4284577 0.4580055 0.4632167 #>  [726,] 0.77502226 0.8464341 0.9493694 0.9701860 0.9710994 0.9812741 0.9868110 #>  [727,] 0.31437068 0.4350691 0.6548030 0.6577924 0.7289075 0.7289741 0.7313606 #>  [728,] 0.46834021 0.6761964 0.8312567 0.8636090 0.8789634 0.8851041 0.9132398 #>  [729,] 0.49595953 0.7049195 0.7473863 0.7680610 0.8759170 0.8827196 0.9007535 #>  [730,] 0.67068364 0.7232592 0.7969776 0.8183633 0.9361650 0.9399318 0.9736194 #>  [731,] 0.32467196 0.3415766 0.5745248 0.5974255 0.6161131 0.6246006 0.6278293 #>  [732,] 0.23793500 0.2684923 0.2945955 0.3603835 0.4280563 0.4401889 0.4915420 #>  [733,] 0.13569927 0.3957908 0.4595627 0.4750619 0.4770060 0.4815012 0.5191488 #>  [734,] 0.41206066 0.5293517 0.6328536 0.6989055 0.7033483 0.7183756 0.7464483 #>  [735,] 0.29692859 0.3297394 0.3875895 0.4489252 0.5085992 0.5654279 0.6003980 #>  [736,] 0.55472220 0.6202308 0.7313606 0.7546835 0.7646445 0.7709723 0.8300631 #>  [737,] 0.19334775 0.5477619 0.5698853 0.6433227 0.6449438 0.7341509 0.7348450 #>  [738,] 0.36125721 0.3795636 0.4413138 1.0073636 1.0489215 1.0874911 1.0982044 #>  [739,] 1.08068933 1.1872884 1.2191084 1.3593294 1.3649339 1.3820577 1.4656814 #>  [740,] 0.20903988 0.4053673 0.4069907 0.4572226 0.5512335 0.5618557 0.6110795 #>  [741,] 0.52485725 0.8467928 0.8764645 0.8799495 0.8917778 0.9189834 0.9278128 #>  [742,] 0.24135010 0.3192913 0.3557947 0.4290355 0.4590145 0.5441546 0.5967190 #>  [743,] 0.24216088 0.6989289 0.7204669 0.7406238 0.8140316 0.8140582 0.8698878 #>  [744,] 0.43605113 0.6965941 0.7391180 0.7595028 0.7734707 0.8314073 0.8607963 #>  [745,] 0.44923860 0.4832703 0.5108095 0.5137443 0.5230528 0.5383407 0.6064321 #>  [746,] 0.42001543 0.6184261 0.6303256 0.6757969 0.7579396 0.7965969 0.8876405 #>  [747,] 0.30741098 0.4256526 0.4636667 0.4906479 0.5153501 0.5228434 0.5349501 #>  [748,] 0.32759184 0.5062225 0.5391034 0.5647432 0.5930981 0.5932272 0.6046600 #>  [749,] 0.38165349 0.4133298 0.4887628 0.5113557 0.5585327 0.5620177 0.6059020 #>  [750,] 0.28115810 0.3608982 0.4473519 0.4547102 0.4646070 0.4773690 0.5075104 #>  [751,] 0.24135010 0.3407108 0.3477849 0.3494427 0.4852406 0.5454839 0.5690194 #>  [752,] 0.40490562 0.5530217 0.5809655 0.6168797 0.6354808 0.6703872 0.6916040 #>  [753,] 0.72817843 0.8066617 0.8852594 0.9077918 0.9190550 0.9576294 0.9685932 #>  [754,] 0.34103192 0.3759157 0.3796793 0.4618772 0.4823813 0.5490086 0.5534571 #>  [755,] 0.22118093 0.4810001 0.5298777 0.6343214 0.7023594 0.7274751 0.7314038 #>  [756,] 0.70650534 0.8724674 1.1345561 1.1463146 1.1896140 1.2049210 1.2628498 #>  [757,] 0.61830674 0.6740673 0.6949820 0.7232132 0.7637358 0.7762299 0.7781544 #>  [758,] 0.43920040 0.5022522 0.7637358 0.8379596 0.8553712 0.8733456 0.9965934 #>  [759,] 0.54930871 0.5627517 0.5832413 0.6420312 0.6559596 0.6838702 0.7105185 #>  [760,] 0.27489761 0.4915420 0.5059778 0.5258297 0.5324730 0.6107542 0.6381014 #>  [761,] 0.26072784 0.2643815 0.4161911 0.4597652 0.4941980 0.4988244 0.5109304 #>  [762,] 0.15733470 0.4080966 0.4608944 0.5968873 0.6562537 0.6696475 0.6854813 #>  [763,] 0.47597076 0.5782897 0.5820362 0.5904592 0.6576152 0.7560798 0.7834506 #>  [764,] 0.41374729 0.4304042 0.5086220 0.5640150 0.6783613 0.6997067 0.7014470 #>  [765,] 0.25045672 0.3335726 0.4096761 0.5391034 0.5687630 0.6209562 0.6286228 #>  [766,] 0.25875427 0.2948773 0.3272188 0.3989171 0.4137245 0.4173535 0.5174176 #>  [767,] 0.31966600 0.3316070 0.3486599 0.4872580 0.5796872 0.6114713 0.6260469 #>  [768,] 0.37362545 0.4070119 0.5137443 0.5499298 0.6444376 0.6460900 0.6677318 #>  [769,] 0.37778327 0.4014588 0.4094782 0.4215406 0.4448657 0.4452662 0.4708972 #>  [770,] 0.62018242 0.7038625 0.7228201 0.7248475 0.8044206 0.8289746 0.8794045 #>  [771,] 0.41526999 0.4633789 0.4979332 0.5030396 0.5152242 0.5439987 0.5486217 #>  [772,] 0.58738389 0.7005292 0.7488919 0.7617604 0.8343785 0.8738200 0.9876898 #>  [773,] 0.30744062 0.3581343 0.4673582 0.4917650 0.5514407 0.5527031 0.5616974 #>  [774,] 0.33298143 0.4068689 0.4353319 0.4833930 0.5287851 0.5752796 0.5775846 #>  [775,] 0.36201539 0.3644548 0.4156147 0.5645590 0.6002691 0.6210832 0.6435715 #>  [776,] 0.25442613 0.4339430 0.4937165 0.5201450 0.5443775 0.5781254 0.5934607 #>  [777,] 0.17114958 0.4015644 0.4474681 0.5689784 0.5984524 0.6506679 0.6712053 #>  [778,] 0.22443515 0.3298813 0.3633249 0.4002825 0.4952878 0.5387931 0.6053932 #>  [779,] 0.52573322 0.5298777 0.5447622 0.5912188 0.5922980 0.6124847 0.6138644 #>  [780,] 0.54829968 0.5956364 0.7049948 0.7772671 0.8438184 0.8836365 0.9008850 #>  [781,] 0.21596063 0.4555506 0.4879140 0.5631649 0.5650799 0.6157233 0.6438900 #>  [782,] 1.31620235 1.4625066 1.6017584 1.6069952 1.7563295 1.8066520 1.8264473 #>  [783,] 0.45869690 0.7300690 0.7870551 0.8428978 0.8476209 0.8753186 1.0230719 #>  [784,] 0.22963150 0.7154549 0.7624596 0.7902643 0.8189743 0.8527182 0.8848355 #>  [785,] 0.43224739 0.5128200 0.5570910 0.5861363 0.6045868 0.6572186 0.6650753 #>  [786,] 0.71846784 0.8970145 0.9135531 0.9234074 0.9370629 0.9389883 0.9552253 #>  [787,] 0.31067704 0.4093810 0.5266588 0.5325749 0.5849524 0.6144317 0.6724075 #>  [788,] 0.35971629 0.3662962 0.4005985 0.4110980 0.4677275 0.4714167 0.5667766 #>  [789,] 0.32193351 0.4012438 0.4043964 0.4215406 0.5651737 0.5699487 0.5940515 #>  [790,] 0.37887516 0.6696607 0.6810432 0.6895491 0.7382613 0.8135347 0.8390589 #>  [791,] 0.46030421 0.5764682 0.5894187 0.6171152 0.6244219 0.6278351 0.6354256 #>  [792,] 0.52582973 0.5583273 0.6004920 0.6121482 0.7110858 0.8001804 0.8226023 #>  [793,] 0.45959789 0.5159613 0.5481655 0.5798013 0.5823557 0.5951442 0.6042008 #>  [794,] 0.64454351 0.8088378 0.9063399 0.9129473 0.9371642 0.9437349 0.9934721 #>  [795,] 0.42762418 0.6716297 0.6848707 0.7358797 0.8173095 0.8281406 0.8454796 #>  [796,] 0.31067704 0.3138014 0.4489252 0.5698752 0.6289822 0.6393379 0.6477271 #>  [797,] 0.31966600 0.4220429 0.4677275 0.5133867 0.5429895 0.5631649 0.5689220 #>  [798,] 0.52170688 0.5298213 0.6674265 0.6997752 0.7408824 0.7522906 0.7896446 #>  [799,] 0.30941443 0.3699098 0.4771193 0.5168037 0.6285624 0.7328807 0.7410329 #>  [800,] 0.34534730 0.4643644 0.6903427 0.7603657 0.7768475 0.7778703 0.7863360 #>  [801,] 0.31365130 0.3179672 0.4090852 0.4260122 0.4440184 0.5019973 0.5278777 #>  [802,] 0.48429340 0.5676050 0.7036313 0.7094925 0.7646445 0.8300877 0.8406260 #>  [803,] 0.39089819 0.3949007 0.4320986 0.4625124 0.5177965 0.5230528 0.5376085 #>  [804,] 0.46229949 0.6121482 0.6370460 0.8415888 0.8553535 0.8930812 0.9030371 #>  [805,] 0.41339519 0.4271968 0.4555506 0.6625195 0.6672203 0.6793476 0.7191409 #>  [806,] 0.32910303 0.3876959 0.5266588 0.7122552 0.7162127 0.7210717 0.7748530 #>  [807,] 0.28115810 0.3082220 0.4662254 0.4751519 0.5112347 0.5604408 0.5782986 #>  [808,] 0.35913748 0.4599622 0.4702857 0.5075538 0.5364438 0.5784359 0.5817940 #>  [809,] 0.34448040 0.3544017 0.5145463 0.6036774 0.7870551 0.8772812 0.9238284 #>  [810,] 0.34773665 0.5792382 0.5826454 0.6084430 0.6190162 0.6447372 0.7089528 #>  [811,] 0.55868449 0.5892891 0.6538272 0.7234324 0.7358606 0.7796742 0.7804054 #>  [812,] 0.29204878 0.3527697 0.4052767 0.4124510 0.6028971 0.6100455 0.6542268 #>  [813,] 0.33220568 0.4811377 0.4909635 0.5002653 0.5140929 0.5211150 0.5294680 #>  [814,] 0.92484957 0.9739743 0.9780079 1.0554747 1.0765231 1.1057117 1.1368654 #>  [815,] 0.29056256 0.3794890 0.4280919 0.5951037 0.6100455 0.6371450 0.6705471 #>  [816,] 0.30456128 0.4334226 0.5280130 0.6013228 0.6235767 0.6284040 0.6791254 #>  [817,] 0.26869731 0.3353735 0.3903350 0.4666007 0.5047320 0.6217379 0.6276983 #>  [818,] 0.20019723 0.2643815 0.2708912 0.2905400 0.3249809 0.3850199 0.4075164 #>  [819,] 0.24539365 0.3341520 0.3795114 0.4699939 0.4905121 0.5003894 0.5036895 #>  [820,] 0.48648469 0.5036067 0.5427824 0.5527397 0.5718724 0.5913548 0.6354808 #>  [821,] 0.79103969 0.8113156 0.8135347 0.9107811 0.9163276 0.9979781 1.0300585 #>  [822,] 0.24819954 0.4785917 0.4830193 0.5414301 0.5564632 0.6088210 0.6110628 #>  [823,] 0.47283452 0.4886085 0.5552184 0.5569549 0.6363851 0.6569678 0.6686506 #>  [824,] 0.49698796 0.6989282 0.7358413 0.8591591 0.8716749 0.8737697 0.8964612 #>  [825,] 0.36179861 0.5167060 0.5434676 0.8783416 0.9234322 0.9551841 0.9819237 #>  [826,] 0.63981749 0.6647299 0.7168803 0.7252861 0.7508647 0.8708839 0.9324001 #>  [827,] 0.27060836 0.3560302 0.3912932 0.4055425 0.4540991 0.5241781 0.5370563 #>  [828,] 0.36418632 0.4728952 0.4770060 0.4834017 0.4954662 0.5522224 0.5628048 #>  [829,] 0.39095019 0.7206406 0.8160080 1.0592491 1.1274604 1.1634239 1.2542013 #>  [830,] 0.51208211 0.5391909 0.5632438 0.5663222 0.5680502 0.5698225 0.6480659 #>  [831,] 0.28798399 0.3459284 0.4539414 0.5457430 0.6577438 0.6848691 0.7094579 #>  [832,] 0.38116096 0.3910728 0.5865560 0.6003980 0.6355623 0.6942062 0.7130024 #>  [833,] 0.42965278 0.4628013 0.5604826 0.5701761 0.5811210 0.6426285 0.6482282 #>  [834,] 0.50717171 0.5219496 0.5415420 0.5483014 0.6313588 0.6707661 0.7102418 #>  [835,] 0.32919385 0.3995015 0.4015594 0.4912774 0.5073670 0.5649146 0.5705277 #>  [836,] 0.31868615 0.5030405 0.5129393 0.5144100 0.5600090 0.5649974 0.5782733 #>  [837,] 0.50072483 0.8044206 0.8774237 0.9226858 0.9440305 1.0256469 1.0309766 #>  [838,] 0.66363316 0.6710613 0.6747283 0.7157326 0.7372228 0.7720022 0.8149270 #>  [839,] 0.43687630 0.4572812 0.4650107 0.4990915 0.5250959 0.5457430 0.5717433 #>  [840,] 0.15793197 0.2529111 0.3260676 0.3396584 0.5108095 0.5352231 0.6316401 #>  [841,] 0.34257424 0.4679244 0.5230872 0.5574504 0.5862775 0.6779871 0.7001389 #>  [842,] 0.52743324 0.7315159 0.7643313 0.7727432 0.8468847 0.9889707 1.0491799 #>  [843,] 0.34332942 0.5898730 0.6705449 0.7209382 0.7374655 0.7798207 0.7862995 #>  [844,] 0.58620893 0.6091527 0.6218133 0.6349549 0.6371038 0.6645202 0.6888260 #>  [845,] 0.37400875 0.5247046 0.6194549 0.6766698 0.6777232 0.7103186 0.7517258 #>  [846,] 0.47915846 0.6604883 0.6986426 0.7193516 0.7201049 0.7231246 0.7794418 #>  [847,] 0.40602238 0.4896874 0.5140472 0.5145684 0.5265669 0.5441480 0.5458012 #>  [848,] 0.48665208 0.5229960 0.5756321 0.5976579 0.6452659 0.6981290 0.8184880 #>  [849,] 0.39107282 0.4632175 0.5085992 0.5279253 0.5960008 0.6766188 0.6789030 #>  [850,] 0.48100008 0.5120624 0.5128517 0.5148367 0.5364084 0.5464039 0.5647432 #>  [851,] 0.48731018 0.6556296 0.6797140 0.7042682 0.8304584 0.8308249 0.9244780 #>  [852,] 0.37408974 0.5115742 0.6065193 0.6313588 0.6789451 0.7231608 0.7852995 #>  [853,] 0.54892922 0.6377161 1.0361172 1.0521183 1.1340620 1.1641521 1.2278594 #>  [854,] 0.72764753 0.8949812 0.9913636 1.0889161 1.1924440 1.2948119 1.3362033 #>  [855,] 0.31837954 0.4189319 0.4339430 0.4374673 0.4575622 0.4925229 0.5140472 #>  [856,] 0.35444866 0.5612632 0.6266378 0.6575761 0.6640559 0.7013417 0.7211809 #>  [857,] 1.78456359 1.9517635 2.1339278 2.2634665 2.2996021 2.4034793 2.4656497 #>  [858,] 0.26472027 0.3315366 0.3712879 0.4035137 0.5111909 0.5641910 0.5667766 #>  [859,] 0.17150843 0.3668764 0.4604540 0.4617350 0.4708804 0.5441699 0.5462910 #>  [860,] 0.44418528 0.4842934 0.5374914 0.5518384 0.5826448 0.5930384 0.6251684 #>  [861,] 0.37410624 0.5617979 0.6393043 0.6465508 0.6625934 0.8039381 0.8272177 #>  [862,] 0.34432341 0.4225708 0.5398605 0.5501168 0.5670792 0.5720596 0.6179074 #>  [863,] 0.47560114 0.6783117 0.6969626 0.7291894 0.8734396 0.9405769 1.0362314 #>  [864,] 0.49531253 0.8029193 0.8035176 0.8486726 1.1353811 1.1992840 1.2030919 #>  [865,] 0.34328995 0.4430572 0.4687001 0.5756912 0.6136132 0.6607851 0.6827524 #>  [866,] 0.47323028 0.5962904 0.6784613 0.6903427 0.7888949 0.7948941 0.8580215 #>  [867,] 0.31796721 0.4256526 0.4330667 0.4760902 0.5029026 0.5370376 0.5404918 #>  [868,] 0.44933561 0.5639394 0.5719950 0.5831249 0.5882285 0.6418433 0.7071117 #>  [869,] 1.15298728 1.2866000 1.2969474 1.4729480 1.5538852 1.5987542 1.6662705 #>  [870,] 0.47693636 0.5778481 0.5783030 0.5824501 0.5962518 0.6341620 0.6532132 #>  [871,] 0.32919385 0.3693587 0.4410557 0.4516664 0.4673582 0.4777456 0.4916994 #>  [872,] 0.26597476 0.3143456 0.3388335 0.3903350 0.5168999 0.5518384 0.5722593 #>  [873,] 0.25825923 0.4517951 0.4539414 0.5412945 0.5630972 0.5635393 0.6315417 #>  [874,] 0.29712305 0.3136513 0.4068355 0.4596497 0.4818558 0.4941092 0.4973629 #>  [875,] 0.45100336 0.6497237 0.6907589 0.8114743 0.8140316 0.8345334 0.9588125 #>  [876,] 0.34329210 0.4670922 0.5350553 0.5622166 0.5813340 0.6104428 0.6110628 #>  [877,] 0.26161632 0.5570392 0.6531434 0.7175596 0.7537245 0.8267145 0.9026041 #>  [878,] 0.30941443 0.5849558 0.6063485 0.6114813 0.6466962 0.6557666 0.6571294 #>  [879,] 0.41339519 0.5047320 0.5650799 0.5939127 0.6205152 0.6278191 0.6528815 #>  [880,] 0.22963150 0.9010500 0.9361623 0.9593557 0.9720886 0.9733575 0.9780079 #>  [881,] 0.45165882 0.5142246 0.7250952 0.7283629 0.7816848 0.8165187 0.8521400 #>  [882,] 0.50072483 0.7912806 0.8620435 0.8623822 0.9299794 0.9327288 1.1092249 #>  [883,] 0.30558002 0.5003894 0.6459949 0.6467638 0.7188092 0.7430736 0.7824136 #>  [884,] 0.74524571 0.7457700 0.8387825 0.8662894 1.0141347 1.0338558 1.0443227 #>  [885,] 0.34019080 0.3425742 0.4348400 0.4665653 0.4728720 0.5372039 0.5615175 #>  [886,] 0.44371287 0.4633789 0.5524315 0.5997892 0.6312661 0.6321915 0.6360786 #>  [887,] 0.66791611 0.7291894 0.7469500 0.7546835 0.7720874 0.8234367 0.9145116 #>  [888,] 0.49127743 0.5098943 0.5733805 0.5856914 0.6316907 0.6835840 0.6845029 #>  [889,] 1.54415609 1.6971955 1.7423996 1.7518987 1.7948480 1.7980014 1.8771506 #>  [890,] 1.00485293 1.0230719 1.0453370 1.1463240 1.2596600 1.2866420 1.3262310 #>  [891,] 0.40432858 0.4060324 0.4541726 0.4882234 0.5170808 0.5690595 0.7142736 #>  [892,] 0.33195268 0.3595530 0.4012438 0.4525059 0.4544832 0.5163762 0.5467663 #>  [893,] 0.30265640 0.5194916 0.5988442 0.6184261 0.6206828 0.6536717 0.6741233 #>  [894,] 0.19324472 0.2618574 0.3078342 0.4194199 0.4246496 0.4455877 0.5169962 #>  [895,] 0.36985185 0.6205217 0.6244658 0.6323055 0.6376698 0.6453127 0.6855362 #>  [896,] 0.80983617 1.0867157 1.2960321 1.3275433 1.3373759 1.3541658 1.4565627 #>  [897,] 0.81083546 0.8874781 0.9084058 1.0162572 1.0182137 1.0326244 1.1200301 #>  [898,] 0.62683368 0.8657665 0.8761362 0.8932655 0.9461308 0.9605386 0.9924427 #>  [899,] 0.42016764 0.5566641 0.5615606 0.5891303 0.6081810 0.6161131 0.6531434 #>  [900,] 0.35927611 0.4182446 0.6277172 0.6580191 0.8042436 0.8107831 0.8265642 #>  [901,] 0.28665828 0.4387953 0.5179107 0.5222855 0.5375960 0.5600090 0.5771107 #>  [902,] 0.20704385 0.4402252 0.4548676 0.5048498 0.5179378 0.5832413 0.5997572 #>  [903,] 0.62874627 0.8169650 0.8591591 0.8877479 0.9738494 1.1009820 1.1650495 #>  [904,] 0.68839618 0.8961322 0.9188582 0.9976473 1.0361172 1.0610588 1.0758177 #>  [905,] 0.66791611 0.6783117 0.6904930 0.7753998 0.8227617 0.8696852 0.9420724 #>  [906,] 0.32900153 0.3544017 0.4330632 0.5605294 0.7300690 0.9962523 1.0174707 #>  [907,] 0.40814173 0.4137473 0.4690122 0.5000667 0.6567682 0.6945955 0.7093473 #>  [908,] 1.39404183 1.5304639 1.5701111 1.6061071 1.6177671 1.6365786 1.7037054 #>  [909,] 0.46843294 0.4987085 0.5098215 0.5142246 0.5607606 0.5909827 0.6295371 #>  [910,] 0.22179389 0.2660234 0.3658949 0.4960802 0.5284258 0.5778481 0.5792382 #>  [911,] 0.83767242 0.8502315 1.0645142 1.1598986 1.1864516 1.2669814 1.2680894 #>  [912,] 0.32656845 0.4501130 0.4704737 0.5398605 0.5882285 0.6057263 0.6574537 #>  [913,] 0.23368062 0.3291030 0.3995316 0.5325749 0.5847738 0.6460900 0.6665533 #>  [914,] 0.39687743 0.4120607 0.4716083 0.5012212 0.5492972 0.5831157 0.5858439 #>  [915,] 0.42206765 0.4709858 0.4844542 0.4919571 0.5364420 0.5478629 0.5695137 #>  [916,] 0.55240092 0.6642630 0.6718313 0.6947833 0.7051680 0.7162773 0.7227731 #>  [917,] 0.42792814 0.6258361 0.6503653 0.7378424 0.7401187 0.8907746 0.9380114 #>  [918,] 0.28254921 0.3926069 0.4387953 0.4610387 0.4628502 0.5414902 0.5848288 #>  [919,] 0.37373297 0.4440184 0.4572226 0.4671057 0.4897795 0.5029026 0.5883926 #>  [920,] 0.41193956 0.4973407 0.6141290 0.6357482 0.6663305 0.7160859 0.7218826 #>  [921,] 0.35541800 0.3737330 0.3937187 0.5019973 0.5704629 0.5752796 0.5832504 #>  [922,] 0.26273814 0.5325297 0.6618614 0.6896106 0.7264707 0.7496078 0.7896346 #>  [923,] 0.36125721 0.4741423 0.6992137 0.8446328 1.0927738 1.2001683 1.2210363 #>  [924,] 0.21669490 0.2529111 0.3892892 0.4625124 0.4954379 0.5053341 0.5383407 #>  [925,] 0.82852284 0.9562790 1.0600732 1.0683919 1.1038026 1.1956913 1.3137306 #>  [926,] 0.13915496 0.2630851 0.2905400 0.3373897 0.3612818 0.3965095 0.5060421 #>  [927,] 0.44854794 0.4612797 0.4872070 0.5854813 0.5966825 0.6424350 0.6701341 #>  [928,] 0.25442613 0.4374673 0.4599582 0.4599622 0.5365297 0.5521372 0.5969928 #>  [929,] 0.66330334 0.7338046 0.8284906 0.8369771 0.8914334 0.9202239 0.9424442 #>  [930,] 0.29869392 0.3312582 0.3665874 0.4872197 0.4917650 0.5075487 0.5197259 #>  [931,] 0.55799764 0.6343611 0.6557666 0.6557740 0.6749556 0.6984652 0.7228644 #>  [932,] 0.78815025 0.8369849 0.8449323 0.9065312 0.9164668 0.9304296 0.9939262 #>  [933,] 0.24819954 0.4904973 0.5476977 0.5840991 0.6097561 0.6282642 0.6642278 #>  [934,] 0.42659870 0.4759985 0.5402732 0.5487941 0.6080367 0.6659707 0.6912560 #>  [935,] 0.33009762 0.3740897 0.6718313 0.6781876 0.6926856 0.7857457 0.8173655 #>  [936,] 0.50989426 0.5663222 0.6209113 0.6636332 0.7481284 0.7714252 0.7724892 #>  [937,] 0.51723538 0.6277172 0.7376756 0.7451266 0.8431958 0.8489408 0.8605486 #>  [938,] 0.38116096 0.3875895 0.5278106 0.5279253 0.5530354 0.5660122 0.5826695 #>  [939,] 0.39129320 0.4590610 0.5120453 0.5411603 0.5427824 0.5754572 0.5769407 #>  [940,] 0.45095529 0.6749556 0.6835840 0.6949346 0.6969097 0.7083006 0.7163706 #>  [941,] 0.11014585 0.3805886 0.6612137 0.6674265 0.6971136 0.7427960 0.7496699 #>  [942,] 0.82502256 0.8285228 0.9160737 0.9378682 0.9987971 1.0223142 1.0603742 #>  [943,] 0.42596607 0.6671452 0.7051500 0.7236162 0.7633628 0.7649585 0.7888735 #>  [944,] 0.54050609 0.5901455 0.6505265 0.7227886 0.8008561 0.8498347 0.8821232 #>  [945,] 0.33220568 0.4210874 0.4291361 0.5342270 0.5372039 0.5630224 0.5949791 #>  [946,] 0.63424483 1.0588586 1.0887589 1.1553972 1.3130274 1.3229535 1.3296671 #>  [947,] 1.25988767 1.3474610 1.3824433 1.3969555 1.5325401 1.5436123 1.6086821 #>  [948,] 0.50147757 0.6022260 0.6258361 0.6716294 0.7958233 0.8683189 0.8689645 #>  [949,] 0.36177409 0.5615175 0.6530897 0.6736190 0.6759667 0.6779871 0.7382613 #>  [950,] 0.36445482 0.4476251 0.6320512 0.6569680 0.7027010 0.7499263 0.7649150 #>  [951,] 0.44621650 0.8486127 0.8894576 0.8979212 1.0585158 1.1353811 1.2018294 #>  [952,] 0.20599068 0.3157741 0.3172319 0.3912617 0.5552184 0.5747950 0.5769551 #>  [953,] 1.07840464 1.1867681 1.2103126 1.2711802 1.3515421 1.4125433 1.4239145 #>  [954,] 0.56751557 0.7038625 0.7463194 0.7840481 0.8178844 0.8250634 0.8772758 #>  [955,] 0.18827720 0.3465901 0.3975681 0.5482997 0.6144050 0.6402044 0.6468045 #>  [956,] 0.18300368 0.2587543 0.3785672 0.3937756 0.3949034 0.5102585 0.5165690 #>  [957,] 0.32589349 0.4493356 0.5071717 0.6046357 0.6482742 0.6832854 0.7065753 #>  [958,] 0.53922460 0.7691884 0.8037378 0.8617779 0.8751321 0.9102862 0.9208043 #>  [959,] 1.13396305 1.2282315 1.2337913 1.2806431 1.3018025 1.3578682 1.3666564 #>  [960,] 0.53252968 0.5927624 0.7132237 0.7426644 0.7460303 0.7510524 0.7642190 #>  [961,] 0.57001757 0.5902467 0.5962904 0.6793476 0.8149503 0.8172139 0.8240780 #>  [962,] 0.52429343 0.5605553 0.7271139 0.8010309 0.8949897 0.9227925 0.9461225 #>  [963,] 0.36985185 0.4905930 0.5750439 0.6657796 0.7293020 0.7439237 0.7673338 #>  [964,] 0.46030421 0.4857164 0.5268288 0.5865029 0.6030360 0.6450226 0.6870597 #>  [965,] 0.40381719 0.4158863 0.4844542 0.5430272 0.6196611 0.6216857 0.6487706 #>  [966,] 0.24216088 0.6226108 0.6762191 0.6769658 0.7188312 0.7526134 0.7753026 #>  [967,] 0.50225217 0.6730140 0.6896678 0.7248170 0.7751879 0.8492158 0.8816658 #>  [968,] 0.36177409 0.4872197 0.5157298 0.6366373 0.6490550 0.6592940 0.7032413 #>  [969,] 0.34941916 0.5427306 0.5788999 0.6165739 0.6217379 0.6946043 0.7008609 #>  [970,] 0.45505086 0.5238482 0.5633598 0.6255450 0.6279502 0.6373045 0.6393043 #>  [971,] 0.45165882 0.4684329 0.5696949 0.5997572 0.7236614 0.7543476 0.7697942 #>  [972,] 0.26161632 0.5566641 0.6619203 0.7370398 0.7389019 0.8107175 0.8342561 #>  [973,] 0.40536726 0.4550509 0.5039489 0.5167783 0.5720406 0.6037277 0.6116344 #>  [974,] 0.23658888 0.4048491 0.4714167 0.4823813 0.5129529 0.5283426 0.5453079 #>  [975,] 0.58441188 0.5944359 0.6006649 0.6932177 0.7276661 0.7384675 0.7662558 #>  [976,] 0.29978427 0.3831039 0.4377213 0.4722554 0.4925229 0.4969497 0.5427179 #>  [977,] 0.36421767 0.5404495 0.8412040 0.8502831 0.8682342 0.8786797 0.9197168 #>  [978,] 0.29244255 0.2945258 0.3276351 0.4610387 0.5553328 0.6036580 0.6290607 #>  [979,] 0.31264201 0.3954204 0.4662409 0.5210952 0.5997464 0.6237400 0.6480339 #>  [980,] 0.49830538 0.5165690 0.5222053 0.5411603 0.5650569 0.5813340 0.6042008 #>  [981,] 0.27421979 0.4639484 0.4665653 0.5219496 0.5574504 0.5905782 0.6097233 #>  [982,] 0.54892922 0.5770577 0.7875780 0.9463395 1.1129606 1.1352357 1.1640474 #>  [983,] 0.50186066 0.5200675 0.6630064 0.6705449 0.6892008 0.7001389 0.7025888 #>  [984,] 0.46247427 0.6152089 0.7239992 0.7496078 0.7975771 0.7989860 0.8034664 #>  [985,] 0.42499963 0.4429471 0.4722927 0.5569549 0.5769551 0.6076908 0.6629193 #>  [986,] 0.26857078 0.5345244 0.5698853 0.6896678 0.7174538 0.7507117 0.7664765 #>  [987,] 0.31723191 0.3247494 0.3439987 0.4125208 0.4429471 0.4874000 0.6297205 #>  [988,] 0.35478609 0.4952554 0.5896025 0.5943197 0.7091854 0.8088337 0.8182303 #>  [989,] 0.29692859 0.4060224 0.5162768 0.5826695 0.6245131 0.6594255 0.6642674 #>  [990,] 0.63424483 0.7885007 0.8617779 0.9141788 0.9234074 1.0156007 1.0596294 #>  [991,] 0.72764753 0.8315643 1.0009845 1.1501848 1.1613562 1.2035578 1.2527108 #>  [992,] 0.14239550 0.4910285 0.6447991 0.7012139 0.7301023 0.7478745 0.7645179 #>  [993,] 0.32574572 0.3849689 0.4152700 0.4307927 0.4807697 0.5174176 0.5831593 #>  [994,] 0.27717054 0.4452662 0.4472378 0.5098215 0.5155855 0.5228631 0.5372583 #>  [995,] 0.79299819 0.9558688 0.9656247 1.0885931 1.1095504 1.1127355 1.1423540 #>  [996,] 0.30822200 0.4265987 0.5158582 0.5489649 0.5659951 0.5945904 0.5985598 #>  [997,] 0.36322502 0.4146436 0.5110600 0.5690595 0.5780573 0.6455346 0.6528815 #>  [998,] 0.23368062 0.3876959 0.4093810 0.5285368 0.5698752 0.5907716 0.5914062 #>  [999,] 0.37967928 0.4795986 0.5036302 0.5219666 0.5324831 0.5385889 0.5585644 #> [1000,] 0.20019723 0.2340584 0.2630851 0.3529146 0.3894532 0.4161911 0.4363674 #>              [,8]      [,9]     [,10] #>    [1,] 0.7047332 0.7104460 0.7841837 #>    [2,] 0.6414205 0.6631974 0.6802847 #>    [3,] 1.0939107 1.1140356 1.1387780 #>    [4,] 0.7210711 0.7579554 0.7887600 #>    [5,] 1.0896030 1.1124498 1.1959187 #>    [6,] 1.0492808 1.0758368 1.0759479 #>    [7,] 0.8786338 0.9377627 0.9380114 #>    [8,] 0.6855362 0.7025049 0.7542649 #>    [9,] 0.5280844 0.5413577 0.5438196 #>   [10,] 0.8048108 0.8704662 0.8737697 #>   [11,] 1.0392956 1.0645166 1.1065404 #>   [12,] 0.5287872 0.5472774 0.5547268 #>   [13,] 1.4451194 1.4772063 1.5705963 #>   [14,] 0.6869493 0.6947198 0.6965941 #>   [15,] 0.8040278 0.8275318 0.8387825 #>   [16,] 0.9609171 0.9941081 1.0382032 #>   [17,] 0.7425354 0.7437852 0.8863495 #>   [18,] 1.0203966 1.0615853 1.0751695 #>   [19,] 1.1355856 1.1363839 1.2490887 #>   [20,] 0.6614363 0.6725697 0.6755581 #>   [21,] 1.0361721 1.0383561 1.0632297 #>   [22,] 0.8517062 0.8628349 0.8681297 #>   [23,] 1.0009845 1.0262881 1.0567624 #>   [24,] 1.0575662 1.0645872 1.0804330 #>   [25,] 0.9030371 0.9546155 1.0158857 #>   [26,] 0.5782986 0.5832504 0.5965391 #>   [27,] 1.0233038 1.0676185 1.0965351 #>   [28,] 0.6854221 0.6934095 0.7165395 #>   [29,] 0.6591386 0.6706770 0.7069264 #>   [30,] 0.5791865 0.6507790 0.6606484 #>   [31,] 1.0014908 1.0446547 1.0489215 #>   [32,] 0.7643313 0.7796916 0.7857249 #>   [33,] 0.6323793 0.6637462 0.6847933 #>   [34,] 0.6702968 0.6713808 0.6727000 #>   [35,] 1.4064125 1.4350775 1.4556977 #>   [36,] 0.6277543 0.6359586 0.6572186 #>   [37,] 0.6045868 0.6201920 0.6395879 #>   [38,] 1.4607721 1.4711567 1.4876207 #>   [39,] 1.7774030 1.8036953 1.8943860 #>   [40,] 1.2545416 1.2837260 1.3021823 #>   [41,] 1.6999062 1.7300284 1.7400948 #>   [42,] 0.6848283 0.6942062 0.7757077 #>   [43,] 0.6887232 0.7149560 0.7240836 #>   [44,] 1.1435178 1.1542172 1.1579388 #>   [45,] 0.5465096 0.6041297 0.6109977 #>   [46,] 0.4837338 0.5543552 0.5690194 #>   [47,] 0.7921911 0.8246486 0.8369947 #>   [48,] 0.6037115 0.6123237 0.6660933 #>   [49,] 0.7191846 0.7507268 0.7532008 #>   [50,] 0.5982544 0.6293052 0.6319741 #>   [51,] 0.7756363 0.7937723 0.8426905 #>   [52,] 0.7440182 0.7483403 0.7916668 #>   [53,] 0.7225992 0.7592109 0.8423453 #>   [54,] 0.6175817 0.6594238 0.6869414 #>   [55,] 0.8329539 0.8507649 0.8733115 #>   [56,] 0.8964702 0.8988305 0.9142341 #>   [57,] 1.3117622 1.3919736 1.4419024 #>   [58,] 0.5299289 0.5676788 0.5831593 #>   [59,] 1.1545776 1.1793605 1.3831688 #>   [60,] 1.0497360 1.0521183 1.1024626 #>   [61,] 0.7126811 0.7361964 0.7751603 #>   [62,] 0.7389643 0.7457688 0.7751983 #>   [63,] 0.5439987 0.5456726 0.5534571 #>   [64,] 0.8082972 0.8426905 0.8753901 #>   [65,] 0.7845275 0.8054137 0.8470599 #>   [66,] 0.6932998 0.6949820 0.7091576 #>   [67,] 0.8196847 0.8298444 0.8467695 #>   [68,] 0.9756547 1.0112890 1.0512436 #>   [69,] 0.5800238 0.5802232 0.5852560 #>   [70,] 0.6288973 0.6475655 0.6631650 #>   [71,] 0.6409297 0.6567682 0.6696673 #>   [72,] 0.7105857 0.7655254 0.7824136 #>   [73,] 1.9550339 2.0513082 2.0591274 #>   [74,] 0.9214144 0.9265076 0.9307477 #>   [75,] 1.1059536 1.1360822 1.2005077 #>   [76,] 1.1638809 1.1901252 1.2116822 #>   [77,] 1.1698177 1.1761615 1.2321204 #>   [78,] 0.8869364 0.9551841 0.9573257 #>   [79,] 0.7637623 0.7669684 0.7945335 #>   [80,] 0.5390381 0.5500191 0.5650926 #>   [81,] 0.5711702 0.5727189 0.5782860 #>   [82,] 0.7698447 0.7844985 0.8130941 #>   [83,] 1.4286012 1.4583198 1.4590016 #>   [84,] 0.5643303 0.5785462 0.6130396 #>   [85,] 0.6222185 0.6478088 0.6656643 #>   [86,] 1.6389567 1.6432748 1.6461691 #>   [87,] 1.1561932 1.1571157 1.2080822 #>   [88,] 1.0463089 1.1338747 1.1507294 #>   [89,] 0.5628048 0.5787678 0.6255450 #>   [90,] 1.3271320 1.3384066 1.3544936 #>   [91,] 0.6036524 0.6576152 0.7905763 #>   [92,] 0.6300940 0.6752946 0.7001117 #>   [93,] 0.6747291 0.7093290 0.7208012 #>   [94,] 1.1766815 1.1977276 1.2520610 #>   [95,] 0.6021086 0.6110002 0.6383946 #>   [96,] 1.6782049 1.6980877 1.6989471 #>   [97,] 1.3332987 1.3515569 1.4214892 #>   [98,] 0.7253566 0.7414471 0.7426260 #>   [99,] 0.7533535 0.7616604 0.7735016 #>  [100,] 0.6771546 0.7023594 0.8107139 #>  [101,] 0.8924009 0.9499924 0.9871935 #>  [102,] 0.6082331 0.6641389 0.6703715 #>  [103,] 0.6444653 0.6980437 0.7338853 #>  [104,] 1.1602939 1.1635266 1.2051096 #>  [105,] 0.9196217 0.9206959 0.9464433 #>  [106,] 1.2031767 1.2083649 1.2483391 #>  [107,] 0.9317027 0.9615351 0.9623971 #>  [108,] 0.7497950 0.7565222 0.7801127 #>  [109,] 0.5798013 0.5974423 0.6482627 #>  [110,] 1.1892846 1.2028318 1.2123868 #>  [111,] 0.6815402 0.6830330 0.6946996 #>  [112,] 0.4662254 0.5036302 0.5188630 #>  [113,] 1.1246306 1.1343079 1.1695031 #>  [114,] 0.8683974 0.8733620 0.8968910 #>  [115,] 0.7412404 0.7457688 0.7888849 #>  [116,] 0.5146623 0.5487316 0.5518156 #>  [117,] 0.5629128 0.5880514 0.6209538 #>  [118,] 0.9685932 0.9996779 1.0322110 #>  [119,] 0.8097122 0.8287996 0.8314241 #>  [120,] 1.1739251 1.1866713 1.1914146 #>  [121,] 0.7142653 0.7489929 0.7901127 #>  [122,] 1.0063105 1.0323132 1.0488041 #>  [123,] 1.5629724 1.6245558 1.6264127 #>  [124,] 0.7510982 0.7812457 0.7846648 #>  [125,] 1.6869592 1.7325778 1.7408240 #>  [126,] 0.7298320 0.7454396 0.7489929 #>  [127,] 0.6087222 0.6240622 0.6254836 #>  [128,] 0.6528065 0.6798189 0.7024856 #>  [129,] 1.2755986 1.3241582 1.3277889 #>  [130,] 1.3162023 1.3163519 1.4222784 #>  [131,] 0.8952236 1.0098039 1.0264929 #>  [132,] 0.8294458 0.8392996 0.8608176 #>  [133,] 2.4597615 2.4619286 2.4697521 #>  [134,] 0.9160237 0.9308473 0.9381650 #>  [135,] 0.7417892 0.7646430 0.7821356 #>  [136,] 1.3353172 1.3360749 1.3642037 #>  [137,] 0.8615261 0.8861932 0.9035626 #>  [138,] 0.7514427 0.7556226 0.7710486 #>  [139,] 0.8518666 0.8866377 0.9337507 #>  [140,] 0.6524881 0.7437852 0.7593698 #>  [141,] 1.0815386 1.0960821 1.1213144 #>  [142,] 0.8724674 0.8789634 0.8937551 #>  [143,] 1.5240546 1.5949144 1.5987542 #>  [144,] 0.6130396 0.6264908 0.6297205 #>  [145,] 1.1185659 1.1683018 1.2046995 #>  [146,] 0.5197259 0.5422118 0.6067990 #>  [147,] 0.8890482 0.8911134 0.9323240 #>  [148,] 0.5453079 0.5819347 0.5839480 #>  [149,] 1.0346725 1.0386870 1.0578980 #>  [150,] 1.2804134 1.3122137 1.3239088 #>  [151,] 0.6503653 0.7154720 0.7646430 #>  [152,] 2.1285161 2.1691262 2.1703967 #>  [153,] 1.2035937 1.2397023 1.2742472 #>  [154,] 0.6735878 0.7555265 0.7758678 #>  [155,] 0.6918506 0.7128775 0.7298909 #>  [156,] 0.8627988 0.9117700 0.9340442 #>  [157,] 1.5383684 1.5464890 1.5922001 #>  [158,] 0.7011941 0.7076910 0.7252061 #>  [159,] 1.3541154 1.3602691 1.4059207 #>  [160,] 0.7451266 0.7528417 0.8213767 #>  [161,] 0.6483000 0.6625195 0.6854221 #>  [162,] 0.5522224 0.5594382 0.5973001 #>  [163,] 1.1623252 1.2270912 1.2426631 #>  [164,] 0.6179231 0.6254180 0.6278191 #>  [165,] 0.6209562 0.6366081 0.6485965 #>  [166,] 1.1961451 1.2049210 1.2093707 #>  [167,] 1.0098973 1.0326367 1.0402377 #>  [168,] 0.8430446 0.8510476 0.8968910 #>  [169,] 0.5408953 0.5413577 0.5522254 #>  [170,] 0.7414471 0.7492466 0.7530366 #>  [171,] 0.5299735 0.5375676 0.5450930 #>  [172,] 0.5380507 0.5607606 0.5723292 #>  [173,] 0.6057762 0.6368288 0.6676156 #>  [174,] 1.0020593 1.0097652 1.0182614 #>  [175,] 1.4337850 1.4590160 1.4855847 #>  [176,] 0.8675748 0.8723392 0.8754652 #>  [177,] 0.5927002 0.6059020 0.6393585 #>  [178,] 0.6299978 0.6415623 0.6423463 #>  [179,] 1.0519481 1.0684201 1.0690919 #>  [180,] 1.0311467 1.0789439 1.0853533 #>  [181,] 0.6284040 0.6324714 0.6556395 #>  [182,] 0.7909059 0.7944686 0.7945335 #>  [183,] 0.5364438 0.5373288 0.5543552 #>  [184,] 0.5769407 0.6111880 0.6210832 #>  [185,] 0.5829708 0.6476495 0.6728462 #>  [186,] 0.7047198 0.7066446 0.7137666 #>  [187,] 0.6502066 0.6617013 0.6700790 #>  [188,] 0.8590557 0.9326644 0.9494090 #>  [189,] 0.8343105 0.9048640 0.9726383 #>  [190,] 1.0308487 1.0690919 1.0835299 #>  [191,] 0.7252901 0.7374405 0.7386560 #>  [192,] 0.8274669 0.8571935 0.8987606 #>  [193,] 0.7876220 0.8132722 0.8637834 #>  [194,] 0.8813065 0.9099878 0.9236403 #>  [195,] 0.9649863 0.9973717 1.0150620 #>  [196,] 0.9510213 0.9553197 0.9649863 #>  [197,] 1.0744763 1.1482496 1.1659051 #>  [198,] 0.8220495 0.8420151 0.8565579 #>  [199,] 0.7283517 0.7699282 0.8290198 #>  [200,] 1.0848784 1.1842237 1.2029100 #>  [201,] 1.2080822 1.2621266 1.2624160 #>  [202,] 1.3732753 1.3943308 1.4094856 #>  [203,] 0.9807261 0.9846618 1.0018153 #>  [204,] 0.6296342 0.6369300 0.6589573 #>  [205,] 0.6504684 0.6592839 0.6629635 #>  [206,] 0.7068664 0.7506993 0.7924247 #>  [207,] 0.6278351 0.6315417 0.6346851 #>  [208,] 1.1393812 1.1502969 1.2008525 #>  [209,] 0.6447366 0.6488016 0.6554532 #>  [210,] 1.0609250 1.0764759 1.1093181 #>  [211,] 0.6701564 0.8053309 0.8361862 #>  [212,] 0.5105140 0.5310747 0.5437360 #>  [213,] 0.6830330 0.7065753 0.7113503 #>  [214,] 0.6015393 0.6015542 0.6217282 #>  [215,] 0.9659034 1.0014171 1.0259460 #>  [216,] 1.1640397 1.1748123 1.1947783 #>  [217,] 0.7608458 0.7795133 0.7956221 #>  [218,] 0.6886339 0.7112047 0.7374655 #>  [219,] 1.1352357 1.1820504 1.1922415 #>  [220,] 0.6896106 0.6907030 0.6948734 #>  [221,] 0.9186459 0.9374610 0.9530520 #>  [222,] 0.5130394 0.5335993 0.5934634 #>  [223,] 0.7373350 0.7617604 0.7873689 #>  [224,] 0.8864736 0.9399565 0.9638177 #>  [225,] 0.6804958 0.6902001 0.7249318 #>  [226,] 0.5695927 0.5872724 0.5996268 #>  [227,] 0.5490086 0.5689220 0.5959849 #>  [228,] 0.8905610 0.9075500 0.9208325 #>  [229,] 0.8519938 0.8704716 0.8775600 #>  [230,] 0.9562790 0.9934583 1.0029470 #>  [231,] 0.5120453 0.5280154 0.5511458 #>  [232,] 0.8849972 0.8981198 0.9029892 #>  [233,] 0.7967011 0.8007873 0.8265057 #>  [234,] 0.6875069 0.7112358 0.7414040 #>  [235,] 0.9648823 1.0728910 1.0825284 #>  [236,] 0.6975568 0.7079818 0.7526756 #>  [237,] 0.6814139 0.6826835 0.7008388 #>  [238,] 0.6124717 0.6345789 0.6534097 #>  [239,] 0.6087236 0.6489770 0.6702968 #>  [240,] 0.5700220 0.5922980 0.6338938 #>  [241,] 0.6887577 0.6893468 0.7154549 #>  [242,] 0.6449438 0.6522079 0.6831658 #>  [243,] 0.7000453 0.7013417 0.7076910 #>  [244,] 0.6822859 0.7492466 0.8268985 #>  [245,] 0.7603657 0.7789974 0.7922624 #>  [246,] 0.7343668 0.7468968 0.7534896 #>  [247,] 0.6418458 0.6665865 0.7291138 #>  [248,] 0.5255129 0.5381686 0.5561923 #>  [249,] 0.5818625 0.5891629 0.5917282 #>  [250,] 0.8915923 0.9021102 0.9105180 #>  [251,] 0.6461410 0.6504684 0.6692322 #>  [252,] 0.7362918 0.7365015 0.7576590 #>  [253,] 1.2293732 1.2753239 1.2929953 #>  [254,] 0.7810681 0.7918153 0.8691459 #>  [255,] 0.7095891 0.7200465 0.7358993 #>  [256,] 1.2446084 1.3088885 1.3181414 #>  [257,] 0.8728444 0.8809330 0.8853450 #>  [258,] 0.7529363 0.7534889 0.8737421 #>  [259,] 0.5902972 0.5928902 0.6308346 #>  [260,] 0.6718197 0.7106755 0.7300003 #>  [261,] 0.7425354 0.7910531 0.8270597 #>  [262,] 1.1997473 1.2073546 1.2511650 #>  [263,] 1.0737080 1.1634936 1.1849970 #>  [264,] 0.6337146 0.6397812 0.6714378 #>  [265,] 0.5894187 0.6312271 0.6571348 #>  [266,] 0.5930981 0.6305166 0.6359485 #>  [267,] 0.6701691 0.6837886 0.6969339 #>  [268,] 0.5462910 0.5664751 0.5695664 #>  [269,] 0.5395772 0.5465096 0.5706228 #>  [270,] 1.3048490 1.3252675 1.3468882 #>  [271,] 0.6980437 0.7020965 0.7444436 #>  [272,] 0.7935173 0.8011135 0.8406691 #>  [273,] 1.3738066 1.4129677 1.4566993 #>  [274,] 0.7171945 0.7515179 0.7517438 #>  [275,] 0.6921267 0.7069993 0.7301444 #>  [276,] 0.9448445 0.9600733 0.9803175 #>  [277,] 1.0610588 1.1323937 1.1518199 #>  [278,] 0.6808497 0.6851222 0.7252061 #>  [279,] 0.7815055 0.8064172 0.8468132 #>  [280,] 1.3808879 1.4096142 1.4355093 #>  [281,] 0.7822619 0.7940733 0.8339535 #>  [282,] 0.7026467 0.7727260 0.8042984 #>  [283,] 1.0868234 1.0955112 1.1188925 #>  [284,] 0.8707431 0.9462525 0.9574392 #>  [285,] 1.3098118 1.3109613 1.3288691 #>  [286,] 0.6881313 0.7011941 0.7270770 #>  [287,] 0.6186616 0.6282704 0.6284530 #>  [288,] 0.7102418 0.7968462 0.8558811 #>  [289,] 0.7234398 0.7674279 0.7828373 #>  [290,] 1.0499355 1.0672302 1.0777120 #>  [291,] 0.9111301 0.9179055 0.9634648 #>  [292,] 0.5188914 0.5481655 0.5913548 #>  [293,] 0.8352271 0.8452204 0.9327998 #>  [294,] 1.0379926 1.0720157 1.1078455 #>  [295,] 0.9033339 0.9088798 0.9200165 #>  [296,] 1.0674152 1.0726240 1.1531050 #>  [297,] 0.9405769 0.9858961 1.0169845 #>  [298,] 0.7560798 0.7703281 0.8034664 #>  [299,] 0.6066695 0.6251684 0.6254802 #>  [300,] 0.6369705 0.6423369 0.6656108 #>  [301,] 0.9242277 0.9348738 0.9476694 #>  [302,] 0.5970435 0.6024872 0.6081729 #>  [303,] 0.8737768 0.8869972 0.9009176 #>  [304,] 0.7123307 0.7418367 0.7556182 #>  [305,] 1.7347919 1.7694638 1.8451193 #>  [306,] 1.0881068 1.1326235 1.1453585 #>  [307,] 0.8532326 0.8580553 0.8703862 #>  [308,] 0.9183210 0.9332303 0.9335826 #>  [309,] 0.8173546 0.8297603 0.8338482 #>  [310,] 0.9978282 1.0109840 1.0191262 #>  [311,] 0.8583569 0.9420993 1.0453889 #>  [312,] 0.6879880 0.6909103 0.7135974 #>  [313,] 0.5659517 0.5885196 0.5934607 #>  [314,] 0.5144100 0.5299289 0.5380507 #>  [315,] 1.5151442 1.5554906 1.5597036 #>  [316,] 0.6633638 0.6675235 0.7187628 #>  [317,] 1.0006400 1.0213396 1.0762440 #>  [318,] 0.7559686 0.7692655 0.7735351 #>  [319,] 0.6266141 0.6712053 0.6810414 #>  [320,] 0.7707400 0.7882731 0.8053350 #>  [321,] 0.9267980 0.9846618 1.0352317 #>  [322,] 0.6422244 0.6715535 0.6921267 #>  [323,] 1.5148519 1.5245245 1.5993052 #>  [324,] 0.8840006 0.9461225 0.9601944 #>  [325,] 0.8635800 0.8695582 0.8748257 #>  [326,] 0.8359788 0.8368975 0.8599840 #>  [327,] 0.5223925 0.5476168 0.5949791 #>  [328,] 0.6915035 0.6952236 0.7264707 #>  [329,] 0.6266141 0.6324249 0.6507609 #>  [330,] 0.6371668 0.7095891 0.7391180 #>  [331,] 0.5316566 0.5363043 0.5497515 #>  [332,] 0.6368288 0.6374088 0.6438900 #>  [333,] 0.5214221 0.5232992 0.5669786 #>  [334,] 0.5951705 0.5970384 0.6087219 #>  [335,] 1.3078149 1.3603938 1.4241865 #>  [336,] 0.5300963 0.5367432 0.5754572 #>  [337,] 0.5530354 0.5977071 0.5991555 #>  [338,] 0.9542710 0.9638495 0.9672024 #>  [339,] 0.9286943 0.9615989 1.0383871 #>  [340,] 1.4523259 1.4772548 1.4797834 #>  [341,] 0.6697829 0.7023633 0.7418957 #>  [342,] 0.5660122 0.5926328 0.6218399 #>  [343,] 1.0213071 1.0319657 1.0607571 #>  [344,] 0.6866361 0.7025294 0.7253721 #>  [345,] 0.6254308 0.6273300 0.6741353 #>  [346,] 1.3602058 1.3707460 1.5081733 #>  [347,] 0.7844985 0.7865505 0.8005759 #>  [348,] 0.9678829 0.9939987 1.0011931 #>  [349,] 0.6531948 0.6551563 0.6606734 #>  [350,] 1.6774413 1.7045468 1.7262867 #>  [351,] 0.6620198 0.7971390 0.8171032 #>  [352,] 1.0825134 1.1347221 1.1624359 #>  [353,] 0.8564208 0.8792170 0.8873940 #>  [354,] 0.5095269 0.5249243 0.5305430 #>  [355,] 0.5372019 0.5751283 0.5944731 #>  [356,] 1.1766834 1.2276929 1.2479664 #>  [357,] 0.5639394 0.6254507 0.6546473 #>  [358,] 0.5698225 0.5931316 0.6052670 #>  [359,] 0.7410501 0.7510554 0.7579396 #>  [360,] 0.6504436 0.6846867 0.7108606 #>  [361,] 0.7568506 0.8202051 0.8484445 #>  [362,] 0.6667541 0.6816178 0.6892280 #>  [363,] 1.0970660 1.2004969 1.2058457 #>  [364,] 0.8560704 0.8864458 0.8885843 #>  [365,] 0.6251583 0.6613045 0.6821412 #>  [366,] 0.5232992 0.5255045 0.5512574 #>  [367,] 0.7516923 0.7529461 0.7560778 #>  [368,] 0.6426710 0.6815502 0.6867777 #>  [369,] 0.8321651 0.8542277 0.8678461 #>  [370,] 0.7863399 0.7903002 0.8251574 #>  [371,] 0.4570490 0.5219666 0.5255129 #>  [372,] 0.5489649 0.5604408 0.6080367 #>  [373,] 0.5945732 0.6077787 0.6164800 #>  [374,] 0.8519240 0.8753933 0.8880246 #>  [375,] 0.8381460 0.8422119 0.8505305 #>  [376,] 0.5352541 0.5357802 0.5418420 #>  [377,] 0.9413123 0.9416822 0.9811382 #>  [378,] 0.7667496 0.8075683 0.8077714 #>  [379,] 1.4446264 1.4598577 1.5084635 #>  [380,] 0.9207407 0.9827432 0.9980256 #>  [381,] 0.9434217 1.0235849 1.0304359 #>  [382,] 0.9987884 1.0126364 1.0742602 #>  [383,] 0.5254510 0.5287851 0.5365297 #>  [384,] 1.0821451 1.1120387 1.1325769 #>  [385,] 0.7818137 0.7822059 0.7826278 #>  [386,] 0.4853453 0.4992772 0.4998188 #>  [387,] 1.0335580 1.0604612 1.0810862 #>  [388,] 1.3170670 1.3354038 1.3486437 #>  [389,] 0.8412040 0.8492821 0.8823997 #>  [390,] 0.8840006 0.9014968 0.9156229 #>  [391,] 0.8114918 0.8235063 0.8345844 #>  [392,] 1.8001090 1.8495661 1.8599373 #>  [393,] 0.8119024 0.8142179 0.8337361 #>  [394,] 0.7434977 0.7489527 0.7555524 #>  [395,] 0.6955927 0.7079818 0.7233384 #>  [396,] 0.7358988 0.7699282 0.8112320 #>  [397,] 1.3249629 1.3293615 1.3609592 #>  [398,] 1.4945139 1.7140364 1.7159636 #>  [399,] 0.7401457 0.7640925 0.7731047 #>  [400,] 0.5413423 0.5633472 0.5642954 #>  [401,] 1.4504172 1.4719863 1.5572822 #>  [402,] 0.9608456 0.9677030 0.9807607 #>  [403,] 0.6528512 0.6749686 0.7165665 #>  [404,] 0.5481405 0.5674496 0.6015542 #>  [405,] 0.6908090 0.6927312 0.7127862 #>  [406,] 0.6285286 0.6459050 0.6555909 #>  [407,] 0.6369705 0.6679342 0.6865174 #>  [408,] 0.6084620 0.6284792 0.6295416 #>  [409,] 0.6924296 0.7573924 0.7937460 #>  [410,] 0.4260122 0.4832739 0.4845802 #>  [411,] 0.7748530 0.8011611 0.8550012 #>  [412,] 0.6848315 0.6907030 0.7013417 #>  [413,] 0.9359060 0.9407715 0.9426938 #>  [414,] 0.8215090 0.8429600 0.8606032 #>  [415,] 1.0799644 1.1012694 1.1108143 #>  [416,] 0.8337611 0.8683412 0.8708839 #>  [417,] 1.1072299 1.1335416 1.1888129 #>  [418,] 0.6071685 0.6211115 0.6665865 #>  [419,] 2.0622770 2.0732479 2.0975021 #>  [420,] 1.1579784 1.1874665 1.1943955 #>  [421,] 0.8437701 0.8633034 0.8886171 #>  [422,] 0.5659517 0.6307840 0.6455346 #>  [423,] 0.7159624 0.7358489 0.7841837 #>  [424,] 0.6296331 0.6881313 0.7679130 #>  [425,] 0.6369300 0.6797835 0.7108606 #>  [426,] 0.9189834 0.9334186 0.9341880 #>  [427,] 1.0364651 1.0753738 1.0797071 #>  [428,] 0.6887844 0.7065494 0.7108007 #>  [429,] 0.9388490 0.9886052 0.9922339 #>  [430,] 0.6201057 0.6269690 0.6288973 #>  [431,] 1.0795648 1.0881068 1.0997755 #>  [432,] 1.0379926 1.0691786 1.0755834 #>  [433,] 1.1935930 1.2136506 1.3210965 #>  [434,] 0.5251180 0.5413423 0.5497515 #>  [435,] 0.7207410 0.7480937 0.8258053 #>  [436,] 0.8751890 0.8974858 0.9429621 #>  [437,] 0.5060421 0.5192237 0.5210952 #>  [438,] 0.6091096 0.6296342 0.6605546 #>  [439,] 0.6507153 0.6731011 0.6824017 #>  [440,] 0.6268266 0.6691882 0.6959807 #>  [441,] 0.5163133 0.5541023 0.5578565 #>  [442,] 0.6496324 0.6529263 0.6909794 #>  [443,] 0.7592109 0.7849160 0.7991259 #>  [444,] 0.6337632 0.6480659 0.6865030 #>  [445,] 0.7564317 0.7714710 0.8010342 #>  [446,] 1.5084274 1.5559028 1.5755323 #>  [447,] 0.5996479 0.6088210 0.6822883 #>  [448,] 0.9625666 0.9704369 0.9799864 #>  [449,] 0.8831779 0.9316208 0.9385488 #>  [450,] 0.8285459 0.9066625 0.9323397 #>  [451,] 1.2804134 1.3044121 1.3245982 #>  [452,] 1.2597318 1.2861475 1.2959427 #>  [453,] 0.9689464 0.9801442 1.0259247 #>  [454,] 1.1111103 1.1118867 1.1893486 #>  [455,] 0.6917033 0.6978447 0.7015404 #>  [456,] 0.6590761 0.6941419 0.7036027 #>  [457,] 1.3920763 1.3989042 1.4733020 #>  [458,] 1.4213550 1.4589644 1.5273005 #>  [459,] 0.6881604 0.8864736 0.9002664 #>  [460,] 0.7141067 0.7376464 0.7484661 #>  [461,] 0.9437557 0.9843238 0.9936820 #>  [462,] 0.6259386 0.6590761 0.6594944 #>  [463,] 0.7233402 0.7995105 0.8420370 #>  [464,] 0.7793370 0.8025691 0.8044773 #>  [465,] 0.5616974 0.5926328 0.6082331 #>  [466,] 1.0323286 1.0718966 1.1102586 #>  [467,] 0.8498368 0.8743226 0.8792170 #>  [468,] 0.9424442 1.0326367 1.0721550 #>  [469,] 0.8361427 0.8373940 0.8989414 #>  [470,] 0.6483323 0.6891220 0.7550641 #>  [471,] 1.8366318 1.9283131 2.0240221 #>  [472,] 0.8140066 0.8452733 0.8533514 #>  [473,] 1.0418663 1.0485898 1.0507061 #>  [474,] 1.2030919 1.2069265 1.2217792 #>  [475,] 1.3845539 1.3957080 1.3982280 #>  [476,] 0.7639565 0.7646057 0.7866773 #>  [477,] 0.5829708 0.6147053 0.6402044 #>  [478,] 0.5600070 0.5704629 0.6037277 #>  [479,] 0.6982415 0.7304507 0.7345190 #>  [480,] 0.5890791 0.6269690 0.6316907 #>  [481,] 0.8250618 0.8542277 0.8841978 #>  [482,] 0.9004955 0.9191842 0.9553523 #>  [483,] 0.8343105 0.8682689 0.8720851 #>  [484,] 1.2023102 1.2107606 1.2510217 #>  [485,] 1.3325529 1.3339828 1.4030016 #>  [486,] 1.0492808 1.0660843 1.0809645 #>  [487,] 0.9801442 0.9856327 0.9907079 #>  [488,] 0.6149703 0.6405840 0.6482627 #>  [489,] 0.5227396 0.5300460 0.5357802 #>  [490,] 1.2932576 1.3370283 1.3646813 #>  [491,] 0.6223394 0.6553773 0.6833607 #>  [492,] 1.1625769 1.2127428 1.2806805 #>  [493,] 0.7221304 0.7477089 0.7481848 #>  [494,] 0.6658604 0.7178302 0.7247861 #>  [495,] 0.8268985 0.8452733 0.9048640 #>  [496,] 0.4722554 0.5441480 0.5506415 #>  [497,] 0.9635406 1.0323436 1.0328125 #>  [498,] 0.6121149 0.6296331 0.6371968 #>  [499,] 0.9970754 1.0116667 1.0382032 #>  [500,] 0.7979995 0.8307779 0.8356522 #>  [501,] 1.1299210 1.1665016 1.2038049 #>  [502,] 0.6456828 0.6476495 0.6824805 #>  [503,] 0.8343515 0.8489408 0.8855354 #>  [504,] 0.7221569 0.7301444 0.7341606 #>  [505,] 1.3949529 1.3990695 1.4151882 #>  [506,] 0.6426710 0.6504436 0.6550126 #>  [507,] 0.5214541 0.5299735 0.5880431 #>  [508,] 0.8200966 0.8473559 0.8821232 #>  [509,] 0.6767477 0.6975288 0.7162127 #>  [510,] 1.3927235 1.3937287 1.3955870 #>  [511,] 0.5271642 0.5586766 0.6087219 #>  [512,] 0.6254308 0.6260469 0.6272554 #>  [513,] 1.3359981 1.3391893 1.3514178 #>  [514,] 0.7511034 0.7986166 0.8103244 #>  [515,] 1.2103126 1.2724506 1.2894302 #>  [516,] 0.8423453 0.8465814 0.8484863 #>  [517,] 0.7257708 0.8026458 0.8323968 #>  [518,] 1.0107187 1.0669432 1.0955477 #>  [519,] 1.6797456 1.6961179 1.6986499 #>  [520,] 0.6636637 0.6652031 0.6964471 #>  [521,] 0.8046708 0.8270457 0.8349331 #>  [522,] 0.7585633 0.7678116 0.7815055 #>  [523,] 1.7619805 1.7620456 1.9075397 #>  [524,] 0.8918863 0.9056971 0.9078606 #>  [525,] 0.7711311 0.7892421 0.7995517 #>  [526,] 0.7506998 0.7514039 0.7739283 #>  [527,] 0.7933943 0.8474790 0.8649767 #>  [528,] 0.7320595 0.7338424 0.7389643 #>  [529,] 0.8389431 0.8389723 0.8822914 #>  [530,] 0.8626965 0.9194272 0.9361871 #>  [531,] 0.6322816 0.6461015 0.6551826 #>  [532,] 0.7483403 0.7664765 0.8026009 #>  [533,] 0.9076409 0.9603202 0.9636447 #>  [534,] 0.9659640 1.0309766 1.0468901 #>  [535,] 0.6064031 0.6259386 0.6431618 #>  [536,] 1.6996776 1.7350338 1.7650267 #>  [537,] 0.6918506 0.6944751 0.7035849 #>  [538,] 0.8539143 0.9054635 0.9129424 #>  [539,] 0.6610957 0.6858007 0.7083119 #>  [540,] 0.6120866 0.6137684 0.6295371 #>  [541,] 0.5960711 0.6081654 0.6230198 #>  [542,] 1.2517210 1.2621590 1.2839675 #>  [543,] 0.5468600 0.5514407 0.5791009 #>  [544,] 0.6932998 0.7000453 0.7130851 #>  [545,] 0.6298960 0.6315137 0.6678122 #>  [546,] 0.6316042 0.6413394 0.6419751 #>  [547,] 0.8725733 0.8774862 0.8829276 #>  [548,] 1.1854489 1.1896254 1.2142408 #>  [549,] 0.6225665 0.6451952 0.6482742 #>  [550,] 0.9122546 0.9278065 0.9614304 #>  [551,] 0.7644397 0.8759170 0.8807320 #>  [552,] 0.7181626 0.7696635 0.7717347 #>  [553,] 0.8330466 0.8384350 0.8731855 #>  [554,] 0.6114660 0.6280712 0.6312099 #>  [555,] 0.6972318 0.6999118 0.7073940 #>  [556,] 0.9994424 1.0145061 1.0658889 #>  [557,] 1.0325793 1.0636037 1.0689653 #>  [558,] 0.7796350 0.8465814 0.8745539 #>  [559,] 1.0523630 1.0677928 1.0737080 #>  [560,] 0.7289075 0.7295944 0.7384290 #>  [561,] 1.0983935 1.1204454 1.1626528 #>  [562,] 0.6934351 0.7214226 0.7646761 #>  [563,] 0.6969339 0.7170688 0.7245057 #>  [564,] 0.7931867 0.7979054 0.7987465 #>  [565,] 0.5864405 0.5962334 0.6152350 #>  [566,] 1.0585420 1.0962442 1.1045095 #>  [567,] 0.8722788 0.9316868 0.9318368 #>  [568,] 0.8003845 0.8486726 0.8979212 #>  [569,] 1.0221183 1.0737526 1.1279051 #>  [570,] 0.9401285 0.9708070 0.9717984 #>  [571,] 1.1835831 1.1851875 1.2362048 #>  [572,] 0.6957065 0.7139986 0.7156543 #>  [573,] 0.6075533 0.6122092 0.6468738 #>  [574,] 0.5450930 0.5705277 0.5832061 #>  [575,] 0.6639336 0.6926856 0.7663376 #>  [576,] 0.8394596 0.9244963 0.9410156 #>  [577,] 0.9092800 0.9495892 0.9668692 #>  [578,] 1.1181983 1.2022061 1.2527229 #>  [579,] 1.1178313 1.1343650 1.1752523 #>  [580,] 0.6917033 0.6929541 0.7102139 #>  [581,] 0.6110179 0.6366081 0.6591386 #>  [582,] 0.5865029 0.5883754 0.6184856 #>  [583,] 0.8689489 0.8713700 0.8742315 #>  [584,] 1.2001631 1.2111082 1.2208875 #>  [585,] 0.5785462 0.6309084 0.6468738 #>  [586,] 0.8632478 0.9253353 0.9579648 #>  [587,] 1.6469082 1.6623264 1.6836044 #>  [588,] 0.8239318 0.8322180 0.8346758 #>  [589,] 0.7201049 0.7744149 0.7852797 #>  [590,] 0.6472884 0.6504390 0.6595492 #>  [591,] 0.6499900 0.6502066 0.6583784 #>  [592,] 0.6335110 0.7314742 0.7697863 #>  [593,] 0.5965391 0.6092272 0.6143856 #>  [594,] 0.6696475 0.6952236 0.7305111 #>  [595,] 0.5694813 0.5713210 0.5738686 #>  [596,] 0.5689988 0.5909949 0.6123237 #>  [597,] 0.8037378 0.8236783 0.8468132 #>  [598,] 0.7076544 0.7280388 0.7314742 #>  [599,] 0.9542710 0.9598425 0.9609042 #>  [600,] 0.7122552 0.7252567 0.8010461 #>  [601,] 0.5043888 0.5260483 0.5359880 #>  [602,] 0.5708888 0.5776000 0.5816388 #>  [603,] 0.5923602 0.6156591 0.6236697 #>  [604,] 1.4967843 1.5261073 1.5391861 #>  [605,] 0.6344208 0.6433227 0.6978417 #>  [606,] 1.0048529 1.1238924 1.1663163 #>  [607,] 0.6206189 0.6223959 0.6283467 #>  [608,] 1.0082365 1.0089055 1.0192989 #>  [609,] 0.8023494 0.8536422 0.8667761 #>  [610,] 0.8728829 0.8791238 0.9481648 #>  [611,] 1.2183901 1.2264854 1.2784561 #>  [612,] 0.7493424 0.7571816 0.7652569 #>  [613,] 0.9370844 0.9378633 1.0100095 #>  [614,] 1.0341568 1.0421121 1.0423254 #>  [615,] 0.8805531 0.9180486 0.9890504 #>  [616,] 0.8644061 0.8927731 0.8996746 #>  [617,] 0.8826524 0.8950090 0.8982028 #>  [618,] 0.6018630 0.6078455 0.6280712 #>  [619,] 0.6171152 0.6571348 0.6856244 #>  [620,] 0.5367502 0.5530591 0.5944927 #>  [621,] 0.9196217 0.9211956 0.9638174 #>  [622,] 1.0691070 1.0693567 1.0845007 #>  [623,] 0.8884526 0.9298823 0.9582189 #>  [624,] 0.8954325 0.9388718 0.9780213 #>  [625,] 0.6784099 0.6846910 0.6887844 #>  [626,] 0.6366373 0.7068138 0.7425862 #>  [627,] 0.6272554 0.6319741 0.7273997 #>  [628,] 0.8739521 0.8763842 0.9011812 #>  [629,] 0.6327154 0.6330009 0.6411958 #>  [630,] 1.3647476 1.3971116 1.5556589 #>  [631,] 1.3383258 1.4176684 1.4199142 #>  [632,] 0.5818625 0.6313948 0.6478334 #>  [633,] 0.6927948 0.7008609 0.7132727 #>  [634,] 0.6946352 0.7015404 0.7252901 #>  [635,] 1.1106586 1.1305985 1.1561571 #>  [636,] 0.7494311 0.7523884 0.7806192 #>  [637,] 0.7142736 0.7309029 0.7378334 #>  [638,] 0.5053341 0.5352231 0.5370100 #>  [639,] 1.0883164 1.1285231 1.1324501 #>  [640,] 0.7058293 0.7501965 0.7691776 #>  [641,] 1.0350087 1.0547686 1.0743550 #>  [642,] 1.1187312 1.1667589 1.1800682 #>  [643,] 0.9212192 0.9316373 0.9615458 #>  [644,] 0.7653432 0.7714710 0.8333664 #>  [645,] 1.2017778 1.2580624 1.2877979 #>  [646,] 0.8446917 0.8529926 0.8624743 #>  [647,] 0.6057263 0.6104428 0.7060885 #>  [648,] 0.5791865 0.6299614 0.6642824 #>  [649,] 0.6801022 0.6911235 0.7140283 #>  [650,] 0.5363043 0.5934036 0.5991295 #>  [651,] 0.6032275 0.6165739 0.6187139 #>  [652,] 0.8573883 0.8858543 0.8998728 #>  [653,] 1.2063106 1.2063451 1.2082663 #>  [654,] 0.8652811 0.9522926 0.9677344 #>  [655,] 0.9519594 0.9933560 1.0295447 #>  [656,] 0.6351153 0.6382597 0.6505448 #>  [657,] 0.6583510 0.6898545 0.7146265 #>  [658,] 0.6345132 0.6429590 0.6829485 #>  [659,] 1.6694271 1.7098825 1.7994794 #>  [660,] 1.6022668 1.6923704 1.7233775 #>  [661,] 0.6595898 0.6659709 0.6865174 #>  [662,] 1.0534389 1.0643914 1.0821283 #>  [663,] 1.6040380 1.6109316 1.6206263 #>  [664,] 0.9491015 0.9631516 0.9759137 #>  [665,] 0.8075683 0.8215408 0.8388250 #>  [666,] 0.9592373 0.9705222 0.9710403 #>  [667,] 1.4791164 1.5490838 1.6806317 #>  [668,] 0.5977071 0.6105702 0.6141399 #>  [669,] 0.6414205 0.6720598 0.7199142 #>  [670,] 1.0045843 1.0397756 1.0995174 #>  [671,] 1.0090117 1.0389491 1.0492488 #>  [672,] 1.4352610 1.4363488 1.4454380 #>  [673,] 0.9429846 0.9439894 0.9762117 #>  [674,] 0.9925119 1.0605241 1.0738560 #>  [675,] 1.2672290 1.2674232 1.2800383 #>  [676,] 1.1152745 1.1182967 1.1867364 #>  [677,] 0.6259066 0.6741026 0.6865902 #>  [678,] 1.3147000 1.3591388 1.3684482 #>  [679,] 0.5402732 0.5597026 0.5605741 #>  [680,] 1.4048986 1.4197497 1.4674938 #>  [681,] 0.6324714 0.6791254 0.7095518 #>  [682,] 0.6216446 0.6227934 0.6396500 #>  [683,] 0.8191116 0.8227252 0.8227968 #>  [684,] 0.7578897 0.8361862 0.8477020 #>  [685,] 0.7809619 0.8022207 0.9169606 #>  [686,] 0.6912560 0.6980159 0.7001974 #>  [687,] 0.6396881 0.6595492 0.6608365 #>  [688,] 0.9389011 0.9786173 1.0203455 #>  [689,] 1.0327764 1.0356586 1.0942342 #>  [690,] 1.0168569 1.0242121 1.0564785 #>  [691,] 0.7815342 0.8290332 0.8457580 #>  [692,] 0.7871776 0.7944107 0.8269135 #>  [693,] 0.5903307 0.6228972 0.6532132 #>  [694,] 1.0301478 1.0712819 1.0860212 #>  [695,] 1.0982044 1.2087601 1.2489834 #>  [696,] 0.7051500 0.7571816 0.7623088 #>  [697,] 0.5705964 0.5819347 0.5934052 #>  [698,] 0.7250594 0.7492617 0.7493448 #>  [699,] 0.6606484 0.6631976 0.6798189 #>  [700,] 0.8930866 0.9300010 0.9593590 #>  [701,] 1.5080146 1.5347144 1.5522718 #>  [702,] 1.6582394 1.6619402 1.6853728 #>  [703,] 0.6319952 0.6865030 0.7083006 #>  [704,] 0.8173095 0.8319102 0.8374934 #>  [705,] 1.3976005 1.4553816 1.5463344 #>  [706,] 0.8836750 0.8845754 0.9364194 #>  [707,] 0.7165665 0.7170963 0.7263721 #>  [708,] 1.3919483 1.4140123 1.4266226 #>  [709,] 1.6026818 1.6457764 1.6749081 #>  [710,] 0.7295703 0.7564317 0.7691372 #>  [711,] 0.9122546 0.9433326 0.9522926 #>  [712,] 0.9266317 0.9296969 0.9347825 #>  [713,] 0.9685092 0.9739743 1.0203926 #>  [714,] 2.0668551 2.0990286 2.1735875 #>  [715,] 0.5817940 0.6003385 0.6047075 #>  [716,] 0.6948689 0.6957559 0.6984632 #>  [717,] 0.7020968 0.7043039 0.7144547 #>  [718,] 0.9107811 1.0219495 1.0931537 #>  [719,] 0.6883178 0.6932177 0.7011852 #>  [720,] 0.9904054 0.9955265 1.0317158 #>  [721,] 0.8866105 0.9696600 0.9934583 #>  [722,] 1.0699764 1.1233614 1.1317621 #>  [723,] 1.1036780 1.1350567 1.1460244 #>  [724,] 0.7653432 0.7710446 0.7868178 #>  [725,] 0.4983881 0.5906181 0.5968819 #>  [726,] 1.0878615 1.0978591 1.1236317 #>  [727,] 0.7469500 0.8104873 0.8290198 #>  [728,] 0.9469084 0.9862035 1.0049498 #>  [729,] 0.9400008 1.0145627 1.0247582 #>  [730,] 1.0122740 1.0258985 1.0335580 #>  [731,] 0.6282642 0.6302717 0.6616638 #>  [732,] 0.5324831 0.5812490 0.6073629 #>  [733,] 0.5392462 0.5520688 0.5772985 #>  [734,] 0.7771891 0.8006961 0.8117055 #>  [735,] 0.6144317 0.6381688 0.7062620 #>  [736,] 0.8461322 0.9300457 0.9473064 #>  [737,] 0.7876525 0.7991259 0.8132627 #>  [738,] 1.1131678 1.1892846 1.2306954 #>  [739,] 1.4660641 1.4853820 1.5127962 #>  [740,] 0.6198936 0.6491675 0.7033830 #>  [741,] 0.9344952 0.9915174 0.9933023 #>  [742,] 0.6083708 0.6174449 0.6690757 #>  [743,] 0.8726737 0.8880480 0.9144870 #>  [744,] 0.8621433 0.8746084 0.8786229 #>  [745,] 0.6145898 0.6554567 0.6782950 #>  [746,] 1.0037320 1.0356976 1.0662797 #>  [747,] 0.5388629 0.5556132 0.5659951 #>  [748,] 0.6116344 0.6264150 0.6446298 #>  [749,] 0.6367610 0.7038352 0.7049195 #>  [750,] 0.5158582 0.5228434 0.5230733 #>  [751,] 0.5700626 0.6156591 0.6165837 #>  [752,] 0.6946238 0.6946996 0.7025888 #>  [753,] 0.9828514 0.9892936 0.9990607 #>  [754,] 0.5561923 0.5811566 0.6127122 #>  [755,] 0.7454933 0.7707893 0.8120324 #>  [756,] 1.2738177 1.2757721 1.3183222 #>  [757,] 0.7918893 0.8363661 0.9457345 #>  [758,] 1.0607571 1.1302767 1.1430333 #>  [759,] 0.7321957 0.7516337 0.7685542 #>  [760,] 0.6853753 0.6987554 0.7383736 #>  [761,] 0.5178281 0.5275008 0.5492349 #>  [762,] 0.6946352 0.7058115 0.7231246 #>  [763,] 0.7852900 0.7989860 0.8287287 #>  [764,] 0.7444436 0.7619560 0.7685267 #>  [765,] 0.6613003 0.6760396 0.6814139 #>  [766,] 0.5184394 0.5222053 0.5578565 #>  [767,] 0.6293052 0.6681488 0.7006785 #>  [768,] 0.7159624 0.7667240 0.7886602 #>  [769,] 0.5022536 0.5162194 0.5880370 #>  [770,] 0.9604144 0.9936820 1.0495458 #>  [771,] 0.5672956 0.6106569 0.6174449 #>  [772,] 1.0016119 1.0319963 1.0499355 #>  [773,] 0.5763536 0.5933931 0.6111864 #>  [774,] 0.5973146 0.6116958 0.6450226 #>  [775,] 0.6478088 0.6981025 0.7059879 #>  [776,] 0.5950111 0.6350558 0.6421638 #>  [777,] 0.7618450 0.7992068 0.8153786 #>  [778,] 0.6087236 0.6325972 0.6347119 #>  [779,] 0.6377034 0.6838702 0.7091966 #>  [780,] 0.9283802 0.9495652 0.9603662 #>  [781,] 0.6501760 0.6762191 0.6903727 #>  [782,] 1.8676643 1.8684958 1.9238197 #>  [783,] 1.0251402 1.1343650 1.2003396 #>  [784,] 0.9328662 0.9401285 0.9428743 #>  [785,] 0.6808497 0.6920953 0.6978447 #>  [786,] 1.0426916 1.0749256 1.0832654 #>  [787,] 0.6811325 0.6932989 0.7011178 #>  [788,] 0.5796872 0.5976691 0.6157233 #>  [789,] 0.5952403 0.6243248 0.6286228 #>  [790,] 0.8887436 0.8963901 0.9203485 #>  [791,] 0.6535740 0.6577438 0.6879317 #>  [792,] 0.8250634 0.8475956 0.8807772 #>  [793,] 0.6356892 0.6421232 0.6504390 #>  [794,] 1.0263756 1.0498989 1.0506778 #>  [795,] 0.8683412 0.8786797 0.9053477 #>  [796,] 0.6551826 0.6583784 0.6894053 #>  [797,] 0.5939127 0.6097627 0.6119627 #>  [798,] 0.8217016 0.8716993 0.9007525 #>  [799,] 0.7440452 0.7482042 0.7711311 #>  [800,] 0.8249653 0.8345334 0.8449538 #>  [801,] 0.5540437 0.5556132 0.6207737 #>  [802,] 0.8495469 0.8581893 0.8600159 #>  [803,] 0.5696109 0.5878029 0.6316401 #>  [804,] 0.9085386 0.9159732 0.9333718 #>  [805,] 0.7614613 0.7673338 0.7888949 #>  [806,] 0.7874671 0.7931867 0.7950386 #>  [807,] 0.5812490 0.5832089 0.5978354 #>  [808,] 0.5819897 0.6026932 0.6211842 #>  [809,] 1.0159346 1.0492076 1.0855149 #>  [810,] 0.7300388 0.7341037 0.7762299 #>  [811,] 0.8393728 0.8414773 0.8552304 #>  [812,] 0.7030217 0.7070276 0.7307254 #>  [813,] 0.5367432 0.5375676 0.5763536 #>  [814,] 1.1913554 1.2072413 1.2382841 #>  [815,] 0.6797838 0.7068978 0.7073605 #>  [816,] 0.7129964 0.7149142 0.7546332 #>  [817,] 0.6308346 0.6378182 0.6521675 #>  [818,] 0.4372633 0.5605023 0.5856409 #>  [819,] 0.6487706 0.6607851 0.6697829 #>  [820,] 0.6579318 0.6842524 0.6996649 #>  [821,] 1.0379748 1.0556244 1.0937884 #>  [822,] 0.6149527 0.6345132 0.6379936 #>  [823,] 0.7233384 0.7259108 0.7319371 #>  [824,] 0.9225015 0.9311287 0.9490885 #>  [825,] 0.9876868 1.0046072 1.0079397 #>  [826,] 0.9418299 0.9491046 1.0032053 #>  [827,] 0.5527397 0.5582592 0.5723400 #>  [828,] 0.5629128 0.5854813 0.5886410 #>  [829,] 1.2824250 1.2993021 1.3126443 #>  [830,] 0.6682165 0.8013996 0.8117512 #>  [831,] 0.7168591 0.7762624 0.8067836 #>  [832,] 0.7171020 0.7497152 0.7787340 #>  [833,] 0.6554532 0.6656108 0.7087212 #>  [834,] 0.7364156 0.7770964 0.8133622 #>  [835,] 0.5791009 0.6055214 0.6288123 #>  [836,] 0.5903307 0.6110179 0.6125221 #>  [837,] 1.1769351 1.1794767 1.1937630 #>  [838,] 0.8270530 0.8319599 0.8371421 #>  [839,] 0.6572075 0.7130125 0.7315517 #>  [840,] 0.6480608 0.6507790 0.6670808 #>  [841,] 0.7458261 0.7508345 0.7691063 #>  [842,] 1.0830214 1.1324827 1.1494758 #>  [843,] 0.8167265 0.8834671 0.9155159 #>  [844,] 0.7416638 0.7546287 0.7587506 #>  [845,] 0.8309483 0.8414773 0.9758128 #>  [846,] 0.8815356 0.9227925 0.9360585 #>  [847,] 0.5730541 0.6049935 0.6065853 #>  [848,] 0.8235063 0.8343515 0.8538589 #>  [849,] 0.6811325 0.6894053 0.7333821 #>  [850,] 0.6063638 0.6116958 0.6124847 #>  [851,] 0.9633232 1.0172182 1.0544612 #>  [852,] 0.7948180 0.8767487 0.9128331 #>  [853,] 1.2328109 1.3060682 1.3131808 #>  [854,] 1.4039361 1.4105761 1.4338107 #>  [855,] 0.5175956 0.5280844 0.5520688 #>  [856,] 0.7252861 0.7468968 0.7525092 #>  [857,] 2.4706069 2.5205676 2.5734679 #>  [858,] 0.6015393 0.6091990 0.6284530 #>  [859,] 0.5711702 0.5723400 0.5830010 #>  [860,] 0.6298889 0.6657809 0.6823739 #>  [861,] 0.8279568 0.8756918 0.9156722 #>  [862,] 0.6210127 0.6236453 0.6298960 #>  [863,] 1.0407409 1.0491975 1.0566301 #>  [864,] 1.2402349 1.2449845 1.2630882 #>  [865,] 0.7842000 0.7874958 0.7952668 #>  [866,] 0.9507940 0.9701860 0.9828654 #>  [867,] 0.5648644 0.6058319 0.6065770 #>  [868,] 0.7433239 0.7489036 0.7680452 #>  [869,] 1.6821039 1.7047096 1.7163822 #>  [870,] 0.6562056 0.6706770 0.6776965 #>  [871,] 0.4954672 0.5001183 0.5202331 #>  [872,] 0.5840516 0.6125931 0.6254836 #>  [873,] 0.6327947 0.6572075 0.6682147 #>  [874,] 0.5128517 0.5230733 0.5932272 #>  [875,] 0.9928779 0.9981311 1.0199067 #>  [876,] 0.6193215 0.6278293 0.6396881 #>  [877,] 0.9114634 0.9378238 0.9499849 #>  [878,] 0.7250952 0.7375913 0.7468874 #>  [879,] 0.6892280 0.6908090 0.6997878 #>  [880,] 1.0099069 1.0253730 1.0657104 #>  [881,] 0.8862557 0.9135281 0.9236848 #>  [882,] 1.1483110 1.1516656 1.1750919 #>  [883,] 0.8054412 0.8158241 0.8733001 #>  [884,] 1.0645142 1.1185659 1.1447058 #>  [885,] 0.6366282 0.6507609 0.7117721 #>  [886,] 0.6416477 0.6554775 0.6557740 #>  [887,] 1.0077947 1.0622568 1.0718966 #>  [888,] 0.6981628 0.7025094 0.7251107 #>  [889,] 1.8794967 1.9580895 1.9658908 #>  [890,] 1.4031266 1.4186001 1.6265560 #>  [891,] 0.7373350 0.7581955 0.7743609 #>  [892,] 0.5781488 0.5912188 0.5958946 #>  [893,] 0.6845470 0.7066446 0.7145371 #>  [894,] 0.5706228 0.5929143 0.6232908 #>  [895,] 0.6982415 0.7839698 0.8397277 #>  [896,] 1.4879664 1.5332080 1.5726515 #>  [897,] 1.2161887 1.2251083 1.2945242 #>  [898,] 1.0354632 1.1047688 1.1102586 #>  [899,] 0.6631976 0.6867619 0.7218904 #>  [900,] 0.8747034 0.8765178 0.9369624 #>  [901,] 0.5934188 0.6036580 0.6056943 #>  [902,] 0.6110002 0.6770926 0.6818561 #>  [903,] 1.1868614 1.2195083 1.2382841 #>  [904,] 1.0872208 1.0889161 1.0965272 #>  [905,] 1.0483821 1.0668040 1.1226537 #>  [906,] 1.0788472 1.0795457 1.1082520 #>  [907,] 0.7794371 0.8307779 0.8339535 #>  [908,] 1.7263543 1.7806430 1.7946837 #>  [909,] 0.6692322 0.6741026 0.7056397 #>  [910,] 0.6614449 0.6777041 0.7227731 #>  [911,] 1.3028077 1.3049783 1.3294276 #>  [912,] 0.6821412 0.6944665 0.6991062 #>  [913,] 0.7087127 0.7231510 0.8024938 #>  [914,] 0.6109977 0.6222185 0.6336612 #>  [915,] 0.5768342 0.6271728 0.7066670 #>  [916,] 0.7300388 0.7301023 0.7354569 #>  [917,] 0.9420159 0.9539432 0.9637479 #>  [918,] 0.5970435 0.6271728 0.6422244 #>  [919,] 0.6330009 0.6452374 0.6613899 #>  [920,] 0.7673061 0.8058218 0.8400958 #>  [921,] 0.6063638 0.6110795 0.6265918 #>  [922,] 0.8337611 0.8894861 0.9192811 #>  [923,] 1.2483489 1.2553304 1.2613632 #>  [924,] 0.5398089 0.5633938 0.5974423 #>  [925,] 1.3276561 1.3379262 1.3458685 #>  [926,] 0.5118004 0.5492349 0.5564632 #>  [927,] 0.6796833 0.6991153 0.7165858 #>  [928,] 0.6184856 0.6261714 0.6415020 #>  [929,] 0.9856823 0.9859578 1.0418663 #>  [930,] 0.5832061 0.6052557 0.6268787 #>  [931,] 0.7276661 0.7367229 0.7482042 #>  [932,] 1.0080811 1.0202241 1.0325793 #>  [933,] 0.7183756 0.7283409 0.7442883 #>  [934,] 0.7115747 0.7615930 0.7719870 #>  [935,] 0.8448423 0.8497234 0.8527991 #>  [936,] 0.7865625 0.7881288 0.7909163 #>  [937,] 0.8733001 0.8973212 0.9292330 #>  [938,] 0.6289822 0.6464815 0.6801022 #>  [939,] 0.5857379 0.5951442 0.5990992 #>  [940,] 0.7826584 0.7894357 0.7976145 #>  [941,] 0.7722264 0.8599840 0.8808708 #>  [942,] 1.0613844 1.0614582 1.0816093 #>  [943,] 0.8230899 0.8521400 0.8623385 #>  [944,] 0.9667551 0.9717448 0.9831813 #>  [945,] 0.5952514 0.6343217 0.6521258 #>  [946,] 1.3891899 1.4117854 1.4163078 #>  [947,] 1.8458030 1.8552915 1.8621591 #>  [948,] 0.8695294 0.8943513 0.9339473 #>  [949,] 0.7590968 0.7777798 0.7807961 #>  [950,] 0.7687499 0.7689906 0.7718096 #>  [951,] 1.2154473 1.2236371 1.2734731 #>  [952,] 0.6418458 0.6589573 0.6868936 #>  [953,] 1.4307615 1.4854312 1.5301265 #>  [954,] 0.8781508 0.9159732 0.9370051 #>  [955,] 0.6749686 0.7657137 0.7668846 #>  [956,] 0.5291195 0.5373288 0.5492972 #>  [957,] 0.7322471 0.7458261 0.7615346 #>  [958,] 1.0064425 1.0399131 1.0667986 #>  [959,] 1.4250258 1.4725344 1.5111931 #>  [960,] 0.7938946 0.8855354 0.9053477 #>  [961,] 0.8300877 0.8628371 0.8755627 #>  [962,] 0.9496758 0.9524073 0.9633929 #>  [963,] 0.7877084 0.8226220 0.8497456 #>  [964,] 0.7023191 0.7105156 0.7496699 #>  [965,] 0.6776303 0.6891220 0.7010290 #>  [966,] 0.7882480 0.8114743 0.8475879 #>  [967,] 0.8884526 0.9211420 0.9402543 #>  [968,] 0.7388299 0.7447916 0.7533669 #>  [969,] 0.7034657 0.7401818 0.7515799 #>  [970,] 0.6948404 0.6982964 0.7224331 #>  [971,] 0.7756047 0.7923838 0.8010402 #>  [972,] 0.8389431 0.8402952 0.8900467 #>  [973,] 0.6411958 0.6593915 0.6881816 #>  [974,] 0.5481405 0.5701761 0.5705964 #>  [975,] 0.7723002 0.8222653 0.8554446 #>  [976,] 0.5722593 0.5819897 0.5891085 #>  [977,] 0.9737474 0.9797495 0.9911423 #>  [978,] 0.6316042 0.6539992 0.6574537 #>  [979,] 0.6496324 0.6877159 0.7060885 #>  [980,] 0.6140017 0.6320566 0.6324249 #>  [981,] 0.6832854 0.7189778 0.7624596 #>  [982,] 1.1941917 1.2158129 1.2403868 #>  [983,] 0.7464483 0.7863797 0.7957749 #>  [984,] 0.8057426 0.8371371 0.8495015 #>  [985,] 0.7007767 0.7083554 0.7284534 #>  [986,] 0.7954077 0.8110059 0.8251384 #>  [987,] 0.6569678 0.6679863 0.6739771 #>  [988,] 0.8312567 0.8634794 0.8956440 #>  [989,] 0.6646705 0.6766188 0.6823739 #>  [990,] 1.0639573 1.0954633 1.1053707 #>  [991,] 1.2922820 1.2956935 1.3724642 #>  [992,] 0.7881651 0.8152201 0.9160962 #>  [993,] 0.5944731 0.6246307 0.6312099 #>  [994,] 0.5651737 0.5670792 0.6302799 #>  [995,] 1.2700727 1.3318702 1.3383258 #>  [996,] 0.6228079 0.6415623 0.6500501 #>  [997,] 0.6631974 0.6830851 0.7341348 #>  [998,] 0.5929792 0.7007186 0.7818137 #>  [999,] 0.6019316 0.6217282 0.6934349 #> [1000,] 0.4963594 0.5490092 0.5526944 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure CyTOF panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) CyTOF panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   rsplit_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `rsplit_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a color palette using tidytof. — tof_generate_palette","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"function generates color palette based color palette author's favorite pokemon.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"","code":"tof_generate_palette(num_colors)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"num_colors integer specifying number colors like generate.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"character vector hex codes specifying colors palette.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"","code":"tof_generate_palette(num_colors = 5L) #> [1] \"#D86020\" \"#28A8B8\" \"#F89040\" \"#D0D0D0\" \"#903000\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 0.003162278"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample   cd45 pstat5   cd34 outcome class  multiclass event time_to_event #>    <chr>   <dbl>  <dbl>  <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 90     0.928  0.812  0.326   6.55   class1 class3         1         10.3  #>  2 2      0.733  0.544  0.0482  2.30   class2 class1         0          8.38 #>  3 64     0.0333 0.304  0.890   0.0776 class2 class3         1         11.8  #>  4 32     0.975  0.576  0.995   3.64   class2 class2         1         13.5  #>  5 26     0.653  0.436  0.891   1.64   class2 class1         0          7.69 #>  6 93     0.0424 0.102  0.898  -1.32   class2 class3         1         10.5  #>  7 9      0.495  0.885  0.358   5.29   class1 class1         0          7.97 #>  8 80     0.304  0.0889 0.744   1.49   class2 class3         1         11.3  #>  9 34     0.530  0.799  0.154   3.82   class1 class2         1          8.44 #> 10 91     0.977  0.761  0.0720  8.38   class1 class3         1          9.98 #> # ℹ 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>                cd45        pstat5        cd34 #>   [1,]  0.749395552  1.0076356258  0.11397456 #>   [2,] -1.290445518 -1.1319938942  0.50861884 #>   [3,]  1.269725449  0.5853694579 -1.76943813 #>   [4,] -1.620210303  0.4785199396  0.95482083 #>   [5,]  0.668352151  0.1253780695  1.26779481 #>   [6,] -1.580347199  1.7571972174  1.28633028 #>   [7,] -0.598806953 -1.3852376584 -0.35205599 #>   [8,]  0.717711222 -1.4677986119 -1.27736245 #>   [9,] -1.291964004  1.3705756621 -1.05092109 #>  [10,] -1.065091481 -0.8838116714  0.73953709 #>  [11,]  1.175220603 -1.6145131474  1.30557829 #>  [12,]  0.916292958 -1.2514096948  1.68264324 #>  [13,]  0.704909724  0.6459688926  0.94332773 #>  [14,] -0.479023798  0.3022455621  0.08698154 #>  [15,] -1.501063087 -1.1607728100  0.17882255 #>  [16,]  0.975455596  0.3641877539 -0.65916531 #>  [17,] -0.083195199 -1.3139722326 -0.38198336 #>  [18,]  0.307864338  1.0630706088  0.61495838 #>  [19,]  0.090600944  1.3817180504 -0.96789186 #>  [20,]  1.499885502  0.1411515966  0.98032141 #>  [21,] -0.140572287 -1.1953670792  0.26862841 #>  [22,] -0.621798701  1.5435142520 -0.91404157 #>  [23,] -0.876366733 -1.0138323914 -1.35241006 #>  [24,]  1.139818979 -0.7038392802  1.31067136 #>  [25,]  0.493037097  0.8031809107 -0.16919762 #>  [26,] -1.667632810 -1.5582383989  0.86857203 #>  [27,] -1.571834985 -1.0260381196  0.85747543 #>  [28,]  1.233509689  0.7236144676  0.14209388 #>  [29,]  0.469747562 -0.1835924950  1.29450270 #>  [30,]  1.066138285  1.2877536280  0.40024507 #>  [31,]  0.573713190 -0.9551983297 -0.36730958 #>  [32,] -1.285443304 -0.3726687927  1.13160258 #>  [33,]  1.080300528  0.1371048505 -0.20009616 #>  [34,]  0.157458737 -0.1206746077 -0.50417831 #>  [35,] -0.767551741  0.1938880624  1.63110215 #>  [36,] -1.543988328  1.6843642681  0.85753587 #>  [37,] -1.372696994  0.5921505607 -0.02984433 #>  [38,]  0.911261408  0.0553953000  0.47122315 #>  [39,]  1.134437042 -1.2001368503 -0.52124691 #>  [40,]  0.694389926  0.5571817874 -0.42816995 #>  [41,] -0.771745569 -0.1936197909  1.63647908 #>  [42,] -1.174124805 -0.7073963379 -0.84097771 #>  [43,] -1.515570803  1.2473149631  1.40969722 #>  [44,] -1.322345826 -0.4607143811 -0.65310316 #>  [45,]  0.256714106  1.3681650314  0.64296413 #>  [46,]  1.119460832  0.1629652836 -0.87367421 #>  [47,]  0.922286747  1.4418638364  1.47418044 #>  [48,] -1.469542149  0.3334510781 -1.40743526 #>  [49,]  0.716487080 -1.1196663564 -1.19910020 #>  [50,] -0.538884434 -1.1360146173  0.89622499 #>  [51,] -1.067265929 -1.0522053174  1.53296657 #>  [52,] -0.937902455  1.3331921439 -0.32905523 #>  [53,]  0.530024925 -0.0863966924  0.78459477 #>  [54,] -1.439231211  0.2977178853 -1.07451119 #>  [55,]  1.195295572  0.4290418968 -1.20306191 #>  [56,]  0.399570817 -0.8809690317  0.63864405 #>  [57,]  1.360629866  0.9580442421 -1.63556664 #>  [58,] -0.834577114  1.1074070130 -0.67879628 #>  [59,]  0.954750645 -1.6036514593 -1.30526915 #>  [60,]  0.167277068 -1.3774775014  1.36230886 #>  [61,]  0.674848580  0.0009102105 -1.60524368 #>  [62,]  0.095023833 -0.0061791426 -1.15594212 #>  [63,] -0.473928614 -1.6569860293  0.91388774 #>  [64,] -0.262580444  0.4092844916 -0.23427110 #>  [65,]  0.561869138 -1.6177762026  1.50302593 #>  [66,]  0.144838577  1.4655652605  0.09620592 #>  [67,] -1.111504851  1.6771540395  0.65344625 #>  [68,] -1.441409918  0.8592852023 -0.18599855 #>  [69,]  0.374754904  0.2323212909  0.44475904 #>  [70,]  0.766687063  0.8349265121 -0.80850479 #>  [71,] -1.354181826 -0.5696040636 -1.56157244 #>  [72,]  0.054678730  1.2927619908 -0.93930366 #>  [73,]  0.216747607  0.9756934132 -0.37475459 #>  [74,]  1.288770706  1.3205590156  0.83039861 #>  [75,]  1.518498535 -0.4023902426 -1.05016194 #>  [76,]  0.160632624  1.2436528217 -0.66476019 #>  [77,]  1.092310568  0.4626277495  1.15336267 #>  [78,] -0.787297931 -0.5196582860 -0.71120886 #>  [79,]  0.352626512  0.5509099677 -1.60513953 #>  [80,] -1.071545551 -0.1120557878 -0.39545482 #>  [81,] -1.478001665 -1.5933561213 -0.70858137 #>  [82,]  1.267282596 -1.4764674150 -1.01070429 #>  [83,]  0.751468953  0.7593562548 -1.06900244 #>  [84,] -1.365539796 -0.1574331102 -1.07295728 #>  [85,]  0.758938964  0.4954950516  1.07175013 #>  [86,]  1.262713916  0.0803689548  0.39722779 #>  [87,] -1.616375426  0.7911201237 -1.79427649 #>  [88,]  0.397903198 -1.0719761108 -0.84693427 #>  [89,]  0.790278075 -1.0156404539 -1.70075003 #>  [90,] -0.470011713 -1.4031591187  1.12044596 #>  [91,] -0.081804640  1.1617087195 -1.38935016 #>  [92,]  1.214740010 -0.8795505109  1.63244035 #>  [93,] -0.703587184 -0.9117442861 -0.76439252 #>  [94,] -0.004934211 -0.2440895684  0.31668561 #>  [95,]  1.063929595 -0.5373282141  0.17047257 #>  [96,]  1.559845263  0.6929743916  0.54460196 #>  [97,]  0.478809964 -0.6138814581  0.10009995 #>  [98,]  0.857001583 -1.2236880278  0.49339332 #>  [99,] -1.463080212  1.4037823651  0.86831032 #> [100,]  0.758084065  0.9793839765  1.20919229"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  2.5669483  4.9015289  2.9778107  1.3853445  1.5747855  7.0573447 #>   [7]  1.9231666  1.6928750  2.9141838  1.6253626  1.7016935  3.4662545 #>  [13]  6.1432645 -0.8729019  3.3474136  4.1011750  6.8707497  2.8969909 #>  [19]  5.3239442  4.6181397  3.3802633  4.8002104  2.5979382  4.6621345 #>  [25]  5.1720179  2.6119863 -2.2359218  1.5324548  3.1525087  5.7265987 #>  [31]  2.7305977  3.5996023  4.1189027  7.2114449  5.7606435  2.0694957 #>  [37]  4.0339230  0.2277402  6.1585056  4.8146716  1.9865026 -0.1293907 #>  [43]  2.4283032  1.9148661  4.4127155  3.6738924  6.1066659  3.1517974 #>  [49]  6.1552236  5.0386866  1.7528382  5.4189219  3.8452073  4.2570959 #>  [55]  2.4854123  0.9083685  2.4330279  2.3535155  4.2410207  4.0550120 #>  [61]  3.0496195 -0.1170269  0.8072348  5.3421341  0.5888532  6.1670766 #>  [67]  1.7110870  4.6983751  3.9890320  4.4995431  3.7659076  1.7346546 #>  [73]  1.7864311  4.7668758  4.1175984  2.5517533  3.5061683  1.6954565 #>  [79]  4.9718098  4.4516921  0.2846626  1.7965901  4.0008436  2.0790386 #>  [85]  4.5414028  7.2033410  2.6830375  5.3080501  4.1543090  3.8760242 #>  [91]  2.1516743  2.1558677  2.5780613  6.3258454  3.4639396  6.0230859 #>  [97]  4.4514346  6.2882884  4.7748957  2.8346795"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # ℹ 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode CyTOF measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing CyTOF data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"      ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction  )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>       cd45   cd38    cd34    cd19 cluster_id .flowsom_metacluster #>      <dbl>  <dbl>   <dbl>   <dbl> <chr>      <chr>                #>  1 -0.629  -2.01   1.04    0.942  f          2                    #>  2 -0.186   1.32   1.15   -1.20   n          1                    #>  3 -0.970   0.444 -0.485  -0.131  d          1                    #>  4  0.557   1.30   1.30   -0.904  e          1                    #>  5  0.0645 -0.221 -1.06    0.770  e          1                    #>  6 -0.501   0.830  1.14   -0.0197 r          1                    #>  7 -2.00   -0.216  0.403  -0.525  v          3                    #>  8  0.0934 -1.36   0.0888  0.433  h          1                    #>  9 -0.558  -0.448 -0.217  -0.612  w          1                    #> 10  1.36    0.141 -1.91    0.642  k          1                    #> # ℹ 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>       cd45   cd38    cd34    cd19 cluster_id .phenograph_metacluster #>      <dbl>  <dbl>   <dbl>   <dbl> <chr>      <chr>                   #>  1 -0.629  -2.01   1.04    0.942  f          1                       #>  2 -0.186   1.32   1.15   -1.20   n          2                       #>  3 -0.970   0.444 -0.485  -0.131  d          1                       #>  4  0.557   1.30   1.30   -0.904  e          2                       #>  5  0.0645 -0.221 -1.06    0.770  e          2                       #>  6 -0.501   0.830  1.14   -0.0197 r          3                       #>  7 -2.00   -0.216  0.403  -0.525  v          4                       #>  8  0.0934 -1.36   0.0888  0.433  h          2                       #>  9 -0.558  -0.448 -0.217  -0.612  w          1                       #> 10  1.36    0.141 -1.91    0.642  k          1                       #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 6                      #>  2 1                      #>  3 6                      #>  4 2                      #>  5 7                      #>  6 2                      #>  7 2                      #>  8 2                      #>  9 7                      #> 10 3                      #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 2                    #>  2 2                    #>  3 1                    #>  4 1                    #>  5 1                    #>  6 2                    #>  7 4                    #>  8 4                    #>  9 1                    #> 10 1                    #> # ℹ 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 3                    #>  2 3                    #>  3 2                    #>  4 2                    #>  5 2                    #>  6 3                    #>  7 1                    #>  8 3                    #>  9 3                    #> 10 1                    #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 3                         #>  2 8                         #>  3 4                         #>  4 1                         #>  5 8                         #>  6 4                         #>  7 2                         #>  8 10                        #>  9 2                         #> 10 3                         #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 8                   #>  2 8                   #>  3 6                   #>  4 1                   #>  5 6                   #>  6 1                   #>  7 5                   #>  8 5                   #>  9 8                   #> 10 8                   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 4                       #>  2 2                       #>  3 2                       #>  4 1                       #>  5 1                       #>  6 1                       #>  7 4                       #>  8 4                       #>  9 2                       #> 10 1                       #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   compute_embedding_cols = where(tof_is_numeric),   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   embedding_args = list(),   theme = ggplot2::theme_bw(),   ...,   method = c(\"ggplot2\", \"scattermore\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `embedding_args`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. compute_embedding_cols Unquoted column names indicating columns 'tof_tibble' use computing embeddings method specified `embedding_method`. Defaults numeric columns 'tof_tibble'. Supports tidyselect helpers. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (passed tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". embedding_args Optional additional arguments pass tof_reduce_dimensions. example, `method = \"tsne\"`, might include `num_comp`, `perplexity`, `theta`. theme ggplot2 theme apply scatterplot. Defaults theme_bw. ... Optional additional arguments pass tof_plot_cells_scatter. method string indicating plotting engine used. Valid values include \"ggplot2\" (default) \"scattermore\" (recommended 100K cells plotted). Note method = \"scattermore\" requires scattermore package installed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         compute_embedding_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cluster_id,         embedding_method = \"tsne\",         compute_embedding_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments pass ggraph","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"function makes scatterplots single-cell data using user-specified x- y-axes. Additionally, point scatterplot can colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"","code":"tof_plot_cells_scatter(   tof_tibble,   x_col,   y_col,   color_col,   facet_cols,   theme = ggplot2::theme_bw(),   ...,   method = c(\"ggplot2\", \"scattermore\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"tof_tibble `tof_tbl` `tibble`. x_col unquoted column name specifying column `tof_tibble` used x-axis. y_col unquoted column name specifying column `tof_tibble` used y-axis. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. theme ggplot2 theme apply scatterplot. Defaults theme_bw. ... Optional additional arguments pass geom_point method = \"ggplot2\" geom_scattermore method = \"scattermore\". method string indicating plotting engine used. Valid values include \"ggplot2\" (default) \"scattermore\" (recommended 100K cells plotted). Note method = \"scattermore\" requires scattermore package installed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"tof_plot_cluster_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_cluster_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"tof_plot_cluster_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... currently used.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )   # use the same layout as the plot above to color the same  # tree using a different marker  layout_cd45 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"tof_plot_cluster_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )   attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"   # create the volcano plot  volcano <- tof_plot_cluster_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(        tof_tibble = sim_data,        cluster_col = cluster_id,        group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1 3.26  #>  2 3.54  #>  3 2.83  #>  4 1.98  #>  5 1.76  #>  6 4.91  #>  7 4.19  #>  8 1.96  #>  9 1.11  #> 10 0.625 #> 11 3.88  #> 12 3.45  #> 13 4.73  #> 14 3.31  #> 15 5.29  #> 16 3.60  #> 17 2.95  #> 18 5.87  #> 19 2.84  #> 20 2.46"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts, reads, fluorescence intensity units directly measured cytometer using user-provided function. can used perform standard pre-processing steps (.e. arcsinh transformation) cytometry data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurements aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read CyTOF data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing CyTOF data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents CyTOF measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads CyTOF data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read CyTOF data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction single-cell data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>       cd45    cd38    cd34   cd19    .pc1   .pc2    .pc3     .pc4 #>      <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl>   <dbl>    <dbl> #>  1  0.943  -1.23   -0.412   0.711  0.616   0.459 -1.46   -0.387   #>  2 -1.56   -0.690   1.76    0.901  1.78    0.637  1.44    0.894   #>  3 -1.32   -1.13    0.0517  1.44   1.90   -0.546  0.0135  0.136   #>  4  1.35    1.86   -1.05   -0.803 -2.33   -0.304 -0.361  -1.14    #>  5  1.07   -1.02    0.880   2.09   1.59    1.56  -0.433  -1.04    #>  6 -1.34    0.862  -0.827  -0.907 -0.856  -1.59   0.429   0.515   #>  7 -1.26   -0.119   0.467  -0.544  0.176  -0.325  0.675   1.07    #>  8  0.116   0.0414 -0.753   0.679  0.0964 -0.520 -0.543  -0.705   #>  9  0.0581 -1.21    1.07    1.34   1.63    1.13  -0.0257 -0.00813 #> 10 -0.998  -0.988  -0.600   1.24   1.44   -0.908 -0.489  -0.120   #> # ℹ 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>       cd45    cd38    cd34   cd19 .tsne_1 .tsne_2 #>      <dbl>   <dbl>   <dbl>  <dbl>   <dbl>   <dbl> #>  1  0.943  -1.23   -0.412   0.711  0.791   -1.55  #>  2 -1.56   -0.690   1.76    0.901  2.66     3.95  #>  3 -1.32   -1.13    0.0517  1.44   0.508    3.92  #>  4  1.35    1.86   -1.05   -0.803 -4.48    -1.28  #>  5  1.07   -1.02    0.880   2.09   1.39     5.56  #>  6 -1.34    0.862  -0.827  -0.907 -4.00     1.28  #>  7 -1.26   -0.119   0.467  -0.544  3.52     1.27  #>  8  0.116   0.0414 -0.753   0.679 -0.294    0.411 #>  9  0.0581 -1.21    1.07    1.34   1.59     4.89  #> 10 -0.998  -0.988  -0.600   1.24  -0.0540   3.71  #> # ℹ 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>       cd45    cd38    cd34   cd19 .umap1 .umap2 #>      <dbl>   <dbl>   <dbl>  <dbl>  <dbl>  <dbl> #>  1  0.943  -1.23   -0.412   0.711  2.83   3.94  #>  2 -1.56   -0.690   1.76    0.901 -5.27  -2.97  #>  3 -1.32   -1.13    0.0517  1.44  -4.23  -1.22  #>  4  1.35    1.86   -1.05   -0.803  1.78  -0.388 #>  5  1.07   -1.02    0.880   2.09  -5.08  -1.77  #>  6 -1.34    0.862  -0.827  -0.907  0.735 -0.839 #>  7 -1.26   -0.119   0.467  -0.544 -5.95  -5.14  #>  8  0.116   0.0414 -0.753   0.679 -0.482 -0.631 #>  9  0.0581 -1.21    1.07    1.34  -5.08  -2.10  #> 10 -0.998  -0.988  -0.600   1.24  -3.87  -1.34  #> # ℹ 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on single-cell data — tof_reduce_pca","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>        .pc1    .pc2 #>       <dbl>   <dbl> #>  1 -0.418    0.964  #>  2  0.00712 -1.06   #>  3 -0.566   -0.538  #>  4  0.266   -0.470  #>  5  1.18     1.97   #>  6 -0.609   -0.464  #>  7 -0.443    0.270  #>  8 -0.805    0.0115 #>  9 -0.0839  -0.107  #> 10  0.171    1.46   #> # ℹ 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>        PC1     PC2    PC3     PC4 #>      <dbl>   <dbl>  <dbl>   <dbl> #>  1 -1.85    1.02    1.31  -0.271  #>  2  0.0132  0.0315 -0.657 -0.394  #>  3 -0.168   1.09    0.142 -1.72   #>  4  0.610  -0.0560 -0.132 -0.931  #>  5 -0.0377 -0.650  -0.381 -0.385  #>  6 -1.07   -0.710   1.55   0.166  #>  7 -1.24    1.26   -0.325  1.17   #>  8 -0.731   1.62   -0.183  0.0647 #>  9 -0.147   1.37    0.882  1.08   #> 10 -0.463  -0.574   0.640 -1.22   #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   0.460   3.41  #>  2  -2.20   -2.78  #>  3   5.18    0.948 #>  4   8.01   -5.49  #>  5  -5.46    2.21  #>  6   7.73    0.709 #>  7  -1.75   -6.19  #>  8   4.90    1.82  #>  9   1.56    3.75  #> 10  -2.58   -0.739 #> # ℹ 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1 -6.93     -1.04 #>  2  1.84     -7.29 #>  3 -4.83      7.47 #>  4 -6.61      7.67 #>  5 -0.0645   -8.16 #>  6 10.3      -1.61 #>  7 -0.752    -3.53 #>  8 -4.35      6.83 #>  9 -5.96      2.96 #> 10  2.26     -7.06 #> # ℹ 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1 -5.34   1.66  #>  2 -3.23   0.190 #>  3 -3.01   0.418 #>  4 -4.12  -0.157 #>  5  0.314 -0.936 #>  6 -2.50   1.92  #>  7  0.288 -0.477 #>  8 -0.429  1.60  #>  9 -4.40  -0.832 #> 10  3.73  -1.92  #> # ℹ 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -3.50    0.538 #>  2  -2.21    6.22  #>  3  -1.65    6.67  #>  4  -3.26    5.48  #>  5  -5.42   -2.72  #>  6   4.01   -6.82  #>  7  -2.12   -3.22  #>  8   0.959  -1.55  #>  9  -3.89    6.18  #> 10   0.129  -0.204 #> # ℹ 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>      UMAP1  UMAP2 #>      <dbl>  <dbl> #>  1 -1.80    0.579 #>  2  0.0364 -3.09  #>  3  1.20    2.94  #>  4  3.11    0.231 #>  5  1.92    2.07  #>  6  1.29    1.80  #>  7 -3.55   -1.88  #>  8 -1.05   -2.46  #>  9  2.20   -0.422 #> 10 -5.22    1.07  #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing CyTOF data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              1 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # ℹ 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.7 #>  2            0.5 #>  3            0.5 #>  4            0.7 #>  5            0.5 #>  6            0.8 #>  7            0.9 #>  8            0.8 #>  9            0.4 #> 10            0.4 #> # ℹ 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.7 #>  2            0   #>  3            1   #>  4            1   #>  5            1   #>  6            1   #>  7            1   #>  8            1   #>  9            1   #> 10            0.5 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split CyTOF data into a training and test set — tof_split_data","title":"Split CyTOF data into a training and test set — tof_split_data","text":"Split CyTOF data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split CyTOF data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split CyTOF data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/41]> Bootstrap01 #>  2 <split [100/37]> Bootstrap02 #>  3 <split [100/40]> Bootstrap03 #>  4 <split [100/38]> Bootstrap04 #>  5 <split [100/39]> Bootstrap05 #>  6 <split [100/39]> Bootstrap06 #>  7 <split [100/41]> Bootstrap07 #>  8 <split [100/38]> Bootstrap08 #>  9 <split [100/39]> Bootstrap09 #> 10 <split [100/37]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Training/Testing/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-08  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)       3.67  #> 2 pstat5            1.14  #> 3 cd45              1.01  #> 4 cd34              0.143  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 cd45          -0.235    #> 2 pstat5        -0.178    #> 3 cd34          -0.0184   #> 4 (Intercept)    0.000115  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 0 × 2 #> # ℹ 2 variables: feature <chr>, coefficient <dbl>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform raw high-dimensional cytometry data. — tof_transform","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"function transforms `tof_tbl` raw ion counts, reads, fluorescence intensity units directly measured cytometer using user-provided function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"","code":"tof_transform(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   transform_fun )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. transform_fun vectorized function apply protein value variance stabilization.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>      cd45   cd38   cd34   cd19 .upsample_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>             #>  1 -0.809 -0.297 -0.523 -0.324 b                 #>  2  0.392 -0.799 -0.529 -1.16  b                 #>  3  0.701  0.916 -0.928  0.222 b                 #>  4 -1.04   0.645 -0.595  2.55  a                 #>  5 -0.365  0.273  0.384  0.303 a                 #>  6 -0.556  0.974 -0.363 -1.93  b                 #>  7  0.254  2.44  -0.122  0.800 a                 #>  8  0.391 -1.22  -0.163 -1.04  b                 #>  9  2.10  -0.348  0.547  0.363 b                 #> 10 -0.278  1.90   2.08  -1.81  b                 #> # ℹ 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>      cd45   cd38   cd34   cd19 .upsample_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>             #>  1 -0.809 -0.297 -0.523 -0.324 b                 #>  2  0.392 -0.799 -0.529 -1.16  a                 #>  3  0.701  0.916 -0.928  0.222 a                 #>  4 -1.04   0.645 -0.595  2.55  a                 #>  5 -0.365  0.273  0.384  0.303 a                 #>  6 -0.556  0.974 -0.363 -1.93  a                 #>  7  0.254  2.44  -0.122  0.800 a                 #>  8  0.391 -1.22  -0.163 -1.04  b                 #>  9  2.10  -0.348  0.547  0.363 b                 #> 10 -0.278  1.90   2.08  -1.81  b                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 b                 #>  4 b                 #>  5 a                 #>  6 b                 #>  7 a                 #>  8 b                 #>  9 b                 #> 10 a                 #> # ℹ 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 a                 #>  4 b                 #>  5 a                 #>  6 a                 #>  7 a                 #>  8 b                 #>  9 b                 #> 10 a                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   num_neighbors = 1L,   distance_function = c(\"euclidean\", \"cosine\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating many neighbors used nearest neighbor calculation. Clusters assigned based majority vote. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 a                 #>  4 b                 #>  5 a                 #>  6 a                 #>  7 b                 #>  8 b                 #>  9 b                 #> 10 b                 #> # ℹ 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 b                 #>  3 a                 #>  4 b                 #>  5 b                 #>  6 a                 #>  7 a                 #>  8 a                 #>  9 b                 #> 10 b                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write cytof data to a file or to a directory of files — tof_write_data","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""}]
