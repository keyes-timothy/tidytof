[{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidytof","title":"Contributing to tidytof","text":"outlines propose change tidytof. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidytof","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidytof","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidytof","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"keyes-timothy/tidytof\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidytof","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidytof","text":"Please note tidytof project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-     phenograph_data |>     tof_preprocess() |>     tof_cluster(         cluster_cols = starts_with(\"cd\"),         num_neighbors = 50L,         distance_function = \"cosine\",         method = \"phenograph\"     ) |>     tof_metacluster(         cluster_col = .phenograph_cluster,         metacluster_cols = starts_with(\"cd\"),         num_metaclusters = 3L,         method = \"kmeans\"     )  phenograph_clusters |>     dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) |>     head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 6                   2                   #> 2 H1_PhenoGraph_cluster1 1                   2                   #> 3 H1_PhenoGraph_cluster1 6                   2                   #> 4 H1_PhenoGraph_cluster1 6                   2                   #> 5 H1_PhenoGraph_cluster1 6                   2                   #> 6 H1_PhenoGraph_cluster1 6                   2 phenograph_clusters |>     dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster2           3                    1000 #> 2 cluster3           1                    1000 #> 3 cluster1           2                     995 #> 4 cluster1           1                       5 # use the kmeans algorithm phenograph_data |>     tof_preprocess() |>     tof_cluster(         cluster_cols = contains(\"cd\"),         method = \"kmeans\"     )  # use the flowsom algorithm phenograph_data |>     tof_preprocess() |>     tof_cluster(         cluster_cols = contains(\"cd\"),         method = \"flowsom\"     ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data |>     tof_preprocess() |>     tof_cluster(         cluster_cols = contains(\"cd\"),         method = \"kmeans\",         augment = FALSE     ) |>     head() #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 2               #> 2 1               #> 3 19              #> 4 9               #> 5 2               #> 6 9"},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Clustering and metaclustering","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4    tidytof_0.99.8 #>  #> loaded via a namespace (and not attached): #>   [1] tidyselect_1.2.1    viridisLite_0.4.2   timeDate_4032.109   #>   [4] farver_2.1.2        viridis_0.6.5       ggraph_2.2.1        #>   [7] fastmap_1.2.0       tweenr_2.0.3        rpart_4.1.23        #>  [10] digest_0.6.37       timechange_0.3.0    lifecycle_1.0.4     #>  [13] yardstick_1.3.1     survival_3.6-4      magrittr_2.0.3      #>  [16] compiler_4.4.1      rlang_1.1.4         sass_0.4.9          #>  [19] tools_4.4.1         igraph_2.0.3        utf8_1.2.4          #>  [22] yaml_2.3.10         data.table_1.15.4   knitr_1.48          #>  [25] graphlayouts_1.1.1  htmlwidgets_1.6.4   withr_3.0.1         #>  [28] purrr_1.0.2         RProtoBufLib_2.16.0 BiocGenerics_0.50.0 #>  [31] desc_1.4.3          nnet_7.3-19         grid_4.4.1          #>  [34] polyclip_1.10-7     stats4_4.4.1        fansi_1.0.6         #>  [37] RcppHNSW_0.6.0      future_1.34.0       colorspace_2.1-1    #>  [40] ggplot2_3.5.1       globals_0.16.3      scales_1.3.0        #>  [43] iterators_1.0.14    MASS_7.3-60.2       cli_3.6.3           #>  [46] rmarkdown_2.28      ragg_1.3.2          generics_0.1.3      #>  [49] future.apply_1.11.2 tzdb_0.4.0          cachem_1.1.0        #>  [52] flowCore_2.16.0     ggforce_0.4.2       stringr_1.5.1       #>  [55] splines_4.4.1       parallel_4.4.1      matrixStats_1.3.0   #>  [58] vctrs_0.6.5         hardhat_1.4.0       glmnet_4.1-8        #>  [61] Matrix_1.7-0        jsonlite_1.8.8      cytolib_2.16.0      #>  [64] hms_1.1.3           S4Vectors_0.42.1    ggrepel_0.9.5       #>  [67] listenv_0.9.1       systemfonts_1.1.0   foreach_1.5.2       #>  [70] gower_1.0.1         tidyr_1.3.1         jquerylib_0.1.4     #>  [73] recipes_1.1.0       parallelly_1.38.0   glue_1.7.0          #>  [76] pkgdown_2.1.0       codetools_0.2-20    stringi_1.8.4       #>  [79] lubridate_1.9.3     gtable_0.3.5        shape_1.4.6.1       #>  [82] munsell_0.5.1       tibble_3.2.1        pillar_1.9.0        #>  [85] htmltools_0.5.8.1   ipred_0.9-15        lava_1.8.0          #>  [88] R6_2.5.1            textshaping_0.4.0   doParallel_1.0.17   #>  [91] tidygraph_1.3.1     evaluate_0.24.0     Biobase_2.64.0      #>  [94] lattice_0.22-6      readr_2.1.5         memoise_2.0.1       #>  [97] bslib_0.8.0         class_7.3-22        Rcpp_1.0.13         #> [100] prodlim_2024.06.25  gridExtra_2.3       xfun_0.47           #> [103] fs_1.6.4            pkgconfig_2.0.3"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-principles","dir":"Articles","previous_headings":"How to contribute","what":"General principles","title":"How to contribute code","text":"important part writing function extends tidytof adhere tidytof verb syntax. exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (|>) multi-step calculations, means first argument functions implicit (passed previous function using pipe). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers follow rules tidyselection tidyverse verbs like dplyr::select() tidyr::pivot_longer(). Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. exceptions, tidytof extension include 3 argument types (order). addition, functions extend tidytof name starts prefix tof_. make easier users find tidytof functions using text completion functionality included development environments.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"tidytof currently includes multiple verbs perform fundamental single-cell data manipulation tasks. Currently, tidytof’s extensible verbs following: tof_analyze_abundance: Perform differential cluster abundance analysis tof_analyze_expression: Perform differential marker expression analysis tof_annotate_clusters: Annotate clusters manual IDs tof_batch_correct: Perform batch correction tof_cluster: Cluster cells subpopulations tof_downsample: Subsample dataset smaller number cells tof_extract: Calculate sample-level summary statistics tof_metacluster: Metacluster clusters smaller number subpopulations tof_plot_cells: Plot cell-level data tof_plot_clusters: Plot cluster-level data tof_plot_model: Plot results sample-level model tof_read_data: Read data memory disk tof_reduce_dimensions: Perform dimensionality reduction tof_transform: Transform marker expression values vectorized fashion tof_upsample: Assign new cells existing clusters (defined downsample dataset) tof_write_data: Write data memory disk tidytof verb wraps family related functions perform basic task. example, tof_cluster verb wrapper following functions: tof_cluster_ddpr, tof_cluster_flowsom, tof_cluster_kmeans, tof_cluster_phenograph. functions implement different clustering algorithm, share underlying logic standardized tof_cluster abstraction. practice, means users can apply DDPR, FlowSOM, K-means, PhenoGraph clustering algorithms datasets either calling one tof_cluster_* functions directly, calling tof_cluster method argument set appropriate value (“ddpr”, “flowsom”, “kmeans”, “phenograph”, respectively). extend existing tidytof verb, write function whose name fits pattern tof_{verb name}_*, “*” represents name algorithm used perform computation. function definition, try share many arguments possible tidytof verb ’re extending, return output object described “Value” heading help file verb extended. example, suppose wanted write tidytof-style interface new clustering algorithm “supercluster”, performs k-means clustering dataset twice outputs final cluster assignment equal two k-means cluster assignments spliced together. add supercluster algorithm tidytof, might write function like : example , note tof_cluster_supercluster named using tof_{verb name}_* style, function definition uses tof_tibble cluster_cols arguments tof_cluster, returned output object tof_tbl single column encoding cluster ids cells tof_tibble.","code":"#' Perform superclustering on high-dimensional cytometry data. #' #' This function applies the silly, hypothetical clustering algorithm #' \"supercluster\" to high-dimensional cytometry data using user-specified #' input variables/cytometry measurements. #' #' @param tof_tibble A `tof_tbl` or `tibble`. #' #' @param cluster_cols Unquoted column names indicating which columns in #' `tof_tibble` to use in computing the supercluster clusters. #' Supports tidyselect helpers. #' #' @param num_kmeans_clusters An integer indicating how many clusters should be #' used for the two k-means clustering steps. #' #' @param sep A string to use when splicing the 2 k-means clustering assignments #' to one another. #' #' @param ... Optional additional parameters to pass to #' \\code{\\link[tidytof]{tof_cluster_kmeans}} #' #' @return A tibble with one column named `.supercluster_cluster` containing #' a character vector of length `nrow(tof_tibble)` indicating the id of the #' supercluster cluster to which each cell (i.e. each row) in `tof_tibble` was #' assigned. #' #' @importFrom dplyr tibble #' tof_cluster_supercluster <-     function(tof_tibble, cluster_cols, num_kmeans_clusters = 10L, sep = \"_\", ...) {         kmeans_1 <-             tof_tibble |>             tof_cluster_kmeans(                 cluster_cols = {{ cluster_cols }},                 num_clusters = num_kmeans_clusters,                 ...             )          kmeans_2 <-             tof_tibble |>             tof_cluster_kmeans(                 cluster_cols = {{ cluster_cols }},                 num_clusters = num_kmeans_clusters,                 ...             )          final_result <-             dplyr::tibble(                 .supercluster_cluster =                     paste(kmeans_1$.kmeans_cluster, kmeans_2$.kmeans_cluster, sep = sep)             )          return(final_result)     }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"want contribute function tidytof represents new operation encompassed existing verbs , include suggestion create new verb pull request tidytof team. case, ’ll considerably flexibility define interface tidytof use implement new verb, tidytof team happy work figure makes sense (least brainstorm together).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"How to contribute code","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> loaded via a namespace (and not attached): #>  [1] digest_0.6.37     desc_1.4.3        R6_2.5.1          fastmap_1.2.0     #>  [5] xfun_0.47         cachem_1.1.0      knitr_1.48        htmltools_0.5.8.1 #>  [9] rmarkdown_2.28    lifecycle_1.0.4   cli_3.6.3         sass_0.4.9        #> [13] pkgdown_2.1.0     textshaping_0.4.0 jquerylib_0.1.4   systemfonts_1.1.0 #> [17] compiler_4.4.1    tools_4.4.1       ragg_1.3.2        evaluate_0.24.0   #> [21] bslib_0.8.0       yaml_2.3.10       jsonlite_1.8.8    rlang_1.1.4       #> [25] fs_1.6.4          htmlwidgets_1.6.4"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-     citrus_raw |>     as_tof_tbl(sep = \"_\") citrus_metadata <-     tibble(         file_name = as.character(flowCore::pData(citrus_raw)[[1]]),         sample_id = 1:length(file_name),         patient = stringr::str_extract(file_name, \"patient[:digit:]\"),         stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")     ) |>     mutate(         stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)     )  citrus_metadata |>     head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-     citrus_data |>     left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_analyze_abundance","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_analyze_abundance()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_analyze_abundance() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_analyze_abundance depends slightly underlying statistical method used, details can found documentation tof_analyze_abundance_* function family member: tof_analyze_abundance_diffcyt tof_analyze_abundance_glmm tof_analyze_abundance_ttest","code":"daa_result <-     citrus_data |>     tof_analyze_abundance(         cluster_col = population_id,         effect_col = stimulation,         group_cols = patient,         test_type = \"paired\",         method = \"ttest\"     )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-     citrus_data |>     mutate(population_id = as.character(population_id)) |>     left_join(         select(daa_result, population_id, significant, mean_fc),         by = \"population_id\"     ) |>     dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") |>     group_by(patient, stimulation) |>     mutate(prop = n / sum(n)) |>     ungroup() |>     pivot_wider(         names_from = stimulation,         values_from = c(prop, n),     ) |>     mutate(         diff = `prop_BCR-XL` - prop_Basal,         fc = `prop_BCR-XL` / prop_Basal,         population_id = fct_reorder(population_id, diff),         direction =             case_when(                 mean_fc > 1 & significant == \"*\" ~ \"increase\",                 mean_fc < 1 & significant == \"*\" ~ \"decrease\",                 TRUE ~ NA_character_             )     )  significance_data <-     plot_data |>     group_by(population_id, significant, direction) |>     summarize(diff = max(diff), fc = max(fc)) |>     ungroup()  plot_data |>     ggplot(aes(x = population_id, y = fc, fill = direction)) +     geom_violin(trim = FALSE) +     geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +     geom_point() +     geom_text(         aes(x = population_id, y = fc, label = significant),         data = significance_data,         size = 8,         nudge_x = 0.2,         nudge_y = 0.06     ) +     scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +     scale_fill_manual(         values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),         na.translate = FALSE     ) +     labs(         x = NULL,         y = \"Abundance fold-change (stimulated / basal)\",         fill = \"Effect\",         caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"     ) #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_analyze_expression","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_analyze_expression()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_analyze_expression verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_analyze_expression() also depends underlying test used, can see result looks relatively similar output tof_analyze_abundance(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_analyze_expression_* function family member: tof_analyze_expression_diffcyt tof_analyze_expression_lmm tof_analyze_expression_ttest","code":"signaling_markers <-     c(         \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",         \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"     )  dea_result <-     citrus_data |>     tof_preprocess(channel_cols = any_of(signaling_markers)) |>     tof_analyze_expression(         method = \"ttest\",         cluster_col = population_id,         marker_cols = any_of(signaling_markers),         effect_col = stimulation,         group_cols = patient,         test_type = \"paired\"     )  dea_result |>     head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-     dea_result |>     mutate(         log2_fc = log(mean_fc, base = 2),         log_p = -log(p_adj),         significance =             case_when(                 p_adj < 0.05 & mean_fc > 1 ~ \"increased\",                 p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",                 TRUE ~ NA_character_             ),         marker =             str_extract(marker, \".+_\") |>                 str_remove(\"_\"),         pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")     )  volcano_data |>     ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +     geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +     geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +     geom_point(shape = 21, size = 2) +     ggrepel::geom_text_repel(         aes(label = pair),         data = slice_head(volcano_data, n = 10L),         size = 2     ) +     scale_fill_manual(         values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),         na.value = \"#cdcdcd\"     ) +     labs(         x = \"log2(Fold-change)\",         y = \"-log10(p-value)\",         fill = NULL,         caption = \"Labels indicate the 10 most significant marker-cluster pairs\"     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Differential discovery analysis","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] HDCytoData_1.24.0           flowCore_2.16.0             #>  [3] SummarizedExperiment_1.34.0 Biobase_2.64.0              #>  [5] GenomicRanges_1.56.1        GenomeInfoDb_1.40.1         #>  [7] IRanges_2.38.1              S4Vectors_0.42.1            #>  [9] MatrixGenerics_1.16.0       matrixStats_1.3.0           #> [11] ExperimentHub_2.12.0        AnnotationHub_3.12.0        #> [13] BiocFileCache_2.12.0        dbplyr_2.5.0                #> [15] BiocGenerics_0.50.0         forcats_1.0.0               #> [17] tidyr_1.3.1                 ggplot2_3.5.1               #> [19] stringr_1.5.1               dplyr_1.1.4                 #> [21] tidytof_0.99.8              #>  #> loaded via a namespace (and not attached): #>   [1] jsonlite_1.8.8          shape_1.4.6.1           magrittr_2.0.3          #>   [4] farver_2.1.2            rmarkdown_2.28          fs_1.6.4                #>   [7] zlibbioc_1.50.0         ragg_1.3.2              vctrs_0.6.5             #>  [10] memoise_2.0.1           htmltools_0.5.8.1       S4Arrays_1.4.1          #>  [13] curl_5.2.1              SparseArray_1.4.8       sass_0.4.9              #>  [16] parallelly_1.38.0       bslib_0.8.0             htmlwidgets_1.6.4       #>  [19] desc_1.4.3              lubridate_1.9.3         cachem_1.1.0            #>  [22] igraph_2.0.3            mime_0.12               lifecycle_1.0.4         #>  [25] iterators_1.0.14        pkgconfig_2.0.3         Matrix_1.7-0            #>  [28] R6_2.5.1                fastmap_1.2.0           GenomeInfoDbData_1.2.12 #>  [31] future_1.34.0           digest_0.6.37           colorspace_2.1-1        #>  [34] AnnotationDbi_1.66.0    textshaping_0.4.0       RSQLite_2.3.7           #>  [37] labeling_0.4.3          filelock_1.0.3          cytolib_2.16.0          #>  [40] fansi_1.0.6             yardstick_1.3.1         timechange_0.3.0        #>  [43] httr_1.4.7              polyclip_1.10-7         abind_1.4-5             #>  [46] compiler_4.4.1          bit64_4.0.5             withr_3.0.1             #>  [49] doParallel_1.0.17       viridis_0.6.5           DBI_1.2.3               #>  [52] highr_0.11              ggforce_0.4.2           MASS_7.3-60.2           #>  [55] lava_1.8.0              rappdirs_0.3.3          DelayedArray_0.30.1     #>  [58] tools_4.4.1             future.apply_1.11.2     nnet_7.3-19             #>  [61] glue_1.7.0              grid_4.4.1              generics_0.1.3          #>  [64] recipes_1.1.0           gtable_0.3.5            tzdb_0.4.0              #>  [67] class_7.3-22            data.table_1.15.4       hms_1.1.3               #>  [70] tidygraph_1.3.1         utf8_1.2.4              XVector_0.44.0          #>  [73] ggrepel_0.9.5           BiocVersion_3.19.1      foreach_1.5.2           #>  [76] pillar_1.9.0            RcppHNSW_0.6.0          splines_4.4.1           #>  [79] tweenr_2.0.3            lattice_0.22-6          survival_3.6-4          #>  [82] bit_4.0.5               RProtoBufLib_2.16.0     tidyselect_1.2.1        #>  [85] Biostrings_2.72.1       knitr_1.48              gridExtra_2.3           #>  [88] xfun_0.47               graphlayouts_1.1.1      hardhat_1.4.0           #>  [91] timeDate_4032.109       stringi_1.8.4           UCSC.utils_1.0.0        #>  [94] yaml_2.3.10             evaluate_0.24.0         codetools_0.2-20        #>  [97] ggraph_2.2.1            tibble_3.2.1            BiocManager_1.30.24     #> [100] cli_3.6.3               rpart_4.1.23            systemfonts_1.1.0       #> [103] munsell_0.5.1           jquerylib_0.1.4         Rcpp_1.0.13             #> [106] globals_0.16.3          png_0.1-8               parallel_4.4.1          #> [109] pkgdown_2.1.0           gower_1.0.1             readr_2.1.5             #> [112] blob_1.2.4              listenv_0.9.1           glmnet_4.1-8            #> [115] viridisLite_0.4.2       ipred_0.9-15            scales_1.3.0            #> [118] prodlim_2024.06.25      purrr_1.0.2             crayon_1.5.3            #> [121] rlang_1.1.4             KEGGREST_1.44.1"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-     phenograph_data |>     tof_preprocess() |>     tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne |>     select(contains(\"tsne\")) |>     head() #> # A tibble: 6 × 2 #>   .tsne1 .tsne2 #>    <dbl>  <dbl> #> 1   1.74  17.0  #> 2  10.4    7.60 #> 3  30.4   19.8  #> 4  15.2   14.6  #> 5   3.99  19.0  #> 6  21.3   12.4 phenograph_data |>     tof_preprocess() |>     tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne1 .tsne2 #>     <dbl>  <dbl> #>  1  18.7  -1.60  #>  2   9.55  3.71  #>  3  11.3  27.9   #>  4  14.8  13.4   #>  5  20.9   0.568 #>  6  23.3  14.5   #>  7  19.0   6.40  #>  8  27.1  14.7   #>  9  20.1  12.6   #> 10  12.7  -1.41  #> # ℹ 2,990 more rows phenograph_data |>     tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1 -5.17  -5.17  #>  2 -5.76  -4.26  #>  3 -7.72   0.819 #>  4 -6.54   0.271 #>  5 -4.95  -4.90  #>  6 -0.380  3.52  #>  7 -4.76  -4.44  #>  8 -7.57   1.40  #>  9 -6.43  -0.919 #> 10 -6.92  -6.41  #> # ℹ 2,990 more rows  phenograph_data |>     tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23    -0.868  0.978   3.49  #>  2 -0.969  -1.02    -0.787  1.22    0.329 #>  3 -2.36    2.54    -1.95  -0.882  -1.30  #>  4 -3.68   -0.00565  0.962  0.410   0.788 #>  5 -4.03    2.07    -0.829  1.59    5.39  #>  6 -2.59   -0.108    1.32  -1.41   -1.24  #>  7 -1.55   -0.651   -0.233  1.08    0.129 #>  8 -1.18   -0.446    0.134 -0.771  -0.932 #>  9 -2.00   -0.485    0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924   -0.692  1.45    0.270 #> # ℹ 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data |>     tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # ℹ 2,990 more rows # 3 principal components phenograph_data |>     tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23    -0.868 #>  2 -0.969  -1.02    -0.787 #>  3 -2.36    2.54    -1.95  #>  4 -3.68   -0.00565  0.962 #>  5 -4.03    2.07    -0.829 #>  6 -2.59   -0.108    1.32  #>  7 -1.55   -0.651   -0.233 #>  8 -1.18   -0.446    0.134 #>  9 -2.00   -0.485    0.593 #> 10 -0.0356 -0.924   -0.692 #> # ℹ 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne |>     tof_plot_cells_embedding(         embedding_cols = contains(\".tsne\"),         color_col = phenograph_cluster     ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne |>     tof_plot_cells_embedding(         embedding_cols = contains(\".tsne\"),         color_col = cd11b     ) +     ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Dimensionality reduction","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.1  dplyr_1.1.4    tidytof_0.99.8 #>  #> loaded via a namespace (and not attached): #>   [1] gridExtra_2.3       rlang_1.1.4         magrittr_2.0.3      #>   [4] RcppAnnoy_0.0.22    matrixStats_1.3.0   compiler_4.4.1      #>   [7] systemfonts_1.1.0   vctrs_0.6.5         stringr_1.5.1       #>  [10] pkgconfig_2.0.3     shape_1.4.6.1       fastmap_1.2.0       #>  [13] labeling_0.4.3      ggraph_2.2.1        utf8_1.2.4          #>  [16] rmarkdown_2.28      prodlim_2024.06.25  tzdb_0.4.0          #>  [19] ragg_1.3.2          purrr_1.0.2         xfun_0.47           #>  [22] glmnet_4.1-8        cachem_1.1.0        jsonlite_1.8.8      #>  [25] recipes_1.1.0       highr_0.11          tweenr_2.0.3        #>  [28] irlba_2.3.5.1       parallel_4.4.1      R6_2.5.1            #>  [31] bslib_0.8.0         stringi_1.8.4       parallelly_1.38.0   #>  [34] rpart_4.1.23        lubridate_1.9.3     jquerylib_0.1.4     #>  [37] Rcpp_1.0.13         iterators_1.0.14    knitr_1.48          #>  [40] future.apply_1.11.2 readr_2.1.5         flowCore_2.16.0     #>  [43] Matrix_1.7-0        splines_4.4.1       nnet_7.3-19         #>  [46] igraph_2.0.3        timechange_0.3.0    tidyselect_1.2.1    #>  [49] yaml_2.3.10         viridis_0.6.5       timeDate_4032.109   #>  [52] doParallel_1.0.17   codetools_0.2-20    listenv_0.9.1       #>  [55] lattice_0.22-6      tibble_3.2.1        Biobase_2.64.0      #>  [58] withr_3.0.1         evaluate_0.24.0     Rtsne_0.17          #>  [61] future_1.34.0       desc_1.4.3          survival_3.6-4      #>  [64] polyclip_1.10-7     embed_1.1.4         pillar_1.9.0        #>  [67] foreach_1.5.2       stats4_4.4.1        generics_0.1.3      #>  [70] RcppHNSW_0.6.0      S4Vectors_0.42.1    hms_1.1.3           #>  [73] munsell_0.5.1       scales_1.3.0        globals_0.16.3      #>  [76] class_7.3-22        glue_1.7.0          tools_4.4.1         #>  [79] data.table_1.15.4   gower_1.0.1         fs_1.6.4            #>  [82] graphlayouts_1.1.1  tidygraph_1.3.1     grid_4.4.1          #>  [85] yardstick_1.3.1     tidyr_1.3.1         RProtoBufLib_2.16.0 #>  [88] ipred_0.9-15        colorspace_2.1-1    ggforce_0.4.2       #>  [91] cli_3.6.3           textshaping_0.4.0   fansi_1.0.6         #>  [94] cytolib_2.16.0      viridisLite_0.4.2   lava_1.8.0          #>  [97] uwot_0.2.2          gtable_0.3.5        sass_0.4.9          #> [100] digest_0.6.37       BiocGenerics_0.50.0 ggrepel_0.9.5       #> [103] htmlwidgets_1.6.4   farver_2.1.2        memoise_2.0.1       #> [106] htmltools_0.5.8.1   pkgdown_2.1.0       lifecycle_1.0.4     #> [109] hardhat_1.4.0       MASS_7.3-60.2"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data |>     dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data |>     # downsample     tof_downsample(         group_cols = phenograph_cluster,         method = \"constant\",         num_cells = 200     ) |>     # count the number of downsampled cells in each cluster     count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data |>     # downsample     tof_downsample(         group_cols = phenograph_cluster,         method = \"prop\",         prop_cells = 0.5     ) |>     # count the number of downsampled cells in each cluster     count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-     function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {         x / from[2] * to[2]     }  phenograph_data |>     # preprocess all numeric columns in the dataset     tof_preprocess(undo_noise = FALSE) |>     # plot     ggplot(aes(x = cd34, y = cd38)) +     geom_hex() +     coord_fixed(ratio = 0.4) +     scale_x_continuous(limits = c(NA, 1.5)) +     scale_y_continuous(limits = c(NA, 4)) +     scale_fill_viridis_c(         labels = function(x) round(rescale_max(x), 2)     ) +     labs(         fill = \"relative density\"     ) phenograph_data |>     tof_preprocess(undo_noise = FALSE) |>     tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) |>     # plot     ggplot(aes(x = cd34, y = cd38)) +     geom_hex() +     coord_fixed(ratio = 0.4) +     scale_x_continuous(limits = c(NA, 1.5)) +     scale_y_continuous(limits = c(NA, 4)) +     scale_fill_viridis_c(         labels = function(x) round(rescale_max(x), 2)     ) +     labs(         fill = \"relative density\"     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Downsampling","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.1  dplyr_1.1.4    tidytof_0.99.8 #>  #> loaded via a namespace (and not attached): #>   [1] gridExtra_2.3       rlang_1.1.4         magrittr_2.0.3      #>   [4] matrixStats_1.3.0   compiler_4.4.1      systemfonts_1.1.0   #>   [7] vctrs_0.6.5         stringr_1.5.1       pkgconfig_2.0.3     #>  [10] shape_1.4.6.1       fastmap_1.2.0       ggraph_2.2.1        #>  [13] utf8_1.2.4          rmarkdown_2.28      prodlim_2024.06.25  #>  [16] tzdb_0.4.0          ragg_1.3.2          purrr_1.0.2         #>  [19] xfun_0.47           glmnet_4.1-8        cachem_1.1.0        #>  [22] jsonlite_1.8.8      recipes_1.1.0       highr_0.11          #>  [25] tweenr_2.0.3        parallel_4.4.1      R6_2.5.1            #>  [28] bslib_0.8.0         stringi_1.8.4       parallelly_1.38.0   #>  [31] rpart_4.1.23        lubridate_1.9.3     jquerylib_0.1.4     #>  [34] Rcpp_1.0.13         iterators_1.0.14    knitr_1.48          #>  [37] future.apply_1.11.2 readr_2.1.5         flowCore_2.16.0     #>  [40] Matrix_1.7-0        splines_4.4.1       nnet_7.3-19         #>  [43] igraph_2.0.3        timechange_0.3.0    tidyselect_1.2.1    #>  [46] yaml_2.3.10         viridis_0.6.5       timeDate_4032.109   #>  [49] doParallel_1.0.17   codetools_0.2-20    listenv_0.9.1       #>  [52] lattice_0.22-6      tibble_3.2.1        Biobase_2.64.0      #>  [55] withr_3.0.1         evaluate_0.24.0     future_1.34.0       #>  [58] desc_1.4.3          survival_3.6-4      polyclip_1.10-7     #>  [61] pillar_1.9.0        foreach_1.5.2       stats4_4.4.1        #>  [64] generics_0.1.3      RcppHNSW_0.6.0      S4Vectors_0.42.1    #>  [67] hms_1.1.3           munsell_0.5.1       scales_1.3.0        #>  [70] globals_0.16.3      class_7.3-22        glue_1.7.0          #>  [73] tools_4.4.1         data.table_1.15.4   gower_1.0.1         #>  [76] fs_1.6.4            graphlayouts_1.1.1  tidygraph_1.3.1     #>  [79] grid_4.4.1          yardstick_1.3.1     tidyr_1.3.1         #>  [82] RProtoBufLib_2.16.0 ipred_0.9-15        colorspace_2.1-1    #>  [85] ggforce_0.4.2       cli_3.6.3           textshaping_0.4.0   #>  [88] fansi_1.0.6         cytolib_2.16.0      viridisLite_0.4.2   #>  [91] lava_1.8.0          gtable_0.3.5        sass_0.4.9          #>  [94] digest_0.6.37       BiocGenerics_0.50.0 ggrepel_0.9.5       #>  [97] htmlwidgets_1.6.4   farver_2.1.2        memoise_2.0.1       #> [100] htmltools_0.5.8.1   pkgdown_2.1.0       lifecycle_1.0.4     #> [103] hardhat_1.4.0       MASS_7.3-60.2"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-     citrus_raw |>     as_tof_tbl(sep = \"_\") citrus_metadata <-     tibble(         file_name = as.character(flowCore::pData(citrus_raw)[[1]]),         sample_id = 1:length(file_name),         patient = stringr::str_extract(file_name, \"patient[:digit:]\"),         stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")     ) |>     mutate(         stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)     )  citrus_metadata |>     head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-     citrus_data |>     left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-     citrus_data |>     mutate(cluster = str_c(\"cluster\", population_id)) |>     tof_preprocess()  citrus_data |>     tof_extract_proportion(         cluster_col = cluster,         group_cols = c(patient, stimulation)     ) |>     head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # ℹ 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data |>     tof_extract_proportion(         cluster_col = cluster,         group_cols = c(patient, stimulation),         format = \"long\"     ) |>     head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data |>     tof_extract_central_tendency(         cluster_col = cluster,         group_cols = c(patient, stimulation),         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         central_tendency_function = mean     ) |>     head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          4.80                  0.0967 #> 2 patient1 Basal                           4.68                  0.765  #> 3 patient2 BCR-XL                          5.00                 -0.0579 #> 4 patient2 Basal                           4.88                  0.808  #> 5 patient3 BCR-XL                          5.04                 -0.0432 #> 6 patient3 Basal                           4.98                  0.745  #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, … citrus_data |>     tof_extract_central_tendency(         cluster_col = cluster,         group_cols = c(patient, stimulation),         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         central_tendency_function = function(x) quantile(x = x, probs = 0.75)     ) |>     head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          5.30                 -0.0186 #> 2 patient1 Basal                           5.18                  1.32   #> 3 patient2 BCR-XL                          5.41                 -0.0201 #> 4 patient2 Basal                           5.28                  1.39   #> 5 patient3 BCR-XL                          5.42                 -0.0362 #> 6 patient3 Basal                           5.41                  1.27   #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data |>     tof_extract_threshold(         cluster_col = cluster,         group_cols = c(patient, stimulation),         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         threshold = 5     ) |>     head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_threshold` CD4_Nd145@cluster1_thre…¹ #>   <chr>    <chr>                                 <dbl>                     <dbl> #> 1 patient1 BCR-XL                                0.516                         0 #> 2 patient1 Basal                                 0.365                         0 #> 3 patient2 BCR-XL                                0.554                         0 #> 4 patient2 Basal                                 0.452                         0 #> 5 patient3 BCR-XL                                0.547                         0 #> 6 patient3 Basal                                 0.549                         0 #> # ℹ abbreviated name: ¹​`CD4_Nd145@cluster1_threshold` #> # ℹ 22 more variables: `CD20_Sm147@cluster1_threshold` <dbl>, #> #   `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data |>     tof_extract_emd(         cluster_col = cluster,         group_cols = patient,         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         emd_col = stimulation,         reference_level = \"Basal\"     ) |>     head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                   0.864                   2.47                  13.0  #> 2 patient2                   1.11                    7.05                  10.8  #> 3 patient3                   0.670                   6.23                  10.5  #> 4 patient4                   2.64                    5.86                   9.90 #> 5 patient5                   0.594                   7.56                   8.13 #> 6 patient6                   0.661                   4.77                   7.97 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_emd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_emd`, ³​`BCR-XL_CD20_Sm147@cluster3_emd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data |>     tof_extract_jsd(         cluster_col = cluster,         group_cols = patient,         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         jsd_col = stimulation,         reference_level = \"Basal\"     ) |>     head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                 0.0367                  0.0513                  0.347 #> 2 patient2                 0.00831                 0.168                   0.401 #> 3 patient3                 0.0104                  0.115                   0.357 #> 4 patient4                 0.0301                  0.135                   0.205 #> 5 patient5                 0.00911                 0.0789                  0.274 #> 6 patient6                 0.00972                 0.0346                  0.214 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_jsd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_jsd`, ³​`BCR-XL_CD20_Sm147@cluster3_jsd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-     c(         \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",         \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"     )  citrus_data |>     tof_extract_features(         cluster_col = cluster,         group_cols = patient,         stimulation_col = stimulation,         lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),         signaling_cols = any_of(signaling_markers),         signaling_method = \"emd\",         basal_level = \"Basal\"     ) |>     head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # ℹ 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Feature extraction","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] HDCytoData_1.24.0           flowCore_2.16.0             #>  [3] SummarizedExperiment_1.34.0 Biobase_2.64.0              #>  [5] GenomicRanges_1.56.1        GenomeInfoDb_1.40.1         #>  [7] IRanges_2.38.1              S4Vectors_0.42.1            #>  [9] MatrixGenerics_1.16.0       matrixStats_1.3.0           #> [11] ExperimentHub_2.12.0        AnnotationHub_3.12.0        #> [13] BiocFileCache_2.12.0        dbplyr_2.5.0                #> [15] BiocGenerics_0.50.0         stringr_1.5.1               #> [17] dplyr_1.1.4                 tidytof_0.99.8              #>  #> loaded via a namespace (and not attached): #>   [1] jsonlite_1.8.8          shape_1.4.6.1           magrittr_2.0.3          #>   [4] farver_2.1.2            rmarkdown_2.28          fs_1.6.4                #>   [7] zlibbioc_1.50.0         ragg_1.3.2              vctrs_0.6.5             #>  [10] memoise_2.0.1           htmltools_0.5.8.1       S4Arrays_1.4.1          #>  [13] curl_5.2.1              SparseArray_1.4.8       sass_0.4.9              #>  [16] parallelly_1.38.0       bslib_0.8.0             htmlwidgets_1.6.4       #>  [19] desc_1.4.3              lubridate_1.9.3         cachem_1.1.0            #>  [22] igraph_2.0.3            mime_0.12               lifecycle_1.0.4         #>  [25] iterators_1.0.14        pkgconfig_2.0.3         Matrix_1.7-0            #>  [28] R6_2.5.1                fastmap_1.2.0           GenomeInfoDbData_1.2.12 #>  [31] future_1.34.0           digest_0.6.37           colorspace_2.1-1        #>  [34] AnnotationDbi_1.66.0    textshaping_0.4.0       RSQLite_2.3.7           #>  [37] philentropy_0.8.0       filelock_1.0.3          cytolib_2.16.0          #>  [40] fansi_1.0.6             yardstick_1.3.1         timechange_0.3.0        #>  [43] httr_1.4.7              polyclip_1.10-7         abind_1.4-5             #>  [46] compiler_4.4.1          bit64_4.0.5             withr_3.0.1             #>  [49] doParallel_1.0.17       viridis_0.6.5           DBI_1.2.3               #>  [52] ggforce_0.4.2           MASS_7.3-60.2           lava_1.8.0              #>  [55] rappdirs_0.3.3          DelayedArray_0.30.1     tools_4.4.1             #>  [58] future.apply_1.11.2     nnet_7.3-19             glue_1.7.0              #>  [61] grid_4.4.1              generics_0.1.3          recipes_1.1.0           #>  [64] gtable_0.3.5            tzdb_0.4.0              class_7.3-22            #>  [67] tidyr_1.3.1             data.table_1.15.4       hms_1.1.3               #>  [70] tidygraph_1.3.1         utf8_1.2.4              XVector_0.44.0          #>  [73] ggrepel_0.9.5           BiocVersion_3.19.1      foreach_1.5.2           #>  [76] pillar_1.9.0            RcppHNSW_0.6.0          splines_4.4.1           #>  [79] tweenr_2.0.3            lattice_0.22-6          survival_3.6-4          #>  [82] bit_4.0.5               emdist_0.3-3            RProtoBufLib_2.16.0     #>  [85] tidyselect_1.2.1        Biostrings_2.72.1       knitr_1.48              #>  [88] gridExtra_2.3           xfun_0.47               graphlayouts_1.1.1      #>  [91] hardhat_1.4.0           timeDate_4032.109       stringi_1.8.4           #>  [94] UCSC.utils_1.0.0        yaml_2.3.10             evaluate_0.24.0         #>  [97] codetools_0.2-20        ggraph_2.2.1            tibble_3.2.1            #> [100] BiocManager_1.30.24     cli_3.6.3               rpart_4.1.23            #> [103] systemfonts_1.1.0       munsell_0.5.1           jquerylib_0.1.4         #> [106] Rcpp_1.0.13             globals_0.16.3          png_0.1-8               #> [109] parallel_4.4.1          pkgdown_2.1.0           gower_1.0.1             #> [112] ggplot2_3.5.1           readr_2.1.5             blob_1.2.4              #> [115] listenv_0.9.1           glmnet_4.1-8            viridisLite_0.4.2       #> [118] ipred_0.9-15            scales_1.3.0            prodlim_2024.06.25      #> [121] purrr_1.0.2             crayon_1.5.3            rlang_1.1.4             #> [124] KEGGREST_1.44.1"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-     \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-     readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) |>     dplyr::rename(patient_id = Patient_ID) |>     dplyr::left_join(ddpr_metadata, by = \"patient_id\") |>     dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns ddpr_patients |>     dplyr::select(where(~ !is.numeric(.x))) |>     head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # ℹ 1 more variable: ddpr_risk <chr> ddpr_patients <-     ddpr_patients |>     # convert the relapse_status variable to a factor     # and create the time_to_event and event columns for survival modeling     dplyr::mutate(         relapse_status = as.factor(relapse_status),         time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),         event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients |>     dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-     ddpr_patients |>     dplyr::filter(is.na(relapse_status))  ddpr_patients <-     ddpr_patients |>     dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-     ddpr_patients |>     tof_split_data(         split_method = \"k-fold\",         num_cv_folds = 10,         strata = relapse_status     )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample |>     rsample::training() |>     head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample |>     rsample::testing() |>     head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-     training_split |>     tof_train_model(         predictor_cols = c(contains(\"Pop2\")),         response_col = relapse_status,         model_type = \"two-class\",         hyperparameter_grid = hyperparams,         impute_missing_predictors = TRUE,         remove_zv_predictors = TRUE # often a smart decision     ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # ℹ 18 more rows training_classifier_metrics <-     class_mod |>     tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod |>     tof_plot_model() cv_classifier_metrics <-     class_mod |>     tof_assess_model(new_data = \"tuning\")  class_mod |>     tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-     training_split |>     tof_train_model(         predictor_cols = c(contains(\"Pop2\")),         time_col = time_to_event,         event_col = event,         model_type = \"survival\",         hyperparameter_grid = hyperparams,         impute_missing_predictors = TRUE,         remove_zv_predictors = TRUE # often a smart decision     )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # ℹ 30 more rows survival_metrics <-     survival_mod |>     tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # ℹ 51 more rows survival_mod |>     tof_plot_model() cv_survival_metrics <-     survival_mod |>     tof_assess_model(new_data = \"tuning\") survival_mod |>     tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Building predictive models","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] stringr_1.5.1  tidytof_0.99.8 #>  #> loaded via a namespace (and not attached): #>   [1] gridExtra_2.3       rlang_1.1.4         magrittr_2.0.3      #>   [4] furrr_0.3.1         matrixStats_1.3.0   compiler_4.4.1      #>   [7] systemfonts_1.1.0   vctrs_0.6.5         crayon_1.5.3        #>  [10] pkgconfig_2.0.3     shape_1.4.6.1       fastmap_1.2.0       #>  [13] labeling_0.4.3      ggraph_2.2.1        utf8_1.2.4          #>  [16] rmarkdown_2.28      prodlim_2024.06.25  tzdb_0.4.0          #>  [19] ragg_1.3.2          bit_4.0.5           purrr_1.0.2         #>  [22] xfun_0.47           glmnet_4.1-8        cachem_1.1.0        #>  [25] jsonlite_1.8.8      recipes_1.1.0       highr_0.11          #>  [28] tweenr_2.0.3        parallel_4.4.1      R6_2.5.1            #>  [31] rsample_1.2.1       bslib_0.8.0         stringi_1.8.4       #>  [34] parallelly_1.38.0   rpart_4.1.23        lubridate_1.9.3     #>  [37] jquerylib_0.1.4     Rcpp_1.0.13         iterators_1.0.14    #>  [40] knitr_1.48          future.apply_1.11.2 readr_2.1.5         #>  [43] flowCore_2.16.0     Matrix_1.7-0        splines_4.4.1       #>  [46] nnet_7.3-19         igraph_2.0.3        timechange_0.3.0    #>  [49] tidyselect_1.2.1    yaml_2.3.10         viridis_0.6.5       #>  [52] timeDate_4032.109   doParallel_1.0.17   codetools_0.2-20    #>  [55] curl_5.2.1          listenv_0.9.1       lattice_0.22-6      #>  [58] tibble_3.2.1        Biobase_2.64.0      withr_3.0.1         #>  [61] evaluate_0.24.0     future_1.34.0       desc_1.4.3          #>  [64] survival_3.6-4      polyclip_1.10-7     pillar_1.9.0        #>  [67] foreach_1.5.2       stats4_4.4.1        generics_0.1.3      #>  [70] vroom_1.6.5         RcppHNSW_0.6.0      S4Vectors_0.42.1    #>  [73] hms_1.1.3           ggplot2_3.5.1       munsell_0.5.1       #>  [76] scales_1.3.0        globals_0.16.3      class_7.3-22        #>  [79] glue_1.7.0          tools_4.4.1         data.table_1.15.4   #>  [82] gower_1.0.1         fs_1.6.4            graphlayouts_1.1.1  #>  [85] tidygraph_1.3.1     grid_4.4.1          yardstick_1.3.1     #>  [88] tidyr_1.3.1         RProtoBufLib_2.16.0 ipred_0.9-15        #>  [91] colorspace_2.1-1    ggforce_0.4.2       cli_3.6.3           #>  [94] textshaping_0.4.0   fansi_1.0.6         cytolib_2.16.0      #>  [97] viridisLite_0.4.2   lava_1.8.0          dplyr_1.1.4         #> [100] gtable_0.3.5        sass_0.4.9          digest_0.6.37       #> [103] BiocGenerics_0.50.0 ggrepel_0.9.5       htmlwidgets_1.6.4   #> [106] farver_2.1.2        memoise_2.0.1       htmltools_0.5.8.1   #> [109] pkgdown_2.1.0       lifecycle_1.0.4     hardhat_1.4.0       #> [112] bit64_4.0.5         MASS_7.3-60.2"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%     select(cd45, cd34, cd38) %>%     head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # ℹ 2 more rows phenograph_data %>%     # perform preprocessing     tof_preprocess() %>%     # inspect new values     select(cd45, cd34, cd38) %>%     head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # ℹ 2 more rows phenograph_data %>%     # preprocess     tof_preprocess(transform_fun = scale) %>%     # inspect new values     select(cd45, cd34, cd38) %>%     head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%     select(cd45, cd34, cd38) %>%     head() #> # A tibble: 3,000 × 25 #>   sample_name  phenograph_cluster    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>        <chr>                <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGra… cluster1           -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGra… cluster1            1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGra… cluster1            2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGra… cluster1            0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # ℹ 2,996 more rows #> # ℹ 16 more variables: cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, #> #   cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, #> #   pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, #> #   prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # ℹ 2 more rows  # after preprocessing and post-processing, the data are the same # except that the re-added noise component is different for each value phenograph_data %>%     tof_preprocess() %>%     tof_postprocess(redo_noise = TRUE) %>%     select(cd45, cd34, cd38) %>%     head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  130.  2.36   1.15 #> 2  229. -1.51  10.4  #> 3  293.  4.54   1.56 #> 4  431.  0.150 12.9  #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Preprocessing","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4    tidytof_0.99.8 #>  #> loaded via a namespace (and not attached): #>   [1] tidyselect_1.2.1    viridisLite_0.4.2   timeDate_4032.109   #>   [4] farver_2.1.2        viridis_0.6.5       ggraph_2.2.1        #>   [7] fastmap_1.2.0       tweenr_2.0.3        rpart_4.1.23        #>  [10] digest_0.6.37       timechange_0.3.0    lifecycle_1.0.4     #>  [13] yardstick_1.3.1     survival_3.6-4      magrittr_2.0.3      #>  [16] compiler_4.4.1      rlang_1.1.4         sass_0.4.9          #>  [19] tools_4.4.1         igraph_2.0.3        utf8_1.2.4          #>  [22] yaml_2.3.10         data.table_1.15.4   knitr_1.48          #>  [25] graphlayouts_1.1.1  htmlwidgets_1.6.4   withr_3.0.1         #>  [28] purrr_1.0.2         RProtoBufLib_2.16.0 BiocGenerics_0.50.0 #>  [31] desc_1.4.3          nnet_7.3-19         grid_4.4.1          #>  [34] polyclip_1.10-7     stats4_4.4.1        fansi_1.0.6         #>  [37] RcppHNSW_0.6.0      future_1.34.0       colorspace_2.1-1    #>  [40] ggplot2_3.5.1       globals_0.16.3      scales_1.3.0        #>  [43] iterators_1.0.14    MASS_7.3-60.2       cli_3.6.3           #>  [46] rmarkdown_2.28      ragg_1.3.2          generics_0.1.3      #>  [49] future.apply_1.11.2 tzdb_0.4.0          cachem_1.1.0        #>  [52] flowCore_2.16.0     ggforce_0.4.2       stringr_1.5.1       #>  [55] splines_4.4.1       parallel_4.4.1      matrixStats_1.3.0   #>  [58] vctrs_0.6.5         hardhat_1.4.0       glmnet_4.1-8        #>  [61] Matrix_1.7-0        jsonlite_1.8.8      cytolib_2.16.0      #>  [64] hms_1.1.3           S4Vectors_0.42.1    ggrepel_0.9.5       #>  [67] listenv_0.9.1       systemfonts_1.1.0   foreach_1.5.2       #>  [70] gower_1.0.1         tidyr_1.3.1         jquerylib_0.1.4     #>  [73] recipes_1.1.0       parallelly_1.38.0   glue_1.7.0          #>  [76] pkgdown_2.1.0       codetools_0.2-20    stringi_1.8.4       #>  [79] lubridate_1.9.3     gtable_0.3.5        shape_1.4.6.1       #>  [82] munsell_0.5.1       tibble_3.2.1        pillar_1.9.0        #>  [85] htmltools_0.5.8.1   ipred_0.9-15        lava_1.8.0          #>  [88] R6_2.5.1            textshaping_0.4.0   doParallel_1.0.17   #>  [91] tidygraph_1.3.1     evaluate_0.24.0     Biobase_2.64.0      #>  [94] lattice_0.22-6      readr_2.1.5         memoise_2.0.1       #>  [97] bslib_0.8.0         class_7.3-22        Rcpp_1.0.13         #> [100] prodlim_2024.06.25  gridExtra_2.3       xfun_0.47           #> [103] fs_1.6.4            pkgconfig_2.0.3"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Quality control","text":"demonstrate use {tidytof}’s quality control verbs, use combination simulated real data vignette. Simulated data generated --fly sections , walk download real dataset section. want download dataset originally collected development PhenoGraph algorithm. data built HDCytoData package, available Bioconductor can downloaded following command: load PhenoGraph data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s. also add lines dplyr code clean column names perform standard arcsinh transformation. Thus, can see levine tof_tbl 265627 cells (one row) 40 pieces information cell (one column).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") levine <-     HDCytoData::Levine_32dim_flowSet() |>     as_tof_tbl() |>     # a bit of data cleaning     dplyr::mutate(population_id = as.character(population_id)) |>     dplyr::rename_with(         .fn = \\(x) stringr::str_to_lower(stringr::str_remove(x, \"\\\\|.+\"))     ) |>     dplyr::mutate(dplyr::across(c(file_number, population_id), as.character)) |>     # arcsinh transformation     tof_preprocess(         channel_cols =             c(-time, -cell_length, -event_number, -file_number, -population_id)     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"detect-low-expression-i-e--potentially-failed-channels-with-tof_assess_channels","dir":"Articles","previous_headings":"","what":"Detect low-expression (i.e. potentially failed) channels with tof_assess_channels()","title":"Quality control","text":"data collection, might wonder channels include downstream analyses. particular, might want exclude channels positive values, situation indicates antibody may failed, signal particular channel may weak detected. , can use tof_assess_channels(), verb calculates many cells negative (.e. use-specified threshold, negative_threshold) channel flags channels user-specified proportion negative cells (negative_proportion_flag). levine dataset, look markers 97.5% cells threshold 5 ion counts: can see two channels 97.5% cells dataset 5 counts. given experiment, might expected (.e. marker expressed rare cell population) unexpected (marker expressed many cells). case, can visualize marker negative cells manually inspect (recommend flagged channels).  case, looks like small population cells slightly positive cd14, simply measurement noise/nonspecific binding antibody. user whether include cd14 downstream analyses.","code":"# convert 5 counts to asinh value with a cofactor of 5 threshold <- asinh(5 / 5)  levine |>     tof_assess_channels(         negative_threshold = threshold,         negative_proportion_flag = 0.975     ) #> # A tibble: 38 × 3 #>    channel negative_proportion flagged_channel #>    <chr>                 <dbl> <lgl>           #>  1 cd14                  0.988 TRUE            #>  2 cd133                 0.975 TRUE            #>  3 cd117                 0.969 FALSE           #>  4 cd16                  0.967 FALSE           #>  5 flt3                  0.960 FALSE           #>  6 cd15                  0.940 FALSE           #>  7 cd41                  0.923 FALSE           #>  8 cd34                  0.909 FALSE           #>  9 cd61                  0.890 FALSE           #> 10 cd33                  0.885 FALSE           #> # ℹ 28 more rows levine |>     tof_plot_cells_density(marker_col = cd14)"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"identify-time-periods-of-abnormally-low-or-high-flow-rate-during-data-acquisition-using-tof_assess_flow_rate","dir":"Articles","previous_headings":"","what":"Identify time periods of abnormally low or high flow rate during data acquisition using tof_assess_flow_rate()","title":"Quality control","text":"Large changes flow rate cytometer can impact quality signal acquired data collection: example, abnormally low flow rates can caused partial occlusions cytometer’s flow cell, leading debris air infiltration cytometer’s microfluidics system. Thus, can useful perform quality control step explicitly interrogates flow rate course cytometry experiment order flag cells collected unusually high low rates acquisition. , {tidytof} provides tof_assess_flow_rate(), function implements simplified version FlowAI’s flow rate analysis. short, relative flow rates timestep cytometry experiment calculated, outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged. size timesteps user-defined parameter calculation, significance level (0 1) within t-distribution determines anomalous time step’s flow rate must cells flagged. can apply tof_assess_flow_rate() levine dataset , using  result , can see last several timesteps flagged potentially low flow rates. decision include exclude cells analyses left user. group_cols argument can also used analyze flow rates samples, patients, mass cytometry barcode plates, etc. separately.","code":"levine |>     tof_assess_flow_rate(         time_col = time,         num_timesteps = 200,         # flag timepoints in which flow rates are high or low at a signicance level         # of p = 0.01         alpha_threshold = 0.01,         # plot the number of cells in each timestep, and whether or not the         # rates were flagged as too high or too low         visualize = TRUE     ) levine |>     tof_assess_flow_rate(         time_col = time,         # analyze two files in the levine dataset separately         group_cols = file_number,         alpha_threshold = 0.01,         visualize = TRUE     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"flag-cells-that-are-unusually-far-from-the-centroid-of-a-cluster-to-which-they-have-been-assigned-with-tof_assess_clusters_distance","dir":"Articles","previous_headings":"","what":"Flag cells that are unusually far from the centroid of a cluster to which they have been assigned with tof_assess_clusters_distance()","title":"Quality control","text":"using favorite clustering algorithm define cell subpopulations (example, using tof_cluster()), may wonder well clustering procedure worked. example, may clusters contain outliers - , cells less similar cells cluster typical. detect cells, tidytof provides tof_assess_clusters_distance() verb, computes Mahalanobis distance cell centroid cluster assigned. , computes z-score mahalanobis distances cells cluster flags cells z-score user-specified threshold. Altogether, procedure flags cells unusually far cluster centroid - .e. candidate outliers. demonstrate use tof_assess_clusters_distance() simulated data. simulate data 3 clusters, large population cells “truly” belong cluster well small population outliers cells erroneously assigned cluster. following plots visualize simulated data described :   Using dataset, see tof_assess_clusters_distance() can successfully flag majority outlier cells cluster.","code":"set.seed(2020L)  # simulate large population of cells that truly belong in their assigned cluster sim_data_base <-     dplyr::tibble(         cd45 = c(rnorm(n = 600), rnorm(n = 500, mean = -4)),         cd38 =             c(                 rnorm(n = 100, sd = 0.5),                 rnorm(n = 500, mean = -3),                 rnorm(n = 500, mean = 8)             ),         cd34 =             c(                 rnorm(n = 100, sd = 0.2, mean = -10),                 rnorm(n = 500, mean = 4),                 rnorm(n = 500, mean = 60)             ),         cd19 = c(rnorm(n = 100, sd = 0.3, mean = 10), rnorm(n = 1000)),         cluster_id = c(rep(\"a\", 100), rep(\"b\", 500), rep(\"c\", 500)),         dataset = \"non-outlier\"     )  # simulate outlier cells that do not belong in their assigned cluster sim_data_outlier <-     dplyr::tibble(         cd45 = c(rnorm(n = 10), rnorm(50, mean = 3), rnorm(n = 50, mean = -12)),         cd38 =             c(                 rnorm(n = 10, sd = 0.5),                 rnorm(n = 50, mean = -10),                 rnorm(n = 50, mean = 10)             ),         cd34 =             c(                 rnorm(n = 10, sd = 0.2, mean = -15),                 rnorm(n = 50, mean = 15),                 rnorm(n = 50, mean = 70)             ),         cd19 = c(rnorm(n = 10, sd = 0.3, mean = 19), rnorm(n = 100)),         cluster_id = c(rep(\"a\", 10), rep(\"b\", 50), rep(\"c\", 50)),         dataset = \"outlier\"     )  # bind simulated data together sim_data <- bind_rows(sim_data_base, sim_data_outlier) sim_data |>     tof_plot_cells_embedding(color_col = cluster_id) sim_data |>     tof_plot_cells_embedding(color_col = dataset) sim_data |>     tof_assess_clusters_distance(         cluster_col = cluster_id,         # flag cells with a mahalanobis distance z-score over 3         z_threshold = 3,         augment = TRUE     ) |>     # visualize result as above     dplyr::select(-dplyr::starts_with(\".mahala\"), -z_score) |>     dplyr::mutate(flagged_cell = as.character(flagged_cell)) |>     tof_plot_cells_embedding(color_col = flagged_cell) +     scale_fill_manual(values = tof_generate_palette(num_colors = 2))"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"flag-cells-whose-cluster-assignment-is-ambiguous-with-tof_assess_clusters_entropy","dir":"Articles","previous_headings":"","what":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","title":"Quality control","text":"may also wish evaluate clustering result based cell’s absolute distance centroid cluster assigned, based relative distances cell cluster centroids. , order confident cell’s cluster assignment, ideally want cell close centroid cluster assigned, relatively distant clusters. contrasts scenario cell might similarly close centroids 2-3 clusters, case might think cell “ambiguous” phenotype, phenotype intermediate clusters clustering algorithm identified. flag “ambiguous” clusters, {tidytof} provides tof_assess_clusters_entropy() verb. tof_assess_clusters_entropy() computes entropy L1-scaled mahalanobis distance vector (.e. mahalanobis distance cell centroids clusters dataset) - entropy low (close 0) confident cell’s cluster assignment, high (near 1) equally close multiple cluster centroids. demonstrate use function simulated data levine dataset .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"simulated-data","dir":"Articles","previous_headings":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","what":"Simulated data","title":"Quality control","text":"First, simulate fake dataset 3000 cells 4 channels. simulated dataset, two well-defined clusters (“b” “c”) dispersed cluster intermediate others (“”). data visualized :  dataset, can imagine first analysis approach might involve clustering cells 2 distinct clusters. data simulated, already know number clusters small - can calculating entropy cells resulting clusters help us realize without prior knowledge? check, can use tof_assess_clusters_entropy():   plots , can see cells middle 2 k-means clusters (correspond well ground-truth clusters “b” “c” ) high entropy values, whereas cells closer one centroids low entropy values. can also see tof_assess_clusters_entropy() flags cells potentially anomalous (.e. intermediate phenotype two clusters identified) entropy values 75th percentile (user-specified parameter) entropy values dataset. user wish recluster dataset, filter anomalous cells, processing steps.  can see , expected, intermediate cluster (“”) higher entropies either distinct clusters (“b” “c”).","code":"sim_data <-     dplyr::tibble(         cd45 =             c(                 rnorm(n = 1000, sd = 2),                 rnorm(n = 1000, mean = 2),                 rnorm(n = 1000, mean = -2)             ),         cd38 =             c(                 rnorm(n = 1000, sd = 2),                 rnorm(n = 1000, mean = 2),                 rnorm(n = 1000, mean = -2)             ),         cd34 =             c(                 rnorm(n = 1000, sd = 2),                 rnorm(n = 1000, mean = 2),                 rnorm(n = 1000, mean = -2)             ),         cd19 =             c(                 rnorm(n = 1000, sd = 2),                 rnorm(n = 1000, mean = 2),                 rnorm(n = 1000, mean = -2)             ),         cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))     ) sim_data |>     tof_reduce_dimensions(method = \"pca\") |>     tof_plot_cells_embedding(         embedding_cols = c(.pc1, .pc2),         color_col = cluster_id     ) set.seed(17L)  entropy_result <-     sim_data |>     # cluster into 2 clusters     tof_cluster(         num_clusters = 2,         method = \"kmeans\"     ) |>     # calculate the entropy of all cells     tof_assess_clusters_entropy(         cluster_col = .kmeans_cluster,         marker_cols = starts_with(\"cd\"),         entropy_quantile = 0.8,         augment = TRUE     )  # plot the clusters in PCA space entropy_result |>     select(-starts_with(\".mahala\"), -flagged_cell) |>     tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>     tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = .kmeans_cluster) # show the entropy values for each cell entropy_result |>     select(-starts_with(\".mahala\"), -flagged_cell) |>     tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>     tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = entropy) +     scale_fill_viridis_c() entropy_result |>     select(-starts_with(\".mahala\")) |>     tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>     tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = flagged_cell) +     scale_fill_viridis_d() entropy_result |>     ggplot(aes(x = entropy, fill = cluster_id)) +     geom_density(alpha = 0.4) +     theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"real-data","dir":"Articles","previous_headings":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","what":"Real data","title":"Quality control","text":"can also apply tof_assess_clusters_entropy() dataset derived levine data. Suppose take 5 largest clusters levine save result small_levine tof_tbl. , can perturb dataset replacing labels cells smallest cluster (cluster 9) random labels. effectively creates population cells dataset whose “true” cluster label absent. scenario, expect cells perturbed cluster relatively distant remaining clusters, whereas unperturbed cells relatively close cluster centroid (correct centroid). Thus, can test tof_assess_clusters_entropy() successfully flags cells perturbed cluster relative others: plot , can see cells cluster 9 larger entropy values cells clusters, expected.  Similarly, can see majority cells 9 successfully flagged tof_assess_clusters_entropy() using entropy quantile threshold 0.9. Conversely, cells cluster (cluster 15) flagged.","code":"clusters_to_keep <-     levine |>     dplyr::count(population_id) |>     dplyr::slice_max(order_by = n, n = 5L) |>     dplyr::arrange(n) |>     pull(population_id)  smallest_cluster <- clusters_to_keep[1] largest_cluster <- clusters_to_keep[[length(clusters_to_keep)]]  small_levine <-     levine |>     dplyr::filter(population_id %in% clusters_to_keep) # perform the perturbation small_levine <-     small_levine |>     dplyr::mutate(         new_population_id =             dplyr::if_else(                 population_id %in% smallest_cluster,                 sample(                     clusters_to_keep[-which(clusters_to_keep %in% smallest_cluster)],                     size = nrow(small_levine),                     replace = TRUE                 ),                 population_id             )     )  # perform the entropy assessment entropy_levine <-     small_levine |>     tof_assess_clusters_entropy(         cluster_col = new_population_id,         marker_cols = starts_with(\"cd\"),         augment = TRUE     ) entropy_levine |>     mutate(population_id = fct_reorder(population_id, entropy)) |>     tof_plot_cells_density(         marker_col = entropy,         group_col = population_id,         use_ggridges = TRUE,         scale = 0.1     ) +     ggplot2::theme(legend.position = \"none\") +     ggplot2::labs(x = \"Entropy\", y = \"Cluster ID\") entropy_levine |>     mutate(flagged_cell = entropy > quantile(entropy, prob = 0.9)) |>     dplyr::count(population_id, flagged_cell) |>     group_by(population_id) |>     mutate(prop = n / sum(n)) |>     ungroup() |>     dplyr::filter(flagged_cell) #> # A tibble: 2 × 4 #>   population_id flagged_cell     n   prop #>   <chr>         <lgl>        <int>  <dbl> #> 1 15            TRUE         12888 0.0798 #> 2 9             TRUE         11666 0.706"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Quality control","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] HDCytoData_1.24.0           flowCore_2.16.0             #>  [3] SummarizedExperiment_1.34.0 Biobase_2.64.0              #>  [5] GenomicRanges_1.56.1        GenomeInfoDb_1.40.1         #>  [7] IRanges_2.38.1              S4Vectors_0.42.1            #>  [9] MatrixGenerics_1.16.0       matrixStats_1.3.0           #> [11] ExperimentHub_2.12.0        AnnotationHub_3.12.0        #> [13] BiocFileCache_2.12.0        dbplyr_2.5.0                #> [15] BiocGenerics_0.50.0         forcats_1.0.0               #> [17] ggplot2_3.5.1               dplyr_1.1.4                 #> [19] tidytof_0.99.8              #>  #> loaded via a namespace (and not attached): #>   [1] jsonlite_1.8.8          shape_1.4.6.1           magrittr_2.0.3          #>   [4] farver_2.1.2            rmarkdown_2.28          fs_1.6.4                #>   [7] zlibbioc_1.50.0         ragg_1.3.2              vctrs_0.6.5             #>  [10] memoise_2.0.1           htmltools_0.5.8.1       S4Arrays_1.4.1          #>  [13] curl_5.2.1              SparseArray_1.4.8       sass_0.4.9              #>  [16] parallelly_1.38.0       bslib_0.8.0             htmlwidgets_1.6.4       #>  [19] desc_1.4.3              lubridate_1.9.3         cachem_1.1.0            #>  [22] igraph_2.0.3            mime_0.12               lifecycle_1.0.4         #>  [25] iterators_1.0.14        pkgconfig_2.0.3         Matrix_1.7-0            #>  [28] R6_2.5.1                fastmap_1.2.0           GenomeInfoDbData_1.2.12 #>  [31] future_1.34.0           digest_0.6.37           colorspace_2.1-1        #>  [34] AnnotationDbi_1.66.0    textshaping_0.4.0       RSQLite_2.3.7           #>  [37] labeling_0.4.3          filelock_1.0.3          cytolib_2.16.0          #>  [40] fansi_1.0.6             yardstick_1.3.1         timechange_0.3.0        #>  [43] httr_1.4.7              polyclip_1.10-7         abind_1.4-5             #>  [46] compiler_4.4.1          bit64_4.0.5             withr_3.0.1             #>  [49] doParallel_1.0.17       viridis_0.6.5           DBI_1.2.3               #>  [52] highr_0.11              ggforce_0.4.2           MASS_7.3-60.2           #>  [55] lava_1.8.0              rappdirs_0.3.3          DelayedArray_0.30.1     #>  [58] tools_4.4.1             future.apply_1.11.2     nnet_7.3-19             #>  [61] glue_1.7.0              grid_4.4.1              generics_0.1.3          #>  [64] recipes_1.1.0           gtable_0.3.5            tzdb_0.4.0              #>  [67] class_7.3-22            tidyr_1.3.1             data.table_1.15.4       #>  [70] hms_1.1.3               tidygraph_1.3.1         utf8_1.2.4              #>  [73] XVector_0.44.0          ggrepel_0.9.5           BiocVersion_3.19.1      #>  [76] foreach_1.5.2           pillar_1.9.0            stringr_1.5.1           #>  [79] RcppHNSW_0.6.0          splines_4.4.1           tweenr_2.0.3            #>  [82] lattice_0.22-6          survival_3.6-4          bit_4.0.5               #>  [85] RProtoBufLib_2.16.0     tidyselect_1.2.1        Biostrings_2.72.1       #>  [88] knitr_1.48              gridExtra_2.3           xfun_0.47               #>  [91] graphlayouts_1.1.1      hardhat_1.4.0           timeDate_4032.109       #>  [94] stringi_1.8.4           UCSC.utils_1.0.0        yaml_2.3.10             #>  [97] evaluate_0.24.0         codetools_0.2-20        ggraph_2.2.1            #> [100] tibble_3.2.1            BiocManager_1.30.24     cli_3.6.3               #> [103] rpart_4.1.23            systemfonts_1.1.0       munsell_0.5.1           #> [106] jquerylib_0.1.4         Rcpp_1.0.13             globals_0.16.3          #> [109] png_0.1-8               parallel_4.4.1          pkgdown_2.1.0           #> [112] gower_1.0.1             readr_2.1.5             blob_1.2.4              #> [115] listenv_0.9.1           glmnet_4.1-8            viridisLite_0.4.2       #> [118] ipred_0.9-15            ggridges_0.5.6          scales_1.3.0            #> [121] prodlim_2024.06.25      purrr_1.0.2             crayon_1.5.3            #> [124] rlang_1.1.4             KEGGREST_1.44.1"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files “phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-     tidytof_example_data(\"phenograph\") %>%     tof_read_data()  phenograph %>%     class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%     tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-     phenograph %>%     # mutate the input tof_tbl     mutate(         PhenoGraph = as.character(PhenoGraph),         Condition = as.character(Condition)     )  phenograph %>%     # use dplyr's select method to show     # that the columns have been changed     select(where(is.character)) #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # ℹ 296 more rows phenograph %>%     class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%     tof_read_data() %>%     tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble # to tof_read_data phenograph_panel <-     phenograph %>%     tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%     tof_read_data(panel_info = phenograph_panel) %>%     tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name  phenograph_cluster    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>        <chr>                <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGra… cluster1           -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGra… cluster1            1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGra… cluster1            2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGra… cluster1            0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # ℹ 2,996 more rows #> # ℹ 16 more variables: cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, #> #   cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, #> #   pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, #> #   prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%     tof_write_data(         group_cols = phenograph_cluster,         out_path = my_path,         format = \"fcs\"     ) phenograph_data %>%     distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%     # create a variable representing if a cell is above or below     # the median expression level of pstat5     mutate(         expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")     ) %>%     tof_write_data(         group_cols = c(phenograph_cluster, expression_group),         out_path = my_path,         format = \"fcs\"     ) phenograph_data %>%     mutate(         expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")     ) %>%     distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Reading and writing data","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4    tidytof_0.99.8 #>  #> loaded via a namespace (and not attached): #>   [1] gridExtra_2.3       rlang_1.1.4         magrittr_2.0.3      #>   [4] matrixStats_1.3.0   compiler_4.4.1      systemfonts_1.1.0   #>   [7] vctrs_0.6.5         stringr_1.5.1       crayon_1.5.3        #>  [10] pkgconfig_2.0.3     shape_1.4.6.1       fastmap_1.2.0       #>  [13] ggraph_2.2.1        utf8_1.2.4          rmarkdown_2.28      #>  [16] prodlim_2024.06.25  tzdb_0.4.0          ragg_1.3.2          #>  [19] bit_4.0.5           purrr_1.0.2         xfun_0.47           #>  [22] glmnet_4.1-8        cachem_1.1.0        jsonlite_1.8.8      #>  [25] recipes_1.1.0       tweenr_2.0.3        parallel_4.4.1      #>  [28] R6_2.5.1            bslib_0.8.0         stringi_1.8.4       #>  [31] parallelly_1.38.0   rpart_4.1.23        lubridate_1.9.3     #>  [34] jquerylib_0.1.4     Rcpp_1.0.13         iterators_1.0.14    #>  [37] knitr_1.48          future.apply_1.11.2 readr_2.1.5         #>  [40] flowCore_2.16.0     Matrix_1.7-0        splines_4.4.1       #>  [43] nnet_7.3-19         igraph_2.0.3        timechange_0.3.0    #>  [46] tidyselect_1.2.1    yaml_2.3.10         viridis_0.6.5       #>  [49] timeDate_4032.109   doParallel_1.0.17   codetools_0.2-20    #>  [52] listenv_0.9.1       lattice_0.22-6      tibble_3.2.1        #>  [55] Biobase_2.64.0      withr_3.0.1         evaluate_0.24.0     #>  [58] future_1.34.0       desc_1.4.3          survival_3.6-4      #>  [61] polyclip_1.10-7     pillar_1.9.0        foreach_1.5.2       #>  [64] stats4_4.4.1        generics_0.1.3      vroom_1.6.5         #>  [67] RcppHNSW_0.6.0      S4Vectors_0.42.1    hms_1.1.3           #>  [70] ggplot2_3.5.1       munsell_0.5.1       scales_1.3.0        #>  [73] globals_0.16.3      class_7.3-22        glue_1.7.0          #>  [76] tools_4.4.1         data.table_1.15.4   gower_1.0.1         #>  [79] fs_1.6.4            graphlayouts_1.1.1  tidygraph_1.3.1     #>  [82] grid_4.4.1          yardstick_1.3.1     tidyr_1.3.1         #>  [85] RProtoBufLib_2.16.0 ipred_0.9-15        colorspace_2.1-1    #>  [88] ggforce_0.4.2       cli_3.6.3           textshaping_0.4.0   #>  [91] fansi_1.0.6         cytolib_2.16.0      viridisLite_0.4.2   #>  [94] lava_1.8.0          gtable_0.3.5        sass_0.4.9          #>  [97] digest_0.6.37       BiocGenerics_0.50.0 ggrepel_0.9.5       #> [100] htmlwidgets_1.6.4   farver_2.1.2        memoise_2.0.1       #> [103] htmltools_0.5.8.1   pkgdown_2.1.0       lifecycle_1.0.4     #> [106] hardhat_1.4.0       bit64_4.0.5         MASS_7.3-60.2"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"GETTING STARTED with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first pipe (|>), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"GETTING STARTED with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied high-dimensional cytometry data tof_metacluster() agglomerates clusters smaller number metaclusters tof_analyze_abundance() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_analyze_expression() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"GETTING STARTED with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (|>) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers follow rules tidyselection tidyverse verbs like dplyr::select() tidyr::pivot_longer(). Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data |>     tof_preprocess() |>     tof_cluster(         cluster_cols = starts_with(\"cd\"), # column specification         method = \"phenograph\", # method specification,     ) |>     tof_metacluster(         cluster_col = .phenograph_cluster, # column specification         num_metaclusters = 4, # method specification         method = \"kmeans\" # method specification     ) |>     tof_downsample(         group_cols = .kmeans_metacluster, # column specification         num_cells = 200, # method specification         method = \"constant\" # method specification     ) |>     tof_plot_cells_layout(         knn_cols = starts_with(\"cd\"), # column specification         color_col = .kmeans_metacluster, # column specification         num_neighbors = 7L, # method specification         node_size = 2L # method specification     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"GETTING STARTED with tidytof","text":"tidytof verbs can used combination one another using pipe (|>) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data |>     # step 1     tof_preprocess() |>     # step 2     tof_cluster(         cluster_cols = starts_with(\"cd\"),         method = \"phenograph\",         # num_metaclusters = 4L,         seed = 2020L     ) |>     # step 3     tof_downsample(         group_cols = .phenograph_cluster,         method = \"constant\",         num_cells = 400     ) |>     # step 4     tof_reduce_dimensions(method = \"tsne\") |>     # step 5     tof_plot_cells_embedding(         embedding_cols = contains(\"tsne\"),         color_col = .phenograph_cluster     ) +     ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"GETTING STARTED with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze high-dimensional cytometry kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every high-dimensional cytometry analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"where-to-go-next","dir":"Articles","previous_headings":"","what":"Where to go next","title":"GETTING STARTED with tidytof","text":"tidytof includes multiple vignettes cover different components prototypical high-dimensional cytometry data analysis pipeline. can access vignettes running following: learn basics, recommend visiting vignettes following order start smalle (cell-level) operations work way larger (cluster- sample-level) operations: Reading writing data Quality control Preprocessing Downsampling Dimensionality reduction Clustering metaclustering Differential discovery analysis Feature extraction Modeling can also read academic papers describing {tidytof} /larger tidyomics initiative tidytof part. can also visit tidytof website.","code":"browseVignettes(package = \"tidytof\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"GETTING STARTED with tidytof","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] tidytof_0.99.8 #>  #> loaded via a namespace (and not attached): #>   [1] gridExtra_2.3       rlang_1.1.4         magrittr_2.0.3      #>   [4] matrixStats_1.3.0   compiler_4.4.1      systemfonts_1.1.0   #>   [7] vctrs_0.6.5         stringr_1.5.1       pkgconfig_2.0.3     #>  [10] shape_1.4.6.1       fastmap_1.2.0       labeling_0.4.3      #>  [13] ggraph_2.2.1        utf8_1.2.4          rmarkdown_2.28      #>  [16] prodlim_2024.06.25  tzdb_0.4.0          ragg_1.3.2          #>  [19] purrr_1.0.2         xfun_0.47           glmnet_4.1-8        #>  [22] cachem_1.1.0        jsonlite_1.8.8      recipes_1.1.0       #>  [25] highr_0.11          tweenr_2.0.3        parallel_4.4.1      #>  [28] R6_2.5.1            bslib_0.8.0         stringi_1.8.4       #>  [31] parallelly_1.38.0   rpart_4.1.23        lubridate_1.9.3     #>  [34] jquerylib_0.1.4     Rcpp_1.0.13         iterators_1.0.14    #>  [37] knitr_1.48          future.apply_1.11.2 readr_2.1.5         #>  [40] flowCore_2.16.0     Matrix_1.7-0        splines_4.4.1       #>  [43] nnet_7.3-19         igraph_2.0.3        timechange_0.3.0    #>  [46] tidyselect_1.2.1    yaml_2.3.10         viridis_0.6.5       #>  [49] timeDate_4032.109   doParallel_1.0.17   codetools_0.2-20    #>  [52] listenv_0.9.1       lattice_0.22-6      tibble_3.2.1        #>  [55] Biobase_2.64.0      withr_3.0.1         Rtsne_0.17          #>  [58] evaluate_0.24.0     future_1.34.0       desc_1.4.3          #>  [61] survival_3.6-4      polyclip_1.10-7     pillar_1.9.0        #>  [64] foreach_1.5.2       stats4_4.4.1        generics_0.1.3      #>  [67] RcppHNSW_0.6.0      S4Vectors_0.42.1    hms_1.1.3           #>  [70] ggplot2_3.5.1       munsell_0.5.1       scales_1.3.0        #>  [73] globals_0.16.3      class_7.3-22        glue_1.7.0          #>  [76] tools_4.4.1         data.table_1.15.4   gower_1.0.1         #>  [79] fs_1.6.4            graphlayouts_1.1.1  tidygraph_1.3.1     #>  [82] grid_4.4.1          yardstick_1.3.1     tidyr_1.3.1         #>  [85] RProtoBufLib_2.16.0 ipred_0.9-15        colorspace_2.1-1    #>  [88] ggforce_0.4.2       cli_3.6.3           textshaping_0.4.0   #>  [91] fansi_1.0.6         cytolib_2.16.0      viridisLite_0.4.2   #>  [94] lava_1.8.0          dplyr_1.1.4         gtable_0.3.5        #>  [97] sass_0.4.9          digest_0.6.37       BiocGenerics_0.50.0 #> [100] ggrepel_0.9.5       htmlwidgets_1.6.4   farver_2.1.2        #> [103] memoise_2.0.1       htmltools_0.5.8.1   pkgdown_2.1.0       #> [106] lifecycle_1.0.4     hardhat_1.4.0       MASS_7.3-60.2"},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T, Davis K, Nolan G (2024). tidytof: user-friendly framework scalable reproducible high-dimensional cytometry data analysis. doi:10.18129/B9.bioc.tidytof, https://github.com/keyes-timothy/tidytof/tidytof - R package version 0.99.8, http://www.bioconductor.org/packages/tidytof. Keyes, J. T, Koladiya, Abhishek, Lo, Yu-Chen, Nolan, P. G, Davis, L. K (2023). “tidytof: user-friendly framework scalable reproducible high-dimensional cytometry data analysis.” Bioinformatics Advances, 3(1). doi:10.1093/bioadv/vbad071, https://academic.oup.com/bioinformaticsadvances/article/3/1/vbad071/7192984.","code":"@Manual{,   title = {tidytof: a user-friendly framework for scalable and reproducible high-dimensional cytometry data analysis},   author = {Timothy Keyes and Kara Davis and Garry Nolan},   year = {2024},   url = {http://www.bioconductor.org/packages/tidytof},   note = {https://github.com/keyes-timothy/tidytof/tidytof - R package version 0.99.8},   doi = {10.18129/B9.bioc.tidytof}, } @Article{,   title = {tidytof: a user-friendly framework for scalable and reproducible high-dimensional cytometry data analysis},   author = {{Keyes} and Timothy J. and {Koladiya} and {Abhishek} and {Lo} and {Yu-Chen} and {Nolan} and Garry P. and {Davis} and Kara L.},   year = {2023},   journal = {Bioinformatics Advances},   volume = {3},   number = {1},   doi = {10.1093/bioadv/vbad071},   url = {https://academic.oup.com/bioinformaticsadvances/article/3/1/vbad071/7192984}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-reproducible-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis high-dimensional cytometry data (.e. mass cytometry, full-spectrum flow cytometry, sequence-based cytometry). Specifically, tidytof provides easy--use pipeline handling high-dimensional cytometry data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first pipe (|>), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels cytometry data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if (!require(devtools)) install.packages(\"devtools\") devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if (!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if (!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing cytometry data local machine), can use tof_read_data read cytometry data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing cytometry data individual experiments, cytometry users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one cytometry channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #>  [1] \"aml\"                  \"ddpr\"                 \"ddpr_metadata.csv\"    #>  [4] \"mix\"                  \"mix2\"                 \"phenograph\"           #>  [7] \"phenograph_csv\"       \"scaffold\"             \"statistical_scaffold\" #> [10] \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/tidytof/extdata/phenograph\" phenograph <-     tidytof_example_data(\"phenograph\") |>     tof_read_data()  phenograph |>     class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-     phenograph |>     # mutate the input tof_tbl     mutate(         PhenoGraph = as.character(PhenoGraph),         Condition = as.character(Condition)     )  phenograph |>     # use dplyr's select method to show that the columns have been changed     select(where(is.character)) |>     head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph |>     class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph |>     tof_get_panel() |>     head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed cytometry data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph |>     select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) |>     head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-     phenograph |>     tof_preprocess()  # inspect new values phenograph |>     select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) |>     head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"Often, cytometry experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"data(phenograph_data)  phenograph_data |>     count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data |>     # downsample     tof_downsample(         method = \"constant\",         group_cols = phenograph_cluster,         num_cells = 200     ) |>     # count the number of downsampled cells in each cluster     count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data |>     # downsample     tof_downsample(         method = \"prop\",         group_cols = phenograph_cluster,         prop_cells = 0.5     ) |>     # count the number of downsampled cells in each cluster     count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data |>     # preprocess all numeric columns in the dataset     tof_preprocess(undo_noise = FALSE) |>     # make a scatterplot     ggplot(aes(x = cd34, y = cd38)) +     geom_point(alpha = 0.5) +     scale_x_continuous(limits = c(NA, 1.5)) +     scale_y_continuous(limits = c(NA, 4)) +     theme_bw() phenograph_data |>     tof_preprocess(undo_noise = FALSE) |>     tof_downsample(         density_cols = c(cd34, cd38),         target_prop_cells = 0.25,         method = \"density\",     ) |>     ggplot(aes(x = cd34, y = cd38)) +     geom_point(alpha = 0.5) +     scale_x_continuous(limits = c(NA, 1.5)) +     scale_y_continuous(limits = c(NA, 4)) +     theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple cytometry runs.","code":"# when copying and pasting this code, feel free to change this path # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data |>     tof_write_data(         group_cols = phenograph_cluster,         out_path = my_path,         format = \"fcs\"     ) phenograph_data |>     # create a variable representing if a cell is above or below the median     # expression level of pstat5     mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) |>     tof_write_data(         group_cols = c(phenograph_cluster, expression_group),         out_path = my_path,         format = \"fcs\"     )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-     phenograph_data |>     tof_preprocess() |>     tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters |>     select(sample_name, .flowsom_metacluster, everything()) |>     head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacluster phenograph_cluster    cd19 cd11b    cd34 #>   <chr>            <chr>                <chr>                <dbl> <dbl>   <dbl> #> 1 H1_PhenoGraph_c… 13                   cluster1           -0.0336 2.46   0.608  #> 2 H1_PhenoGraph_c… 18                   cluster1            0.324  0.856 -0.116  #> 3 H1_PhenoGraph_c… 10                   cluster1            0.532  2.67   0.909  #> 4 H1_PhenoGraph_c… 8                    cluster1            0.0163 2.97   0.0725 #> 5 H1_PhenoGraph_c… 13                   cluster1            0.144  2.98   0.128  #> 6 H1_PhenoGraph_c… 8                    cluster1            0.742  3.41   0.336  #> # ℹ 20 more variables: cd45 <dbl>, cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, #> #   cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, #> #   cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, #> #   ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters |>     count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 23 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster3           12                     323 #>  2 cluster3           15                     318 #>  3 cluster2           3                      309 #>  4 cluster1           17                     234 #>  5 cluster2           2                      218 #>  6 cluster2           4                      206 #>  7 cluster1           8                      182 #>  8 cluster1           18                     167 #>  9 cluster1           9                      162 #> 10 cluster3           20                     162 #> # ℹ 13 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data |>     tof_preprocess() |>     tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) |>     head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 13                   #> 2 3                    #> 3 10                   #> 4 11                   #> 5 10                   #> 6 11"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-     phenograph_clusters |>     tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne |>     select(contains(\"tsne\")) |>     head() #> # A tibble: 6 × 2 #>   .tsne1 .tsne2 #>    <dbl>  <dbl> #> 1  -8.41   17.2 #> 2   1.91   13.6 #> 3  23.9    20.1 #> 4   4.79   22.3 #> 5  -4.99   22.4 #> 6  11.0    20.2 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne |>     ggplot(aes(x = .tsne1, y = .tsne2, fill = phenograph_cluster)) +     geom_point(shape = 21) +     theme_bw() +     labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne |>     ggplot(aes(x = .tsne1, y = .tsne2, fill = cd11b)) +     geom_point(shape = 21) +     scale_fill_viridis_c() +     theme_bw() +     labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_analyze_abundance-and-tof_analyze_expression","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_analyze_abundance and tof_analyze_expression","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many cytometry users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_analyze_abundance tof_analyze_expression verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_analyze_abundance verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_analyze_abundance depends slightly underlying statistical method used, details can found documentation tof_analyze_abundance_* function family member: tof_analyze_abundance_diffcyt tof_analyze_abundance_glmm tof_analyze_abundance_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_analyze_expression verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_analyze_expression() also depends underlying test used, can see result looks relatively similar output tof_analyze_abundance(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-     citrus_raw |>     as_tof_tbl(sep = \"_\") citrus_metadata <-     tibble(         file_name = as.character(flowCore::pData(citrus_raw)[[1]]),         sample_id = seq_along(file_name),         patient = str_extract(file_name, \"patient[:digit:]\"),         stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")     ) |>     mutate(         stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)     )  citrus_metadata |>     head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-     citrus_data |>     left_join(citrus_metadata, by = \"sample_id\") daa_result <-     citrus_data |>     tof_analyze_abundance(         cluster_col = population_id,         effect_col = stimulation,         group_cols = patient,         test_type = \"paired\",         method = \"ttest\"     )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-     citrus_data |>     mutate(population_id = as.character(population_id)) |>     left_join(         select(daa_result, population_id, significant, mean_fc),         by = \"population_id\"     ) |>     dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") |>     group_by(patient, stimulation) |>     mutate(prop = n / sum(n)) |>     ungroup() |>     pivot_wider(         names_from = stimulation,         values_from = c(prop, n),     ) |>     mutate(         diff = `prop_BCR-XL` - prop_Basal,         fc = `prop_BCR-XL` / prop_Basal,         population_id = fct_reorder(population_id, diff),         direction =             case_when(                 mean_fc > 1 & significant == \"*\" ~ \"increase\",                 mean_fc < 1 & significant == \"*\" ~ \"decrease\",                 TRUE ~ NA_character_             )     )  significance_data <-     plot_data |>     group_by(population_id, significant, direction) |>     summarize(diff = max(diff), fc = max(fc)) |>     ungroup()  plot_data |>     ggplot(aes(x = population_id, y = fc, fill = direction)) +     geom_violin(trim = FALSE) +     geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +     geom_point() +     geom_text(         aes(x = population_id, y = fc, label = significant),         data = significance_data,         size = 8,         nudge_x = 0.2,         nudge_y = 0.06     ) +     scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +     scale_fill_manual(         values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),         na.translate = FALSE     ) +     labs(         x = NULL,         y = \"Abundance fold-change (stimulated / basal)\",         fill = \"Effect\",         caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"     ) signaling_markers <-     c(         \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",         \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"     )  dea_result <-     citrus_data |>     tof_preprocess(channel_cols = any_of(signaling_markers)) |>     tof_analyze_expression(         cluster_col = population_id,         marker_cols = any_of(signaling_markers),         effect_col = stimulation,         group_cols = patient,         test_type = \"paired\",         method = \"ttest\"     )  dea_result |>     head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-     dea_result |>     tof_plot_clusters_volcano(         use_ggrepel = TRUE     )  volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"addition verbs operate single-cell data directly, tidytof implements functions aggregating single-cell measurements cluster- sample-level summary statistics can analyzed using variety statistical models.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing cytometry data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-     citrus_data |>     mutate(cluster = str_c(\"cluster\", population_id)) |>     tof_preprocess()  citrus_data |>     tof_extract_proportion(         cluster_col = cluster,         group_cols = c(patient, stimulation)     ) |>     head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # ℹ 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data |>     tof_extract_proportion(         cluster_col = cluster,         group_cols = c(patient, stimulation),         format = \"long\"     ) |>     head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data |>     tof_extract_central_tendency(         cluster_col = cluster,         group_cols = c(patient, stimulation),         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         central_tendency_function = mean     ) |>     head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          4.80                  0.0967 #> 2 patient1 Basal                           4.68                  0.765  #> 3 patient2 BCR-XL                          5.00                 -0.0579 #> 4 patient2 Basal                           4.88                  0.808  #> 5 patient3 BCR-XL                          5.04                 -0.0432 #> 6 patient3 Basal                           4.98                  0.745  #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, … citrus_data |>     tof_extract_threshold(         cluster_col = cluster,         group_cols = c(patient, stimulation),         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         threshold = 5     ) |>     head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_threshold` CD4_Nd145@cluster1_thre…¹ #>   <chr>    <chr>                                 <dbl>                     <dbl> #> 1 patient1 BCR-XL                                0.516                         0 #> 2 patient1 Basal                                 0.365                         0 #> 3 patient2 BCR-XL                                0.554                         0 #> 4 patient2 Basal                                 0.452                         0 #> 5 patient3 BCR-XL                                0.547                         0 #> 6 patient3 Basal                                 0.549                         0 #> # ℹ abbreviated name: ¹​`CD4_Nd145@cluster1_threshold` #> # ℹ 22 more variables: `CD20_Sm147@cluster1_threshold` <dbl>, #> #   `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, … # Earth-mover's distance citrus_data |>     tof_extract_emd(         cluster_col = cluster,         group_cols = patient,         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         emd_col = stimulation,         reference_level = \"Basal\"     ) |>     head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                   0.864                   2.47                  13.0  #> 2 patient2                   1.11                    7.05                  10.8  #> 3 patient3                   0.670                   6.23                  10.5  #> 4 patient4                   2.64                    5.86                   9.90 #> 5 patient5                   0.594                   7.56                   8.13 #> 6 patient6                   0.661                   4.77                   7.97 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_emd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_emd`, ³​`BCR-XL_CD20_Sm147@cluster3_emd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data |>     tof_extract_jsd(         cluster_col = cluster,         group_cols = patient,         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         jsd_col = stimulation,         reference_level = \"Basal\"     ) |>     head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                 0.0367                  0.0513                  0.347 #> 2 patient2                 0.00831                 0.168                   0.401 #> 3 patient3                 0.0104                  0.115                   0.357 #> 4 patient4                 0.0301                  0.135                   0.205 #> 5 patient5                 0.00911                 0.0789                  0.274 #> 6 patient6                 0.00972                 0.0346                  0.214 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_jsd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_jsd`, ³​`BCR-XL_CD20_Sm147@cluster3_jsd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, … citrus_data |>     tof_extract_features(         cluster_col = cluster,         group_cols = patient,         stimulation_col = stimulation,         lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),         signaling_cols = any_of(signaling_markers),         signaling_method = \"emd\",         basal_level = \"Basal\"     ) |>     head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-     \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-     readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) |>     dplyr::rename(patient_id = Patient_ID) |>     left_join(ddpr_metadata, by = \"patient_id\") |>     dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients |>     select(where(~ !is.numeric(.x))) |>     head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # ℹ 1 more variable: ddpr_risk <chr> ddpr_patients <-     ddpr_patients |>     # convert the relapse_status variable to a factor first,     # which is something we'll want for fitting the model later     # and create the time_to_event and event columns for survival modeling     mutate(         relapse_status = as.factor(relapse_status),         time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),         event = if_else(relapse_status == \"Yes\", 1, 0)     )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-     ddpr_patients |>     dplyr::filter(cohort == \"Training\")  ddpr_validation <-     ddpr_patients |>     dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training |>     dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-     ddpr_training |>     tof_split_data(         split_method = \"k-fold\",         num_cv_folds = 5,         strata = relapse_status     )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample |>     rsample::training() |>     head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1          3.06       0.583   0.00449     0.164       1.94     0.416 #> 2 UPN1-Rx       0.0395     0.618   0.0634      0.572       2.93     0.944 #> 3 UPN3          0.633      0.0234  0.0165      0.0327      2.25     0.226 #> 4 UPN8          0.951      0.958   0.161       0.556       3.18     0.556 #> 5 UPN10         0.00374    0.761   0.000696    0.829       3.19     0.886 #> 6 UPN10-Rx      0.00240    0.167   0.203       0.802       2.57     0.822 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample |>     rsample::testing() |>     head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 2 UPN6           5.62      0.550    0.00374    0.622       2.86     0.342 #> 3 UPN7           0.474     0.966    0.124      1.24        2.59     0.243 #> 4 UPN9          15.6       0.446    0.0445     0.163       2.86     0.434 #> 5 UPN12          0.0565    0.185    0.0115     0.142       2.49     0.254 #> 6 UPN17          1.40      1.52     0.0128     0.284       3.46     0.656 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-     training_split |>     tof_train_model(         predictor_cols = contains(\"Pop2\"),         response_col = relapse_status,         model_type = \"two-class\",         hyperparameter_grid = tof_create_grid(mixture_values = 1),         impute_missing_predictors = TRUE,         remove_zv_predictors = TRUE # often a smart decision     ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-05  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # ℹ 15 more rows class_predictions <-     class_mod |>     tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions |>     dplyr::mutate(         truth = ddpr_validation$relapse_status     ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-     class_mod |>     tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # ℹ 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod |>     tof_plot_model() +     labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-     class_mod |>     tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod |>     tof_plot_model(new_data = ddpr_validation) +     labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze cytometry kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. details design principles, check Getting Started tidytof vignette","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path |>     # step 1     tof_read_data() |>     # step 2     tof_preprocess() |>     # step 3     tof_cluster(method = \"phenograph\") |>     # step 4     tof_downsample(         group_cols = .phenograph_cluster,         num_cells = 100,         method = \"constant\"     ) |>     # step 5     tof_reduce_dimensions(perplexity = 50, method = \"tsne\") |>     # step 6     tof_plot_cells_embedding(         embedding_cols = starts_with(\".tsne\"),         color_col = .phenograph_cluster     )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_SingleCellExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","title":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","text":"Coerce object SingleCellExperiment Coerce tof_tbl SingleCellExperiment","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_SingleCellExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","text":"","code":"as_SingleCellExperiment(x, ...)  # S3 method for class 'tof_tbl' as_SingleCellExperiment(   x,   channel_cols = where(tof_is_numeric),   reduced_dimensions_cols,   metadata_cols = where(function(.x) !tof_is_numeric(.x)),   split_reduced_dimensions = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_SingleCellExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","text":"x tof_tbl ... Unused. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default numeric columns. reduced_dimensions_cols Unquoted column names representing columns contain dimensionality reduction embeddings, tSNE UMAP embeddings. Supports tidyselect helpers. metadata_cols Unquoted column names representing columns contain metadata samples cell collected. nothing specified, default non-numeric columns. split_reduced_dimensions boolean value indicating whether dimensionality results x split separate slots resulting SingleCellExperiment. FALSE (default), split performed reducedDims slot result single entry (\"tidytof_reduced_dimensions\"). TRUE, split performed reducedDims slot result 1-4 entries depending dimensionality reduction results present x (\"tidytof_pca\", \"tidytof_tsne\", \"tidytof_umap\", \"tidytof_reduced_dimensions\"). Note \"tidytof_reduced_dimensions\" include dimensionality reduction results named according tidytof's pca, umap, tsne conventions.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_SingleCellExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","text":"SingleCellExperiment SingleCellExperiment.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_SingleCellExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","text":"","code":"NULL #> NULL  NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object into a flowFrame — as_flowFrame","title":"Coerce an object into a flowFrame — as_flowFrame","text":"Coerce object flowFrame Coerce tof_tbl flowFrame","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object into a flowFrame — as_flowFrame","text":"","code":"as_flowFrame(x, ...)  # S3 method for class 'tof_tbl' as_flowFrame(x, ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object into a flowFrame — as_flowFrame","text":"x tof_tbl. ... Unused.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object into a flowFrame — as_flowFrame","text":"flowFrame flowFrame. Note non-numeric columns `x` removed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object into a flowFrame — as_flowFrame","text":"","code":"NULL #> NULL  NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object into a flowSet — as_flowSet","title":"Coerce an object into a flowSet — as_flowSet","text":"Coerce object flowSet Coerce tof_tbl flowSet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object into a flowSet — as_flowSet","text":"","code":"as_flowSet(x, ...)  # S3 method for class 'tof_tbl' as_flowSet(x, group_cols, ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object into a flowSet — as_flowSet","text":"x tof_tbl. ... Unused. group_cols Unquoted names columns `x` used group cells separate flowFrames. Supports tidyselect helpers. Defaults NULL (cells written single flowFrame).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object into a flowSet — as_flowSet","text":"flowSet flowSet. Note non-numeric columns `x` removed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object into a flowSet — as_flowSet","text":"","code":"NULL #> NULL  NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object into a SeuratObject — as_seurat","title":"Coerce an object into a SeuratObject — as_seurat","text":"Coerce object SeuratObject Coerce tof_tbl SeuratObject","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object into a SeuratObject — as_seurat","text":"","code":"as_seurat(x, ...)  # S3 method for class 'tof_tbl' as_seurat(   x,   channel_cols = where(tof_is_numeric),   reduced_dimensions_cols,   metadata_cols = where(function(.x) !tof_is_numeric(.x)),   split_reduced_dimensions = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object into a SeuratObject — as_seurat","text":"x tof_tbl ... Unused. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default numeric columns. reduced_dimensions_cols Unquoted column names representing columns contain dimensionality reduction embeddings, tSNE UMAP embeddings. Supports tidyselect helpers. metadata_cols Unquoted column names representing columns contain metadata samples cell collected. nothing specified, default non-numeric columns. split_reduced_dimensions boolean value indicating whether dimensionality results x split separate slots resulting SingleCellExperiment. FALSE (default), split performed reducedDims slot result single entry (\"tidytof_reduced_dimensions\"). TRUE, split performed reducedDims slot result 1-4 entries depending dimensionality reduction results present x (\"tidytof_pca\", \"tidytof_tsne\", \"tidytof_umap\", \"tidytof_reduced_dimensions\"). Note \"tidytof_reduced_dimensions\" include dimensionality reduction results named according tidytof's pca, umap, tsne conventions.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object into a SeuratObject — as_seurat","text":"SeuratObject SeuratObject.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_seurat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object into a SeuratObject — as_seurat","text":"","code":"NULL #> NULL  NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for class 'flowSet' as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data.frame","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data.frame","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/make_flowcore_annotated_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","title":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","text":"Make AnnotatedDataFrame needed flowFrame class","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/make_flowcore_annotated_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","text":"","code":"make_flowcore_annotated_data_frame(maxes_and_mins)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/make_flowcore_annotated_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","text":"maxes_and_mins data.frame containing information max min values channel saved flowFrame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/make_flowcore_annotated_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","text":"AnnotatedDataFrame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/make_flowcore_annotated_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"named character vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data.frame","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang :=, .data tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Objects exported from other packages — reexports","text":"See documentation object's original package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Objects exported from other packages — reexports","text":"","code":"# See examples in each object's original package NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform high-dimensional cytometry raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform high-dimensional cytometry raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1 / 5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","title":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_analyze_abundance_*` function family: tof_analyze_abundance_diffcyt, tof_analyze_abundance_glmm, tof_analyze_abundance_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","text":"","code":"tof_analyze_abundance(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_analyze_abundance_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","text":"tibble nested tibble containing differential abundance results chosen method. See tof_analyze_abundance_diffcyt, tof_analyze_abundance_glmm, tof_analyze_abundance_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"","code":"tof_analyze_abundance_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. high-dimensional cytometry experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"","code":"tof_analyze_abundance_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. high-dimensional cytometry experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"","code":"tof_analyze_abundance_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_analyze_abundance_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","title":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_analyze_expression_*` function family: tof_analyze_expression_diffcyt, tof_analyze_expression_lmm, tof_analyze_expression_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","text":"","code":"tof_analyze_expression(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_analyze_expression_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","text":"tibble nested tibble containing differential abundance results chosen method. See tof_analyze_expression_diffcyt, tof_analyze_expression_lmm, tof_analyze_expression_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"","code":"tof_analyze_expression_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. high-dimensional cytometry protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. high-dimensional cytometry experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"","code":"tof_analyze_expression_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. high-dimensional cytometry protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"","code":"tof_analyze_expression_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. high-dimensional cytometry protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_analyze_abundance_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"function adds additional column `tibble` `tof_tbl` allow users incorporate manual cell type labels clusters identified using unsupervised algorithms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"","code":"tof_annotate_clusters(tof_tibble, cluster_col, annotations)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` contains ids unsupervised cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. annotations data structure indicating annotate cluster id `cluster_col`. `annotations` can provided data.frame two columns (first name `cluster_col` contain unique cluster id; second can name contain character vector indicating manual annotation matched cluster id first column). `annotations` can also provided named character vector; case, entry `annotations` unique cluster id, names entry corresponding manual cluster annotation. See examples.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"`tof_tbl` number rows `tof_tibble` one additional column containing manual cluster annotations cell (character vector). `annotations` provided data.frame, new column name column containing cluster annotations `annotations`. `annotations` provided named character vector, new column named `{cluster_col}_annotation`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # using named character vector sim_data |>     tof_annotate_clusters(         cluster_col = cluster_id,         annotations = c(\"macrophage\" = \"a\", \"dendritic cell\" = \"b\")     ) #> # A tibble: 1,000 × 6 #>        cd45   cd38   cd34   cd19 cluster_id cluster_id_annotation #>       <dbl>  <dbl>  <dbl>  <dbl> <chr>      <chr>                 #>  1 -1.40    -0.337 -0.166  1.12  a          macrophage            #>  2  0.255   -0.216  0.120  0.400 a          macrophage            #>  3 -2.44     0.621 -0.662 -0.985 a          macrophage            #>  4 -0.00557 -1.28  -0.531 -0.503 a          macrophage            #>  5  0.622   -1.30  -0.301  0.987 a          macrophage            #>  6  1.15    -0.377 -0.602  2.19  a          macrophage            #>  7 -1.82     0.104 -0.318 -0.165 a          macrophage            #>  8 -0.247   -0.704  0.308 -0.686 a          macrophage            #>  9 -0.244    1.50   0.799  0.941 a          macrophage            #> 10 -0.283   -0.303  1.75  -0.164 a          macrophage            #> # ℹ 990 more rows  # using two-column data.frame annotation_data_frame <-     data.frame(         cluster_id = c(\"a\", \"b\"),         cluster_annotation = c(\"macrophage\", \"dendritic cell\")     )  sim_data |>     tof_annotate_clusters(         cluster_col = cluster_id,         annotations = annotation_data_frame     ) #> # A tibble: 1,000 × 6 #>        cd45   cd38   cd34   cd19 cluster_id cluster_annotation #>       <dbl>  <dbl>  <dbl>  <dbl> <chr>      <chr>              #>  1 -1.40    -0.337 -0.166  1.12  a          macrophage         #>  2  0.255   -0.216  0.120  0.400 a          macrophage         #>  3 -2.44     0.621 -0.662 -0.985 a          macrophage         #>  4 -0.00557 -1.28  -0.531 -0.503 a          macrophage         #>  5  0.622   -1.30  -0.301  0.987 a          macrophage         #>  6  1.15    -0.377 -0.602  2.19  a          macrophage         #>  7 -1.82     0.104 -0.318 -0.165 a          macrophage         #>  8 -0.247   -0.704  0.308 -0.686 a          macrophage         #>  9 -0.244    1.50   0.799  0.941 a          macrophage         #> 10 -0.283   -0.303  1.75  -0.164 a          macrophage         #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"Detect low-expression (.e. potentially failed) channels high-dimensional cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"","code":"tof_assess_channels(   tof_tibble,   channel_cols = where(tof_is_numeric),   negative_threshold = asinh(10/5),   negative_proportion_flag = 0.95 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default analyze numeric columns. negative_threshold scalar indicating threshold measurement considered negative. Defaults hyperbolic arcsine transformation 10 counts. negative_proportion_flag scalar 0 1 indicating proportion cells tof_tibble need `negative_threshold` given marker order marker flagged. Defaults 0.95.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"tibble 3 columns number rows equal number columns `tof_tibble` chosen `channel_cols`. three columns \"channel\", character vector channel names, \"negative_proportion\", numeric vector values 0 1 indicating many cells `tof_tibble` `negative_threshold` channel, `flagged_channel`, boolean vector indicating whether channel flagged potentially failed (TRUE means channel large number cells `negative_threshold`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"","code":"# simulate some data sim_data <-     data.frame(         cd4 = rnorm(n = 100, mean = 5, sd = 0.5),         cd8 = rnorm(n = 100, mean = 0, sd = 0.1),         cd33 = rnorm(n = 100, mean = 10, sd = 0.1)     )  tof_assess_channels(tof_tibble = sim_data) #> # A tibble: 3 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE           #> 3 cd33                      0 FALSE            tof_assess_channels(tof_tibble = sim_data, channel_cols = c(cd4, cd8)) #> # A tibble: 2 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE            tof_assess_channels(tof_tibble = sim_data, negative_threshold = 2) #> # A tibble: 3 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE           #> 3 cd33                      0 FALSE"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","title":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"function evaluates result clustering procedure comparing mahalanobis distance cell centroid cluster assigned among cells given cluster. cells mahalanobis-distance z-score user-specified threshold flagged potentially anomalous. Note z-score calculated using modified formula minimize effect outliers (Z = x - median(x) / mad(x)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"","code":"tof_assess_clusters_distance(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   z_threshold = 3,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. z_threshold scalar indicating distance z-score threshold cell considered anomalous. Defaults 3. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"augment = FALSE (default), tibble 3 columns: \".mahalanobis_distance\" (mahalanobis distance cell centroid tits assigned cluster), \"z_score\" (modified z-score cell's mahalanobis distance relative cells dataset), \"flagged_cell\" (boolean indicating whether cell flagged z-score z_threshold). augment = TRUE, 3 columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"","code":"# simulate data sim_data_inner <-     dplyr::tibble(         cd45 = c(rnorm(n = 600), rnorm(n = 500, mean = -4)),         cd38 =             c(                 rnorm(n = 100, sd = 0.5),                 rnorm(n = 500, mean = -3),                 rnorm(n = 500, mean = 8)             ),         cd34 =             c(                 rnorm(n = 100, sd = 0.2, mean = -10),                 rnorm(n = 500, mean = 4),                 rnorm(n = 500, mean = 60)             ),         cd19 = c(rnorm(n = 100, sd = 0.3, mean = 10), rnorm(n = 1000)),         cluster_id = c(rep(\"a\", 100), rep(\"b\", 500), rep(\"c\", 500)),         dataset = \"inner\"     )  sim_data_outer <-     dplyr::tibble(         cd45 = c(rnorm(n = 10), rnorm(50, mean = 3), rnorm(n = 50, mean = -12)),         cd38 =             c(                 rnorm(n = 10, sd = 0.5),                 rnorm(n = 50, mean = -10),                 rnorm(n = 50, mean = 10)             ),         cd34 =             c(                 rnorm(n = 10, sd = 0.2, mean = -15),                 rnorm(n = 50, mean = 15),                 rnorm(n = 50, mean = 70)             ),         cd19 = c(rnorm(n = 10, sd = 0.3, mean = 19), rnorm(n = 100)),         cluster_id = c(rep(\"a\", 10), rep(\"b\", 50), rep(\"c\", 50)),         dataset = \"outer\"     )  sim_data <- rbind(sim_data_inner, sim_data_outer)  # detect anomalous cells (in this case, the \"outer\" dataset contains small # clusters that get lumped into the larger clusters in the \"inner\" dataset) z_result <-     sim_data |>     tof_assess_clusters_distance(cluster_col = cluster_id, z_threshold = 2.5)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","title":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"function evaluates result clustering procedure calculating mahalanobis distance cell centroids clusters dataset finding shannon entropy resulting vector distances. cells entropy threshold user-specified threshold flagged potentially anomalous. Entropy minimized (0) cell close one (small number) clusters, far rest . cell close multiple cluster centroids (.e. ambiguous phenotype), entropy large.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"","code":"tof_assess_clusters_entropy(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   entropy_threshold,   entropy_quantile = 0.9,   num_closest_clusters,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. entropy_threshold scalar indicating entropy threshold cell considered anomalous. unspecified, threshold computed using `entropy_quantile` (see ). (Note: Entropy often 0 1, can larger many classes/clusters). entropy_quantile scalar 0 1 indicating entropy quantile cell considered anomalous. Defaults 0.9, means cells entropy 90th percentile flagged. Ignored entropy_threshold specified directly. num_closest_clusters integer indicating many cell's closest cluster centroids mahalanobis distance included entropy calculation. Playing argument allow ignore distances clusters far away cell (thus may distort result, many distant centroids large distances can artificially inflate cells' entropy value; said, rarely issue empirically). Defaults clusters tof_tibble. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"augment = FALSE (default), tibble 2 + NUM_CLUSTERS columns. NUM_CLUSTERS number unique clusters cluster_col. Two columns \"entropy\" (entropy value cell) \"flagged_cell\" (boolean value indicating cell entropy value entropy_threshold). NUM_CLUSTERS columns contain mahalanobis distances cell clusters cluster_col (named \".mahalanobis_{cluster_name}\"). augment = TRUE, 2 + NUM_CLUSTERS columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"","code":"# simulate data sim_data <-     dplyr::tibble(         cd45 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd38 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd34 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd19 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))     )  # imagine a \"reference\" dataset in which \"cluster a\" isn't present sim_data_reference <-     sim_data |>     dplyr::filter(cluster_id %in% c(\"b\", \"c\"))  # if we cluster into the reference dataset, we will force all cells in # cluster a into a population where they don't fit very well sim_data <-     sim_data |>     tof_cluster(         healthy_tibble = sim_data_reference,         healthy_label_col = cluster_id,         method = \"ddpr\"     )  # we can evaluate the clustering quality by calculating by the entropy of the # mahalanobis distance vector for each cell to all cluster centroids entropy_result <-     sim_data |>     tof_assess_clusters_entropy(         cluster_col = .mahalanobis_cluster,         marker_cols = starts_with(\"cd\"),         entropy_quantile = 0.8,         augment = TRUE     )  # most cells in \"cluster a\" are flagged, and few cells in the other clusters are flagged_cluster_proportions <-     entropy_result |>     dplyr::group_by(cluster_id) |>     dplyr::summarize(         prop_flagged = mean(flagged_cell)     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","title":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","text":"function evaluates result clustering procedure finding cell's K nearest neighbors, determining cluster majority assigned , checking matches cell's cluster assignment. cluster assignment majority cell's nearest neighbors match cell's cluster assignment, cell flagged potentially anomalous.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","text":"","code":"tof_assess_clusters_knn(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   num_neighbors = min(10, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. num_neighbors integer indicating many neighbors found nearest neighbor calculation. distance_function string indicating distance function used perform k nearest neighbor calculation.  Options \"euclidean\" (default) \"cosine\". augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","text":"augment = FALSE (default), tibble 2 columns: \".knn_cluster\" (character vector indicating cluster received majority vote cell's k nearest neighbors) \"flagged_cell\" (boolean value indicating cell's cluster assignment matched majority vote (TRUE) (FALSE)). augment = TRUE, 2 columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd38 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd34 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd19 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))     )  knn_result <-     sim_data |>     tof_assess_clusters_knn(         cluster_col = cluster_id,         num_neighbors = 10     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"function performs simplified version flowAI's statistical test detect time periods abnormal flow rates course flow cytometry experiment. Briefly, relative flow rates timestep throughout data acquisition calculated (see tof_calculate_flow_rate), outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"","code":"tof_assess_flow_rate(   tof_tibble,   time_col,   group_cols,   num_timesteps = nrow(tof_tibble)/1000,   alpha_threshold = 0.01,   visualize = FALSE,   ...,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. group_cols Optional. Unquoted column names indicating columns used group cells analysis. Flow rate calculation performed independently within group. Supports tidyselect helpers. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection. alpha_threshold scalar 0 1 indicating two-tailed significance level draw outlier thresholds t-distribution `num_timesteps` - 1 degrees freedom. Defaults 0.01. visualize boolean value indicating plot generated visualize timestep's relative flow rate (group) instead returning tibble directly. Defaults FALSE. ... Optional additional arguments pass facet_wrap. Ignored visualize = FALSE. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"tibble number rows `tof_tibble`. augment = FALSE (default), 3 columns: \"{time_col}\" (column `time_col`), \"timestep\" (numeric timestep cell assigned based value `time_col`), \"flagged_window\" (boolean vector indicating cell collecting timestep flagged high low flow rate). augment = TRUE, 3 columns column-bound `tof_tibble` return augmented version input dataset. (Note case, time_col duplicated). visualize = TRUE, ggplot object returned instead tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"","code":"set.seed(1000L) sim_data <-     data.frame(         cd4 = rnorm(n = 1000, mean = 5, sd = 0.5),         cd8 = rnorm(n = 1000, mean = 0, sd = 0.1),         cd33 = rnorm(n = 1000, mean = 10, sd = 0.1),         file_name = c(rep(\"a\", times = 500), rep(\"b\", times = 500)),         time =             c(                 sample(1:100, size = 200, replace = TRUE),                 sample(100:400, size = 300, replace = TRUE),                 sample(1:150, size = 400, replace = TRUE),                 sample(1:500, size = 100, replace = TRUE)             )     )  sim_data |>     tof_assess_flow_rate(         time_col = time,         num_timesteps = 20,         visualize = TRUE     )   sim_data |>     tof_assess_flow_rate(         time_col = time,         group_cols = file_name,         num_timesteps = 20,         visualize = TRUE     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","text":"function performs simplified version flowAI's statistical test detect time periods abnormal flow rates course flow cytometry experiment. Briefly, relative flow rates timestep throughout data acquisition calculated (see tof_calculate_flow_rate), outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","text":"","code":"tof_assess_flow_rate_tibble(   tof_tibble,   time_col,   num_timesteps = nrow(tof_tibble)/1000,   alpha_threshold = 0.01,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection. alpha_threshold scalar 0 1 indicating two-tailed significance level draw outlier thresholds t-distribution `num_timesteps` - 1 degrees freedom. Defaults 0.01. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","text":"tibble number rows `tof_tibble`. augment = FALSE (default), 3 columns: \"{time_col}\" (column `time_col`), \"timestep\" (numeric timestep cell assigned based value `time_col`), \"flagged_window\" (boolean vector indicating cell collecting timestep flagged high low flow rate). augment = TRUE, 3 columns column-bound `tof_tibble` return augmented version input dataset. (Note case, time_col duplicated).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","text":"","code":"set.seed(1000L) sim_data <-     data.frame(         cd4 = rnorm(n = 1000, mean = 5, sd = 0.5),         cd8 = rnorm(n = 1000, mean = 0, sd = 0.1),         cd33 = rnorm(n = 1000, mean = 10, sd = 0.1),         time =             c(                 sample(1:100, size = 200, replace = TRUE),                 sample(100:400, size = 300, replace = TRUE),                 sample(1:150, size = 400, replace = TRUE),                 sample(1:500, size = 100, replace = TRUE)             )     )  sim_data |>     tof_assess_flow_rate(         time_col = time,         num_timesteps = 20,         visualize = TRUE     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)     )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    0.795 #> 2 mae    0.788 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"function performs quantile normalization high-dimensional cytometry data tidy format using either linear rescaling quantile normalization. channel specified `channel_cols` batch corrected, `group_cols` can used break cells groups batch correction performed separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"","code":"tof_batch_correct(   tof_tibble,   channel_cols,   group_cols,   augment = TRUE,   method = c(\"rescale\", \"quantile\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted. method string indicating batch correction method used. Valid options \"rescale\" linear scaling (default) \"quantile\" quantile normalization using normalize.quantiles.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","text":"function performs quantile normalization high-dimensional cytometry data tidy format using normalize.quantiles. Optionally, groups can specified normalized separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","text":"","code":"tof_batch_correct_quantile(   tof_tibble,   channel_cols,   group_cols,   augment = TRUE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","text":"function performs quantile normalization high-dimensional cytometry data tidy format using normalize.quantiles.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","text":"","code":"tof_batch_correct_quantile_tibble(tof_tibble, channel_cols, augment = TRUE)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"function performs quantile normalization high-dimensional cytometry data tidy format using linear rescaling. channel specified `channel_cols` rescaled maximum value 1 minimum value 0. `group_cols` specifies columns used break cells groups rescaling performed separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"","code":"tof_batch_correct_rescale(tof_tibble, channel_cols, group_cols, augment = TRUE)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in healthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in healthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in healthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in healthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in healthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","title":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","text":"Calculate relative flow rates different timepoints throughout flow mass cytometry run.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","text":"","code":"tof_calculate_flow_rate(   tof_tibble,   time_col,   num_timesteps = nrow(tof_tibble)/1000 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","text":"tibble 3 columns num_timesteps rows. row represent single timestep (error thrown `num_timesteps` larger number rows `tof_tibble`). three columns follows: \"timestep\", numeric vector indicating timestep represented given row; \"time_window\", factor showing interval `time_col` \"timestep\" defined; \"num_cells\", number cells collected timestep.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","text":"","code":"# simulate some data sim_data <-     data.frame(         cd4 = rnorm(n = 100, mean = 5, sd = 0.5),         cd8 = rnorm(n = 100, mean = 0, sd = 0.1),         cd33 = rnorm(n = 100, mean = 10, sd = 0.1),         time = sample(1:300, size = 100)     )  tof_calculate_flow_rate(tof_tibble = sim_data, time_col = time, num_timesteps = 20L) #>    timestep time_window num_cells #> 1         1 (6.71,21.6]         4 #> 2         2 (21.6,36.2]         6 #> 3         3 (36.2,50.8]         7 #> 4         4 (50.8,65.4]         7 #> 5         5   (65.4,80]         5 #> 6         6   (80,94.6]         4 #> 7         7  (94.6,109]         5 #> 8         8   (109,124]         4 #> 9         9   (124,138]         1 #> 10       10   (138,153]         7 #> 11       11   (153,168]         5 #> 12       12   (168,182]         2 #> 13       13   (182,197]         7 #> 14       14   (197,211]         7 #> 15       15   (211,226]         5 #> 16       16   (226,241]         2 #> 17       17   (241,255]         4 #> 18       18   (255,270]         5 #> 19       19   (270,284]         7 #> 20       20   (284,299]         6"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most similar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most similar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most similar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most similar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most similar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster high-dimensional cytometry data. — tof_cluster","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering high-dimensional cytometry data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells clustering. Clustering performed group independently. Supports tidyselect helpers. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 .kmeans_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>           #>  1  1.33  -0.447  1.50   0.436 11              #>  2 -1.20  -0.481 -0.391 -1.54  9               #>  3 -0.541  0.666 -1.68  -0.986 16              #>  4 -1.22   1.32   0.689 -0.791 10              #>  5  0.639  0.519 -1.32  -0.204 18              #>  6 -0.239  0.397 -0.780  0.372 1               #>  7  0.651  0.997 -0.665  0.805 18              #>  8  0.788  1.26   0.584 -0.953 19              #>  9 -0.344  0.388 -0.407 -0.442 13              #> 10  0.120  0.885 -2.26   0.583 17              #> # ℹ 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 .phenograph_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>               #>  1  1.33  -0.447  1.50   0.436 2                   #>  2 -1.20  -0.481 -0.391 -1.54  1                   #>  3 -0.541  0.666 -1.68  -0.986 1                   #>  4 -1.22   1.32   0.689 -0.791 3                   #>  5  0.639  0.519 -1.32  -0.204 5                   #>  6 -0.239  0.397 -0.780  0.372 5                   #>  7  0.651  0.997 -0.665  0.805 4                   #>  8  0.788  1.26   0.584 -0.953 8                   #>  9 -0.344  0.388 -0.407 -0.442 1                   #> 10  0.120  0.885 -2.26   0.583 5                   #> # ℹ 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"function performs distance-based clustering high-dimensional cytometry data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.{distance_function}_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.{distance_function}_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 b                    #>  2 b                    #>  3 b                    #>  4 a                    #>  5 b                    #>  6 b                    #>  7 b                    #>  8 a                    #>  9 a                    #> 10 b                    #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"function performs FlowSOM clustering high-dimensional cytometry data using user-specified selection input variables/high-dimensional cytometry measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 10                   #>  2 10                   #>  3 8                    #>  4 5                    #>  5 10                   #>  6 15                   #>  7 6                    #>  8 8                    #>  9 15                   #> 10 2                    #> # ℹ 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"function performs k-means clustering high-dimensional cytometry data using user-specified selection input variables/high-dimensional cytometry measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 8               #>  2 14              #>  3 9               #>  4 5               #>  5 4               #>  6 11              #>  7 5               #>  8 15              #>  9 7               #> 10 5               #> # ℹ 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 18              #>  2 5               #>  3 4               #>  4 5               #>  5 2               #>  6 12              #>  7 11              #>  8 6               #>  9 16              #> 10 13              #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering high-dimensional cytometry data using user-specified selection input variables/high-dimensional cytometry measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 6                   #>  2 2                   #>  3 4                   #>  4 7                   #>  5 10                  #>  6 8                   #>  7 7                   #>  8 9                   #>  9 8                   #> 10 4                   #> # ℹ 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 9                   #>  2 12                  #>  3 1                   #>  4 13                  #>  5 5                   #>  6 2                   #>  7 10                  #>  8 7                   #>  9 11                  #> 10 1                   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # ℹ 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # ℹ 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data. — tof_downsample","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>      cd45   cd38    cd34    cd19 cluster_id #>     <dbl>  <dbl>   <dbl>   <dbl> <chr>      #>  1 -0.429 -0.127 -0.242   0.0885 s          #>  2  0.249 -2.16  -0.400   1.07   p          #>  3  1.13   0.676 -1.34    0.464  y          #>  4  1.66   0.631  0.231   0.447  s          #>  5 -0.974 -0.219  1.31   -0.466  d          #>  6  0.815  1.55  -0.558  -1.07   p          #>  7 -0.225  1.28  -0.976   1.28   e          #>  8  0.730  0.710  0.571  -0.0914 u          #>  9 -1.59  -0.337  0.0350 -1.61   a          #> 10 -0.938  0.593 -0.669   0.0187 p          #> # ℹ 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>      cd45   cd38   cd34    cd19 cluster_id #>     <dbl>  <dbl>  <dbl>   <dbl> <chr>      #>  1  0.571 -0.121  1.54   0.173  z          #>  2  1.07   0.320 -0.675  0.458  h          #>  3 -0.786 -1.08  -0.439 -1.21   m          #>  4  0.285  1.68  -0.580 -0.189  r          #>  5  0.699 -0.107 -1.21  -3.14   c          #>  6 -0.270 -1.42   1.65   1.80   a          #>  7 -0.252 -0.396  0.339  0.602  p          #>  8  1.31  -1.42   0.234 -0.0494 q          #>  9 -1.84  -1.86   2.28   0.0512 e          #> 10 -0.128 -1.28   1.47  -0.892  q          #> # ℹ 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 105 × 5 #>      cd45    cd38    cd34    cd19 cluster_id #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1 -0.974 -0.219   1.31   -0.466  d          #>  2  0.664  1.39    0.898  -0.675  z          #>  3 -1.59  -0.337   0.0350 -1.61   a          #>  4 -0.783  0.203   0.554   1.60   j          #>  5 -1.33   0.434  -0.0858  0.286  e          #>  6  0.717 -0.0751 -0.544   0.0304 p          #>  7  1.00   0.239   1.61    1.72   j          #>  8 -0.316  0.834  -0.108   1.97   w          #>  9  0.177 -1.45    0.202   0.498  o          #> 10 -0.720 -1.03   -0.962   1.49   a          #> # ℹ 95 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>      cd45    cd38   cd34    cd19 cluster_id #>     <dbl>   <dbl>  <dbl>   <dbl> <chr>      #>  1 -0.100 -0.0492  0.282  0.865  l          #>  2  0.199 -1.22   -0.670  0.685  s          #>  3 -1.46   0.855   1.02  -0.0620 e          #>  4  1.18  -0.316  -2.67  -0.113  q          #>  5  0.837  0.345   0.303 -1.44   u          #>  6  0.566 -0.0197 -0.764  0.255  g          #>  7 -0.460  0.287  -1.11   1.09   d          #>  8  0.105  1.79    2.01  -0.486  e          #>  9  1.90  -0.971   0.278 -0.0794 h          #> 10  1.38   0.302  -0.186  0.296  g          #> # ℹ 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>       cd45    cd38   cd34    cd19 cluster_id #>      <dbl>   <dbl>  <dbl>   <dbl> <chr>      #>  1 -0.0611  0.244   1.33  -0.653  y          #>  2 -0.328   1.14    0.231 -0.620  p          #>  3  0.578  -0.318  -0.954  0.135  x          #>  4 -1.46    0.855   1.02  -0.0620 e          #>  5  0.566  -0.0197 -0.764  0.255  g          #>  6 -0.153   0.909  -0.456  0.267  r          #>  7 -0.0409 -0.556   2.49   0.912  f          #>  8 -0.817  -1.64   -2.27  -0.981  z          #>  9 -1.29   -0.407  -1.33  -1.12   o          #> 10  1.25    2.18   -1.20   1.01   k          #> # ℹ 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 490 × 4 #>       cd45    cd38   cd34    cd19 #>      <dbl>   <dbl>  <dbl>   <dbl> #>  1 -0.941   2.45   -1.33   0.0428 #>  2 -0.645   0.355  -0.785 -2.05   #>  3  1.30    0.0177  0.366  1.66   #>  4 -2.68    1.13   -0.466 -1.96   #>  5  0.983  -0.351   0.455  0.222  #>  6 -0.0637 -0.574   0.634  1.01   #>  7  0.855   0.710  -0.259 -0.846  #>  8  2.06   -0.704  -0.659  0.559  #>  9  0.840  -0.249  -1.31  -0.152  #> 10  1.39    0.571   0.550  0.193  #> # ℹ 480 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 193 × 4 #>       cd45    cd38    cd34   cd19 #>      <dbl>   <dbl>   <dbl>  <dbl> #>  1  1.34    0.176   0.0138 -1.02  #>  2 -0.0637 -0.574   0.634   1.01  #>  3 -0.997  -1.07   -1.54   -1.19  #>  4  0.840  -0.249  -1.31   -0.152 #>  5  1.39    0.571   0.550   0.193 #>  6 -0.554   0.483  -0.564   0.727 #>  7 -0.821  -1.77    0.435  -1.43  #>  8 -0.135  -0.0761 -0.282  -0.808 #>  9  1.46   -0.855   0.179  -1.15  #> 10 -2.15    0.665  -1.18   -0.795 #> # ℹ 183 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 203 × 4 #>      cd45   cd38     cd34   cd19 #>     <dbl>  <dbl>    <dbl>  <dbl> #>  1  0.586  1.04  -0.392   -0.946 #>  2  0.855  0.710 -0.259   -0.846 #>  3  0.840 -0.249 -1.31    -0.152 #>  4 -0.821 -1.77   0.435   -1.43  #>  5  1.46  -0.855  0.179   -1.15  #>  6  1.13  -1.17  -0.925    1.29  #>  7 -1.57  -1.32   1.74     0.266 #>  8  0.809 -0.993  0.0404  -0.794 #>  9 -0.771 -0.864 -0.632   -0.416 #> 10 -0.569 -0.209 -0.00985 -0.393 #> # ℹ 193 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>       cd45   cd38   cd34    cd19 cluster_id #>      <dbl>  <dbl>  <dbl>   <dbl> <chr>      #>  1  1.01    0.520 -2.18  -0.531  s          #>  2  0.542   1.50  -0.890 -0.815  a          #>  3 -0.166   0.513 -0.812  1.31   e          #>  4  0.116  -1.27   0.359 -0.412  f          #>  5  0.765  -1.46  -1.71   0.247  u          #>  6 -0.426  -0.412  1.99   0.465  x          #>  7 -1.10   -0.437  0.284  0.0682 s          #>  8 -0.620  -1.81  -0.928 -1.32   k          #>  9  0.0205  0.386 -0.465 -0.102  m          #> 10 -0.721   0.362 -0.594 -0.848  h          #> # ℹ 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 87 × 5 #>      cd45    cd38   cd34    cd19 cluster_id #>     <dbl>   <dbl>  <dbl>   <dbl> <chr>      #>  1 -1.02  -1.06   -1.12   1.63   a          #>  2 -0.959 -1.57    3.55   0.732  a          #>  3  0.542  1.50   -0.890 -0.815  a          #>  4 -0.617  0.0143 -1.23   0.291  a          #>  5 -1.39   2.26   -0.497 -0.166  b          #>  6 -0.396 -0.818  -0.720  0.0744 b          #>  7  0.916 -0.859   1.35   1.37   b          #>  8  0.438  1.33   -1.18   1.19   c          #>  9 -0.748  0.436   1.39   0.398  c          #> 10  0.512 -1.16    0.687 -0.731  c          #> # ℹ 77 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation high-dimensional cytometry data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>       cd45   cd38    cd34      cd19 .spade_density #>      <dbl>  <dbl>   <dbl>     <dbl>          <dbl> #>  1  0.760   0.167 -0.222  -0.928                 1 #>  2  0.0804 -0.569 -0.324   1.58                  1 #>  3  0.767   0.837  0.473   0.417                 1 #>  4  1.05   -1.14   0.0856 -0.0271                1 #>  5 -1.53   -0.352  0.710   0.000200              1 #>  6  0.371   0.875 -0.0882  0.514                 1 #>  7  0.655  -2.26   0.0972 -0.120                 1 #>  8  0.501   1.31   0.876  -0.0215                1 #>  9 -0.286  -0.307  1.53   -0.0930                1 #> 10 -0.0880 -1.71  -0.516   0.705                 1 #> # ℹ 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>       cd45   cd38    cd34      cd19 .spade_density #>      <dbl>  <dbl>   <dbl>     <dbl>          <dbl> #>  1  0.760   0.167 -0.222  -0.928               1   #>  2  0.0804 -0.569 -0.324   1.58                1   #>  3  0.767   0.837  0.473   0.417               1   #>  4  1.05   -1.14   0.0856 -0.0271              1   #>  5 -1.53   -0.352  0.710   0.000200            0.8 #>  6  0.371   0.875 -0.0882  0.514               1   #>  7  0.655  -2.26   0.0972 -0.120               0.4 #>  8  0.501   1.31   0.876  -0.0215              0.9 #>  9 -0.286  -0.307  1.53   -0.0930              0.8 #> 10 -0.0880 -1.71  -0.516   0.705               1   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby        0.0674       0.163       0.213       0.369      0.0589 #> 2 mario        0.0834       0.207      -0.229      -0.497      0.110  #> # ℹ 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, `cd19@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, `cd19@c_ct` <dbl>, #> #   `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, `cd19@d_ct` <dbl>, #> #   `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, `cd19@e_ct` <dbl>, #> #   `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, `cd19@f_ct` <dbl>, #> #   `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, `cd19@g_ct` <dbl>, #> #   `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, `cd34@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel  values #>    <chr>   <chr>      <chr>     <dbl> #>  1 kirby   a          cd45     0.0674 #>  2 kirby   a          cd38     0.163  #>  3 kirby   a          cd34     0.213  #>  4 kirby   a          cd19     0.369  #>  5 kirby   b          cd45     0.0589 #>  6 kirby   b          cd38     0.0264 #>  7 kirby   b          cd34    -0.0463 #>  8 kirby   b          cd19     0.0145 #>  9 kirby   c          cd45    -0.261  #> 10 kirby   c          cd38    -0.476  #> # ℹ 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@t_emd` `stim_cd38@t_emd` `stim_cd34@t_emd` #>   <chr>               <dbl>             <dbl>             <dbl> #> 1 kirby                NA                NA               NA    #> 2 mario                14.3              10.3              9.99 #> # ℹ 101 more variables: `stim_cd19@t_emd` <dbl>, `stim_cd45@w_emd` <dbl>, #> #   `stim_cd38@w_emd` <dbl>, `stim_cd34@w_emd` <dbl>, `stim_cd19@w_emd` <dbl>, #> #   `stim_cd45@v_emd` <dbl>, `stim_cd38@v_emd` <dbl>, `stim_cd34@v_emd` <dbl>, #> #   `stim_cd19@v_emd` <dbl>, `stim_cd45@e_emd` <dbl>, `stim_cd38@e_emd` <dbl>, #> #   `stim_cd34@e_emd` <dbl>, `stim_cd19@e_emd` <dbl>, `stim_cd45@s_emd` <dbl>, #> #   `stim_cd38@s_emd` <dbl>, `stim_cd34@s_emd` <dbl>, `stim_cd19@s_emd` <dbl>, #> #   `stim_cd45@f_emd` <dbl>, `stim_cd38@f_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 t          cd45   stim        13.5  #>  2 t          cd38   stim         4.68 #>  3 t          cd34   stim        10.9  #>  4 t          cd19   stim         7.83 #>  5 w          cd45   stim         4.65 #>  6 w          cd38   stim         6.85 #>  7 w          cd34   stim         6.15 #>  8 w          cd19   stim         4.67 #>  9 v          cd45   stim        12.5  #> 10 v          cd38   stim         8.5  #> # ℹ 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0356   0.0413   0.0507   0.0281   0.0338   0.0281   0.0432 #> 2 mario     0.0236   0.0343   0.0407   0.0450   0.0535   0.0450   0.0493 #> # ℹ 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0356   0.0413   0.0507   0.0281   0.0338   0.0281   0.0432 #> 2 mario     0.0236   0.0343   0.0407   0.0450   0.0535   0.0450   0.0493 #> # ℹ 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@m_jsd` `stim_cd38@m_jsd` `stim_cd34@m_jsd` #>   <chr>               <dbl>             <dbl>             <dbl> #> 1 mario               0.909             0.909             0.909 #> 2 kirby              NA                NA                NA     #> # ℹ 101 more variables: `stim_cd19@m_jsd` <dbl>, `stim_cd45@x_jsd` <dbl>, #> #   `stim_cd38@x_jsd` <dbl>, `stim_cd34@x_jsd` <dbl>, `stim_cd19@x_jsd` <dbl>, #> #   `stim_cd45@y_jsd` <dbl>, `stim_cd38@y_jsd` <dbl>, `stim_cd34@y_jsd` <dbl>, #> #   `stim_cd19@y_jsd` <dbl>, `stim_cd45@t_jsd` <dbl>, `stim_cd38@t_jsd` <dbl>, #> #   `stim_cd34@t_jsd` <dbl>, `stim_cd19@t_jsd` <dbl>, `stim_cd45@f_jsd` <dbl>, #> #   `stim_cd38@f_jsd` <dbl>, `stim_cd34@f_jsd` <dbl>, `stim_cd19@f_jsd` <dbl>, #> #   `stim_cd45@d_jsd` <dbl>, `stim_cd38@d_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   jsd #>    <chr>      <chr>  <chr>       <dbl> #>  1 m          cd45   stim        0.818 #>  2 m          cd38   stim        0.680 #>  3 m          cd34   stim        0.818 #>  4 m          cd19   stim        0.620 #>  5 x          cd45   stim        0.772 #>  6 x          cd38   stim        0.675 #>  7 x          cd34   stim        0.662 #>  8 x          cd19   stim        0.806 #>  9 y          cd45   stim        0.753 #> 10 y          cd38   stim        0.679 #> # ℹ 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0327   0.0306   0.0347   0.0367   0.0408   0.0367   0.0490 #> 2 mario     0.0412   0.0294   0.0529   0.0471   0.0333   0.0333   0.0294 #> # ℹ 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0327 #>  2 kirby   b          0.0306 #>  3 kirby   c          0.0347 #>  4 kirby   d          0.0367 #>  5 kirby   e          0.0408 #>  6 kirby   f          0.0367 #>  7 kirby   g          0.0490 #>  8 kirby   h          0.0429 #>  9 kirby   i          0.0469 #> 10 kirby   j          0.0306 #> # ℹ 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_threshold` `cd34@a_threshold` #>   <chr>                <dbl>              <dbl>              <dbl> #> 1 kirby                 0                  0.08               0.12 #> 2 mario                 0.04               0.08               0.08 #> # ℹ 101 more variables: `cd19@a_threshold` <dbl>, `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0      #>  2 kirby   a          cd38    0.08   #>  3 kirby   a          cd34    0.12   #>  4 kirby   a          cd19    0.08   #>  5 kirby   b          cd45    0.143  #>  6 kirby   b          cd38    0.143  #>  7 kirby   b          cd34    0.0952 #>  8 kirby   b          cd19    0.0476 #>  9 kirby   c          cd45    0.167  #> 10 kirby   c          cd38    0.0556 #> # ℹ 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   split_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"split_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `split_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","text":"Find k-nearest neighbors cell high-dimensional cytometry dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   .query,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents high-dimensional cytometry measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. .query set cells queried .data (.e. set cells find nearest neighbors within .data). Defaults .data , .e. finding nearest neighbors cells .data. ... Optional additional arguments pass hnsw_knn","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  690  912  800  654  958  271  495  270  318    86 #>    [2,]  516  381  340  966  706  908  102   13  138   525 #>    [3,]  107  513  159  822  482  239  793  971  818    20 #>    [4,]  848  501  247  120  852  629   37  361  880   492 #>    [5,]   73  371  165  763  691   14  254  940  181   790 #>    [6,]  115  599  411  237  717  780  979  716  488   465 #>    [7,]  926  792  293  771  985  475  627  615  220   753 #>    [8,]  718   88  778  729  588  998  601  618  884   290 #>    [9,]  120   18   37  279  769   56  743   60  935   730 #>   [10,]  727  286  392  448   67  919  265  283  479   333 #>   [11,]  496  289  636  861   25  602  795  429  594   984 #>   [12,]  244  980  607  162  818  571  551  956    3   482 #>   [13,]  395  809  859  736  706  623  209  158  314   916 #>   [14,]  855  434  691  165    5  421  930  768   46   264 #>   [15,]  268  895  810  521  294  739  535  717  603   621 #>   [16,]  894  849  355  556  215  401  560  610   83   592 #>   [17,]  427  915  336  514  957  390  593  909  117   874 #>   [18,]  279  622    9  743  120   66  968  482  935   435 #>   [19,]  271   55  150   86  363  988  374  921  448   467 #>   [20,]  856  807  783  520  533  822  687   56  107   704 #>   [21,]  884   78  420   88  348  619  611  184  480   998 #>   [22,]  667  321  256  325  147  879  815  174  450   422 #>   [23,]  437  177  408  292  990  272  820  671  986    29 #>   [24,]  502  493  151  113  463  837  485  360  928   662 #>   [25,]  795  429  861  701  274  496   11  504  984    98 #>   [26,]  468  487  706   64  859  788  119  340  916   786 #>   [27,]  535  659  799  206   15  645  920  268  895   583 #>   [28,]  894  939  355  960  360   16  394  262  684   837 #>   [29,]  671   59  739  408  521  294  163  440  282   751 #>   [30,]  117  566  427  322  305  845  957  412  111   212 #>   [31,]  227  681  934  711  158  144  811  209   62   812 #>   [32,]  676  317  145  663  114  906  960   28  130   188 #>   [33,]  987   38  224  178  852  247  742  622  931   868 #>   [34,]   45  766  450  624  541  854  634  698  389   367 #>   [35,]  558  631  956  191  916  574  838  503  552   623 #>   [36,]  668  973  996  978  683  627  146  946  660   782 #>   [37,]  769   60  401   53  430    9  120  782  730   560 #>   [38,]  987  178  247  852  367   33  854  742  120   629 #>   [39,]  515  682  119  447   64  451  132  122  424   540 #>   [40,]  938  137  645  268   59  895  440  717  554   176 #>   [41,]  229  573  171  232  876  309  370  794  881   873 #>   [42,]  543  123  144  741  387  681   62  328  488   967 #>   [43,]   50  167  477  259  820   23  640  980   40   272 #>   [44,]  257  520  785  773  907  441  783  737  376   591 #>   [45,]  854  634  541  670   54  367  698  766   34   249 #>   [46,]  388  930  421  855  546  397  572  881   14   896 #>   [47,]  995  446  281  721  277  925  637  669  752   264 #>   [48,]  320  755  243  614  337  234  498  748  511   669 #>   [49,]   98  363  445  889  375  241  991  861  883   590 #>   [50,]   43  259  244  980   12  239  167  564  974   640 #>   [51,]  289  457  797  353  890  134   11  258  470   202 #>   [52,]  148  927  983   96  702  213  892  587  275   205 #>   [53,]  769   37  560  863  251  963  401  936  112   347 #>   [54,]  430  653  347  634  694  398  494  670  948   112 #>   [55,]   19  271   86  374  217  150  921  988  363   601 #>   [56,]  560  947  769  863  361  935  186    9  712   971 #>   [57,]  582  710  303  419   81  647   69  703  507   194 #>   [58,]  546  428  808  388   46  223  896  794  881   930 #>   [59,]   29  717  294  671  440  739  521  268  411   163 #>   [60,]  430  769  401  730   37  592  297  373  560   867 #>   [61,]  959  359  192  368  312  293  901  183  418   226 #>   [62,]  144  387  158  543  711  932  209  736  681    42 #>   [63,]  678  304  815  844  240  952  180  670  341   252 #>   [64,]  340  119   26  487  788   39  138  786  447   706 #>   [65,]  114   32  317  663  130  157  495  676  145   749 #>   [66,]  968  435   18  866  287  179  962  107  743   523 #>   [67,]  265  632  835  885  333  479  469  919  175    10 #>   [68,]  704  228  394  179  215  806  923  560  575   527 #>   [69,]  710  647   57  329  851  454  135  264  122   382 #>   [70,]  951  351  675  772  135  453  431  703  840   982 #>   [71,]  220  459  705  909  534  261  887  475  336   784 #>   [72,]  644  784  245  291    1  800  747  307  828   459 #>   [73,]  371  763    5  790  357  165  981  143  379   181 #>   [74,]  283  391  286  975   10  425  727  455  352   510 #>   [75,]  719  942  530  183   91  169  278  593  417   611 #>   [76,]  680  812  425  811  727  392  711   10  391    31 #>   [77,]  517  123  488  955  543  163  191  465  170   819 #>   [78,]  359  278  293  184  108  386  792  771  719   418 #>   [79,]  618  789  860  396  358  749  588  374  217   470 #>   [80,]  159  482  492  899  822  971  107  279  712    56 #>   [81,]  116  582  431  168   57  851  976  285  406   710 #>   [82,]  556  692  275  993  476  230  653  948  347   112 #>   [83,]  863  112  151  347  837  560  502  126  493   993 #>   [84,]  413  466   97  673  981  790  864  767  813   402 #>   [85,]  453  714  703  584  135   47  840  641  281   721 #>   [86,]  150   55  921   19  448  270  217  271  330   241 #>   [87,]  677  200  724  542  249  142  180  622  162   986 #>   [88,]  884  998  628  452   21  778    8  532  185   804 #>   [89,]  633  306  816  580  246  886  869  200  266   931 #>   [90,]  945  767  853  596  464  813  413  222  128   759 #>   [91,]  942  183  719  893   75  936  562  798  418   368 #>   [92,]  484  939  954  738  910  688   28  911  846   592 #>   [93,]  365  157  339  187  529  231  740  118  301   478 #>   [94,]  850  576  313  725  625  124  862  814  897   863 #>   [95,]  119  970  682  356  540  386   39  515  309   232 #>   [96,]  927  511  429  795  983   99  141  602  702   304 #>   [97,]  466  410   84  864  673  260  813  255  413   836 #>   [98,]  861   49  274  496  504  991  594   25  485   589 #>   [99,]  511   96   11  745  548  429  748  614  795   927 #>  [100,]  910  762  624  553  699  592  121  188  297   355 #>  [101,]  410  290  853  834  889  150  759  333  813   375 #>  [102,]  966  811  172    2  812  908  758  680  638   608 #>  [103,]  621  895  528  717  411  999  193  938  716   176 #>  [104,]  298  343  371    5  254  643  332  197  295    73 #>  [105,]  471  828  985  615  705  989  518  692  476    82 #>  [106,]  950  154  327  218  288  890  937  253  303   834 #>  [107,]  971  513    3  482  159   80  822  899  524    20 #>  [108,]  278  409  611  540  418  515  447   78  719   942 #>  [109,]  876  917  538  329  424  133  924  420  122   619 #>  [110,]  544  341  240  313  863  398  935  652  712   347 #>  [111,]  874  305  212  322  612   30  284  311  976   427 #>  [112,]  347  993  694   83  653  398  556   53  579    54 #>  [113,]  928   24  485  636  463  504  493  765  502   662 #>  [114,]  130  663  744  495   65  269  510   32  145   690 #>  [115,]    6  599  237  411  979  807  780  717  773   257 #>  [116,]   81  431  406  285  168  582  976  851  804   210 #>  [117,]  845   30  427  957  412  562  322  566  312   368 #>  [118,]  740  785  598  478  734  481  777  907  301   554 #>  [119,]   39   64  682  786  515  487   95   26  788   540 #>  [120,]  247  279    9    4   37   18  935  848  852   899 #>  [121,]  297  867  699  373  730  668  518   60  762   592 #>  [122,]  424  329  454  917  538  940  981   39  447   382 #>  [123,]  543   77  488   42  517  955  736  387  599   176 #>  [124,]  549  902  810   94  581  636  550  594  576   862 #>  [125,]  127  750  474  613  137  620  943  757  761   598 #>  [126,]  590  131  850  836   83  576  241  635  709   485 #>  [127,]  474  125  613  137  775  750  830  478  598   689 #>  [128,]  555  164  767  733  770   90  424  940  997   596 #>  [129,]  198  605  911  335  684  972  891  929  262   662 #>  [130,]  269  145  114  663  510  865  960  472  744   575 #>  [131,]  512  576  590  836  550  126  375  635  581   850 #>  [132,]  565  515  451  447  383  409  397   39  412   278 #>  [133,]  420  619  651  515  480  210  540  108  924   132 #>  [134,]  353  840  303  327  641  507  289  714  405    51 #>  [135,]  703  453   69   85  264  710  647   57  714   840 #>  [136,]  648  300  657  563  903  841  791  834  267   101 #>  [137,]  613  895  440   40  554   15  810  598  127   717 #>  [138,]  798  340  949   64  506  788  693  616  487   346 #>  [139,]  156  414  467  823  307  877  589  789  374   749 #>  [140,]  460  476  226  901  833  494   82  615  275   471 #>  [141,]  696  933  814  952  715  311  748  549  862   511 #>  [142,]  677  899  622  279  986  162  971  712  724    80 #>  [143,]  763  790  181  519  393   73  864  402  650   922 #>  [144,]  711  681   62   42  543  158  387   31  209   328 #>  [145,]  676  130  806  394  188   28  910   32  939   228 #>  [146,]  683  901  372  627  384  668  368  978  190   192 #>  [147,]  225  349  438  174   22  892  667  678  761   205 #>  [148,]  702   52   96  587  983  275  927  795  429   764 #>  [149,]  612  323  874  406  261  111  285  909  212   284 #>  [150,]  448   86   19  271  241  921   55  101  333   639 #>  [151,]  502  837  493   24   83  463  894  113  360   485 #>  [152,]  168  770  296  210  804  464  924  596   81   116 #>  [153,]  378  203  532  190  185  996  753  273   75   245 #>  [154,]  218  937  106  950  327  890  303  507  358   202 #>  [155,]  839  426  242  189  568  904  324  961  983   243 #>  [156,]  139  414  823  877  467  589  789  749  654   684 #>  [157,]  414  663  270  823  749  960  330  269   93   529 #>  [158,]  209   62  736  144   31  681  932  711  623   693 #>  [159,]   80  822  482  899  971  492  107  552  712     3 #>  [160,]  870  945  500  733  296  729  489  903  770   728 #>  [161,]  730   18  367  867  120  968    9  302  766   743 #>  [162,]  142  622  571  607   87  677  986  437  482   279 #>  [163,]  465  522  488  294  671  237  780  393  552    29 #>  [164,]  128  555  981  940  733  195  767  882  413    84 #>  [165,]  691  331  819  357    5  468   73   14  407   731 #>  [166,]  827  536  907  481  352  695  700  425  441   376 #>  [167,]  645   43   40  272  477  659  820  535  666   977 #>  [168,]  296  152  596   81  770  813  464  804  116   582 #>  [169,]  593  526  417  893  779  719  759  969  530    75 #>  [170,]  407  334  331  955  163   77  517  631  819   691 #>  [171,]  873  655  672  805  229  320  308  326  234   284 #>  [172,]  966  102    2  811  680  516  812  638  433   608 #>  [173,]  638  608  201  812  871  811  578  686  486   658 #>  [174,]  252  450  667  310  315  678  844  698  304   147 #>  [175,]  969  888  893  679  963  263  632  417  276   905 #>  [176,]  938  193  918  955  103  528  411  741  717   716 #>  [177,]  292  408  990  437   23  986  815  272  739   751 #>  [178,]   38  742  931  345  987  868  852  200   33   568 #>  [179,]  704  435   68  968  806  394  228  866   66   186 #>  [180,]  249  341  986  724  670  796  200   63  815   886 #>  [181,]  143  763  819   73  371  519  790  468    5   191 #>  [182,]  713  539  443  266  633  246  388  558  838   631 #>  [183,]  719  384  593  417  359   91   75  942  562   117 #>  [184,]  832  278  452  322  915  771  874  719  390   293 #>  [185,]  245  475  753  784  532  378  153  771  190   459 #>  [186,]  560  743  432  863  544   56  837  435  151   674 #>  [187,]   93  821  830  280  740  490  483  231  365   785 #>  [188,]  762  676  355  394  145  806   28  297   16   910 #>  [189,]  324  961  568  586  426  904  983  697  566   242 #>  [190,]  996  753  384  203  273  199  936  378  969   417 #>  [191,]  819  631  331   77  395   35  517  314  170   916 #>  [192,]  368   61  312  226  901  359  833  959  117   398 #>  [193,]  528  583  176  938  103  999  716  955  918   650 #>  [194,]  419  603  637 1000  721  446  661  647  545   609 #>  [195,]  295  379  519  197  728  563  164   84  248   763 #>  [196,]  620  238  405  829  125  920  757  225  641   761 #>  [197,]  733  295  379  195  500  371  164  940  728   254 #>  [198,]  129  911  891  605  662  335  360  972   24   684 #>  [199,]  679  936  569  849  824  263  969  384  527   958 #>  [200,]  677  931  724   87  180  796  249   89  142   816 #>  [201,]  871  638  608  914  658  686  173  486  263   578 #>  [202,]  883  756  457  289  861   98  984  396   49   889 #>  [203,]  190  273  372  996  378  458   91  683  384   153 #>  [204,]  642  792  426  833  155  959   61  722  742   146 #>  [205,]  745   99  548  892  927  511   96  761  844   602 #>  [206,]  535  920   27  461   15  659  521  645  268   799 #>  [207,]  953  817  236  828  261  291  887  534  439   756 #>  [208,]  433  778  318  853  919  945  882   90  964   729 #>  [209,]  158  623  736   62  932  144  758   31  681   693 #>  [210,]  152  651  770  596  168  851  924  480  832   420 #>  [211,]  231  436  757  830  483  929  478  760  529   732 #>  [212,]  305  111  311  587  874   30  566  234  221   284 #>  [213,]  315  364  416  817  953  692   52  624  891   148 #>  [214,]  444  548  748  385  350  614  597  755   48   892 #>  [215,]  560  527  401   16   68  276  769  894  394   849 #>  [216,]  882  399  728  195  164  295  381  143  413   519 #>  [217,]  921   55   86  374  601  330   19  270  648   150 #>  [218,]  154  937  890  531  106  507  353  327  950   134 #>  [219,]  328  720  575  520  338  280  737  491  490   595 #>  [220,]   71  909  705  764  261  459  336  326  985   476 #>  [221,]  226  305  587   30  476  212  324  764  293   326 #>  [222,]  853  333  919  835  964  759  526  410  413    67 #>  [223,]  869  383  397  498  246  443  388  904  961   428 #>  [224,]  987  852  848  838  247    4   33  492  899   120 #>  [225,]  147  438  349  892   22  205  174  196  761   597 #>  [226,]  221  140  192  476  833  901   30  368  398   586 #>  [227,]   31  711  144  681  491  934  812  158  811    62 #>  [228,]  806   68  394  704  923  658  865  179  215   527 #>  [229,]   41  171  722  573  386  672  873   78  309   792 #>  [230,]  274  764   82  336  847  662  514  692  275   993 #>  [231,]  830  211  129  483  605  929  436  529  335   972 #>  [232,]  573  309  428  881  383  386  388   95  930   421 #>  [233,]  723  350  816  597  796  952  696  715  748   697 #>  [234,]  320  805  212  858  308   48  587  111  149    99 #>  [235,]  553  364  910  624  846  801  100   92  738   416 #>  [236,]  944  817  760  953  258   51  457  756  436   470 #>  [237,]  780    6  599  354  115  552  465  979  313   411 #>  [238,]  405  641  531  620  134  890  353   51  362   920 #>  [239,]  259  793  857    3  338  689  687  600  533   720 #>  [240,]  341  110  814  579  544  694   63  304  670   653 #>  [241,]  445  639  150  126   49  590  131  375  330   921 #>  [242,]  904  189  426  324  243  961  498  155  722   428 #>  [243,]   48  320  242  324  983  498  655  189  748   723 #>  [244,]   12    3  980  259  239  107  818  551  482   162 #>  [245,]  185  784  475  318   72  532  753  800  459   958 #>  [246,]  633  816   89  443  869  306  580  223  992   388 #>  [247,]  120  852  987    4  279  848  629   38  935   622 #>  [248,]  650  999  379  528  864  803  790  344  661   716 #>  [249,]  724  180  670  541  341  677  622  200  986   743 #>  [250,]    7  926  615  792  326  459  220  985  627   471 #>  [251,]  798  346  562  449  616  312  893  880   53   845 #>  [252,]  174  304  698   63  450  844  678  310  670   941 #>  [253,]  288  621  950  419  791  999  649  528  834   550 #>  [254,]  649  379  298  371  647  643   73  661  710     5 #>  [255,]  466  836  913  625  665   97  979  850  635   377 #>  [256,]  422  325  321  667  342   22  523  423  310   474 #>  [257,]   44  773  785  807  783  520  441  777  115   907 #>  [258,]  760  274  745  756  861  701  797   98  765   289 #>  [259,]  239    3  689  793  600   23  244  820  687   513 #>  [260,]  716  803  864  522  661  922  673  466  402   581 #>  [261,]  220  887  708   71  149  764  909  326  705   336 #>  [262,]  972  605  301  911  463  335  129  502  837   684 #>  [263,]  888  949  175  969  936  914  679  527  893   199 #>  [264,]  281  382  454  277  329   69  721  434  572   538 #>  [265,]   67  479  469  632  885  835  561  376  635   276 #>  [266,]  577  306  633  558   89  580  816  666  631   246 #>  [267,]  601  648  136  499  217  657  921  729   86   290 #>  [268,]   15  294  895  645  521   59  938  717  535   193 #>  [269,]  130  472  960  663  591  737  510  654  270   575 #>  [270,]   86  654  663  414  157  960  150  330  241   921 #>  [271,]   19   55  150   86  988  448  467  363  654   905 #>  [272,]  292  461  177  521   23  820  990  739  437    29 #>  [273,]  686  914  203  949  190  263  969  888  936    91 #>  [274,]  861   25   98  504  928  496  230  701  795   662 #>  [275,]  948  702  653   82  579  692  694  347  476   230 #>  [276,]  632  885  561  963  175  215  469   67  560   265 #>  [277,]  382  669  446  995  572   47  731  454 1000   264 #>  [278,]  409  562  184  719  108  359  322  942  183    75 #>  [279,]  899  622   18  120  935    9  247   80  482   743 #>  [280,]  783  520  785   44  575  338  257  595  219   807 #>  [281,]  995   47  264  925  277  572  446  382  721   755 #>  [282,]  552  313  712  354  886  237  780  671  897   544 #>  [283,]   74  727   10  286  391  448  425  352  392   166 #>  [284,]  672  874  305  612  111  326  293  909  184   452 #>  [285,]  984  858  883  406  116  976  456   81  289   570 #>  [286,]   10  352  472  591  479  727  283  737  448   510 #>  [287,]  523  866   66  342  962  435  793  524  688   423 #>  [288,]  621  253  895  103  598  950  106  604  327   550 #>  [289,]   11  202  701  861  457   51  496   25  984   285 #>  [290,]  464  101  729  296  648  804   55  988  889   853 #>  [291,]  644   72  828  784  459  307  906  705  534    71 #>  [292,]  177  990  437  815  408   23  272  986  820   321 #>  [293,]  359  771  792  183  284  926   78   61  184   221 #>  [294,]   59  717  268   29  163  411  522  739  521   716 #>  [295,]  519  763  195  371  379  197  650  143   73   181 #>  [296,]  168  464  152  804  596  945  290  813  729   101 #>  [297,]  121  867   60  592  762  401  373  730  699   355 #>  [298,]  643  254  343  799  371  649    5  379  721    73 #>  [299,]  537  775  349  211  757  231  830  127  483   125 #>  [300,]  841  791  834  563  344  253  559  136  950   903 #>  [301,]  777  529  972  262  509  598  335  463  785   605 #>  [302,]  806  730  968  394  557  592  228    9  867   179 #>  [303,]  950  419   57  582  327  507  134  253  154   840 #>  [304,]  844   63  579  602  252  240  678  952  814   702 #>  [305,]  212  874  111  284   30  221  587  672  322   427 #>  [306,]  633   89  580  816  577  266  246  886  781   808 #>  [307,]  439  139  906  156  414  644  789  749  823   828 #>  [308,]  370  234  772  320  651  337  612  480  851   858 #>  [309,]  573  232  428  386  383  722  565  132  904   223 #>  [310,]  422  941  432  962  423  879  891   63  252   667 #>  [311,]  566  212  933  652  141  696  814   30  111   429 #>  [312,]  346  368  562  251  192  117  412  616  845   798 #>  [313,]  354  712  947  282  544  863  780  552  110   237 #>  [314,]  395  809  774  462  191  916  900   13  859   547 #>  [315,]  891  364  213  198  662  174  129  941  911   252 #>  [316,]  875  799  343  298   27  643  659  584   85   714 #>  [317,]   32  676  442  906  145  188  114   65  912   910 #>  [318,]  988  433  532  271   55  245   19  778    1   333 #>  [319,]  584  925   47  995  281  385   85  781  446   206 #>  [320,]   48  234  337  498  243  308  212  858  805   772 #>  [321,]  325  667  815  256  879  292  523   22  177   986 #>  [322,]   30  117  111  412  427  390  278  832  874   915 #>  [323,]  406  390  149  804  883  976  909  363  612   915 #>  [324,]  189  983  586  961  587  426  221  566  212   568 #>  [325,]  321  256  292  523  667   22  177  815  820   524 #>  [326,]  672  284  587  220  305  764  221  874  261   909 #>  [327,]  950  303  154  797  134  991  106  550  375   289 #>  [328,]  219  520  575  720  338   20  856   42   44   144 #>  [329,]  538  917  122  424  454  382  851  940   69   264 #>  [330,]  921  241   86  445  270  217  639  150  481   157 #>  [331,]  691  407  165  819  631  191  170  334  468   393 #>  [332,]  295  343  994  519  650  643  380  700  559   344 #>  [333,]  222  919  835   67  448  853  759  988  265   150 #>  [334,]  407  170  331  691  781  165  631  819  955   163 #>  [335,]  929  129  972  589  198  605  463  529  877   262 #>  [336,]  847   17  514  764  909  915  230  705  427   664 #>  [337,]  320  382  772  498   48  403  277  669  572   651 #>  [338,]  595  687  793  783  533  520  600  328  280   689 #>  [339,]  365  685  400  740  118   93  734  478  821   785 #>  [340,]   64  516  381  138  706   26    2  487  530   119 #>  [341,]  240  110  544  670  180  935  249  694   54   796 #>  [342,]  523  422  287  423  688  256  962  310  667   954 #>  [343,]  643  298  559  316  875  583  344  254  104   799 #>  [344,]  559  841  379  791  248  643  649  528  999   300 #>  [345,]  868  742  443  931  852  178  503  878  616   869 #>  [346,]  251  616  449  312  798  562  412  503  788   665 #>  [347,]  112  398  653  694  993   54   83  948  579   430 #>  [348,]  611  530  108  540   75  532  719  964   90   340 #>  [349,]  147  299  174  537  775  315  225  256  422   667 #>  [350,]  233  597  723  385  444  630  748  952  214   816 #>  [351,]   70  951  876  370  135  109  924  403  329   538 #>  [352,]  591  376  737  286  479  441  639  695  469   481 #>  [353,]  134  840  289   51  507  531  218  570  675   457 #>  [354,]  313  780  237  552  947  712  979  282  863   544 #>  [355,]  762   16  556   28  849  188  894  592  297   989 #>  [356,]  843   95  970  525  119  505  487  786  878   418 #>  [357,]  377  673  981  402  545  790  665  468  165   466 #>  [358,]  396  732  470  860  445  991  789  756  154   202 #>  [359,]   61  293  183  278  959  942  719  562   91   418 #>  [360,]   24  662  502  837  198  911  877  684  151   589 #>  [361,]  880  506  947  623  848  501   56  693  932   492 #>  [362,]  238  531  353   51  825  890  134  405  457   218 #>  [363,]   49  889  374   19  883  467  847  445  323    55 #>  [364,]  416  315  213  553  585  624  891  537  198   129 #>  [365,]  339  740  478  400   93  118  685  734  483   529 #>  [366,]  381  516    2  172  966  399  882  216  340   102 #>  [367,]  494  373  854  867  430  978   45  730  161    54 #>  [368,]  192  312  901  117  845   91  251  183   61   936 #>  [369,]  787  567  726  872  658  404  486  551  758   557 #>  [370,]  308  876  480  619  924  651  951  431  851   612 #>  [371,]   73  763    5  379  790  519  254  295  143   197 #>  [372,]  458  683  203   91  505  626  146  942  959   629 #>  [373,]  430  494  867  121  978   60  730  297  367    37 #>  [374,]  363   55  396  217   19  921  467  271   86   445 #>  [375,]  445  834  131  512   49  550  889  456  576   950 #>  [376,]  441  479  469  695  352  635  591  885  773   265 #>  [377,]  913  402  665  357  673  574  466  393  522   625 #>  [378,]  153  203  532  190  273   75  185  753  996   530 #>  [379,]  248  649  519  371  344  763  790  254  195    73 #>  [380,]  604  700  583  176  999  741  528  918  193   650 #>  [381,]  516  340    2   64  706  882   26  216  399   119 #>  [382,]  454  277  538  572  264  851  329  337  122   731 #>  [383,]  397  132  223  565  388  786  992  869  515   309 #>  [384,]  753  183  417  190  936  901  593  969  199    91 #>  [385,]  925  755  350  614  723  995  630  808  233   748 #>  [386,]  722  309   78  959  418  573  108  359  132    61 #>  [387,]   62  543   42  922  123  144  488  536  736   143 #>  [388,]   46  397  930  546  443  383  421  223  855   246 #>  [389,]  879  541  766  667  450  962  523  249  310   342 #>  [390,]  915  976  322  832  323   17  427  779  473   514 #>  [391,]   74  283  425  166  827  700  536  286  727   352 #>  [392,]  727   10  919  425  479  265   67  835  333   286 #>  [393,]  402  922  522  465  819  377  864  488  673   913 #>  [394,]  806  228   68  215  179  704  188   28  939    16 #>  [395,]  314  809   13  736  191  774  916  859  900    35 #>  [396,]  358  374  756  202  363  883  457   49  445   889 #>  [397,]  383  572  992  223  731  132  565  388  869   498 #>  [398,]  347  112  652  845  653   54  993  110  579   694 #>  [399,]  216  381  882  181  295  728  143    2  164   994 #>  [400,]  685  339  365  118  657  740  478  481  330   106 #>  [401,]  769   60  215  527   37  560   16   53  849   297 #>  [402,]  393  673  377  864  922  522  466  357  790   260 #>  [403,]  794  881  421  337  281  264  538  382  329   434 #>  [404,]  726  567   66   18  968  369  161  244  551     9 #>  [405,]  641  238  920  620  134  714  840  531  353    85 #>  [406,]  116  323  883  804  285  570  149   81  431   976 #>  [407,]  334  170  331  691  631  165  781  819  163   191 #>  [408,]   29  177  671  751  739  897  986  282  440    23 #>  [409,]  562  278  451  826  447  412  132  322  108   665 #>  [410,]   97  759  813  836  101  456  635  333  222   466 #>  [411,]  717    6  115  716  599  237  294  103  581    59 #>  [412,]  117  562  322  409  845  826  346  566   30   312 #>  [413,]   84  767  526  981   97  835  813  466  596   826 #>  [414,]  823  156  157  139  877  749  270  589  789   960 #>  [415,]  100  906  699  518  317  762  442  676  471   910 #>  [416,]  364  585  213  553  692  315  624  439  100   684 #>  [417,]  969  593  893  936  384  679  169  183  175   963 #>  [418,]  942   91  959  108  278  458  359  562  409   719 #>  [419,]  194  303  603   57  253  649  582  647  550   710 #>  [420,]  133  619  480  924  210  540  651  108  876   515 #>  [421,]  855  930  881   46  434  388  572   14  403   896 #>  [422,]  310  423  342  256  667  879  523  962  321   941 #>  [423,]  954  422  738  688  310  484  866  342  432   941 #>  [424,]  122  917  940  329  538  454  997   39  128   981 #>  [425,]  392  727  536  166  827  700  391   10  283    76 #>  [426,]  189  324  155  568  833  242  904  221  839   961 #>  [427,]  957   17  117  845   30  514  322  915  390   473 #>  [428,]  573  309  232  223  904  242  383  722  388   443 #>  [429,]  795   25  602  504  928  496  814   11  274   636 #>  [430,]   60  373   54  494  769   37  347   53  730   112 #>  [431,]  116   81  982  951  507  851  168  406  675   152 #>  [432,]  962  941  310  186  866  743  435  837   63   670 #>  [433,]  964  919  318  222  988  333  530  853  835   532 #>  [434,]   14  855  421  264  917  930  329    5  940   281 #>  [435,]  866  179   66  968  186  962  743  432  484   287 #>  [436,]  929  732  797  991  335  757  760  211  529   765 #>  [437,]  990   23  177  986  292  408  571  524  272   671 #>  [438,]  892  597  147  927  225  350  214  174  548   450 #>  [439,]  307  906  585  139  156  416   32  789  823   684 #>  [440,]  613  751  739  600   59  717  810  521   29   408 #>  [441,]  376  695  773  907  639  352  635   44  479   469 #>  [442,]  317  676  188  145   32  912  762  114  824   800 #>  [443,]  246  713  633  345  223  388  869  182   89   816 #>  [444,]  214  350  597  385  630  233  723  808  438   748 #>  [445,]  375   49  241  889  921  834  330  363  150   639 #>  [446,]  637  721   47  752  995  277  194 1000  731   669 #>  [447,]  451  409  132  665  515  826   39  981  412    64 #>  [448,]  150  333   86   10   19  352  286  727  905   271 #>  [449,]  616  503  346  251  913  574  880  788  798   947 #>  [450,]  541  698  252  879  174   45  670  389  249   667 #>  [451,]  447  409  665  132  826  412  515   39  981   562 #>  [452,]  832  909  184  612  915  771  884  874  284   323 #>  [453,]  703   85  840  714  135   57  772  669   47   281 #>  [454,]  382  538  122  329  277  264  851  424  572   731 #>  [455,]  975  495   74  646  744  680  578  510  283   114 #>  [456,]  976  984  609  410  889  375  576  582  285   550 #>  [457,]  202  756  289   51  825  797  470  701  883   396 #>  [458,]  372  505  959  418  942   91  203  683  626    61 #>  [459,]   71  784  705  475  220  985  828  644  185   105 #>  [460,]  140  494  833  699  373  476  518  901  226   471 #>  [461,]  630  272  206  521  535  292  820  739  177   990 #>  [462,]  838  916  314  525  859  395  809  878  706   487 #>  [463,]  509   24  493  113  502  485  151  972  594   928 #>  [464,]  296  804  290  168  152  596  945   90  729   853 #>  [465,]  522  163  488  393  922  780  237  402  599   913 #>  [466,]  673   97   84  665  864  255  402  377  260   913 #>  [467,]  877  847  156  589  139  363   19  414  271   374 #>  [468,]   26  357  165  981  819   73   64  487  574   181 #>  [469,]  479  885  376  265  561  635  632  591  979   441 #>  [470,]  890  358  457  860  797  154  218  732   51   436 #>  [471,]  518  985  105  615  699  140  476  460  475   627 #>  [472,]  286  510  269  591  905  610  352  654  744   578 #>  [473,]  779  850  957  709  845  836  514  590  390   427 #>  [474,]  613  127  750  125  440  751  137  678  815   674 #>  [475,]  985  753  784  185  459  705  771  384  220    71 #>  [476,]  140  226  764   82  221  901  275   17  615   985 #>  [477,]  666  266  170  577  558  334  407  631  977   167 #>  [478,]  598  118  740  365  301  529  777  830  436   400 #>  [479,]  469  376  265  352  591  885  441   67  286   635 #>  [480,]  619  924  420  651  876  133  210  851  152   370 #>  [481,]  639  907  695  441  352  166  827  785  118   376 #>  [482,]   80  159  492  107  899  971  822  279    3   818 #>  [483,]  231  211  830  365  187   93  478  740  775   339 #>  [484,]  954   92  939  688  866  738  423  435  846   179 #>  [485,]  504  928  636  113  463   24  594  509  493   496 #>  [486,]  871  201  787  782  973  660  557  914  626   686 #>  [487,]  859  786  706   26  878  788   64  916  119   138 #>  [488,]  465  599   77  922  123  163  780  522  393   237 #>  [489,]  903  982  500  160  296  300  168  507  870   431 #>  [490,]  219  575  130  704  280  520  145  187  328   269 #>  [491,]  720  219  328  711  227  144  967   42  681   741 #>  [492,]   80  482  899  159  848  822  279   56  361   971 #>  [493,]  502  151   24  837  463  509  113  485  674    83 #>  [494,]  373  430   54  367  460  140  833  634  867   854 #>  [495,]  455    1  114  975  744  690  663  578  646    74 #>  [496,]   11  636  861  504  594   98  928  485   25   274 #>  [497,]  898  870  903  728  160  136  208  197  733   489 #>  [498,]  565  223  397  320  337  572  383  242  869    48 #>  [499,]  657  330  267  400  217  921  136  648  339   601 #>  [500,]  733  997  770  197  160  128  555   69  168   940 #>  [501,]  880    4  503  848  361  616  629  623  852   449 #>  [502,]  151  837  493   24  463  360  113  894   83   485 #>  [503,]  616  449  501  880  346  947  251  361  574   788 #>  [504,]  485  928  636  496  113   98  274  861  594   795 #>  [505,]  458  372  959  418  868  742  626  683   91   942 #>  [506,]  693  880  361  949  932  623  888  263  561   138 #>  [507,]  675  982  303  840  937   57  431  353   81   218 #>  [508,]  182  742  178  642  713  345  868  443  539    33 #>  [509,]  463  594  493  485  777  636  113   24  502   750 #>  [510,]  646  744  578  865  472  286  269  923  130   591 #>  [511,]   99  748   96  614  927  141  429  795  696   602 #>  [512,]  131  576  550  375  581  441  635  773  695   590 #>  [513,]  107  524  971    3  986  159  712  533  408   600 #>  [514,]  957  427  847  336   17  993  473  390  504   845 #>  [515,]   39  132  447  682  133  451  119  108  540   122 #>  [516,]    2  381  340  706  908  138  966   64  530   611 #>  [517,]   77  123  488  163  955  170  671  543  191   465 #>  [518,]  471  699  668  121  297  985  105  460  762   627 #>  [519,]  295  650  763  379  143  371  248  790  195    73 #>  [520,]  783  575   44  280  856  257  737  328   20   591 #>  [521,]  739   29   15   59  810  440  268  294  408   751 #>  [522,]  465  922  393  402  260  163  716  864  377   488 #>  [523,]  287  962  342  879  524  321  866  422  325    66 #>  [524,]  513  986  971  962  107  897  408  177  533   523 #>  [525,]  706  859  843  462  838  878  487  356  916    13 #>  [526,]  169  826  759  835  779  413  222  893  964   798 #>  [527,]  215  401  263  560  769  199  782  276  679    68 #>  [528,]  999  193  583  103  248  716  604  650  621   643 #>  [529,]  301  335  929  732  972  991  262  436  823   589 #>  [530,]   75  964  169  719  526  611  893  969  942   348 #>  [531,]  890  218  937  353  238  134  154  641  840    51 #>  [532,]  778  378  185  153  318  245  433  348  530   988 #>  [533,]  600  687  807  674  338  783   20  440  856   513 #>  [534,]  887  705   71  374  467  336  261  139  828   847 #>  [535,]   27  206  799  659  645  268   15  920  521   584 #>  [536,]  827  166  907  695  700  441  425  376  479   352 #>  [537,]  299  211  231  775  349  364  315  760  830   129 #>  [538,]  329  454  122  382  851  917  424  651  264    69 #>  [539,]  182  713  802  443   46  388  266  631  916   930 #>  [540,]  108  682  515  420  133   39  119  348  611    64 #>  [541,]  450  879  249  389   45  670  724  698  766   180 #>  [542,]   87  990  577  571  816  200  437  350  233   677 #>  [543,]   42  123  387  488  144   77   62  599  736   741 #>  [544,]  110  712  341  863  313  897  935  240  354   947 #>  [545,] 1000  661  731  673  357  803  647  194  721   377 #>  [546,]   46   58  388  896  421  808  930  881  223   572 #>  [547,]  900  809  818  314  209  956  395  736  934   681 #>  [548,]   99  511  214  205  927  748  892   48  614    96 #>  [549,]  124  902  862  725  933  814  636  141  637    11 #>  [550,]  576  581  512  131  603  375  124  609  419   456 #>  [551,]  567  818  244  547    3   12  482  239  369   681 #>  [552,]  780  354  282  712  237  313  671  822  159   465 #>  [553,]  910  235  100  624  364   92  416  846  738   585 #>  [554,]  734  842  137  595  740  118   40  103  895   621 #>  [555,]  128  164  733  997  728  940  770  882  500   424 #>  [556,]  849   82   16  664  993  989  355  112  347   297 #>  [557,]  782  730   37  867    9  302  401  978   60   769 #>  [558,]  956   35  631  266  580  633  142   89  517   306 #>  [559,]  344  841  791  643  300  604  343  649  379   253 #>  [560,]  215  769   56  863  401   53  186   83   16   276 #>  [561,]  979  469  885  276  632  265  932  635  255   863 #>  [562,]  409  117  798  826  412  278  251  346  312   942 #>  [563,]  853  300  195  841  101  392  222  813  695   945 #>  [564,]  707  974  967  918  741  176  938   42  123   955 #>  [565,]  132  383  498  397  412  451  515  566  111   447 #>  [566,]   30  652  311  117  412  845  961  957  312   212 #>  [567,]  492  369  482  551  818  787  404   80  726   848 #>  [568,]  961  189  586  904  697  634  833  426  324   192 #>  [569,]  958  679  664  849  199  963  417  905  610   969 #>  [570,]  406  825  285  883  202  149  289  116  457   353 #>  [571,]  607  437  162  990   87  542  986   23  292   177 #>  [572,]  731  397  382  277  995  454  498  264  281   421 #>  [573,]  309  232  428  722  386  383  881  242  904   565 #>  [574,]  377  913  788  992  449  616  393  665  357   402 #>  [575,]  520  704  737  328  591  219  923  280  783    68 #>  [576,]  131  550  512  836  850  590  581   94  609   126 #>  [577,]  266  306  816   89  633  990  808  437  580   666 #>  [578,]  744  646  510  865  472  658  923  608  201   286 #>  [579,]  653  948  694  702  240  304  814  347  275   398 #>  [580,]  633   89  306  246  992  282  816  886  574   869 #>  [581,]  603  550  576  512  810  411  716  260  124   131 #>  [582,]   81   57  303  710  456  116  168  419  813   647 #>  [583,]  193  604  528  643  103  999  938  380  176   621 #>  [584,]  319  799   85   47  535  721   27  925  206   446 #>  [585,]  684  360  416  662  877  198  129  823  589   911 #>  [586,]  697  189  961  324  634  702  568  715  579   796 #>  [587,]  212  221  305  324  326  764  805  983  672   148 #>  [588,]  618   79  718  396  601  648  374  217  825   887 #>  [589,]  877  823  335  467  662  156  360  463  414   684 #>  [590,]  126  836  850  131  576  635  709  473  512   241 #>  [591,]  737  352  376  469  479  286  472  441  520   885 #>  [592,]   60  297   16  730  355  401  394  121  762   867 #>  [593,]  417  169  183  779  915  719  969  893   17   384 #>  [594,]  636  509  496  485  991  463  504  928  124   113 #>  [595,]  338  687  257  785  783   44  280  533  600   689 #>  [596,]  767  813  168   90  296  770  759  464  945   210 #>  [597,]  350  438  233  723  952  444  748  214  927   892 #>  [598,]  777  478  118  301  621  288  137  750  613   895 #>  [599,]    6  237  115  780  488  411  979  465  922   354 #>  [600,]  533  687  440  807  674  338  613  513  595   897 #>  [601,]  217  648   55   86  267  921  290  374   19   729 #>  [602,]  928  636  844  429  795  113  304  496  943   765 #>  [603,]  581  194  550  419  803  661  810  637  609   260 #>  [604,]  583  999  380  528  103  791  621  193  842   559 #>  [605,]  972  262  911  129  198  335  463  684  502   360 #>  [606,]  800  824  946  973  660  199  190  996  958   912 #>  [607,]  571  162   12  980  437   87   23  244  542   990 #>  [608,]  638  201  812  811  173  871  680  914  658   578 #>  [609,] 1000  625  725  576  862  456  466  803  550   194 #>  [610,]  654  905  958  849  960  569   16  664  472   679 #>  [611,]  348  108   75  530  719  942  418  540  278    78 #>  [612,]  874  149  284  111  452  832  323  909  305   184 #>  [613,]  440  137  750  474  810  751  600  895  777   674 #>  [614,]  748  511  656  752   48  141  723  696  755    99 #>  [615,]  471  105  985  476  140  926  460  518    7   220 #>  [616,]  449  503  346  251  788  880  501  798  312   574 #>  [617,]  450  389   22  541  597  542  438   34  667   879 #>  [618,]  588   79  396  217  534  374  307  789  601   887 #>  [619,]  480  420  924  876  133  651  210  152  851   770 #>  [620,]  757  405  125  641  238  920  890   51  797   134 #>  [621,]  103  895  288  253  999  528  581   15  717   603 #>  [622,]  279  724   18  677  142  249  899  120  162   935 #>  [623,]  361  506  880  209  848  501  693  158   13   809 #>  [624,]  100  553  766  416   34  692  315  364  699   910 #>  [625,]  725  913  862  609  255  377  665   94  992  1000 #>  [626,]  372  914  458  273  686  203  683  871  978   782 #>  [627,]  146  668  996  471  518    7  985  683   36   753 #>  [628,]   71  998  708  261  452   88  909  220  612   326 #>  [629,]  978  852    4  501   37  247  368  683  373   868 #>  [630,]  461  350  385  272  656  444  990  292  577   723 #>  [631,]  331  191  558   35  407  819  170  580  916   691 #>  [632,]  276  885   67  265  905  175  469  561  888   963 #>  [633,]  580  306   89  246  816  266  443  577  869   713 #>  [634,]   54  854  586   45  698  697  948  494  568   653 #>  [635,]  836  885  376  469  131  441  590  695  512   265 #>  [636,]  928  485  496  504  594  113  602   11  509   765 #>  [637,]  446  752  194  603  669  862  549   47  277   725 #>  [638,]  608  201  173  871  914  686  812  811  908   658 #>  [639,]  481  695  441  352  241  376  512  907  150   773 #>  [640,]  820  259  689  127  325  239  857   40  474   137 #>  [641,]  405  920  134  714  238  840  620   85  531   353 #>  [642,]  742  959  904  868   61  505  722  345  178   192 #>  [643,]  343  298  344  583  528  649  254  559  193   379 #>  [644,]   72  291  784  828  459  534  705  245  307    71 #>  [645,]  659  268  535   27   40  938  799   15  583   193 #>  [646,]  510  744  578  865  472  923  286  658  975   608 #>  [647,]  710   69  545   57  194  649  419  277  254   661 #>  [648,]  601  290  136  921  217  729   55  101  374   267 #>  [649,]  661  254  379  803  647  344  710  419  248   643 #>  [650,]  519  248  528  999  143  379  193  763  790   295 #>  [651,]  851  480  210  133  619  538  420  924  454   382 #>  [652,]  566  398  845  715  110  311  412  957  814   117 #>  [653,]  948  694  579  347  275  112  702   54  398   993 #>  [654,]  960  610  270  690  912  958  663  905  472   271 #>  [655,]  171  805  243  320  873  983  234   48  548   324 #>  [656,]  614  902  761  748  943  637  511  752  549    99 #>  [657,]  136  499  400  648  300  330  106  791  685   921 #>  [658,]  923  865  228  201   68  578  527  932  871   806 #>  [659,]   27  645  535  799  268   15  583  895  206    40 #>  [660,]  973  996  606  946  686  190  871   36  273   486 #>  [661,]  803  260  545  649 1000  673  790  716  864   194 #>  [662,]  360  198  113   24  877  589  274  129  891   928 #>  [663,]  960  157  269  270  654  130  114  414  690   472 #>  [664,]  989  958  849  569  556  610  847  336  467   679 #>  [665,]  377  466  451  826  913  673  447  625  255   357 #>  [666,]  477  266  577  977  334  407  170  781  558   306 #>  [667,]  879  321   22  422  256  310  389  325  174   342 #>  [668,]   36  518  121  973  946  867  627  373  146   683 #>  [669,]  858  277  772  637   47  752  446  194  995   382 #>  [670,]  341  249   54  180  724  240  541  694  698   743 #>  [671,]   29  408   59  552  163  282  739  237  294   780 #>  [672,]  284  326  305  874  587  612  111  212  221   805 #>  [673,]  466  402  377  864  790  357   84  260  803   545 #>  [674,]  807  897  533  493  751  783  600  186  151   502 #>  [675,]  507  982  840  937  431  353  951  703   57   218 #>  [676,]  188   32  145  317  762  910  442  355   28   912 #>  [677,]  200  142  724  931   87  622  249  180  279    89 #>  [678,]   63  844  815  304  943  952  761  252  310   602 #>  [679,]  963  569  175  969  936  417  199  849  893   263 #>  [680,]   76  812  811  608   10  727  425  286  392   638 #>  [681,]  144   31  158   42  711   62  543  736  934   209 #>  [682,]   39  119  515  540   95  424   64  122  447   917 #>  [683,]  146  372  901  978  629  203  368  384   91   936 #>  [684,]  129  823  585  360  877  198  335  605  262   911 #>  [685,]  400  339  734  740  118  365  481  842  907   554 #>  [686,]  914  273  871  201  263  638  888  949  908   660 #>  [687,]  600  533  338  807  595    6  440   20  783   257 #>  [688,]  954  484  738  423  846   92  866  342  287   435 #>  [689,]  338  793  595  857  239  533  259  600  687   783 #>  [690,]  912    1  654  958  610  960  800  663  824   270 #>  [691,]  165  331  407  819    5   14  334   73  170   357 #>  [692,]   82  275  230  948  699  556  105  476  653   140 #>  [693,]  506  880  932  361  561  623  265  138  949    67 #>  [694,]  653  347  112  948  579   54  240  275  398   341 #>  [695,]  441  639  376  481  352  635  512  536  907   479 #>  [696,]  141  933  715  814  723  952  796  311  886   652 #>  [697,]  796  586  698  715  634  961  568  189  952   579 #>  [698,]  697  450  634  796  670  252  541  304   45   586 #>  [699,]  518  121  297  471  460  867   82  692  762   140 #>  [700,]  536  827  166  380  425  994  650  999  741   391 #>  [701,]   25  861  274  289  756  795  202   98   11   429 #>  [702,]  948  275  579  653  586  694   96  304  148   634 #>  [703,]  453  840  714  135   57   85   69  507  710   669 #>  [704,]   68  179  575  228  923  806  394   20  856   520 #>  [705,]   71  220  828  534  459  336  105  985  475   989 #>  [706,]  859  487   26  340   13   64  138  916  525   878 #>  [707,]  564  967  918  974  741  176  938  380   42   955 #>  [708,]  261  149  326  628  805  887  612  570  672   284 #>  [709,]  779  963  473  590  679  905  126  836  569   175 #>  [710,]  647   69   57  582  649  419   81  545  194   254 #>  [711,]  144  227   62   31  681  158  328   42  491   923 #>  [712,]  544  971  552  354  313  947  282  897  899   935 #>  [713,]  182  443  539  633  246  266  388  558   89   816 #>  [714,]  703  840   85  453  641  134   57  303  135   419 #>  [715,]  796  696  697  652  586  141  869  961  240   341 #>  [716,]  260  922  864  411  522  803  661  581  528     6 #>  [717,]  411   59    6  294  895  440  103  115  810   938 #>  [718,]    8  588  729   88  618  648  601  267  290   870 #>  [719,]   75  183  942  278  169  593   91  417  562   530 #>  [720,]  491  328  219  338   42  239  144  711  967   741 #>  [721,]  446  194   47  545  277 1000  637  647  995   264 #>  [722,]  386  904   61  309  959  573  242  359  792   565 #>  [723,]  233  696  748  350  952  141  796  715  614   816 #>  [724,]  249  622  677  200  180  670   87  541  142   341 #>  [725,]  862  933  625  549  609   94 1000  814  752   124 #>  [726,]  404  369  968  302  567   66   18  161    9   787 #>  [727,]   10  392  919  286  283  425  448  333  479    67 #>  [728,]  195  882  216  555  733  164  197  128  945   295 #>  [729,]  290  464  296  945  804  160  648  152  168   101 #>  [730,]  867   60  557  121  373  297  430  592   37   401 #>  [731,]  545  572 1000  357  397  277  992  454  377   382 #>  [732,]  991  436  797  929  529  335  594   98  358   589 #>  [733,]  500  197  997  555  128  164  940  770  728   195 #>  [734,]  740  554  118  685  842  339  365  595  478   785 #>  [735,]  802  334  977  104  691  331   14  407  768   170 #>  [736,]  158  209   13  123  395  543   62  809  387    77 #>  [737,]  591  352  575  520   44  286  785  376  269   479 #>  [738,]  846  954  688  484  423   92  939  911  866   605 #>  [739,]  521   29  440  751  408   59  810  294  671    15 #>  [740,]  734  118  365  339  478  554  685  400  598   785 #>  [741,]  967  707   42  543  176  564  387  918  123   974 #>  [742,]  868  642  345  178  852  505   38  629  959   904 #>  [743,]  935  186   18  432  279    9  962  435  670   249 #>  [744,]  578  646  510  865  472  286  114  130  269   690 #>  [745,]  602  258  205  765   99  844   11  274   96   429 #>  [746,]  776  505  458  372   36  626  683  203  146   627 #>  [747,]   72  784  245  946  800  606  996  153  185   660 #>  [748,]  614  511  723  141  696  656  952  927   96    99 #>  [749,]  789  414  157  823  156  139  330  529  270   217 #>  [750,]  613  509  943  125  810  124  474  594  751   902 #>  [751,]  897  408  440  739  810  674   29  613  124   521 #>  [752,]  637  446  933  862  725  995  277  614  669    47 #>  [753,]  384  190  475  996  185  183  417  985  771   593 #>  [754,]  486  776   36  973  660  369  557  965  746   787 #>  [755,]  925   48  385  995  614  281   47  337  669   320 #>  [756,]  202  457  396  861  701   98  258  883  289   274 #>  [757,]  436  211  620  797  732  125  929  478  765   991 #>  [758,]  908  209  158  623  787  811  638   13  608    31 #>  [759,]  526  410  222  169  853  333  813  779  596   826 #>  [760,]  258  436  929  335  732  129  789  662  589   991 #>  [761,]  943  844  902  656  678  602  750  952  304   815 #>  [762,]  355  188  297   16  121  556  592  676  989   849 #>  [763,]   73  371  790  143  519  379  181  295    5   650 #>  [764,]  336  476  230   17  220  514  427  874  587   909 #>  [765,]  113  928  636  602  929  594  463  198  509   335 #>  [766,]  389  541  879   45  962  432  310  743  670   624 #>  [767,]  596  813  413   90  128   84  945  759  770   981 #>  [768,]  802   14  855  468  930   26  165    5  691   434 #>  [769,]   37   60  401   53  560   56  430  215    9   935 #>  [770,]  152  168  596  210  128  924  767  500  296   997 #>  [771,]  293  909  452  915  184  183  926   17  475   832 #>  [772,]  669  858  337  453  308  851  703  382  840    57 #>  [773,]  257   44  441  777  807  115  376  512  131   785 #>  [774,]  395  314  900  191  809  736  181   13  547   934 #>  [775,]  830  299  127  423  474  256  422  231  954   738 #>  [776,]  978  746   36  626   38  629  683  505  372   367 #>  [777,]  301  598  509  773  257  785  972   44  463   118 #>  [778,]  532  318  208  245  433   88  185  884  988   729 #>  [779,]  473  709  593  169  963  526  957  390  417   826 #>  [780,]  237  354  552  599  465    6  313  979  488   115 #>  [781,]  407  306  446  995  808  334  633  580  752   721 #>  [782,]  557   37  401  527  978  730  769  871  867   199 #>  [783,]  520  280  807  856  257   44  338   20  533   674 #>  [784,]  459  475  245  985  185   72  644  705   71   828 #>  [785,]   44  257  118  280  907  520  773  777  737   783 #>  [786,]  788  487  878  119   64  616  346  418  383   574 #>  [787,]  557  486    4  658  369  782  848  201  871   758 #>  [788,]  786  574  616  346  449  487  665   64  992   377 #>  [789,]  749  414  156  823  139  358   79  860  396   760 #>  [790,]  763  673  864   73  143  402   84  661  803   357 #>  [791,]  841  300  559  344  253  999  834  604  248   528 #>  [792,]  293  926    7  359   61   78  722  221  771   959 #>  [793,]  338  239  533    3  857  689  866  107  600    20 #>  [794,]  403  881  421  337  281  546  896  755  930   925 #>  [795,]  429   25  602  504  496  274  928   11  636   861 #>  [796,]  715  697  952  180  698  696  200  341  586   670 #>  [797,]  732  991  436  327   51  594  289   11  496   929 #>  [798,]  251  893  346  562  949  138  826   91  616   880 #>  [799,]   27  535  298  659  645  316  268  584  643   721 #>  [800,]  824  606  912  946  958  690  199    1  973   569 #>  [801,]  235  415  553  100  624  416  364  910  965   699 #>  [802,]  768  930   14  855   46  539  691  331  165   916 #>  [803,]  661  260  716  864  673  545 1000  790  649   248 #>  [804,]  464  296  406  152  323  168  116  290  210   976 #>  [805,]  234  587  672  326  655  212  320  171  708   148 #>  [806,]  228  394   68  302  179  704  145  188  939   215 #>  [807,]  783  856  674  533  257  115   20  687  773   600 #>  [808,]  577  306  816  781  385  546  246  266  633   233 #>  [809,]  395  314   13  736  547  623  859  209   35   838 #>  [810,]  124   15  739  895  440  581  521  717  751   603 #>  [811,]  812  608  680   31  638  102   76  158  711   758 #>  [812,]  811  680  608  638   76   31  173  711  227   646 #>  [813,]  596  767  410   97  168  759   84  413  853    90 #>  [814,]  141  240  933  579  696  549  862  429   94   725 #>  [815,]  678   63  292  321  177  180  986  952  751   990 #>  [816,]   89  306  246  633  233  580  577  931  869   200 #>  [817,]  953  236  207  213  258  760  944  416  585   439 #>  [818,]  956  482  159  822  492   80    3  107  517   899 #>  [819,]  393  331  165  191  402  691  522  181  357   465 #>  [820,]   23  272  177  292  521  440   40  259  739   408 #>  [821,]  187  339   93  365  740  734  685  219  118   490 #>  [822,]  159   80  492  552  482  107  780  971  354   899 #>  [823,]  414  156  877  589  684  139  157  335  960   749 #>  [824,]  800  606  946  199  912  958  569  973  690   190 #>  [825,]  457  570  218  202  353  154  883  756  507   937 #>  [826,]  526  409  562  665  451  412  447  798  779   169 #>  [827,]  166  536  907  700  352  695  425  441  481   376 #>  [828,]  105  705  459  985  644  534  784  989   71   220 #>  [829,]  238  620  196  405  890  641  531  757  920   470 #>  [830,]  231  605  972  775  211  301  129  478  262   335 #>  [831,]  178  155  642   38  839  742  508  204   33   854 #>  [832,]  184  452  915  390  322  278  612  874  210   976 #>  [833,]  226  460  140  494  192  568  634  426  901   221 #>  [834,]  375  300  950  445  101  889  253  791  841   410 #>  [835,]  222  919   67  333  964  265  526  413  759   853 #>  [836,]  635  590  850  255  576  131  126  410  473   512 #>  [837,]  502  151  493   24  894  360  463   83  941   911 #>  [838,]  878  916  462  859   35  224  809  525  487   314 #>  [839,]  155  426  189  983  324  568  242  833  634   586 #>  [840,]  703  714  453  507  134  675  353   57  303   937 #>  [841,]  791  300  344  559  563  834  253  248  999   379 #>  [842,]  554  734  604  288  583  621  103  659  380   137 #>  [843,]  356  525  706   95  381  487    2  462  516   859 #>  [844,]  304  678  602  943   63  761  765  252  745   928 #>  [845,]  117  957  427  398  652   30  412  473  993   566 #>  [846,]  738  954  688  484   92  423  939  910  553   911 #>  [847,]  336  514  467   17  664  363  230  709  390   993 #>  [848,]    4  492  501  361  899  120  623  247  880    80 #>  [849,]  556   16  664  679  569  963  610  958  199   401 #>  [850,]  836  590  473  576   94  126  255  131  779    83 #>  [851,]  651  538   81  382  210  454  329  116   69   431 #>  [852,]  247  987    4  868  629  501  848  120  345   224 #>  [853,]  222   90  945  333  919  759  101  813  835   563 #>  [854,]   45  634  367   54  494  670  724  698  541   568 #>  [855,]  421  930   14   46  434  388  881  572  264   768 #>  [856,]   20  807  783  520  979  533  257  115  687    44 #>  [857,]  239  793  689  338  259  287  219    3  720   595 #>  [858,]  285  669  984  311  772  234  116  976  277   111 #>  [859,]  706  487  916   26  878   13  838  395  809   138 #>  [860,]  358  470   79  789  749  732  396  436  211   529 #>  [861,]   98  274   25  496  701  504   11  984  289   202 #>  [862,]  725  933  625  549  609   94  814  752  124  1000 #>  [863,]   83  544  313  560  947  110   56  354   53   186 #>  [864,]  922  260  402  673  716  466  790   97  803   522 #>  [865,]  510  578  923  646  658  744  228  472   68   575 #>  [866,]  435  962  484  432  186  179  287   66  954   423 #>  [867,]  121  730  373  297   60  430  367  557  494   668 #>  [868,]  345  742  852  629  878  501  503  616  505   312 #>  [869,]  992  246  223  715  961  652   89  397  816   580 #>  [870,]  160  903  489  500  898  729  733  945  728   296 #>  [871,]  201  914  686  638  486  263  782  608  273   527 #>  [872,]  369  726  490  923  658  228  551  227  704   806 #>  [873,]  171  672  805  326  655  229  284  708  587   305 #>  [874,]  284  111  305  612  909  915  322  212  427    17 #>  [875,]  316  343  799  643  659   27  583  298  559   604 #>  [876,]  619  480  924  109  420  370  133  651  538   851 #>  [877,]  589  823  467  156  360  335  662  684  414   463 #>  [878,]  487  838  786  859  916  788  868  616  706   503 #>  [879,]  389  541  667  962  321  310  450  249  523   766 #>  [880,]  361  506  501  503  616  947  449  251  693   798 #>  [881,]  421  403  794  855  930  572  232   46  388   397 #>  [882,]  216  728   90  164  195  413  128  945  555   964 #>  [883,]  202  889  406  984  285  363  323   49  861   456 #>  [884,]  452  832   88  184  804  464  420  152  210   619 #>  [885,]  632  276  469  635  561  265   67  479  376   979 #>  [886,]  282  696   89  180  715  408  933  580  306   952 #>  [887,]  534  261  323   71  149  756  705  909  396   363 #>  [888,]  263  175  969  949  632  893  679   67  914   276 #>  [889,]  883  363   49  375  456  445  101  834  984   202 #>  [890,]  218  470  531  154  106  327   51  134  797   937 #>  [891,]  198  941  911  129  315  662   24  360  605   310 #>  [892,]  438  927  548  205  597  147  214   96  748    52 #>  [893,]  969  417  175  798  936  169  949  679  251   593 #>  [894,]   16  837   28  151  502   83  215  360  355   560 #>  [895,]  621  103   15  717  810  268  137  411  581   294 #>  [896,]  546  421  930   46  855  281  925   14  388   434 #>  [897,]  751  544  712  674  282  408  313  237  354    94 #>  [898,]  903  870  497  136  160  489  267  648  657   729 #>  [899,]   80  492  159  279  482  971  712  142  935   947 #>  [900,]  547  774  314  395  809  736  681  956  191   974 #>  [901,]  368  146  384  192  226  183  683  140  936   476 #>  [902,]  549  124  943  656  761  810  141  862  637   933 #>  [903,]  489  300  136  841  160  898  870  791  559   500 #>  [904,]  961  242  722  568  189  223  426  428   61   324 #>  [905,]  610  632  175  709  679   67  569  963  276   885 #>  [906,]  307  439  317   32  828  676  139  585  912   989 #>  [907,]  827  441   44  166  536  481  257  695  785   376 #>  [908,]  914  758  686  638    2  949  966  506  516   626 #>  [909,]  915  452  874   17  220  771  336   71  323   612 #>  [910,]  100   92  676  553  145  188  762   28  592   484 #>  [911,]  605  198  129  891  941  972  360  262  837   502 #>  [912,]  690  958  800  824    1  654  610  960  664   606 #>  [913,]  377  625  255  574  665  402  449  465  522   466 #>  [914,]  686  871  263  273  949  201  888  908  638   626 #>  [915,]   17  390  909  832  593  427  874  322  184   452 #>  [916,]  859  878  838  487  462   35   26  395  706   191 #>  [917,]  424  329  122  940  538  997  454  109  264   434 #>  [918,]  176  707  938  955  193  564  741  583  380   967 #>  [919,]  222  835  333  964  727  853  392   67   10   433 #>  [920,]  206   27  641  405  535   15  620  659  656   714 #>  [921,]  330   86  217  150   55  445  374   19  241   270 #>  [922,]  864  393  522  402  716  260  465  488  599   673 #>  [923,]  658  865  228   68  704  575  932  510  646   578 #>  [924,]  619  480  770  152  210  420  876  851  651   133 #>  [925,]  995  755   47  281  319  385  446  781  752   584 #>  [926,]    7  293  771  792  985  220  615  475  476   326 #>  [927,]   96  983  511  748   99  148  548  697  952   304 #>  [928,]  113  485  636  504  602   24  496  463  274   765 #>  [929,]  335  436  732  991  129  529  765  972  589   463 #>  [930,]  855  421   46  388   14  881  896  546  434   802 #>  [931,]  200  677  345  178  816   89   87  724  796   246 #>  [932,]  506  561  693  632  469  265   62  361  276   158 #>  [933,]  862  725  696  141  814  752  549  311  625   652 #>  [934,]   31  681  227  158  900  209  144  547  711   811 #>  [935,]  544  279  743  712  899  110  341   56  947   120 #>  [936,]  969  679  417  893  199  384  263  963   91   175 #>  [937,]  218  507  154  675  531  982  106  840  303   890 #>  [938,]  176  193   40  918  103  717  268   59  895   411 #>  [939,]  484   28   92  894  262  954  394  837  911   866 #>  [940,]  424  917  122  164  997  981  329  128  733    73 #>  [941,]  891  432  310  911  837  502   24  493  151   198 #>  [942,]   91  418  719   75  562  183  278  359  798   893 #>  [943,]  761  902  844  602  750  678  636  765  124   549 #>  [944,]  236  817  953  537  258  205  760  213  745   349 #>  [945,]   90  853  296  464  596  767  813  160  128   168 #>  [946,]  973  824  996  606  800  660  668  190  199    36 #>  [947,]  354  313   56  712  863  361  880  544  780   503 #>  [948,]  653  275  702  579  694  347   54  112   82   398 #>  [949,]  263  893  888  506  798  969  914  175  273   880 #>  [950,]  303  327  834  106  253  375  154  419  288   582 #>  [951,]  431   70  982  924  851  675   81  116  152   770 #>  [952,]  796  141  696  723   63  304  715  678  180   886 #>  [953,]  817  207  236  258  213  760  944  701  756   148 #>  [954,]  738  423  484  688   92  939  846  866  911   605 #>  [955,]   77  176  488  123  918  170  517  193  163   938 #>  [956,]  818  558   35  517  159   77   80  191  631   492 #>  [957,]  427  845  514  117  473  993   17   30  779   322 #>  [958,]  569  664  610  849  679  912  905  824  199   654 #>  [959,]   61  359  418  458  505  192  942  372   91   722 #>  [960,]  654  610  663  269   28  270  894  414  823   690 #>  [961,]  568  189  586  904  324  566  715  869  697   652 #>  [962,]  432  866  523  524  879  435  743  310  287    66 #>  [963,]  679  709  175  276  779  569  969  417  893   849 #>  [964,]  222  919  835  530  433  526  333  169  853    67 #>  [965,]  367  161   34  867  699   36  121  460  668   776 #>  [966,]  102  172    2  908  516  811  638  608  758   686 #>  [967,]  741  707  564  974   42  918  543  681  176   720 #>  [968,]   66  435  179   18  302    9  866  743  806   592 #>  [969,]  893  417  175  936  679  888  263  593  963   169 #>  [970,]   95  356  611  540  386  119  108  418  682   348 #>  [971,]  107  712  513  159   80  899  482  822  524   552 #>  [972,]  262  605  335  301  463  129  911  198  929   509 #>  [973,]  660  946  996   36  606  668  824  190  782   199 #>  [974,]  564  707  967  741  918   42  123  900  543   681 #>  [975,]  455   74  646  744  495  510  680  578  283   114 #>  [976,]  390  456  322  323  116  285  984   81  210   832 #>  [977,]  666  334  781  584  407  319  477  896  170   799 #>  [978,]  629  373  683  782  367   37  867  557  146   494 #>  [979,]  561  115  599  354  780  237    6  469  885   635 #>  [980,]   12  244  607  571  162  259   50  287  523    23 #>  [981,]  357   84  673  413  164  790   73  466  447   665 #>  [982,]  507  675  431  489   81  116  937  951   57   582 #>  [983,]  324  927   96  586  189  587  697  702  148   243 #>  [984,]  285  456  883  861  496   25   11   49   98   976 #>  [985,]  475  471  105  615  705  784  459  753  476   220 #>  [986,]  524  437  180  990  177  513  408  142  249   292 #>  [987,]  852  247  224   38   33  120    4  178  622   279 #>  [988,]  318  271   19  333   55  759  222  853  101   150 #>  [989,]  664  556  849  958   82  355  569  105  847   336 #>  [990,]  437  177  292  986   23  408  272  577  815   180 #>  [991,]  732  797  594  929   98  436   49  335  529   496 #>  [992,]  869  574  625  913  377  397  665  580  731   449 #>  [993,]  112  347  556  514  957  398  845   83  427    82 #>  [994,]  700  519  425  295  650  387  332  143  741   536 #>  [995,]   47  281  446  925  277  572  752  721  637   264 #>  [996,]  190  946  973  660  753  203  627  606  384   273 #>  [997,]  733  940  555  500  424  917  128  770  122   329 #>  [998,]   88  628  459  185   71  784  771  452  884   475 #>  [999,]  528  248  103  604  716  650  193  621  253   791 #> [1000,]  545  609  194  731  661  803  673  625  725   377 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.50680119 0.6454476 0.8696443 0.9047671 0.9065816 0.9279152 0.9303131 #>    [2,] 0.36157721 0.6998046 0.7770222 0.8060881 0.8902528 0.8992172 0.9809477 #>    [3,] 0.38932358 0.5686263 0.6300410 0.6492836 0.6616188 0.6933960 0.7080395 #>    [4,] 0.33064825 0.4782759 0.5111896 0.5458224 0.5474323 0.6221450 0.6887457 #>    [5,] 0.39380640 0.4366601 0.6075002 0.6492945 0.6575900 0.7541422 0.7752569 #>    [6,] 0.19431981 0.2234631 0.2909840 0.3152815 0.4519592 0.4575262 0.5121058 #>    [7,] 0.21623136 0.7861065 0.8403350 0.8475425 0.8503241 0.8882149 0.9054549 #>    [8,] 1.01888170 1.2893073 1.4324441 1.6227147 1.7527148 1.7604322 1.7756169 #>    [9,] 0.48813774 0.5804017 0.5805403 0.5995374 0.6125627 0.6226196 0.6646320 #>   [10,] 0.24122135 0.4145009 0.4722767 0.5729407 0.5844678 0.5960184 0.6197249 #>   [11,] 0.29077197 0.5097199 0.5320299 0.5339098 0.5458907 0.6076134 0.6156203 #>   [12,] 0.65725472 0.7572631 0.9213428 1.0420603 1.3030471 1.3059410 1.3719468 #>   [13,] 0.58720891 0.6023708 0.6551671 0.6569271 0.6906686 0.8123380 0.8295170 #>   [14,] 0.53654711 0.6085013 0.6690424 0.6775714 0.7541422 0.8126975 0.8216656 #>   [15,] 0.40170178 0.4122098 0.5212235 0.5519525 0.6375649 0.6899162 0.6920074 #>   [16,] 0.38854271 0.3945620 0.4569821 0.4811698 0.4987924 0.5135839 0.5828719 #>   [17,] 0.30146564 0.3369482 0.4811004 0.5128234 0.5374557 0.5464835 0.5540581 #>   [18,] 0.46342827 0.5707459 0.5804017 0.6275993 0.6326245 0.6365848 0.6893253 #>   [19,] 0.24065734 0.3374590 0.3965944 0.5047649 0.5409021 0.5879333 0.6023376 #>   [20,] 0.17734483 0.5143762 0.5941205 0.6068068 0.6420483 0.6584885 0.6712434 #>   [21,] 1.02984217 1.1003651 1.1645255 1.2241618 1.2654615 1.2834574 1.3170656 #>   [22,] 0.64091773 0.8264042 0.9477724 0.9831172 1.0842547 1.1164151 1.1927312 #>   [23,] 0.44595147 0.5244654 0.6493512 0.6676636 0.6946292 0.7241968 0.7261365 #>   [24,] 0.23431625 0.2996038 0.3016651 0.3121522 0.3485738 0.3654141 0.4614916 #>   [25,] 0.33293858 0.3784364 0.3889542 0.4095435 0.4294443 0.5220478 0.5458907 #>   [26,] 0.36987784 0.5172285 0.5314765 0.5653779 0.6226558 0.7564069 0.7649292 #>   [27,] 0.34300571 0.4451346 0.5756959 0.6970150 0.7129759 0.7157391 0.7235320 #>   [28,] 0.49171060 0.5142012 0.5522937 0.6308159 0.6342899 0.6737530 0.7144565 #>   [29,] 0.28039818 0.3367446 0.3709018 0.4436136 0.4958902 0.5112100 0.6207724 #>   [30,] 0.36453580 0.3856262 0.4312045 0.4470927 0.5039235 0.5066583 0.5380081 #>   [31,] 0.58571277 0.6307546 0.6361826 0.6573239 0.6667712 0.7688061 0.7722035 #>   [32,] 0.57813750 0.6772125 0.8761738 0.9149248 1.0420522 1.0507154 1.0861968 #>   [33,] 0.76645401 0.9005363 0.9810414 1.0370352 1.2070837 1.2340793 1.4041602 #>   [34,] 0.83976660 1.0668558 1.1021255 1.1038369 1.1134502 1.1157602 1.1884566 #>   [35,] 0.67436495 0.6855680 0.7060499 0.7402540 0.7403431 0.7796401 0.8323001 #>   [36,] 0.51440433 0.6621927 0.8723783 0.8743244 0.8803681 0.9082673 0.9112544 #>   [37,] 0.23926139 0.4736433 0.5051539 0.5348132 0.5607807 0.5805403 0.6159581 #>   [38,] 0.59711836 0.6957919 0.7233977 0.7882750 0.8912572 0.9005363 0.9662288 #>   [39,] 0.35009156 0.4255700 0.5073060 0.5713954 0.6370568 0.6567701 0.6705419 #>   [40,] 0.56847713 0.7234683 0.7334305 0.7609786 0.7747716 0.8292034 0.8314975 #>   [41,] 1.05847657 1.6055084 1.7004844 1.7255250 1.7834529 1.8568557 1.8864748 #>   [42,] 0.25733196 0.4935336 0.5055725 0.6118236 0.7012896 0.7099501 0.7377199 #>   [43,] 0.63044900 1.0987422 1.4326142 1.5160734 1.5668631 1.5939439 1.6328339 #>   [44,] 0.21842711 0.4130215 0.4151486 0.4213785 0.4907018 0.5206428 0.5574878 #>   [45,] 0.39034112 0.6357607 0.6432224 0.6993851 0.7199301 0.7801432 0.7890670 #>   [46,] 0.25704914 0.5281116 0.6300784 0.6354636 0.6578430 0.8611414 0.8846836 #>   [47,] 0.35191575 0.4208021 0.4893253 0.5954894 0.6157541 0.6430817 0.6901765 #>   [48,] 0.56508706 0.6211005 0.7122938 0.7215604 0.8485050 0.8761426 0.9008955 #>   [49,] 0.44678865 0.4652874 0.5174984 0.5438666 0.5456847 0.6116315 0.6407832 #>   [50,] 0.63044900 1.3568321 1.4850679 1.5146813 1.5635032 1.5754648 1.5866030 #>   [51,] 0.65832546 0.7224054 0.7320866 0.7959399 0.8970974 0.9116926 0.9332075 #>   [52,] 0.72494450 1.0676047 1.0822642 1.1888109 1.2177764 1.2880005 1.3058974 #>   [53,] 0.40941904 0.5348132 0.5486639 0.5756093 0.5800134 0.5912367 0.6042452 #>   [54,] 0.48131098 0.4920011 0.5272656 0.5279363 0.5281964 0.5530539 0.5618269 #>   [55,] 0.33745900 0.4150712 0.4169526 0.5292109 0.5503959 0.5594635 0.5815361 #>   [56,] 0.45128733 0.4587061 0.5408768 0.5444548 0.6065211 0.6101289 0.6153344 #>   [57,] 0.45722960 0.4950876 0.5460155 0.5608967 0.5803699 0.5812295 0.6454952 #>   [58,] 0.67271688 1.1955420 1.2057572 1.2543234 1.2689641 1.3154006 1.3789541 #>   [59,] 0.33674460 0.4495252 0.4537767 0.4644731 0.5186172 0.5221502 0.5677707 #>   [60,] 0.39802174 0.3993467 0.4041870 0.4447704 0.4736433 0.5211117 0.5673821 #>   [61,] 0.37511379 0.4359918 0.4476238 0.6390517 0.6932301 0.7396366 0.7815226 #>   [62,] 0.46560187 0.4802745 0.5006597 0.6523067 0.6546358 0.6763189 0.7047488 #>   [63,] 0.39041162 0.4486731 0.5243686 0.5919143 0.6039846 0.6543379 0.6721514 #>   [64,] 0.50784390 0.5257820 0.5653779 0.6088658 0.6288734 0.6370568 0.6417607 #>   [65,] 0.98283547 1.1469693 1.3000707 1.3075204 1.4021326 1.4819081 1.5020787 #>   [66,] 0.46240018 0.4702277 0.6365848 0.7050748 0.7224518 0.7333094 0.8038191 #>   [67,] 0.23030971 0.3366966 0.4584963 0.4905638 0.5052638 0.5447132 0.5652550 #>   [68,] 0.40002026 0.4200247 0.4423688 0.5248875 0.5413201 0.5518302 0.6218226 #>   [69,] 0.31141246 0.3612923 0.6454952 0.7079288 0.7107260 0.7341640 0.7493031 #>   [70,] 0.78404985 1.0032029 1.0288500 1.0839102 1.1049231 1.1400308 1.1448726 #>   [71,] 0.48947605 0.4973874 0.5199251 0.6462290 0.7182087 0.7203494 0.8140225 #>   [72,] 0.59413972 0.8177607 0.8622578 1.0574186 1.1336472 1.1405774 1.1795986 #>   [73,] 0.28146387 0.3133288 0.3938064 0.4610837 0.6108476 0.6373161 0.6444586 #>   [74,] 0.52735666 0.5915302 0.8404788 0.9021871 1.0002124 1.0020756 1.0322842 #>   [75,] 0.17429596 0.4424163 0.4961861 0.5428428 0.5687016 0.5831062 0.6187262 #>   [76,] 0.48052215 0.7888237 0.8013460 0.8579898 1.0519417 1.0888577 1.1168188 #>   [77,] 0.27718187 0.3473741 0.4582816 0.4686727 0.6424083 0.6430101 0.6876777 #>   [78,] 0.71255954 0.7351016 0.7387364 0.7436089 0.7485508 0.7861507 0.9097483 #>   [79,] 0.87326955 0.8748506 0.8952869 0.9514066 0.9728676 1.0682227 1.1061666 #>   [80,] 0.22002521 0.2336808 0.2494953 0.2670360 0.4465556 0.4849038 0.5329656 #>   [81,] 0.25659797 0.4210488 0.4928615 0.4988896 0.5803699 0.6292891 0.6997401 #>   [82,] 0.44581138 0.4684639 0.5270232 0.6137656 0.6218652 0.6383023 0.6396275 #>   [83,] 0.42692727 0.4435437 0.4616322 0.5618534 0.5671095 0.5722876 0.5750226 #>   [84,] 0.34819162 0.4118910 0.4151716 0.4289395 0.4736869 0.5188418 0.5588887 #>   [85,] 0.57930380 0.6374033 0.6676536 0.9326445 0.9352589 0.9579075 0.9685865 #>   [86,] 0.39288379 0.4169526 0.4343940 0.5047649 0.5149382 0.5507386 0.5515828 #>   [87,] 0.57236816 0.6131370 0.6457617 0.6728320 0.7443602 0.8011893 0.8111068 #>   [88,] 0.78462273 0.9004177 1.0775934 1.0777378 1.2241618 1.2548814 1.2893073 #>   [89,] 0.35580663 0.3711903 0.3854665 0.4122823 0.5089432 0.6738045 0.7187821 #>   [90,] 0.33850101 0.4554039 0.4836203 0.5454009 0.6518735 0.6554080 0.6595949 #>   [91,] 0.28426960 0.5216025 0.5308442 0.5643923 0.5687016 0.5812476 0.5918861 #>   [92,] 0.45113498 0.6498934 0.6774372 0.6878421 0.7034365 0.7449783 0.7871065 #>   [93,] 0.82286181 0.8327620 0.8708180 0.9227065 0.9947105 1.0659732 1.1069389 #>   [94,] 0.47216791 0.5333079 0.5543932 0.5613973 0.5654411 0.5662931 0.5860900 #>   [95,] 0.73947237 0.7491395 0.7697766 0.8848823 1.0009057 1.0564122 1.0586022 #>   [96,] 0.38802136 0.5041877 0.6318846 0.6743469 0.6861735 0.6984461 0.7037674 #>   [97,] 0.38965108 0.4002203 0.4151716 0.4556350 0.5301864 0.5739423 0.5755439 #>   [98,] 0.28196509 0.4467887 0.4670919 0.4806393 0.4922302 0.5430612 0.6149903 #>   [99,] 0.37045458 0.6984461 0.7823914 0.7870600 0.8129191 0.8135078 0.8145405 #>  [100,] 0.64710423 0.8508442 0.9115902 0.9202747 0.9598800 0.9870840 0.9996619 #>  [101,] 0.56583455 0.5717510 0.6066469 0.6232848 0.6259172 0.6380914 0.6536747 #>  [102,] 0.60812333 0.8216129 0.9347819 0.9809477 1.0964452 1.1623259 1.2079391 #>  [103,] 0.33214564 0.3893484 0.5200880 0.5341617 0.5520791 0.5524622 0.5696291 #>  [104,] 1.01150228 1.0572116 1.2389507 1.2392247 1.2886597 1.3048695 1.3125675 #>  [105,] 0.50033948 0.5441188 0.5673140 0.6374703 0.7180120 0.7472471 0.8164689 #>  [106,] 0.59450313 0.6598439 0.7774593 0.7839189 0.8028296 0.8456948 0.8931079 #>  [107,] 0.35430432 0.3667045 0.3893236 0.4197194 0.4240849 0.5329656 0.5630446 #>  [108,] 0.50488240 0.5738213 0.6221477 0.6402268 0.6721114 0.6917115 0.7357998 #>  [109,] 0.78902080 0.8365857 0.8680081 0.8787233 0.9118684 0.9252061 0.9763485 #>  [110,] 0.32846065 0.3957924 0.4443687 0.5093373 0.5155913 0.5715634 0.5879201 #>  [111,] 0.41332110 0.4225958 0.4433169 0.4780144 0.5591654 0.5849979 0.5993609 #>  [112,] 0.13472709 0.3841463 0.3845889 0.4435437 0.4463847 0.4516569 0.5858966 #>  [113,] 0.19851580 0.3121522 0.3166910 0.3967202 0.4121044 0.4328381 0.4948888 #>  [114,] 0.69133461 0.7428445 0.9118374 0.9682363 0.9828355 0.9966706 1.0250703 #>  [115,] 0.19431981 0.3578915 0.3770062 0.3890006 0.4286959 0.5027466 0.5234495 #>  [116,] 0.25659797 0.4469781 0.5055375 0.6072008 0.6263363 0.6289675 0.6763501 #>  [117,] 0.26628857 0.3645358 0.3715640 0.3987657 0.4262391 0.4426851 0.4538106 #>  [118,] 0.52086872 0.5551672 0.6222436 0.6688370 0.7026152 0.7378854 0.7423665 #>  [119,] 0.50730601 0.5257820 0.5471438 0.6493763 0.6752105 0.6931152 0.7394724 #>  [120,] 0.32382088 0.4648621 0.4881377 0.5458224 0.6159581 0.6326245 0.6424040 #>  [121,] 0.28573773 0.3361938 0.5409483 0.5752464 0.6123048 0.6726006 0.6835762 #>  [122,] 0.24226116 0.3808092 0.4515671 0.4544820 0.4737460 0.5553131 0.6996115 #>  [123,] 0.30915125 0.3473741 0.4776426 0.4935336 0.5129804 0.6207284 0.6740894 #>  [124,] 0.34988827 0.4487777 0.5198823 0.5662931 0.5840507 0.5882049 0.5898896 #>  [125,] 0.65681195 0.6603805 0.7129032 0.8318329 0.8697012 0.9391965 0.9566591 #>  [126,] 0.23289427 0.4722032 0.5263382 0.5308595 0.5853720 0.5861832 0.5914866 #>  [127,] 0.63456927 0.6568120 0.8048844 0.8270570 0.9388909 0.9522907 0.9992562 #>  [128,] 0.36103013 0.4236558 0.5668140 0.6020313 0.6168066 0.6684610 0.7182618 #>  [129,] 0.21450111 0.3725005 0.4160145 0.4333978 0.5025561 0.5029495 0.5841859 #>  [130,] 0.52107308 0.6575221 0.6913346 0.7012369 0.8144653 0.8833146 0.9111545 #>  [131,] 0.20947228 0.3027628 0.3914504 0.4534882 0.4668981 0.4722032 0.4841215 #>  [132,] 0.42263965 0.4756709 0.4787780 0.4985535 0.5421504 0.5562872 0.6535503 #>  [133,] 0.34574747 0.5733851 0.5804437 0.5950555 0.6264141 0.7317723 0.7533586 #>  [134,] 0.51471236 0.6346902 0.6958767 0.7134612 0.7554393 0.8285532 0.8469626 #>  [135,] 0.62423562 0.7161253 0.7493031 0.9352589 0.9409842 0.9471461 0.9703273 #>  [136,] 0.79056836 0.8188511 0.8242748 0.8818849 0.9092610 0.9484727 1.0669363 #>  [137,] 0.47545943 0.5934664 0.6861405 0.7234683 0.7301864 0.7599841 0.7894033 #>  [138,] 0.56711037 0.6021441 0.6193477 0.6417607 0.7122801 0.7144015 0.7208666 #>  [139,] 0.22203681 0.5687218 0.5841978 0.6262383 0.7001192 0.7038519 0.7756952 #>  [140,] 0.38722183 0.4264711 0.5653725 0.6427658 0.6567350 0.6727786 0.7068612 #>  [141,] 0.22751586 0.4211347 0.4378398 0.6107828 0.6302572 0.6302978 0.6688148 #>  [142,] 0.41895252 0.5433203 0.6369656 0.6651215 0.6654071 0.6745463 0.6850951 #>  [143,] 0.40598050 0.4660050 0.5058930 0.5630573 0.6378101 0.6475042 0.6503111 #>  [144,] 0.44725961 0.4596031 0.4656019 0.5055725 0.5802695 0.6347448 0.7450651 #>  [145,] 0.61758627 0.6575221 0.7368617 0.7505734 0.7657023 0.8066479 0.8658694 #>  [146,] 0.23847659 0.5310611 0.6902792 0.7201318 0.7376740 0.7861113 0.8130186 #>  [147,] 0.69803701 0.7608931 1.0508696 1.0634575 1.0842547 1.1635289 1.3228393 #>  [148,] 0.72010957 0.7249445 0.7602047 0.7913518 0.8704807 0.8717862 0.9007194 #>  [149,] 0.47847226 0.6054852 0.6212701 0.6754453 0.7325694 0.7443653 0.7644246 #>  [150,] 0.34376305 0.3928838 0.3965944 0.5268086 0.5274684 0.5526603 0.5594635 #>  [151,] 0.11854885 0.1598299 0.2187154 0.3016651 0.4616322 0.4908956 0.5328126 #>  [152,] 0.41906121 0.4572405 0.5358376 0.5561664 0.5868243 0.6028495 0.6421356 #>  [153,] 0.25605458 0.8028090 0.8293019 0.8391510 0.8430303 0.8894912 0.9094234 #>  [154,] 0.37404073 0.6488360 0.6598439 0.6684390 0.6848283 0.7325698 0.8108444 #>  [155,] 0.57194815 0.7554950 0.9021859 0.9697902 1.0346959 1.0690226 1.1617546 #>  [156,] 0.22203681 0.3711382 0.4081819 0.5462578 0.5558534 0.6098269 0.7199620 #>  [157,] 0.56430508 0.5675040 0.6482846 0.6638497 0.6862901 0.8024593 0.8171962 #>  [158,] 0.25498811 0.5006597 0.6216857 0.6347448 0.6667712 0.6848895 0.7331007 #>  [159,] 0.22002521 0.2701236 0.3250154 0.4153354 0.4156072 0.4178095 0.4240849 #>  [160,] 0.56724851 0.7021860 0.7796495 0.8573089 0.9004772 0.9158575 0.9418729 #>  [161,] 0.77556964 0.8434915 0.8444735 0.9270317 0.9594686 0.9946435 1.0137107 #>  [162,] 0.67454632 0.7732128 0.7862916 0.7907275 0.8233109 0.8458242 0.9183389 #>  [163,] 0.28922764 0.4168953 0.4816976 0.5465686 0.5474644 0.5955995 0.5989160 #>  [164,] 0.42365578 0.5404673 0.6063276 0.6372699 0.6988914 0.7066061 0.7266979 #>  [165,] 0.26130918 0.4752391 0.5441104 0.5944953 0.6075002 0.6156041 0.6373161 #>  [166,] 0.12206065 0.2838317 0.5111573 0.6457228 0.6531868 0.6559793 0.6615264 #>  [167,] 1.08542242 1.0987422 1.3800436 1.3855726 1.3903829 1.4053361 1.4310435 #>  [168,] 0.35472249 0.4190612 0.4561020 0.4988896 0.5056791 0.5899536 0.5964954 #>  [169,] 0.37561311 0.3846206 0.4736670 0.4923081 0.5072896 0.5130117 0.5479327 #>  [170,] 0.40763306 0.4760447 0.6325157 0.6692448 0.6993056 0.7371792 0.7512593 #>  [171,] 0.52048419 0.9328320 0.9728195 0.9955837 1.1005000 1.1904908 1.2704751 #>  [172,] 0.74851796 0.9347819 1.3371638 1.3907535 1.3992742 1.4540496 1.5052591 #>  [173,] 0.65623488 0.6856286 0.7973605 0.9866034 1.0042933 1.1280310 1.1484358 #>  [174,] 0.52198094 0.8683056 0.9505287 0.9970031 1.0079665 1.0132144 1.0229084 #>  [175,] 0.32242403 0.3297114 0.3624759 0.4138689 0.4417516 0.4664420 0.4886736 #>  [176,] 0.35928091 0.4840858 0.5153455 0.5660540 0.6729406 0.7024327 0.7156461 #>  [177,] 0.21909837 0.4523939 0.4632213 0.4710398 0.5244654 0.6080580 0.6589443 #>  [178,] 0.69579192 0.7437197 0.7464151 0.8263883 0.8666540 0.9534631 0.9573264 #>  [179,] 0.45576908 0.4637332 0.5248875 0.6421754 0.6522990 0.6783919 0.6801493 #>  [180,] 0.42220966 0.5122783 0.5396211 0.5721222 0.5823305 0.6100743 0.6480245 #>  [181,] 0.50589301 0.5882132 0.6812641 0.7008813 0.7576643 0.7976884 0.8222057 #>  [182,] 0.34223822 0.4802728 0.8448907 1.1316579 1.1665336 1.1919500 1.2135002 #>  [183,] 0.41224871 0.4247864 0.4681037 0.4932505 0.4964602 0.5216025 0.5428428 #>  [184,] 0.29350945 0.4886740 0.5350388 0.5687154 0.5740785 0.6534741 0.6822146 #>  [185,] 0.50715310 0.6498340 0.6862512 0.7733364 0.7937157 0.8427582 0.8430303 #>  [186,] 0.56054815 0.5782540 0.5919297 0.5942635 0.6085981 0.6153344 0.6189574 #>  [187,] 0.92270652 1.0088094 1.0880351 1.1221539 1.1537432 1.1846774 1.2059794 #>  [188,] 0.48829413 0.5675459 0.6327983 0.6945553 0.7657023 0.7944557 0.8462813 #>  [189,] 0.35041822 0.4261505 0.4800776 0.5097338 0.5570260 0.7031111 0.7380868 #>  [190,] 0.37616749 0.4343683 0.5045840 0.5564971 0.6135556 0.6631313 0.7542598 #>  [191,] 0.55727032 0.5655979 0.5944458 0.6876777 0.7060238 0.7402540 0.7947215 #>  [192,] 0.35044367 0.4476238 0.5494974 0.5786876 0.5887522 0.7112271 0.7235326 #>  [193,] 0.35397699 0.4520440 0.4840858 0.5384767 0.5696291 0.6533306 0.6579804 #>  [194,] 0.40257851 0.4370394 0.4596176 0.5035524 0.5792753 0.5856821 0.5928385 #>  [195,] 0.64486388 0.6475149 0.6889418 0.6973980 0.7008426 0.7013966 0.7066061 #>  [196,] 1.23203974 1.4285219 1.4462635 1.5173526 1.6299010 1.6685962 1.7065306 #>  [197,] 0.49603573 0.6929709 0.6960296 0.6973980 0.7259172 0.7469448 0.7900775 #>  [198,] 0.21450111 0.3629968 0.4068443 0.4475015 0.4894120 0.5283544 0.5383833 #>  [199,] 0.46859260 0.4731851 0.5202563 0.5874660 0.5935437 0.5982491 0.6268055 #>  [200,] 0.37680790 0.3785436 0.5557404 0.6131370 0.6480245 0.6571595 0.6580577 #>  [201,] 0.33692534 0.4659339 0.5474846 0.6028036 0.6844439 0.7240448 0.7973605 #>  [202,] 0.38279950 0.4501319 0.5305300 0.5902610 0.6187165 0.6677904 0.7050434 #>  [203,] 0.55649707 0.5597988 0.5683753 0.6674011 0.6959129 0.7365090 0.7411168 #>  [204,] 1.24358390 1.4220902 1.4695332 1.4756721 1.6231624 1.6483707 1.6774757 #>  [205,] 0.75732375 0.8841986 0.9101605 1.0192356 1.0645210 1.0765753 1.1203706 #>  [206,] 0.54059802 0.6585724 0.6970150 0.7535270 0.9653213 0.9884833 1.0252126 #>  [207,] 0.91494040 1.0595918 1.6086892 1.7741436 1.7956309 1.8306050 1.8500155 #>  [208,] 1.04024702 1.1774862 1.2297237 1.2528068 1.2662409 1.2741391 1.3049049 #>  [209,] 0.25498811 0.6239301 0.6563475 0.7047488 0.7623663 0.7824292 0.8001535 #>  [210,] 0.55616641 0.5601816 0.6155516 0.6418403 0.6436048 0.6439247 0.6698603 #>  [211,] 0.59357525 0.7162872 0.7892502 0.8681179 0.9545234 0.9607758 0.9786329 #>  [212,] 0.35840871 0.4433169 0.5149635 0.5398995 0.5898393 0.6214139 0.6836896 #>  [213,] 0.80078631 0.8928092 0.9854347 1.0634705 1.2412613 1.2798425 1.2880005 #>  [214,] 0.80237187 0.8907215 0.9562249 0.9744722 0.9770473 1.0694087 1.0710785 #>  [215,] 0.32298102 0.3369145 0.4142218 0.4987924 0.5413201 0.5662741 0.5718615 #>  [216,] 0.44280901 0.6246671 0.7419031 0.8114756 0.8400890 0.9761894 0.9783869 #>  [217,] 0.47941267 0.5503959 0.5515828 0.5929073 0.6183079 0.7302536 0.8013477 #>  [218,] 0.37404073 0.4066550 0.6264632 0.7080238 0.7839189 0.8172518 0.8894449 #>  [219,] 0.51058847 0.6132749 0.6454162 0.6639050 0.7007903 0.7793574 0.8238770 #>  [220,] 0.48947605 0.5688061 0.5703682 0.6347678 0.6396531 0.7195405 0.7211375 #>  [221,] 0.39198826 0.5338365 0.5470781 0.6352225 0.6853344 0.7292610 0.7405505 #>  [222,] 0.32925054 0.3337566 0.3537057 0.3709667 0.4737923 0.4778595 0.5754367 #>  [223,] 0.56468077 0.5896778 0.6214263 0.6277933 0.6420976 0.7403920 0.7717844 #>  [224,] 0.59522438 0.7688842 0.8178899 0.8516554 0.8583428 0.8753237 0.9810414 #>  [225,] 0.69803701 1.2171523 1.2948373 1.3274250 1.4879162 1.6393210 1.7143885 #>  [226,] 0.39198826 0.5653725 0.5786876 0.5807206 0.6096844 0.6177255 0.6736514 #>  [227,] 0.58571277 0.5962153 0.8949380 0.9163783 0.9595612 1.0200636 1.0324463 #>  [228,] 0.30310872 0.4200247 0.4229516 0.5805225 0.6122033 0.6237806 0.6362210 #>  [229,] 1.05847657 1.1005000 1.1190572 1.1982498 1.2544481 1.2893071 1.2974345 #>  [230,] 0.57696773 0.6242788 0.6383023 0.6534197 0.6758638 0.6822475 0.7060864 #>  [231,] 0.41712939 0.5935753 0.9165600 0.9195523 0.9275508 0.9443482 0.9479880 #>  [232,] 0.45726262 0.4583310 0.7724981 0.8982653 1.0679016 1.1260930 1.1698087 #>  [233,] 0.35262564 0.5234435 0.6757034 0.7882720 0.8135836 0.8427588 0.8670608 #>  [234,] 0.58346261 0.6487344 0.7019582 0.7787994 0.8361624 0.8761426 0.9023737 #>  [235,] 0.82075336 1.4282301 1.4478488 1.4753484 1.4984437 1.5197241 1.5490382 #>  [236,] 0.77745259 0.9665143 1.0751276 1.1005827 1.1481328 1.5202389 1.5362245 #>  [237,] 0.19924239 0.3152815 0.3448585 0.3514440 0.3770062 0.4625128 0.4780603 #>  [238,] 0.66435588 0.8005422 0.8889982 0.9920496 1.1137855 1.1302576 1.1635349 #>  [239,] 0.53272869 0.5949507 0.6868213 0.6933960 0.7096037 0.8428046 0.8739262 #>  [240,] 0.35979994 0.4443687 0.4694655 0.4722167 0.5433275 0.5597194 0.6039846 #>  [241,] 0.51950191 0.5216698 0.5274684 0.5914866 0.6116315 0.6459109 0.6533482 #>  [242,] 0.63688309 0.7872931 0.8319751 0.8356491 0.8410806 0.8837879 0.8876941 #>  [243,] 0.71229382 0.8035207 0.8410806 0.8790030 0.8813799 0.9300940 0.9729095 #>  [244,] 0.65725472 0.8697833 0.9229089 0.9659382 0.9897175 1.0464166 1.0568944 #>  [245,] 0.50715310 0.7280457 0.8555483 0.8586908 0.8622578 0.9074350 0.9926413 #>  [246,] 0.37131911 0.4682843 0.5089432 0.5165489 0.5430107 0.5771373 0.5824800 #>  [247,] 0.32382088 0.4543166 0.5096453 0.5111896 0.5999484 0.6634004 0.7207142 #>  [248,] 0.48144845 0.4921272 0.4981125 0.5342477 0.5625682 0.5728957 0.5832319 #>  [249,] 0.23129396 0.4222097 0.4542742 0.5858121 0.6025637 0.6505760 0.6520133 #>  [250,] 1.01356973 1.0596180 1.2227319 1.3980887 1.4553532 1.5327799 1.5454955 #>  [251,] 0.24358437 0.3361118 0.4944251 0.5233372 0.5310581 0.5327298 0.5362621 #>  [252,] 0.52198094 0.5970933 0.6667978 0.6989012 0.7252519 0.7393379 0.7472802 #>  [253,] 0.51619415 0.5766069 0.5969594 0.6248415 0.6259476 0.6591139 0.6714122 #>  [254,] 0.49565953 0.5752943 0.5862529 0.6221876 0.6787504 0.6937455 0.7206828 #>  [255,] 0.44400260 0.4448423 0.4622279 0.5376982 0.5718686 0.5778628 0.5802733 #>  [256,] 0.64564247 0.6796087 0.6806386 0.6910644 0.8605439 0.9477724 0.9540807 #>  [257,] 0.21842711 0.3197918 0.4834570 0.4871976 0.5115946 0.5222595 0.5595080 #>  [258,] 0.67774286 0.7046772 0.7232678 0.7312867 0.7597737 0.7708712 0.8142335 #>  [259,] 0.53272869 0.8331838 0.8677271 0.8759161 0.8986401 0.9125190 0.9659382 #>  [260,] 0.28437413 0.2998943 0.3042058 0.4012642 0.4081155 0.4247982 0.4673858 #>  [261,] 0.63965314 0.6504910 0.7150457 0.7203494 0.7325694 0.7911986 0.8116418 #>  [262,] 0.21503944 0.3321620 0.5607813 0.5707382 0.5722667 0.6071732 0.6184903 #>  [263,] 0.29072697 0.4406810 0.4664420 0.4948715 0.5313998 0.5353924 0.5626503 #>  [264,] 0.53780201 0.5930607 0.6458247 0.6564052 0.7236569 0.7525923 0.7708631 #>  [265,] 0.23030971 0.3502259 0.3750441 0.3860377 0.4296030 0.5377724 0.5706198 #>  [266,] 0.45984778 0.5698404 0.5900970 0.6919135 0.7400530 0.7674129 0.8351641 #>  [267,] 0.84516297 1.0197457 1.0790228 1.1548998 1.2844386 1.3827459 1.4759461 #>  [268,] 0.40170178 0.4812571 0.5726673 0.5745434 0.5909489 0.6035717 0.6212375 #>  [269,] 0.52107308 0.5388409 0.5818140 0.5917501 0.7055237 0.7126523 0.7522217 #>  [270,] 0.55073858 0.5517060 0.6037713 0.6246497 0.6482846 0.6561759 0.6934546 #>  [271,] 0.24065734 0.4150712 0.5268086 0.5650915 0.5667022 0.6913356 0.7101384 #>  [272,] 0.67338242 0.6734291 0.6737288 0.7138571 0.7241968 0.7374729 0.7724340 #>  [273,] 0.45167085 0.5448504 0.5597988 0.6092459 0.6135556 0.6237190 0.6351304 #>  [274,] 0.36624145 0.4294443 0.4670919 0.5133000 0.5629500 0.5705741 0.5769677 #>  [275,] 0.25010378 0.3563927 0.4101014 0.5270232 0.5964496 0.6009242 0.6175453 #>  [276,] 0.28215704 0.3132695 0.4281433 0.4543315 0.5271690 0.5662741 0.5730456 #>  [277,] 0.45009807 0.5447042 0.5490458 0.5927297 0.6037899 0.6157541 0.6376039 #>  [278,] 0.37268614 0.4744697 0.4886740 0.4912813 0.5048824 0.5172372 0.5421352 #>  [279,] 0.42512691 0.4561603 0.4634283 0.4648621 0.5126070 0.5995374 0.5999484 #>  [280,] 0.39471095 0.4952865 0.5563715 0.6731719 0.6949748 0.6975616 0.7021454 #>  [281,] 0.45363577 0.4893253 0.5378020 0.6487800 0.7053220 0.7853613 0.7914388 #>  [282,] 0.39151742 0.4189698 0.4814248 0.4867322 0.5404672 0.5501805 0.5614857 #>  [283,] 0.52735666 0.6053922 0.6259112 0.6563645 0.7086851 0.7912656 0.7932942 #>  [284,] 0.39657248 0.4048576 0.4911814 0.5076226 0.5993609 0.6579032 0.7241388 #>  [285,] 0.38334300 0.5270698 0.5886540 0.6035264 0.6072008 0.6840259 0.6881721 #>  [286,] 0.41450092 0.4770188 0.5206842 0.5432409 0.5814605 0.5906781 0.6563645 #>  [287,] 0.36544361 0.7028372 0.7224518 0.7261869 0.7305762 0.8276109 0.8731040 #>  [288,] 0.41415420 0.5161941 0.7111679 0.7301000 0.7678661 0.7787644 0.8028296 #>  [289,] 0.50971991 0.5902610 0.6164800 0.6179056 0.6449559 0.6583255 0.6814272 #>  [290,] 0.55581384 0.5717510 0.5826967 0.6407457 0.6976321 0.7423984 0.7637804 #>  [291,] 0.59866228 1.0574186 1.0827547 1.2135163 1.2271324 1.3817756 1.4211157 #>  [292,] 0.21909837 0.4716497 0.5685377 0.6016637 0.6558203 0.6676636 0.6733824 #>  [293,] 0.47054738 0.5426034 0.5819701 0.6816075 0.7241388 0.7343673 0.7387364 #>  [294,] 0.45377666 0.4723005 0.4812571 0.5112100 0.5465686 0.5476915 0.5881183 #>  [295,] 0.35670470 0.6291949 0.6448639 0.6596634 0.6722501 0.6929709 0.7572753 #>  [296,] 0.35472249 0.3811103 0.5358376 0.5642437 0.5961165 0.6324686 0.6407457 #>  [297,] 0.28573773 0.5001645 0.5673821 0.5785623 0.6031988 0.6164790 0.6173615 #>  [298,] 0.56575301 0.5862529 0.7063134 0.7464538 0.8535649 0.8874401 0.9223649 #>  [299,] 0.79637568 0.8749822 0.9783598 1.2300623 1.3158687 1.3175287 1.3623603 #>  [300,] 0.30557838 0.4241054 0.5039256 0.6803701 0.7533012 0.7837470 0.8014202 #>  [301,] 0.38203086 0.4390851 0.4880371 0.5607813 0.6436031 0.6744626 0.6770326 #>  [302,] 0.63556881 0.6957603 0.7210081 0.7627458 0.7746328 0.7983302 0.8204706 #>  [303,] 0.45009408 0.5313225 0.5460155 0.5645318 0.5715822 0.6243289 0.6958767 #>  [304,] 0.44368466 0.4486731 0.5009533 0.5682975 0.5970933 0.6047286 0.6083888 #>  [305,] 0.35840871 0.4169628 0.4225958 0.4911814 0.5039235 0.5338365 0.5781229 #>  [306,] 0.33942542 0.3711903 0.4492119 0.4594133 0.5387496 0.5698404 0.5771373 #>  [307,] 0.69956746 0.7001192 0.7892888 0.8605808 1.1142022 1.1352410 1.1480557 #>  [308,] 0.75473629 0.8361624 0.8422744 0.9061449 0.9120410 0.9821817 0.9843251 #>  [309,] 0.31455279 0.4583310 0.5770583 0.7664926 0.8156726 0.8258436 1.0282546 #>  [310,] 0.47296983 0.5225046 0.5630048 0.6904069 0.6919870 0.7448498 0.7628320 #>  [311,] 0.51315624 0.5149635 0.5704207 0.6190328 0.6302978 0.6573493 0.6942256 #>  [312,] 0.39318181 0.4604370 0.5072256 0.5327298 0.5494974 0.5582138 0.5708057 #>  [313,] 0.24287744 0.4166350 0.4178960 0.4189698 0.4444443 0.4606803 0.4703776 #>  [314,] 0.40654788 0.5783974 0.7418223 0.7522082 0.8443812 0.8490229 0.8562537 #>  [315,] 0.63279646 0.7652896 0.8007863 0.8914931 0.9796233 1.0079665 1.0082757 #>  [316,] 0.53004164 0.8518044 0.8780634 1.0266886 1.0910696 1.1075026 1.1983146 #>  [317,] 0.67721254 0.7144523 0.8290118 1.0329292 1.1647887 1.1863285 1.2078953 #>  [318,] 0.55119319 0.7165806 0.8355345 0.8360505 0.8460067 0.8586908 0.9459917 #>  [319,] 0.59721346 0.7056230 0.9473805 1.0574583 1.0701397 1.1518300 1.1519993 #>  [320,] 0.56508706 0.5834626 0.6587176 0.7558388 0.8035207 0.9061449 0.9179113 #>  [321,] 0.45253862 0.6309422 0.6503275 0.6806386 0.7407575 0.7708451 0.8088843 #>  [322,] 0.44709275 0.4538106 0.4780144 0.5013138 0.5041939 0.5092410 0.5421352 #>  [323,] 0.52933161 0.5383322 0.6054852 0.6093107 0.6349061 0.6734350 0.6830793 #>  [324,] 0.35041822 0.5075877 0.5634173 0.6380059 0.6724133 0.7153056 0.7405505 #>  [325,] 0.45253862 0.6796087 0.8755832 0.8855468 0.9351881 0.9831172 0.9891764 #>  [326,] 0.52665654 0.6579032 0.6949440 0.7364177 0.7730949 0.7891923 0.7907426 #>  [327,] 0.51939244 0.5715822 0.6848283 0.6934052 0.7134612 0.7773523 0.7774593 #>  [328,] 0.51058847 0.5465017 0.5782255 0.6109514 0.6572684 0.7044230 0.7235611 #>  [329,] 0.25363741 0.3573839 0.3808092 0.4650326 0.4661630 0.6422694 0.6625685 #>  [330,] 0.40811039 0.6742909 0.6764644 0.6781981 0.7171307 0.7302536 0.7410178 #>  [331,] 0.34853729 0.4724441 0.4752391 0.4890732 0.5602563 0.5944458 0.6325157 #>  [332,] 1.06287607 1.0801051 1.1190381 1.1242821 1.1806040 1.2316796 1.2439331 #>  [333,] 0.33375658 0.4259864 0.4837387 0.5052638 0.5053167 0.5437653 0.5915493 #>  [334,] 0.34974712 0.4760447 0.6642740 0.7046414 0.9082567 0.9330853 0.9715454 #>  [335,] 0.24768764 0.4333978 0.4636258 0.5046162 0.5283544 0.5438362 0.5440877 #>  [336,] 0.26660384 0.4811004 0.5090228 0.5528141 0.6181586 0.6526040 0.6534197 #>  [337,] 0.65871763 0.6778421 0.7605055 0.7653786 0.8485050 0.8868539 0.8931746 #>  [338,] 0.46275192 0.5238447 0.5446931 0.5652159 0.5758464 0.6505136 0.6529034 #>  [339,] 0.42239482 0.6184429 0.6337607 0.6742711 0.8287023 0.8708180 0.9438030 #>  [340,] 0.50784390 0.5416117 0.5656914 0.6021441 0.6553741 0.7706714 0.7770222 #>  [341,] 0.35979994 0.3957924 0.4129281 0.4179757 0.5122783 0.5918710 0.6025637 #>  [342,] 0.63194161 0.6455795 0.7261869 0.8305566 0.8344117 0.8605439 0.9561669 #>  [343,] 0.51374961 0.7063134 0.8677374 0.8780634 0.8853389 0.9095318 0.9336728 #>  [344,] 0.35408087 0.4977546 0.5435904 0.5497811 0.6039837 0.6164669 0.6257324 #>  [345,] 0.43947267 0.6918048 0.7101592 0.7237951 0.7381221 0.8263883 0.8434119 #>  [346,] 0.33611180 0.3468886 0.3591042 0.3931818 0.4246627 0.5037485 0.5524439 #>  [347,] 0.13472709 0.3470362 0.3751891 0.3754892 0.4162583 0.5272656 0.5618534 #>  [348,] 0.45872292 0.7747637 0.8733010 0.8816674 0.9359929 1.0386990 1.0503497 #>  [349,] 0.76089312 0.9783598 1.1597488 1.2454324 1.2668784 1.2766727 1.2948373 #>  [350,] 0.52344354 0.5618096 0.6058192 0.8110106 0.8389756 0.8448668 0.8666166 #>  [351,] 1.00320285 1.1964481 1.4864929 1.5244202 1.5924686 1.5973773 1.6350913 #>  [352,] 0.34505119 0.4407967 0.4587378 0.4770188 0.4953500 0.5024896 0.5072670 #>  [353,] 0.51471236 0.7458319 0.7812538 0.7959399 0.8026379 0.8485308 0.8894449 #>  [354,] 0.24287744 0.2528981 0.3514440 0.3845294 0.4012435 0.4157509 0.4821240 #>  [355,] 0.36948845 0.4569821 0.5490110 0.5522937 0.6302990 0.6327983 0.6395269 #>  [356,] 0.84203949 0.8848823 0.9199303 1.0769689 1.1520436 1.2026872 1.2600780 #>  [357,] 0.40816998 0.4249954 0.4465101 0.4727595 0.5361064 0.5682558 0.5841110 #>  [358,] 0.53129953 0.7800748 0.7942991 0.8243460 0.8422736 0.8438327 0.8686249 #>  [359,] 0.43599179 0.4705474 0.4964602 0.5172372 0.6100159 0.6109825 0.6539156 #>  [360,] 0.46981113 0.4705423 0.5165155 0.5295835 0.5383833 0.5547885 0.5623455 #>  [361,] 0.28525084 0.4306587 0.5122991 0.5225018 0.5466979 0.5518350 0.6065211 #>  [362,] 1.26340308 1.3262740 1.4291231 1.5391033 1.7317798 1.7807596 1.7953080 #>  [363,] 0.46528737 0.4777534 0.5228359 0.5409021 0.6104980 0.6383880 0.6720716 #>  [364,] 0.70679078 0.7652896 0.8928092 0.9443403 1.0608136 1.1667172 1.1862792 #>  [365,] 0.42239482 0.6174474 0.7363252 0.7565915 0.8228618 0.8689568 0.9220352 #>  [366,] 1.23286674 1.3116607 1.3255606 1.3972401 1.4959085 1.5825051 1.6218035 #>  [367,] 0.57012160 0.6292890 0.6560286 0.7182341 0.7561592 0.7573399 0.7801432 #>  [368,] 0.35044367 0.4604370 0.4835176 0.5910309 0.6086386 0.6203943 0.6336788 #>  [369,] 0.94873559 0.9807033 0.9972865 1.2308452 1.3437723 1.3530821 1.4204735 #>  [370,] 0.75473629 0.8501048 0.9220450 1.0207922 1.1486754 1.1885296 1.2401213 #>  [371,] 0.28146387 0.3260705 0.4366601 0.5433540 0.5933842 0.6127575 0.6221876 #>  [372,] 0.35950874 0.5073048 0.5683753 0.6235164 0.6446509 0.6566805 0.6902792 #>  [373,] 0.41112243 0.4116493 0.4765060 0.5752464 0.5794443 0.6123411 0.6123799 #>  [374,] 0.52283591 0.5292109 0.5533450 0.5929073 0.6023376 0.6233022 0.7160258 #>  [375,] 0.44359339 0.4697162 0.4841215 0.5000855 0.5456847 0.5508504 0.5532352 #>  [376,] 0.23383847 0.3137708 0.3437942 0.4150142 0.4407967 0.4523003 0.4877015 #>  [377,] 0.33249324 0.3493396 0.4046570 0.4081700 0.4120199 0.4487138 0.4664569 #>  [378,] 0.25605458 0.6959129 0.7578751 0.7609478 0.7935083 0.8155124 0.8427582 #>  [379,] 0.49811251 0.5276924 0.5401132 0.5433540 0.5435904 0.5528327 0.5735362 #>  [380,] 0.58996967 0.6815409 0.7652459 0.8400572 0.8413907 0.8800606 0.8804117 #>  [381,] 0.53854719 0.5656914 0.6998046 0.8769282 0.8818634 0.9424085 0.9617523 #>  [382,] 0.30627977 0.4500981 0.5327105 0.5876995 0.5930607 0.6313136 0.6422694 #>  [383,] 0.34897843 0.5421504 0.5896778 0.5954862 0.7570582 0.7857939 0.7925845 #>  [384,] 0.41319063 0.4247864 0.4613509 0.5045840 0.5072757 0.5529674 0.5863506 #>  [385,] 0.71239946 0.7180202 0.8110106 0.8435917 0.8685881 0.8942112 0.8942249 #>  [386,] 0.63568495 0.7664926 0.7861507 0.8464545 0.9280979 0.9400134 0.9715833 #>  [387,] 0.48027446 0.5572357 0.7012896 0.7166014 0.7417714 0.7450651 0.7640203 #>  [388,] 0.25704914 0.6843241 0.7128811 0.7138442 0.7470252 0.7570582 0.7595342 #>  [389,] 0.48334236 0.6399348 0.7839183 0.8129100 0.8871339 0.9595406 0.9800387 #>  [390,] 0.38743561 0.4454116 0.5092410 0.5215843 0.5383322 0.5464835 0.5568206 #>  [391,] 0.59153021 0.7086851 0.7434553 0.7851660 0.8497252 0.9828270 0.9976127 #>  [392,] 0.30562872 0.4722767 0.5532494 0.5751412 0.5957136 0.6245099 0.6854279 #>  [393,] 0.23296837 0.3628757 0.3929309 0.4170176 0.4508831 0.4873079 0.5083329 #>  [394,] 0.30330157 0.4229516 0.4423688 0.6454378 0.6783919 0.6830318 0.6945553 #>  [395,] 0.40654788 0.4511806 0.5872089 0.6888683 0.7060238 0.7383677 0.7923135 #>  [396,] 0.53129953 0.5533450 0.6312164 0.7052231 0.7731757 0.8535398 0.8968402 #>  [397,] 0.34897843 0.5052480 0.6150751 0.6214263 0.6313828 0.6535503 0.6542743 #>  [398,] 0.34703621 0.4516569 0.4729150 0.4762736 0.5072932 0.5530539 0.5534629 #>  [399,] 0.62466708 0.9979456 1.0127537 1.0733717 1.1295335 1.1532937 1.1729747 #>  [400,] 0.58738996 0.6337607 0.7565915 0.8352141 0.8891291 0.9187011 0.9514285 #>  [401,] 0.40003684 0.4041870 0.4142218 0.4289430 0.5051539 0.5071989 0.5135839 #>  [402,] 0.23296837 0.3304021 0.3493396 0.3946723 0.3975834 0.3981831 0.4441259 #>  [403,] 0.46791313 0.6841272 0.8794180 0.8868539 0.9313011 0.9914935 1.0383111 #>  [404,] 0.68114830 1.0693221 1.2214593 1.2595482 1.2668423 1.3530821 1.4546983 #>  [405,] 0.31329689 0.6643559 0.7514427 0.8630547 0.8977046 1.0408527 1.1684208 #>  [406,] 0.50553748 0.5293316 0.5474395 0.5761952 0.6035264 0.6270004 0.6754453 #>  [407,] 0.34974712 0.4076331 0.4724441 0.5771910 0.6987778 0.7458089 0.7652245 #>  [408,] 0.44361359 0.4523939 0.4545972 0.4835633 0.5150930 0.5792453 0.6257449 #>  [409,] 0.37147837 0.3726861 0.4134519 0.4136909 0.4606380 0.5086740 0.5562872 #>  [410,] 0.40022029 0.4605179 0.5038490 0.5387785 0.5658345 0.5751905 0.6114922 #>  [411,] 0.22994126 0.2909840 0.3890006 0.4476148 0.4519132 0.5324390 0.5476915 #>  [412,] 0.42623908 0.4740785 0.5013138 0.5086740 0.5285104 0.5316723 0.5524439 #>  [413,] 0.34819162 0.4406939 0.5596955 0.5910541 0.5945437 0.6056731 0.6205853 #>  [414,] 0.28073651 0.3711382 0.5643051 0.5687218 0.6089764 0.6169938 0.6246497 #>  [415,] 1.13644207 1.3434034 1.3892144 1.4049852 1.4341459 1.4488354 1.4794534 #>  [416,] 0.70679078 0.7296337 0.9854347 1.0222550 1.0255695 1.0369977 1.0526467 #>  [417,] 0.26474833 0.2996917 0.3397002 0.4324178 0.4613509 0.4626309 0.4736670 #>  [418,] 0.39033116 0.6053594 0.6373450 0.6721114 0.6885639 0.6935188 0.7033758 #>  [419,] 0.40257851 0.5313225 0.5402952 0.5608967 0.6248415 0.6364382 0.6372876 #>  [420,] 0.34574747 0.4231677 0.5419832 0.6854614 0.6955331 0.7226188 0.7467520 #>  [421,] 0.36428810 0.4689935 0.5133082 0.6300784 0.7545058 0.7595342 0.8124521 #>  [422,] 0.47296983 0.6059437 0.6455795 0.6456425 0.6748474 0.8708488 0.8844148 #>  [423,] 0.39561534 0.6059437 0.6508106 0.6917468 0.6919870 0.7182540 0.7432759 #>  [424,] 0.24226116 0.3562661 0.4472978 0.4650326 0.6079754 0.6759295 0.6967097 #>  [425,] 0.57514119 0.6391886 0.6395910 0.6651105 0.6900882 0.7321835 0.7434553 #>  [426,] 0.55702598 0.7153056 0.7554950 0.8027385 0.8168891 0.8319751 0.8360344 #>  [427,] 0.28400738 0.3014656 0.3715640 0.4162734 0.4312045 0.4477879 0.5041939 #>  [428,] 0.55113512 0.5770583 0.7724981 0.8402992 0.8499318 0.9085474 0.9409850 #>  [429,] 0.05436257 0.3784364 0.5041804 0.5784596 0.5934272 0.5939247 0.6121724 #>  [430,] 0.39802174 0.4111224 0.4813110 0.4925430 0.5511119 0.5607807 0.5923892 #>  [431,] 0.44697811 0.4928615 0.5474198 0.6171354 0.7274788 0.7390235 0.7482171 #>  [432,] 0.46459145 0.4848567 0.5630048 0.5919297 0.6005470 0.6396746 0.7213426 #>  [433,] 0.53269635 0.6423708 0.7165806 0.7877054 0.8463317 0.8503603 0.8683801 #>  [434,] 0.60850132 0.6523529 0.7545058 0.7754741 0.8838682 0.9294634 1.0192727 #>  [435,] 0.35161288 0.4637332 0.4702277 0.5175738 0.6438825 0.6674147 0.6769124 #>  [436,] 0.40707331 0.4261513 0.6068558 0.6167799 0.6433716 0.6874296 0.6909479 #>  [437,] 0.33300737 0.4459515 0.4710398 0.5181151 0.5685377 0.6671335 0.7784676 #>  [438,] 0.52895676 0.7794370 1.0508696 1.1302803 1.2171523 1.2195996 1.2222400 #>  [439,] 0.69956746 0.8316041 0.9677083 1.0312323 1.1023156 1.1475118 1.1625978 #>  [440,] 0.42298295 0.4835932 0.5004995 0.5132283 0.5186172 0.5296030 0.5490644 #>  [441,] 0.23383847 0.3359003 0.4341613 0.4675330 0.4882665 0.5024896 0.5149505 #>  [442,] 0.82901184 0.8467181 0.9029467 1.1111839 1.2362870 1.2498482 1.2591831 #>  [443,] 0.51654889 0.5488572 0.6975223 0.7101592 0.7403920 0.7470252 0.8135582 #>  [444,] 0.80237187 0.8389756 1.0134591 1.0326050 1.0961032 1.2436588 1.3580057 #>  [445,] 0.44359339 0.5174984 0.5195019 0.5863282 0.5909017 0.6181340 0.6781981 #>  [446,] 0.41657434 0.4190963 0.4208021 0.4787913 0.4791877 0.5490458 0.5856821 #>  [447,] 0.10618703 0.4606380 0.4985535 0.5331683 0.5546109 0.5585887 0.5713954 #>  [448,] 0.34376305 0.5053167 0.5149382 0.5729407 0.6577190 0.6654661 0.6689691 #>  [449,] 0.20296080 0.2928222 0.3591042 0.5233372 0.5389581 0.5527545 0.5662263 #>  [450,] 0.49729791 0.5766607 0.7252519 0.7634141 0.8683056 0.8783216 0.8812159 #>  [451,] 0.10618703 0.4134519 0.4690105 0.4787780 0.4974177 0.6026175 0.6232789 #>  [452,] 0.46753879 0.5069673 0.5350388 0.5943044 0.6042781 0.6283086 0.6391816 #>  [453,] 0.25953822 0.5793038 0.6069211 0.6724805 0.7161253 0.8249282 0.8382666 #>  [454,] 0.30627977 0.4174533 0.4515671 0.4661630 0.6391332 0.6458247 0.6490084 #>  [455,] 0.37767953 0.9286672 1.0565746 1.1540811 1.1614233 1.2638697 1.3376046 #>  [456,] 0.45954640 0.5166308 0.5708986 0.5751905 0.5853102 0.5927181 0.6134860 #>  [457,] 0.53052996 0.5344986 0.6449559 0.7224054 0.7347203 0.8348433 0.8529510 #>  [458,] 0.35950874 0.4017826 0.6858376 0.6935188 0.7343916 0.7360433 0.7365090 #>  [459,] 0.49738742 0.5158036 0.6427270 0.6611266 0.7195405 0.7688521 0.8219601 #>  [460,] 0.38722183 0.5811206 0.6264177 0.7327903 0.7976197 0.8044292 0.8227182 #>  [461,] 0.63319273 0.6734291 0.7535270 1.0202815 1.0694151 1.0928215 1.1413443 #>  [462,] 0.67269871 0.7145027 0.7522082 0.9214484 0.9399391 0.9551844 0.9629602 #>  [463,] 0.32966932 0.3485738 0.3769186 0.4121044 0.4191090 0.4499651 0.4908956 #>  [464,] 0.38111032 0.4712183 0.5558138 0.5964954 0.6028495 0.6304065 0.6357903 #>  [465,] 0.27205992 0.2892276 0.3706530 0.4170176 0.4415927 0.4518578 0.4780603 #>  [466,] 0.24084381 0.3896511 0.4118910 0.4304682 0.4435316 0.4440026 0.4441259 #>  [467,] 0.52877847 0.5467673 0.5558534 0.5599322 0.5841978 0.6383880 0.7060626 #>  [468,] 0.36987784 0.5846895 0.6156041 0.7344429 0.7349864 0.7711073 0.7861352 #>  [469,] 0.28153596 0.3305500 0.3437942 0.3750441 0.4177578 0.4877873 0.5000270 #>  [470,] 0.64264968 0.7942991 0.8529510 0.8784327 0.8918912 0.9106084 0.9373054 #>  [471,] 0.39251545 0.4756598 0.5003395 0.6006313 0.6943531 0.8214862 0.8461595 #>  [472,] 0.52068425 0.5328062 0.5388409 0.5582123 0.6314825 0.6575682 0.6899784 #>  [473,] 0.22777047 0.4129796 0.4365657 0.4681038 0.5343238 0.5469023 0.5623552 #>  [474,] 0.63389269 0.6345693 0.6985526 0.7129032 0.8884943 0.9096216 0.9497840 #>  [475,] 0.43456064 0.5214899 0.5623571 0.6498340 0.6611266 0.7554209 0.7927645 #>  [476,] 0.42647108 0.5807206 0.5975192 0.6218652 0.6853344 0.7102948 0.7190642 #>  [477,] 0.49564140 1.1423044 1.2389119 1.2753286 1.2818966 1.2835279 1.3310261 #>  [478,] 0.59781251 0.6688370 0.6883951 0.7363252 0.7730383 0.7876934 0.8847359 #>  [479,] 0.28153596 0.3137708 0.3502259 0.4953500 0.5093561 0.5326955 0.5420008 #>  [480,] 0.18663857 0.5317580 0.5419832 0.5487608 0.6221426 0.6264141 0.6881758 #>  [481,] 0.31267521 0.5303312 0.5331146 0.6027073 0.6258670 0.6457228 0.7042218 #>  [482,] 0.23368082 0.3250154 0.3834352 0.4197194 0.4275584 0.4996193 0.5533405 #>  [483,] 0.91955225 0.9545234 1.1051060 1.1104517 1.2059794 1.2522130 1.2635088 #>  [484,] 0.42493149 0.4511350 0.4586089 0.5040458 0.5929770 0.6115298 0.7182540 #>  [485,] 0.22682587 0.2480127 0.2959485 0.3166910 0.4499651 0.4614916 0.4865672 #>  [486,] 0.69528406 0.8300131 0.9024401 0.9498579 0.9536614 0.9717779 0.9928814 #>  [487,] 0.45244167 0.4653359 0.4830648 0.5172285 0.5280128 0.5879258 0.6088658 #>  [488,] 0.37065301 0.4412777 0.4582816 0.4733274 0.4776426 0.4816976 0.5170612 #>  [489,] 0.62257576 0.7390887 0.9165362 0.9418729 0.9923731 1.0442445 1.0481829 #>  [490,] 0.83717671 0.9436371 0.9606411 0.9777737 1.0100633 1.1570742 1.1708917 #>  [491,] 0.40814314 0.8310013 0.8552807 0.9000674 0.9595612 1.0173900 1.0802670 #>  [492,] 0.24949528 0.3834352 0.3942819 0.4178095 0.5074940 0.5442154 0.6606637 #>  [493,] 0.19709022 0.2187154 0.2996038 0.3113926 0.3769186 0.4519274 0.4948888 #>  [494,] 0.41164933 0.4925430 0.5618269 0.5701216 0.5811206 0.6727786 0.6845109 #>  [495,] 0.92866723 0.9303131 0.9682363 1.1222177 1.1233239 1.2321535 1.3004286 #>  [496,] 0.29077197 0.3206984 0.4004170 0.4068293 0.4325380 0.4806393 0.4844364 #>  [497,] 1.25926490 1.7898086 2.0228459 2.1152648 2.1245367 2.3731155 2.4245612 #>  [498,] 0.61806720 0.6277933 0.7533096 0.7558388 0.7653786 0.7808826 0.8164083 #>  [499,] 0.85379628 1.0661492 1.1548998 1.1898879 1.1990052 1.2082769 1.2212973 #>  [500,] 0.35951552 0.6554812 0.6803583 0.7259172 0.7796495 0.8006088 0.8648114 #>  [501,] 0.42264878 0.4782759 0.5185579 0.5343601 0.5518350 0.5599315 0.6508480 #>  [502,] 0.11854885 0.1510874 0.1970902 0.2343162 0.4191090 0.5165155 0.5266120 #>  [503,] 0.25448671 0.2928222 0.5185579 0.5509403 0.5529055 0.6092334 0.6766864 #>  [504,] 0.22682587 0.2998028 0.3335145 0.4068293 0.4328381 0.4922302 0.5133000 #>  [505,] 0.40178264 0.6446509 0.7488147 0.8861453 0.9003658 0.9618344 0.9751831 #>  [506,] 0.29391918 0.4061283 0.4306587 0.5228965 0.5832275 0.5899964 0.6753623 #>  [507,] 0.43788933 0.4582539 0.6243289 0.6280845 0.6394288 0.6941987 0.7274788 #>  [508,] 1.30118955 1.3390613 1.4040978 1.4435363 1.4453038 1.4918486 1.5378908 #>  [509,] 0.32966932 0.3941251 0.4519274 0.5066004 0.5322481 0.5453682 0.5629484 #>  [510,] 0.32011448 0.3543735 0.3720383 0.4012863 0.5328062 0.6957056 0.7522217 #>  [511,] 0.37045458 0.4860552 0.5041877 0.5671624 0.6563504 0.6807592 0.7613683 #>  [512,] 0.20947228 0.4264581 0.4478557 0.5000855 0.5334534 0.5624579 0.5738994 #>  [513,] 0.36670446 0.3890201 0.4012843 0.5686263 0.6167925 0.6370494 0.6723794 #>  [514,] 0.37795926 0.4477879 0.4738609 0.5090228 0.5128234 0.5175382 0.5623552 #>  [515,] 0.35009156 0.4756709 0.5546109 0.5708893 0.5950555 0.6232789 0.6752105 #>  [516,] 0.36157721 0.5385472 0.5416117 0.8865734 0.9750752 0.9830905 1.0025298 #>  [517,] 0.27718187 0.5129804 0.6056237 0.6678011 0.6794818 0.7512593 0.7584470 #>  [518,] 0.39251545 0.4565877 0.6506495 0.6835762 0.7811446 0.7988935 0.8164689 #>  [519,] 0.35670470 0.4201375 0.4672613 0.5401132 0.5630573 0.6127575 0.6302454 #>  [520,] 0.38359296 0.4023368 0.4130215 0.4952865 0.5056992 0.5222595 0.5295685 #>  [521,] 0.22487065 0.4958902 0.5519525 0.5677707 0.5743892 0.5762558 0.5909489 #>  [522,] 0.27205992 0.3806329 0.3929309 0.3981831 0.4012642 0.4168953 0.4655050 #>  [523,] 0.36544361 0.5845751 0.6319416 0.7892725 0.7981664 0.8088843 0.8287031 #>  [524,] 0.38902014 0.4312426 0.5943249 0.5948818 0.6798540 0.6920017 0.7050224 #>  [525,] 0.83987583 0.8509428 0.8873737 0.9214484 0.9230865 0.9589170 0.9736951 #>  [526,] 0.38462058 0.3876209 0.4034313 0.5386992 0.5533427 0.5596955 0.5754367 #>  [527,] 0.33691448 0.4289430 0.5639932 0.5928433 0.6370551 0.6499539 0.6703261 #>  [528,] 0.35297632 0.3539770 0.5048027 0.5200880 0.5342477 0.5890675 0.5952005 #>  [529,] 0.43908515 0.5726048 0.5951107 0.6380428 0.6634692 0.6962213 0.7431025 #>  [530,] 0.49618612 0.5118809 0.5632154 0.5878696 0.6671233 0.6799312 0.6899583 #>  [531,] 0.69177105 0.7080238 0.7854926 0.8485308 0.8889982 0.9597501 1.0462626 #>  [532,] 0.67003857 0.7578751 0.7937157 0.8293019 0.8355345 0.9074350 0.9306542 #>  [533,] 0.18817780 0.3263812 0.4498424 0.5378484 0.5758464 0.5943175 0.6420483 #>  [534,] 0.56837870 0.6164915 0.7182087 0.9046293 0.9285257 0.9305844 0.9407088 #>  [535,] 0.34300571 0.5405980 0.6156638 0.6473756 0.6795572 0.6893059 0.6920074 #>  [536,] 0.24046644 0.2838317 0.5192381 0.5881006 0.6124168 0.6373446 0.6395910 #>  [537,] 0.79637568 1.0968572 1.1184596 1.2200925 1.2454324 1.2588954 1.2820018 #>  [538,] 0.25363741 0.4174533 0.4737460 0.5327105 0.5469747 0.5758246 0.6079754 #>  [539,] 0.48027284 0.7263244 1.1252817 1.1739789 1.2375446 1.2668826 1.3256645 #>  [540,] 0.64022675 0.6478359 0.7136217 0.7226188 0.7533586 0.7683751 0.8643401 #>  [541,] 0.49729791 0.5308754 0.5858121 0.6399348 0.6432224 0.6595801 0.6712947 #>  [542,] 0.67283196 0.9377682 0.9395871 0.9449968 1.0308181 1.0672893 1.1126684 #>  [543,] 0.25733196 0.3091513 0.5572357 0.5749722 0.5802695 0.6424083 0.6523067 #>  [544,] 0.32846065 0.3639594 0.4129281 0.4338706 0.4444443 0.4698290 0.4990459 #>  [545,] 0.27747188 0.4772313 0.4779375 0.5122474 0.5361064 0.5497595 0.5737270 #>  [546,] 0.65784302 0.6727169 0.7138442 0.8397201 0.9120992 0.9223763 0.9253608 #>  [547,] 0.77693231 0.7842589 1.0175231 1.0296697 1.0918162 1.0933009 1.1002842 #>  [548,] 0.81291914 0.8410402 0.8907215 0.9101605 0.9197968 0.9322531 0.9667390 #>  [549,] 0.34988827 0.3658588 0.4667414 0.5221603 0.5541596 0.5801597 0.6208179 #>  [550,] 0.35638783 0.3753218 0.4478557 0.4668981 0.5371098 0.5508504 0.5898896 #>  [551,] 0.98692905 1.0555816 1.1090953 1.2605971 1.3463357 1.3719468 1.4361456 #>  [552,] 0.36448039 0.3845294 0.3915174 0.4131788 0.4625128 0.5049695 0.5409083 #>  [553,] 0.81851756 0.8207534 0.9202747 0.9282647 0.9443403 0.9885486 1.0222550 #>  [554,] 0.50010266 0.6957772 0.7301864 0.7754657 0.7973515 0.8045865 0.8717815 #>  [555,] 0.36103013 0.5404673 0.5993752 0.6490013 0.7605415 0.8184226 0.8563243 #>  [556,] 0.37531456 0.4458114 0.4811698 0.5080290 0.5107633 0.5390139 0.5490110 #>  [557,] 0.34966624 0.6055830 0.6822862 0.7461298 0.7522313 0.7746328 0.7760192 #>  [558,] 0.65950542 0.6743650 0.6782276 0.6919135 0.8559171 0.8685761 0.8832589 #>  [559,] 0.35408087 0.5273889 0.5379967 0.7270784 0.8014202 0.8271468 0.8677374 #>  [560,] 0.32298102 0.4324566 0.4512873 0.4721475 0.5071989 0.5486639 0.5605482 #>  [561,] 0.31926014 0.4177578 0.4233472 0.4281433 0.5433968 0.5706198 0.6017010 #>  [562,] 0.37147837 0.4426851 0.4501795 0.4653168 0.4740785 0.4744697 0.4944251 #>  [563,] 0.67536832 0.6803701 0.7013966 0.7250987 0.7625611 0.7701840 0.8303599 #>  [564,] 0.30558786 0.4733031 0.6459002 0.7382215 0.7784527 0.9897000 1.0525441 #>  [565,] 0.42263965 0.5954862 0.6180672 0.6542743 0.7684178 0.7809912 0.7870615 #>  [566,] 0.38562616 0.3940274 0.5131562 0.5554115 0.5569593 0.5620189 0.6500211 #>  [567,] 0.96774209 0.9807033 0.9845888 0.9869290 0.9989732 1.0337165 1.0693221 #>  [568,] 0.41647986 0.4800776 0.6220162 0.6984915 0.7179020 0.7277512 0.7948382 #>  [569,] 0.30036151 0.3627705 0.4833259 0.4931523 0.5202563 0.5279635 0.5583427 #>  [570,] 0.62700042 0.7469769 0.7579051 0.7895488 0.8267739 0.8562542 0.8790143 #>  [571,] 0.53793469 0.7784676 0.7862916 0.8977327 0.9074273 0.9449968 1.0287106 #>  [572,] 0.48747706 0.5052480 0.5876995 0.6037899 0.6299525 0.6802612 0.7808826 #>  [573,] 0.31455279 0.4572626 0.5511351 0.8727226 0.9400134 1.0080838 1.0576547 #>  [574,] 0.44871378 0.4955209 0.5027995 0.5477312 0.5527545 0.6616785 0.6697397 #>  [575,] 0.40233681 0.5225802 0.5227777 0.5782255 0.6278991 0.6454162 0.6815881 #>  [576,] 0.30276277 0.3563878 0.4264581 0.4461007 0.4492418 0.4576282 0.4822133 #>  [577,] 0.45984778 0.5387496 0.7467777 0.7653043 0.7702646 0.7988893 0.8670221 #>  [578,] 0.24233517 0.3681826 0.3720383 0.4513847 0.7203485 0.8236208 0.8826792 #>  [579,] 0.33916954 0.3750427 0.4398783 0.4458593 0.4722167 0.5009533 0.5533079 #>  [580,] 0.33369569 0.4122823 0.4492119 0.5824800 0.6668924 0.6951343 0.7178657 #>  [581,] 0.37468744 0.3753218 0.4822133 0.5334534 0.5615352 0.5621126 0.5731131 #>  [582,] 0.42104877 0.4572296 0.5645318 0.5778201 0.6153423 0.6289675 0.6315479 #>  [583,] 0.45204395 0.4859628 0.5048027 0.6329911 0.6830352 0.7514743 0.7578306 #>  [584,] 0.59721346 0.9042485 0.9326445 0.9747262 0.9855535 1.0402239 1.0956709 #>  [585,] 0.55418451 0.7147373 0.7296337 0.7500947 0.8009319 0.8163358 0.8193204 #>  [586,] 0.43227537 0.5097338 0.5628983 0.5634173 0.6204571 0.6215502 0.6220162 #>  [587,] 0.53989951 0.5470781 0.5781229 0.6724133 0.6949440 0.7183193 0.7480427 #>  [588,] 0.68005398 1.1061666 1.3668989 1.4712084 1.6181672 1.6309481 1.6441485 #>  [589,] 0.12143197 0.4853171 0.5046162 0.5599322 0.6053934 0.6098269 0.6171716 #>  [590,] 0.23289427 0.3647652 0.3892261 0.3914504 0.4576282 0.5154589 0.5208619 #>  [591,] 0.31914359 0.3450512 0.4877015 0.5018955 0.5093561 0.5432409 0.5582123 #>  [592,] 0.52111174 0.5785623 0.6533719 0.6547879 0.6585586 0.7096053 0.7389082 #>  [593,] 0.29969169 0.3756131 0.4681037 0.4874659 0.4931865 0.5187355 0.5391041 #>  [594,] 0.37586708 0.3941251 0.4325380 0.4865672 0.5303282 0.5363791 0.5395874 #>  [595,] 0.46275192 0.6156315 0.6668854 0.6815818 0.6859185 0.6957226 0.7253906 #>  [596,] 0.27386969 0.3047091 0.4561020 0.5454009 0.5961165 0.6033334 0.6141357 #>  [597,] 0.56180965 0.7794370 0.7882720 0.8798069 0.9775903 1.0134591 1.0420358 #>  [598,] 0.51587526 0.5978125 0.6222436 0.6744626 0.7547999 0.7678661 0.7917034 #>  [599,] 0.22346305 0.3448585 0.3578915 0.3840508 0.4412777 0.4519132 0.4651922 #>  [600,] 0.18817780 0.2883115 0.5132283 0.5674412 0.6427237 0.6529034 0.6889946 #>  [601,] 0.61830786 0.6295244 0.7233092 0.8337859 0.8451630 0.8698996 0.8701921 #>  [602,] 0.42168823 0.4416576 0.5030812 0.5041804 0.5369331 0.5413846 0.5682975 #>  [603,] 0.37468744 0.4370394 0.5371098 0.5402952 0.5801589 0.5937880 0.6256269 #>  [604,] 0.48596279 0.5884487 0.5899697 0.5952005 0.7127105 0.7551475 0.7600652 #>  [605,] 0.23398250 0.3321620 0.3511652 0.3725005 0.4475015 0.5438362 0.6081187 #>  [606,] 0.36074022 0.3801411 0.6225862 0.6753131 0.7174468 0.7451045 0.7965901 #>  [607,] 0.53793469 0.7907275 0.9213428 1.0147165 1.1276113 1.2419361 1.2849333 #>  [608,] 0.22241814 0.5474846 0.5649897 0.6471704 0.6856286 0.8259356 0.8884369 #>  [609,] 0.50245090 0.5122624 0.5291546 0.5353705 0.5468166 0.5708986 0.5873832 #>  [610,] 0.37440517 0.4489088 0.5235791 0.5558349 0.5608899 0.6031894 0.6405242 #>  [611,] 0.45872292 0.6221477 0.6507055 0.6799312 0.7686181 0.7971531 0.8324046 #>  [612,] 0.45566315 0.4784723 0.5076226 0.5591654 0.5943044 0.6735480 0.6874262 #>  [613,] 0.42298295 0.4754594 0.5783884 0.6338927 0.6408158 0.6855001 0.6889946 #>  [614,] 0.38118761 0.5671624 0.6403851 0.6979756 0.7215604 0.7428618 0.7694822 #>  [615,] 0.60063129 0.6374703 0.6961887 0.7497739 0.7641211 0.8685452 0.8810039 #>  [616,] 0.20296080 0.2544867 0.3468886 0.5310581 0.5533335 0.5558888 0.5599315 #>  [617,] 1.32211118 1.5102195 1.5297121 1.5487315 1.6030111 1.6204099 1.6622618 #>  [618,] 0.68005398 0.8732695 1.3353238 1.3738977 1.3756064 1.3979647 1.4334100 #>  [619,] 0.18663857 0.4231677 0.4747570 0.5547441 0.5733851 0.6531548 0.7276433 #>  [620,] 0.83762354 0.8630547 0.9391965 0.9865481 0.9920496 1.0223418 1.0556619 #>  [621,] 0.33214564 0.3888785 0.4141542 0.5766069 0.6551930 0.6574880 0.6601498 #>  [622,] 0.45616033 0.4748769 0.5707459 0.5835793 0.6369656 0.6520133 0.7653608 #>  [623,] 0.52250178 0.5899964 0.6222612 0.6239301 0.6468161 0.6592934 0.6674390 #>  [624,] 0.91159017 0.9282647 0.9766713 1.0526467 1.1038369 1.1192562 1.1617757 #>  [625,] 0.37956040 0.4169620 0.4418527 0.5122624 0.5376982 0.5559121 0.5621855 #>  [626,] 0.65668051 0.7420699 0.8377757 0.8617968 0.8680364 0.8805901 0.8923804 #>  [627,] 0.72013179 0.7770500 0.7793111 0.8885686 0.8931032 0.9054549 0.9066918 #>  [628,] 0.94392896 0.9705374 0.9996213 1.0469737 1.0550341 1.0775934 1.1359418 #>  [629,] 0.51795750 0.6197098 0.6221450 0.6508480 0.6790955 0.7207142 0.7549236 #>  [630,] 0.63319273 0.8448668 0.8942249 0.9557984 1.0779079 1.0961032 1.1320994 #>  [631,] 0.56025632 0.5655979 0.6782276 0.6855680 0.6987778 0.7713008 0.7806582 #>  [632,] 0.28215704 0.2921786 0.3366966 0.3860377 0.4669566 0.4886736 0.5000270 #>  [633,] 0.33369569 0.3394254 0.3558066 0.3713191 0.5157577 0.5900970 0.6975223 #>  [634,] 0.52793633 0.5472223 0.6204571 0.6357607 0.6391717 0.6391749 0.7038645 #>  [635,] 0.34089711 0.4163414 0.4523003 0.4877873 0.4997462 0.5149505 0.5154589 #>  [636,] 0.25951850 0.2959485 0.3206984 0.3335145 0.3758671 0.3967202 0.4416576 #>  [637,] 0.41657434 0.4336350 0.4596176 0.6274017 0.6602232 0.6750310 0.6827848 #>  [638,] 0.22241814 0.4659339 0.6562349 0.6857486 0.7319643 0.7368994 0.7556975 #>  [639,] 0.31267521 0.4105306 0.4882665 0.5072670 0.5216698 0.6110654 0.6236326 #>  [640,] 1.08844314 1.0910918 1.1133480 1.3981518 1.4026849 1.4247269 1.4363800 #>  [641,] 0.31329689 0.7473426 0.7554393 0.7570800 0.8005422 0.9546796 0.9865481 #>  [642,] 0.55908355 0.9087155 0.9530033 0.9957087 1.0264978 1.0491380 1.0871693 #>  [643,] 0.51374961 0.5657530 0.6164669 0.6329911 0.6586798 0.6649537 0.6937455 #>  [644,] 0.59413972 0.5986623 0.8289197 0.9228385 0.9354230 1.0103809 1.0622729 #>  [645,] 0.48977915 0.5745434 0.6795572 0.7157391 0.7334305 0.7800774 0.8174269 #>  [646,] 0.32011448 0.3409857 0.3681826 0.5018500 0.8345338 0.8641544 0.8886569 #>  [647,] 0.21244977 0.3612923 0.5737270 0.5812295 0.6163646 0.6174773 0.6671275 #>  [648,] 0.62952440 0.6976321 0.7905684 0.8160024 0.8523928 0.9218954 0.9320076 #>  [649,] 0.49243691 0.4956595 0.5276924 0.5669679 0.6174773 0.6257324 0.6362753 #>  [650,] 0.42013754 0.4814485 0.5997636 0.6482118 0.6594423 0.6967323 0.7013864 #>  [651,] 0.51752408 0.5487608 0.5601816 0.5804437 0.6531548 0.6721589 0.7467520 #>  [652,] 0.39402739 0.4729150 0.5006370 0.5394197 0.6019657 0.6190328 0.6290794 #>  [653,] 0.21250608 0.2751759 0.3391695 0.3751891 0.4101014 0.4463847 0.4832499 #>  [654,] 0.34826490 0.3744052 0.5517060 0.5627216 0.6619813 0.6625490 0.6970221 #>  [655,] 0.93283197 0.9425821 0.9729095 1.2037859 1.2395494 1.2501014 1.2809138 #>  [656,] 0.64038509 0.6452569 0.6929673 0.7209981 0.8190423 0.8260874 0.8419036 #>  [657,] 0.82427476 0.8537963 0.8891291 1.0781723 1.0958168 1.1414508 1.1529229 #>  [658,] 0.44445015 0.5496043 0.6237806 0.6844439 0.8006307 0.8236208 0.8525848 #>  [659,] 0.44513465 0.4897792 0.6473756 0.7589513 0.7874615 0.8225036 0.8803798 #>  [660,] 0.43824386 0.6467422 0.7174468 0.7383614 0.8512911 0.8591322 0.8914220 #>  [661,] 0.14742264 0.4081155 0.4772313 0.4924369 0.5258943 0.5353458 0.5514760 #>  [662,] 0.47054231 0.4894120 0.5347352 0.5595763 0.5900902 0.6053934 0.6195740 #>  [663,] 0.56405142 0.5675040 0.5917501 0.6037713 0.6970221 0.7012369 0.7428445 #>  [664,] 0.28055761 0.4560198 0.4606220 0.4833259 0.5080290 0.6489980 0.6542390 #>  [665,] 0.40465699 0.4304682 0.4690105 0.4700649 0.5050208 0.5257961 0.5331683 #>  [666,] 0.49564140 0.8502016 0.9359437 1.0856037 1.1355880 1.1448269 1.1849583 #>  [667,] 0.61330613 0.6309422 0.6409177 0.6748474 0.6910644 0.8115153 0.8129100 #>  [668,] 0.51440433 0.6506495 0.6726006 0.7231984 0.7413998 0.7759613 0.7770500 #>  [669,] 0.52838165 0.5447042 0.6534746 0.6602232 0.7170351 0.7409901 0.7676066 #>  [670,] 0.41797567 0.4542742 0.5650636 0.5823305 0.6134443 0.6423505 0.6595801 #>  [671,] 0.28039818 0.4545972 0.4644731 0.5409083 0.5474644 0.5637732 0.6320317 #>  [672,] 0.39657248 0.5266565 0.5988548 0.7199880 0.7906473 0.7908548 0.8291375 #>  [673,] 0.24084381 0.3304021 0.4120199 0.4140481 0.4222740 0.4249954 0.4289395 #>  [674,] 0.43369162 0.5197533 0.5378484 0.5735035 0.6326530 0.6384622 0.6427237 #>  [675,] 0.43788933 0.4997300 0.6927205 0.7184799 0.7866388 0.9300915 0.9533618 #>  [676,] 0.56754586 0.5781375 0.6175863 0.7144523 0.7828045 0.8067712 0.8467181 #>  [677,] 0.37680790 0.4189525 0.4937443 0.5528645 0.5723682 0.5835793 0.6505760 #>  [678,] 0.39041162 0.4439548 0.4719171 0.6083888 0.6711182 0.7184024 0.7195689 #>  [679,] 0.25373706 0.3627705 0.4138689 0.4228472 0.4295797 0.4626309 0.4685926 #>  [680,] 0.48052215 0.5567942 0.7069615 0.8884369 0.9215215 0.9288676 0.9869096 #>  [681,] 0.45960309 0.6307546 0.6848895 0.7099501 0.7168200 0.7200368 0.7449747 #>  [682,] 0.42556997 0.5471438 0.5708893 0.6478359 0.7697766 0.8085607 0.8508554 #>  [683,] 0.23847659 0.5073048 0.6240298 0.6769099 0.7575677 0.7703486 0.7717586 #>  [684,] 0.50255608 0.5354552 0.5541845 0.5737718 0.5905660 0.6039246 0.6191079 #>  [685,] 0.58738996 0.6184429 0.7509310 0.7973665 0.8046827 0.9220352 1.0030942 #>  [686,] 0.34131033 0.4516708 0.5374538 0.7240448 0.7349645 0.7368994 0.7696667 #>  [687,] 0.28831152 0.3263812 0.5238447 0.5412136 0.6156315 0.6534598 0.6660028 #>  [688,] 0.48931953 0.5040458 0.5281381 0.6917468 0.7107170 0.7449783 0.7680263 #>  [689,] 0.69849328 0.7440243 0.7693496 0.8004896 0.8428046 0.8576456 0.8677271 #>  [690,] 0.21352367 0.5068012 0.5627216 0.6669016 0.7305029 0.7670597 0.7670752 #>  [691,] 0.26130918 0.3485373 0.5771910 0.6148663 0.6575900 0.6690424 0.7046414 #>  [692,] 0.46846386 0.6009242 0.7180207 0.7926774 0.8282627 0.8359561 0.8374602 #>  [693,] 0.29391918 0.5997700 0.6058511 0.6184226 0.6573040 0.6674390 0.7151542 #>  [694,] 0.27517589 0.3754892 0.3845889 0.4328079 0.4398783 0.5281964 0.5597194 #>  [695,] 0.33590035 0.4105306 0.4150142 0.5331146 0.5597575 0.5630272 0.5837417 #>  [696,] 0.22751586 0.4128979 0.4842601 0.5638201 0.5692521 0.6134731 0.6547860 #>  [697,] 0.38361695 0.4322754 0.4926918 0.5357221 0.6391749 0.6964089 0.7179020 #>  [698,] 0.49269178 0.5766607 0.6391717 0.6471149 0.6646962 0.6667978 0.7735943 #>  [699,] 0.45658768 0.5409483 0.6466036 0.6943531 0.7327903 0.8161062 0.8265430 #>  [700,] 0.61241677 0.6449505 0.6615264 0.6815409 0.7321835 0.8620809 0.8842348 #>  [701,] 0.40954350 0.5003888 0.5819575 0.6164800 0.6757648 0.7231125 0.7297600 #>  [702,] 0.29933878 0.3563927 0.4458593 0.4832499 0.6215502 0.6974313 0.7113928 #>  [703,] 0.25953822 0.5070421 0.5357523 0.6242356 0.6670837 0.6676536 0.8914338 #>  [704,] 0.40002026 0.4557691 0.5225802 0.5805225 0.6358698 0.6718462 0.6830318 #>  [705,] 0.51992510 0.5703682 0.5964065 0.6164915 0.6427270 0.6641285 0.7180120 #>  [706,] 0.35652565 0.4830648 0.5314765 0.6553741 0.6906686 0.7445154 0.7762223 #>  [707,] 0.30558786 0.5222240 0.5479748 0.5775928 0.5992999 0.8384111 0.9763872 #>  [708,] 0.71504571 0.8561305 0.9693441 0.9996213 1.0125310 1.0761060 1.0832864 #>  [709,] 0.41155919 0.4191656 0.4681038 0.5208619 0.5795676 0.5845917 0.6069921 #>  [710,] 0.21244977 0.3114125 0.4950876 0.5778201 0.6362753 0.6864650 0.7237089 #>  [711,] 0.44725961 0.5962153 0.6546358 0.6573239 0.7168200 0.8003907 0.8522962 #>  [712,] 0.36395939 0.4006505 0.4131788 0.4157509 0.4166350 0.4702607 0.4814248 #>  [713,] 0.34223822 0.5488572 0.7263244 0.8383751 0.8579348 0.9099341 1.0080889 #>  [714,] 0.53575226 0.6051691 0.6374033 0.6724805 0.7570800 0.8927318 0.9365318 #>  [715,] 0.31153120 0.4842601 0.5357221 0.5394197 0.6298748 0.6302572 0.6434221 #>  [716,] 0.28437413 0.4198508 0.4291899 0.4476148 0.4655050 0.4840863 0.5626081 #>  [717,] 0.22994126 0.4495252 0.4519592 0.4723005 0.4878343 0.5296030 0.5341617 #>  [718,] 1.01888170 1.3668989 1.6331784 1.7496796 1.8487149 1.8947566 1.9258575 #>  [719,] 0.17429596 0.4122487 0.4205260 0.4912813 0.5130117 0.5187355 0.5308442 #>  [720,] 0.40814314 0.6109514 0.6132749 0.9068059 0.9289984 0.9795672 0.9948731 #>  [721,] 0.41909634 0.5792753 0.5954894 0.6369398 0.6599460 0.6844288 0.7091515 #>  [722,] 0.63568495 0.6963184 0.8129276 0.8258436 0.8444434 0.8727226 0.9076798 #>  [723,] 0.35262564 0.5692521 0.5915688 0.6058192 0.6325950 0.7117749 0.7393903 #>  [724,] 0.23129396 0.4748769 0.4937443 0.5557404 0.5721222 0.6134443 0.6457617 #>  [725,] 0.07225621 0.3491231 0.3795604 0.5221603 0.5291546 0.5613973 0.6100326 #>  [726,] 0.68114830 0.9972865 1.0266433 1.1087902 1.1216382 1.2164524 1.2365170 #>  [727,] 0.24122135 0.3056287 0.5465276 0.5906781 0.6053922 0.6391886 0.6801411 #>  [728,] 0.70084265 0.7135153 0.7419031 0.7605415 0.8050693 0.8296173 0.8530389 #>  [729,] 0.58269670 0.6779635 0.7212267 0.9077286 0.9099292 0.9158575 0.9218954 #>  [730,] 0.35682965 0.4447704 0.6055830 0.6123048 0.6123799 0.6290462 0.6380067 #>  [731,] 0.47793753 0.4874771 0.5215407 0.6160321 0.6313828 0.6376039 0.6817113 #>  [732,] 0.24059656 0.4261513 0.4404567 0.4801752 0.6380428 0.6588811 0.7212767 #>  [733,] 0.35951552 0.4960357 0.5859801 0.5993752 0.6020313 0.6988914 0.7361456 #>  [734,] 0.46260503 0.5001027 0.7026152 0.7509310 0.7530642 0.9438030 1.0177084 #>  [735,] 1.63637406 1.6436283 1.6842393 1.7781923 1.7876359 1.7940164 1.8690612 #>  [736,] 0.62168571 0.6563475 0.6569271 0.6740894 0.6888683 0.6997584 0.7148923 #>  [737,] 0.31914359 0.4587378 0.5227777 0.5295685 0.5743976 0.6598238 0.6611862 #>  [738,] 0.34421634 0.3944156 0.5281381 0.6115298 0.6508106 0.6878421 0.9117278 #>  [739,] 0.22487065 0.3709018 0.5004995 0.5147875 0.5150930 0.5221502 0.5352787 #>  [740,] 0.46260503 0.5208687 0.6174474 0.6742711 0.6883951 0.7973515 0.7973665 #>  [741,] 0.36598685 0.5992999 0.6118236 0.7064581 0.7189778 0.7784527 0.7923479 #>  [742,] 0.51969781 0.5590836 0.6918048 0.7437197 0.8801720 0.9618344 0.9745460 #>  [743,] 0.54005297 0.5782540 0.6275993 0.6396746 0.6583807 0.6646320 0.6699939 #>  [744,] 0.24233517 0.3409857 0.3543735 0.5904456 0.7169006 0.9072662 0.9118374 #>  [745,] 0.62446256 0.7232678 0.7573237 0.7709733 0.7870600 0.7884275 0.7885125 #>  [746,] 1.15611895 1.2617213 1.3270425 1.3361337 1.4236779 1.4304110 1.4852601 #>  [747,] 1.17959862 1.2930921 1.3492912 1.3734848 1.3958514 1.5196893 1.5196914 #>  [748,] 0.38118761 0.4860552 0.5915688 0.6688148 0.7088676 0.7209981 0.7564713 #>  [749,] 0.38562754 0.6169938 0.6862901 0.7169829 0.7779684 0.8946554 0.9638655 #>  [750,] 0.57838841 0.6232580 0.6472784 0.6603805 0.6614751 0.6629343 0.6985526 #>  [751,] 0.43728731 0.4835633 0.4835932 0.5147875 0.5919473 0.6326530 0.6727474 #>  [752,] 0.43363502 0.4787913 0.5445872 0.6134646 0.6326318 0.6423057 0.6852753 #>  [753,] 0.41319063 0.4343683 0.5214899 0.6600334 0.6862512 0.7171496 0.7660662 #>  [754,] 1.93339553 2.1052622 2.1447636 2.3193095 2.3597900 2.3928831 2.4383629 #>  [755,] 0.60003498 0.6211005 0.7180202 0.8076422 0.8163825 0.9288148 0.9478187 #>  [756,] 0.45013186 0.5344986 0.6312164 0.6558101 0.6757648 0.6885145 0.7312867 #>  [757,] 0.68742958 0.7892502 0.8376235 0.8871956 0.9830346 0.9887359 1.0192750 #>  [758,] 0.77812478 0.8001535 0.9281911 0.9695342 1.0003243 1.0505422 1.0555865 #>  [759,] 0.40343130 0.4605179 0.4778595 0.5479327 0.5693574 0.5915493 0.5976929 #>  [760,] 0.67774286 0.6909479 0.7115965 0.8035829 0.8741620 0.9237681 0.9595014 #>  [761,] 0.34028618 0.6323160 0.6751521 0.6929673 0.7195689 0.8355729 0.8960329 #>  [762,] 0.36948845 0.4882941 0.6031988 0.7505207 0.7533245 0.7664468 0.7779867 #>  [763,] 0.31332879 0.3260705 0.3740820 0.4059805 0.4672613 0.5528327 0.5882132 #>  [764,] 0.55281406 0.5975192 0.6242788 0.6320724 0.6347678 0.6527007 0.6945472 #>  [765,] 0.49874377 0.5632382 0.5717832 0.5957708 0.6180137 0.6291188 0.6359516 #>  [766,] 0.78391829 0.7962710 0.8152349 0.8338106 0.8665396 0.8676799 0.9006809 #>  [767,] 0.27386969 0.4349452 0.4406939 0.4554039 0.5668140 0.6069750 0.6472157 #>  [768,] 0.64765223 0.9206887 0.9831047 1.0034599 1.0588642 1.1167362 1.1185540 #>  [769,] 0.23926139 0.3993467 0.4000368 0.4094190 0.4324566 0.5408768 0.5511119 #>  [770,] 0.45724049 0.5056791 0.6033334 0.6155516 0.6168066 0.6347692 0.6735134 #>  [771,] 0.54260343 0.5777249 0.6283086 0.6404512 0.6534741 0.7463122 0.7544069 #>  [772,] 0.65347462 0.7389202 0.7605055 0.8382666 0.8422744 0.8601087 0.9418117 #>  [773,] 0.31979185 0.4213785 0.4341613 0.5367416 0.5472567 0.5486240 0.5576630 #>  [774,] 0.73836767 0.7418223 0.7956301 1.0454216 1.0590251 1.1163439 1.1461185 #>  [775,] 0.86507743 0.8749822 0.9388909 0.9408669 1.0012195 1.0306910 1.0727517 #>  [776,] 1.04829106 1.1561190 1.2111117 1.2472283 1.2698654 1.3318678 1.3910409 #>  [777,] 0.38203086 0.5158753 0.5322481 0.5367416 0.5702650 0.6468908 0.7072381 #>  [778,] 0.67003857 0.9503623 1.1774862 1.1825511 1.2113857 1.2548814 1.2605141 #>  [779,] 0.22777047 0.4115592 0.4874659 0.5072896 0.5211273 0.5533427 0.5654253 #>  [780,] 0.19924239 0.2528981 0.3644804 0.3840508 0.4518578 0.4575262 0.4703776 #>  [781,] 0.76522451 0.7968302 0.8378339 0.8498602 0.8958400 0.9082567 0.9113314 #>  [782,] 0.34966624 0.6161268 0.6440513 0.6703261 0.7298581 0.7489211 0.7563066 #>  [783,] 0.38359296 0.3947110 0.4069538 0.5038205 0.5115946 0.5574878 0.5652159 #>  [784,] 0.51580362 0.5623571 0.7280457 0.7641243 0.7733364 0.8177607 0.8289197 #>  [785,] 0.41514864 0.4834570 0.5551672 0.5563715 0.6047383 0.6213485 0.6298820 #>  [786,] 0.36469635 0.4653359 0.6018846 0.6493763 0.6779757 0.7005254 0.7620996 #>  [787,] 0.84994942 0.9024401 0.9282930 0.9452786 0.9487356 0.9512455 0.9559652 #>  [788,] 0.36469635 0.5027995 0.5533335 0.5607372 0.5720043 0.5879258 0.6224045 #>  [789,] 0.38562754 0.6973906 0.7199620 0.7255400 0.8135092 0.8686249 0.8748506 #>  [790,] 0.37408198 0.4222740 0.4506576 0.4610837 0.4660050 0.4745562 0.5188418 #>  [791,] 0.28745901 0.4241054 0.5379967 0.5497811 0.6259476 0.7024617 0.7545223 #>  [792,] 0.58197013 0.7568219 0.7861065 0.8512336 0.8740337 0.9097483 0.9499604 #>  [793,] 0.54469305 0.5949507 0.6952372 0.7080395 0.7152166 0.7440243 0.7668550 #>  [794,] 0.46791313 0.7697980 0.9697174 1.1154051 1.1360418 1.1391517 1.1764884 #>  [795,] 0.05436257 0.3329386 0.5369331 0.5593836 0.5817469 0.5855578 0.5961896 #>  [796,] 0.31153120 0.3836169 0.5872569 0.6100743 0.6471149 0.6547860 0.6571595 #>  [797,] 0.44045670 0.4647043 0.6068558 0.6934052 0.7320866 0.7336196 0.7337119 #>  [798,] 0.24358437 0.4134796 0.4246627 0.4501795 0.5617958 0.5671104 0.5839306 #>  [799,] 0.57569586 0.6156638 0.7464538 0.7589513 0.8174269 0.8518044 0.8871918 #>  [800,] 0.32358790 0.3607402 0.6207800 0.6552238 0.7373494 0.7670752 0.8576951 #>  [801,] 1.51972407 1.5785633 1.7575647 1.8655653 1.9099171 2.0524997 2.1488770 #>  [802,] 0.64765223 0.9664674 1.0087125 1.0758298 1.1223725 1.1252817 1.1826457 #>  [803,] 0.14742264 0.2998943 0.4840863 0.4841176 0.4888803 0.5497595 0.5544329 #>  [804,] 0.47121832 0.5642437 0.5761952 0.5868243 0.6093107 0.6208529 0.6851223 #>  [805,] 0.64873436 0.7480427 0.9129136 0.9357605 0.9425821 0.9525457 0.9930230 #>  [806,] 0.30310872 0.3033016 0.5518302 0.6355688 0.6522990 0.6718462 0.7368617 #>  [807,] 0.40695384 0.4083699 0.4336916 0.4498424 0.4871976 0.5027466 0.5143762 #>  [808,] 0.86702215 0.8673449 0.8880994 0.8958400 0.8972511 0.9223763 0.9516369 #>  [809,] 0.45118056 0.5783974 0.6023708 0.7307950 0.7842589 0.8272954 0.8353872 #>  [810,] 0.51988226 0.5212235 0.5352787 0.5415427 0.5490644 0.5615352 0.5743892 #>  [811,] 0.32658221 0.6471704 0.7069615 0.7722035 0.7777839 0.8216129 0.8579898 #>  [812,] 0.32658221 0.5567942 0.5649897 0.7556975 0.7888237 0.8984816 0.9866034 #>  [813,] 0.30470909 0.4349452 0.5038490 0.5755439 0.5899536 0.5976929 0.6076638 #>  [814,] 0.43783975 0.4694655 0.5180789 0.5533079 0.5638201 0.5801597 0.5964711 #>  [815,] 0.47191706 0.5243686 0.6016637 0.6503275 0.6589443 0.6893551 0.7231023 #>  [816,] 0.38546652 0.4594133 0.4682843 0.5157577 0.6757034 0.7178657 0.7467777 #>  [817,] 0.38520617 0.9665143 1.0595918 1.0634705 1.2193097 1.2497759 1.3059485 #>  [818,] 0.65211039 0.6933919 0.7032916 0.7041804 0.7315277 0.7336269 0.7483099 #>  [819,] 0.45088309 0.4890732 0.5441104 0.5572703 0.5833123 0.6148663 0.6728709 #>  [820,] 0.72613648 0.7374729 0.7667823 0.7686471 0.9225603 0.9447627 0.9693816 #>  [821,] 1.00880939 1.1339735 1.1665317 1.2750779 1.3240924 1.4751809 1.4996927 #>  [822,] 0.27012358 0.4465556 0.5442154 0.5506643 0.5533405 0.5630446 0.5643653 #>  [823,] 0.28073651 0.4081819 0.4535941 0.4853171 0.5354552 0.6262383 0.6638497 #>  [824,] 0.32358790 0.3801411 0.5901206 0.5935437 0.6370777 0.6392072 0.7687790 #>  [825,] 0.73472031 0.7469769 0.9355043 0.9476679 0.9988555 1.0081850 1.0872648 #>  [826,] 0.38762086 0.4136909 0.4653168 0.4700649 0.4974177 0.5316723 0.5585887 #>  [827,] 0.12206065 0.2404664 0.4649037 0.6449505 0.6883033 0.6894956 0.6900882 #>  [828,] 0.54411883 0.5964065 0.8219601 0.8731124 0.9228385 0.9484335 0.9544902 #>  [829,] 1.40523136 1.4264797 1.5173526 1.7064539 1.8010857 1.8128476 1.8257848 #>  [830,] 0.41712939 0.7595847 0.7893493 0.8650774 0.8681179 0.8700557 0.8915705 #>  [831,] 1.37181920 1.4295861 1.6325542 1.6749400 1.6939810 1.7073152 1.8163462 #>  [832,] 0.29350945 0.4675388 0.4903795 0.5215843 0.5544572 0.6559727 0.6735480 #>  [833,] 0.60968438 0.6264177 0.6567350 0.6845109 0.7235326 0.7948382 0.8005251 #>  [834,] 0.46971624 0.5039256 0.5574902 0.6181340 0.6232848 0.6764361 0.7262914 #>  [835,] 0.37096668 0.4130467 0.4584963 0.4837387 0.5060267 0.5377724 0.5386992 #>  [836,] 0.34089711 0.3647652 0.3704422 0.4448423 0.4461007 0.4534882 0.5308595 #>  [837,] 0.15108740 0.1598299 0.3113926 0.3654141 0.4604046 0.5295835 0.5532869 #>  [838,] 0.57503161 0.6649872 0.6726987 0.7880155 0.8323001 0.8516554 0.9179103 #>  [839,] 0.57194815 0.8671689 1.1163295 1.1736497 1.2170039 1.2613435 1.2774194 #>  [840,] 0.50704205 0.6051691 0.6069211 0.6280845 0.6346902 0.6927205 0.7458319 #>  [841,] 0.28745901 0.3055784 0.4977546 0.5273889 0.7250987 0.7637544 0.7925156 #>  [842,] 0.69577718 0.7530642 0.8009384 0.9367058 0.9453007 0.9741745 1.0144499 #>  [843,] 0.84203949 0.8873737 1.1337951 1.2198473 1.2473449 1.2703729 1.2957811 #>  [844,] 0.44368466 0.4439548 0.5030812 0.5050678 0.5919143 0.6323160 0.7116706 #>  [845,] 0.26628857 0.2856352 0.4162734 0.4762736 0.5006370 0.5066583 0.5285104 #>  [846,] 0.34421634 0.7095562 0.7107170 0.8022505 0.8144928 0.9944729 1.0675728 #>  [847,] 0.26660384 0.4738609 0.5467673 0.6291859 0.6542390 0.6720716 0.6758638 #>  [848,] 0.33064825 0.5074940 0.5343601 0.5466979 0.6372851 0.6444439 0.6468161 #>  [849,] 0.37531456 0.3945620 0.4606220 0.4918858 0.4931523 0.5551872 0.5558349 #>  [850,] 0.37044221 0.3892261 0.4129796 0.4492418 0.4721679 0.5263382 0.5932556 #>  [851,] 0.51752408 0.5469747 0.6292891 0.6313136 0.6439247 0.6490084 0.6625685 #>  [852,] 0.45431656 0.4932539 0.5474323 0.5659348 0.6197098 0.6690904 0.7080189 #>  [853,] 0.32925054 0.4836203 0.5421734 0.5437653 0.5497907 0.5693574 0.6066469 #>  [854,] 0.39034112 0.5472223 0.6560286 0.6759517 0.7753653 0.7928052 0.8415548 #>  [855,] 0.36428810 0.4111151 0.5365471 0.6354636 0.6523529 0.7738999 0.7891790 #>  [856,] 0.17734483 0.4083699 0.5038205 0.5056992 0.6352637 0.6576556 0.6691525 #>  [857,] 0.68682126 0.7152166 0.8004896 0.9624477 0.9810009 1.1152820 1.2229074 #>  [858,] 0.52706978 0.5283817 0.7331551 0.7355976 0.7389202 0.7787994 0.8022448 #>  [859,] 0.35652565 0.4524417 0.5167080 0.6226558 0.6299839 0.6551671 0.7880155 #>  [860,] 0.82434602 0.8784327 0.8952869 0.9312747 1.0688241 1.2121888 1.2334104 #>  [861,] 0.28196509 0.3662415 0.3889542 0.4004170 0.5003888 0.5233606 0.5339098 #>  [862,] 0.07225621 0.3072167 0.4418527 0.4667414 0.5468166 0.5860900 0.5964711 #>  [863,] 0.42692727 0.4338706 0.4606803 0.4721475 0.4973359 0.5155913 0.5444548 #>  [864,] 0.29239783 0.3042058 0.3946723 0.4140481 0.4291899 0.4435316 0.4506576 #>  [865,] 0.40128632 0.4513847 0.4752968 0.5018500 0.5496043 0.5904456 0.6362210 #>  [866,] 0.35161288 0.5704698 0.5929770 0.6005470 0.6897845 0.7020173 0.7028372 #>  [867,] 0.33619379 0.3568296 0.4765060 0.5001645 0.6378900 0.6910897 0.7182341 #>  [868,] 0.43947267 0.5196978 0.5659348 0.7670429 0.8117174 0.8134168 0.8531119 #>  [869,] 0.50083511 0.5430107 0.5646808 0.6434221 0.6848730 0.7098718 0.7187821 #>  [870,] 0.56724851 1.0509428 1.0774524 1.1034576 1.1869207 1.2168950 1.2212544 #>  [871,] 0.33692534 0.4178748 0.5374538 0.6857486 0.6952841 0.7237138 0.7934165 #>  [872,] 1.23084517 1.4440003 1.5013923 1.5116276 1.5212037 1.5560469 1.5822743 #>  [873,] 0.52048419 0.9336870 1.0802490 1.0914923 1.2395494 1.2974345 1.3018097 #>  [874,] 0.40485758 0.4133211 0.4169628 0.4556631 0.5402373 0.5483920 0.5628119 #>  [875,] 0.53004164 0.8853389 1.1591558 1.1667106 1.2015185 1.2317163 1.2594186 #>  [876,] 0.55474410 0.6221426 0.7025102 0.7890208 0.8457584 0.8501048 0.8789460 #>  [877,] 0.12143197 0.4535941 0.5287785 0.5462578 0.5623455 0.5765948 0.5900902 #>  [878,] 0.52801276 0.5750316 0.6018846 0.6299839 0.6441897 0.7876722 0.8117174 #>  [879,] 0.48334236 0.5308754 0.6133061 0.6285018 0.7407575 0.7448498 0.7634141 #>  [880,] 0.28525084 0.4061283 0.4226488 0.5509403 0.5558888 0.5614801 0.5662263 #>  [881,] 0.51330823 0.6841272 0.7697980 0.7891790 0.8311658 0.8865604 0.8982653 #>  [882,] 0.44280901 0.7135153 0.7334298 0.7354312 0.8181246 0.8222658 0.8294935 #>  [883,] 0.38279950 0.4521602 0.5474395 0.5478030 0.5886540 0.6104980 0.6349061 #>  [884,] 0.63918156 0.7401387 0.7846227 0.7903408 0.9123443 0.9152961 0.9489332 #>  [885,] 0.29217858 0.3132695 0.3305500 0.4163414 0.4233472 0.4296030 0.4905638 #>  [886,] 0.54046719 0.6637766 0.6738045 0.6928634 0.6999778 0.7010327 0.7186084 #>  [887,] 0.56837870 0.6504910 0.7895354 0.8140225 0.9121493 0.9177326 0.9350308 #>  [888,] 0.29072697 0.3297114 0.4826490 0.5040328 0.5580378 0.5617065 0.6151595 #>  [889,] 0.45216020 0.4777534 0.5438666 0.5532352 0.5853102 0.5863282 0.6259172 #>  [890,] 0.62646320 0.6426497 0.6917711 0.7325698 0.8456948 0.8604582 0.8970974 #>  [891,] 0.40684431 0.4447767 0.4723797 0.5841859 0.6327965 0.6562090 0.6947378 #>  [892,] 0.52895676 0.9280731 0.9667390 1.0192356 1.1032075 1.1635289 1.2048387 #>  [893,] 0.24647757 0.3397002 0.3624759 0.4134796 0.4574274 0.4923081 0.4970652 #>  [894,] 0.38854271 0.4604046 0.4917106 0.5328126 0.5655595 0.6201605 0.6308008 #>  [895,] 0.38887852 0.3893484 0.4122098 0.4878343 0.5415427 0.5726673 0.5934664 #>  [896,] 0.83972014 0.8842893 0.9148114 0.9391374 1.0439167 1.1450328 1.1469954 #>  [897,] 0.43728731 0.4698290 0.5191220 0.5197533 0.5783641 0.5792453 0.6022168 #>  [898,] 1.04967994 1.1869207 1.2592649 1.3701433 1.4560480 1.5321760 1.5773499 #>  [899,] 0.26703603 0.3942819 0.4153354 0.4251269 0.4275584 0.4902061 0.5422341 #>  [900,] 0.77693231 0.7956301 0.8562537 0.8961951 0.9255770 0.9679393 1.0013866 #>  [901,] 0.48351763 0.5310611 0.5529674 0.5887522 0.6177255 0.6209007 0.6240298 #>  [902,] 0.36585876 0.4487777 0.4970343 0.6452569 0.6751521 0.6979791 0.7334235 #>  [903,] 0.62257576 0.8916950 0.9092610 0.9148814 0.9598810 1.0496799 1.0509428 #>  [904,] 0.60570733 0.6368831 0.6963184 0.6984915 0.7031111 0.8028770 0.8360344 #>  [905,] 0.44890882 0.4669566 0.5493006 0.5845917 0.5875904 0.5896788 0.6000621 #>  [906,] 0.78928878 0.8316041 1.0329292 1.0507154 1.0769346 1.1189578 1.1733609 #>  [907,] 0.46490374 0.4675330 0.4907018 0.5111573 0.5192381 0.5303312 0.5824301 #>  [908,] 0.71389741 0.7781248 0.8033898 0.8704937 0.8992172 0.9149836 0.9425688 #>  [909,] 0.44072838 0.5069673 0.5402373 0.5541609 0.5688061 0.5777249 0.6181586 #>  [910,] 0.64710423 0.7034365 0.8067712 0.8185176 0.8658694 0.8851231 0.9605944 #>  [911,] 0.35116518 0.3629968 0.4160145 0.4723797 0.5319814 0.5538741 0.5547885 #>  [912,] 0.21352367 0.6134340 0.6207800 0.6370777 0.6454476 0.6619813 0.7572092 #>  [913,] 0.33249324 0.4169620 0.4622279 0.4955209 0.5050208 0.5203350 0.5389581 #>  [914,] 0.34131033 0.4178748 0.5353924 0.5448504 0.5885768 0.6028036 0.6392074 #>  [915,] 0.33694822 0.3874356 0.4407284 0.4903795 0.4931865 0.5066825 0.5483920 #>  [916,] 0.51670805 0.6441897 0.6649872 0.6872391 0.7145027 0.7403431 0.7836125 #>  [917,] 0.35626607 0.3573839 0.4544820 0.4954232 0.5758246 0.7103201 0.7142358 #>  [918,] 0.51534547 0.5479748 0.6084951 0.6550894 0.6899891 0.7382215 0.8010813 #>  [919,] 0.35370574 0.4130467 0.4259864 0.4763288 0.5465276 0.5497907 0.5532494 #>  [920,] 0.65857245 0.7235320 0.7473426 0.7514427 0.8320643 0.9362408 1.0223418 #>  [921,] 0.40811039 0.4343940 0.4794127 0.5526603 0.5815361 0.5909017 0.6233022 #>  [922,] 0.29239783 0.3628757 0.3806329 0.3975834 0.4198508 0.4247982 0.4415927 #>  [923,] 0.44445015 0.4752968 0.6122033 0.6218226 0.6358698 0.6815881 0.7490173 #>  [924,] 0.47475699 0.5317580 0.6347692 0.6421356 0.6698603 0.6854614 0.7025102 #>  [925,] 0.56651952 0.6000350 0.6430817 0.6487800 0.7056230 0.7123995 0.9400016 #>  [926,] 0.21623136 0.7343673 0.7544069 0.7568219 0.8139639 0.8171454 0.8685452 #>  [927,] 0.38802136 0.6261636 0.6563504 0.7567548 0.8652370 0.9007194 0.9197968 #>  [928,] 0.19851580 0.2480127 0.2595185 0.2998028 0.4216882 0.4790806 0.4844364 #>  [929,] 0.24768764 0.4070733 0.4801752 0.5320364 0.5885329 0.5951107 0.6180137 #>  [930,] 0.41111509 0.4689935 0.5281116 0.7128811 0.8216656 0.8311658 0.9148114 #>  [931,] 0.37854364 0.5528645 0.7237951 0.7464151 0.7521859 0.7543793 0.8436975 #>  [932,] 0.58322753 0.6017010 0.6058511 0.6632120 0.6663282 0.6750548 0.6763189 #>  [933,] 0.30721671 0.3491231 0.4128979 0.4211347 0.5180789 0.5445872 0.5541596 #>  [934,] 0.63618264 0.7913270 1.0200636 1.0751167 1.1516809 1.1714697 1.1800360 #>  [935,] 0.49904592 0.5126070 0.5400530 0.5619886 0.5623151 0.5879201 0.5918710 #>  [936,] 0.39601384 0.4295797 0.4324178 0.4574274 0.4731851 0.5072757 0.5313998 #>  [937,] 0.40665504 0.6394288 0.6488360 0.7184799 0.7854926 0.8357568 0.8931079 #>  [938,] 0.35928091 0.5384767 0.5684771 0.6084951 0.6095465 0.6132941 0.6212375 #>  [939,] 0.45860889 0.5142012 0.6498934 0.6574365 0.6938021 0.6996989 0.7145141 #>  [940,] 0.44729776 0.4954232 0.5553131 0.6372699 0.6481771 0.7010359 0.7070724 #>  [941,] 0.44477673 0.4848567 0.5225046 0.5319814 0.6026385 0.6067572 0.6159368 #>  [942,] 0.28426960 0.3903312 0.4205260 0.4424163 0.5552408 0.5718479 0.6008196 #>  [943,] 0.34028618 0.4970343 0.5050678 0.5892991 0.6472784 0.6711182 0.7419259 #>  [944,] 0.77745259 1.3059485 1.4445230 1.5236912 1.5416877 1.5543139 1.5620273 #>  [945,] 0.33850101 0.5421734 0.6324686 0.6357903 0.6405612 0.6472157 0.6857752 #>  [946,] 0.49593858 0.5901206 0.5982415 0.6225862 0.6552238 0.7383614 0.7413998 #>  [947,] 0.40124348 0.4178960 0.4587061 0.4702607 0.4973359 0.5122991 0.5614801 #>  [948,] 0.21250608 0.2501038 0.2993388 0.3750427 0.4328079 0.5788295 0.6117522 #>  [949,] 0.44068098 0.4970652 0.5040328 0.5228965 0.5617958 0.5628880 0.5885768 #>  [950,] 0.45009408 0.5193924 0.5574902 0.5945031 0.5969594 0.6679895 0.6684390 #>  [951,] 0.61713542 0.7840499 0.8484135 0.8847955 0.9179738 0.9533618 1.0095016 #>  [952,] 0.58725687 0.6107828 0.6134731 0.6325950 0.6543379 0.6586315 0.7113278 #>  [953,] 0.38520617 0.9149404 1.1005827 1.2259787 1.2412613 1.4308519 1.4445230 #>  [954,] 0.39441558 0.3956153 0.4249315 0.4893195 0.6774372 0.6996989 0.7095562 #>  [955,] 0.46867271 0.5660540 0.5764362 0.6207284 0.6550894 0.6692448 0.6794818 #>  [956,] 0.65211039 0.6595054 0.7060499 0.7967881 0.9633786 0.9705757 0.9729762 #>  [957,] 0.28400738 0.2856352 0.3779593 0.3987657 0.4365657 0.5220520 0.5374557 #>  [958,] 0.30036151 0.4560198 0.5235791 0.5847027 0.6127638 0.6134340 0.6166914 #>  [959,] 0.37511379 0.6100159 0.6373450 0.6858376 0.7488147 0.7585214 0.7747626 #>  [960,] 0.34826490 0.5608899 0.5640514 0.5818140 0.6308159 0.6561759 0.6731479 #>  [961,] 0.41647986 0.4261505 0.5628983 0.6057073 0.6380059 0.6500211 0.6507969 #>  [962,] 0.46459145 0.5704698 0.5845751 0.5948818 0.6285018 0.6674147 0.6699939 #>  [963,] 0.25373706 0.4191656 0.4417516 0.4543315 0.5211273 0.5279635 0.5441929 #>  [964,] 0.47379231 0.4763288 0.5060267 0.5118809 0.5326964 0.6376440 0.6699247 #>  [965,] 1.82813609 1.8567239 1.8858125 1.8982941 1.9114147 1.9770410 1.9782031 #>  [966,] 0.60812333 0.7485180 0.8060881 0.9425688 1.0025298 1.1263498 1.1549634 #>  [967,] 0.36598685 0.5222240 0.6459002 0.6849674 0.8113419 0.9490315 0.9504085 #>  [968,] 0.46240018 0.5175738 0.6421754 0.6893253 0.7210081 0.7547483 0.8281262 #>  [969,] 0.24647757 0.2647483 0.3224240 0.3960138 0.4228472 0.4826490 0.4948715 #>  [970,] 0.74913945 0.9199303 1.1164795 1.1315964 1.1849655 1.1875670 1.2621420 #>  [971,] 0.35430432 0.4006505 0.4012843 0.4156072 0.4849038 0.4902061 0.4996193 #>  [972,] 0.21503944 0.2339825 0.4636258 0.4880371 0.5009706 0.5029495 0.5538741 #>  [973,] 0.43824386 0.4959386 0.6411537 0.6621927 0.6753131 0.7231984 0.7795083 #>  [974,] 0.47330314 0.5775928 0.6849674 0.8755803 0.9895281 1.0120999 1.0253384 #>  [975,] 0.37767953 0.9021871 0.9805746 1.0797145 1.1222177 1.1838878 1.2081758 #>  [976,] 0.44541159 0.4595464 0.6308841 0.6734350 0.6763501 0.6840259 0.6858314 #>  [977,] 1.08560373 1.1004359 1.2266108 1.2469989 1.3199185 1.3366558 1.3709032 #>  [978,] 0.51795750 0.5794443 0.6769099 0.7298581 0.7573399 0.7853911 0.7894800 #>  [979,] 0.31926014 0.4286959 0.4651922 0.4821240 0.5015476 0.5082532 0.5121058 #>  [980,] 0.75726306 0.9229089 1.0147165 1.2619771 1.3815769 1.4485948 1.5146813 #>  [981,] 0.44651008 0.4736869 0.5548181 0.5910541 0.6063276 0.6326939 0.6444586 #>  [982,] 0.45825394 0.4997300 0.5474198 0.7390887 0.7844443 0.8246239 0.8357568 #>  [983,] 0.50758768 0.6261636 0.6861735 0.7106183 0.7380868 0.7651023 0.8123643 #>  [984,] 0.38334300 0.5166308 0.5478030 0.5729615 0.5997434 0.6050738 0.6499016 #>  [985,] 0.43456064 0.4756598 0.5673140 0.6961887 0.7533313 0.7641243 0.7688521 #>  [986,] 0.43124256 0.5181151 0.5396211 0.6014812 0.6080580 0.6167925 0.6257449 #>  [987,] 0.49325387 0.5096453 0.5952244 0.5971184 0.7664540 0.8106143 0.8336854 #>  [988,] 0.55119319 0.5667022 0.5879333 0.6270364 0.6613996 0.6881668 0.7044324 #>  [989,] 0.28055761 0.5390139 0.6400758 0.6687752 0.7113676 0.7284437 0.7426414 #>  [990,] 0.33300737 0.4632213 0.4716497 0.6014812 0.6946292 0.7204851 0.7724340 #>  [991,] 0.24059656 0.4647043 0.5303282 0.5320364 0.5430612 0.6167799 0.6407832 #>  [992,] 0.50083511 0.5477312 0.5813181 0.5818223 0.6087802 0.6150751 0.6570931 #>  [993,] 0.38414633 0.4162583 0.5107633 0.5175382 0.5220520 0.5534629 0.5538331 #>  [994,] 0.86208091 0.9375075 0.9647525 0.9647548 0.9765842 1.0470031 1.1190381 #>  [995,] 0.35191575 0.4536358 0.4791877 0.5665195 0.5927297 0.6299525 0.6423057 #>  [996,] 0.37616749 0.5982415 0.6411537 0.6467422 0.6600334 0.6674011 0.7793111 #>  [997,] 0.58598012 0.6481771 0.6490013 0.6554812 0.6967097 0.7103201 0.7243857 #>  [998,] 0.90041773 0.9705374 1.0241952 1.0394610 1.1035258 1.1713249 1.1804145 #>  [999,] 0.35297632 0.4921272 0.5524622 0.5884487 0.6289649 0.6482118 0.6533306 #> [1000,] 0.27747188 0.5024509 0.5035524 0.5215407 0.5258943 0.5544329 0.5750257 #>              [,8]      [,9]     [,10] #>    [1,] 0.9389066 0.9580609 1.0200914 #>    [2,] 1.0335124 1.1562250 1.1735355 #>    [3,] 0.7154262 0.7483099 0.7801781 #>    [4,] 0.7029260 0.7447326 0.8108092 #>    [5,] 0.8156117 0.8367964 0.8420984 #>    [6,] 0.5902208 0.5985229 0.6149169 #>    [7,] 0.9418733 0.9928396 1.0011504 #>    [8,] 1.8859820 1.9321262 1.9368693 #>    [9,] 0.6744410 0.6991079 0.7010520 #>   [10,] 0.6259112 0.6270920 0.6481637 #>   [11,] 0.6178973 0.6432647 0.6499016 #>   [12,] 1.3740892 1.3879194 1.4329489 #>   [13,] 0.8474510 0.9421114 1.0008613 #>   [14,] 0.9206887 0.9309489 0.9579786 #>   [15,] 0.6933873 0.6980865 0.7000189 #>   [16,] 0.6405242 0.6521748 0.6533719 #>   [17,] 0.5541609 0.6048940 0.6069403 #>   [18,] 0.8249525 0.8309789 0.8327063 #>   [19,] 0.6542852 0.6577190 0.7060626 #>   [20,] 0.6776461 0.6904046 0.6977661 #>   [21,] 1.3806500 1.3863242 1.4041047 #>   [22,] 1.2052673 1.2215730 1.2462095 #>   [23,] 0.7377538 0.7991636 0.8035652 #>   [24,] 0.4698111 0.4790806 0.5595763 #>   [25,] 0.5949216 0.6050738 0.6395630 #>   [26,] 0.7706714 0.7836125 0.8255034 #>   [27,] 0.7795937 0.9989433 1.0652024 #>   [28,] 0.7158777 0.7200851 0.7225990 #>   [29,] 0.6269852 0.6577709 0.6727474 #>   [30,] 0.5655669 0.5849979 0.6214139 #>   [31,] 0.8202739 0.8745458 0.8984816 #>   [32,] 1.0916376 1.1012312 1.1114002 #>   [33,] 1.4268844 1.4400738 1.4593506 #>   [34,] 1.2282854 1.2706196 1.3210864 #>   [35,] 0.8499795 0.8869143 0.8935678 #>   [36,] 0.9127610 0.9266831 0.9704526 #>   [37,] 0.6161268 0.6579730 0.6600662 #>   [38,] 0.9745460 0.9751550 1.0346858 #>   [39,] 0.7086079 0.7171952 0.7683751 #>   [40,] 0.8405078 0.8717815 0.8979345 #>   [41,] 1.9766367 1.9847651 1.9952903 #>   [42,] 0.7699424 0.7837003 0.8113419 #>   [43,] 1.6966305 1.7600969 1.7661748 #>   [44,] 0.5743976 0.6170603 0.6279357 #>   [45,] 0.8338106 0.8397666 0.8647643 #>   [46,] 0.9207194 0.9309489 0.9391374 #>   [47,] 0.7170351 0.7415126 0.8083606 #>   [48,] 0.9067075 0.9500128 1.0223188 #>   [49,] 0.6442117 0.6518659 0.6560120 #>   [50,] 1.6041579 1.6198052 1.6281773 #>   [51,] 0.9459727 0.9919171 1.0430247 #>   [52,] 1.3133536 1.3656359 1.3731857 #>   [53,] 0.6051877 0.6119527 0.6142247 #>   [54,] 0.5650636 0.6117522 0.6377904 #>   [55,] 0.6613996 0.7197604 0.7233092 #>   [56,] 0.6226196 0.6399835 0.6505610 #>   [57,] 0.6670837 0.6941987 0.7424544 #>   [58,] 1.3988911 1.4303916 1.4857756 #>   [59,] 0.6035717 0.6043617 0.6506648 #>   [60,] 0.6123411 0.6338110 0.6378900 #>   [61,] 0.7918346 0.7922414 0.8024976 #>   [62,] 0.7148923 0.7200368 0.7377199 #>   [63,] 0.6892950 0.6897973 0.6989012 #>   [64,] 0.6779757 0.7153828 0.7445154 #>   [65,] 1.5841548 1.5924489 1.6672828 #>   [66,] 0.8457268 0.8486365 0.8941550 #>   [67,] 0.5759180 0.5787502 0.5844678 #>   [68,] 0.6423170 0.7086036 0.7146119 #>   [69,] 0.7525923 0.7677468 0.7879780 #>   [70,] 1.1517840 1.1957860 1.2802693 #>   [71,] 0.8354358 0.8833747 0.8998936 #>   [72,] 1.1852384 1.1872614 1.1888981 #>   [73,] 0.6475042 0.6675636 0.7008813 #>   [74,] 1.0565746 1.0608794 1.0853772 #>   [75,] 0.6323096 0.6349591 0.6507055 #>   [76,] 1.1263787 1.1429098 1.1513319 #>   [77,] 0.7112503 0.7371792 0.7593076 #>   [78,] 0.9270850 0.9516965 0.9621626 #>   [79,] 1.2444478 1.2651966 1.3448659 #>   [80,] 0.6004558 0.6394729 0.6785223 #>   [81,] 0.7154882 0.7157185 0.7237089 #>   [82,] 0.6528583 0.6770721 0.6838578 #>   [83,] 0.5853720 0.5952019 0.5984217 #>   [84,] 0.6069750 0.6076638 0.6249615 #>   [85,] 1.0557943 1.1284738 1.1427414 #>   [86,] 0.5650915 0.6764644 0.7715179 #>   [87,] 0.8224433 0.8233109 0.8330204 #>   [88,] 1.3259909 1.3267241 1.3302553 #>   [89,] 0.7347286 0.7400530 0.7543793 #>   [90,] 0.6681544 0.6684610 0.7263791 #>   [91,] 0.5978282 0.6053594 0.6203943 #>   [92,] 0.7932982 0.8144928 0.8389731 #>   [93,] 1.1258855 1.1281941 1.1386233 #>   [94,] 0.6145990 0.6347491 0.6433840 #>   [95,] 1.0856272 1.1601842 1.1875448 #>   [96,] 0.7040939 0.7113928 0.7421289 #>   [97,] 0.5778628 0.5945437 0.6244764 #>   [98,] 0.6395630 0.6440272 0.6468400 #>   [99,] 0.8181230 0.8378066 0.8652370 #>  [100,] 1.0046890 1.0282230 1.0687982 #>  [101,] 0.6653337 0.6980924 0.7139909 #>  [102,] 1.2515697 1.2536532 1.2559324 #>  [103,] 0.6095465 0.6495591 0.6729406 #>  [104,] 1.3441586 1.3600865 1.4683509 #>  [105,] 0.8374602 0.8399429 0.8708980 #>  [106,] 0.9036230 0.9259755 0.9963848 #>  [107,] 0.6794824 0.6798540 0.6904046 #>  [108,] 0.7485508 0.7539051 0.7622362 #>  [109,] 1.0159909 1.0197785 1.0274325 #>  [110,] 0.6019657 0.6119822 0.6488743 #>  [111,] 0.6972767 0.7167446 0.7280761 #>  [112,] 0.6119527 0.6185627 0.6377904 #>  [113,] 0.4987438 0.5266120 0.5347352 #>  [114,] 1.0420522 1.0494875 1.0684998 #>  [115,] 0.5448946 0.5486240 0.5737761 #>  [116,] 0.6825321 0.6851223 0.7225457 #>  [117,] 0.5554115 0.5582138 0.5910309 #>  [118,] 0.7526831 0.7676729 0.8045865 #>  [119,] 0.7649292 0.8070369 0.8643401 #>  [120,] 0.6444439 0.7293420 0.7464190 #>  [121,] 0.7275148 0.7533245 0.7684368 #>  [122,] 0.7086079 0.7329005 0.7388036 #>  [123,] 0.7417714 0.7713589 0.8154413 #>  [124,] 0.5996684 0.6230658 0.6380611 #>  [125,] 0.9887359 0.9969946 1.0364863 #>  [126,] 0.5935804 0.6069921 0.6089652 #>  [127,] 1.0664730 1.0850669 1.1133225 #>  [128,] 0.7205246 0.7243857 0.7361219 #>  [129,] 0.5885329 0.6184903 0.6301138 #>  [130,] 0.9141577 0.9441428 0.9599323 #>  [131,] 0.4997462 0.6033031 0.6041805 #>  [132,] 0.6705419 0.6929626 0.7378209 #>  [133,] 0.7781119 0.8085239 0.8225771 #>  [134,] 0.8927318 0.8977046 0.9116926 #>  [135,] 0.9819251 0.9931177 1.0718311 #>  [136,] 1.0709050 1.0790228 1.1091112 #>  [137,] 0.7917034 0.8270570 0.8434426 #>  [138,] 0.7278976 0.7281699 0.7450423 #>  [139,] 0.8135092 0.8802029 0.8946554 #>  [140,] 0.7641211 0.7684971 0.8214862 #>  [141,] 0.6725370 0.6792953 0.6807592 #>  [142,] 0.6938171 0.7049195 0.7060369 #>  [143,] 0.6508256 0.6594423 0.6777555 #>  [144,] 0.7688061 0.7824292 0.7871855 #>  [145,] 0.8761738 0.8909031 0.9032800 #>  [146,] 0.8212089 0.8323403 0.8383499 #>  [147,] 1.3399796 1.3471612 1.3670141 #>  [148,] 0.9333103 0.9334037 0.9559044 #>  [149,] 0.7763963 0.7924280 0.7984464 #>  [150,] 0.6380914 0.6452430 0.6788134 #>  [151,] 0.5721511 0.5818246 0.5912640 #>  [152,] 0.6841256 0.7463117 0.7584978 #>  [153,] 0.9779734 1.0404101 1.1150985 #>  [154,] 0.8527695 0.8734358 0.8779811 #>  [155,] 1.1964636 1.3080277 1.3294362 #>  [156,] 0.7779684 0.8192510 0.8216821 #>  [157,] 0.8263864 0.8327620 0.8387262 #>  [158,] 0.8003907 0.8090348 0.8163043 #>  [159,] 0.5661522 0.5703916 0.6300410 #>  [160,] 0.9598810 0.9783266 0.9830574 #>  [161,] 1.0205786 1.0485318 1.0691549 #>  [162,] 0.9327432 0.9984584 0.9986253 #>  [163,] 0.6058955 0.6142737 0.6207724 #>  [164,] 0.7354312 0.7437830 0.7635075 #>  [165,] 0.6775714 0.7458089 0.7841164 #>  [166,] 0.6651105 0.7152507 0.7482946 #>  [167,] 1.4408900 1.5019796 1.5144042 #>  [168,] 0.6208529 0.6263363 0.6315479 #>  [169,] 0.5617436 0.5632154 0.5831062 #>  [170,] 0.7806582 0.7825461 0.8289785 #>  [171,] 1.2916004 1.2930737 1.3373520 #>  [172,] 1.5299632 1.5651570 1.5683740 #>  [173,] 1.1531013 1.1571306 1.2159803 #>  [174,] 1.0419953 1.0586190 1.0634575 #>  [175,] 0.5053761 0.5271690 0.5493006 #>  [176,] 0.7189778 0.7307287 0.7594205 #>  [177,] 0.6737288 0.7080390 0.7442455 #>  [178,] 1.0305684 1.0370352 1.0471607 #>  [179,] 0.7020173 0.7333094 0.7340318 #>  [180,] 0.6721514 0.6893551 0.6928634 #>  [181,] 0.8247147 0.8367964 0.8660187 #>  [182,] 1.2245306 1.2552856 1.2696273 #>  [183,] 0.5718479 0.5805988 0.6090903 #>  [184,] 0.7012559 0.7294668 0.7406987 #>  [185,] 0.8447793 0.9639302 0.9647183 #>  [186,] 0.6438825 0.6530865 0.6807904 #>  [187,] 1.2158586 1.2327580 1.2931224 #>  [188,] 0.8622367 0.8661677 0.8851231 #>  [189,] 0.7534697 0.7844186 0.7872931 #>  [190,] 0.7609478 0.7777228 0.7900266 #>  [191,] 0.8443812 0.8460006 0.8465583 #>  [192,] 0.7585214 0.7621788 0.7640708 #>  [193,] 0.6894521 0.6899891 0.7013864 #>  [194,] 0.6163646 0.6210719 0.6300776 #>  [195,] 0.7730187 0.7919979 0.8000166 #>  [196,] 1.7301413 1.7385871 1.7882955 #>  [197,] 0.8189401 0.8530389 0.8903297 #>  [198,] 0.5833008 0.5897932 0.6039246 #>  [199,] 0.6475072 0.6499539 0.6544035 #>  [200,] 0.7347286 0.7529234 0.7648270 #>  [201,] 0.8300131 0.8653160 0.9199414 #>  [202,] 0.7052231 0.7094861 0.7269452 #>  [203,] 0.7703486 0.7929224 0.8028090 #>  [204,] 1.7015032 1.7075756 1.7377030 #>  [205,] 1.1671519 1.2303281 1.2532049 #>  [206,] 1.0881633 1.1011764 1.1069510 #>  [207,] 1.8541803 1.8723602 1.9420445 #>  [208,] 1.3519818 1.3765162 1.3867318 #>  [209,] 0.8202739 0.8218461 0.8264869 #>  [210,] 0.6881758 0.6904662 0.6955331 #>  [211,] 1.0256017 1.0866987 1.0901580 #>  [212,] 0.7019582 0.7292610 0.7692108 #>  [213,] 1.3310149 1.3615161 1.3632710 #>  [214,] 1.0819604 1.1285984 1.2048387 #>  [215,] 0.6308008 0.6454378 0.6530060 #>  [216,] 1.0272108 1.0274157 1.0823112 #>  [217,] 0.8312935 0.8523928 0.8664292 #>  [218,] 0.9036931 0.9194199 0.9282883 #>  [219,] 0.8310013 0.8371767 0.8473660 #>  [220,] 0.7364177 0.7976026 0.8001558 #>  [221,] 0.7485457 0.7590344 0.7907426 #>  [222,] 0.6551930 0.6613106 0.6646608 #>  [223,] 0.8028770 0.8171998 0.8402992 #>  [224,] 1.0210851 1.0604504 1.0638775 #>  [225,] 1.7301413 1.7710011 1.8703071 #>  [226,] 0.7203430 0.7634401 0.7701939 #>  [227,] 1.0803335 1.0884642 1.1656796 #>  [228,] 0.6801493 0.7842481 0.8060537 #>  [229,] 1.3540428 1.3694386 1.3904498 #>  [230,] 0.7180207 0.7197042 0.7646009 #>  [231,] 0.9560244 0.9581735 0.9587519 #>  [232,] 1.1875448 1.2031833 1.2216533 #>  [233,] 0.8893263 0.9020396 0.9214203 #>  [234,] 0.9055712 0.9092126 0.9228595 #>  [235,] 1.6239185 1.6541831 1.7081941 #>  [236,] 1.5457087 1.5485574 1.5715763 #>  [237,] 0.5082532 0.5111948 0.5324390 #>  [238,] 1.2055188 1.2634031 1.3786264 #>  [239,] 0.9297913 0.9373477 0.9795672 #>  [240,] 0.6047286 0.6423505 0.6463942 #>  [241,] 0.6729510 0.6742909 0.6896525 #>  [242,] 0.9021859 0.9076798 0.9085474 #>  [243,] 1.0770140 1.1191857 1.1323468 #>  [244,] 1.1090953 1.1168017 1.1375018 #>  [245,] 1.0206289 1.0576563 1.0605048 #>  [246,] 0.6420976 0.7754245 0.8072575 #>  [247,] 0.7233977 0.7706190 0.7816996 #>  [248,] 0.6039837 0.6206211 0.6236329 #>  [249,] 0.6580577 0.6735517 0.6895542 #>  [250,] 1.5524646 1.6026381 1.6696399 #>  [251,] 0.5788910 0.5800134 0.6242311 #>  [252,] 0.8055401 0.8602518 0.8868338 #>  [253,] 0.7022563 0.7262914 0.7551296 #>  [254,] 0.7399709 0.7541541 0.7752569 #>  [255,] 0.5932556 0.6231802 0.6271057 #>  [256,] 0.9900062 0.9927246 1.0190640 #>  [257,] 0.5702650 0.5737761 0.5824301 #>  [258,] 0.8461347 0.8778150 0.9046363 #>  [259,] 0.9732803 0.9749236 0.9762060 #>  [260,] 0.5073624 0.5089865 0.5734999 #>  [261,] 0.8134997 0.8778229 0.9207785 #>  [262,] 0.6192323 0.6282968 0.6379172 #>  [263,] 0.5639932 0.5869166 0.5982491 #>  [264,] 0.7754741 0.7826221 0.7976617 #>  [265,] 0.5710941 0.5742342 0.5889542 #>  [266,] 0.8502016 0.8861952 0.9038058 #>  [267,] 1.4862450 1.5011581 1.5074950 #>  [268,] 0.6396095 0.6893059 0.7182027 #>  [269,] 0.7714931 0.7734167 0.7775349 #>  [270,] 0.7171307 0.7479408 0.7520999 #>  [271,] 0.7204790 0.7205419 0.7262814 #>  [272,] 0.7764815 0.8346178 0.8405523 #>  [273,] 0.6815454 0.7499546 0.7547126 #>  [274,] 0.5819575 0.5855578 0.6195740 #>  [275,] 0.7121738 0.7190642 0.7197042 #>  [276,] 0.5844802 0.5854959 0.5889542 #>  [277,] 0.6391332 0.6513541 0.6564052 #>  [278,] 0.6008196 0.6169724 0.6187262 #>  [279,] 0.6004558 0.6203915 0.6583807 #>  [280,] 0.7253906 0.7793574 0.7852301 #>  [281,] 0.7994010 0.8370474 0.9288148 #>  [282,] 0.5637732 0.5783641 0.6096806 #>  [283,] 0.8328476 0.8516180 0.9209111 #>  [284,] 0.7279717 0.7410038 0.7440851 #>  [285,] 0.7154882 0.7225877 0.7579051 #>  [286,] 0.6598238 0.6689691 0.6957056 #>  [287,] 0.8832028 0.8867543 0.9759766 #>  [288,] 0.8541363 0.8866438 0.8933728 #>  [289,] 0.6953057 0.6961085 0.7225877 #>  [290,] 0.7649899 0.8011550 0.8401586 #>  [291,] 1.4381174 1.4391646 1.5224955 #>  [292,] 0.7211925 0.7686471 0.7708451 #>  [293,] 0.7396366 0.7406987 0.7590344 #>  [294,] 0.6095085 0.6320999 0.6329711 #>  [295,] 0.8033900 0.8608760 0.9145942 #>  [296,] 0.6657671 0.7212267 0.7373174 #>  [297,] 0.6290462 0.6466036 0.6598451 #>  [298,] 0.9496579 0.9915636 0.9940711 #>  [299,] 1.4675173 1.5138977 1.5957589 #>  [300,] 0.8188511 0.8197795 0.8916950 #>  [301,] 0.6931095 0.6968344 0.7068086 #>  [302,] 0.8744590 0.9083381 0.9165155 #>  [303,] 0.8071739 0.8108444 0.8311477 #>  [304,] 0.6586315 0.6981147 0.7186405 #>  [305,] 0.5988548 0.6853110 0.7143211 #>  [306,] 0.7307829 0.7968302 0.8673449 #>  [307,] 1.1568329 1.1705337 1.1706736 #>  [308,] 0.9907974 1.0400851 1.0681790 #>  [309,] 1.0323357 1.0555369 1.0678843 #>  [310,] 0.7839259 0.8055401 0.8115153 #>  [311,] 0.6945765 0.6972767 0.7110562 #>  [312,] 0.6060420 0.6297678 0.6528428 #>  [313,] 0.5049695 0.5093373 0.5111948 #>  [314,] 0.9421114 1.0198863 1.0296697 #>  [315,] 1.0110780 1.0350500 1.0369740 #>  [316,] 1.2062943 1.2659803 1.2856136 #>  [317,] 1.3000707 1.3260472 1.3310950 #>  [318,] 0.9503623 0.9580609 0.9960328 #>  [319,] 1.1763546 1.2054488 1.2538549 #>  [320,] 0.9588974 0.9930230 1.0006060 #>  [321,] 0.8264042 0.8810025 0.8940213 #>  [322,] 0.5544572 0.5628119 0.5632471 #>  [323,] 0.6852512 0.6874262 0.7083066 #>  [324,] 0.7692586 0.7846913 0.8118544 #>  [325,] 1.0141005 1.0560607 1.1070897 #>  [326,] 0.7970963 0.8134997 0.9025018 #>  [327,] 0.7775502 0.7914939 0.8242629 #>  [328,] 0.7699424 0.7742127 0.7871855 #>  [329,] 0.7070724 0.7079288 0.7236569 #>  [330,] 0.7641456 0.7876860 0.8171962 #>  [331,] 0.6642740 0.8995585 0.9152603 #>  [332,] 1.2823414 1.2854426 1.2977938 #>  [333,] 0.6270364 0.6408282 0.6452430 #>  [334,] 0.9984091 1.0171776 1.0835008 #>  [335,] 0.5726048 0.5765948 0.6071732 #>  [336,] 0.6641285 0.6839548 0.7049034 #>  [337,] 0.8935665 0.8958115 0.9141372 #>  [338,] 0.6572684 0.6975616 0.6984933 #>  [339,] 1.0003852 1.1339735 1.1798149 #>  [340,] 0.8302971 0.8721406 0.9283470 #>  [341,] 0.6556654 0.6561460 0.6587460 #>  [342,] 0.9779307 0.9802288 1.0315159 #>  [343,] 1.0108851 1.0572116 1.0629321 #>  [344,] 0.7296543 0.7496736 0.7533012 #>  [345,] 0.8811357 0.8885263 0.9006003 #>  [346,] 0.5529055 0.5607372 0.6485149 #>  [347,] 0.5788295 0.5794658 0.5923892 #>  [348,] 1.0557086 1.0670105 1.0680305 #>  [349,] 1.3420173 1.3486848 1.3848706 #>  [350,] 0.8981098 0.9770473 1.0223902 #>  [351,] 1.7432372 1.7512619 1.7629631 #>  [352,] 0.5597575 0.6249208 0.6258670 #>  [353,] 0.9040829 0.9300915 0.9336330 #>  [354,] 0.4867322 0.5472896 0.5813527 #>  [355,] 0.6585586 0.6598451 0.7284437 #>  [356,] 1.3402866 1.3488738 1.3572195 #>  [357,] 0.5846895 0.5944953 0.6007616 #>  [358,] 0.8718108 0.8734358 0.8745887 #>  [359,] 0.6859015 0.6938506 0.7033758 #>  [360,] 0.5737718 0.5818246 0.6171716 #>  [361,] 0.6184226 0.6940589 0.6999838 #>  [362,] 1.8132306 1.8318169 1.8793570 #>  [363,] 0.6795623 0.6852512 0.7197604 #>  [364,] 1.2588954 1.3131994 1.3355956 #>  [365,] 1.0177084 1.1104517 1.1346949 #>  [366,] 1.6572069 1.7057859 1.7316684 #>  [367,] 0.7903849 0.8444735 0.8740277 #>  [368,] 0.6358832 0.6390517 0.6565087 #>  [369,] 1.4621882 1.4934575 1.5165644 #>  [370,] 1.3345127 1.3356867 1.3824809 #>  [371,] 0.6596634 0.7255592 0.7469448 #>  [372,] 0.7504172 0.7907644 0.8508290 #>  [373,] 0.6173615 0.6292890 0.6745872 #>  [374,] 0.7365420 0.7754046 0.8236368 #>  [375,] 0.5927181 0.6125253 0.6679895 #>  [376,] 0.5571901 0.5576630 0.5710941 #>  [377,] 0.4873079 0.5402149 0.5559121 #>  [378,] 0.8526752 0.9099425 0.9313398 #>  [379,] 0.5752943 0.6475149 0.6675636 #>  [380,] 0.8986179 0.9040434 0.9279096 #>  [381,] 0.9783869 0.9979456 1.1060828 #>  [382,] 0.6778421 0.7388036 0.7401453 #>  [383,] 0.8067074 0.8082380 0.8156726 #>  [384,] 0.6021786 0.6475072 0.6525546 #>  [385,] 0.8972511 0.9323511 0.9378140 #>  [386,] 1.0163440 1.0223697 1.0255044 #>  [387,] 0.7786605 0.7889360 0.7891774 #>  [388,] 0.7717844 0.7738999 0.8072575 #>  [389,] 1.0693372 1.0859025 1.0874999 #>  [390,] 0.5719255 0.5789385 0.6176719 #>  [391,] 1.0619127 1.0851034 1.1019290 #>  [392,] 0.6881038 0.7220600 0.7528527 #>  [393,] 0.5446310 0.5617625 0.5817668 #>  [394,] 0.7144565 0.7145141 0.7152271 #>  [395,] 0.7970461 0.8961951 0.9364566 #>  [396,] 0.9140315 0.9360670 0.9370288 #>  [397,] 0.6843241 0.7322996 0.7533096 #>  [398,] 0.5715634 0.6106768 0.6243207 #>  [399,] 1.1776640 1.1851714 1.1983086 #>  [400,] 0.9787554 1.0580339 1.0692382 #>  [401,] 0.6042452 0.6086057 0.6164790 #>  [402,] 0.4727595 0.4745562 0.5089865 #>  [403,] 1.0502744 1.1251488 1.1538746 #>  [404,] 1.5477865 1.5523460 1.5620865 #>  [405,] 1.2056367 1.2062962 1.2245734 #>  [406,] 0.7157185 0.7775148 0.7792428 #>  [407,] 0.7892284 0.8486978 0.9324175 #>  [408,] 0.6274296 0.6315740 0.6493512 #>  [409,] 0.5704003 0.5738213 0.6755121 #>  [410,] 0.6517161 0.6551930 0.6760921 #>  [411,] 0.5520791 0.5621126 0.6043617 #>  [412,] 0.5569593 0.5655669 0.5708057 #>  [413,] 0.6229929 0.6459561 0.6482651 #>  [414,] 0.6285358 0.6973906 0.7071932 #>  [415,] 1.5165231 1.5714014 1.5729817 #>  [416,] 1.1475118 1.1962732 1.2452147 #>  [417,] 0.4932505 0.5053761 0.5488706 #>  [418,] 0.7237407 0.7415302 0.7450188 #>  [419,] 0.6671275 0.6700062 0.6864650 #>  [420,] 0.8069925 0.8457584 0.8584300 #>  [421,] 0.8126975 0.8794180 0.8842893 #>  [422,] 0.8866406 0.9296196 0.9376354 #>  [423,] 0.8305566 0.8365528 0.8367190 #>  [424,] 0.7171952 0.7182618 0.7610168 #>  [425,] 0.7898319 0.7932942 0.8013460 #>  [426,] 0.8619152 0.8671689 0.9206707 #>  [427,] 0.5066825 0.5568206 0.5947037 #>  [428,] 0.9894920 1.0857505 1.1126934 #>  [429,] 0.6178973 0.6207953 0.6209057 #>  [430,] 0.6202751 0.6380067 0.6585993 #>  [431,] 0.7775148 0.7866388 0.7898171 #>  [432,] 0.7332408 0.7702685 0.7821656 #>  [433,] 0.9004233 0.9217518 0.9306542 #>  [434,] 1.0450695 1.0744960 1.1024884 #>  [435,] 0.7213426 0.7277828 0.8276109 #>  [436,] 0.7162872 0.7499894 0.8175576 #>  [437,] 0.8153391 0.8346178 0.8491418 #>  [438,] 1.2419048 1.3274477 1.3393883 #>  [439,] 1.2395954 1.2497064 1.2731568 #>  [440,] 0.5762558 0.6269852 0.6315740 #>  [441,] 0.5206428 0.5420008 0.5528987 #>  [442,] 1.2897766 1.3076667 1.3452258 #>  [443,] 0.8448907 0.8574935 0.8667490 #>  [444,] 1.3635086 1.3859001 1.4237935 #>  [445,] 0.6795623 0.7098843 0.7138336 #>  [446,] 0.6790666 0.7665192 0.7676066 #>  [447,] 0.6546620 0.7060317 0.7153828 #>  [448,] 0.6801411 0.6867785 0.6913356 #>  [449,] 0.5720043 0.6131412 0.6430981 #>  [450,] 0.8871339 0.9304297 0.9882179 #>  [451,] 0.6567701 0.7024760 0.7172413 #>  [452,] 0.7001244 0.7440851 0.7570726 #>  [453,] 0.8452648 0.8653780 0.9749368 #>  [454,] 0.6759295 0.6802612 0.6840765 #>  [455,] 1.3465449 1.3613861 1.4200246 #>  [456,] 0.6153423 0.6881721 0.6989022 #>  [457,] 0.8721802 0.8806892 0.8968402 #>  [458,] 0.8360520 0.8377757 0.9452777 #>  [459,] 0.9354230 0.9647183 0.9905015 #>  [460,] 0.8304346 0.8544928 0.8753191 #>  [461,] 1.1475529 1.1882167 1.2454110 #>  [462,] 1.0267629 1.1412478 1.1844442 #>  [463,] 0.5009706 0.5363791 0.5421776 #>  [464,] 0.6518735 0.6779635 0.7148538 #>  [465,] 0.5300826 0.5415541 0.5494631 #>  [466,] 0.4664569 0.5073624 0.5721690 #>  [467,] 0.7097084 0.7101384 0.7160258 #>  [468,] 0.8011376 0.8047128 0.8247147 #>  [469,] 0.5018955 0.5188828 0.5528987 #>  [470,] 0.9725416 0.9919171 1.0567891 #>  [471,] 0.8753191 0.8800335 0.8885686 #>  [472,] 0.7142546 0.7169006 0.7203485 #>  [473,] 0.5684277 0.5789385 0.5947037 #>  [474,] 0.9543898 0.9562156 0.9630658 #>  [475,] 0.8191773 0.8292446 0.8354358 #>  [476,] 0.7485412 0.7497739 0.7838092 #>  [477,] 1.3575909 1.3709032 1.3903829 #>  [478,] 0.8958857 0.9295402 0.9514285 #>  [479,] 0.5447132 0.5814605 0.5912630 #>  [480,] 0.8688141 0.9086688 0.9220450 #>  [481,] 0.7350669 0.7378854 0.7634578 #>  [482,] 0.6203915 0.6616188 0.6933919 #>  [483,] 1.3948888 1.4603028 1.4880865 #>  [484,] 0.7277828 0.8022505 0.8592724 #>  [485,] 0.5066004 0.5166551 0.5207351 #>  [486,] 1.0125713 1.0165128 1.0756236 #>  [487,] 0.6872391 0.6931152 0.7281699 #>  [488,] 0.5413224 0.5446310 0.5701169 #>  [489,] 1.0763783 1.0774524 1.1154225 #>  [490,] 1.1846774 1.1852656 1.2045345 #>  [491,] 1.1177122 1.1703007 1.1754027 #>  [492,] 0.6854800 0.6999838 0.7047299 #>  [493,] 0.5166551 0.5735035 0.5952019 #>  [494,] 0.7169900 0.7553695 0.7753653 #>  [495,] 1.3393014 1.3478073 1.3541724 #>  [496,] 0.5207351 0.5220478 0.5705741 #>  [497,] 2.4330749 2.4563534 2.4661871 #>  [498,] 0.8876941 0.8971022 0.9008955 #>  [499,] 1.3079206 1.3238907 1.3265458 #>  [500,] 0.8923467 0.8956757 0.9072190 #>  [501,] 0.6592934 0.6690904 0.6868847 #>  [502,] 0.5655595 0.5750226 0.5947545 #>  [503,] 0.7043725 0.7097113 0.7513102 #>  [504,] 0.5233606 0.5395874 0.5593836 #>  [505,] 1.0374805 1.0443794 1.0444952 #>  [506,] 0.6819067 0.7035128 0.7122801 #>  [507,] 0.8026379 0.8121204 0.8172518 #>  [508,] 1.5404262 1.5422756 1.5537226 #>  [509,] 0.5818231 0.6035093 0.6232580 #>  [510,] 0.7825119 0.8144653 0.8650295 #>  [511,] 0.8019393 0.8331204 0.8362167 #>  [512,] 0.5785603 0.5837417 0.5963855 #>  [513,] 0.6748105 0.6825923 0.6912058 #>  [514,] 0.6176719 0.6370390 0.6389046 #>  [515,] 0.6917115 0.7136217 0.7396839 #>  [516,] 1.0114713 1.0725199 1.0760414 #>  [517,] 0.7853133 0.7947215 0.7954760 #>  [518,] 0.8227182 0.8926332 0.8931032 #>  [519,] 0.6738445 0.6889418 0.7560972 #>  [520,] 0.5465017 0.6068068 0.6131859 #>  [521,] 0.6320999 0.7052734 0.7077035 #>  [522,] 0.5005812 0.5402149 0.5413224 #>  [523,] 0.8844148 0.8855468 0.8941550 #>  [524,] 0.7657452 0.7928127 0.7981664 #>  [525,] 1.0769689 1.1005855 1.1463099 #>  [526,] 0.6156340 0.6376440 0.6521238 #>  [527,] 0.6763538 0.6799721 0.7146119 #>  [528,] 0.5997636 0.6574880 0.6586798 #>  [529,] 0.7499894 0.7536337 0.7784320 #>  [530,] 0.7349220 0.7449766 0.7747637 #>  [531,] 1.0883877 1.1160931 1.1559707 #>  [532,] 1.0386990 1.0516557 1.0921621 #>  [533,] 0.6534897 0.6576556 0.6748105 #>  [534,] 0.9426400 0.9484335 0.9517791 #>  [535,] 0.8320643 0.8906660 0.9855535 #>  [536,] 0.6429704 0.6997653 0.7181453 #>  [537,] 1.3098826 1.3340049 1.3423709 #>  [538,] 0.6721589 0.7976617 0.8271880 #>  [539,] 1.3638152 1.4166403 1.4327458 #>  [540,] 0.8816674 0.8860374 0.9267559 #>  [541,] 0.7735943 0.7962710 0.8754838 #>  [542,] 1.1272212 1.1422573 1.1464018 #>  [543,] 0.6984226 0.6997584 0.7064581 #>  [544,] 0.5433275 0.5813527 0.5861621 #>  [545,] 0.6210719 0.6369398 0.6433250 #>  [546,] 1.0056271 1.0503178 1.1311179 #>  [547,] 1.1748237 1.1820876 1.2076338 #>  [548,] 1.0278405 1.0422325 1.0881244 #>  [549,] 0.6725370 0.6827848 0.6839110 #>  [550,] 0.6100796 0.6700062 0.6989022 #>  [551,] 1.4537399 1.4621882 1.5055497 #>  [552,] 0.5506643 0.5661522 0.6066353 #>  [553,] 1.1637397 1.2486529 1.3104439 #>  [554,] 0.8809494 0.9265103 0.9717758 #>  [555,] 0.8580086 0.8648114 0.8759506 #>  [556,] 0.5858966 0.6503798 0.6804738 #>  [557,] 0.8010220 0.8189759 0.8350620 #>  [558,] 0.9025329 0.9525656 0.9748945 #>  [559,] 0.8737107 0.8757592 0.8898960 #>  [560,] 0.5722876 0.5828719 0.5854959 #>  [561,] 0.6179256 0.6280505 0.6310917 #>  [562,] 0.5037485 0.5072256 0.5552408 #>  [563,] 0.8341953 0.8411516 0.8443327 #>  [564,] 1.0574944 1.1314072 1.1552240 #>  [565,] 0.7968520 0.8052579 0.8253377 #>  [566,] 0.6560137 0.6635841 0.6836896 #>  [567,] 1.1006118 1.1216382 1.1438280 #>  [568,] 0.8027385 0.8118544 0.8191920 #>  [569,] 0.6000621 0.6031894 0.6051602 #>  [570,] 0.8850632 0.9002429 0.9040829 #>  [571,] 1.0528225 1.1583454 1.1689873 #>  [572,] 0.7826221 0.7853613 0.8124521 #>  [573,] 1.0724457 1.1102415 1.1209644 #>  [574,] 0.6713723 0.6744126 0.6775693 #>  [575,] 0.6949748 0.7032353 0.7086036 #>  [576,] 0.5333079 0.5353705 0.5861832 #>  [577,] 0.9150551 0.9218454 0.9359437 #>  [578,] 0.9177061 0.9199414 0.9199644 #>  [579,] 0.5794658 0.5964496 0.6106768 #>  [580,] 0.7289691 0.7321903 0.7596410 #>  [581,] 0.5734999 0.5840507 0.6033031 #>  [582,] 0.6372876 0.7020477 0.7120436 #>  [583,] 0.7652459 0.7863756 0.8055139 #>  [584,] 1.1021355 1.1176774 1.1422438 #>  [585,] 0.8672853 0.8940315 0.9157001 #>  [586,] 0.6298748 0.6759313 0.6814537 #>  [587,] 0.7651023 0.7906473 0.7913518 #>  [588,] 1.6614665 1.6722527 1.6883678 #>  [589,] 0.6272021 0.6285358 0.6432760 #>  [590,] 0.5684277 0.5963855 0.6459109 #>  [591,] 0.5940783 0.6131859 0.6208358 #>  [592,] 0.7684368 0.7779867 0.7944549 #>  [593,] 0.5483295 0.5540581 0.5863506 #>  [594,] 0.5661528 0.5996684 0.6071939 #>  [595,] 0.7356860 0.7399736 0.7693496 #>  [596,] 0.6304065 0.6405612 0.6418403 #>  [597,] 1.0710785 1.0928611 1.1032075 #>  [598,] 0.7988344 0.8093400 0.8385402 #>  [599,] 0.5415541 0.5579929 0.5835533 #>  [600,] 0.6912058 0.7399736 0.7413972 #>  [601,] 0.9611957 1.0446286 1.0892720 #>  [602,] 0.5738954 0.5892991 0.5957708 #>  [603,] 0.6274017 0.6472699 0.6541456 #>  [604,] 0.7653316 0.8009384 0.8271468 #>  [605,] 0.6242657 0.6588085 0.6823129 #>  [606,] 0.8138015 0.8715315 0.8822908 #>  [607,] 1.2855899 1.3089499 1.3223649 #>  [608,] 0.8910111 0.9169416 0.9177061 #>  [609,] 0.5924796 0.6100796 0.6300776 #>  [610,] 0.6489980 0.6575682 0.6681240 #>  [611,] 0.8860374 0.9020025 0.9626725 #>  [612,] 0.6902845 0.7503549 0.7603320 #>  [613,] 0.7626306 0.7684770 0.7732413 #>  [614,] 0.7733887 0.8163825 0.8181230 #>  [615,] 0.9189636 0.9418733 0.9545328 #>  [616,] 0.6056959 0.6060420 0.6616785 #>  [617,] 1.7005911 1.7142683 1.7160209 #>  [618,] 1.4880399 1.4911684 1.5472852 #>  [619,] 0.9079990 0.9462847 0.9940909 #>  [620,] 1.1509076 1.1819467 1.2035157 #>  [621,] 0.7000189 0.7236574 0.7328402 #>  [622,] 0.7673961 0.7732128 0.7782687 #>  [623,] 0.8090348 0.8123380 0.8272954 #>  [624,] 1.1667172 1.1908887 1.2568517 #>  [625,] 0.5654411 0.5813181 0.5902921 #>  [626,] 0.8996569 0.9117052 0.9159403 #>  [627,] 0.9075023 0.9082673 0.9117389 #>  [628,] 1.1629105 1.1813216 1.1888892 #>  [629,] 0.7575677 0.7648585 0.7670429 #>  [630,] 1.1482443 1.1657016 1.1916215 #>  [631,] 0.8517253 0.8525721 0.8665709 #>  [632,] 0.5433968 0.5580378 0.5995002 #>  [633,] 0.7702646 0.7791465 0.8383751 #>  [634,] 0.7169900 0.7277512 0.7415976 #>  [635,] 0.5630272 0.5738994 0.5742342 #>  [636,] 0.5320299 0.5453682 0.5717832 #>  [637,] 0.6901765 0.6934501 0.6981554 #>  [638,] 0.7777839 0.8704937 0.9946110 #>  [639,] 0.6686030 0.6788134 0.6838989 #>  [640,] 1.4693403 1.4845931 1.5849673 #>  [641,] 1.0557943 1.0883877 1.1198663 #>  [642,] 1.1214760 1.1280997 1.1744293 #>  [643,] 0.7270784 0.7387763 0.7401773 #>  [644,] 1.1237864 1.1352410 1.1649732 #>  [645,] 0.8235765 0.9442521 0.9470778 #>  [646,] 0.9143508 0.9805746 0.9927139 #>  [647,] 0.6736434 0.6787504 0.6861938 #>  [648,] 0.9528438 0.9723245 1.0197457 #>  [649,] 0.6364382 0.6567950 0.6649537 #>  [650,] 0.7114658 0.7343800 0.7572753 #>  [651,] 0.7510680 0.8062628 0.8165187 #>  [652,] 0.6421367 0.6455596 0.6510025 #>  [653,] 0.4920011 0.5072932 0.6275883 #>  [654,] 0.7036573 0.7142546 0.7205419 #>  [655,] 1.2930177 1.3633929 1.3964805 #>  [656,] 0.8696898 0.8947901 0.9517208 #>  [657,] 1.1545406 1.1559094 1.2126249 #>  [658,] 0.8530164 0.9017531 0.9117296 #>  [659,] 0.9653110 0.9884833 0.9897010 #>  [660,] 0.9266831 0.9344947 0.9717779 #>  [661,] 0.5626081 0.5805687 0.5928385 #>  [662,] 0.6301138 0.6562090 0.6588255 #>  [663,] 0.7803316 0.7995053 0.8746351 #>  [664,] 0.7049034 0.7352171 0.7357874 #>  [665,] 0.5621855 0.5718686 0.5841110 #>  [666,] 1.2079827 1.2497364 1.2662710 #>  [667,] 0.9351881 0.9505287 0.9802288 #>  [668,] 0.7844705 0.7861113 0.8290441 #>  [669,] 0.8020037 0.8055122 0.8193266 #>  [670,] 0.6645654 0.6646962 0.6800662 #>  [671,] 0.6644989 0.6858957 0.7135255 #>  [672,] 0.8309472 0.8566081 0.9129136 #>  [673,] 0.4673858 0.4888803 0.5122474 #>  [674,] 0.6807904 0.6944580 0.7004814 #>  [675,] 0.9837041 0.9922467 0.9971700 #>  [676,] 0.8949519 0.8968898 1.0116042 #>  [677,] 0.7191086 0.7726714 0.7899277 #>  [678,] 0.7472802 0.8378217 0.8844022 #>  [679,] 0.4918858 0.5353920 0.5626503 #>  [680,] 1.0396031 1.0469893 1.0545132 #>  [681,] 0.7648160 0.7913270 0.8218461 #>  [682,] 0.9079188 0.9609885 0.9639399 #>  [683,] 0.7743573 0.7747332 0.8187308 #>  [684,] 0.6242657 0.6379172 0.6408034 #>  [685,] 1.0695378 1.1113947 1.1208656 #>  [686,] 0.7930822 0.8033898 0.8512911 #>  [687,] 0.6712434 0.6754750 0.6755085 #>  [688,] 0.8344117 0.8867543 0.9357133 #>  [689,] 0.8710212 0.9548002 1.0336750 #>  [690,] 0.7995053 0.8125230 0.8449529 #>  [691,] 0.7720595 0.8289785 0.8360302 #>  [692,] 0.8581771 0.8828048 0.9043687 #>  [693,] 0.7208666 0.7247354 0.7771716 #>  [694,] 0.6175453 0.6243207 0.6556654 #>  [695,] 0.5881006 0.5927948 0.6186205 #>  [696,] 0.6573493 0.6637766 0.6947316 #>  [697,] 0.7534697 0.7557598 0.7774037 #>  [698,] 0.7858373 0.7890670 0.8105553 #>  [699,] 0.8282627 0.8393484 0.8661313 #>  [700,] 0.9290144 0.9778104 0.9828270 #>  [701,] 0.7553944 0.7581753 0.7641715 #>  [702,] 0.7186405 0.7201096 0.7720703 #>  [703,] 0.9242922 0.9283622 0.9379701 #>  [704,] 0.6977661 0.7273663 0.7292776 #>  [705,] 0.7533313 0.7554209 0.7946091 #>  [706,] 0.7976663 0.8398758 0.8664794 #>  [707,] 1.0128279 1.0144897 1.0147793 #>  [708,] 1.1163207 1.1179622 1.1996285 #>  [709,] 0.6094746 0.6256095 0.6459308 #>  [710,] 0.7478898 0.7484795 0.7541541 #>  [711,] 0.8951572 0.9000674 0.9323367 #>  [712,] 0.5191220 0.5422341 0.5619886 #>  [713,] 1.0371704 1.0410932 1.0564968 #>  [714,] 0.9861242 0.9931177 0.9944717 #>  [715,] 0.6507969 0.6561307 0.6618304 #>  [716,] 0.5731131 0.5890675 0.5902208 #>  [717,] 0.5448946 0.5877563 0.6132941 #>  [718,] 1.9840804 1.9962073 2.1234748 #>  [719,] 0.5594505 0.5624794 0.5878696 #>  [720,] 1.0149816 1.0216248 1.0424097 #>  [721,] 0.7226564 0.7291960 0.7708631 #>  [722,] 0.9411504 0.9499604 0.9535853 #>  [723,] 0.7529154 0.7694822 0.8321246 #>  [724,] 0.6712947 0.7049195 0.7343173 #>  [725,] 0.6315992 0.6326318 0.6610993 #>  [726,] 1.2510894 1.2990138 1.3454086 #>  [727,] 0.6823561 0.6891674 0.7026528 #>  [728,] 0.8991074 0.9390479 0.9678608 #>  [729,] 0.9778870 1.0468254 1.0707120 #>  [730,] 0.6547879 0.6579730 0.6885550 #>  [731,] 0.6840765 0.6935384 0.7401453 #>  [732,] 0.7469566 0.7800748 0.8349901 #>  [733,] 0.7862164 0.8050693 0.8077189 #>  [734,] 1.0303120 1.0531580 1.0752128 #>  [735,] 1.8699279 1.8947145 1.9604136 #>  [736,] 0.7307950 0.7889360 0.8331159 #>  [737,] 0.6812197 0.7126523 0.7231095 #>  [738,] 0.9826970 1.0586340 1.0679303 #>  [739,] 0.6095085 0.6320317 0.6899162 #>  [740,] 0.9187011 0.9386122 0.9426716 #>  [741,] 0.8010813 0.8348027 0.8755803 #>  [742,] 0.9936857 1.0156827 1.0302255 #>  [743,] 0.6769124 0.6800662 0.6895542 #>  [744,] 0.9441428 0.9621911 1.0086425 #>  [745,] 0.8258258 0.8296213 0.8446451 #>  [746,] 1.4979644 1.5479075 1.6525516 #>  [747,] 1.5329997 1.5506630 1.5583294 #>  [748,] 0.7567548 0.7750279 0.8145405 #>  [749,] 1.0000752 1.0310343 1.0452246 #>  [750,] 0.7211798 0.7328017 0.7573838 #>  [751,] 0.6855001 0.6885495 0.7077035 #>  [752,] 0.6979756 0.7409901 0.7415126 #>  [753,] 0.7766134 0.8016904 0.8135224 #>  [754,] 2.4460821 2.4655861 2.4965189 #>  [755,] 0.9490599 1.0355523 1.0699671 #>  [756,] 0.7601864 0.7923071 0.8304490 #>  [757,] 1.0382473 1.1154134 1.1453000 #>  [758,] 1.0859269 1.1061079 1.1122250 #>  [759,] 0.6116964 0.6141357 0.6438739 #>  [760,] 0.9604989 0.9629704 0.9845921 #>  [761,] 0.9073239 0.9712046 0.9854675 #>  [762,] 0.7828045 0.8225096 0.8304982 #>  [763,] 0.6291949 0.6492945 0.7114658 #>  [764,] 0.7123308 0.7183193 0.7327775 #>  [765,] 0.6606748 0.6703934 0.6897515 #>  [766,] 0.9121980 0.9723641 0.9766713 #>  [767,] 0.6682487 0.6735134 0.6816907 #>  [768,] 1.1554811 1.1684272 1.2071758 #>  [769,] 0.5718615 0.6125627 0.6282707 #>  [770,] 0.6803583 0.7398784 0.7806376 #>  [771,] 0.7714708 0.7927645 0.7956031 #>  [772,] 0.9457797 0.9501138 0.9603281 #>  [773,] 0.5785603 0.6172600 0.6298820 #>  [774,] 1.1515235 1.3319698 1.3533629 #>  [775,] 1.0771598 1.1555083 1.2049419 #>  [776,] 1.3984222 1.4242844 1.4336304 #>  [777,] 0.7301777 0.7390752 0.7423665 #>  [778,] 1.3290471 1.3392094 1.3808227 #>  [779,] 0.5719255 0.5776872 0.6008460 #>  [780,] 0.5015476 0.5170612 0.5234495 #>  [781,] 0.9265494 0.9641187 0.9650168 #>  [782,] 0.7934165 0.8001766 0.8039399 #>  [783,] 0.5941205 0.5943175 0.6384622 #>  [784,] 0.8563860 0.8998936 0.9544902 #>  [785,] 0.6468908 0.6611862 0.6762634 #>  [786,] 0.7796200 0.7857939 0.7873296 #>  [787,] 0.9622575 0.9716313 1.0003243 #>  [788,] 0.6288734 0.7045541 0.7053441 #>  [789,] 0.9312747 0.9585425 0.9595014 #>  [790,] 0.5514760 0.5579493 0.5682558 #>  [791,] 0.7551475 0.8194712 0.8760939 #>  [792,] 0.9627104 0.9955692 0.9997892 #>  [793,] 0.7939759 0.8030987 0.8055319 #>  [794,] 1.2514619 1.2830069 1.3032226 #>  [795,] 0.6156203 0.6264561 0.6422896 #>  [796,] 0.6587460 0.6814537 0.6880126 #>  [797,] 0.7404193 0.7439156 0.7514764 #>  [798,] 0.5978282 0.6056959 0.6105289 #>  [799,] 0.9042485 0.9256954 0.9735914 #>  [800,] 0.8696443 0.9150779 0.9192969 #>  [801,] 2.2005750 2.3099542 2.4215373 #>  [802,] 1.2131563 1.2303274 1.2605960 #>  [803,] 0.5579493 0.5669679 0.5728957 #>  [804,] 0.7423984 0.7518327 0.7536216 #>  [805,] 0.9955837 1.0125310 1.0519726 #>  [806,] 0.7944557 0.8711629 0.8771026 #>  [807,] 0.5412136 0.5472567 0.5674412 #>  [808,] 0.9576435 0.9656506 1.0704563 #>  [809,] 0.8629633 0.9101637 0.9179103 #>  [810,] 0.5877563 0.5919473 0.6256269 #>  [811,] 0.9206479 1.0389237 1.0505422 #>  [812,] 0.9992972 1.0324463 1.0350421 #>  [813,] 0.6205853 0.6505714 0.6554080 #>  [814,] 0.6121724 0.6145990 0.6315992 #>  [815,] 0.7361680 0.7887563 0.7988936 #>  [816,] 0.7521859 0.7587948 0.7648270 #>  [817,] 1.4100354 1.4933126 1.4972373 #>  [818,] 0.8686672 0.9283804 0.9731407 #>  [819,] 0.6812641 0.6900834 0.6947166 #>  [820,] 0.9732803 0.9836918 1.0092243 #>  [821,] 1.6077689 1.6129046 1.6250580 #>  [822,] 0.5882913 0.6219995 0.6370428 #>  [823,] 0.7030818 0.7127590 0.7169829 #>  [824,] 0.7795083 0.8125230 0.8653008 #>  [825,] 1.0880065 1.0924955 1.1004484 #>  [826,] 0.5839306 0.6008460 0.6018191 #>  [827,] 0.7028241 0.7042218 0.7353039 #>  [828,] 0.9588711 0.9674391 0.9733189 #>  [829,] 1.8685653 2.0145649 2.1171108 #>  [830,] 0.8958857 0.9223893 0.9542813 #>  [831,] 1.8384541 1.8416330 1.9078851 #>  [832,] 0.6760235 0.6904662 0.7072877 #>  [833,] 0.8168891 0.8565917 0.8871707 #>  [834,] 0.7545223 0.7637544 0.7808326 #>  [835,] 0.6056731 0.6598220 0.6694571 #>  [836,] 0.5387785 0.5469023 0.6040989 #>  [837,] 0.5671095 0.6026385 0.6134403 #>  [838,] 0.9230865 0.9736824 1.0299172 #>  [839,] 1.3592656 1.3925351 1.4116564 #>  [840,] 0.7615091 0.8311477 0.9266211 #>  [841,] 0.8171975 0.8634281 0.8970915 #>  [842,] 1.0541068 1.0554691 1.0584230 #>  [843,] 1.3120544 1.3196817 1.3198610 #>  [844,] 0.7393379 0.7884275 0.7885272 #>  [845,] 0.5343238 0.5538331 0.5620189 #>  [846,] 1.1059015 1.1637397 1.2017446 #>  [847,] 0.7363412 0.7430316 0.7496345 #>  [848,] 0.6634004 0.6795659 0.6959469 #>  [849,] 0.5847027 0.5874660 0.6086057 #>  [850,] 0.6041805 0.6120921 0.6164154 #>  [851,] 0.6825321 0.7107260 0.7390235 #>  [852,] 0.7293420 0.7381221 0.7688842 #>  [853,] 0.6505714 0.6694571 0.6753683 #>  [854,] 0.8728665 0.8755154 0.8809112 #>  [855,] 0.9169630 0.9613185 0.9831047 #>  [856,] 0.6702177 0.6763785 0.6922974 #>  [857,] 1.2258334 1.2405133 1.2716939 #>  [858,] 0.8161370 0.8195521 0.8360676 #>  [859,] 0.7970461 0.8353872 0.8445459 #>  [860,] 1.2446498 1.3075111 1.3176280 #>  [861,] 0.5729615 0.6179056 0.6187165 #>  [862,] 0.6134646 0.6380611 0.6492568 #>  [863,] 0.5472896 0.5756093 0.5942635 #>  [864,] 0.4556350 0.4841176 0.5005812 #>  [865,] 0.7477379 0.7545507 0.8352861 #>  [866,] 0.7050748 0.7177599 0.7432759 #>  [867,] 0.7461298 0.7553695 0.7759613 #>  [868,] 0.8604855 0.9003658 0.9322159 #>  [869,] 0.7322996 0.7587948 0.7596410 #>  [870,] 1.2633280 1.3264244 1.3802016 #>  [871,] 0.8259356 0.8286259 0.8573963 #>  [872,] 1.5834542 1.6180866 1.6299804 #>  [873,] 1.3037118 1.4071585 1.4863649 #>  [874,] 0.5898393 0.6027551 0.6069403 #>  [875,] 1.3192074 1.3347835 1.4126434 #>  [876,] 0.9488275 1.0931149 1.1493404 #>  [877,] 0.5905660 0.6089764 0.6908445 #>  [878,] 0.8272001 0.8664794 0.8664970 #>  [879,] 0.7766537 0.7892725 0.8152349 #>  [880,] 0.5788910 0.5997700 0.6105289 #>  [881,] 0.9207194 0.9251842 0.9717900 #>  [882,] 0.8579269 0.8580086 0.9140044 #>  [883,] 0.6518659 0.7418158 0.7473507 #>  [884,] 0.9758237 0.9999322 1.0284989 #>  [885,] 0.5326955 0.5571901 0.5749816 #>  [886,] 0.7289691 0.7307829 0.7358310 #>  [887,] 0.9622942 0.9638102 0.9728462 #>  [888,] 0.6305955 0.6392074 0.6487446 #>  [889,] 0.6764361 0.7188641 0.7269452 #>  [890,] 0.9126067 0.9309677 0.9498573 #>  [891,] 0.7193985 0.7272807 0.7628320 #>  [892,] 1.2725046 1.3018218 1.3058974 #>  [893,] 0.5353920 0.5362621 0.5483295 #>  [894,] 0.6386290 0.6395269 0.6476990 #>  [895,] 0.6282247 0.6868924 0.7021986 #>  [896,] 1.1484529 1.1629862 1.1695337 #>  [897,] 0.6324302 0.6342861 0.6347491 #>  [898,] 1.7718549 1.7824662 1.7827303 #>  [899,] 0.5433203 0.5623151 0.6217149 #>  [900,] 1.0347503 1.0996147 1.1014002 #>  [901,] 0.6427658 0.6922985 0.7102948 #>  [902,] 0.7367856 0.7429711 0.7477981 #>  [903,] 1.1336907 1.1360719 1.1741021 #>  [904,] 0.8499318 0.9165194 0.9353393 #>  [905,] 0.6082323 0.6099325 0.6105304 #>  [906,] 1.1890357 1.2064975 1.2228616 #>  [907,] 0.5927948 0.6047383 0.6288058 #>  [908,] 0.9680811 0.9750752 0.9788899 #>  [909,] 0.6462290 0.6830793 0.6902845 #>  [910,] 0.9614654 0.9643474 1.0178206 #>  [911,] 0.5707382 0.6134403 0.6194092 #>  [912,] 0.8438539 0.8635958 0.8822908 #>  [913,] 0.5494631 0.5586395 0.5721690 #>  [914,] 0.7138974 0.7319643 0.7420699 #>  [915,] 0.5632471 0.5740785 0.6042781 #>  [916,] 0.7923135 0.7976663 0.8465583 #>  [917,] 0.8365857 0.8747352 0.8838682 #>  [918,] 0.8355497 0.8986179 0.9490315 #>  [919,] 0.5759180 0.5960184 0.6423708 #>  [920,] 1.0406381 1.1513287 1.1574054 #>  [921,] 0.6542852 0.6896525 0.7520999 #>  [922,] 0.4733274 0.5579929 0.5990975 #>  [923,] 0.7825119 0.8641544 0.8826792 #>  [924,] 0.7436129 0.7510680 0.8085239 #>  [925,] 1.0566096 1.0598187 1.1021355 #>  [926,] 0.8702194 0.9092069 0.9382595 #>  [927,] 0.9208695 0.9215908 0.9232065 #>  [928,] 0.5421776 0.5629500 0.5632382 #>  [929,] 0.6373086 0.6628284 0.6630443 #>  [930,] 0.9253608 0.9294634 0.9664674 #>  [931,] 0.8630151 0.8958429 0.9052539 #>  [932,] 0.6940589 0.7007208 0.7331007 #>  [933,] 0.5704207 0.6463689 0.7120577 #>  [934,] 1.1820876 1.2046197 1.2436820 #>  [935,] 0.6101289 0.6152802 0.6424040 #>  [936,] 0.5611780 0.5812476 0.5944852 #>  [937,] 0.9266211 0.9345992 0.9498573 #>  [938,] 0.6905269 0.7111059 0.7129953 #>  [939,] 0.7354023 0.7450356 0.7680656 #>  [940,] 0.7205246 0.7361456 0.8046565 #>  [941,] 0.6627488 0.6634866 0.6744529 #>  [942,] 0.6109825 0.6789498 0.6932145 #>  [943,] 0.7421342 0.7525731 0.7636218 #>  [944,] 1.5644471 1.6805485 1.6963087 #>  [945,] 0.7021860 0.7387438 0.7771857 #>  [946,] 0.7936204 0.8817240 0.9127610 #>  [947,] 0.5861621 0.6070500 0.6092334 #>  [948,] 0.6452944 0.6528583 0.6697546 #>  [949,] 0.6050552 0.6092459 0.6129772 #>  [950,] 0.7331604 0.7787644 0.7934695 #>  [951,] 1.0253177 1.0451143 1.0537005 #>  [952,] 0.7184024 0.7235475 0.7358310 #>  [953,] 1.4738929 1.4760710 1.4886971 #>  [954,] 0.7177599 0.8365779 0.8883374 #>  [955,] 0.6894521 0.7090716 0.7259459 #>  [956,] 0.9741000 0.9769864 0.9970277 #>  [957,] 0.5380081 0.5654253 0.6075596 #>  [958,] 0.6392072 0.6544035 0.6625490 #>  [959,] 0.7907644 0.8358458 0.8444434 #>  [960,] 0.7071932 0.7127590 0.7670597 #>  [961,] 0.6848730 0.6964089 0.7245010 #>  [962,] 0.6904069 0.7305762 0.8038191 #>  [963,] 0.5488706 0.5490373 0.5551872 #>  [964,] 0.6949808 0.6969086 0.7448627 #>  [965,] 1.9801189 1.9938026 2.0106078 #>  [966,] 1.2544658 1.3048265 1.3213058 #>  [967,] 0.9513097 1.0189034 1.0216248 #>  [968,] 0.8311631 0.9231207 0.9701632 #>  [969,] 0.5391041 0.5441929 0.5617436 #>  [970,] 1.2959691 1.3010319 1.3228534 #>  [971,] 0.5882913 0.5943249 0.6313949 #>  [972,] 0.5833008 0.6373086 0.6375119 #>  [973,] 0.8401493 0.8819041 0.8935973 #>  [974,] 1.1014002 1.1037962 1.1181508 #>  [975,] 1.2501018 1.3052917 1.3424557 #>  [976,] 0.6997401 0.7055183 0.7072877 #>  [977,] 1.4522053 1.4797213 1.4918408 #>  [978,] 0.8010220 0.8212089 0.8484436 #>  [979,] 0.5188828 0.5749816 0.5777526 #>  [980,] 1.5771202 1.6153886 1.6271667 #>  [981,] 0.6542188 0.6546620 0.6778935 #>  [982,] 0.8484135 0.8798861 0.8944127 #>  [983,] 0.8572849 0.8704807 0.8813799 #>  [984,] 0.6635588 0.6802088 0.6858314 #>  [985,] 0.7766134 0.7838092 0.7976026 #>  [986,] 0.6654071 0.6735517 0.7211925 #>  [987,] 0.8666540 0.9141501 0.9148629 #>  [988,] 0.7422622 0.7488378 0.7502576 #>  [989,] 0.7472471 0.7556288 0.7636650 #>  [990,] 0.7988893 0.7988936 0.8318940 #>  [991,] 0.6561157 0.6962213 0.6971385 #>  [992,] 0.6668924 0.6817113 0.7021109 #>  [993,] 0.5984217 0.6110277 0.6137656 #>  [994,] 1.1348243 1.1912714 1.1977108 #>  [995,] 0.7291960 0.7964442 0.8008349 #>  [996,] 0.8138015 0.8242352 0.8468868 #>  [997,] 0.7806376 0.8685943 0.8824794 #>  [998,] 1.2475437 1.2716270 1.2930675 #>  [999,] 0.6551930 0.6591139 0.7024617 #> [1000,] 0.5902921 0.6100326 0.6264911 #>   # Find the 10 approximate nearest neighbors tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\", ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  690  912  800  654  958  271  495  270  318    86 #>    [2,]  516  381  340  966  706  908  102   13  138   525 #>    [3,]  107  513  159  822  482  239  793  971  818    20 #>    [4,]  848  501  247  120  852  629   37  361  880   492 #>    [5,]   73  371  165  763  691   14  254  940  181   790 #>    [6,]  115  599  411  237  717  780  979  716  488   465 #>    [7,]  926  792  293  771  985  475  627  615  220   753 #>    [8,]  718   88  778  729  588  998  601  618  884   290 #>    [9,]  120   18   37  279  769   56  743   60  935   730 #>   [10,]  727  286  392  448   67  919  265  283  479   333 #>   [11,]  496  289  636  861   25  602  795  429  594   984 #>   [12,]  244  980  607  162  818  571  551  956    3   482 #>   [13,]  395  809  859  736  706  623  209  158  314   916 #>   [14,]  855  434  691  165    5  421  930  768   46   264 #>   [15,]  268  895  810  521  294  739  535  717  603   621 #>   [16,]  894  849  355  556  215  401  560  610   83   592 #>   [17,]  427  915  336  514  957  390  593  909  117   874 #>   [18,]  279  622    9  743  120   66  968  482  935   435 #>   [19,]  271   55  150   86  363  988  374  921  448   467 #>   [20,]  856  807  783  520  533  822  687   56  107   704 #>   [21,]  884   78  420   88  348  619  611  184  480   998 #>   [22,]  667  321  256  325  147  879  815  174  450   422 #>   [23,]  437  177  408  292  990  272  820  671  986    29 #>   [24,]  502  493  151  113  463  837  485  360  928   662 #>   [25,]  795  429  861  701  274  496   11  504  984    98 #>   [26,]  468  487  706   64  859  788  119  340  916   786 #>   [27,]  535  659  799  206   15  645  920  268  895   583 #>   [28,]  894  939  355  960  360   16  394  262  684   837 #>   [29,]  671   59  739  408  521  294  163  440  282   751 #>   [30,]  117  566  427  322  305  845  957  412  111   212 #>   [31,]  227  681  934  711  158  144  811  209   62   812 #>   [32,]  676  317  145  663  114  906  960   28  130   188 #>   [33,]  987   38  224  178  852  247  742  622  931   868 #>   [34,]   45  766  450  624  541  854  634  698  389   367 #>   [35,]  558  631  956  191  916  574  838  503  552   623 #>   [36,]  668  973  996  978  683  627  146  946  660   782 #>   [37,]  769   60  401   53  430    9  120  782  730   560 #>   [38,]  987  178  247  852  367   33  854  742  120   629 #>   [39,]  515  682  119  447   64  451  132  122  424   540 #>   [40,]  938  137  645  268   59  895  440  717  554   176 #>   [41,]  229  573  171  232  876  309  370  794  881   873 #>   [42,]  543  123  144  741  387  681   62  328  488   967 #>   [43,]   50  167  477  259  820   23  640  980   40   272 #>   [44,]  257  520  785  773  907  441  783  737  376   591 #>   [45,]  854  634  541  670   54  367  698  766   34   249 #>   [46,]  388  930  421  855  546  397  572  881   14   896 #>   [47,]  995  446  281  721  277  925  637  669  752   264 #>   [48,]  320  755  243  614  337  234  498  748  511   669 #>   [49,]   98  363  445  889  375  241  991  861  883   590 #>   [50,]   43  259  244  980   12  239  167  564  974   640 #>   [51,]  289  457  797  353  890  134   11  258  470   202 #>   [52,]  148  927  983   96  702  213  892  587  275   205 #>   [53,]  769   37  560  863  251  963  401  936  112   347 #>   [54,]  430  653  347  634  694  398  494  670  948   112 #>   [55,]   19  271   86  374  217  150  921  988  363   601 #>   [56,]  560  947  769  863  361  935  186    9  712   971 #>   [57,]  582  710  303  419   81  647   69  703  507   194 #>   [58,]  546  428  808  388   46  223  896  794  881   930 #>   [59,]   29  717  294  671  440  739  521  268  411   163 #>   [60,]  430  769  401  730   37  592  297  373  560   867 #>   [61,]  959  359  192  368  312  293  901  183  418   226 #>   [62,]  144  387  158  543  711  932  209  736  681    42 #>   [63,]  678  304  815  844  240  952  180  670  341   252 #>   [64,]  340  119   26  487  788   39  138  786  447   706 #>   [65,]  114   32  317  663  130  157  495  676  145   749 #>   [66,]  968  435   18  866  287  179  962  107  743   523 #>   [67,]  265  632  835  885  333  479  469  919  175    10 #>   [68,]  704  228  394  179  215  806  923  560  575   527 #>   [69,]  710  647   57  329  851  454  135  264  122   382 #>   [70,]  951  351  675  772  135  453  431  703  840   982 #>   [71,]  220  459  705  909  534  261  887  475  336   784 #>   [72,]  644  784  245  291    1  800  747  307  828   459 #>   [73,]  371  763    5  790  357  165  981  143  379   181 #>   [74,]  283  391  286  975   10  425  727  455  352   510 #>   [75,]  719  942  530  183   91  169  278  593  417   611 #>   [76,]  680  812  425  811  727  392  711   10  391    31 #>   [77,]  517  123  488  955  543  163  191  465  170   819 #>   [78,]  359  278  293  184  108  386  792  771  719   418 #>   [79,]  618  789  860  396  358  749  588  374  217   470 #>   [80,]  159  482  492  899  822  971  107  279  712    56 #>   [81,]  116  582  431  168   57  851  976  285  406   710 #>   [82,]  556  692  275  993  476  230  653  948  347   112 #>   [83,]  863  112  151  347  837  560  502  126  493   993 #>   [84,]  413  466   97  673  981  790  864  767  813   402 #>   [85,]  453  714  703  584  135   47  840  641  281   721 #>   [86,]  150   55  921   19  448  270  217  271  330   241 #>   [87,]  677  200  724  542  249  142  180  622  162   986 #>   [88,]  884  998  628  452   21  778    8  532  185   804 #>   [89,]  633  306  816  580  246  886  869  200  266   931 #>   [90,]  945  767  853  596  464  813  413  222  128   759 #>   [91,]  942  183  719  893   75  936  562  798  418   368 #>   [92,]  484  939  954  738  910  688   28  911  846   592 #>   [93,]  365  157  339  187  529  231  740  118  301   478 #>   [94,]  850  576  313  725  625  124  862  814  897   863 #>   [95,]  119  970  682  356  540  386   39  515  309   232 #>   [96,]  927  511  429  795  983   99  141  602  702   304 #>   [97,]  466  410   84  864  673  260  813  255  413   836 #>   [98,]  861   49  274  496  504  991  594   25  485   589 #>   [99,]  511   96   11  745  548  429  748  614  795   927 #>  [100,]  910  762  624  553  699  592  121  188  297   355 #>  [101,]  410  290  853  834  889  150  759  333  813   375 #>  [102,]  966  811  172    2  812  908  758  680  638   608 #>  [103,]  621  895  528  717  411  999  193  938  716   176 #>  [104,]  298  343  371    5  254  643  332  197  295    73 #>  [105,]  471  828  985  615  705  989  518  692  476    82 #>  [106,]  950  154  327  218  288  890  937  253  303   834 #>  [107,]  971  513    3  482  159   80  822  899  524    20 #>  [108,]  278  409  611  540  418  515  447   78  719   942 #>  [109,]  876  917  538  329  424  133  924  420  122   619 #>  [110,]  544  341  240  313  863  398  935  652  712   347 #>  [111,]  874  305  212  322  612   30  284  311  976   427 #>  [112,]  347  993  694   83  653  398  556   53  579    54 #>  [113,]  928   24  485  636  463  504  493  765  502   662 #>  [114,]  130  663  744  495   65  269  510   32  145   690 #>  [115,]    6  599  237  411  979  807  780  717  773   257 #>  [116,]   81  431  406  285  168  582  976  851  804   210 #>  [117,]  845   30  427  957  412  562  322  566  312   368 #>  [118,]  740  785  598  478  734  481  777  907  301   554 #>  [119,]   39   64  682  786  515  487   95   26  788   540 #>  [120,]  247  279    9    4   37   18  935  848  852   899 #>  [121,]  297  867  699  373  730  668  518   60  762   592 #>  [122,]  424  329  454  917  538  940  981   39  447   382 #>  [123,]  543   77  488   42  517  955  736  387  599   176 #>  [124,]  549  902  810   94  581  636  550  594  576   862 #>  [125,]  127  750  474  613  137  620  943  757  761   598 #>  [126,]  590  131  850  836   83  576  241  635  709   485 #>  [127,]  474  125  613  137  775  750  830  478  598   689 #>  [128,]  555  164  767  733  770   90  424  940  997   596 #>  [129,]  198  605  911  335  684  972  891  929  262   662 #>  [130,]  269  145  114  663  510  865  960  472  744   575 #>  [131,]  512  576  590  836  550  126  375  635  581   850 #>  [132,]  565  515  451  447  383  409  397   39  412   278 #>  [133,]  420  619  651  515  480  210  540  108  924   132 #>  [134,]  353  840  303  327  641  507  289  714  405    51 #>  [135,]  703  453   69   85  264  710  647   57  714   840 #>  [136,]  648  300  657  563  903  841  791  834  267   101 #>  [137,]  613  895  440   40  554   15  810  598  127   717 #>  [138,]  798  340  949   64  506  788  693  616  487   346 #>  [139,]  156  414  467  823  307  877  589  789  374   749 #>  [140,]  460  476  226  901  833  494   82  615  275   471 #>  [141,]  696  933  814  952  715  311  748  549  862   511 #>  [142,]  677  899  622  279  986  162  971  712  724    80 #>  [143,]  763  790  181  519  393   73  864  402  650   922 #>  [144,]  711  681   62   42  543  158  387   31  209   328 #>  [145,]  676  130  806  394  188   28  910   32  939   228 #>  [146,]  683  901  372  627  384  668  368  978  190   192 #>  [147,]  225  349  438  174   22  892  667  678  761   205 #>  [148,]  702   52   96  587  983  275  927  795  429   764 #>  [149,]  612  323  874  406  261  111  285  909  212   284 #>  [150,]  448   86   19  271  241  921   55  101  333   639 #>  [151,]  502  837  493   24   83  463  894  113  360   485 #>  [152,]  168  770  296  210  804  464  924  596   81   116 #>  [153,]  378  203  532  190  185  996  753  273   75   245 #>  [154,]  218  937  106  950  327  890  303  507  358   202 #>  [155,]  839  426  242  189  568  904  324  961  983   243 #>  [156,]  139  414  823  877  467  589  789  749  654   684 #>  [157,]  414  663  270  823  749  960  330  269   93   529 #>  [158,]  209   62  736  144   31  681  932  711  623   693 #>  [159,]   80  822  482  899  971  492  107  552  712     3 #>  [160,]  870  945  500  733  296  729  489  903  770   728 #>  [161,]  730   18  367  867  120  968    9  302  766   743 #>  [162,]  142  622  571  607   87  677  986  437  482   279 #>  [163,]  465  522  488  294  671  237  780  393  552    29 #>  [164,]  128  555  981  940  733  195  767  882  413    84 #>  [165,]  691  331  819  357    5  468   73   14  407   731 #>  [166,]  827  536  907  481  352  695  700  425  441   376 #>  [167,]  645   43   40  272  477  659  820  535  666   977 #>  [168,]  296  152  596   81  770  813  464  804  116   582 #>  [169,]  593  526  417  893  779  719  759  969  530    75 #>  [170,]  407  334  331  955  163   77  517  631  819   691 #>  [171,]  873  655  672  805  229  320  308  326  234   284 #>  [172,]  966  102    2  811  680  516  812  638  433   608 #>  [173,]  638  608  201  812  871  811  578  686  486   658 #>  [174,]  252  450  667  310  315  678  844  698  304   147 #>  [175,]  969  888  893  679  963  263  632  417  276   905 #>  [176,]  938  193  918  955  103  528  411  741  717   716 #>  [177,]  292  408  990  437   23  986  815  272  739   751 #>  [178,]   38  742  931  345  987  868  852  200   33   568 #>  [179,]  704  435   68  968  806  394  228  866   66   186 #>  [180,]  249  341  986  724  670  796  200   63  815   886 #>  [181,]  143  763  819   73  371  519  790  468    5   191 #>  [182,]  713  539  443  266  633  246  388  558  838   631 #>  [183,]  719  384  593  417  359   91   75  942  562   117 #>  [184,]  832  278  452  322  915  771  874  719  390   293 #>  [185,]  245  475  753  784  532  378  153  771  190   459 #>  [186,]  560  743  432  863  544   56  837  435  151   674 #>  [187,]   93  821  830  280  740  490  483  231  365   785 #>  [188,]  762  676  355  394  145  806   28  297   16   910 #>  [189,]  324  961  568  586  426  904  983  697  566   242 #>  [190,]  996  753  384  203  273  199  936  378  969   417 #>  [191,]  819  631  331   77  395   35  517  314  170   916 #>  [192,]  368   61  312  226  901  359  833  959  117   398 #>  [193,]  528  583  176  938  103  999  716  955  918   650 #>  [194,]  419  603  637 1000  721  446  661  647  545   609 #>  [195,]  295  379  519  197  728  563  164   84  248   763 #>  [196,]  620  238  405  829  125  920  757  225  641   761 #>  [197,]  733  295  379  195  500  371  164  940  728   254 #>  [198,]  129  911  891  605  662  335  360  972   24   684 #>  [199,]  679  936  569  849  824  263  969  384  527   958 #>  [200,]  677  931  724   87  180  796  249   89  142   816 #>  [201,]  871  638  608  914  658  686  173  486  263   578 #>  [202,]  883  756  457  289  861   98  984  396   49   889 #>  [203,]  190  273  372  996  378  458   91  683  384   153 #>  [204,]  642  792  426  833  155  959   61  722  742   146 #>  [205,]  745   99  548  892  927  511   96  761  844   602 #>  [206,]  535  920   27  461   15  659  521  645  268   799 #>  [207,]  953  817  236  828  261  291  887  534  439   756 #>  [208,]  433  778  318  853  919  945  882   90  964   729 #>  [209,]  158  623  736   62  932  144  758   31  681   693 #>  [210,]  152  651  770  596  168  851  924  480  832   420 #>  [211,]  231  436  757  830  483  929  478  760  529   732 #>  [212,]  305  111  311  587  874   30  566  234  221   284 #>  [213,]  315  364  416  817  953  692   52  624  891   148 #>  [214,]  444  548  748  385  350  614  597  755   48   892 #>  [215,]  560  527  401   16   68  276  769  894  394   849 #>  [216,]  882  399  728  195  164  295  381  143  413   519 #>  [217,]  921   55   86  374  601  330   19  270  648   150 #>  [218,]  154  937  890  531  106  507  353  327  950   134 #>  [219,]  328  720  575  520  338  280  737  491  490   595 #>  [220,]   71  909  705  764  261  459  336  326  985   476 #>  [221,]  226  305  587   30  476  212  324  764  293   326 #>  [222,]  853  333  919  835  964  759  526  410  413    67 #>  [223,]  869  383  397  498  246  443  388  904  961   428 #>  [224,]  987  852  848  838  247    4   33  492  899   120 #>  [225,]  147  438  349  892   22  205  174  196  761   597 #>  [226,]  221  140  192  476  833  901   30  368  398   586 #>  [227,]   31  711  144  681  491  934  812  158  811    62 #>  [228,]  806   68  394  704  923  658  865  179  215   527 #>  [229,]   41  171  722  573  386  672  873   78  309   792 #>  [230,]  274  764   82  336  847  662  514  692  275   993 #>  [231,]  830  211  129  483  605  929  436  529  335   972 #>  [232,]  573  309  428  881  383  386  388   95  930   421 #>  [233,]  723  350  816  597  796  952  696  715  748   697 #>  [234,]  320  805  212  858  308   48  587  111  149    99 #>  [235,]  553  364  910  624  846  801  100   92  738   416 #>  [236,]  944  817  760  953  258   51  457  756  436   470 #>  [237,]  780    6  599  354  115  552  465  979  313   411 #>  [238,]  405  641  531  620  134  890  353   51  362   920 #>  [239,]  259  793  857    3  338  689  687  600  533   720 #>  [240,]  341  110  814  579  544  694   63  304  670   653 #>  [241,]  445  639  150  126   49  590  131  375  330   921 #>  [242,]  904  189  426  324  243  961  498  155  722   428 #>  [243,]   48  320  242  324  983  498  655  189  748   723 #>  [244,]   12    3  980  259  239  107  818  551  482   162 #>  [245,]  185  784  475  318   72  532  753  800  459   958 #>  [246,]  633  816   89  443  869  306  580  223  992   388 #>  [247,]  120  852  987    4  279  848  629   38  935   622 #>  [248,]  650  999  379  528  864  803  790  344  661   716 #>  [249,]  724  180  670  541  341  677  622  200  986   743 #>  [250,]    7  926  615  792  326  459  220  985  627   471 #>  [251,]  798  346  562  449  616  312  893  880   53   845 #>  [252,]  174  304  698   63  450  844  678  310  670   941 #>  [253,]  288  621  950  419  791  999  649  528  834   550 #>  [254,]  649  379  298  371  647  643   73  661  710     5 #>  [255,]  466  836  913  625  665   97  979  850  635   377 #>  [256,]  422  325  321  667  342   22  523  423  310   474 #>  [257,]   44  773  785  807  783  520  441  777  115   907 #>  [258,]  760  274  745  756  861  701  797   98  765   289 #>  [259,]  239    3  689  793  600   23  244  820  687   513 #>  [260,]  716  803  864  522  661  922  673  466  402   581 #>  [261,]  220  887  708   71  149  764  909  326  705   336 #>  [262,]  972  605  301  911  463  335  129  502  837   684 #>  [263,]  888  949  175  969  936  914  679  527  893   199 #>  [264,]  281  382  454  277  329   69  721  434  572   538 #>  [265,]   67  479  469  632  885  835  561  376  635   276 #>  [266,]  577  306  633  558   89  580  816  666  631   246 #>  [267,]  601  648  136  499  217  657  921  729   86   290 #>  [268,]   15  294  895  645  521   59  938  717  535   193 #>  [269,]  130  472  960  663  591  737  510  654  270   575 #>  [270,]   86  654  663  414  157  960  150  330  241   921 #>  [271,]   19   55  150   86  988  448  467  363  654   905 #>  [272,]  292  461  177  521   23  820  990  739  437    29 #>  [273,]  686  914  203  949  190  263  969  888  936    91 #>  [274,]  861   25   98  504  928  496  230  701  795   662 #>  [275,]  948  702  653   82  579  692  694  347  476   230 #>  [276,]  632  885  561  963  175  215  469   67  560   265 #>  [277,]  382  669  446  995  572   47  731  454 1000   264 #>  [278,]  409  562  184  719  108  359  322  942  183    75 #>  [279,]  899  622   18  120  935    9  247   80  482   743 #>  [280,]  783  520  785   44  575  338  257  595  219   807 #>  [281,]  995   47  264  925  277  572  446  382  721   755 #>  [282,]  552  313  712  354  886  237  780  671  897   544 #>  [283,]   74  727   10  286  391  448  425  352  392   166 #>  [284,]  672  874  305  612  111  326  293  909  184   452 #>  [285,]  984  858  883  406  116  976  456   81  289   570 #>  [286,]   10  352  472  591  479  727  283  737  448   510 #>  [287,]  523  866   66  342  962  435  793  524  688   423 #>  [288,]  621  253  895  103  598  950  106  604  327   550 #>  [289,]   11  202  701  861  457   51  496   25  984   285 #>  [290,]  464  101  729  296  648  804   55  988  889   853 #>  [291,]  644   72  828  784  459  307  906  705  534    71 #>  [292,]  177  990  437  815  408   23  272  986  820   321 #>  [293,]  359  771  792  183  284  926   78   61  184   221 #>  [294,]   59  717  268   29  163  411  522  739  521   716 #>  [295,]  519  763  195  371  379  197  650  143   73   181 #>  [296,]  168  464  152  804  596  945  290  813  729   101 #>  [297,]  121  867   60  592  762  401  373  730  699   355 #>  [298,]  643  254  343  799  371  649    5  379  721    73 #>  [299,]  537  775  349  211  757  231  830  127  483   125 #>  [300,]  841  791  834  563  344  253  559  136  950   903 #>  [301,]  777  529  972  262  509  598  335  463  785   605 #>  [302,]  806  730  968  394  557  592  228    9  867   179 #>  [303,]  950  419   57  582  327  507  134  253  154   840 #>  [304,]  844   63  579  602  252  240  678  952  814   702 #>  [305,]  212  874  111  284   30  221  587  672  322   427 #>  [306,]  633   89  580  816  577  266  246  886  781   808 #>  [307,]  439  139  906  156  414  644  789  749  823   828 #>  [308,]  370  234  772  320  651  337  612  480  851   858 #>  [309,]  573  232  428  386  383  722  565  132  904   223 #>  [310,]  422  941  432  962  423  879  891   63  252   667 #>  [311,]  566  212  933  652  141  696  814   30  111   429 #>  [312,]  346  368  562  251  192  117  412  616  845   798 #>  [313,]  354  712  947  282  544  863  780  552  110   237 #>  [314,]  395  809  774  462  191  916  900   13  859   547 #>  [315,]  891  364  213  198  662  174  129  941  911   252 #>  [316,]  875  799  343  298   27  643  659  584   85   714 #>  [317,]   32  676  442  906  145  188  114   65  912   910 #>  [318,]  988  433  532  271   55  245   19  778    1   333 #>  [319,]  584  925   47  995  281  385   85  781  446   206 #>  [320,]   48  234  337  498  243  308  212  858  805   772 #>  [321,]  325  667  815  256  879  292  523   22  177   986 #>  [322,]   30  117  111  412  427  390  278  832  874   915 #>  [323,]  406  390  149  804  883  976  909  363  612   915 #>  [324,]  189  983  586  961  587  426  221  566  212   568 #>  [325,]  321  256  292  523  667   22  177  815  820   524 #>  [326,]  672  284  587  220  305  764  221  874  261   909 #>  [327,]  950  303  154  797  134  991  106  550  375   289 #>  [328,]  219  520  575  720  338   20  856   42   44   144 #>  [329,]  538  917  122  424  454  382  851  940   69   264 #>  [330,]  921  241   86  445  270  217  639  150  481   157 #>  [331,]  691  407  165  819  631  191  170  334  468   393 #>  [332,]  295  343  994  519  650  643  380  700  559   344 #>  [333,]  222  919  835   67  448  853  759  988  265   150 #>  [334,]  407  170  331  691  781  165  631  819  955   163 #>  [335,]  929  129  972  589  198  605  463  529  877   262 #>  [336,]  847   17  514  764  909  915  230  705  427   664 #>  [337,]  320  382  772  498   48  403  277  669  572   651 #>  [338,]  595  687  793  783  533  520  600  328  280   689 #>  [339,]  365  685  400  740  118   93  734  478  821   785 #>  [340,]   64  516  381  138  706   26    2  487  530   119 #>  [341,]  240  110  544  670  180  935  249  694   54   796 #>  [342,]  523  422  287  423  688  256  962  310  667   954 #>  [343,]  643  298  559  316  875  583  344  254  104   799 #>  [344,]  559  841  379  791  248  643  649  528  999   300 #>  [345,]  868  742  443  931  852  178  503  878  616   869 #>  [346,]  251  616  449  312  798  562  412  503  788   665 #>  [347,]  112  398  653  694  993   54   83  948  579   430 #>  [348,]  611  530  108  540   75  532  719  964   90   340 #>  [349,]  147  299  174  537  775  315  225  256  422   667 #>  [350,]  233  597  723  385  444  630  748  952  214   816 #>  [351,]   70  951  876  370  135  109  924  403  329   538 #>  [352,]  591  376  737  286  479  441  639  695  469   481 #>  [353,]  134  840  289   51  507  531  218  570  675   457 #>  [354,]  313  780  237  552  947  712  979  282  863   544 #>  [355,]  762   16  556   28  849  188  894  592  297   989 #>  [356,]  843   95  970  525  119  505  487  786  878   418 #>  [357,]  377  673  981  402  545  790  665  468  165   466 #>  [358,]  396  732  470  860  445  991  789  756  154   202 #>  [359,]   61  293  183  278  959  942  719  562   91   418 #>  [360,]   24  662  502  837  198  911  877  684  151   589 #>  [361,]  880  506  947  623  848  501   56  693  932   492 #>  [362,]  238  531  353   51  825  890  134  405  457   218 #>  [363,]   49  889  374   19  883  467  847  445  323    55 #>  [364,]  416  315  213  553  585  624  891  537  198   129 #>  [365,]  339  740  478  400   93  118  685  734  483   529 #>  [366,]  381  516    2  172  966  399  882  216  340   102 #>  [367,]  494  373  854  867  430  978   45  730  161    54 #>  [368,]  192  312  901  117  845   91  251  183   61   936 #>  [369,]  787  567  726  872  658  404  486  551  758   557 #>  [370,]  308  876  480  619  924  651  951  431  851   612 #>  [371,]   73  763    5  379  790  519  254  295  143   197 #>  [372,]  458  683  203   91  505  626  146  942  959   629 #>  [373,]  430  494  867  121  978   60  730  297  367    37 #>  [374,]  363   55  396  217   19  921  467  271   86   445 #>  [375,]  445  834  131  512   49  550  889  456  576   950 #>  [376,]  441  479  469  695  352  635  591  885  773   265 #>  [377,]  913  402  665  357  673  574  466  393  522   625 #>  [378,]  153  203  532  190  273   75  185  753  996   530 #>  [379,]  248  649  519  371  344  763  790  254  195    73 #>  [380,]  604  700  583  176  999  741  528  918  193   650 #>  [381,]  516  340    2   64  706  882   26  216  399   119 #>  [382,]  454  277  538  572  264  851  329  337  122   731 #>  [383,]  397  132  223  565  388  786  992  869  515   309 #>  [384,]  753  183  417  190  936  901  593  969  199    91 #>  [385,]  925  755  350  614  723  995  630  808  233   748 #>  [386,]  722  309   78  959  418  573  108  359  132    61 #>  [387,]   62  543   42  922  123  144  488  536  736   143 #>  [388,]   46  397  930  546  443  383  421  223  855   246 #>  [389,]  879  541  766  667  450  962  523  249  310   342 #>  [390,]  915  976  322  832  323   17  427  779  473   514 #>  [391,]   74  283  425  166  827  700  536  286  727   352 #>  [392,]  727   10  919  425  479  265   67  835  333   286 #>  [393,]  402  922  522  465  819  377  864  488  673   913 #>  [394,]  806  228   68  215  179  704  188   28  939    16 #>  [395,]  314  809   13  736  191  774  916  859  900    35 #>  [396,]  358  374  756  202  363  883  457   49  445   889 #>  [397,]  383  572  992  223  731  132  565  388  869   498 #>  [398,]  347  112  652  845  653   54  993  110  579   694 #>  [399,]  216  381  882  181  295  728  143    2  164   994 #>  [400,]  685  339  365  118  657  740  478  481  330   106 #>  [401,]  769   60  215  527   37  560   16   53  849   297 #>  [402,]  393  673  377  864  922  522  466  357  790   260 #>  [403,]  794  881  421  337  281  264  538  382  329   434 #>  [404,]  726  567   66   18  968  369  161  244  551     9 #>  [405,]  641  238  920  620  134  714  840  531  353    85 #>  [406,]  116  323  883  804  285  570  149   81  431   976 #>  [407,]  334  170  331  691  631  165  781  819  163   191 #>  [408,]   29  177  671  751  739  897  986  282  440    23 #>  [409,]  562  278  451  826  447  412  132  322  108   665 #>  [410,]   97  759  813  836  101  456  635  333  222   466 #>  [411,]  717    6  115  716  599  237  294  103  581    59 #>  [412,]  117  562  322  409  845  826  346  566   30   312 #>  [413,]   84  767  526  981   97  835  813  466  596   826 #>  [414,]  823  156  157  139  877  749  270  589  789   960 #>  [415,]  100  906  699  518  317  762  442  676  471   910 #>  [416,]  364  585  213  553  692  315  624  439  100   684 #>  [417,]  969  593  893  936  384  679  169  183  175   963 #>  [418,]  942   91  959  108  278  458  359  562  409   719 #>  [419,]  194  303  603   57  253  649  582  647  550   710 #>  [420,]  133  619  480  924  210  540  651  108  876   515 #>  [421,]  855  930  881   46  434  388  572   14  403   896 #>  [422,]  310  423  342  256  667  879  523  962  321   941 #>  [423,]  954  422  738  688  310  484  866  342  432   941 #>  [424,]  122  917  940  329  538  454  997   39  128   981 #>  [425,]  392  727  536  166  827  700  391   10  283    76 #>  [426,]  189  324  155  568  833  242  904  221  839   961 #>  [427,]  957   17  117  845   30  514  322  915  390   473 #>  [428,]  573  309  232  223  904  242  383  722  388   443 #>  [429,]  795   25  602  504  928  496  814   11  274   636 #>  [430,]   60  373   54  494  769   37  347   53  730   112 #>  [431,]  116   81  982  951  507  851  168  406  675   152 #>  [432,]  962  941  310  186  866  743  435  837   63   670 #>  [433,]  964  919  318  222  988  333  530  853  835   532 #>  [434,]   14  855  421  264  917  930  329    5  940   281 #>  [435,]  866  179   66  968  186  962  743  432  484   287 #>  [436,]  929  732  797  991  335  757  760  211  529   765 #>  [437,]  990   23  177  986  292  408  571  524  272   671 #>  [438,]  892  597  147  927  225  350  214  174  548   450 #>  [439,]  307  906  585  139  156  416   32  789  823   684 #>  [440,]  613  751  739  600   59  717  810  521   29   408 #>  [441,]  376  695  773  907  639  352  635   44  479   469 #>  [442,]  317  676  188  145   32  912  762  114  824   800 #>  [443,]  246  713  633  345  223  388  869  182   89   816 #>  [444,]  214  350  597  385  630  233  723  808  438   748 #>  [445,]  375   49  241  889  921  834  330  363  150   639 #>  [446,]  637  721   47  752  995  277  194 1000  731   669 #>  [447,]  451  409  132  665  515  826   39  981  412    64 #>  [448,]  150  333   86   10   19  352  286  727  905   271 #>  [449,]  616  503  346  251  913  574  880  788  798   947 #>  [450,]  541  698  252  879  174   45  670  389  249   667 #>  [451,]  447  409  665  132  826  412  515   39  981   562 #>  [452,]  832  909  184  612  915  771  884  874  284   323 #>  [453,]  703   85  840  714  135   57  772  669   47   281 #>  [454,]  382  538  122  329  277  264  851  424  572   731 #>  [455,]  975  495   74  646  744  680  578  510  283   114 #>  [456,]  976  984  609  410  889  375  576  582  285   550 #>  [457,]  202  756  289   51  825  797  470  701  883   396 #>  [458,]  372  505  959  418  942   91  203  683  626    61 #>  [459,]   71  784  705  475  220  985  828  644  185   105 #>  [460,]  140  494  833  699  373  476  518  901  226   471 #>  [461,]  630  272  206  521  535  292  820  739  177   990 #>  [462,]  838  916  314  525  859  395  809  878  706   487 #>  [463,]  509   24  493  113  502  485  151  972  594   928 #>  [464,]  296  804  290  168  152  596  945   90  729   853 #>  [465,]  522  163  488  393  922  780  237  402  599   913 #>  [466,]  673   97   84  665  864  255  402  377  260   913 #>  [467,]  877  847  156  589  139  363   19  414  271   374 #>  [468,]   26  357  165  981  819   73   64  487  574   181 #>  [469,]  479  885  376  265  561  635  632  591  979   441 #>  [470,]  890  358  457  860  797  154  218  732   51   436 #>  [471,]  518  985  105  615  699  140  476  460  475   627 #>  [472,]  286  510  269  591  905  610  352  654  744   578 #>  [473,]  779  850  957  709  845  836  514  590  390   427 #>  [474,]  613  127  750  125  440  751  137  678  815   674 #>  [475,]  985  753  784  185  459  705  771  384  220    71 #>  [476,]  140  226  764   82  221  901  275   17  615   985 #>  [477,]  666  266  170  577  558  334  407  631  977   167 #>  [478,]  598  118  740  365  301  529  777  830  436   400 #>  [479,]  469  376  265  352  591  885  441   67  286   635 #>  [480,]  619  924  420  651  876  133  210  851  152   370 #>  [481,]  639  907  695  441  352  166  827  785  118   376 #>  [482,]   80  159  492  107  899  971  822  279    3   818 #>  [483,]  231  211  830  365  187   93  478  740  775   339 #>  [484,]  954   92  939  688  866  738  423  435  846   179 #>  [485,]  504  928  636  113  463   24  594  509  493   496 #>  [486,]  871  201  787  782  973  660  557  914  626   686 #>  [487,]  859  786  706   26  878  788   64  916  119   138 #>  [488,]  465  599   77  922  123  163  780  522  393   237 #>  [489,]  903  982  500  160  296  300  168  507  870   431 #>  [490,]  219  575  130  704  280  520  145  187  328   269 #>  [491,]  720  219  328  711  227  144  967   42  681   741 #>  [492,]   80  482  899  159  848  822  279   56  361   971 #>  [493,]  502  151   24  837  463  509  113  485  674    83 #>  [494,]  373  430   54  367  460  140  833  634  867   854 #>  [495,]  455    1  114  975  744  690  663  578  646    74 #>  [496,]   11  636  861  504  594   98  928  485   25   274 #>  [497,]  898  870  903  728  160  136  208  197  733   489 #>  [498,]  565  223  397  320  337  572  383  242  869    48 #>  [499,]  657  330  267  400  217  921  136  648  339   601 #>  [500,]  733  997  770  197  160  128  555   69  168   940 #>  [501,]  880    4  503  848  361  616  629  623  852   449 #>  [502,]  151  837  493   24  463  360  113  894   83   485 #>  [503,]  616  449  501  880  346  947  251  361  574   788 #>  [504,]  485  928  636  496  113   98  274  861  594   795 #>  [505,]  458  372  959  418  868  742  626  683   91   942 #>  [506,]  693  880  361  949  932  623  888  263  561   138 #>  [507,]  675  982  303  840  937   57  431  353   81   218 #>  [508,]  182  742  178  642  713  345  868  443  539    33 #>  [509,]  463  594  493  485  777  636  113   24  502   750 #>  [510,]  646  744  578  865  472  286  269  923  130   591 #>  [511,]   99  748   96  614  927  141  429  795  696   602 #>  [512,]  131  576  550  375  581  441  635  773  695   590 #>  [513,]  107  524  971    3  986  159  712  533  408   600 #>  [514,]  957  427  847  336   17  993  473  390  504   845 #>  [515,]   39  132  447  682  133  451  119  108  540   122 #>  [516,]    2  381  340  706  908  138  966   64  530   611 #>  [517,]   77  123  488  163  955  170  671  543  191   465 #>  [518,]  471  699  668  121  297  985  105  460  762   627 #>  [519,]  295  650  763  379  143  371  248  790  195    73 #>  [520,]  783  575   44  280  856  257  737  328   20   591 #>  [521,]  739   29   15   59  810  440  268  294  408   751 #>  [522,]  465  922  393  402  260  163  716  864  377   488 #>  [523,]  287  962  342  879  524  321  866  422  325    66 #>  [524,]  513  986  971  962  107  897  408  177  533   523 #>  [525,]  706  859  843  462  838  878  487  356  916    13 #>  [526,]  169  826  759  835  779  413  222  893  964   798 #>  [527,]  215  401  263  560  769  199  782  276  679    68 #>  [528,]  999  193  583  103  248  716  604  650  621   643 #>  [529,]  301  335  929  732  972  991  262  436  823   589 #>  [530,]   75  964  169  719  526  611  893  969  942   348 #>  [531,]  890  218  937  353  238  134  154  641  840    51 #>  [532,]  778  378  185  153  318  245  433  348  530   988 #>  [533,]  600  687  807  674  338  783   20  440  856   513 #>  [534,]  887  705   71  374  467  336  261  139  828   847 #>  [535,]   27  206  799  659  645  268   15  920  521   584 #>  [536,]  827  166  907  695  700  441  425  376  479   352 #>  [537,]  299  211  231  775  349  364  315  760  830   129 #>  [538,]  329  454  122  382  851  917  424  651  264    69 #>  [539,]  182  713  802  443   46  388  266  631  916   930 #>  [540,]  108  682  515  420  133   39  119  348  611    64 #>  [541,]  450  879  249  389   45  670  724  698  766   180 #>  [542,]   87  990  577  571  816  200  437  350  233   677 #>  [543,]   42  123  387  488  144   77   62  599  736   741 #>  [544,]  110  712  341  863  313  897  935  240  354   947 #>  [545,] 1000  661  731  673  357  803  647  194  721   377 #>  [546,]   46   58  388  896  421  808  930  881  223   572 #>  [547,]  900  809  818  314  209  956  395  736  934   681 #>  [548,]   99  511  214  205  927  748  892   48  614    96 #>  [549,]  124  902  862  725  933  814  636  141  637    11 #>  [550,]  576  581  512  131  603  375  124  609  419   456 #>  [551,]  567  818  244  547    3   12  482  239  369   681 #>  [552,]  780  354  282  712  237  313  671  822  159   465 #>  [553,]  910  235  100  624  364   92  416  846  738   585 #>  [554,]  734  842  137  595  740  118   40  103  895   621 #>  [555,]  128  164  733  997  728  940  770  882  500   424 #>  [556,]  849   82   16  664  993  989  355  112  347   297 #>  [557,]  782  730   37  867    9  302  401  978   60   769 #>  [558,]  956   35  631  266  580  633  142   89  517   306 #>  [559,]  344  841  791  643  300  604  343  649  379   253 #>  [560,]  215  769   56  863  401   53  186   83   16   276 #>  [561,]  979  469  885  276  632  265  932  635  255   863 #>  [562,]  409  117  798  826  412  278  251  346  312   942 #>  [563,]  853  300  195  841  101  392  222  813  695   945 #>  [564,]  707  974  967  918  741  176  938   42  123   955 #>  [565,]  132  383  498  397  412  451  515  566  111   447 #>  [566,]   30  652  311  117  412  845  961  957  312   212 #>  [567,]  492  369  482  551  818  787  404   80  726   848 #>  [568,]  961  189  586  904  697  634  833  426  324   192 #>  [569,]  958  679  664  849  199  963  417  905  610   969 #>  [570,]  406  825  285  883  202  149  289  116  457   353 #>  [571,]  607  437  162  990   87  542  986   23  292   177 #>  [572,]  731  397  382  277  995  454  498  264  281   421 #>  [573,]  309  232  428  722  386  383  881  242  904   565 #>  [574,]  377  913  788  992  449  616  393  665  357   402 #>  [575,]  520  704  737  328  591  219  923  280  783    68 #>  [576,]  131  550  512  836  850  590  581   94  609   126 #>  [577,]  266  306  816   89  633  990  808  437  580   666 #>  [578,]  744  646  510  865  472  658  923  608  201   286 #>  [579,]  653  948  694  702  240  304  814  347  275   398 #>  [580,]  633   89  306  246  992  282  816  886  574   869 #>  [581,]  603  550  576  512  810  411  716  260  124   131 #>  [582,]   81   57  303  710  456  116  168  419  813   647 #>  [583,]  193  604  528  643  103  999  938  380  176   621 #>  [584,]  319  799   85   47  535  721   27  925  206   446 #>  [585,]  684  360  416  662  877  198  129  823  589   911 #>  [586,]  697  189  961  324  634  702  568  715  579   796 #>  [587,]  212  221  305  324  326  764  805  983  672   148 #>  [588,]  618   79  718  396  601  648  374  217  825   887 #>  [589,]  877  823  335  467  662  156  360  463  414   684 #>  [590,]  126  836  850  131  576  635  709  473  512   241 #>  [591,]  737  352  376  469  479  286  472  441  520   885 #>  [592,]   60  297   16  730  355  401  394  121  762   867 #>  [593,]  417  169  183  779  915  719  969  893   17   384 #>  [594,]  636  509  496  485  991  463  504  928  124   113 #>  [595,]  338  687  257  785  783   44  280  533  600   689 #>  [596,]  767  813  168   90  296  770  759  464  945   210 #>  [597,]  350  438  233  723  952  444  748  214  927   892 #>  [598,]  777  478  118  301  621  288  137  750  613   895 #>  [599,]    6  237  115  780  488  411  979  465  922   354 #>  [600,]  533  687  440  807  674  338  613  513  595   897 #>  [601,]  217  648   55   86  267  921  290  374   19   729 #>  [602,]  928  636  844  429  795  113  304  496  943   765 #>  [603,]  581  194  550  419  803  661  810  637  609   260 #>  [604,]  583  999  380  528  103  791  621  193  842   559 #>  [605,]  972  262  911  129  198  335  463  684  502   360 #>  [606,]  800  824  946  973  660  199  190  996  958   912 #>  [607,]  571  162   12  980  437   87   23  244  542   990 #>  [608,]  638  201  812  811  173  871  680  914  658   578 #>  [609,] 1000  625  725  576  862  456  466  803  550   194 #>  [610,]  654  905  958  849  960  569   16  664  472   679 #>  [611,]  348  108   75  530  719  942  418  540  278    78 #>  [612,]  874  149  284  111  452  832  323  909  305   184 #>  [613,]  440  137  750  474  810  751  600  895  777   674 #>  [614,]  748  511  656  752   48  141  723  696  755    99 #>  [615,]  471  105  985  476  140  926  460  518    7   220 #>  [616,]  449  503  346  251  788  880  501  798  312   574 #>  [617,]  450  389   22  541  597  542  438   34  667   879 #>  [618,]  588   79  396  217  534  374  307  789  601   887 #>  [619,]  480  420  924  876  133  651  210  152  851   770 #>  [620,]  757  405  125  641  238  920  890   51  797   134 #>  [621,]  103  895  288  253  999  528  581   15  717   603 #>  [622,]  279  724   18  677  142  249  899  120  162   935 #>  [623,]  361  506  880  209  848  501  693  158   13   809 #>  [624,]  100  553  766  416   34  692  315  364  699   910 #>  [625,]  725  913  862  609  255  377  665   94  992  1000 #>  [626,]  372  914  458  273  686  203  683  871  978   782 #>  [627,]  146  668  996  471  518    7  985  683   36   753 #>  [628,]   71  998  708  261  452   88  909  220  612   326 #>  [629,]  978  852    4  501   37  247  368  683  373   868 #>  [630,]  461  350  385  272  656  444  990  292  577   723 #>  [631,]  331  191  558   35  407  819  170  580  916   691 #>  [632,]  276  885   67  265  905  175  469  561  888   963 #>  [633,]  580  306   89  246  816  266  443  577  869   713 #>  [634,]   54  854  586   45  698  697  948  494  568   653 #>  [635,]  836  885  376  469  131  441  590  695  512   265 #>  [636,]  928  485  496  504  594  113  602   11  509   765 #>  [637,]  446  752  194  603  669  862  549   47  277   725 #>  [638,]  608  201  173  871  914  686  812  811  908   658 #>  [639,]  481  695  441  352  241  376  512  907  150   773 #>  [640,]  820  259  689  127  325  239  857   40  474   137 #>  [641,]  405  920  134  714  238  840  620   85  531   353 #>  [642,]  742  959  904  868   61  505  722  345  178   192 #>  [643,]  343  298  344  583  528  649  254  559  193   379 #>  [644,]   72  291  784  828  459  534  705  245  307    71 #>  [645,]  659  268  535   27   40  938  799   15  583   193 #>  [646,]  510  744  578  865  472  923  286  658  975   608 #>  [647,]  710   69  545   57  194  649  419  277  254   661 #>  [648,]  601  290  136  921  217  729   55  101  374   267 #>  [649,]  661  254  379  803  647  344  710  419  248   643 #>  [650,]  519  248  528  999  143  379  193  763  790   295 #>  [651,]  851  480  210  133  619  538  420  924  454   382 #>  [652,]  566  398  845  715  110  311  412  957  814   117 #>  [653,]  948  694  579  347  275  112  702   54  398   993 #>  [654,]  960  610  270  690  912  958  663  905  472   271 #>  [655,]  171  805  243  320  873  983  234   48  548   324 #>  [656,]  614  902  761  748  943  637  511  752  549    99 #>  [657,]  136  499  400  648  300  330  106  791  685   921 #>  [658,]  923  865  228  201   68  578  527  932  871   806 #>  [659,]   27  645  535  799  268   15  583  895  206    40 #>  [660,]  973  996  606  946  686  190  871   36  273   486 #>  [661,]  803  260  545  649 1000  673  790  716  864   194 #>  [662,]  360  198  113   24  877  589  274  129  891   928 #>  [663,]  960  157  269  270  654  130  114  414  690   472 #>  [664,]  989  958  849  569  556  610  847  336  467   679 #>  [665,]  377  466  451  826  913  673  447  625  255   357 #>  [666,]  477  266  577  977  334  407  170  781  558   306 #>  [667,]  879  321   22  422  256  310  389  325  174   342 #>  [668,]   36  518  121  973  946  867  627  373  146   683 #>  [669,]  858  277  772  637   47  752  446  194  995   382 #>  [670,]  341  249   54  180  724  240  541  694  698   743 #>  [671,]   29  408   59  552  163  282  739  237  294   780 #>  [672,]  284  326  305  874  587  612  111  212  221   805 #>  [673,]  466  402  377  864  790  357   84  260  803   545 #>  [674,]  807  897  533  493  751  783  600  186  151   502 #>  [675,]  507  982  840  937  431  353  951  703   57   218 #>  [676,]  188   32  145  317  762  910  442  355   28   912 #>  [677,]  200  142  724  931   87  622  249  180  279    89 #>  [678,]   63  844  815  304  943  952  761  252  310   602 #>  [679,]  963  569  175  969  936  417  199  849  893   263 #>  [680,]   76  812  811  608   10  727  425  286  392   638 #>  [681,]  144   31  158   42  711   62  543  736  934   209 #>  [682,]   39  119  515  540   95  424   64  122  447   917 #>  [683,]  146  372  901  978  629  203  368  384   91   936 #>  [684,]  129  823  585  360  877  198  335  605  262   911 #>  [685,]  400  339  734  740  118  365  481  842  907   554 #>  [686,]  914  273  871  201  263  638  888  949  908   660 #>  [687,]  600  533  338  807  595    6  440   20  783   257 #>  [688,]  954  484  738  423  846   92  866  342  287   435 #>  [689,]  338  793  595  857  239  533  259  600  687   783 #>  [690,]  912    1  654  958  610  960  800  663  824   270 #>  [691,]  165  331  407  819    5   14  334   73  170   357 #>  [692,]   82  275  230  948  699  556  105  476  653   140 #>  [693,]  506  880  932  361  561  623  265  138  949    67 #>  [694,]  653  347  112  948  579   54  240  275  398   341 #>  [695,]  441  639  376  481  352  635  512  536  907   479 #>  [696,]  141  933  715  814  723  952  796  311  886   652 #>  [697,]  796  586  698  715  634  961  568  189  952   579 #>  [698,]  697  450  634  796  670  252  541  304   45   586 #>  [699,]  518  121  297  471  460  867   82  692  762   140 #>  [700,]  536  827  166  380  425  994  650  999  741   391 #>  [701,]   25  861  274  289  756  795  202   98   11   429 #>  [702,]  948  275  579  653  586  694   96  304  148   634 #>  [703,]  453  840  714  135   57   85   69  507  710   669 #>  [704,]   68  179  575  228  923  806  394   20  856   520 #>  [705,]   71  220  828  534  459  336  105  985  475   989 #>  [706,]  859  487   26  340   13   64  138  916  525   878 #>  [707,]  564  967  918  974  741  176  938  380   42   955 #>  [708,]  261  149  326  628  805  887  612  570  672   284 #>  [709,]  779  963  473  590  679  905  126  836  569   175 #>  [710,]  647   69   57  582  649  419   81  545  194   254 #>  [711,]  144  227   62   31  681  158  328   42  491   923 #>  [712,]  544  971  552  354  313  947  282  897  899   935 #>  [713,]  182  443  539  633  246  266  388  558   89   816 #>  [714,]  703  840   85  453  641  134   57  303  135   419 #>  [715,]  796  696  697  652  586  141  869  961  240   341 #>  [716,]  260  922  864  411  522  803  661  581  528     6 #>  [717,]  411   59    6  294  895  440  103  115  810   938 #>  [718,]    8  588  729   88  618  648  601  267  290   870 #>  [719,]   75  183  942  278  169  593   91  417  562   530 #>  [720,]  491  328  219  338   42  239  144  711  967   741 #>  [721,]  446  194   47  545  277 1000  637  647  995   264 #>  [722,]  386  904   61  309  959  573  242  359  792   565 #>  [723,]  233  696  748  350  952  141  796  715  614   816 #>  [724,]  249  622  677  200  180  670   87  541  142   341 #>  [725,]  862  933  625  549  609   94 1000  814  752   124 #>  [726,]  404  369  968  302  567   66   18  161    9   787 #>  [727,]   10  392  919  286  283  425  448  333  479    67 #>  [728,]  195  882  216  555  733  164  197  128  945   295 #>  [729,]  290  464  296  945  804  160  648  152  168   101 #>  [730,]  867   60  557  121  373  297  430  592   37   401 #>  [731,]  545  572 1000  357  397  277  992  454  377   382 #>  [732,]  991  436  797  929  529  335  594   98  358   589 #>  [733,]  500  197  997  555  128  164  940  770  728   195 #>  [734,]  740  554  118  685  842  339  365  595  478   785 #>  [735,]  802  334  977  104  691  331   14  407  768   170 #>  [736,]  158  209   13  123  395  543   62  809  387    77 #>  [737,]  591  352  575  520   44  286  785  376  269   479 #>  [738,]  846  954  688  484  423   92  939  911  866   605 #>  [739,]  521   29  440  751  408   59  810  294  671    15 #>  [740,]  734  118  365  339  478  554  685  400  598   785 #>  [741,]  967  707   42  543  176  564  387  918  123   974 #>  [742,]  868  642  345  178  852  505   38  629  959   904 #>  [743,]  935  186   18  432  279    9  962  435  670   249 #>  [744,]  578  646  510  865  472  286  114  130  269   690 #>  [745,]  602  258  205  765   99  844   11  274   96   429 #>  [746,]  776  505  458  372   36  626  683  203  146   627 #>  [747,]   72  784  245  946  800  606  996  153  185   660 #>  [748,]  614  511  723  141  696  656  952  927   96    99 #>  [749,]  789  414  157  823  156  139  330  529  270   217 #>  [750,]  613  509  943  125  810  124  474  594  751   902 #>  [751,]  897  408  440  739  810  674   29  613  124   521 #>  [752,]  637  446  933  862  725  995  277  614  669    47 #>  [753,]  384  190  475  996  185  183  417  985  771   593 #>  [754,]  486  776   36  973  660  369  557  965  746   787 #>  [755,]  925   48  385  995  614  281   47  337  669   320 #>  [756,]  202  457  396  861  701   98  258  883  289   274 #>  [757,]  436  211  620  797  732  125  929  478  765   991 #>  [758,]  908  209  158  623  787  811  638   13  608    31 #>  [759,]  526  410  222  169  853  333  813  779  596   826 #>  [760,]  258  436  929  335  732  129  789  662  589   991 #>  [761,]  943  844  902  656  678  602  750  952  304   815 #>  [762,]  355  188  297   16  121  556  592  676  989   849 #>  [763,]   73  371  790  143  519  379  181  295    5   650 #>  [764,]  336  476  230   17  220  514  427  874  587   909 #>  [765,]  113  928  636  602  929  594  463  198  509   335 #>  [766,]  389  541  879   45  962  432  310  743  670   624 #>  [767,]  596  813  413   90  128   84  945  759  770   981 #>  [768,]  802   14  855  468  930   26  165    5  691   434 #>  [769,]   37   60  401   53  560   56  430  215    9   935 #>  [770,]  152  168  596  210  128  924  767  500  296   997 #>  [771,]  293  909  452  915  184  183  926   17  475   832 #>  [772,]  669  858  337  453  308  851  703  382  840    57 #>  [773,]  257   44  441  777  807  115  376  512  131   785 #>  [774,]  395  314  900  191  809  736  181   13  547   934 #>  [775,]  830  299  127  423  474  256  422  231  954   738 #>  [776,]  978  746   36  626   38  629  683  505  372   367 #>  [777,]  301  598  509  773  257  785  972   44  463   118 #>  [778,]  532  318  208  245  433   88  185  884  988   729 #>  [779,]  473  709  593  169  963  526  957  390  417   826 #>  [780,]  237  354  552  599  465    6  313  979  488   115 #>  [781,]  407  306  446  995  808  334  633  580  752   721 #>  [782,]  557   37  401  527  978  730  769  871  867   199 #>  [783,]  520  280  807  856  257   44  338   20  533   674 #>  [784,]  459  475  245  985  185   72  644  705   71   828 #>  [785,]   44  257  118  280  907  520  773  777  737   783 #>  [786,]  788  487  878  119   64  616  346  418  383   574 #>  [787,]  557  486    4  658  369  782  848  201  871   758 #>  [788,]  786  574  616  346  449  487  665   64  992   377 #>  [789,]  749  414  156  823  139  358   79  860  396   760 #>  [790,]  763  673  864   73  143  402   84  661  803   357 #>  [791,]  841  300  559  344  253  999  834  604  248   528 #>  [792,]  293  926    7  359   61   78  722  221  771   959 #>  [793,]  338  239  533    3  857  689  866  107  600    20 #>  [794,]  403  881  421  337  281  546  896  755  930   925 #>  [795,]  429   25  602  504  496  274  928   11  636   861 #>  [796,]  715  697  952  180  698  696  200  341  586   670 #>  [797,]  732  991  436  327   51  594  289   11  496   929 #>  [798,]  251  893  346  562  949  138  826   91  616   880 #>  [799,]   27  535  298  659  645  316  268  584  643   721 #>  [800,]  824  606  912  946  958  690  199    1  973   569 #>  [801,]  235  415  553  100  624  416  364  910  965   699 #>  [802,]  768  930   14  855   46  539  691  331  165   916 #>  [803,]  661  260  716  864  673  545 1000  790  649   248 #>  [804,]  464  296  406  152  323  168  116  290  210   976 #>  [805,]  234  587  672  326  655  212  320  171  708   148 #>  [806,]  228  394   68  302  179  704  145  188  939   215 #>  [807,]  783  856  674  533  257  115   20  687  773   600 #>  [808,]  577  306  816  781  385  546  246  266  633   233 #>  [809,]  395  314   13  736  547  623  859  209   35   838 #>  [810,]  124   15  739  895  440  581  521  717  751   603 #>  [811,]  812  608  680   31  638  102   76  158  711   758 #>  [812,]  811  680  608  638   76   31  173  711  227   646 #>  [813,]  596  767  410   97  168  759   84  413  853    90 #>  [814,]  141  240  933  579  696  549  862  429   94   725 #>  [815,]  678   63  292  321  177  180  986  952  751   990 #>  [816,]   89  306  246  633  233  580  577  931  869   200 #>  [817,]  953  236  207  213  258  760  944  416  585   439 #>  [818,]  956  482  159  822  492   80    3  107  517   899 #>  [819,]  393  331  165  191  402  691  522  181  357   465 #>  [820,]   23  272  177  292  521  440   40  259  739   408 #>  [821,]  187  339   93  365  740  734  685  219  118   490 #>  [822,]  159   80  492  552  482  107  780  971  354   899 #>  [823,]  414  156  877  589  684  139  157  335  960   749 #>  [824,]  800  606  946  199  912  958  569  973  690   190 #>  [825,]  457  570  218  202  353  154  883  756  507   937 #>  [826,]  526  409  562  665  451  412  447  798  779   169 #>  [827,]  166  536  907  700  352  695  425  441  481   376 #>  [828,]  105  705  459  985  644  534  784  989   71   220 #>  [829,]  238  620  196  405  890  641  531  757  920   470 #>  [830,]  231  605  972  775  211  301  129  478  262   335 #>  [831,]  178  155  642   38  839  742  508  204   33   854 #>  [832,]  184  452  915  390  322  278  612  874  210   976 #>  [833,]  226  460  140  494  192  568  634  426  901   221 #>  [834,]  375  300  950  445  101  889  253  791  841   410 #>  [835,]  222  919   67  333  964  265  526  413  759   853 #>  [836,]  635  590  850  255  576  131  126  410  473   512 #>  [837,]  502  151  493   24  894  360  463   83  941   911 #>  [838,]  878  916  462  859   35  224  809  525  487   314 #>  [839,]  155  426  189  983  324  568  242  833  634   586 #>  [840,]  703  714  453  507  134  675  353   57  303   937 #>  [841,]  791  300  344  559  563  834  253  248  999   379 #>  [842,]  554  734  604  288  583  621  103  659  380   137 #>  [843,]  356  525  706   95  381  487    2  462  516   859 #>  [844,]  304  678  602  943   63  761  765  252  745   928 #>  [845,]  117  957  427  398  652   30  412  473  993   566 #>  [846,]  738  954  688  484   92  423  939  910  553   911 #>  [847,]  336  514  467   17  664  363  230  709  390   993 #>  [848,]    4  492  501  361  899  120  623  247  880    80 #>  [849,]  556   16  664  679  569  963  610  958  199   401 #>  [850,]  836  590  473  576   94  126  255  131  779    83 #>  [851,]  651  538   81  382  210  454  329  116   69   431 #>  [852,]  247  987    4  868  629  501  848  120  345   224 #>  [853,]  222   90  945  333  919  759  101  813  835   563 #>  [854,]   45  634  367   54  494  670  724  698  541   568 #>  [855,]  421  930   14   46  434  388  881  572  264   768 #>  [856,]   20  807  783  520  979  533  257  115  687    44 #>  [857,]  239  793  689  338  259  287  219    3  720   595 #>  [858,]  285  669  984  311  772  234  116  976  277   111 #>  [859,]  706  487  916   26  878   13  838  395  809   138 #>  [860,]  358  470   79  789  749  732  396  436  211   529 #>  [861,]   98  274   25  496  701  504   11  984  289   202 #>  [862,]  725  933  625  549  609   94  814  752  124  1000 #>  [863,]   83  544  313  560  947  110   56  354   53   186 #>  [864,]  922  260  402  673  716  466  790   97  803   522 #>  [865,]  510  578  923  646  658  744  228  472   68   575 #>  [866,]  435  962  484  432  186  179  287   66  954   423 #>  [867,]  121  730  373  297   60  430  367  557  494   668 #>  [868,]  345  742  852  629  878  501  503  616  505   312 #>  [869,]  992  246  223  715  961  652   89  397  816   580 #>  [870,]  160  903  489  500  898  729  733  945  728   296 #>  [871,]  201  914  686  638  486  263  782  608  273   527 #>  [872,]  369  726  490  923  658  228  551  227  704   806 #>  [873,]  171  672  805  326  655  229  284  708  587   305 #>  [874,]  284  111  305  612  909  915  322  212  427    17 #>  [875,]  316  343  799  643  659   27  583  298  559   604 #>  [876,]  619  480  924  109  420  370  133  651  538   851 #>  [877,]  589  823  467  156  360  335  662  684  414   463 #>  [878,]  487  838  786  859  916  788  868  616  706   503 #>  [879,]  389  541  667  962  321  310  450  249  523   766 #>  [880,]  361  506  501  503  616  947  449  251  693   798 #>  [881,]  421  403  794  855  930  572  232   46  388   397 #>  [882,]  216  728   90  164  195  413  128  945  555   964 #>  [883,]  202  889  406  984  285  363  323   49  861   456 #>  [884,]  452  832   88  184  804  464  420  152  210   619 #>  [885,]  632  276  469  635  561  265   67  479  376   979 #>  [886,]  282  696   89  180  715  408  933  580  306   952 #>  [887,]  534  261  323   71  149  756  705  909  396   363 #>  [888,]  263  175  969  949  632  893  679   67  914   276 #>  [889,]  883  363   49  375  456  445  101  834  984   202 #>  [890,]  218  470  531  154  106  327   51  134  797   937 #>  [891,]  198  941  911  129  315  662   24  360  605   310 #>  [892,]  438  927  548  205  597  147  214   96  748    52 #>  [893,]  969  417  175  798  936  169  949  679  251   593 #>  [894,]   16  837   28  151  502   83  215  360  355   560 #>  [895,]  621  103   15  717  810  268  137  411  581   294 #>  [896,]  546  421  930   46  855  281  925   14  388   434 #>  [897,]  751  544  712  674  282  408  313  237  354    94 #>  [898,]  903  870  497  136  160  489  267  648  657   729 #>  [899,]   80  492  159  279  482  971  712  142  935   947 #>  [900,]  547  774  314  395  809  736  681  956  191   974 #>  [901,]  368  146  384  192  226  183  683  140  936   476 #>  [902,]  549  124  943  656  761  810  141  862  637   933 #>  [903,]  489  300  136  841  160  898  870  791  559   500 #>  [904,]  961  242  722  568  189  223  426  428   61   324 #>  [905,]  610  632  175  709  679   67  569  963  276   885 #>  [906,]  307  439  317   32  828  676  139  585  912   989 #>  [907,]  827  441   44  166  536  481  257  695  785   376 #>  [908,]  914  758  686  638    2  949  966  506  516   626 #>  [909,]  915  452  874   17  220  771  336   71  323   612 #>  [910,]  100   92  676  553  145  188  762   28  592   484 #>  [911,]  605  198  129  891  941  972  360  262  837   502 #>  [912,]  690  958  800  824    1  654  610  960  664   606 #>  [913,]  377  625  255  574  665  402  449  465  522   466 #>  [914,]  686  871  263  273  949  201  888  908  638   626 #>  [915,]   17  390  909  832  593  427  874  322  184   452 #>  [916,]  859  878  838  487  462   35   26  395  706   191 #>  [917,]  424  329  122  940  538  997  454  109  264   434 #>  [918,]  176  707  938  955  193  564  741  583  380   967 #>  [919,]  222  835  333  964  727  853  392   67   10   433 #>  [920,]  206   27  641  405  535   15  620  659  656   714 #>  [921,]  330   86  217  150   55  445  374   19  241   270 #>  [922,]  864  393  522  402  716  260  465  488  599   673 #>  [923,]  658  865  228   68  704  575  932  510  646   578 #>  [924,]  619  480  770  152  210  420  876  851  651   133 #>  [925,]  995  755   47  281  319  385  446  781  752   584 #>  [926,]    7  293  771  792  985  220  615  475  476   326 #>  [927,]   96  983  511  748   99  148  548  697  952   304 #>  [928,]  113  485  636  504  602   24  496  463  274   765 #>  [929,]  335  436  732  991  129  529  765  972  589   463 #>  [930,]  855  421   46  388   14  881  896  546  434   802 #>  [931,]  200  677  345  178  816   89   87  724  796   246 #>  [932,]  506  561  693  632  469  265   62  361  276   158 #>  [933,]  862  725  696  141  814  752  549  311  625   652 #>  [934,]   31  681  227  158  900  209  144  547  711   811 #>  [935,]  544  279  743  712  899  110  341   56  947   120 #>  [936,]  969  679  417  893  199  384  263  963   91   175 #>  [937,]  218  507  154  675  531  982  106  840  303   890 #>  [938,]  176  193   40  918  103  717  268   59  895   411 #>  [939,]  484   28   92  894  262  954  394  837  911   866 #>  [940,]  424  917  122  164  997  981  329  128  733    73 #>  [941,]  891  432  310  911  837  502   24  493  151   198 #>  [942,]   91  418  719   75  562  183  278  359  798   893 #>  [943,]  761  902  844  602  750  678  636  765  124   549 #>  [944,]  236  817  953  537  258  205  760  213  745   349 #>  [945,]   90  853  296  464  596  767  813  160  128   168 #>  [946,]  973  824  996  606  800  660  668  190  199    36 #>  [947,]  354  313   56  712  863  361  880  544  780   503 #>  [948,]  653  275  702  579  694  347   54  112   82   398 #>  [949,]  263  893  888  506  798  969  914  175  273   880 #>  [950,]  303  327  834  106  253  375  154  419  288   582 #>  [951,]  431   70  982  924  851  675   81  116  152   770 #>  [952,]  796  141  696  723   63  304  715  678  180   886 #>  [953,]  817  207  236  258  213  760  944  701  756   148 #>  [954,]  738  423  484  688   92  939  846  866  911   605 #>  [955,]   77  176  488  123  918  170  517  193  163   938 #>  [956,]  818  558   35  517  159   77   80  191  631   492 #>  [957,]  427  845  514  117  473  993   17   30  779   322 #>  [958,]  569  664  610  849  679  912  905  824  199   654 #>  [959,]   61  359  418  458  505  192  942  372   91   722 #>  [960,]  654  610  663  269   28  270  894  414  823   690 #>  [961,]  568  189  586  904  324  566  715  869  697   652 #>  [962,]  432  866  523  524  879  435  743  310  287    66 #>  [963,]  679  709  175  276  779  569  969  417  893   849 #>  [964,]  222  919  835  530  433  526  333  169  853    67 #>  [965,]  367  161   34  867  699   36  121  460  668   776 #>  [966,]  102  172    2  908  516  811  638  608  758   686 #>  [967,]  741  707  564  974   42  918  543  681  176   720 #>  [968,]   66  435  179   18  302    9  866  743  806   592 #>  [969,]  893  417  175  936  679  888  263  593  963   169 #>  [970,]   95  356  611  540  386  119  108  418  682   348 #>  [971,]  107  712  513  159   80  899  482  822  524   552 #>  [972,]  262  605  335  301  463  129  911  198  929   509 #>  [973,]  660  946  996   36  606  668  824  190  782   199 #>  [974,]  564  707  967  741  918   42  123  900  543   681 #>  [975,]  455   74  646  744  495  510  680  578  283   114 #>  [976,]  390  456  322  323  116  285  984   81  210   832 #>  [977,]  666  334  781  584  407  319  477  896  170   799 #>  [978,]  629  373  683  782  367   37  867  557  146   494 #>  [979,]  561  115  599  354  780  237    6  469  885   635 #>  [980,]   12  244  607  571  162  259   50  287  523    23 #>  [981,]  357   84  673  413  164  790   73  466  447   665 #>  [982,]  507  675  431  489   81  116  937  951   57   582 #>  [983,]  324  927   96  586  189  587  697  702  148   243 #>  [984,]  285  456  883  861  496   25   11   49   98   976 #>  [985,]  475  471  105  615  705  784  459  753  476   220 #>  [986,]  524  437  180  990  177  513  408  142  249   292 #>  [987,]  852  247  224   38   33  120    4  178  622   279 #>  [988,]  318  271   19  333   55  759  222  853  101   150 #>  [989,]  664  556  849  958   82  355  569  105  847   336 #>  [990,]  437  177  292  986   23  408  272  577  815   180 #>  [991,]  732  797  594  929   98  436   49  335  529   496 #>  [992,]  869  574  625  913  377  397  665  580  731   449 #>  [993,]  112  347  556  514  957  398  845   83  427    82 #>  [994,]  700  519  425  295  650  387  332  143  741   536 #>  [995,]   47  281  446  925  277  572  752  721  637   264 #>  [996,]  190  946  973  660  753  203  627  606  384   273 #>  [997,]  733  940  555  500  424  917  128  770  122   329 #>  [998,]   88  628  459  185   71  784  771  452  884   475 #>  [999,]  528  248  103  604  716  650  193  621  253   791 #> [1000,]  545  609  194  731  661  803  673  625  725   377 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.50680119 0.6454476 0.8696443 0.9047671 0.9065816 0.9279152 0.9303131 #>    [2,] 0.36157721 0.6998046 0.7770222 0.8060881 0.8902528 0.8992172 0.9809477 #>    [3,] 0.38932358 0.5686263 0.6300410 0.6492836 0.6616188 0.6933960 0.7080395 #>    [4,] 0.33064825 0.4782759 0.5111896 0.5458224 0.5474323 0.6221450 0.6887457 #>    [5,] 0.39380640 0.4366601 0.6075002 0.6492945 0.6575900 0.7541422 0.7752569 #>    [6,] 0.19431981 0.2234631 0.2909840 0.3152815 0.4519592 0.4575262 0.5121058 #>    [7,] 0.21623136 0.7861065 0.8403350 0.8475425 0.8503241 0.8882149 0.9054549 #>    [8,] 1.01888170 1.2893073 1.4324441 1.6227147 1.7527148 1.7604322 1.7756169 #>    [9,] 0.48813774 0.5804017 0.5805403 0.5995374 0.6125627 0.6226196 0.6646320 #>   [10,] 0.24122135 0.4145009 0.4722767 0.5729407 0.5844678 0.5960184 0.6197249 #>   [11,] 0.29077197 0.5097199 0.5320299 0.5339098 0.5458907 0.6076134 0.6156203 #>   [12,] 0.65725472 0.7572631 0.9213428 1.0420603 1.3030471 1.3059410 1.3719468 #>   [13,] 0.58720891 0.6023708 0.6551671 0.6569271 0.6906686 0.8123380 0.8295170 #>   [14,] 0.53654711 0.6085013 0.6690424 0.6775714 0.7541422 0.8126975 0.8216656 #>   [15,] 0.40170178 0.4122098 0.5212235 0.5519525 0.6375649 0.6899162 0.6920074 #>   [16,] 0.38854271 0.3945620 0.4569821 0.4811698 0.4987924 0.5135839 0.5828719 #>   [17,] 0.30146564 0.3369482 0.4811004 0.5128234 0.5374557 0.5464835 0.5540581 #>   [18,] 0.46342827 0.5707459 0.5804017 0.6275993 0.6326245 0.6365848 0.6893253 #>   [19,] 0.24065734 0.3374590 0.3965944 0.5047649 0.5409021 0.5879333 0.6023376 #>   [20,] 0.17734483 0.5143762 0.5941205 0.6068068 0.6420483 0.6584885 0.6712434 #>   [21,] 1.02984217 1.1003651 1.1645255 1.2241618 1.2654615 1.2834574 1.3170656 #>   [22,] 0.64091773 0.8264042 0.9477724 0.9831172 1.0842547 1.1164151 1.1927312 #>   [23,] 0.44595147 0.5244654 0.6493512 0.6676636 0.6946292 0.7241968 0.7261365 #>   [24,] 0.23431625 0.2996038 0.3016651 0.3121522 0.3485738 0.3654141 0.4614916 #>   [25,] 0.33293858 0.3784364 0.3889542 0.4095435 0.4294443 0.5220478 0.5458907 #>   [26,] 0.36987784 0.5172285 0.5314765 0.5653779 0.6226558 0.7564069 0.7649292 #>   [27,] 0.34300571 0.4451346 0.5756959 0.6970150 0.7129759 0.7157391 0.7235320 #>   [28,] 0.49171060 0.5142012 0.5522937 0.6308159 0.6342899 0.6737530 0.7144565 #>   [29,] 0.28039818 0.3367446 0.3709018 0.4436136 0.4958902 0.5112100 0.6207724 #>   [30,] 0.36453580 0.3856262 0.4312045 0.4470927 0.5039235 0.5066583 0.5380081 #>   [31,] 0.58571277 0.6307546 0.6361826 0.6573239 0.6667712 0.7688061 0.7722035 #>   [32,] 0.57813750 0.6772125 0.8761738 0.9149248 1.0420522 1.0507154 1.0861968 #>   [33,] 0.76645401 0.9005363 0.9810414 1.0370352 1.2070837 1.2340793 1.4041602 #>   [34,] 0.83976660 1.0668558 1.1021255 1.1038369 1.1134502 1.1157602 1.1884566 #>   [35,] 0.67436495 0.6855680 0.7060499 0.7402540 0.7403431 0.7796401 0.8323001 #>   [36,] 0.51440433 0.6621927 0.8723783 0.8743244 0.8803681 0.9082673 0.9112544 #>   [37,] 0.23926139 0.4736433 0.5051539 0.5348132 0.5607807 0.5805403 0.6159581 #>   [38,] 0.59711836 0.6957919 0.7233977 0.7882750 0.8912572 0.9005363 0.9662288 #>   [39,] 0.35009156 0.4255700 0.5073060 0.5713954 0.6370568 0.6567701 0.6705419 #>   [40,] 0.56847713 0.7234683 0.7334305 0.7609786 0.7747716 0.8292034 0.8314975 #>   [41,] 1.05847657 1.6055084 1.7004844 1.7255250 1.7834529 1.8568557 1.8864748 #>   [42,] 0.25733196 0.4935336 0.5055725 0.6118236 0.7012896 0.7099501 0.7377199 #>   [43,] 0.63044900 1.0987422 1.4326142 1.5160734 1.5668631 1.5939439 1.6328339 #>   [44,] 0.21842711 0.4130215 0.4151486 0.4213785 0.4907018 0.5206428 0.5574878 #>   [45,] 0.39034112 0.6357607 0.6432224 0.6993851 0.7199301 0.7801432 0.7890670 #>   [46,] 0.25704914 0.5281116 0.6300784 0.6354636 0.6578430 0.8611414 0.8846836 #>   [47,] 0.35191575 0.4208021 0.4893253 0.5954894 0.6157541 0.6430817 0.6901765 #>   [48,] 0.56508706 0.6211005 0.7122938 0.7215604 0.8485050 0.8761426 0.9008955 #>   [49,] 0.44678865 0.4652874 0.5174984 0.5438666 0.5456847 0.6116315 0.6407832 #>   [50,] 0.63044900 1.3568321 1.4850679 1.5146813 1.5635032 1.5754648 1.5866030 #>   [51,] 0.65832546 0.7224054 0.7320866 0.7959399 0.8970974 0.9116926 0.9332075 #>   [52,] 0.72494450 1.0676047 1.0822642 1.1888109 1.2177764 1.2880005 1.3058974 #>   [53,] 0.40941904 0.5348132 0.5486639 0.5756093 0.5800134 0.5912367 0.6042452 #>   [54,] 0.48131098 0.4920011 0.5272656 0.5279363 0.5281964 0.5530539 0.5618269 #>   [55,] 0.33745900 0.4150712 0.4169526 0.5292109 0.5503959 0.5594635 0.5815361 #>   [56,] 0.45128733 0.4587061 0.5408768 0.5444548 0.6065211 0.6101289 0.6153344 #>   [57,] 0.45722960 0.4950876 0.5460155 0.5608967 0.5803699 0.5812295 0.6454952 #>   [58,] 0.67271688 1.1955420 1.2057572 1.2543234 1.2689641 1.3154006 1.3789541 #>   [59,] 0.33674460 0.4495252 0.4537767 0.4644731 0.5186172 0.5221502 0.5677707 #>   [60,] 0.39802174 0.3993467 0.4041870 0.4447704 0.4736433 0.5211117 0.5673821 #>   [61,] 0.37511379 0.4359918 0.4476238 0.6390517 0.6932301 0.7396366 0.7815226 #>   [62,] 0.46560187 0.4802745 0.5006597 0.6523067 0.6546358 0.6763189 0.7047488 #>   [63,] 0.39041162 0.4486731 0.5243686 0.5919143 0.6039846 0.6543379 0.6721514 #>   [64,] 0.50784390 0.5257820 0.5653779 0.6088658 0.6288734 0.6370568 0.6417607 #>   [65,] 0.98283547 1.1469693 1.3000707 1.3075204 1.4021326 1.4819081 1.5020787 #>   [66,] 0.46240018 0.4702277 0.6365848 0.7050748 0.7224518 0.7333094 0.8038191 #>   [67,] 0.23030971 0.3366966 0.4584963 0.4905638 0.5052638 0.5447132 0.5652550 #>   [68,] 0.40002026 0.4200247 0.4423688 0.5248875 0.5413201 0.5518302 0.6218226 #>   [69,] 0.31141246 0.3612923 0.6454952 0.7079288 0.7107260 0.7341640 0.7493031 #>   [70,] 0.78404985 1.0032029 1.0288500 1.0839102 1.1049231 1.1400308 1.1448726 #>   [71,] 0.48947605 0.4973874 0.5199251 0.6462290 0.7182087 0.7203494 0.8140225 #>   [72,] 0.59413972 0.8177607 0.8622578 1.0574186 1.1336472 1.1405774 1.1795986 #>   [73,] 0.28146387 0.3133288 0.3938064 0.4610837 0.6108476 0.6373161 0.6444586 #>   [74,] 0.52735666 0.5915302 0.8404788 0.9021871 1.0002124 1.0020756 1.0322842 #>   [75,] 0.17429596 0.4424163 0.4961861 0.5428428 0.5687016 0.5831062 0.6187262 #>   [76,] 0.48052215 0.7888237 0.8013460 0.8579898 1.0519417 1.0888577 1.1168188 #>   [77,] 0.27718187 0.3473741 0.4582816 0.4686727 0.6424083 0.6430101 0.6876777 #>   [78,] 0.71255954 0.7351016 0.7387364 0.7436089 0.7485508 0.7861507 0.9097483 #>   [79,] 0.87326955 0.8748506 0.8952869 0.9514066 0.9728676 1.0682227 1.1061666 #>   [80,] 0.22002521 0.2336808 0.2494953 0.2670360 0.4465556 0.4849038 0.5329656 #>   [81,] 0.25659797 0.4210488 0.4928615 0.4988896 0.5803699 0.6292891 0.6997401 #>   [82,] 0.44581138 0.4684639 0.5270232 0.6137656 0.6218652 0.6383023 0.6396275 #>   [83,] 0.42692727 0.4435437 0.4616322 0.5618534 0.5671095 0.5722876 0.5750226 #>   [84,] 0.34819162 0.4118910 0.4151716 0.4289395 0.4736869 0.5188418 0.5588887 #>   [85,] 0.57930380 0.6374033 0.6676536 0.9326445 0.9352589 0.9579075 0.9685865 #>   [86,] 0.39288379 0.4169526 0.4343940 0.5047649 0.5149382 0.5507386 0.5515828 #>   [87,] 0.57236816 0.6131370 0.6457617 0.6728320 0.7443602 0.8011893 0.8111068 #>   [88,] 0.78462273 0.9004177 1.0775934 1.0777378 1.2241618 1.2548814 1.2893073 #>   [89,] 0.35580663 0.3711903 0.3854665 0.4122823 0.5089432 0.6738045 0.7187821 #>   [90,] 0.33850101 0.4554039 0.4836203 0.5454009 0.6518735 0.6554080 0.6595949 #>   [91,] 0.28426960 0.5216025 0.5308442 0.5643923 0.5687016 0.5812476 0.5918861 #>   [92,] 0.45113498 0.6498934 0.6774372 0.6878421 0.7034365 0.7449783 0.7871065 #>   [93,] 0.82286181 0.8327620 0.8708180 0.9227065 0.9947105 1.0659732 1.1069389 #>   [94,] 0.47216791 0.5333079 0.5543932 0.5613973 0.5654411 0.5662931 0.5860900 #>   [95,] 0.73947237 0.7491395 0.7697766 0.8848823 1.0009057 1.0564122 1.0586022 #>   [96,] 0.38802136 0.5041877 0.6318846 0.6743469 0.6861735 0.6984461 0.7037674 #>   [97,] 0.38965108 0.4002203 0.4151716 0.4556350 0.5301864 0.5739423 0.5755439 #>   [98,] 0.28196509 0.4467887 0.4670919 0.4806393 0.4922302 0.5430612 0.6149903 #>   [99,] 0.37045458 0.6984461 0.7823914 0.7870600 0.8129191 0.8135078 0.8145405 #>  [100,] 0.64710423 0.8508442 0.9115902 0.9202747 0.9598800 0.9870840 0.9996619 #>  [101,] 0.56583455 0.5717510 0.6066469 0.6232848 0.6259172 0.6380914 0.6536747 #>  [102,] 0.60812333 0.8216129 0.9347819 0.9809477 1.0964452 1.1623259 1.2079391 #>  [103,] 0.33214564 0.3893484 0.5200880 0.5341617 0.5520791 0.5524622 0.5696291 #>  [104,] 1.01150228 1.0572116 1.2389507 1.2392247 1.2886597 1.3048695 1.3125675 #>  [105,] 0.50033948 0.5441188 0.5673140 0.6374703 0.7180120 0.7472471 0.8164689 #>  [106,] 0.59450313 0.6598439 0.7774593 0.7839189 0.8028296 0.8456948 0.8931079 #>  [107,] 0.35430432 0.3667045 0.3893236 0.4197194 0.4240849 0.5329656 0.5630446 #>  [108,] 0.50488240 0.5738213 0.6221477 0.6402268 0.6721114 0.6917115 0.7357998 #>  [109,] 0.78902080 0.8365857 0.8680081 0.8787233 0.9118684 0.9252061 0.9763485 #>  [110,] 0.32846065 0.3957924 0.4443687 0.5093373 0.5155913 0.5715634 0.5879201 #>  [111,] 0.41332110 0.4225958 0.4433169 0.4780144 0.5591654 0.5849979 0.5993609 #>  [112,] 0.13472709 0.3841463 0.3845889 0.4435437 0.4463847 0.4516569 0.5858966 #>  [113,] 0.19851580 0.3121522 0.3166910 0.3967202 0.4121044 0.4328381 0.4948888 #>  [114,] 0.69133461 0.7428445 0.9118374 0.9682363 0.9828355 0.9966706 1.0250703 #>  [115,] 0.19431981 0.3578915 0.3770062 0.3890006 0.4286959 0.5027466 0.5234495 #>  [116,] 0.25659797 0.4469781 0.5055375 0.6072008 0.6263363 0.6289675 0.6763501 #>  [117,] 0.26628857 0.3645358 0.3715640 0.3987657 0.4262391 0.4426851 0.4538106 #>  [118,] 0.52086872 0.5551672 0.6222436 0.6688370 0.7026152 0.7378854 0.7423665 #>  [119,] 0.50730601 0.5257820 0.5471438 0.6493763 0.6752105 0.6931152 0.7394724 #>  [120,] 0.32382088 0.4648621 0.4881377 0.5458224 0.6159581 0.6326245 0.6424040 #>  [121,] 0.28573773 0.3361938 0.5409483 0.5752464 0.6123048 0.6726006 0.6835762 #>  [122,] 0.24226116 0.3808092 0.4515671 0.4544820 0.4737460 0.5553131 0.6996115 #>  [123,] 0.30915125 0.3473741 0.4776426 0.4935336 0.5129804 0.6207284 0.6740894 #>  [124,] 0.34988827 0.4487777 0.5198823 0.5662931 0.5840507 0.5882049 0.5898896 #>  [125,] 0.65681195 0.6603805 0.7129032 0.8318329 0.8697012 0.9391965 0.9566591 #>  [126,] 0.23289427 0.4722032 0.5263382 0.5308595 0.5853720 0.5861832 0.5914866 #>  [127,] 0.63456927 0.6568120 0.8048844 0.8270570 0.9388909 0.9522907 0.9992562 #>  [128,] 0.36103013 0.4236558 0.5668140 0.6020313 0.6168066 0.6684610 0.7182618 #>  [129,] 0.21450111 0.3725005 0.4160145 0.4333978 0.5025561 0.5029495 0.5841859 #>  [130,] 0.52107308 0.6575221 0.6913346 0.7012369 0.8144653 0.8833146 0.9111545 #>  [131,] 0.20947228 0.3027628 0.3914504 0.4534882 0.4668981 0.4722032 0.4841215 #>  [132,] 0.42263965 0.4756709 0.4787780 0.4985535 0.5421504 0.5562872 0.6535503 #>  [133,] 0.34574747 0.5733851 0.5804437 0.5950555 0.6264141 0.7317723 0.7533586 #>  [134,] 0.51471236 0.6346902 0.6958767 0.7134612 0.7554393 0.8285532 0.8469626 #>  [135,] 0.62423562 0.7161253 0.7493031 0.9352589 0.9409842 0.9471461 0.9703273 #>  [136,] 0.79056836 0.8188511 0.8242748 0.8818849 0.9092610 0.9484727 1.0669363 #>  [137,] 0.47545943 0.5934664 0.6861405 0.7234683 0.7301864 0.7599841 0.7894033 #>  [138,] 0.56711037 0.6021441 0.6193477 0.6417607 0.7122801 0.7144015 0.7208666 #>  [139,] 0.22203681 0.5687218 0.5841978 0.6262383 0.7001192 0.7038519 0.7756952 #>  [140,] 0.38722183 0.4264711 0.5653725 0.6427658 0.6567350 0.6727786 0.7068612 #>  [141,] 0.22751586 0.4211347 0.4378398 0.6107828 0.6302572 0.6302978 0.6688148 #>  [142,] 0.41895252 0.5433203 0.6369656 0.6651215 0.6654071 0.6745463 0.6850951 #>  [143,] 0.40598050 0.4660050 0.5058930 0.5630573 0.6378101 0.6475042 0.6503111 #>  [144,] 0.44725961 0.4596031 0.4656019 0.5055725 0.5802695 0.6347448 0.7450651 #>  [145,] 0.61758627 0.6575221 0.7368617 0.7505734 0.7657023 0.8066479 0.8658694 #>  [146,] 0.23847659 0.5310611 0.6902792 0.7201318 0.7376740 0.7861113 0.8130186 #>  [147,] 0.69803701 0.7608931 1.0508696 1.0634575 1.0842547 1.1635289 1.3228393 #>  [148,] 0.72010957 0.7249445 0.7602047 0.7913518 0.8704807 0.8717862 0.9007194 #>  [149,] 0.47847226 0.6054852 0.6212701 0.6754453 0.7325694 0.7443653 0.7644246 #>  [150,] 0.34376305 0.3928838 0.3965944 0.5268086 0.5274684 0.5526603 0.5594635 #>  [151,] 0.11854885 0.1598299 0.2187154 0.3016651 0.4616322 0.4908956 0.5328126 #>  [152,] 0.41906121 0.4572405 0.5358376 0.5561664 0.5868243 0.6028495 0.6421356 #>  [153,] 0.25605458 0.8028090 0.8293019 0.8391510 0.8430303 0.8894912 0.9094234 #>  [154,] 0.37404073 0.6488360 0.6598439 0.6684390 0.6848283 0.7325698 0.8108444 #>  [155,] 0.57194815 0.7554950 0.9021859 0.9697902 1.0346959 1.0690226 1.1617546 #>  [156,] 0.22203681 0.3711382 0.4081819 0.5462578 0.5558534 0.6098269 0.7199620 #>  [157,] 0.56430508 0.5675040 0.6482846 0.6638497 0.6862901 0.8024593 0.8171962 #>  [158,] 0.25498811 0.5006597 0.6216857 0.6347448 0.6667712 0.6848895 0.7331007 #>  [159,] 0.22002521 0.2701236 0.3250154 0.4153354 0.4156072 0.4178095 0.4240849 #>  [160,] 0.56724851 0.7021860 0.7796495 0.8573089 0.9004772 0.9158575 0.9418729 #>  [161,] 0.77556964 0.8434915 0.8444735 0.9270317 0.9594686 0.9946435 1.0137107 #>  [162,] 0.67454632 0.7732128 0.7862916 0.7907275 0.8233109 0.8458242 0.9183389 #>  [163,] 0.28922764 0.4168953 0.4816976 0.5465686 0.5474644 0.5955995 0.5989160 #>  [164,] 0.42365578 0.5404673 0.6063276 0.6372699 0.6988914 0.7066061 0.7266979 #>  [165,] 0.26130918 0.4752391 0.5441104 0.5944953 0.6075002 0.6156041 0.6373161 #>  [166,] 0.12206065 0.2838317 0.5111573 0.6457228 0.6531868 0.6559793 0.6615264 #>  [167,] 1.08542242 1.0987422 1.3800436 1.3855726 1.3903829 1.4053361 1.4310435 #>  [168,] 0.35472249 0.4190612 0.4561020 0.4988896 0.5056791 0.5899536 0.5964954 #>  [169,] 0.37561311 0.3846206 0.4736670 0.4923081 0.5072896 0.5130117 0.5479327 #>  [170,] 0.40763306 0.4760447 0.6325157 0.6692448 0.6993056 0.7371792 0.7512593 #>  [171,] 0.52048419 0.9328320 0.9728195 0.9955837 1.1005000 1.1904908 1.2704751 #>  [172,] 0.74851796 0.9347819 1.3371638 1.3907535 1.3992742 1.4540496 1.5052591 #>  [173,] 0.65623488 0.6856286 0.7973605 0.9866034 1.0042933 1.1280310 1.1484358 #>  [174,] 0.52198094 0.8683056 0.9505287 0.9970031 1.0079665 1.0132144 1.0229084 #>  [175,] 0.32242403 0.3297114 0.3624759 0.4138689 0.4417516 0.4664420 0.4886736 #>  [176,] 0.35928091 0.4840858 0.5153455 0.5660540 0.6729406 0.7024327 0.7156461 #>  [177,] 0.21909837 0.4523939 0.4632213 0.4710398 0.5244654 0.6080580 0.6589443 #>  [178,] 0.69579192 0.7437197 0.7464151 0.8263883 0.8666540 0.9534631 0.9573264 #>  [179,] 0.45576908 0.4637332 0.5248875 0.6421754 0.6522990 0.6783919 0.6801493 #>  [180,] 0.42220966 0.5122783 0.5396211 0.5721222 0.5823305 0.6100743 0.6480245 #>  [181,] 0.50589301 0.5882132 0.6812641 0.7008813 0.7576643 0.7976884 0.8222057 #>  [182,] 0.34223822 0.4802728 0.8448907 1.1316579 1.1665336 1.1919500 1.2135002 #>  [183,] 0.41224871 0.4247864 0.4681037 0.4932505 0.4964602 0.5216025 0.5428428 #>  [184,] 0.29350945 0.4886740 0.5350388 0.5687154 0.5740785 0.6534741 0.6822146 #>  [185,] 0.50715310 0.6498340 0.6862512 0.7733364 0.7937157 0.8427582 0.8430303 #>  [186,] 0.56054815 0.5782540 0.5919297 0.5942635 0.6085981 0.6153344 0.6189574 #>  [187,] 0.92270652 1.0088094 1.0880351 1.1221539 1.1537432 1.1846774 1.2059794 #>  [188,] 0.48829413 0.5675459 0.6327983 0.6945553 0.7657023 0.7944557 0.8462813 #>  [189,] 0.35041822 0.4261505 0.4800776 0.5097338 0.5570260 0.7031111 0.7380868 #>  [190,] 0.37616749 0.4343683 0.5045840 0.5564971 0.6135556 0.6631313 0.7542598 #>  [191,] 0.55727032 0.5655979 0.5944458 0.6876777 0.7060238 0.7402540 0.7947215 #>  [192,] 0.35044367 0.4476238 0.5494974 0.5786876 0.5887522 0.7112271 0.7235326 #>  [193,] 0.35397699 0.4520440 0.4840858 0.5384767 0.5696291 0.6533306 0.6579804 #>  [194,] 0.40257851 0.4370394 0.4596176 0.5035524 0.5792753 0.5856821 0.5928385 #>  [195,] 0.64486388 0.6475149 0.6889418 0.6973980 0.7008426 0.7013966 0.7066061 #>  [196,] 1.23203974 1.4285219 1.4462635 1.5173526 1.6299010 1.6685962 1.7065306 #>  [197,] 0.49603573 0.6929709 0.6960296 0.6973980 0.7259172 0.7469448 0.7900775 #>  [198,] 0.21450111 0.3629968 0.4068443 0.4475015 0.4894120 0.5283544 0.5383833 #>  [199,] 0.46859260 0.4731851 0.5202563 0.5874660 0.5935437 0.5982491 0.6268055 #>  [200,] 0.37680790 0.3785436 0.5557404 0.6131370 0.6480245 0.6571595 0.6580577 #>  [201,] 0.33692534 0.4659339 0.5474846 0.6028036 0.6844439 0.7240448 0.7973605 #>  [202,] 0.38279950 0.4501319 0.5305300 0.5902610 0.6187165 0.6677904 0.7050434 #>  [203,] 0.55649707 0.5597988 0.5683753 0.6674011 0.6959129 0.7365090 0.7411168 #>  [204,] 1.24358390 1.4220902 1.4695332 1.4756721 1.6231624 1.6483707 1.6774757 #>  [205,] 0.75732375 0.8841986 0.9101605 1.0192356 1.0645210 1.0765753 1.1203706 #>  [206,] 0.54059802 0.6585724 0.6970150 0.7535270 0.9653213 0.9884833 1.0252126 #>  [207,] 0.91494040 1.0595918 1.6086892 1.7741436 1.7956309 1.8306050 1.8500155 #>  [208,] 1.04024702 1.1774862 1.2297237 1.2528068 1.2662409 1.2741391 1.3049049 #>  [209,] 0.25498811 0.6239301 0.6563475 0.7047488 0.7623663 0.7824292 0.8001535 #>  [210,] 0.55616641 0.5601816 0.6155516 0.6418403 0.6436048 0.6439247 0.6698603 #>  [211,] 0.59357525 0.7162872 0.7892502 0.8681179 0.9545234 0.9607758 0.9786329 #>  [212,] 0.35840871 0.4433169 0.5149635 0.5398995 0.5898393 0.6214139 0.6836896 #>  [213,] 0.80078631 0.8928092 0.9854347 1.0634705 1.2412613 1.2798425 1.2880005 #>  [214,] 0.80237187 0.8907215 0.9562249 0.9744722 0.9770473 1.0694087 1.0710785 #>  [215,] 0.32298102 0.3369145 0.4142218 0.4987924 0.5413201 0.5662741 0.5718615 #>  [216,] 0.44280901 0.6246671 0.7419031 0.8114756 0.8400890 0.9761894 0.9783869 #>  [217,] 0.47941267 0.5503959 0.5515828 0.5929073 0.6183079 0.7302536 0.8013477 #>  [218,] 0.37404073 0.4066550 0.6264632 0.7080238 0.7839189 0.8172518 0.8894449 #>  [219,] 0.51058847 0.6132749 0.6454162 0.6639050 0.7007903 0.7793574 0.8238770 #>  [220,] 0.48947605 0.5688061 0.5703682 0.6347678 0.6396531 0.7195405 0.7211375 #>  [221,] 0.39198826 0.5338365 0.5470781 0.6352225 0.6853344 0.7292610 0.7405505 #>  [222,] 0.32925054 0.3337566 0.3537057 0.3709667 0.4737923 0.4778595 0.5754367 #>  [223,] 0.56468077 0.5896778 0.6214263 0.6277933 0.6420976 0.7403920 0.7717844 #>  [224,] 0.59522438 0.7688842 0.8178899 0.8516554 0.8583428 0.8753237 0.9810414 #>  [225,] 0.69803701 1.2171523 1.2948373 1.3274250 1.4879162 1.6393210 1.7143885 #>  [226,] 0.39198826 0.5653725 0.5786876 0.5807206 0.6096844 0.6177255 0.6736514 #>  [227,] 0.58571277 0.5962153 0.8949380 0.9163783 0.9595612 1.0200636 1.0324463 #>  [228,] 0.30310872 0.4200247 0.4229516 0.5805225 0.6122033 0.6237806 0.6362210 #>  [229,] 1.05847657 1.1005000 1.1190572 1.1982498 1.2544481 1.2893071 1.2974345 #>  [230,] 0.57696773 0.6242788 0.6383023 0.6534197 0.6758638 0.6822475 0.7060864 #>  [231,] 0.41712939 0.5935753 0.9165600 0.9195523 0.9275508 0.9443482 0.9479880 #>  [232,] 0.45726262 0.4583310 0.7724981 0.8982653 1.0679016 1.1260930 1.1698087 #>  [233,] 0.35262564 0.5234435 0.6757034 0.7882720 0.8135836 0.8427588 0.8670608 #>  [234,] 0.58346261 0.6487344 0.7019582 0.7787994 0.8361624 0.8761426 0.9023737 #>  [235,] 0.82075336 1.4282301 1.4478488 1.4753484 1.4984437 1.5197241 1.5490382 #>  [236,] 0.77745259 0.9665143 1.0751276 1.1005827 1.1481328 1.5202389 1.5362245 #>  [237,] 0.19924239 0.3152815 0.3448585 0.3514440 0.3770062 0.4625128 0.4780603 #>  [238,] 0.66435588 0.8005422 0.8889982 0.9920496 1.1137855 1.1302576 1.1635349 #>  [239,] 0.53272869 0.5949507 0.6868213 0.6933960 0.7096037 0.8428046 0.8739262 #>  [240,] 0.35979994 0.4443687 0.4694655 0.4722167 0.5433275 0.5597194 0.6039846 #>  [241,] 0.51950191 0.5216698 0.5274684 0.5914866 0.6116315 0.6459109 0.6533482 #>  [242,] 0.63688309 0.7872931 0.8319751 0.8356491 0.8410806 0.8837879 0.8876941 #>  [243,] 0.71229382 0.8035207 0.8410806 0.8790030 0.8813799 0.9300940 0.9729095 #>  [244,] 0.65725472 0.8697833 0.9229089 0.9659382 0.9897175 1.0464166 1.0568944 #>  [245,] 0.50715310 0.7280457 0.8555483 0.8586908 0.8622578 0.9074350 0.9926413 #>  [246,] 0.37131911 0.4682843 0.5089432 0.5165489 0.5430107 0.5771373 0.5824800 #>  [247,] 0.32382088 0.4543166 0.5096453 0.5111896 0.5999484 0.6634004 0.7207142 #>  [248,] 0.48144845 0.4921272 0.4981125 0.5342477 0.5625682 0.5728957 0.5832319 #>  [249,] 0.23129396 0.4222097 0.4542742 0.5858121 0.6025637 0.6505760 0.6520133 #>  [250,] 1.01356973 1.0596180 1.2227319 1.3980887 1.4553532 1.5327799 1.5454955 #>  [251,] 0.24358437 0.3361118 0.4944251 0.5233372 0.5310581 0.5327298 0.5362621 #>  [252,] 0.52198094 0.5970933 0.6667978 0.6989012 0.7252519 0.7393379 0.7472802 #>  [253,] 0.51619415 0.5766069 0.5969594 0.6248415 0.6259476 0.6591139 0.6714122 #>  [254,] 0.49565953 0.5752943 0.5862529 0.6221876 0.6787504 0.6937455 0.7206828 #>  [255,] 0.44400260 0.4448423 0.4622279 0.5376982 0.5718686 0.5778628 0.5802733 #>  [256,] 0.64564247 0.6796087 0.6806386 0.6910644 0.8605439 0.9477724 0.9540807 #>  [257,] 0.21842711 0.3197918 0.4834570 0.4871976 0.5115946 0.5222595 0.5595080 #>  [258,] 0.67774286 0.7046772 0.7232678 0.7312867 0.7597737 0.7708712 0.8142335 #>  [259,] 0.53272869 0.8331838 0.8677271 0.8759161 0.8986401 0.9125190 0.9659382 #>  [260,] 0.28437413 0.2998943 0.3042058 0.4012642 0.4081155 0.4247982 0.4673858 #>  [261,] 0.63965314 0.6504910 0.7150457 0.7203494 0.7325694 0.7911986 0.8116418 #>  [262,] 0.21503944 0.3321620 0.5607813 0.5707382 0.5722667 0.6071732 0.6184903 #>  [263,] 0.29072697 0.4406810 0.4664420 0.4948715 0.5313998 0.5353924 0.5626503 #>  [264,] 0.53780201 0.5930607 0.6458247 0.6564052 0.7236569 0.7525923 0.7708631 #>  [265,] 0.23030971 0.3502259 0.3750441 0.3860377 0.4296030 0.5377724 0.5706198 #>  [266,] 0.45984778 0.5698404 0.5900970 0.6919135 0.7400530 0.7674129 0.8351641 #>  [267,] 0.84516297 1.0197457 1.0790228 1.1548998 1.2844386 1.3827459 1.4759461 #>  [268,] 0.40170178 0.4812571 0.5726673 0.5745434 0.5909489 0.6035717 0.6212375 #>  [269,] 0.52107308 0.5388409 0.5818140 0.5917501 0.7055237 0.7126523 0.7522217 #>  [270,] 0.55073858 0.5517060 0.6037713 0.6246497 0.6482846 0.6561759 0.6934546 #>  [271,] 0.24065734 0.4150712 0.5268086 0.5650915 0.5667022 0.6913356 0.7101384 #>  [272,] 0.67338242 0.6734291 0.6737288 0.7138571 0.7241968 0.7374729 0.7724340 #>  [273,] 0.45167085 0.5448504 0.5597988 0.6092459 0.6135556 0.6237190 0.6351304 #>  [274,] 0.36624145 0.4294443 0.4670919 0.5133000 0.5629500 0.5705741 0.5769677 #>  [275,] 0.25010378 0.3563927 0.4101014 0.5270232 0.5964496 0.6009242 0.6175453 #>  [276,] 0.28215704 0.3132695 0.4281433 0.4543315 0.5271690 0.5662741 0.5730456 #>  [277,] 0.45009807 0.5447042 0.5490458 0.5927297 0.6037899 0.6157541 0.6376039 #>  [278,] 0.37268614 0.4744697 0.4886740 0.4912813 0.5048824 0.5172372 0.5421352 #>  [279,] 0.42512691 0.4561603 0.4634283 0.4648621 0.5126070 0.5995374 0.5999484 #>  [280,] 0.39471095 0.4952865 0.5563715 0.6731719 0.6949748 0.6975616 0.7021454 #>  [281,] 0.45363577 0.4893253 0.5378020 0.6487800 0.7053220 0.7853613 0.7914388 #>  [282,] 0.39151742 0.4189698 0.4814248 0.4867322 0.5404672 0.5501805 0.5614857 #>  [283,] 0.52735666 0.6053922 0.6259112 0.6563645 0.7086851 0.7912656 0.7932942 #>  [284,] 0.39657248 0.4048576 0.4911814 0.5076226 0.5993609 0.6579032 0.7241388 #>  [285,] 0.38334300 0.5270698 0.5886540 0.6035264 0.6072008 0.6840259 0.6881721 #>  [286,] 0.41450092 0.4770188 0.5206842 0.5432409 0.5814605 0.5906781 0.6563645 #>  [287,] 0.36544361 0.7028372 0.7224518 0.7261869 0.7305762 0.8276109 0.8731040 #>  [288,] 0.41415420 0.5161941 0.7111679 0.7301000 0.7678661 0.7787644 0.8028296 #>  [289,] 0.50971991 0.5902610 0.6164800 0.6179056 0.6449559 0.6583255 0.6814272 #>  [290,] 0.55581384 0.5717510 0.5826967 0.6407457 0.6976321 0.7423984 0.7637804 #>  [291,] 0.59866228 1.0574186 1.0827547 1.2135163 1.2271324 1.3817756 1.4211157 #>  [292,] 0.21909837 0.4716497 0.5685377 0.6016637 0.6558203 0.6676636 0.6733824 #>  [293,] 0.47054738 0.5426034 0.5819701 0.6816075 0.7241388 0.7343673 0.7387364 #>  [294,] 0.45377666 0.4723005 0.4812571 0.5112100 0.5465686 0.5476915 0.5881183 #>  [295,] 0.35670470 0.6291949 0.6448639 0.6596634 0.6722501 0.6929709 0.7572753 #>  [296,] 0.35472249 0.3811103 0.5358376 0.5642437 0.5961165 0.6324686 0.6407457 #>  [297,] 0.28573773 0.5001645 0.5673821 0.5785623 0.6031988 0.6164790 0.6173615 #>  [298,] 0.56575301 0.5862529 0.7063134 0.7464538 0.8535649 0.8874401 0.9223649 #>  [299,] 0.79637568 0.8749822 0.9783598 1.2300623 1.3158687 1.3175287 1.3623603 #>  [300,] 0.30557838 0.4241054 0.5039256 0.6803701 0.7533012 0.7837470 0.8014202 #>  [301,] 0.38203086 0.4390851 0.4880371 0.5607813 0.6436031 0.6744626 0.6770326 #>  [302,] 0.63556881 0.6957603 0.7210081 0.7627458 0.7746328 0.7983302 0.8204706 #>  [303,] 0.45009408 0.5313225 0.5460155 0.5645318 0.5715822 0.6243289 0.6958767 #>  [304,] 0.44368466 0.4486731 0.5009533 0.5682975 0.5970933 0.6047286 0.6083888 #>  [305,] 0.35840871 0.4169628 0.4225958 0.4911814 0.5039235 0.5338365 0.5781229 #>  [306,] 0.33942542 0.3711903 0.4492119 0.4594133 0.5387496 0.5698404 0.5771373 #>  [307,] 0.69956746 0.7001192 0.7892888 0.8605808 1.1142022 1.1352410 1.1480557 #>  [308,] 0.75473629 0.8361624 0.8422744 0.9061449 0.9120410 0.9821817 0.9843251 #>  [309,] 0.31455279 0.4583310 0.5770583 0.7664926 0.8156726 0.8258436 1.0282546 #>  [310,] 0.47296983 0.5225046 0.5630048 0.6904069 0.6919870 0.7448498 0.7628320 #>  [311,] 0.51315624 0.5149635 0.5704207 0.6190328 0.6302978 0.6573493 0.6942256 #>  [312,] 0.39318181 0.4604370 0.5072256 0.5327298 0.5494974 0.5582138 0.5708057 #>  [313,] 0.24287744 0.4166350 0.4178960 0.4189698 0.4444443 0.4606803 0.4703776 #>  [314,] 0.40654788 0.5783974 0.7418223 0.7522082 0.8443812 0.8490229 0.8562537 #>  [315,] 0.63279646 0.7652896 0.8007863 0.8914931 0.9796233 1.0079665 1.0082757 #>  [316,] 0.53004164 0.8518044 0.8780634 1.0266886 1.0910696 1.1075026 1.1983146 #>  [317,] 0.67721254 0.7144523 0.8290118 1.0329292 1.1647887 1.1863285 1.2078953 #>  [318,] 0.55119319 0.7165806 0.8355345 0.8360505 0.8460067 0.8586908 0.9459917 #>  [319,] 0.59721346 0.7056230 0.9473805 1.0574583 1.0701397 1.1518300 1.1519993 #>  [320,] 0.56508706 0.5834626 0.6587176 0.7558388 0.8035207 0.9061449 0.9179113 #>  [321,] 0.45253862 0.6309422 0.6503275 0.6806386 0.7407575 0.7708451 0.8088843 #>  [322,] 0.44709275 0.4538106 0.4780144 0.5013138 0.5041939 0.5092410 0.5421352 #>  [323,] 0.52933161 0.5383322 0.6054852 0.6093107 0.6349061 0.6734350 0.6830793 #>  [324,] 0.35041822 0.5075877 0.5634173 0.6380059 0.6724133 0.7153056 0.7405505 #>  [325,] 0.45253862 0.6796087 0.8755832 0.8855468 0.9351881 0.9831172 0.9891764 #>  [326,] 0.52665654 0.6579032 0.6949440 0.7364177 0.7730949 0.7891923 0.7907426 #>  [327,] 0.51939244 0.5715822 0.6848283 0.6934052 0.7134612 0.7773523 0.7774593 #>  [328,] 0.51058847 0.5465017 0.5782255 0.6109514 0.6572684 0.7044230 0.7235611 #>  [329,] 0.25363741 0.3573839 0.3808092 0.4650326 0.4661630 0.6422694 0.6625685 #>  [330,] 0.40811039 0.6742909 0.6764644 0.6781981 0.7171307 0.7302536 0.7410178 #>  [331,] 0.34853729 0.4724441 0.4752391 0.4890732 0.5602563 0.5944458 0.6325157 #>  [332,] 1.06287607 1.0801051 1.1190381 1.1242821 1.1806040 1.2316796 1.2439331 #>  [333,] 0.33375658 0.4259864 0.4837387 0.5052638 0.5053167 0.5437653 0.5915493 #>  [334,] 0.34974712 0.4760447 0.6642740 0.7046414 0.9082567 0.9330853 0.9715454 #>  [335,] 0.24768764 0.4333978 0.4636258 0.5046162 0.5283544 0.5438362 0.5440877 #>  [336,] 0.26660384 0.4811004 0.5090228 0.5528141 0.6181586 0.6526040 0.6534197 #>  [337,] 0.65871763 0.6778421 0.7605055 0.7653786 0.8485050 0.8868539 0.8931746 #>  [338,] 0.46275192 0.5238447 0.5446931 0.5652159 0.5758464 0.6505136 0.6529034 #>  [339,] 0.42239482 0.6184429 0.6337607 0.6742711 0.8287023 0.8708180 0.9438030 #>  [340,] 0.50784390 0.5416117 0.5656914 0.6021441 0.6553741 0.7706714 0.7770222 #>  [341,] 0.35979994 0.3957924 0.4129281 0.4179757 0.5122783 0.5918710 0.6025637 #>  [342,] 0.63194161 0.6455795 0.7261869 0.8305566 0.8344117 0.8605439 0.9561669 #>  [343,] 0.51374961 0.7063134 0.8677374 0.8780634 0.8853389 0.9095318 0.9336728 #>  [344,] 0.35408087 0.4977546 0.5435904 0.5497811 0.6039837 0.6164669 0.6257324 #>  [345,] 0.43947267 0.6918048 0.7101592 0.7237951 0.7381221 0.8263883 0.8434119 #>  [346,] 0.33611180 0.3468886 0.3591042 0.3931818 0.4246627 0.5037485 0.5524439 #>  [347,] 0.13472709 0.3470362 0.3751891 0.3754892 0.4162583 0.5272656 0.5618534 #>  [348,] 0.45872292 0.7747637 0.8733010 0.8816674 0.9359929 1.0386990 1.0503497 #>  [349,] 0.76089312 0.9783598 1.1597488 1.2454324 1.2668784 1.2766727 1.2948373 #>  [350,] 0.52344354 0.5618096 0.6058192 0.8110106 0.8389756 0.8448668 0.8666166 #>  [351,] 1.00320285 1.1964481 1.4864929 1.5244202 1.5924686 1.5973773 1.6350913 #>  [352,] 0.34505119 0.4407967 0.4587378 0.4770188 0.4953500 0.5024896 0.5072670 #>  [353,] 0.51471236 0.7458319 0.7812538 0.7959399 0.8026379 0.8485308 0.8894449 #>  [354,] 0.24287744 0.2528981 0.3514440 0.3845294 0.4012435 0.4157509 0.4821240 #>  [355,] 0.36948845 0.4569821 0.5490110 0.5522937 0.6302990 0.6327983 0.6395269 #>  [356,] 0.84203949 0.8848823 0.9199303 1.0769689 1.1520436 1.2026872 1.2600780 #>  [357,] 0.40816998 0.4249954 0.4465101 0.4727595 0.5361064 0.5682558 0.5841110 #>  [358,] 0.53129953 0.7800748 0.7942991 0.8243460 0.8422736 0.8438327 0.8686249 #>  [359,] 0.43599179 0.4705474 0.4964602 0.5172372 0.6100159 0.6109825 0.6539156 #>  [360,] 0.46981113 0.4705423 0.5165155 0.5295835 0.5383833 0.5547885 0.5623455 #>  [361,] 0.28525084 0.4306587 0.5122991 0.5225018 0.5466979 0.5518350 0.6065211 #>  [362,] 1.26340308 1.3262740 1.4291231 1.5391033 1.7317798 1.7807596 1.7953080 #>  [363,] 0.46528737 0.4777534 0.5228359 0.5409021 0.6104980 0.6383880 0.6720716 #>  [364,] 0.70679078 0.7652896 0.8928092 0.9443403 1.0608136 1.1667172 1.1862792 #>  [365,] 0.42239482 0.6174474 0.7363252 0.7565915 0.8228618 0.8689568 0.9220352 #>  [366,] 1.23286674 1.3116607 1.3255606 1.3972401 1.4959085 1.5825051 1.6218035 #>  [367,] 0.57012160 0.6292890 0.6560286 0.7182341 0.7561592 0.7573399 0.7801432 #>  [368,] 0.35044367 0.4604370 0.4835176 0.5910309 0.6086386 0.6203943 0.6336788 #>  [369,] 0.94873559 0.9807033 0.9972865 1.2308452 1.3437723 1.3530821 1.4204735 #>  [370,] 0.75473629 0.8501048 0.9220450 1.0207922 1.1486754 1.1885296 1.2401213 #>  [371,] 0.28146387 0.3260705 0.4366601 0.5433540 0.5933842 0.6127575 0.6221876 #>  [372,] 0.35950874 0.5073048 0.5683753 0.6235164 0.6446509 0.6566805 0.6902792 #>  [373,] 0.41112243 0.4116493 0.4765060 0.5752464 0.5794443 0.6123411 0.6123799 #>  [374,] 0.52283591 0.5292109 0.5533450 0.5929073 0.6023376 0.6233022 0.7160258 #>  [375,] 0.44359339 0.4697162 0.4841215 0.5000855 0.5456847 0.5508504 0.5532352 #>  [376,] 0.23383847 0.3137708 0.3437942 0.4150142 0.4407967 0.4523003 0.4877015 #>  [377,] 0.33249324 0.3493396 0.4046570 0.4081700 0.4120199 0.4487138 0.4664569 #>  [378,] 0.25605458 0.6959129 0.7578751 0.7609478 0.7935083 0.8155124 0.8427582 #>  [379,] 0.49811251 0.5276924 0.5401132 0.5433540 0.5435904 0.5528327 0.5735362 #>  [380,] 0.58996967 0.6815409 0.7652459 0.8400572 0.8413907 0.8800606 0.8804117 #>  [381,] 0.53854719 0.5656914 0.6998046 0.8769282 0.8818634 0.9424085 0.9617523 #>  [382,] 0.30627977 0.4500981 0.5327105 0.5876995 0.5930607 0.6313136 0.6422694 #>  [383,] 0.34897843 0.5421504 0.5896778 0.5954862 0.7570582 0.7857939 0.7925845 #>  [384,] 0.41319063 0.4247864 0.4613509 0.5045840 0.5072757 0.5529674 0.5863506 #>  [385,] 0.71239946 0.7180202 0.8110106 0.8435917 0.8685881 0.8942112 0.8942249 #>  [386,] 0.63568495 0.7664926 0.7861507 0.8464545 0.9280979 0.9400134 0.9715833 #>  [387,] 0.48027446 0.5572357 0.7012896 0.7166014 0.7417714 0.7450651 0.7640203 #>  [388,] 0.25704914 0.6843241 0.7128811 0.7138442 0.7470252 0.7570582 0.7595342 #>  [389,] 0.48334236 0.6399348 0.7839183 0.8129100 0.8871339 0.9595406 0.9800387 #>  [390,] 0.38743561 0.4454116 0.5092410 0.5215843 0.5383322 0.5464835 0.5568206 #>  [391,] 0.59153021 0.7086851 0.7434553 0.7851660 0.8497252 0.9828270 0.9976127 #>  [392,] 0.30562872 0.4722767 0.5532494 0.5751412 0.5957136 0.6245099 0.6854279 #>  [393,] 0.23296837 0.3628757 0.3929309 0.4170176 0.4508831 0.4873079 0.5083329 #>  [394,] 0.30330157 0.4229516 0.4423688 0.6454378 0.6783919 0.6830318 0.6945553 #>  [395,] 0.40654788 0.4511806 0.5872089 0.6888683 0.7060238 0.7383677 0.7923135 #>  [396,] 0.53129953 0.5533450 0.6312164 0.7052231 0.7731757 0.8535398 0.8968402 #>  [397,] 0.34897843 0.5052480 0.6150751 0.6214263 0.6313828 0.6535503 0.6542743 #>  [398,] 0.34703621 0.4516569 0.4729150 0.4762736 0.5072932 0.5530539 0.5534629 #>  [399,] 0.62466708 0.9979456 1.0127537 1.0733717 1.1295335 1.1532937 1.1729747 #>  [400,] 0.58738996 0.6337607 0.7565915 0.8352141 0.8891291 0.9187011 0.9514285 #>  [401,] 0.40003684 0.4041870 0.4142218 0.4289430 0.5051539 0.5071989 0.5135839 #>  [402,] 0.23296837 0.3304021 0.3493396 0.3946723 0.3975834 0.3981831 0.4441259 #>  [403,] 0.46791313 0.6841272 0.8794180 0.8868539 0.9313011 0.9914935 1.0383111 #>  [404,] 0.68114830 1.0693221 1.2214593 1.2595482 1.2668423 1.3530821 1.4546983 #>  [405,] 0.31329689 0.6643559 0.7514427 0.8630547 0.8977046 1.0408527 1.1684208 #>  [406,] 0.50553748 0.5293316 0.5474395 0.5761952 0.6035264 0.6270004 0.6754453 #>  [407,] 0.34974712 0.4076331 0.4724441 0.5771910 0.6987778 0.7458089 0.7652245 #>  [408,] 0.44361359 0.4523939 0.4545972 0.4835633 0.5150930 0.5792453 0.6257449 #>  [409,] 0.37147837 0.3726861 0.4134519 0.4136909 0.4606380 0.5086740 0.5562872 #>  [410,] 0.40022029 0.4605179 0.5038490 0.5387785 0.5658345 0.5751905 0.6114922 #>  [411,] 0.22994126 0.2909840 0.3890006 0.4476148 0.4519132 0.5324390 0.5476915 #>  [412,] 0.42623908 0.4740785 0.5013138 0.5086740 0.5285104 0.5316723 0.5524439 #>  [413,] 0.34819162 0.4406939 0.5596955 0.5910541 0.5945437 0.6056731 0.6205853 #>  [414,] 0.28073651 0.3711382 0.5643051 0.5687218 0.6089764 0.6169938 0.6246497 #>  [415,] 1.13644207 1.3434034 1.3892144 1.4049852 1.4341459 1.4488354 1.4794534 #>  [416,] 0.70679078 0.7296337 0.9854347 1.0222550 1.0255695 1.0369977 1.0526467 #>  [417,] 0.26474833 0.2996917 0.3397002 0.4324178 0.4613509 0.4626309 0.4736670 #>  [418,] 0.39033116 0.6053594 0.6373450 0.6721114 0.6885639 0.6935188 0.7033758 #>  [419,] 0.40257851 0.5313225 0.5402952 0.5608967 0.6248415 0.6364382 0.6372876 #>  [420,] 0.34574747 0.4231677 0.5419832 0.6854614 0.6955331 0.7226188 0.7467520 #>  [421,] 0.36428810 0.4689935 0.5133082 0.6300784 0.7545058 0.7595342 0.8124521 #>  [422,] 0.47296983 0.6059437 0.6455795 0.6456425 0.6748474 0.8708488 0.8844148 #>  [423,] 0.39561534 0.6059437 0.6508106 0.6917468 0.6919870 0.7182540 0.7432759 #>  [424,] 0.24226116 0.3562661 0.4472978 0.4650326 0.6079754 0.6759295 0.6967097 #>  [425,] 0.57514119 0.6391886 0.6395910 0.6651105 0.6900882 0.7321835 0.7434553 #>  [426,] 0.55702598 0.7153056 0.7554950 0.8027385 0.8168891 0.8319751 0.8360344 #>  [427,] 0.28400738 0.3014656 0.3715640 0.4162734 0.4312045 0.4477879 0.5041939 #>  [428,] 0.55113512 0.5770583 0.7724981 0.8402992 0.8499318 0.9085474 0.9409850 #>  [429,] 0.05436257 0.3784364 0.5041804 0.5784596 0.5934272 0.5939247 0.6121724 #>  [430,] 0.39802174 0.4111224 0.4813110 0.4925430 0.5511119 0.5607807 0.5923892 #>  [431,] 0.44697811 0.4928615 0.5474198 0.6171354 0.7274788 0.7390235 0.7482171 #>  [432,] 0.46459145 0.4848567 0.5630048 0.5919297 0.6005470 0.6396746 0.7213426 #>  [433,] 0.53269635 0.6423708 0.7165806 0.7877054 0.8463317 0.8503603 0.8683801 #>  [434,] 0.60850132 0.6523529 0.7545058 0.7754741 0.8838682 0.9294634 1.0192727 #>  [435,] 0.35161288 0.4637332 0.4702277 0.5175738 0.6438825 0.6674147 0.6769124 #>  [436,] 0.40707331 0.4261513 0.6068558 0.6167799 0.6433716 0.6874296 0.6909479 #>  [437,] 0.33300737 0.4459515 0.4710398 0.5181151 0.5685377 0.6671335 0.7784676 #>  [438,] 0.52895676 0.7794370 1.0508696 1.1302803 1.2171523 1.2195996 1.2222400 #>  [439,] 0.69956746 0.8316041 0.9677083 1.0312323 1.1023156 1.1475118 1.1625978 #>  [440,] 0.42298295 0.4835932 0.5004995 0.5132283 0.5186172 0.5296030 0.5490644 #>  [441,] 0.23383847 0.3359003 0.4341613 0.4675330 0.4882665 0.5024896 0.5149505 #>  [442,] 0.82901184 0.8467181 0.9029467 1.1111839 1.2362870 1.2498482 1.2591831 #>  [443,] 0.51654889 0.5488572 0.6975223 0.7101592 0.7403920 0.7470252 0.8135582 #>  [444,] 0.80237187 0.8389756 1.0134591 1.0326050 1.0961032 1.2436588 1.3580057 #>  [445,] 0.44359339 0.5174984 0.5195019 0.5863282 0.5909017 0.6181340 0.6781981 #>  [446,] 0.41657434 0.4190963 0.4208021 0.4787913 0.4791877 0.5490458 0.5856821 #>  [447,] 0.10618703 0.4606380 0.4985535 0.5331683 0.5546109 0.5585887 0.5713954 #>  [448,] 0.34376305 0.5053167 0.5149382 0.5729407 0.6577190 0.6654661 0.6689691 #>  [449,] 0.20296080 0.2928222 0.3591042 0.5233372 0.5389581 0.5527545 0.5662263 #>  [450,] 0.49729791 0.5766607 0.7252519 0.7634141 0.8683056 0.8783216 0.8812159 #>  [451,] 0.10618703 0.4134519 0.4690105 0.4787780 0.4974177 0.6026175 0.6232789 #>  [452,] 0.46753879 0.5069673 0.5350388 0.5943044 0.6042781 0.6283086 0.6391816 #>  [453,] 0.25953822 0.5793038 0.6069211 0.6724805 0.7161253 0.8249282 0.8382666 #>  [454,] 0.30627977 0.4174533 0.4515671 0.4661630 0.6391332 0.6458247 0.6490084 #>  [455,] 0.37767953 0.9286672 1.0565746 1.1540811 1.1614233 1.2638697 1.3376046 #>  [456,] 0.45954640 0.5166308 0.5708986 0.5751905 0.5853102 0.5927181 0.6134860 #>  [457,] 0.53052996 0.5344986 0.6449559 0.7224054 0.7347203 0.8348433 0.8529510 #>  [458,] 0.35950874 0.4017826 0.6858376 0.6935188 0.7343916 0.7360433 0.7365090 #>  [459,] 0.49738742 0.5158036 0.6427270 0.6611266 0.7195405 0.7688521 0.8219601 #>  [460,] 0.38722183 0.5811206 0.6264177 0.7327903 0.7976197 0.8044292 0.8227182 #>  [461,] 0.63319273 0.6734291 0.7535270 1.0202815 1.0694151 1.0928215 1.1413443 #>  [462,] 0.67269871 0.7145027 0.7522082 0.9214484 0.9399391 0.9551844 0.9629602 #>  [463,] 0.32966932 0.3485738 0.3769186 0.4121044 0.4191090 0.4499651 0.4908956 #>  [464,] 0.38111032 0.4712183 0.5558138 0.5964954 0.6028495 0.6304065 0.6357903 #>  [465,] 0.27205992 0.2892276 0.3706530 0.4170176 0.4415927 0.4518578 0.4780603 #>  [466,] 0.24084381 0.3896511 0.4118910 0.4304682 0.4435316 0.4440026 0.4441259 #>  [467,] 0.52877847 0.5467673 0.5558534 0.5599322 0.5841978 0.6383880 0.7060626 #>  [468,] 0.36987784 0.5846895 0.6156041 0.7344429 0.7349864 0.7711073 0.7861352 #>  [469,] 0.28153596 0.3305500 0.3437942 0.3750441 0.4177578 0.4877873 0.5000270 #>  [470,] 0.64264968 0.7942991 0.8529510 0.8784327 0.8918912 0.9106084 0.9373054 #>  [471,] 0.39251545 0.4756598 0.5003395 0.6006313 0.6943531 0.8214862 0.8461595 #>  [472,] 0.52068425 0.5328062 0.5388409 0.5582123 0.6314825 0.6575682 0.6899784 #>  [473,] 0.22777047 0.4129796 0.4365657 0.4681038 0.5343238 0.5469023 0.5623552 #>  [474,] 0.63389269 0.6345693 0.6985526 0.7129032 0.8884943 0.9096216 0.9497840 #>  [475,] 0.43456064 0.5214899 0.5623571 0.6498340 0.6611266 0.7554209 0.7927645 #>  [476,] 0.42647108 0.5807206 0.5975192 0.6218652 0.6853344 0.7102948 0.7190642 #>  [477,] 0.49564140 1.1423044 1.2389119 1.2753286 1.2818966 1.2835279 1.3310261 #>  [478,] 0.59781251 0.6688370 0.6883951 0.7363252 0.7730383 0.7876934 0.8847359 #>  [479,] 0.28153596 0.3137708 0.3502259 0.4953500 0.5093561 0.5326955 0.5420008 #>  [480,] 0.18663857 0.5317580 0.5419832 0.5487608 0.6221426 0.6264141 0.6881758 #>  [481,] 0.31267521 0.5303312 0.5331146 0.6027073 0.6258670 0.6457228 0.7042218 #>  [482,] 0.23368082 0.3250154 0.3834352 0.4197194 0.4275584 0.4996193 0.5533405 #>  [483,] 0.91955225 0.9545234 1.1051060 1.1104517 1.2059794 1.2522130 1.2635088 #>  [484,] 0.42493149 0.4511350 0.4586089 0.5040458 0.5929770 0.6115298 0.7182540 #>  [485,] 0.22682587 0.2480127 0.2959485 0.3166910 0.4499651 0.4614916 0.4865672 #>  [486,] 0.69528406 0.8300131 0.9024401 0.9498579 0.9536614 0.9717779 0.9928814 #>  [487,] 0.45244167 0.4653359 0.4830648 0.5172285 0.5280128 0.5879258 0.6088658 #>  [488,] 0.37065301 0.4412777 0.4582816 0.4733274 0.4776426 0.4816976 0.5170612 #>  [489,] 0.62257576 0.7390887 0.9165362 0.9418729 0.9923731 1.0442445 1.0481829 #>  [490,] 0.83717671 0.9436371 0.9606411 0.9777737 1.0100633 1.1570742 1.1708917 #>  [491,] 0.40814314 0.8310013 0.8552807 0.9000674 0.9595612 1.0173900 1.0802670 #>  [492,] 0.24949528 0.3834352 0.3942819 0.4178095 0.5074940 0.5442154 0.6606637 #>  [493,] 0.19709022 0.2187154 0.2996038 0.3113926 0.3769186 0.4519274 0.4948888 #>  [494,] 0.41164933 0.4925430 0.5618269 0.5701216 0.5811206 0.6727786 0.6845109 #>  [495,] 0.92866723 0.9303131 0.9682363 1.1222177 1.1233239 1.2321535 1.3004286 #>  [496,] 0.29077197 0.3206984 0.4004170 0.4068293 0.4325380 0.4806393 0.4844364 #>  [497,] 1.25926490 1.7898086 2.0228459 2.1152648 2.1245367 2.3731155 2.4245612 #>  [498,] 0.61806720 0.6277933 0.7533096 0.7558388 0.7653786 0.7808826 0.8164083 #>  [499,] 0.85379628 1.0661492 1.1548998 1.1898879 1.1990052 1.2082769 1.2212973 #>  [500,] 0.35951552 0.6554812 0.6803583 0.7259172 0.7796495 0.8006088 0.8648114 #>  [501,] 0.42264878 0.4782759 0.5185579 0.5343601 0.5518350 0.5599315 0.6508480 #>  [502,] 0.11854885 0.1510874 0.1970902 0.2343162 0.4191090 0.5165155 0.5266120 #>  [503,] 0.25448671 0.2928222 0.5185579 0.5509403 0.5529055 0.6092334 0.6766864 #>  [504,] 0.22682587 0.2998028 0.3335145 0.4068293 0.4328381 0.4922302 0.5133000 #>  [505,] 0.40178264 0.6446509 0.7488147 0.8861453 0.9003658 0.9618344 0.9751831 #>  [506,] 0.29391918 0.4061283 0.4306587 0.5228965 0.5832275 0.5899964 0.6753623 #>  [507,] 0.43788933 0.4582539 0.6243289 0.6280845 0.6394288 0.6941987 0.7274788 #>  [508,] 1.30118955 1.3390613 1.4040978 1.4435363 1.4453038 1.4918486 1.5378908 #>  [509,] 0.32966932 0.3941251 0.4519274 0.5066004 0.5322481 0.5453682 0.5629484 #>  [510,] 0.32011448 0.3543735 0.3720383 0.4012863 0.5328062 0.6957056 0.7522217 #>  [511,] 0.37045458 0.4860552 0.5041877 0.5671624 0.6563504 0.6807592 0.7613683 #>  [512,] 0.20947228 0.4264581 0.4478557 0.5000855 0.5334534 0.5624579 0.5738994 #>  [513,] 0.36670446 0.3890201 0.4012843 0.5686263 0.6167925 0.6370494 0.6723794 #>  [514,] 0.37795926 0.4477879 0.4738609 0.5090228 0.5128234 0.5175382 0.5623552 #>  [515,] 0.35009156 0.4756709 0.5546109 0.5708893 0.5950555 0.6232789 0.6752105 #>  [516,] 0.36157721 0.5385472 0.5416117 0.8865734 0.9750752 0.9830905 1.0025298 #>  [517,] 0.27718187 0.5129804 0.6056237 0.6678011 0.6794818 0.7512593 0.7584470 #>  [518,] 0.39251545 0.4565877 0.6506495 0.6835762 0.7811446 0.7988935 0.8164689 #>  [519,] 0.35670470 0.4201375 0.4672613 0.5401132 0.5630573 0.6127575 0.6302454 #>  [520,] 0.38359296 0.4023368 0.4130215 0.4952865 0.5056992 0.5222595 0.5295685 #>  [521,] 0.22487065 0.4958902 0.5519525 0.5677707 0.5743892 0.5762558 0.5909489 #>  [522,] 0.27205992 0.3806329 0.3929309 0.3981831 0.4012642 0.4168953 0.4655050 #>  [523,] 0.36544361 0.5845751 0.6319416 0.7892725 0.7981664 0.8088843 0.8287031 #>  [524,] 0.38902014 0.4312426 0.5943249 0.5948818 0.6798540 0.6920017 0.7050224 #>  [525,] 0.83987583 0.8509428 0.8873737 0.9214484 0.9230865 0.9589170 0.9736951 #>  [526,] 0.38462058 0.3876209 0.4034313 0.5386992 0.5533427 0.5596955 0.5754367 #>  [527,] 0.33691448 0.4289430 0.5639932 0.5928433 0.6370551 0.6499539 0.6703261 #>  [528,] 0.35297632 0.3539770 0.5048027 0.5200880 0.5342477 0.5890675 0.5952005 #>  [529,] 0.43908515 0.5726048 0.5951107 0.6380428 0.6634692 0.6962213 0.7431025 #>  [530,] 0.49618612 0.5118809 0.5632154 0.5878696 0.6671233 0.6799312 0.6899583 #>  [531,] 0.69177105 0.7080238 0.7854926 0.8485308 0.8889982 0.9597501 1.0462626 #>  [532,] 0.67003857 0.7578751 0.7937157 0.8293019 0.8355345 0.9074350 0.9306542 #>  [533,] 0.18817780 0.3263812 0.4498424 0.5378484 0.5758464 0.5943175 0.6420483 #>  [534,] 0.56837870 0.6164915 0.7182087 0.9046293 0.9285257 0.9305844 0.9407088 #>  [535,] 0.34300571 0.5405980 0.6156638 0.6473756 0.6795572 0.6893059 0.6920074 #>  [536,] 0.24046644 0.2838317 0.5192381 0.5881006 0.6124168 0.6373446 0.6395910 #>  [537,] 0.79637568 1.0968572 1.1184596 1.2200925 1.2454324 1.2588954 1.2820018 #>  [538,] 0.25363741 0.4174533 0.4737460 0.5327105 0.5469747 0.5758246 0.6079754 #>  [539,] 0.48027284 0.7263244 1.1252817 1.1739789 1.2375446 1.2668826 1.3256645 #>  [540,] 0.64022675 0.6478359 0.7136217 0.7226188 0.7533586 0.7683751 0.8643401 #>  [541,] 0.49729791 0.5308754 0.5858121 0.6399348 0.6432224 0.6595801 0.6712947 #>  [542,] 0.67283196 0.9377682 0.9395871 0.9449968 1.0308181 1.0672893 1.1126684 #>  [543,] 0.25733196 0.3091513 0.5572357 0.5749722 0.5802695 0.6424083 0.6523067 #>  [544,] 0.32846065 0.3639594 0.4129281 0.4338706 0.4444443 0.4698290 0.4990459 #>  [545,] 0.27747188 0.4772313 0.4779375 0.5122474 0.5361064 0.5497595 0.5737270 #>  [546,] 0.65784302 0.6727169 0.7138442 0.8397201 0.9120992 0.9223763 0.9253608 #>  [547,] 0.77693231 0.7842589 1.0175231 1.0296697 1.0918162 1.0933009 1.1002842 #>  [548,] 0.81291914 0.8410402 0.8907215 0.9101605 0.9197968 0.9322531 0.9667390 #>  [549,] 0.34988827 0.3658588 0.4667414 0.5221603 0.5541596 0.5801597 0.6208179 #>  [550,] 0.35638783 0.3753218 0.4478557 0.4668981 0.5371098 0.5508504 0.5898896 #>  [551,] 0.98692905 1.0555816 1.1090953 1.2605971 1.3463357 1.3719468 1.4361456 #>  [552,] 0.36448039 0.3845294 0.3915174 0.4131788 0.4625128 0.5049695 0.5409083 #>  [553,] 0.81851756 0.8207534 0.9202747 0.9282647 0.9443403 0.9885486 1.0222550 #>  [554,] 0.50010266 0.6957772 0.7301864 0.7754657 0.7973515 0.8045865 0.8717815 #>  [555,] 0.36103013 0.5404673 0.5993752 0.6490013 0.7605415 0.8184226 0.8563243 #>  [556,] 0.37531456 0.4458114 0.4811698 0.5080290 0.5107633 0.5390139 0.5490110 #>  [557,] 0.34966624 0.6055830 0.6822862 0.7461298 0.7522313 0.7746328 0.7760192 #>  [558,] 0.65950542 0.6743650 0.6782276 0.6919135 0.8559171 0.8685761 0.8832589 #>  [559,] 0.35408087 0.5273889 0.5379967 0.7270784 0.8014202 0.8271468 0.8677374 #>  [560,] 0.32298102 0.4324566 0.4512873 0.4721475 0.5071989 0.5486639 0.5605482 #>  [561,] 0.31926014 0.4177578 0.4233472 0.4281433 0.5433968 0.5706198 0.6017010 #>  [562,] 0.37147837 0.4426851 0.4501795 0.4653168 0.4740785 0.4744697 0.4944251 #>  [563,] 0.67536832 0.6803701 0.7013966 0.7250987 0.7625611 0.7701840 0.8303599 #>  [564,] 0.30558786 0.4733031 0.6459002 0.7382215 0.7784527 0.9897000 1.0525441 #>  [565,] 0.42263965 0.5954862 0.6180672 0.6542743 0.7684178 0.7809912 0.7870615 #>  [566,] 0.38562616 0.3940274 0.5131562 0.5554115 0.5569593 0.5620189 0.6500211 #>  [567,] 0.96774209 0.9807033 0.9845888 0.9869290 0.9989732 1.0337165 1.0693221 #>  [568,] 0.41647986 0.4800776 0.6220162 0.6984915 0.7179020 0.7277512 0.7948382 #>  [569,] 0.30036151 0.3627705 0.4833259 0.4931523 0.5202563 0.5279635 0.5583427 #>  [570,] 0.62700042 0.7469769 0.7579051 0.7895488 0.8267739 0.8562542 0.8790143 #>  [571,] 0.53793469 0.7784676 0.7862916 0.8977327 0.9074273 0.9449968 1.0287106 #>  [572,] 0.48747706 0.5052480 0.5876995 0.6037899 0.6299525 0.6802612 0.7808826 #>  [573,] 0.31455279 0.4572626 0.5511351 0.8727226 0.9400134 1.0080838 1.0576547 #>  [574,] 0.44871378 0.4955209 0.5027995 0.5477312 0.5527545 0.6616785 0.6697397 #>  [575,] 0.40233681 0.5225802 0.5227777 0.5782255 0.6278991 0.6454162 0.6815881 #>  [576,] 0.30276277 0.3563878 0.4264581 0.4461007 0.4492418 0.4576282 0.4822133 #>  [577,] 0.45984778 0.5387496 0.7467777 0.7653043 0.7702646 0.7988893 0.8670221 #>  [578,] 0.24233517 0.3681826 0.3720383 0.4513847 0.7203485 0.8236208 0.8826792 #>  [579,] 0.33916954 0.3750427 0.4398783 0.4458593 0.4722167 0.5009533 0.5533079 #>  [580,] 0.33369569 0.4122823 0.4492119 0.5824800 0.6668924 0.6951343 0.7178657 #>  [581,] 0.37468744 0.3753218 0.4822133 0.5334534 0.5615352 0.5621126 0.5731131 #>  [582,] 0.42104877 0.4572296 0.5645318 0.5778201 0.6153423 0.6289675 0.6315479 #>  [583,] 0.45204395 0.4859628 0.5048027 0.6329911 0.6830352 0.7514743 0.7578306 #>  [584,] 0.59721346 0.9042485 0.9326445 0.9747262 0.9855535 1.0402239 1.0956709 #>  [585,] 0.55418451 0.7147373 0.7296337 0.7500947 0.8009319 0.8163358 0.8193204 #>  [586,] 0.43227537 0.5097338 0.5628983 0.5634173 0.6204571 0.6215502 0.6220162 #>  [587,] 0.53989951 0.5470781 0.5781229 0.6724133 0.6949440 0.7183193 0.7480427 #>  [588,] 0.68005398 1.1061666 1.3668989 1.4712084 1.6181672 1.6309481 1.6441485 #>  [589,] 0.12143197 0.4853171 0.5046162 0.5599322 0.6053934 0.6098269 0.6171716 #>  [590,] 0.23289427 0.3647652 0.3892261 0.3914504 0.4576282 0.5154589 0.5208619 #>  [591,] 0.31914359 0.3450512 0.4877015 0.5018955 0.5093561 0.5432409 0.5582123 #>  [592,] 0.52111174 0.5785623 0.6533719 0.6547879 0.6585586 0.7096053 0.7389082 #>  [593,] 0.29969169 0.3756131 0.4681037 0.4874659 0.4931865 0.5187355 0.5391041 #>  [594,] 0.37586708 0.3941251 0.4325380 0.4865672 0.5303282 0.5363791 0.5395874 #>  [595,] 0.46275192 0.6156315 0.6668854 0.6815818 0.6859185 0.6957226 0.7253906 #>  [596,] 0.27386969 0.3047091 0.4561020 0.5454009 0.5961165 0.6033334 0.6141357 #>  [597,] 0.56180965 0.7794370 0.7882720 0.8798069 0.9775903 1.0134591 1.0420358 #>  [598,] 0.51587526 0.5978125 0.6222436 0.6744626 0.7547999 0.7678661 0.7917034 #>  [599,] 0.22346305 0.3448585 0.3578915 0.3840508 0.4412777 0.4519132 0.4651922 #>  [600,] 0.18817780 0.2883115 0.5132283 0.5674412 0.6427237 0.6529034 0.6889946 #>  [601,] 0.61830786 0.6295244 0.7233092 0.8337859 0.8451630 0.8698996 0.8701921 #>  [602,] 0.42168823 0.4416576 0.5030812 0.5041804 0.5369331 0.5413846 0.5682975 #>  [603,] 0.37468744 0.4370394 0.5371098 0.5402952 0.5801589 0.5937880 0.6256269 #>  [604,] 0.48596279 0.5884487 0.5899697 0.5952005 0.7127105 0.7551475 0.7600652 #>  [605,] 0.23398250 0.3321620 0.3511652 0.3725005 0.4475015 0.5438362 0.6081187 #>  [606,] 0.36074022 0.3801411 0.6225862 0.6753131 0.7174468 0.7451045 0.7965901 #>  [607,] 0.53793469 0.7907275 0.9213428 1.0147165 1.1276113 1.2419361 1.2849333 #>  [608,] 0.22241814 0.5474846 0.5649897 0.6471704 0.6856286 0.8259356 0.8884369 #>  [609,] 0.50245090 0.5122624 0.5291546 0.5353705 0.5468166 0.5708986 0.5873832 #>  [610,] 0.37440517 0.4489088 0.5235791 0.5558349 0.5608899 0.6031894 0.6405242 #>  [611,] 0.45872292 0.6221477 0.6507055 0.6799312 0.7686181 0.7971531 0.8324046 #>  [612,] 0.45566315 0.4784723 0.5076226 0.5591654 0.5943044 0.6735480 0.6874262 #>  [613,] 0.42298295 0.4754594 0.5783884 0.6338927 0.6408158 0.6855001 0.6889946 #>  [614,] 0.38118761 0.5671624 0.6403851 0.6979756 0.7215604 0.7428618 0.7694822 #>  [615,] 0.60063129 0.6374703 0.6961887 0.7497739 0.7641211 0.8685452 0.8810039 #>  [616,] 0.20296080 0.2544867 0.3468886 0.5310581 0.5533335 0.5558888 0.5599315 #>  [617,] 1.32211118 1.5102195 1.5297121 1.5487315 1.6030111 1.6204099 1.6622618 #>  [618,] 0.68005398 0.8732695 1.3353238 1.3738977 1.3756064 1.3979647 1.4334100 #>  [619,] 0.18663857 0.4231677 0.4747570 0.5547441 0.5733851 0.6531548 0.7276433 #>  [620,] 0.83762354 0.8630547 0.9391965 0.9865481 0.9920496 1.0223418 1.0556619 #>  [621,] 0.33214564 0.3888785 0.4141542 0.5766069 0.6551930 0.6574880 0.6601498 #>  [622,] 0.45616033 0.4748769 0.5707459 0.5835793 0.6369656 0.6520133 0.7653608 #>  [623,] 0.52250178 0.5899964 0.6222612 0.6239301 0.6468161 0.6592934 0.6674390 #>  [624,] 0.91159017 0.9282647 0.9766713 1.0526467 1.1038369 1.1192562 1.1617757 #>  [625,] 0.37956040 0.4169620 0.4418527 0.5122624 0.5376982 0.5559121 0.5621855 #>  [626,] 0.65668051 0.7420699 0.8377757 0.8617968 0.8680364 0.8805901 0.8923804 #>  [627,] 0.72013179 0.7770500 0.7793111 0.8885686 0.8931032 0.9054549 0.9066918 #>  [628,] 0.94392896 0.9705374 0.9996213 1.0469737 1.0550341 1.0775934 1.1359418 #>  [629,] 0.51795750 0.6197098 0.6221450 0.6508480 0.6790955 0.7207142 0.7549236 #>  [630,] 0.63319273 0.8448668 0.8942249 0.9557984 1.0779079 1.0961032 1.1320994 #>  [631,] 0.56025632 0.5655979 0.6782276 0.6855680 0.6987778 0.7713008 0.7806582 #>  [632,] 0.28215704 0.2921786 0.3366966 0.3860377 0.4669566 0.4886736 0.5000270 #>  [633,] 0.33369569 0.3394254 0.3558066 0.3713191 0.5157577 0.5900970 0.6975223 #>  [634,] 0.52793633 0.5472223 0.6204571 0.6357607 0.6391717 0.6391749 0.7038645 #>  [635,] 0.34089711 0.4163414 0.4523003 0.4877873 0.4997462 0.5149505 0.5154589 #>  [636,] 0.25951850 0.2959485 0.3206984 0.3335145 0.3758671 0.3967202 0.4416576 #>  [637,] 0.41657434 0.4336350 0.4596176 0.6274017 0.6602232 0.6750310 0.6827848 #>  [638,] 0.22241814 0.4659339 0.6562349 0.6857486 0.7319643 0.7368994 0.7556975 #>  [639,] 0.31267521 0.4105306 0.4882665 0.5072670 0.5216698 0.6110654 0.6236326 #>  [640,] 1.08844314 1.0910918 1.1133480 1.3981518 1.4026849 1.4247269 1.4363800 #>  [641,] 0.31329689 0.7473426 0.7554393 0.7570800 0.8005422 0.9546796 0.9865481 #>  [642,] 0.55908355 0.9087155 0.9530033 0.9957087 1.0264978 1.0491380 1.0871693 #>  [643,] 0.51374961 0.5657530 0.6164669 0.6329911 0.6586798 0.6649537 0.6937455 #>  [644,] 0.59413972 0.5986623 0.8289197 0.9228385 0.9354230 1.0103809 1.0622729 #>  [645,] 0.48977915 0.5745434 0.6795572 0.7157391 0.7334305 0.7800774 0.8174269 #>  [646,] 0.32011448 0.3409857 0.3681826 0.5018500 0.8345338 0.8641544 0.8886569 #>  [647,] 0.21244977 0.3612923 0.5737270 0.5812295 0.6163646 0.6174773 0.6671275 #>  [648,] 0.62952440 0.6976321 0.7905684 0.8160024 0.8523928 0.9218954 0.9320076 #>  [649,] 0.49243691 0.4956595 0.5276924 0.5669679 0.6174773 0.6257324 0.6362753 #>  [650,] 0.42013754 0.4814485 0.5997636 0.6482118 0.6594423 0.6967323 0.7013864 #>  [651,] 0.51752408 0.5487608 0.5601816 0.5804437 0.6531548 0.6721589 0.7467520 #>  [652,] 0.39402739 0.4729150 0.5006370 0.5394197 0.6019657 0.6190328 0.6290794 #>  [653,] 0.21250608 0.2751759 0.3391695 0.3751891 0.4101014 0.4463847 0.4832499 #>  [654,] 0.34826490 0.3744052 0.5517060 0.5627216 0.6619813 0.6625490 0.6970221 #>  [655,] 0.93283197 0.9425821 0.9729095 1.2037859 1.2395494 1.2501014 1.2809138 #>  [656,] 0.64038509 0.6452569 0.6929673 0.7209981 0.8190423 0.8260874 0.8419036 #>  [657,] 0.82427476 0.8537963 0.8891291 1.0781723 1.0958168 1.1414508 1.1529229 #>  [658,] 0.44445015 0.5496043 0.6237806 0.6844439 0.8006307 0.8236208 0.8525848 #>  [659,] 0.44513465 0.4897792 0.6473756 0.7589513 0.7874615 0.8225036 0.8803798 #>  [660,] 0.43824386 0.6467422 0.7174468 0.7383614 0.8512911 0.8591322 0.8914220 #>  [661,] 0.14742264 0.4081155 0.4772313 0.4924369 0.5258943 0.5353458 0.5514760 #>  [662,] 0.47054231 0.4894120 0.5347352 0.5595763 0.5900902 0.6053934 0.6195740 #>  [663,] 0.56405142 0.5675040 0.5917501 0.6037713 0.6970221 0.7012369 0.7428445 #>  [664,] 0.28055761 0.4560198 0.4606220 0.4833259 0.5080290 0.6489980 0.6542390 #>  [665,] 0.40465699 0.4304682 0.4690105 0.4700649 0.5050208 0.5257961 0.5331683 #>  [666,] 0.49564140 0.8502016 0.9359437 1.0856037 1.1355880 1.1448269 1.1849583 #>  [667,] 0.61330613 0.6309422 0.6409177 0.6748474 0.6910644 0.8115153 0.8129100 #>  [668,] 0.51440433 0.6506495 0.6726006 0.7231984 0.7413998 0.7759613 0.7770500 #>  [669,] 0.52838165 0.5447042 0.6534746 0.6602232 0.7170351 0.7409901 0.7676066 #>  [670,] 0.41797567 0.4542742 0.5650636 0.5823305 0.6134443 0.6423505 0.6595801 #>  [671,] 0.28039818 0.4545972 0.4644731 0.5409083 0.5474644 0.5637732 0.6320317 #>  [672,] 0.39657248 0.5266565 0.5988548 0.7199880 0.7906473 0.7908548 0.8291375 #>  [673,] 0.24084381 0.3304021 0.4120199 0.4140481 0.4222740 0.4249954 0.4289395 #>  [674,] 0.43369162 0.5197533 0.5378484 0.5735035 0.6326530 0.6384622 0.6427237 #>  [675,] 0.43788933 0.4997300 0.6927205 0.7184799 0.7866388 0.9300915 0.9533618 #>  [676,] 0.56754586 0.5781375 0.6175863 0.7144523 0.7828045 0.8067712 0.8467181 #>  [677,] 0.37680790 0.4189525 0.4937443 0.5528645 0.5723682 0.5835793 0.6505760 #>  [678,] 0.39041162 0.4439548 0.4719171 0.6083888 0.6711182 0.7184024 0.7195689 #>  [679,] 0.25373706 0.3627705 0.4138689 0.4228472 0.4295797 0.4626309 0.4685926 #>  [680,] 0.48052215 0.5567942 0.7069615 0.8884369 0.9215215 0.9288676 0.9869096 #>  [681,] 0.45960309 0.6307546 0.6848895 0.7099501 0.7168200 0.7200368 0.7449747 #>  [682,] 0.42556997 0.5471438 0.5708893 0.6478359 0.7697766 0.8085607 0.8508554 #>  [683,] 0.23847659 0.5073048 0.6240298 0.6769099 0.7575677 0.7703486 0.7717586 #>  [684,] 0.50255608 0.5354552 0.5541845 0.5737718 0.5905660 0.6039246 0.6191079 #>  [685,] 0.58738996 0.6184429 0.7509310 0.7973665 0.8046827 0.9220352 1.0030942 #>  [686,] 0.34131033 0.4516708 0.5374538 0.7240448 0.7349645 0.7368994 0.7696667 #>  [687,] 0.28831152 0.3263812 0.5238447 0.5412136 0.6156315 0.6534598 0.6660028 #>  [688,] 0.48931953 0.5040458 0.5281381 0.6917468 0.7107170 0.7449783 0.7680263 #>  [689,] 0.69849328 0.7440243 0.7693496 0.8004896 0.8428046 0.8576456 0.8677271 #>  [690,] 0.21352367 0.5068012 0.5627216 0.6669016 0.7305029 0.7670597 0.7670752 #>  [691,] 0.26130918 0.3485373 0.5771910 0.6148663 0.6575900 0.6690424 0.7046414 #>  [692,] 0.46846386 0.6009242 0.7180207 0.7926774 0.8282627 0.8359561 0.8374602 #>  [693,] 0.29391918 0.5997700 0.6058511 0.6184226 0.6573040 0.6674390 0.7151542 #>  [694,] 0.27517589 0.3754892 0.3845889 0.4328079 0.4398783 0.5281964 0.5597194 #>  [695,] 0.33590035 0.4105306 0.4150142 0.5331146 0.5597575 0.5630272 0.5837417 #>  [696,] 0.22751586 0.4128979 0.4842601 0.5638201 0.5692521 0.6134731 0.6547860 #>  [697,] 0.38361695 0.4322754 0.4926918 0.5357221 0.6391749 0.6964089 0.7179020 #>  [698,] 0.49269178 0.5766607 0.6391717 0.6471149 0.6646962 0.6667978 0.7735943 #>  [699,] 0.45658768 0.5409483 0.6466036 0.6943531 0.7327903 0.8161062 0.8265430 #>  [700,] 0.61241677 0.6449505 0.6615264 0.6815409 0.7321835 0.8620809 0.8842348 #>  [701,] 0.40954350 0.5003888 0.5819575 0.6164800 0.6757648 0.7231125 0.7297600 #>  [702,] 0.29933878 0.3563927 0.4458593 0.4832499 0.6215502 0.6974313 0.7113928 #>  [703,] 0.25953822 0.5070421 0.5357523 0.6242356 0.6670837 0.6676536 0.8914338 #>  [704,] 0.40002026 0.4557691 0.5225802 0.5805225 0.6358698 0.6718462 0.6830318 #>  [705,] 0.51992510 0.5703682 0.5964065 0.6164915 0.6427270 0.6641285 0.7180120 #>  [706,] 0.35652565 0.4830648 0.5314765 0.6553741 0.6906686 0.7445154 0.7762223 #>  [707,] 0.30558786 0.5222240 0.5479748 0.5775928 0.5992999 0.8384111 0.9763872 #>  [708,] 0.71504571 0.8561305 0.9693441 0.9996213 1.0125310 1.0761060 1.0832864 #>  [709,] 0.41155919 0.4191656 0.4681038 0.5208619 0.5795676 0.5845917 0.6069921 #>  [710,] 0.21244977 0.3114125 0.4950876 0.5778201 0.6362753 0.6864650 0.7237089 #>  [711,] 0.44725961 0.5962153 0.6546358 0.6573239 0.7168200 0.8003907 0.8522962 #>  [712,] 0.36395939 0.4006505 0.4131788 0.4157509 0.4166350 0.4702607 0.4814248 #>  [713,] 0.34223822 0.5488572 0.7263244 0.8383751 0.8579348 0.9099341 1.0080889 #>  [714,] 0.53575226 0.6051691 0.6374033 0.6724805 0.7570800 0.8927318 0.9365318 #>  [715,] 0.31153120 0.4842601 0.5357221 0.5394197 0.6298748 0.6302572 0.6434221 #>  [716,] 0.28437413 0.4198508 0.4291899 0.4476148 0.4655050 0.4840863 0.5626081 #>  [717,] 0.22994126 0.4495252 0.4519592 0.4723005 0.4878343 0.5296030 0.5341617 #>  [718,] 1.01888170 1.3668989 1.6331784 1.7496796 1.8487149 1.8947566 1.9258575 #>  [719,] 0.17429596 0.4122487 0.4205260 0.4912813 0.5130117 0.5187355 0.5308442 #>  [720,] 0.40814314 0.6109514 0.6132749 0.9068059 0.9289984 0.9795672 0.9948731 #>  [721,] 0.41909634 0.5792753 0.5954894 0.6369398 0.6599460 0.6844288 0.7091515 #>  [722,] 0.63568495 0.6963184 0.8129276 0.8258436 0.8444434 0.8727226 0.9076798 #>  [723,] 0.35262564 0.5692521 0.5915688 0.6058192 0.6325950 0.7117749 0.7393903 #>  [724,] 0.23129396 0.4748769 0.4937443 0.5557404 0.5721222 0.6134443 0.6457617 #>  [725,] 0.07225621 0.3491231 0.3795604 0.5221603 0.5291546 0.5613973 0.6100326 #>  [726,] 0.68114830 0.9972865 1.0266433 1.1087902 1.1216382 1.2164524 1.2365170 #>  [727,] 0.24122135 0.3056287 0.5465276 0.5906781 0.6053922 0.6391886 0.6801411 #>  [728,] 0.70084265 0.7135153 0.7419031 0.7605415 0.8050693 0.8296173 0.8530389 #>  [729,] 0.58269670 0.6779635 0.7212267 0.9077286 0.9099292 0.9158575 0.9218954 #>  [730,] 0.35682965 0.4447704 0.6055830 0.6123048 0.6123799 0.6290462 0.6380067 #>  [731,] 0.47793753 0.4874771 0.5215407 0.6160321 0.6313828 0.6376039 0.6817113 #>  [732,] 0.24059656 0.4261513 0.4404567 0.4801752 0.6380428 0.6588811 0.7212767 #>  [733,] 0.35951552 0.4960357 0.5859801 0.5993752 0.6020313 0.6988914 0.7361456 #>  [734,] 0.46260503 0.5001027 0.7026152 0.7509310 0.7530642 0.9438030 1.0177084 #>  [735,] 1.63637406 1.6436283 1.6842393 1.7781923 1.7876359 1.7940164 1.8690612 #>  [736,] 0.62168571 0.6563475 0.6569271 0.6740894 0.6888683 0.6997584 0.7148923 #>  [737,] 0.31914359 0.4587378 0.5227777 0.5295685 0.5743976 0.6598238 0.6611862 #>  [738,] 0.34421634 0.3944156 0.5281381 0.6115298 0.6508106 0.6878421 0.9117278 #>  [739,] 0.22487065 0.3709018 0.5004995 0.5147875 0.5150930 0.5221502 0.5352787 #>  [740,] 0.46260503 0.5208687 0.6174474 0.6742711 0.6883951 0.7973515 0.7973665 #>  [741,] 0.36598685 0.5992999 0.6118236 0.7064581 0.7189778 0.7784527 0.7923479 #>  [742,] 0.51969781 0.5590836 0.6918048 0.7437197 0.8801720 0.9618344 0.9745460 #>  [743,] 0.54005297 0.5782540 0.6275993 0.6396746 0.6583807 0.6646320 0.6699939 #>  [744,] 0.24233517 0.3409857 0.3543735 0.5904456 0.7169006 0.9072662 0.9118374 #>  [745,] 0.62446256 0.7232678 0.7573237 0.7709733 0.7870600 0.7884275 0.7885125 #>  [746,] 1.15611895 1.2617213 1.3270425 1.3361337 1.4236779 1.4304110 1.4852601 #>  [747,] 1.17959862 1.2930921 1.3492912 1.3734848 1.3958514 1.5196893 1.5196914 #>  [748,] 0.38118761 0.4860552 0.5915688 0.6688148 0.7088676 0.7209981 0.7564713 #>  [749,] 0.38562754 0.6169938 0.6862901 0.7169829 0.7779684 0.8946554 0.9638655 #>  [750,] 0.57838841 0.6232580 0.6472784 0.6603805 0.6614751 0.6629343 0.6985526 #>  [751,] 0.43728731 0.4835633 0.4835932 0.5147875 0.5919473 0.6326530 0.6727474 #>  [752,] 0.43363502 0.4787913 0.5445872 0.6134646 0.6326318 0.6423057 0.6852753 #>  [753,] 0.41319063 0.4343683 0.5214899 0.6600334 0.6862512 0.7171496 0.7660662 #>  [754,] 1.93339553 2.1052622 2.1447636 2.3193095 2.3597900 2.3928831 2.4383629 #>  [755,] 0.60003498 0.6211005 0.7180202 0.8076422 0.8163825 0.9288148 0.9478187 #>  [756,] 0.45013186 0.5344986 0.6312164 0.6558101 0.6757648 0.6885145 0.7312867 #>  [757,] 0.68742958 0.7892502 0.8376235 0.8871956 0.9830346 0.9887359 1.0192750 #>  [758,] 0.77812478 0.8001535 0.9281911 0.9695342 1.0003243 1.0505422 1.0555865 #>  [759,] 0.40343130 0.4605179 0.4778595 0.5479327 0.5693574 0.5915493 0.5976929 #>  [760,] 0.67774286 0.6909479 0.7115965 0.8035829 0.8741620 0.9237681 0.9595014 #>  [761,] 0.34028618 0.6323160 0.6751521 0.6929673 0.7195689 0.8355729 0.8960329 #>  [762,] 0.36948845 0.4882941 0.6031988 0.7505207 0.7533245 0.7664468 0.7779867 #>  [763,] 0.31332879 0.3260705 0.3740820 0.4059805 0.4672613 0.5528327 0.5882132 #>  [764,] 0.55281406 0.5975192 0.6242788 0.6320724 0.6347678 0.6527007 0.6945472 #>  [765,] 0.49874377 0.5632382 0.5717832 0.5957708 0.6180137 0.6291188 0.6359516 #>  [766,] 0.78391829 0.7962710 0.8152349 0.8338106 0.8665396 0.8676799 0.9006809 #>  [767,] 0.27386969 0.4349452 0.4406939 0.4554039 0.5668140 0.6069750 0.6472157 #>  [768,] 0.64765223 0.9206887 0.9831047 1.0034599 1.0588642 1.1167362 1.1185540 #>  [769,] 0.23926139 0.3993467 0.4000368 0.4094190 0.4324566 0.5408768 0.5511119 #>  [770,] 0.45724049 0.5056791 0.6033334 0.6155516 0.6168066 0.6347692 0.6735134 #>  [771,] 0.54260343 0.5777249 0.6283086 0.6404512 0.6534741 0.7463122 0.7544069 #>  [772,] 0.65347462 0.7389202 0.7605055 0.8382666 0.8422744 0.8601087 0.9418117 #>  [773,] 0.31979185 0.4213785 0.4341613 0.5367416 0.5472567 0.5486240 0.5576630 #>  [774,] 0.73836767 0.7418223 0.7956301 1.0454216 1.0590251 1.1163439 1.1461185 #>  [775,] 0.86507743 0.8749822 0.9388909 0.9408669 1.0012195 1.0306910 1.0727517 #>  [776,] 1.04829106 1.1561190 1.2111117 1.2472283 1.2698654 1.3318678 1.3910409 #>  [777,] 0.38203086 0.5158753 0.5322481 0.5367416 0.5702650 0.6468908 0.7072381 #>  [778,] 0.67003857 0.9503623 1.1774862 1.1825511 1.2113857 1.2548814 1.2605141 #>  [779,] 0.22777047 0.4115592 0.4874659 0.5072896 0.5211273 0.5533427 0.5654253 #>  [780,] 0.19924239 0.2528981 0.3644804 0.3840508 0.4518578 0.4575262 0.4703776 #>  [781,] 0.76522451 0.7968302 0.8378339 0.8498602 0.8958400 0.9082567 0.9113314 #>  [782,] 0.34966624 0.6161268 0.6440513 0.6703261 0.7298581 0.7489211 0.7563066 #>  [783,] 0.38359296 0.3947110 0.4069538 0.5038205 0.5115946 0.5574878 0.5652159 #>  [784,] 0.51580362 0.5623571 0.7280457 0.7641243 0.7733364 0.8177607 0.8289197 #>  [785,] 0.41514864 0.4834570 0.5551672 0.5563715 0.6047383 0.6213485 0.6298820 #>  [786,] 0.36469635 0.4653359 0.6018846 0.6493763 0.6779757 0.7005254 0.7620996 #>  [787,] 0.84994942 0.9024401 0.9282930 0.9452786 0.9487356 0.9512455 0.9559652 #>  [788,] 0.36469635 0.5027995 0.5533335 0.5607372 0.5720043 0.5879258 0.6224045 #>  [789,] 0.38562754 0.6973906 0.7199620 0.7255400 0.8135092 0.8686249 0.8748506 #>  [790,] 0.37408198 0.4222740 0.4506576 0.4610837 0.4660050 0.4745562 0.5188418 #>  [791,] 0.28745901 0.4241054 0.5379967 0.5497811 0.6259476 0.7024617 0.7545223 #>  [792,] 0.58197013 0.7568219 0.7861065 0.8512336 0.8740337 0.9097483 0.9499604 #>  [793,] 0.54469305 0.5949507 0.6952372 0.7080395 0.7152166 0.7440243 0.7668550 #>  [794,] 0.46791313 0.7697980 0.9697174 1.1154051 1.1360418 1.1391517 1.1764884 #>  [795,] 0.05436257 0.3329386 0.5369331 0.5593836 0.5817469 0.5855578 0.5961896 #>  [796,] 0.31153120 0.3836169 0.5872569 0.6100743 0.6471149 0.6547860 0.6571595 #>  [797,] 0.44045670 0.4647043 0.6068558 0.6934052 0.7320866 0.7336196 0.7337119 #>  [798,] 0.24358437 0.4134796 0.4246627 0.4501795 0.5617958 0.5671104 0.5839306 #>  [799,] 0.57569586 0.6156638 0.7464538 0.7589513 0.8174269 0.8518044 0.8871918 #>  [800,] 0.32358790 0.3607402 0.6207800 0.6552238 0.7373494 0.7670752 0.8576951 #>  [801,] 1.51972407 1.5785633 1.7575647 1.8655653 1.9099171 2.0524997 2.1488770 #>  [802,] 0.64765223 0.9664674 1.0087125 1.0758298 1.1223725 1.1252817 1.1826457 #>  [803,] 0.14742264 0.2998943 0.4840863 0.4841176 0.4888803 0.5497595 0.5544329 #>  [804,] 0.47121832 0.5642437 0.5761952 0.5868243 0.6093107 0.6208529 0.6851223 #>  [805,] 0.64873436 0.7480427 0.9129136 0.9357605 0.9425821 0.9525457 0.9930230 #>  [806,] 0.30310872 0.3033016 0.5518302 0.6355688 0.6522990 0.6718462 0.7368617 #>  [807,] 0.40695384 0.4083699 0.4336916 0.4498424 0.4871976 0.5027466 0.5143762 #>  [808,] 0.86702215 0.8673449 0.8880994 0.8958400 0.8972511 0.9223763 0.9516369 #>  [809,] 0.45118056 0.5783974 0.6023708 0.7307950 0.7842589 0.8272954 0.8353872 #>  [810,] 0.51988226 0.5212235 0.5352787 0.5415427 0.5490644 0.5615352 0.5743892 #>  [811,] 0.32658221 0.6471704 0.7069615 0.7722035 0.7777839 0.8216129 0.8579898 #>  [812,] 0.32658221 0.5567942 0.5649897 0.7556975 0.7888237 0.8984816 0.9866034 #>  [813,] 0.30470909 0.4349452 0.5038490 0.5755439 0.5899536 0.5976929 0.6076638 #>  [814,] 0.43783975 0.4694655 0.5180789 0.5533079 0.5638201 0.5801597 0.5964711 #>  [815,] 0.47191706 0.5243686 0.6016637 0.6503275 0.6589443 0.6893551 0.7231023 #>  [816,] 0.38546652 0.4594133 0.4682843 0.5157577 0.6757034 0.7178657 0.7467777 #>  [817,] 0.38520617 0.9665143 1.0595918 1.0634705 1.2193097 1.2497759 1.3059485 #>  [818,] 0.65211039 0.6933919 0.7032916 0.7041804 0.7315277 0.7336269 0.7483099 #>  [819,] 0.45088309 0.4890732 0.5441104 0.5572703 0.5833123 0.6148663 0.6728709 #>  [820,] 0.72613648 0.7374729 0.7667823 0.7686471 0.9225603 0.9447627 0.9693816 #>  [821,] 1.00880939 1.1339735 1.1665317 1.2750779 1.3240924 1.4751809 1.4996927 #>  [822,] 0.27012358 0.4465556 0.5442154 0.5506643 0.5533405 0.5630446 0.5643653 #>  [823,] 0.28073651 0.4081819 0.4535941 0.4853171 0.5354552 0.6262383 0.6638497 #>  [824,] 0.32358790 0.3801411 0.5901206 0.5935437 0.6370777 0.6392072 0.7687790 #>  [825,] 0.73472031 0.7469769 0.9355043 0.9476679 0.9988555 1.0081850 1.0872648 #>  [826,] 0.38762086 0.4136909 0.4653168 0.4700649 0.4974177 0.5316723 0.5585887 #>  [827,] 0.12206065 0.2404664 0.4649037 0.6449505 0.6883033 0.6894956 0.6900882 #>  [828,] 0.54411883 0.5964065 0.8219601 0.8731124 0.9228385 0.9484335 0.9544902 #>  [829,] 1.40523136 1.4264797 1.5173526 1.7064539 1.8010857 1.8128476 1.8257848 #>  [830,] 0.41712939 0.7595847 0.7893493 0.8650774 0.8681179 0.8700557 0.8915705 #>  [831,] 1.37181920 1.4295861 1.6325542 1.6749400 1.6939810 1.7073152 1.8163462 #>  [832,] 0.29350945 0.4675388 0.4903795 0.5215843 0.5544572 0.6559727 0.6735480 #>  [833,] 0.60968438 0.6264177 0.6567350 0.6845109 0.7235326 0.7948382 0.8005251 #>  [834,] 0.46971624 0.5039256 0.5574902 0.6181340 0.6232848 0.6764361 0.7262914 #>  [835,] 0.37096668 0.4130467 0.4584963 0.4837387 0.5060267 0.5377724 0.5386992 #>  [836,] 0.34089711 0.3647652 0.3704422 0.4448423 0.4461007 0.4534882 0.5308595 #>  [837,] 0.15108740 0.1598299 0.3113926 0.3654141 0.4604046 0.5295835 0.5532869 #>  [838,] 0.57503161 0.6649872 0.6726987 0.7880155 0.8323001 0.8516554 0.9179103 #>  [839,] 0.57194815 0.8671689 1.1163295 1.1736497 1.2170039 1.2613435 1.2774194 #>  [840,] 0.50704205 0.6051691 0.6069211 0.6280845 0.6346902 0.6927205 0.7458319 #>  [841,] 0.28745901 0.3055784 0.4977546 0.5273889 0.7250987 0.7637544 0.7925156 #>  [842,] 0.69577718 0.7530642 0.8009384 0.9367058 0.9453007 0.9741745 1.0144499 #>  [843,] 0.84203949 0.8873737 1.1337951 1.2198473 1.2473449 1.2703729 1.2957811 #>  [844,] 0.44368466 0.4439548 0.5030812 0.5050678 0.5919143 0.6323160 0.7116706 #>  [845,] 0.26628857 0.2856352 0.4162734 0.4762736 0.5006370 0.5066583 0.5285104 #>  [846,] 0.34421634 0.7095562 0.7107170 0.8022505 0.8144928 0.9944729 1.0675728 #>  [847,] 0.26660384 0.4738609 0.5467673 0.6291859 0.6542390 0.6720716 0.6758638 #>  [848,] 0.33064825 0.5074940 0.5343601 0.5466979 0.6372851 0.6444439 0.6468161 #>  [849,] 0.37531456 0.3945620 0.4606220 0.4918858 0.4931523 0.5551872 0.5558349 #>  [850,] 0.37044221 0.3892261 0.4129796 0.4492418 0.4721679 0.5263382 0.5932556 #>  [851,] 0.51752408 0.5469747 0.6292891 0.6313136 0.6439247 0.6490084 0.6625685 #>  [852,] 0.45431656 0.4932539 0.5474323 0.5659348 0.6197098 0.6690904 0.7080189 #>  [853,] 0.32925054 0.4836203 0.5421734 0.5437653 0.5497907 0.5693574 0.6066469 #>  [854,] 0.39034112 0.5472223 0.6560286 0.6759517 0.7753653 0.7928052 0.8415548 #>  [855,] 0.36428810 0.4111151 0.5365471 0.6354636 0.6523529 0.7738999 0.7891790 #>  [856,] 0.17734483 0.4083699 0.5038205 0.5056992 0.6352637 0.6576556 0.6691525 #>  [857,] 0.68682126 0.7152166 0.8004896 0.9624477 0.9810009 1.1152820 1.2229074 #>  [858,] 0.52706978 0.5283817 0.7331551 0.7355976 0.7389202 0.7787994 0.8022448 #>  [859,] 0.35652565 0.4524417 0.5167080 0.6226558 0.6299839 0.6551671 0.7880155 #>  [860,] 0.82434602 0.8784327 0.8952869 0.9312747 1.0688241 1.2121888 1.2334104 #>  [861,] 0.28196509 0.3662415 0.3889542 0.4004170 0.5003888 0.5233606 0.5339098 #>  [862,] 0.07225621 0.3072167 0.4418527 0.4667414 0.5468166 0.5860900 0.5964711 #>  [863,] 0.42692727 0.4338706 0.4606803 0.4721475 0.4973359 0.5155913 0.5444548 #>  [864,] 0.29239783 0.3042058 0.3946723 0.4140481 0.4291899 0.4435316 0.4506576 #>  [865,] 0.40128632 0.4513847 0.4752968 0.5018500 0.5496043 0.5904456 0.6362210 #>  [866,] 0.35161288 0.5704698 0.5929770 0.6005470 0.6897845 0.7020173 0.7028372 #>  [867,] 0.33619379 0.3568296 0.4765060 0.5001645 0.6378900 0.6910897 0.7182341 #>  [868,] 0.43947267 0.5196978 0.5659348 0.7670429 0.8117174 0.8134168 0.8531119 #>  [869,] 0.50083511 0.5430107 0.5646808 0.6434221 0.6848730 0.7098718 0.7187821 #>  [870,] 0.56724851 1.0509428 1.0774524 1.1034576 1.1869207 1.2168950 1.2212544 #>  [871,] 0.33692534 0.4178748 0.5374538 0.6857486 0.6952841 0.7237138 0.7934165 #>  [872,] 1.23084517 1.4440003 1.5013923 1.5116276 1.5212037 1.5560469 1.5822743 #>  [873,] 0.52048419 0.9336870 1.0802490 1.0914923 1.2395494 1.2974345 1.3018097 #>  [874,] 0.40485758 0.4133211 0.4169628 0.4556631 0.5402373 0.5483920 0.5628119 #>  [875,] 0.53004164 0.8853389 1.1591558 1.1667106 1.2015185 1.2317163 1.2594186 #>  [876,] 0.55474410 0.6221426 0.7025102 0.7890208 0.8457584 0.8501048 0.8789460 #>  [877,] 0.12143197 0.4535941 0.5287785 0.5462578 0.5623455 0.5765948 0.5900902 #>  [878,] 0.52801276 0.5750316 0.6018846 0.6299839 0.6441897 0.7876722 0.8117174 #>  [879,] 0.48334236 0.5308754 0.6133061 0.6285018 0.7407575 0.7448498 0.7634141 #>  [880,] 0.28525084 0.4061283 0.4226488 0.5509403 0.5558888 0.5614801 0.5662263 #>  [881,] 0.51330823 0.6841272 0.7697980 0.7891790 0.8311658 0.8865604 0.8982653 #>  [882,] 0.44280901 0.7135153 0.7334298 0.7354312 0.8181246 0.8222658 0.8294935 #>  [883,] 0.38279950 0.4521602 0.5474395 0.5478030 0.5886540 0.6104980 0.6349061 #>  [884,] 0.63918156 0.7401387 0.7846227 0.7903408 0.9123443 0.9152961 0.9489332 #>  [885,] 0.29217858 0.3132695 0.3305500 0.4163414 0.4233472 0.4296030 0.4905638 #>  [886,] 0.54046719 0.6637766 0.6738045 0.6928634 0.6999778 0.7010327 0.7186084 #>  [887,] 0.56837870 0.6504910 0.7895354 0.8140225 0.9121493 0.9177326 0.9350308 #>  [888,] 0.29072697 0.3297114 0.4826490 0.5040328 0.5580378 0.5617065 0.6151595 #>  [889,] 0.45216020 0.4777534 0.5438666 0.5532352 0.5853102 0.5863282 0.6259172 #>  [890,] 0.62646320 0.6426497 0.6917711 0.7325698 0.8456948 0.8604582 0.8970974 #>  [891,] 0.40684431 0.4447767 0.4723797 0.5841859 0.6327965 0.6562090 0.6947378 #>  [892,] 0.52895676 0.9280731 0.9667390 1.0192356 1.1032075 1.1635289 1.2048387 #>  [893,] 0.24647757 0.3397002 0.3624759 0.4134796 0.4574274 0.4923081 0.4970652 #>  [894,] 0.38854271 0.4604046 0.4917106 0.5328126 0.5655595 0.6201605 0.6308008 #>  [895,] 0.38887852 0.3893484 0.4122098 0.4878343 0.5415427 0.5726673 0.5934664 #>  [896,] 0.83972014 0.8842893 0.9148114 0.9391374 1.0439167 1.1450328 1.1469954 #>  [897,] 0.43728731 0.4698290 0.5191220 0.5197533 0.5783641 0.5792453 0.6022168 #>  [898,] 1.04967994 1.1869207 1.2592649 1.3701433 1.4560480 1.5321760 1.5773499 #>  [899,] 0.26703603 0.3942819 0.4153354 0.4251269 0.4275584 0.4902061 0.5422341 #>  [900,] 0.77693231 0.7956301 0.8562537 0.8961951 0.9255770 0.9679393 1.0013866 #>  [901,] 0.48351763 0.5310611 0.5529674 0.5887522 0.6177255 0.6209007 0.6240298 #>  [902,] 0.36585876 0.4487777 0.4970343 0.6452569 0.6751521 0.6979791 0.7334235 #>  [903,] 0.62257576 0.8916950 0.9092610 0.9148814 0.9598810 1.0496799 1.0509428 #>  [904,] 0.60570733 0.6368831 0.6963184 0.6984915 0.7031111 0.8028770 0.8360344 #>  [905,] 0.44890882 0.4669566 0.5493006 0.5845917 0.5875904 0.5896788 0.6000621 #>  [906,] 0.78928878 0.8316041 1.0329292 1.0507154 1.0769346 1.1189578 1.1733609 #>  [907,] 0.46490374 0.4675330 0.4907018 0.5111573 0.5192381 0.5303312 0.5824301 #>  [908,] 0.71389741 0.7781248 0.8033898 0.8704937 0.8992172 0.9149836 0.9425688 #>  [909,] 0.44072838 0.5069673 0.5402373 0.5541609 0.5688061 0.5777249 0.6181586 #>  [910,] 0.64710423 0.7034365 0.8067712 0.8185176 0.8658694 0.8851231 0.9605944 #>  [911,] 0.35116518 0.3629968 0.4160145 0.4723797 0.5319814 0.5538741 0.5547885 #>  [912,] 0.21352367 0.6134340 0.6207800 0.6370777 0.6454476 0.6619813 0.7572092 #>  [913,] 0.33249324 0.4169620 0.4622279 0.4955209 0.5050208 0.5203350 0.5389581 #>  [914,] 0.34131033 0.4178748 0.5353924 0.5448504 0.5885768 0.6028036 0.6392074 #>  [915,] 0.33694822 0.3874356 0.4407284 0.4903795 0.4931865 0.5066825 0.5483920 #>  [916,] 0.51670805 0.6441897 0.6649872 0.6872391 0.7145027 0.7403431 0.7836125 #>  [917,] 0.35626607 0.3573839 0.4544820 0.4954232 0.5758246 0.7103201 0.7142358 #>  [918,] 0.51534547 0.5479748 0.6084951 0.6550894 0.6899891 0.7382215 0.8010813 #>  [919,] 0.35370574 0.4130467 0.4259864 0.4763288 0.5465276 0.5497907 0.5532494 #>  [920,] 0.65857245 0.7235320 0.7473426 0.7514427 0.8320643 0.9362408 1.0223418 #>  [921,] 0.40811039 0.4343940 0.4794127 0.5526603 0.5815361 0.5909017 0.6233022 #>  [922,] 0.29239783 0.3628757 0.3806329 0.3975834 0.4198508 0.4247982 0.4415927 #>  [923,] 0.44445015 0.4752968 0.6122033 0.6218226 0.6358698 0.6815881 0.7490173 #>  [924,] 0.47475699 0.5317580 0.6347692 0.6421356 0.6698603 0.6854614 0.7025102 #>  [925,] 0.56651952 0.6000350 0.6430817 0.6487800 0.7056230 0.7123995 0.9400016 #>  [926,] 0.21623136 0.7343673 0.7544069 0.7568219 0.8139639 0.8171454 0.8685452 #>  [927,] 0.38802136 0.6261636 0.6563504 0.7567548 0.8652370 0.9007194 0.9197968 #>  [928,] 0.19851580 0.2480127 0.2595185 0.2998028 0.4216882 0.4790806 0.4844364 #>  [929,] 0.24768764 0.4070733 0.4801752 0.5320364 0.5885329 0.5951107 0.6180137 #>  [930,] 0.41111509 0.4689935 0.5281116 0.7128811 0.8216656 0.8311658 0.9148114 #>  [931,] 0.37854364 0.5528645 0.7237951 0.7464151 0.7521859 0.7543793 0.8436975 #>  [932,] 0.58322753 0.6017010 0.6058511 0.6632120 0.6663282 0.6750548 0.6763189 #>  [933,] 0.30721671 0.3491231 0.4128979 0.4211347 0.5180789 0.5445872 0.5541596 #>  [934,] 0.63618264 0.7913270 1.0200636 1.0751167 1.1516809 1.1714697 1.1800360 #>  [935,] 0.49904592 0.5126070 0.5400530 0.5619886 0.5623151 0.5879201 0.5918710 #>  [936,] 0.39601384 0.4295797 0.4324178 0.4574274 0.4731851 0.5072757 0.5313998 #>  [937,] 0.40665504 0.6394288 0.6488360 0.7184799 0.7854926 0.8357568 0.8931079 #>  [938,] 0.35928091 0.5384767 0.5684771 0.6084951 0.6095465 0.6132941 0.6212375 #>  [939,] 0.45860889 0.5142012 0.6498934 0.6574365 0.6938021 0.6996989 0.7145141 #>  [940,] 0.44729776 0.4954232 0.5553131 0.6372699 0.6481771 0.7010359 0.7070724 #>  [941,] 0.44477673 0.4848567 0.5225046 0.5319814 0.6026385 0.6067572 0.6159368 #>  [942,] 0.28426960 0.3903312 0.4205260 0.4424163 0.5552408 0.5718479 0.6008196 #>  [943,] 0.34028618 0.4970343 0.5050678 0.5892991 0.6472784 0.6711182 0.7419259 #>  [944,] 0.77745259 1.3059485 1.4445230 1.5236912 1.5416877 1.5543139 1.5620273 #>  [945,] 0.33850101 0.5421734 0.6324686 0.6357903 0.6405612 0.6472157 0.6857752 #>  [946,] 0.49593858 0.5901206 0.5982415 0.6225862 0.6552238 0.7383614 0.7413998 #>  [947,] 0.40124348 0.4178960 0.4587061 0.4702607 0.4973359 0.5122991 0.5614801 #>  [948,] 0.21250608 0.2501038 0.2993388 0.3750427 0.4328079 0.5788295 0.6117522 #>  [949,] 0.44068098 0.4970652 0.5040328 0.5228965 0.5617958 0.5628880 0.5885768 #>  [950,] 0.45009408 0.5193924 0.5574902 0.5945031 0.5969594 0.6679895 0.6684390 #>  [951,] 0.61713542 0.7840499 0.8484135 0.8847955 0.9179738 0.9533618 1.0095016 #>  [952,] 0.58725687 0.6107828 0.6134731 0.6325950 0.6543379 0.6586315 0.7113278 #>  [953,] 0.38520617 0.9149404 1.1005827 1.2259787 1.2412613 1.4308519 1.4445230 #>  [954,] 0.39441558 0.3956153 0.4249315 0.4893195 0.6774372 0.6996989 0.7095562 #>  [955,] 0.46867271 0.5660540 0.5764362 0.6207284 0.6550894 0.6692448 0.6794818 #>  [956,] 0.65211039 0.6595054 0.7060499 0.7967881 0.9633786 0.9705757 0.9729762 #>  [957,] 0.28400738 0.2856352 0.3779593 0.3987657 0.4365657 0.5220520 0.5374557 #>  [958,] 0.30036151 0.4560198 0.5235791 0.5847027 0.6127638 0.6134340 0.6166914 #>  [959,] 0.37511379 0.6100159 0.6373450 0.6858376 0.7488147 0.7585214 0.7747626 #>  [960,] 0.34826490 0.5608899 0.5640514 0.5818140 0.6308159 0.6561759 0.6731479 #>  [961,] 0.41647986 0.4261505 0.5628983 0.6057073 0.6380059 0.6500211 0.6507969 #>  [962,] 0.46459145 0.5704698 0.5845751 0.5948818 0.6285018 0.6674147 0.6699939 #>  [963,] 0.25373706 0.4191656 0.4417516 0.4543315 0.5211273 0.5279635 0.5441929 #>  [964,] 0.47379231 0.4763288 0.5060267 0.5118809 0.5326964 0.6376440 0.6699247 #>  [965,] 1.82813609 1.8567239 1.8858125 1.8982941 1.9114147 1.9770410 1.9782031 #>  [966,] 0.60812333 0.7485180 0.8060881 0.9425688 1.0025298 1.1263498 1.1549634 #>  [967,] 0.36598685 0.5222240 0.6459002 0.6849674 0.8113419 0.9490315 0.9504085 #>  [968,] 0.46240018 0.5175738 0.6421754 0.6893253 0.7210081 0.7547483 0.8281262 #>  [969,] 0.24647757 0.2647483 0.3224240 0.3960138 0.4228472 0.4826490 0.4948715 #>  [970,] 0.74913945 0.9199303 1.1164795 1.1315964 1.1849655 1.1875670 1.2621420 #>  [971,] 0.35430432 0.4006505 0.4012843 0.4156072 0.4849038 0.4902061 0.4996193 #>  [972,] 0.21503944 0.2339825 0.4636258 0.4880371 0.5009706 0.5029495 0.5538741 #>  [973,] 0.43824386 0.4959386 0.6411537 0.6621927 0.6753131 0.7231984 0.7795083 #>  [974,] 0.47330314 0.5775928 0.6849674 0.8755803 0.9895281 1.0120999 1.0253384 #>  [975,] 0.37767953 0.9021871 0.9805746 1.0797145 1.1222177 1.1838878 1.2081758 #>  [976,] 0.44541159 0.4595464 0.6308841 0.6734350 0.6763501 0.6840259 0.6858314 #>  [977,] 1.08560373 1.1004359 1.2266108 1.2469989 1.3199185 1.3366558 1.3709032 #>  [978,] 0.51795750 0.5794443 0.6769099 0.7298581 0.7573399 0.7853911 0.7894800 #>  [979,] 0.31926014 0.4286959 0.4651922 0.4821240 0.5015476 0.5082532 0.5121058 #>  [980,] 0.75726306 0.9229089 1.0147165 1.2619771 1.3815769 1.4485948 1.5146813 #>  [981,] 0.44651008 0.4736869 0.5548181 0.5910541 0.6063276 0.6326939 0.6444586 #>  [982,] 0.45825394 0.4997300 0.5474198 0.7390887 0.7844443 0.8246239 0.8357568 #>  [983,] 0.50758768 0.6261636 0.6861735 0.7106183 0.7380868 0.7651023 0.8123643 #>  [984,] 0.38334300 0.5166308 0.5478030 0.5729615 0.5997434 0.6050738 0.6499016 #>  [985,] 0.43456064 0.4756598 0.5673140 0.6961887 0.7533313 0.7641243 0.7688521 #>  [986,] 0.43124256 0.5181151 0.5396211 0.6014812 0.6080580 0.6167925 0.6257449 #>  [987,] 0.49325387 0.5096453 0.5952244 0.5971184 0.7664540 0.8106143 0.8336854 #>  [988,] 0.55119319 0.5667022 0.5879333 0.6270364 0.6613996 0.6881668 0.7044324 #>  [989,] 0.28055761 0.5390139 0.6400758 0.6687752 0.7113676 0.7284437 0.7426414 #>  [990,] 0.33300737 0.4632213 0.4716497 0.6014812 0.6946292 0.7204851 0.7724340 #>  [991,] 0.24059656 0.4647043 0.5303282 0.5320364 0.5430612 0.6167799 0.6407832 #>  [992,] 0.50083511 0.5477312 0.5813181 0.5818223 0.6087802 0.6150751 0.6570931 #>  [993,] 0.38414633 0.4162583 0.5107633 0.5175382 0.5220520 0.5534629 0.5538331 #>  [994,] 0.86208091 0.9375075 0.9647525 0.9647548 0.9765842 1.0470031 1.1190381 #>  [995,] 0.35191575 0.4536358 0.4791877 0.5665195 0.5927297 0.6299525 0.6423057 #>  [996,] 0.37616749 0.5982415 0.6411537 0.6467422 0.6600334 0.6674011 0.7793111 #>  [997,] 0.58598012 0.6481771 0.6490013 0.6554812 0.6967097 0.7103201 0.7243857 #>  [998,] 0.90041773 0.9705374 1.0241952 1.0394610 1.1035258 1.1713249 1.1804145 #>  [999,] 0.35297632 0.4921272 0.5524622 0.5884487 0.6289649 0.6482118 0.6533306 #> [1000,] 0.27747188 0.5024509 0.5035524 0.5215407 0.5258943 0.5544329 0.5750257 #>              [,8]      [,9]     [,10] #>    [1,] 0.9389066 0.9580609 1.0200914 #>    [2,] 1.0335124 1.1562250 1.1735355 #>    [3,] 0.7154262 0.7483099 0.7801781 #>    [4,] 0.7029260 0.7447326 0.8108092 #>    [5,] 0.8156117 0.8367964 0.8420984 #>    [6,] 0.5902208 0.5985229 0.6149169 #>    [7,] 0.9418733 0.9928396 1.0011504 #>    [8,] 1.8859820 1.9321262 1.9368693 #>    [9,] 0.6744410 0.6991079 0.7010520 #>   [10,] 0.6259112 0.6270920 0.6481637 #>   [11,] 0.6178973 0.6432647 0.6499016 #>   [12,] 1.3740892 1.3879194 1.4329489 #>   [13,] 0.8474510 0.9421114 1.0008613 #>   [14,] 0.9206887 0.9309489 0.9579786 #>   [15,] 0.6933873 0.6980865 0.7000189 #>   [16,] 0.6405242 0.6521748 0.6533719 #>   [17,] 0.5541609 0.6048940 0.6069403 #>   [18,] 0.8249525 0.8309789 0.8327063 #>   [19,] 0.6542852 0.6577190 0.7060626 #>   [20,] 0.6776461 0.6904046 0.6977661 #>   [21,] 1.3806500 1.3863242 1.4041047 #>   [22,] 1.2052673 1.2215730 1.2462095 #>   [23,] 0.7377538 0.7991636 0.8035652 #>   [24,] 0.4698111 0.4790806 0.5595763 #>   [25,] 0.5949216 0.6050738 0.6395630 #>   [26,] 0.7706714 0.7836125 0.8255034 #>   [27,] 0.7795937 0.9989433 1.0652024 #>   [28,] 0.7158777 0.7200851 0.7225990 #>   [29,] 0.6269852 0.6577709 0.6727474 #>   [30,] 0.5655669 0.5849979 0.6214139 #>   [31,] 0.8202739 0.8745458 0.8984816 #>   [32,] 1.0916376 1.1012312 1.1114002 #>   [33,] 1.4268844 1.4400738 1.4593506 #>   [34,] 1.2282854 1.2706196 1.3210864 #>   [35,] 0.8499795 0.8869143 0.8935678 #>   [36,] 0.9127610 0.9266831 0.9704526 #>   [37,] 0.6161268 0.6579730 0.6600662 #>   [38,] 0.9745460 0.9751550 1.0346858 #>   [39,] 0.7086079 0.7171952 0.7683751 #>   [40,] 0.8405078 0.8717815 0.8979345 #>   [41,] 1.9766367 1.9847651 1.9952903 #>   [42,] 0.7699424 0.7837003 0.8113419 #>   [43,] 1.6966305 1.7600969 1.7661748 #>   [44,] 0.5743976 0.6170603 0.6279357 #>   [45,] 0.8338106 0.8397666 0.8647643 #>   [46,] 0.9207194 0.9309489 0.9391374 #>   [47,] 0.7170351 0.7415126 0.8083606 #>   [48,] 0.9067075 0.9500128 1.0223188 #>   [49,] 0.6442117 0.6518659 0.6560120 #>   [50,] 1.6041579 1.6198052 1.6281773 #>   [51,] 0.9459727 0.9919171 1.0430247 #>   [52,] 1.3133536 1.3656359 1.3731857 #>   [53,] 0.6051877 0.6119527 0.6142247 #>   [54,] 0.5650636 0.6117522 0.6377904 #>   [55,] 0.6613996 0.7197604 0.7233092 #>   [56,] 0.6226196 0.6399835 0.6505610 #>   [57,] 0.6670837 0.6941987 0.7424544 #>   [58,] 1.3988911 1.4303916 1.4857756 #>   [59,] 0.6035717 0.6043617 0.6506648 #>   [60,] 0.6123411 0.6338110 0.6378900 #>   [61,] 0.7918346 0.7922414 0.8024976 #>   [62,] 0.7148923 0.7200368 0.7377199 #>   [63,] 0.6892950 0.6897973 0.6989012 #>   [64,] 0.6779757 0.7153828 0.7445154 #>   [65,] 1.5841548 1.5924489 1.6672828 #>   [66,] 0.8457268 0.8486365 0.8941550 #>   [67,] 0.5759180 0.5787502 0.5844678 #>   [68,] 0.6423170 0.7086036 0.7146119 #>   [69,] 0.7525923 0.7677468 0.7879780 #>   [70,] 1.1517840 1.1957860 1.2802693 #>   [71,] 0.8354358 0.8833747 0.8998936 #>   [72,] 1.1852384 1.1872614 1.1888981 #>   [73,] 0.6475042 0.6675636 0.7008813 #>   [74,] 1.0565746 1.0608794 1.0853772 #>   [75,] 0.6323096 0.6349591 0.6507055 #>   [76,] 1.1263787 1.1429098 1.1513319 #>   [77,] 0.7112503 0.7371792 0.7593076 #>   [78,] 0.9270850 0.9516965 0.9621626 #>   [79,] 1.2444478 1.2651966 1.3448659 #>   [80,] 0.6004558 0.6394729 0.6785223 #>   [81,] 0.7154882 0.7157185 0.7237089 #>   [82,] 0.6528583 0.6770721 0.6838578 #>   [83,] 0.5853720 0.5952019 0.5984217 #>   [84,] 0.6069750 0.6076638 0.6249615 #>   [85,] 1.0557943 1.1284738 1.1427414 #>   [86,] 0.5650915 0.6764644 0.7715179 #>   [87,] 0.8224433 0.8233109 0.8330204 #>   [88,] 1.3259909 1.3267241 1.3302553 #>   [89,] 0.7347286 0.7400530 0.7543793 #>   [90,] 0.6681544 0.6684610 0.7263791 #>   [91,] 0.5978282 0.6053594 0.6203943 #>   [92,] 0.7932982 0.8144928 0.8389731 #>   [93,] 1.1258855 1.1281941 1.1386233 #>   [94,] 0.6145990 0.6347491 0.6433840 #>   [95,] 1.0856272 1.1601842 1.1875448 #>   [96,] 0.7040939 0.7113928 0.7421289 #>   [97,] 0.5778628 0.5945437 0.6244764 #>   [98,] 0.6395630 0.6440272 0.6468400 #>   [99,] 0.8181230 0.8378066 0.8652370 #>  [100,] 1.0046890 1.0282230 1.0687982 #>  [101,] 0.6653337 0.6980924 0.7139909 #>  [102,] 1.2515697 1.2536532 1.2559324 #>  [103,] 0.6095465 0.6495591 0.6729406 #>  [104,] 1.3441586 1.3600865 1.4683509 #>  [105,] 0.8374602 0.8399429 0.8708980 #>  [106,] 0.9036230 0.9259755 0.9963848 #>  [107,] 0.6794824 0.6798540 0.6904046 #>  [108,] 0.7485508 0.7539051 0.7622362 #>  [109,] 1.0159909 1.0197785 1.0274325 #>  [110,] 0.6019657 0.6119822 0.6488743 #>  [111,] 0.6972767 0.7167446 0.7280761 #>  [112,] 0.6119527 0.6185627 0.6377904 #>  [113,] 0.4987438 0.5266120 0.5347352 #>  [114,] 1.0420522 1.0494875 1.0684998 #>  [115,] 0.5448946 0.5486240 0.5737761 #>  [116,] 0.6825321 0.6851223 0.7225457 #>  [117,] 0.5554115 0.5582138 0.5910309 #>  [118,] 0.7526831 0.7676729 0.8045865 #>  [119,] 0.7649292 0.8070369 0.8643401 #>  [120,] 0.6444439 0.7293420 0.7464190 #>  [121,] 0.7275148 0.7533245 0.7684368 #>  [122,] 0.7086079 0.7329005 0.7388036 #>  [123,] 0.7417714 0.7713589 0.8154413 #>  [124,] 0.5996684 0.6230658 0.6380611 #>  [125,] 0.9887359 0.9969946 1.0364863 #>  [126,] 0.5935804 0.6069921 0.6089652 #>  [127,] 1.0664730 1.0850669 1.1133225 #>  [128,] 0.7205246 0.7243857 0.7361219 #>  [129,] 0.5885329 0.6184903 0.6301138 #>  [130,] 0.9141577 0.9441428 0.9599323 #>  [131,] 0.4997462 0.6033031 0.6041805 #>  [132,] 0.6705419 0.6929626 0.7378209 #>  [133,] 0.7781119 0.8085239 0.8225771 #>  [134,] 0.8927318 0.8977046 0.9116926 #>  [135,] 0.9819251 0.9931177 1.0718311 #>  [136,] 1.0709050 1.0790228 1.1091112 #>  [137,] 0.7917034 0.8270570 0.8434426 #>  [138,] 0.7278976 0.7281699 0.7450423 #>  [139,] 0.8135092 0.8802029 0.8946554 #>  [140,] 0.7641211 0.7684971 0.8214862 #>  [141,] 0.6725370 0.6792953 0.6807592 #>  [142,] 0.6938171 0.7049195 0.7060369 #>  [143,] 0.6508256 0.6594423 0.6777555 #>  [144,] 0.7688061 0.7824292 0.7871855 #>  [145,] 0.8761738 0.8909031 0.9032800 #>  [146,] 0.8212089 0.8323403 0.8383499 #>  [147,] 1.3399796 1.3471612 1.3670141 #>  [148,] 0.9333103 0.9334037 0.9559044 #>  [149,] 0.7763963 0.7924280 0.7984464 #>  [150,] 0.6380914 0.6452430 0.6788134 #>  [151,] 0.5721511 0.5818246 0.5912640 #>  [152,] 0.6841256 0.7463117 0.7584978 #>  [153,] 0.9779734 1.0404101 1.1150985 #>  [154,] 0.8527695 0.8734358 0.8779811 #>  [155,] 1.1964636 1.3080277 1.3294362 #>  [156,] 0.7779684 0.8192510 0.8216821 #>  [157,] 0.8263864 0.8327620 0.8387262 #>  [158,] 0.8003907 0.8090348 0.8163043 #>  [159,] 0.5661522 0.5703916 0.6300410 #>  [160,] 0.9598810 0.9783266 0.9830574 #>  [161,] 1.0205786 1.0485318 1.0691549 #>  [162,] 0.9327432 0.9984584 0.9986253 #>  [163,] 0.6058955 0.6142737 0.6207724 #>  [164,] 0.7354312 0.7437830 0.7635075 #>  [165,] 0.6775714 0.7458089 0.7841164 #>  [166,] 0.6651105 0.7152507 0.7482946 #>  [167,] 1.4408900 1.5019796 1.5144042 #>  [168,] 0.6208529 0.6263363 0.6315479 #>  [169,] 0.5617436 0.5632154 0.5831062 #>  [170,] 0.7806582 0.7825461 0.8289785 #>  [171,] 1.2916004 1.2930737 1.3373520 #>  [172,] 1.5299632 1.5651570 1.5683740 #>  [173,] 1.1531013 1.1571306 1.2159803 #>  [174,] 1.0419953 1.0586190 1.0634575 #>  [175,] 0.5053761 0.5271690 0.5493006 #>  [176,] 0.7189778 0.7307287 0.7594205 #>  [177,] 0.6737288 0.7080390 0.7442455 #>  [178,] 1.0305684 1.0370352 1.0471607 #>  [179,] 0.7020173 0.7333094 0.7340318 #>  [180,] 0.6721514 0.6893551 0.6928634 #>  [181,] 0.8247147 0.8367964 0.8660187 #>  [182,] 1.2245306 1.2552856 1.2696273 #>  [183,] 0.5718479 0.5805988 0.6090903 #>  [184,] 0.7012559 0.7294668 0.7406987 #>  [185,] 0.8447793 0.9639302 0.9647183 #>  [186,] 0.6438825 0.6530865 0.6807904 #>  [187,] 1.2158586 1.2327580 1.2931224 #>  [188,] 0.8622367 0.8661677 0.8851231 #>  [189,] 0.7534697 0.7844186 0.7872931 #>  [190,] 0.7609478 0.7777228 0.7900266 #>  [191,] 0.8443812 0.8460006 0.8465583 #>  [192,] 0.7585214 0.7621788 0.7640708 #>  [193,] 0.6894521 0.6899891 0.7013864 #>  [194,] 0.6163646 0.6210719 0.6300776 #>  [195,] 0.7730187 0.7919979 0.8000166 #>  [196,] 1.7301413 1.7385871 1.7882955 #>  [197,] 0.8189401 0.8530389 0.8903297 #>  [198,] 0.5833008 0.5897932 0.6039246 #>  [199,] 0.6475072 0.6499539 0.6544035 #>  [200,] 0.7347286 0.7529234 0.7648270 #>  [201,] 0.8300131 0.8653160 0.9199414 #>  [202,] 0.7052231 0.7094861 0.7269452 #>  [203,] 0.7703486 0.7929224 0.8028090 #>  [204,] 1.7015032 1.7075756 1.7377030 #>  [205,] 1.1671519 1.2303281 1.2532049 #>  [206,] 1.0881633 1.1011764 1.1069510 #>  [207,] 1.8541803 1.8723602 1.9420445 #>  [208,] 1.3519818 1.3765162 1.3867318 #>  [209,] 0.8202739 0.8218461 0.8264869 #>  [210,] 0.6881758 0.6904662 0.6955331 #>  [211,] 1.0256017 1.0866987 1.0901580 #>  [212,] 0.7019582 0.7292610 0.7692108 #>  [213,] 1.3310149 1.3615161 1.3632710 #>  [214,] 1.0819604 1.1285984 1.2048387 #>  [215,] 0.6308008 0.6454378 0.6530060 #>  [216,] 1.0272108 1.0274157 1.0823112 #>  [217,] 0.8312935 0.8523928 0.8664292 #>  [218,] 0.9036931 0.9194199 0.9282883 #>  [219,] 0.8310013 0.8371767 0.8473660 #>  [220,] 0.7364177 0.7976026 0.8001558 #>  [221,] 0.7485457 0.7590344 0.7907426 #>  [222,] 0.6551930 0.6613106 0.6646608 #>  [223,] 0.8028770 0.8171998 0.8402992 #>  [224,] 1.0210851 1.0604504 1.0638775 #>  [225,] 1.7301413 1.7710011 1.8703071 #>  [226,] 0.7203430 0.7634401 0.7701939 #>  [227,] 1.0803335 1.0884642 1.1656796 #>  [228,] 0.6801493 0.7842481 0.8060537 #>  [229,] 1.3540428 1.3694386 1.3904498 #>  [230,] 0.7180207 0.7197042 0.7646009 #>  [231,] 0.9560244 0.9581735 0.9587519 #>  [232,] 1.1875448 1.2031833 1.2216533 #>  [233,] 0.8893263 0.9020396 0.9214203 #>  [234,] 0.9055712 0.9092126 0.9228595 #>  [235,] 1.6239185 1.6541831 1.7081941 #>  [236,] 1.5457087 1.5485574 1.5715763 #>  [237,] 0.5082532 0.5111948 0.5324390 #>  [238,] 1.2055188 1.2634031 1.3786264 #>  [239,] 0.9297913 0.9373477 0.9795672 #>  [240,] 0.6047286 0.6423505 0.6463942 #>  [241,] 0.6729510 0.6742909 0.6896525 #>  [242,] 0.9021859 0.9076798 0.9085474 #>  [243,] 1.0770140 1.1191857 1.1323468 #>  [244,] 1.1090953 1.1168017 1.1375018 #>  [245,] 1.0206289 1.0576563 1.0605048 #>  [246,] 0.6420976 0.7754245 0.8072575 #>  [247,] 0.7233977 0.7706190 0.7816996 #>  [248,] 0.6039837 0.6206211 0.6236329 #>  [249,] 0.6580577 0.6735517 0.6895542 #>  [250,] 1.5524646 1.6026381 1.6696399 #>  [251,] 0.5788910 0.5800134 0.6242311 #>  [252,] 0.8055401 0.8602518 0.8868338 #>  [253,] 0.7022563 0.7262914 0.7551296 #>  [254,] 0.7399709 0.7541541 0.7752569 #>  [255,] 0.5932556 0.6231802 0.6271057 #>  [256,] 0.9900062 0.9927246 1.0190640 #>  [257,] 0.5702650 0.5737761 0.5824301 #>  [258,] 0.8461347 0.8778150 0.9046363 #>  [259,] 0.9732803 0.9749236 0.9762060 #>  [260,] 0.5073624 0.5089865 0.5734999 #>  [261,] 0.8134997 0.8778229 0.9207785 #>  [262,] 0.6192323 0.6282968 0.6379172 #>  [263,] 0.5639932 0.5869166 0.5982491 #>  [264,] 0.7754741 0.7826221 0.7976617 #>  [265,] 0.5710941 0.5742342 0.5889542 #>  [266,] 0.8502016 0.8861952 0.9038058 #>  [267,] 1.4862450 1.5011581 1.5074950 #>  [268,] 0.6396095 0.6893059 0.7182027 #>  [269,] 0.7714931 0.7734167 0.7775349 #>  [270,] 0.7171307 0.7479408 0.7520999 #>  [271,] 0.7204790 0.7205419 0.7262814 #>  [272,] 0.7764815 0.8346178 0.8405523 #>  [273,] 0.6815454 0.7499546 0.7547126 #>  [274,] 0.5819575 0.5855578 0.6195740 #>  [275,] 0.7121738 0.7190642 0.7197042 #>  [276,] 0.5844802 0.5854959 0.5889542 #>  [277,] 0.6391332 0.6513541 0.6564052 #>  [278,] 0.6008196 0.6169724 0.6187262 #>  [279,] 0.6004558 0.6203915 0.6583807 #>  [280,] 0.7253906 0.7793574 0.7852301 #>  [281,] 0.7994010 0.8370474 0.9288148 #>  [282,] 0.5637732 0.5783641 0.6096806 #>  [283,] 0.8328476 0.8516180 0.9209111 #>  [284,] 0.7279717 0.7410038 0.7440851 #>  [285,] 0.7154882 0.7225877 0.7579051 #>  [286,] 0.6598238 0.6689691 0.6957056 #>  [287,] 0.8832028 0.8867543 0.9759766 #>  [288,] 0.8541363 0.8866438 0.8933728 #>  [289,] 0.6953057 0.6961085 0.7225877 #>  [290,] 0.7649899 0.8011550 0.8401586 #>  [291,] 1.4381174 1.4391646 1.5224955 #>  [292,] 0.7211925 0.7686471 0.7708451 #>  [293,] 0.7396366 0.7406987 0.7590344 #>  [294,] 0.6095085 0.6320999 0.6329711 #>  [295,] 0.8033900 0.8608760 0.9145942 #>  [296,] 0.6657671 0.7212267 0.7373174 #>  [297,] 0.6290462 0.6466036 0.6598451 #>  [298,] 0.9496579 0.9915636 0.9940711 #>  [299,] 1.4675173 1.5138977 1.5957589 #>  [300,] 0.8188511 0.8197795 0.8916950 #>  [301,] 0.6931095 0.6968344 0.7068086 #>  [302,] 0.8744590 0.9083381 0.9165155 #>  [303,] 0.8071739 0.8108444 0.8311477 #>  [304,] 0.6586315 0.6981147 0.7186405 #>  [305,] 0.5988548 0.6853110 0.7143211 #>  [306,] 0.7307829 0.7968302 0.8673449 #>  [307,] 1.1568329 1.1705337 1.1706736 #>  [308,] 0.9907974 1.0400851 1.0681790 #>  [309,] 1.0323357 1.0555369 1.0678843 #>  [310,] 0.7839259 0.8055401 0.8115153 #>  [311,] 0.6945765 0.6972767 0.7110562 #>  [312,] 0.6060420 0.6297678 0.6528428 #>  [313,] 0.5049695 0.5093373 0.5111948 #>  [314,] 0.9421114 1.0198863 1.0296697 #>  [315,] 1.0110780 1.0350500 1.0369740 #>  [316,] 1.2062943 1.2659803 1.2856136 #>  [317,] 1.3000707 1.3260472 1.3310950 #>  [318,] 0.9503623 0.9580609 0.9960328 #>  [319,] 1.1763546 1.2054488 1.2538549 #>  [320,] 0.9588974 0.9930230 1.0006060 #>  [321,] 0.8264042 0.8810025 0.8940213 #>  [322,] 0.5544572 0.5628119 0.5632471 #>  [323,] 0.6852512 0.6874262 0.7083066 #>  [324,] 0.7692586 0.7846913 0.8118544 #>  [325,] 1.0141005 1.0560607 1.1070897 #>  [326,] 0.7970963 0.8134997 0.9025018 #>  [327,] 0.7775502 0.7914939 0.8242629 #>  [328,] 0.7699424 0.7742127 0.7871855 #>  [329,] 0.7070724 0.7079288 0.7236569 #>  [330,] 0.7641456 0.7876860 0.8171962 #>  [331,] 0.6642740 0.8995585 0.9152603 #>  [332,] 1.2823414 1.2854426 1.2977938 #>  [333,] 0.6270364 0.6408282 0.6452430 #>  [334,] 0.9984091 1.0171776 1.0835008 #>  [335,] 0.5726048 0.5765948 0.6071732 #>  [336,] 0.6641285 0.6839548 0.7049034 #>  [337,] 0.8935665 0.8958115 0.9141372 #>  [338,] 0.6572684 0.6975616 0.6984933 #>  [339,] 1.0003852 1.1339735 1.1798149 #>  [340,] 0.8302971 0.8721406 0.9283470 #>  [341,] 0.6556654 0.6561460 0.6587460 #>  [342,] 0.9779307 0.9802288 1.0315159 #>  [343,] 1.0108851 1.0572116 1.0629321 #>  [344,] 0.7296543 0.7496736 0.7533012 #>  [345,] 0.8811357 0.8885263 0.9006003 #>  [346,] 0.5529055 0.5607372 0.6485149 #>  [347,] 0.5788295 0.5794658 0.5923892 #>  [348,] 1.0557086 1.0670105 1.0680305 #>  [349,] 1.3420173 1.3486848 1.3848706 #>  [350,] 0.8981098 0.9770473 1.0223902 #>  [351,] 1.7432372 1.7512619 1.7629631 #>  [352,] 0.5597575 0.6249208 0.6258670 #>  [353,] 0.9040829 0.9300915 0.9336330 #>  [354,] 0.4867322 0.5472896 0.5813527 #>  [355,] 0.6585586 0.6598451 0.7284437 #>  [356,] 1.3402866 1.3488738 1.3572195 #>  [357,] 0.5846895 0.5944953 0.6007616 #>  [358,] 0.8718108 0.8734358 0.8745887 #>  [359,] 0.6859015 0.6938506 0.7033758 #>  [360,] 0.5737718 0.5818246 0.6171716 #>  [361,] 0.6184226 0.6940589 0.6999838 #>  [362,] 1.8132306 1.8318169 1.8793570 #>  [363,] 0.6795623 0.6852512 0.7197604 #>  [364,] 1.2588954 1.3131994 1.3355956 #>  [365,] 1.0177084 1.1104517 1.1346949 #>  [366,] 1.6572069 1.7057859 1.7316684 #>  [367,] 0.7903849 0.8444735 0.8740277 #>  [368,] 0.6358832 0.6390517 0.6565087 #>  [369,] 1.4621882 1.4934575 1.5165644 #>  [370,] 1.3345127 1.3356867 1.3824809 #>  [371,] 0.6596634 0.7255592 0.7469448 #>  [372,] 0.7504172 0.7907644 0.8508290 #>  [373,] 0.6173615 0.6292890 0.6745872 #>  [374,] 0.7365420 0.7754046 0.8236368 #>  [375,] 0.5927181 0.6125253 0.6679895 #>  [376,] 0.5571901 0.5576630 0.5710941 #>  [377,] 0.4873079 0.5402149 0.5559121 #>  [378,] 0.8526752 0.9099425 0.9313398 #>  [379,] 0.5752943 0.6475149 0.6675636 #>  [380,] 0.8986179 0.9040434 0.9279096 #>  [381,] 0.9783869 0.9979456 1.1060828 #>  [382,] 0.6778421 0.7388036 0.7401453 #>  [383,] 0.8067074 0.8082380 0.8156726 #>  [384,] 0.6021786 0.6475072 0.6525546 #>  [385,] 0.8972511 0.9323511 0.9378140 #>  [386,] 1.0163440 1.0223697 1.0255044 #>  [387,] 0.7786605 0.7889360 0.7891774 #>  [388,] 0.7717844 0.7738999 0.8072575 #>  [389,] 1.0693372 1.0859025 1.0874999 #>  [390,] 0.5719255 0.5789385 0.6176719 #>  [391,] 1.0619127 1.0851034 1.1019290 #>  [392,] 0.6881038 0.7220600 0.7528527 #>  [393,] 0.5446310 0.5617625 0.5817668 #>  [394,] 0.7144565 0.7145141 0.7152271 #>  [395,] 0.7970461 0.8961951 0.9364566 #>  [396,] 0.9140315 0.9360670 0.9370288 #>  [397,] 0.6843241 0.7322996 0.7533096 #>  [398,] 0.5715634 0.6106768 0.6243207 #>  [399,] 1.1776640 1.1851714 1.1983086 #>  [400,] 0.9787554 1.0580339 1.0692382 #>  [401,] 0.6042452 0.6086057 0.6164790 #>  [402,] 0.4727595 0.4745562 0.5089865 #>  [403,] 1.0502744 1.1251488 1.1538746 #>  [404,] 1.5477865 1.5523460 1.5620865 #>  [405,] 1.2056367 1.2062962 1.2245734 #>  [406,] 0.7157185 0.7775148 0.7792428 #>  [407,] 0.7892284 0.8486978 0.9324175 #>  [408,] 0.6274296 0.6315740 0.6493512 #>  [409,] 0.5704003 0.5738213 0.6755121 #>  [410,] 0.6517161 0.6551930 0.6760921 #>  [411,] 0.5520791 0.5621126 0.6043617 #>  [412,] 0.5569593 0.5655669 0.5708057 #>  [413,] 0.6229929 0.6459561 0.6482651 #>  [414,] 0.6285358 0.6973906 0.7071932 #>  [415,] 1.5165231 1.5714014 1.5729817 #>  [416,] 1.1475118 1.1962732 1.2452147 #>  [417,] 0.4932505 0.5053761 0.5488706 #>  [418,] 0.7237407 0.7415302 0.7450188 #>  [419,] 0.6671275 0.6700062 0.6864650 #>  [420,] 0.8069925 0.8457584 0.8584300 #>  [421,] 0.8126975 0.8794180 0.8842893 #>  [422,] 0.8866406 0.9296196 0.9376354 #>  [423,] 0.8305566 0.8365528 0.8367190 #>  [424,] 0.7171952 0.7182618 0.7610168 #>  [425,] 0.7898319 0.7932942 0.8013460 #>  [426,] 0.8619152 0.8671689 0.9206707 #>  [427,] 0.5066825 0.5568206 0.5947037 #>  [428,] 0.9894920 1.0857505 1.1126934 #>  [429,] 0.6178973 0.6207953 0.6209057 #>  [430,] 0.6202751 0.6380067 0.6585993 #>  [431,] 0.7775148 0.7866388 0.7898171 #>  [432,] 0.7332408 0.7702685 0.7821656 #>  [433,] 0.9004233 0.9217518 0.9306542 #>  [434,] 1.0450695 1.0744960 1.1024884 #>  [435,] 0.7213426 0.7277828 0.8276109 #>  [436,] 0.7162872 0.7499894 0.8175576 #>  [437,] 0.8153391 0.8346178 0.8491418 #>  [438,] 1.2419048 1.3274477 1.3393883 #>  [439,] 1.2395954 1.2497064 1.2731568 #>  [440,] 0.5762558 0.6269852 0.6315740 #>  [441,] 0.5206428 0.5420008 0.5528987 #>  [442,] 1.2897766 1.3076667 1.3452258 #>  [443,] 0.8448907 0.8574935 0.8667490 #>  [444,] 1.3635086 1.3859001 1.4237935 #>  [445,] 0.6795623 0.7098843 0.7138336 #>  [446,] 0.6790666 0.7665192 0.7676066 #>  [447,] 0.6546620 0.7060317 0.7153828 #>  [448,] 0.6801411 0.6867785 0.6913356 #>  [449,] 0.5720043 0.6131412 0.6430981 #>  [450,] 0.8871339 0.9304297 0.9882179 #>  [451,] 0.6567701 0.7024760 0.7172413 #>  [452,] 0.7001244 0.7440851 0.7570726 #>  [453,] 0.8452648 0.8653780 0.9749368 #>  [454,] 0.6759295 0.6802612 0.6840765 #>  [455,] 1.3465449 1.3613861 1.4200246 #>  [456,] 0.6153423 0.6881721 0.6989022 #>  [457,] 0.8721802 0.8806892 0.8968402 #>  [458,] 0.8360520 0.8377757 0.9452777 #>  [459,] 0.9354230 0.9647183 0.9905015 #>  [460,] 0.8304346 0.8544928 0.8753191 #>  [461,] 1.1475529 1.1882167 1.2454110 #>  [462,] 1.0267629 1.1412478 1.1844442 #>  [463,] 0.5009706 0.5363791 0.5421776 #>  [464,] 0.6518735 0.6779635 0.7148538 #>  [465,] 0.5300826 0.5415541 0.5494631 #>  [466,] 0.4664569 0.5073624 0.5721690 #>  [467,] 0.7097084 0.7101384 0.7160258 #>  [468,] 0.8011376 0.8047128 0.8247147 #>  [469,] 0.5018955 0.5188828 0.5528987 #>  [470,] 0.9725416 0.9919171 1.0567891 #>  [471,] 0.8753191 0.8800335 0.8885686 #>  [472,] 0.7142546 0.7169006 0.7203485 #>  [473,] 0.5684277 0.5789385 0.5947037 #>  [474,] 0.9543898 0.9562156 0.9630658 #>  [475,] 0.8191773 0.8292446 0.8354358 #>  [476,] 0.7485412 0.7497739 0.7838092 #>  [477,] 1.3575909 1.3709032 1.3903829 #>  [478,] 0.8958857 0.9295402 0.9514285 #>  [479,] 0.5447132 0.5814605 0.5912630 #>  [480,] 0.8688141 0.9086688 0.9220450 #>  [481,] 0.7350669 0.7378854 0.7634578 #>  [482,] 0.6203915 0.6616188 0.6933919 #>  [483,] 1.3948888 1.4603028 1.4880865 #>  [484,] 0.7277828 0.8022505 0.8592724 #>  [485,] 0.5066004 0.5166551 0.5207351 #>  [486,] 1.0125713 1.0165128 1.0756236 #>  [487,] 0.6872391 0.6931152 0.7281699 #>  [488,] 0.5413224 0.5446310 0.5701169 #>  [489,] 1.0763783 1.0774524 1.1154225 #>  [490,] 1.1846774 1.1852656 1.2045345 #>  [491,] 1.1177122 1.1703007 1.1754027 #>  [492,] 0.6854800 0.6999838 0.7047299 #>  [493,] 0.5166551 0.5735035 0.5952019 #>  [494,] 0.7169900 0.7553695 0.7753653 #>  [495,] 1.3393014 1.3478073 1.3541724 #>  [496,] 0.5207351 0.5220478 0.5705741 #>  [497,] 2.4330749 2.4563534 2.4661871 #>  [498,] 0.8876941 0.8971022 0.9008955 #>  [499,] 1.3079206 1.3238907 1.3265458 #>  [500,] 0.8923467 0.8956757 0.9072190 #>  [501,] 0.6592934 0.6690904 0.6868847 #>  [502,] 0.5655595 0.5750226 0.5947545 #>  [503,] 0.7043725 0.7097113 0.7513102 #>  [504,] 0.5233606 0.5395874 0.5593836 #>  [505,] 1.0374805 1.0443794 1.0444952 #>  [506,] 0.6819067 0.7035128 0.7122801 #>  [507,] 0.8026379 0.8121204 0.8172518 #>  [508,] 1.5404262 1.5422756 1.5537226 #>  [509,] 0.5818231 0.6035093 0.6232580 #>  [510,] 0.7825119 0.8144653 0.8650295 #>  [511,] 0.8019393 0.8331204 0.8362167 #>  [512,] 0.5785603 0.5837417 0.5963855 #>  [513,] 0.6748105 0.6825923 0.6912058 #>  [514,] 0.6176719 0.6370390 0.6389046 #>  [515,] 0.6917115 0.7136217 0.7396839 #>  [516,] 1.0114713 1.0725199 1.0760414 #>  [517,] 0.7853133 0.7947215 0.7954760 #>  [518,] 0.8227182 0.8926332 0.8931032 #>  [519,] 0.6738445 0.6889418 0.7560972 #>  [520,] 0.5465017 0.6068068 0.6131859 #>  [521,] 0.6320999 0.7052734 0.7077035 #>  [522,] 0.5005812 0.5402149 0.5413224 #>  [523,] 0.8844148 0.8855468 0.8941550 #>  [524,] 0.7657452 0.7928127 0.7981664 #>  [525,] 1.0769689 1.1005855 1.1463099 #>  [526,] 0.6156340 0.6376440 0.6521238 #>  [527,] 0.6763538 0.6799721 0.7146119 #>  [528,] 0.5997636 0.6574880 0.6586798 #>  [529,] 0.7499894 0.7536337 0.7784320 #>  [530,] 0.7349220 0.7449766 0.7747637 #>  [531,] 1.0883877 1.1160931 1.1559707 #>  [532,] 1.0386990 1.0516557 1.0921621 #>  [533,] 0.6534897 0.6576556 0.6748105 #>  [534,] 0.9426400 0.9484335 0.9517791 #>  [535,] 0.8320643 0.8906660 0.9855535 #>  [536,] 0.6429704 0.6997653 0.7181453 #>  [537,] 1.3098826 1.3340049 1.3423709 #>  [538,] 0.6721589 0.7976617 0.8271880 #>  [539,] 1.3638152 1.4166403 1.4327458 #>  [540,] 0.8816674 0.8860374 0.9267559 #>  [541,] 0.7735943 0.7962710 0.8754838 #>  [542,] 1.1272212 1.1422573 1.1464018 #>  [543,] 0.6984226 0.6997584 0.7064581 #>  [544,] 0.5433275 0.5813527 0.5861621 #>  [545,] 0.6210719 0.6369398 0.6433250 #>  [546,] 1.0056271 1.0503178 1.1311179 #>  [547,] 1.1748237 1.1820876 1.2076338 #>  [548,] 1.0278405 1.0422325 1.0881244 #>  [549,] 0.6725370 0.6827848 0.6839110 #>  [550,] 0.6100796 0.6700062 0.6989022 #>  [551,] 1.4537399 1.4621882 1.5055497 #>  [552,] 0.5506643 0.5661522 0.6066353 #>  [553,] 1.1637397 1.2486529 1.3104439 #>  [554,] 0.8809494 0.9265103 0.9717758 #>  [555,] 0.8580086 0.8648114 0.8759506 #>  [556,] 0.5858966 0.6503798 0.6804738 #>  [557,] 0.8010220 0.8189759 0.8350620 #>  [558,] 0.9025329 0.9525656 0.9748945 #>  [559,] 0.8737107 0.8757592 0.8898960 #>  [560,] 0.5722876 0.5828719 0.5854959 #>  [561,] 0.6179256 0.6280505 0.6310917 #>  [562,] 0.5037485 0.5072256 0.5552408 #>  [563,] 0.8341953 0.8411516 0.8443327 #>  [564,] 1.0574944 1.1314072 1.1552240 #>  [565,] 0.7968520 0.8052579 0.8253377 #>  [566,] 0.6560137 0.6635841 0.6836896 #>  [567,] 1.1006118 1.1216382 1.1438280 #>  [568,] 0.8027385 0.8118544 0.8191920 #>  [569,] 0.6000621 0.6031894 0.6051602 #>  [570,] 0.8850632 0.9002429 0.9040829 #>  [571,] 1.0528225 1.1583454 1.1689873 #>  [572,] 0.7826221 0.7853613 0.8124521 #>  [573,] 1.0724457 1.1102415 1.1209644 #>  [574,] 0.6713723 0.6744126 0.6775693 #>  [575,] 0.6949748 0.7032353 0.7086036 #>  [576,] 0.5333079 0.5353705 0.5861832 #>  [577,] 0.9150551 0.9218454 0.9359437 #>  [578,] 0.9177061 0.9199414 0.9199644 #>  [579,] 0.5794658 0.5964496 0.6106768 #>  [580,] 0.7289691 0.7321903 0.7596410 #>  [581,] 0.5734999 0.5840507 0.6033031 #>  [582,] 0.6372876 0.7020477 0.7120436 #>  [583,] 0.7652459 0.7863756 0.8055139 #>  [584,] 1.1021355 1.1176774 1.1422438 #>  [585,] 0.8672853 0.8940315 0.9157001 #>  [586,] 0.6298748 0.6759313 0.6814537 #>  [587,] 0.7651023 0.7906473 0.7913518 #>  [588,] 1.6614665 1.6722527 1.6883678 #>  [589,] 0.6272021 0.6285358 0.6432760 #>  [590,] 0.5684277 0.5963855 0.6459109 #>  [591,] 0.5940783 0.6131859 0.6208358 #>  [592,] 0.7684368 0.7779867 0.7944549 #>  [593,] 0.5483295 0.5540581 0.5863506 #>  [594,] 0.5661528 0.5996684 0.6071939 #>  [595,] 0.7356860 0.7399736 0.7693496 #>  [596,] 0.6304065 0.6405612 0.6418403 #>  [597,] 1.0710785 1.0928611 1.1032075 #>  [598,] 0.7988344 0.8093400 0.8385402 #>  [599,] 0.5415541 0.5579929 0.5835533 #>  [600,] 0.6912058 0.7399736 0.7413972 #>  [601,] 0.9611957 1.0446286 1.0892720 #>  [602,] 0.5738954 0.5892991 0.5957708 #>  [603,] 0.6274017 0.6472699 0.6541456 #>  [604,] 0.7653316 0.8009384 0.8271468 #>  [605,] 0.6242657 0.6588085 0.6823129 #>  [606,] 0.8138015 0.8715315 0.8822908 #>  [607,] 1.2855899 1.3089499 1.3223649 #>  [608,] 0.8910111 0.9169416 0.9177061 #>  [609,] 0.5924796 0.6100796 0.6300776 #>  [610,] 0.6489980 0.6575682 0.6681240 #>  [611,] 0.8860374 0.9020025 0.9626725 #>  [612,] 0.6902845 0.7503549 0.7603320 #>  [613,] 0.7626306 0.7684770 0.7732413 #>  [614,] 0.7733887 0.8163825 0.8181230 #>  [615,] 0.9189636 0.9418733 0.9545328 #>  [616,] 0.6056959 0.6060420 0.6616785 #>  [617,] 1.7005911 1.7142683 1.7160209 #>  [618,] 1.4880399 1.4911684 1.5472852 #>  [619,] 0.9079990 0.9462847 0.9940909 #>  [620,] 1.1509076 1.1819467 1.2035157 #>  [621,] 0.7000189 0.7236574 0.7328402 #>  [622,] 0.7673961 0.7732128 0.7782687 #>  [623,] 0.8090348 0.8123380 0.8272954 #>  [624,] 1.1667172 1.1908887 1.2568517 #>  [625,] 0.5654411 0.5813181 0.5902921 #>  [626,] 0.8996569 0.9117052 0.9159403 #>  [627,] 0.9075023 0.9082673 0.9117389 #>  [628,] 1.1629105 1.1813216 1.1888892 #>  [629,] 0.7575677 0.7648585 0.7670429 #>  [630,] 1.1482443 1.1657016 1.1916215 #>  [631,] 0.8517253 0.8525721 0.8665709 #>  [632,] 0.5433968 0.5580378 0.5995002 #>  [633,] 0.7702646 0.7791465 0.8383751 #>  [634,] 0.7169900 0.7277512 0.7415976 #>  [635,] 0.5630272 0.5738994 0.5742342 #>  [636,] 0.5320299 0.5453682 0.5717832 #>  [637,] 0.6901765 0.6934501 0.6981554 #>  [638,] 0.7777839 0.8704937 0.9946110 #>  [639,] 0.6686030 0.6788134 0.6838989 #>  [640,] 1.4693403 1.4845931 1.5849673 #>  [641,] 1.0557943 1.0883877 1.1198663 #>  [642,] 1.1214760 1.1280997 1.1744293 #>  [643,] 0.7270784 0.7387763 0.7401773 #>  [644,] 1.1237864 1.1352410 1.1649732 #>  [645,] 0.8235765 0.9442521 0.9470778 #>  [646,] 0.9143508 0.9805746 0.9927139 #>  [647,] 0.6736434 0.6787504 0.6861938 #>  [648,] 0.9528438 0.9723245 1.0197457 #>  [649,] 0.6364382 0.6567950 0.6649537 #>  [650,] 0.7114658 0.7343800 0.7572753 #>  [651,] 0.7510680 0.8062628 0.8165187 #>  [652,] 0.6421367 0.6455596 0.6510025 #>  [653,] 0.4920011 0.5072932 0.6275883 #>  [654,] 0.7036573 0.7142546 0.7205419 #>  [655,] 1.2930177 1.3633929 1.3964805 #>  [656,] 0.8696898 0.8947901 0.9517208 #>  [657,] 1.1545406 1.1559094 1.2126249 #>  [658,] 0.8530164 0.9017531 0.9117296 #>  [659,] 0.9653110 0.9884833 0.9897010 #>  [660,] 0.9266831 0.9344947 0.9717779 #>  [661,] 0.5626081 0.5805687 0.5928385 #>  [662,] 0.6301138 0.6562090 0.6588255 #>  [663,] 0.7803316 0.7995053 0.8746351 #>  [664,] 0.7049034 0.7352171 0.7357874 #>  [665,] 0.5621855 0.5718686 0.5841110 #>  [666,] 1.2079827 1.2497364 1.2662710 #>  [667,] 0.9351881 0.9505287 0.9802288 #>  [668,] 0.7844705 0.7861113 0.8290441 #>  [669,] 0.8020037 0.8055122 0.8193266 #>  [670,] 0.6645654 0.6646962 0.6800662 #>  [671,] 0.6644989 0.6858957 0.7135255 #>  [672,] 0.8309472 0.8566081 0.9129136 #>  [673,] 0.4673858 0.4888803 0.5122474 #>  [674,] 0.6807904 0.6944580 0.7004814 #>  [675,] 0.9837041 0.9922467 0.9971700 #>  [676,] 0.8949519 0.8968898 1.0116042 #>  [677,] 0.7191086 0.7726714 0.7899277 #>  [678,] 0.7472802 0.8378217 0.8844022 #>  [679,] 0.4918858 0.5353920 0.5626503 #>  [680,] 1.0396031 1.0469893 1.0545132 #>  [681,] 0.7648160 0.7913270 0.8218461 #>  [682,] 0.9079188 0.9609885 0.9639399 #>  [683,] 0.7743573 0.7747332 0.8187308 #>  [684,] 0.6242657 0.6379172 0.6408034 #>  [685,] 1.0695378 1.1113947 1.1208656 #>  [686,] 0.7930822 0.8033898 0.8512911 #>  [687,] 0.6712434 0.6754750 0.6755085 #>  [688,] 0.8344117 0.8867543 0.9357133 #>  [689,] 0.8710212 0.9548002 1.0336750 #>  [690,] 0.7995053 0.8125230 0.8449529 #>  [691,] 0.7720595 0.8289785 0.8360302 #>  [692,] 0.8581771 0.8828048 0.9043687 #>  [693,] 0.7208666 0.7247354 0.7771716 #>  [694,] 0.6175453 0.6243207 0.6556654 #>  [695,] 0.5881006 0.5927948 0.6186205 #>  [696,] 0.6573493 0.6637766 0.6947316 #>  [697,] 0.7534697 0.7557598 0.7774037 #>  [698,] 0.7858373 0.7890670 0.8105553 #>  [699,] 0.8282627 0.8393484 0.8661313 #>  [700,] 0.9290144 0.9778104 0.9828270 #>  [701,] 0.7553944 0.7581753 0.7641715 #>  [702,] 0.7186405 0.7201096 0.7720703 #>  [703,] 0.9242922 0.9283622 0.9379701 #>  [704,] 0.6977661 0.7273663 0.7292776 #>  [705,] 0.7533313 0.7554209 0.7946091 #>  [706,] 0.7976663 0.8398758 0.8664794 #>  [707,] 1.0128279 1.0144897 1.0147793 #>  [708,] 1.1163207 1.1179622 1.1996285 #>  [709,] 0.6094746 0.6256095 0.6459308 #>  [710,] 0.7478898 0.7484795 0.7541541 #>  [711,] 0.8951572 0.9000674 0.9323367 #>  [712,] 0.5191220 0.5422341 0.5619886 #>  [713,] 1.0371704 1.0410932 1.0564968 #>  [714,] 0.9861242 0.9931177 0.9944717 #>  [715,] 0.6507969 0.6561307 0.6618304 #>  [716,] 0.5731131 0.5890675 0.5902208 #>  [717,] 0.5448946 0.5877563 0.6132941 #>  [718,] 1.9840804 1.9962073 2.1234748 #>  [719,] 0.5594505 0.5624794 0.5878696 #>  [720,] 1.0149816 1.0216248 1.0424097 #>  [721,] 0.7226564 0.7291960 0.7708631 #>  [722,] 0.9411504 0.9499604 0.9535853 #>  [723,] 0.7529154 0.7694822 0.8321246 #>  [724,] 0.6712947 0.7049195 0.7343173 #>  [725,] 0.6315992 0.6326318 0.6610993 #>  [726,] 1.2510894 1.2990138 1.3454086 #>  [727,] 0.6823561 0.6891674 0.7026528 #>  [728,] 0.8991074 0.9390479 0.9678608 #>  [729,] 0.9778870 1.0468254 1.0707120 #>  [730,] 0.6547879 0.6579730 0.6885550 #>  [731,] 0.6840765 0.6935384 0.7401453 #>  [732,] 0.7469566 0.7800748 0.8349901 #>  [733,] 0.7862164 0.8050693 0.8077189 #>  [734,] 1.0303120 1.0531580 1.0752128 #>  [735,] 1.8699279 1.8947145 1.9604136 #>  [736,] 0.7307950 0.7889360 0.8331159 #>  [737,] 0.6812197 0.7126523 0.7231095 #>  [738,] 0.9826970 1.0586340 1.0679303 #>  [739,] 0.6095085 0.6320317 0.6899162 #>  [740,] 0.9187011 0.9386122 0.9426716 #>  [741,] 0.8010813 0.8348027 0.8755803 #>  [742,] 0.9936857 1.0156827 1.0302255 #>  [743,] 0.6769124 0.6800662 0.6895542 #>  [744,] 0.9441428 0.9621911 1.0086425 #>  [745,] 0.8258258 0.8296213 0.8446451 #>  [746,] 1.4979644 1.5479075 1.6525516 #>  [747,] 1.5329997 1.5506630 1.5583294 #>  [748,] 0.7567548 0.7750279 0.8145405 #>  [749,] 1.0000752 1.0310343 1.0452246 #>  [750,] 0.7211798 0.7328017 0.7573838 #>  [751,] 0.6855001 0.6885495 0.7077035 #>  [752,] 0.6979756 0.7409901 0.7415126 #>  [753,] 0.7766134 0.8016904 0.8135224 #>  [754,] 2.4460821 2.4655861 2.4965189 #>  [755,] 0.9490599 1.0355523 1.0699671 #>  [756,] 0.7601864 0.7923071 0.8304490 #>  [757,] 1.0382473 1.1154134 1.1453000 #>  [758,] 1.0859269 1.1061079 1.1122250 #>  [759,] 0.6116964 0.6141357 0.6438739 #>  [760,] 0.9604989 0.9629704 0.9845921 #>  [761,] 0.9073239 0.9712046 0.9854675 #>  [762,] 0.7828045 0.8225096 0.8304982 #>  [763,] 0.6291949 0.6492945 0.7114658 #>  [764,] 0.7123308 0.7183193 0.7327775 #>  [765,] 0.6606748 0.6703934 0.6897515 #>  [766,] 0.9121980 0.9723641 0.9766713 #>  [767,] 0.6682487 0.6735134 0.6816907 #>  [768,] 1.1554811 1.1684272 1.2071758 #>  [769,] 0.5718615 0.6125627 0.6282707 #>  [770,] 0.6803583 0.7398784 0.7806376 #>  [771,] 0.7714708 0.7927645 0.7956031 #>  [772,] 0.9457797 0.9501138 0.9603281 #>  [773,] 0.5785603 0.6172600 0.6298820 #>  [774,] 1.1515235 1.3319698 1.3533629 #>  [775,] 1.0771598 1.1555083 1.2049419 #>  [776,] 1.3984222 1.4242844 1.4336304 #>  [777,] 0.7301777 0.7390752 0.7423665 #>  [778,] 1.3290471 1.3392094 1.3808227 #>  [779,] 0.5719255 0.5776872 0.6008460 #>  [780,] 0.5015476 0.5170612 0.5234495 #>  [781,] 0.9265494 0.9641187 0.9650168 #>  [782,] 0.7934165 0.8001766 0.8039399 #>  [783,] 0.5941205 0.5943175 0.6384622 #>  [784,] 0.8563860 0.8998936 0.9544902 #>  [785,] 0.6468908 0.6611862 0.6762634 #>  [786,] 0.7796200 0.7857939 0.7873296 #>  [787,] 0.9622575 0.9716313 1.0003243 #>  [788,] 0.6288734 0.7045541 0.7053441 #>  [789,] 0.9312747 0.9585425 0.9595014 #>  [790,] 0.5514760 0.5579493 0.5682558 #>  [791,] 0.7551475 0.8194712 0.8760939 #>  [792,] 0.9627104 0.9955692 0.9997892 #>  [793,] 0.7939759 0.8030987 0.8055319 #>  [794,] 1.2514619 1.2830069 1.3032226 #>  [795,] 0.6156203 0.6264561 0.6422896 #>  [796,] 0.6587460 0.6814537 0.6880126 #>  [797,] 0.7404193 0.7439156 0.7514764 #>  [798,] 0.5978282 0.6056959 0.6105289 #>  [799,] 0.9042485 0.9256954 0.9735914 #>  [800,] 0.8696443 0.9150779 0.9192969 #>  [801,] 2.2005750 2.3099542 2.4215373 #>  [802,] 1.2131563 1.2303274 1.2605960 #>  [803,] 0.5579493 0.5669679 0.5728957 #>  [804,] 0.7423984 0.7518327 0.7536216 #>  [805,] 0.9955837 1.0125310 1.0519726 #>  [806,] 0.7944557 0.8711629 0.8771026 #>  [807,] 0.5412136 0.5472567 0.5674412 #>  [808,] 0.9576435 0.9656506 1.0704563 #>  [809,] 0.8629633 0.9101637 0.9179103 #>  [810,] 0.5877563 0.5919473 0.6256269 #>  [811,] 0.9206479 1.0389237 1.0505422 #>  [812,] 0.9992972 1.0324463 1.0350421 #>  [813,] 0.6205853 0.6505714 0.6554080 #>  [814,] 0.6121724 0.6145990 0.6315992 #>  [815,] 0.7361680 0.7887563 0.7988936 #>  [816,] 0.7521859 0.7587948 0.7648270 #>  [817,] 1.4100354 1.4933126 1.4972373 #>  [818,] 0.8686672 0.9283804 0.9731407 #>  [819,] 0.6812641 0.6900834 0.6947166 #>  [820,] 0.9732803 0.9836918 1.0092243 #>  [821,] 1.6077689 1.6129046 1.6250580 #>  [822,] 0.5882913 0.6219995 0.6370428 #>  [823,] 0.7030818 0.7127590 0.7169829 #>  [824,] 0.7795083 0.8125230 0.8653008 #>  [825,] 1.0880065 1.0924955 1.1004484 #>  [826,] 0.5839306 0.6008460 0.6018191 #>  [827,] 0.7028241 0.7042218 0.7353039 #>  [828,] 0.9588711 0.9674391 0.9733189 #>  [829,] 1.8685653 2.0145649 2.1171108 #>  [830,] 0.8958857 0.9223893 0.9542813 #>  [831,] 1.8384541 1.8416330 1.9078851 #>  [832,] 0.6760235 0.6904662 0.7072877 #>  [833,] 0.8168891 0.8565917 0.8871707 #>  [834,] 0.7545223 0.7637544 0.7808326 #>  [835,] 0.6056731 0.6598220 0.6694571 #>  [836,] 0.5387785 0.5469023 0.6040989 #>  [837,] 0.5671095 0.6026385 0.6134403 #>  [838,] 0.9230865 0.9736824 1.0299172 #>  [839,] 1.3592656 1.3925351 1.4116564 #>  [840,] 0.7615091 0.8311477 0.9266211 #>  [841,] 0.8171975 0.8634281 0.8970915 #>  [842,] 1.0541068 1.0554691 1.0584230 #>  [843,] 1.3120544 1.3196817 1.3198610 #>  [844,] 0.7393379 0.7884275 0.7885272 #>  [845,] 0.5343238 0.5538331 0.5620189 #>  [846,] 1.1059015 1.1637397 1.2017446 #>  [847,] 0.7363412 0.7430316 0.7496345 #>  [848,] 0.6634004 0.6795659 0.6959469 #>  [849,] 0.5847027 0.5874660 0.6086057 #>  [850,] 0.6041805 0.6120921 0.6164154 #>  [851,] 0.6825321 0.7107260 0.7390235 #>  [852,] 0.7293420 0.7381221 0.7688842 #>  [853,] 0.6505714 0.6694571 0.6753683 #>  [854,] 0.8728665 0.8755154 0.8809112 #>  [855,] 0.9169630 0.9613185 0.9831047 #>  [856,] 0.6702177 0.6763785 0.6922974 #>  [857,] 1.2258334 1.2405133 1.2716939 #>  [858,] 0.8161370 0.8195521 0.8360676 #>  [859,] 0.7970461 0.8353872 0.8445459 #>  [860,] 1.2446498 1.3075111 1.3176280 #>  [861,] 0.5729615 0.6179056 0.6187165 #>  [862,] 0.6134646 0.6380611 0.6492568 #>  [863,] 0.5472896 0.5756093 0.5942635 #>  [864,] 0.4556350 0.4841176 0.5005812 #>  [865,] 0.7477379 0.7545507 0.8352861 #>  [866,] 0.7050748 0.7177599 0.7432759 #>  [867,] 0.7461298 0.7553695 0.7759613 #>  [868,] 0.8604855 0.9003658 0.9322159 #>  [869,] 0.7322996 0.7587948 0.7596410 #>  [870,] 1.2633280 1.3264244 1.3802016 #>  [871,] 0.8259356 0.8286259 0.8573963 #>  [872,] 1.5834542 1.6180866 1.6299804 #>  [873,] 1.3037118 1.4071585 1.4863649 #>  [874,] 0.5898393 0.6027551 0.6069403 #>  [875,] 1.3192074 1.3347835 1.4126434 #>  [876,] 0.9488275 1.0931149 1.1493404 #>  [877,] 0.5905660 0.6089764 0.6908445 #>  [878,] 0.8272001 0.8664794 0.8664970 #>  [879,] 0.7766537 0.7892725 0.8152349 #>  [880,] 0.5788910 0.5997700 0.6105289 #>  [881,] 0.9207194 0.9251842 0.9717900 #>  [882,] 0.8579269 0.8580086 0.9140044 #>  [883,] 0.6518659 0.7418158 0.7473507 #>  [884,] 0.9758237 0.9999322 1.0284989 #>  [885,] 0.5326955 0.5571901 0.5749816 #>  [886,] 0.7289691 0.7307829 0.7358310 #>  [887,] 0.9622942 0.9638102 0.9728462 #>  [888,] 0.6305955 0.6392074 0.6487446 #>  [889,] 0.6764361 0.7188641 0.7269452 #>  [890,] 0.9126067 0.9309677 0.9498573 #>  [891,] 0.7193985 0.7272807 0.7628320 #>  [892,] 1.2725046 1.3018218 1.3058974 #>  [893,] 0.5353920 0.5362621 0.5483295 #>  [894,] 0.6386290 0.6395269 0.6476990 #>  [895,] 0.6282247 0.6868924 0.7021986 #>  [896,] 1.1484529 1.1629862 1.1695337 #>  [897,] 0.6324302 0.6342861 0.6347491 #>  [898,] 1.7718549 1.7824662 1.7827303 #>  [899,] 0.5433203 0.5623151 0.6217149 #>  [900,] 1.0347503 1.0996147 1.1014002 #>  [901,] 0.6427658 0.6922985 0.7102948 #>  [902,] 0.7367856 0.7429711 0.7477981 #>  [903,] 1.1336907 1.1360719 1.1741021 #>  [904,] 0.8499318 0.9165194 0.9353393 #>  [905,] 0.6082323 0.6099325 0.6105304 #>  [906,] 1.1890357 1.2064975 1.2228616 #>  [907,] 0.5927948 0.6047383 0.6288058 #>  [908,] 0.9680811 0.9750752 0.9788899 #>  [909,] 0.6462290 0.6830793 0.6902845 #>  [910,] 0.9614654 0.9643474 1.0178206 #>  [911,] 0.5707382 0.6134403 0.6194092 #>  [912,] 0.8438539 0.8635958 0.8822908 #>  [913,] 0.5494631 0.5586395 0.5721690 #>  [914,] 0.7138974 0.7319643 0.7420699 #>  [915,] 0.5632471 0.5740785 0.6042781 #>  [916,] 0.7923135 0.7976663 0.8465583 #>  [917,] 0.8365857 0.8747352 0.8838682 #>  [918,] 0.8355497 0.8986179 0.9490315 #>  [919,] 0.5759180 0.5960184 0.6423708 #>  [920,] 1.0406381 1.1513287 1.1574054 #>  [921,] 0.6542852 0.6896525 0.7520999 #>  [922,] 0.4733274 0.5579929 0.5990975 #>  [923,] 0.7825119 0.8641544 0.8826792 #>  [924,] 0.7436129 0.7510680 0.8085239 #>  [925,] 1.0566096 1.0598187 1.1021355 #>  [926,] 0.8702194 0.9092069 0.9382595 #>  [927,] 0.9208695 0.9215908 0.9232065 #>  [928,] 0.5421776 0.5629500 0.5632382 #>  [929,] 0.6373086 0.6628284 0.6630443 #>  [930,] 0.9253608 0.9294634 0.9664674 #>  [931,] 0.8630151 0.8958429 0.9052539 #>  [932,] 0.6940589 0.7007208 0.7331007 #>  [933,] 0.5704207 0.6463689 0.7120577 #>  [934,] 1.1820876 1.2046197 1.2436820 #>  [935,] 0.6101289 0.6152802 0.6424040 #>  [936,] 0.5611780 0.5812476 0.5944852 #>  [937,] 0.9266211 0.9345992 0.9498573 #>  [938,] 0.6905269 0.7111059 0.7129953 #>  [939,] 0.7354023 0.7450356 0.7680656 #>  [940,] 0.7205246 0.7361456 0.8046565 #>  [941,] 0.6627488 0.6634866 0.6744529 #>  [942,] 0.6109825 0.6789498 0.6932145 #>  [943,] 0.7421342 0.7525731 0.7636218 #>  [944,] 1.5644471 1.6805485 1.6963087 #>  [945,] 0.7021860 0.7387438 0.7771857 #>  [946,] 0.7936204 0.8817240 0.9127610 #>  [947,] 0.5861621 0.6070500 0.6092334 #>  [948,] 0.6452944 0.6528583 0.6697546 #>  [949,] 0.6050552 0.6092459 0.6129772 #>  [950,] 0.7331604 0.7787644 0.7934695 #>  [951,] 1.0253177 1.0451143 1.0537005 #>  [952,] 0.7184024 0.7235475 0.7358310 #>  [953,] 1.4738929 1.4760710 1.4886971 #>  [954,] 0.7177599 0.8365779 0.8883374 #>  [955,] 0.6894521 0.7090716 0.7259459 #>  [956,] 0.9741000 0.9769864 0.9970277 #>  [957,] 0.5380081 0.5654253 0.6075596 #>  [958,] 0.6392072 0.6544035 0.6625490 #>  [959,] 0.7907644 0.8358458 0.8444434 #>  [960,] 0.7071932 0.7127590 0.7670597 #>  [961,] 0.6848730 0.6964089 0.7245010 #>  [962,] 0.6904069 0.7305762 0.8038191 #>  [963,] 0.5488706 0.5490373 0.5551872 #>  [964,] 0.6949808 0.6969086 0.7448627 #>  [965,] 1.9801189 1.9938026 2.0106078 #>  [966,] 1.2544658 1.3048265 1.3213058 #>  [967,] 0.9513097 1.0189034 1.0216248 #>  [968,] 0.8311631 0.9231207 0.9701632 #>  [969,] 0.5391041 0.5441929 0.5617436 #>  [970,] 1.2959691 1.3010319 1.3228534 #>  [971,] 0.5882913 0.5943249 0.6313949 #>  [972,] 0.5833008 0.6373086 0.6375119 #>  [973,] 0.8401493 0.8819041 0.8935973 #>  [974,] 1.1014002 1.1037962 1.1181508 #>  [975,] 1.2501018 1.3052917 1.3424557 #>  [976,] 0.6997401 0.7055183 0.7072877 #>  [977,] 1.4522053 1.4797213 1.4918408 #>  [978,] 0.8010220 0.8212089 0.8484436 #>  [979,] 0.5188828 0.5749816 0.5777526 #>  [980,] 1.5771202 1.6153886 1.6271667 #>  [981,] 0.6542188 0.6546620 0.6778935 #>  [982,] 0.8484135 0.8798861 0.8944127 #>  [983,] 0.8572849 0.8704807 0.8813799 #>  [984,] 0.6635588 0.6802088 0.6858314 #>  [985,] 0.7766134 0.7838092 0.7976026 #>  [986,] 0.6654071 0.6735517 0.7211925 #>  [987,] 0.8666540 0.9141501 0.9148629 #>  [988,] 0.7422622 0.7488378 0.7502576 #>  [989,] 0.7472471 0.7556288 0.7636650 #>  [990,] 0.7988893 0.7988936 0.8318940 #>  [991,] 0.6561157 0.6962213 0.6971385 #>  [992,] 0.6668924 0.6817113 0.7021109 #>  [993,] 0.5984217 0.6110277 0.6137656 #>  [994,] 1.1348243 1.1912714 1.1977108 #>  [995,] 0.7291960 0.7964442 0.8008349 #>  [996,] 0.8138015 0.8242352 0.8468868 #>  [997,] 0.7806376 0.8685943 0.8824794 #>  [998,] 1.2475437 1.2716270 1.2930675 #>  [999,] 0.6551930 0.6591139 0.7024617 #> [1000,] 0.5902921 0.6100326 0.6264911 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs from a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs from a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure high-dimensional cytometry panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs from a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs from a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) high-dimensional cytometry panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs from a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens high-dimensional cytometry panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"split_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `split_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a color palette using tidytof. — tof_generate_palette","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"function generates color palette based color palette author's favorite pokemon.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"","code":"tof_generate_palette(num_colors)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"num_colors integer specifying number colors like generate.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"character vector hex codes specifying colors palette.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"","code":"tof_generate_palette(num_colors = 5L) #> [1] \"#D86020\" \"#28A8B8\" \"#F89040\" \"#D0D0D0\" \"#903000\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 0"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 0.003162278"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample    cd45 pstat5   cd34 outcome class  multiclass event time_to_event #>    <chr>    <dbl>  <dbl>  <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 43     0.897   0.923  0.539    7.94  class1 class2         1          9.40 #>  2 80     0.240   0.518  0.0689   5.32  class1 class3         1         11.8  #>  3 68     0.966   0.0931 0.388    3.12  class2 class3         1          8.53 #>  4 77     0.221   0.409  0.167    3.81  class1 class3         1         10.4  #>  5 90     0.00685 0.147  0.125    0.216 class2 class3         1          7.29 #>  6 3      0.658   0.0921 0.456    2.91  class2 class1         0          7.66 #>  7 17     0.675   0.613  0.308    4.75  class1 class1         0          9.83 #>  8 38     0.676   0.711  0.588    6.80  class1 class2         1         10.2  #>  9 81     0.307   0.561  0.727    4.04  class1 class3         1          8.87 #> 10 42     0.290   0.641  0.732    4.59  class1 class2         1         11.0  #> # ℹ 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>                 cd45       pstat5         cd34 #>   [1,]  0.0877035262  0.829793783 -0.968683447 #>   [2,]  0.2918501460  0.319452371  0.800569439 #>   [3,] -1.2269611704 -0.928646978  0.807730170 #>   [4,]  0.3266083909 -0.607621377 -0.901594550 #>   [5,] -0.1231041972 -0.444289623 -0.494594781 #>   [6,]  1.5059998407 -0.900442264  1.020763855 #>   [7,]  0.1174391067 -0.906308128  1.288819999 #>   [8,]  0.6059688310 -0.054174815 -0.643953097 #>   [9,]  0.1536267282 -0.027273746 -1.449196567 #>  [10,] -1.6076978094 -0.480038641  0.152308688 #>  [11,] -0.6057635688  1.149837807  1.559579738 #>  [12,] -1.2133761908 -0.320409039 -1.520753810 #>  [13,] -1.1736510272 -1.321028232 -1.635396484 #>  [14,] -0.5110341672  0.440724908  0.364573728 #>  [15,] -1.4754129765 -0.198923773 -1.035149436 #>  [16,]  0.3246659766  1.272483299 -0.655049154 #>  [17,]  1.3003916085  1.545365366  0.593805445 #>  [18,] -0.1257498216 -1.131472650  0.922662129 #>  [19,] -1.5982641004  1.108000792 -1.316715983 #>  [20,]  0.1582729808 -1.492907432  0.370311344 #>  [21,]  1.1089634539  0.943408190 -0.648307102 #>  [22,] -1.2383270084  1.374553316  0.001903408 #>  [23,] -1.0415443938  1.092551902  0.511497514 #>  [24,] -0.5144447422  0.807921061 -1.762456106 #>  [25,]  0.6025849687  1.380902083  0.585598230 #>  [26,] -0.1234833745  0.389286831 -1.453363542 #>  [27,] -1.0696533575 -0.009721015 -0.233546515 #>  [28,] -0.8800708859  1.531075744  1.503963564 #>  [29,]  0.9416140877  0.384510889  1.663362701 #>  [30,] -0.7275012830  1.532845645 -0.037682001 #>  [31,]  1.3178970986 -1.548102531 -1.212087715 #>  [32,] -1.4915239562 -0.212303725 -0.195494079 #>  [33,] -0.1161436057  1.182686680  0.268296391 #>  [34,] -0.7647825642  1.286841294 -1.808555887 #>  [35,] -0.5200457880  0.831032273  0.645547868 #>  [36,] -0.9817538172  0.395569966  0.473801688 #>  [37,]  0.7972317256  0.544322467 -0.670152761 #>  [38,]  1.1053709483 -0.306839661  1.480771002 #>  [39,] -0.1886989489 -0.046366861  0.462121536 #>  [40,]  0.6288941216 -0.982222320 -1.424423188 #>  [41,] -1.6273743429 -0.635951656 -0.473005223 #>  [42,]  0.9809659311 -0.425944473  1.700537277 #>  [43,] -1.5523262820 -0.856909935 -0.839871795 #>  [44,] -0.6576770757 -0.977890262 -0.785642128 #>  [45,] -0.9958291894 -1.594200427  1.676041390 #>  [46,]  0.2828183780  1.539237636 -1.168691796 #>  [47,]  0.0008241368  0.107879703 -0.031884374 #>  [48,]  0.8467101981  1.564892225  1.204252566 #>  [49,] -0.8175202372  1.156048099 -1.322301425 #>  [50,] -1.4530059713  0.799186164 -0.938520711 #>  [51,]  1.7121255067  1.386763854 -1.094021634 #>  [52,] -0.7507502536  1.061895897  1.442621826 #>  [53,]  1.3378727571 -0.777024917 -0.612565242 #>  [54,]  1.5508399521  0.648075118 -0.394862653 #>  [55,]  1.6910142455  0.196987192 -1.814924127 #>  [56,]  0.8097644324 -1.837699125 -0.324791846 #>  [57,]  1.2046067475 -1.434562840  0.633540750 #>  [58,]  0.3373400699  1.538177325 -0.590777651 #>  [59,]  1.4076883817  0.357989206  0.216105111 #>  [60,]  0.7676643664  1.033249521  1.742619876 #>  [61,]  1.0588637833 -0.172356097 -0.360171281 #>  [62,]  1.4316085003 -0.768483954  0.748025427 #>  [63,]  1.1211474035 -0.794173026  0.734620103 #>  [64,]  1.4746509859 -1.767649605  1.312726068 #>  [65,]  0.8382666407  1.040543856  1.534130853 #>  [66,] -1.6959048626 -1.347244584  0.670641955 #>  [67,] -1.1139537995 -0.541029219  0.644128079 #>  [68,] -0.4834780130 -0.809639190  0.637378507 #>  [69,] -1.2833087135 -1.345892974  0.635578574 #>  [70,]  1.4278697403  0.157837180  0.334544325 #>  [71,]  0.8179944057 -0.861551862  0.429984418 #>  [72,] -0.3572864259 -1.737504943  0.309427107 #>  [73,]  0.1073285464  1.509181482  1.004547019 #>  [74,] -0.3276563590  0.351424101  0.573437637 #>  [75,] -0.2599908109  0.086931422 -0.821823365 #>  [76,]  0.1755280279  0.230063248  1.067548665 #>  [77,] -0.3734789132 -0.205327829 -0.098932151 #>  [78,]  0.7537409485 -0.735763209  1.084537004 #>  [79,]  0.3607494988 -1.597975379  1.427041573 #>  [80,] -0.4521013676  1.148874155  1.113521539 #>  [81,] -0.1396013375 -0.042671954 -1.104942414 #>  [82,]  0.7150689340 -0.774626941 -1.434992466 #>  [83,]  1.6054448746  1.423435202 -0.533968844 #>  [84,]  0.3902314924 -1.244460786 -0.380625796 #>  [85,] -0.2840894171  0.249574019  0.500213366 #>  [86,]  0.3580295343  1.090010312 -0.733583127 #>  [87,] -1.3019738319 -0.118892177 -0.982532835 #>  [88,] -1.4729152951 -0.939569685 -0.583579366 #>  [89,] -1.1682440613  0.318443541  0.347178575 #>  [90,]  0.1282435264 -1.514481669 -0.368335955 #>  [91,]  1.2907191832 -0.703374750 -0.171244219 #>  [92,]  0.5985112338 -1.734542668  1.295446904 #>  [93,]  1.4654890208  1.176278968  1.627644913 #>  [94,] -0.2046741225  0.174062751 -1.427151447 #>  [95,]  0.7689103424 -1.187481662 -1.645146346 #>  [96,] -1.2414118259 -0.881406684 -1.310608886 #>  [97,] -1.1787887576  1.267665202  0.125200033 #>  [98,]  1.5715367494 -0.523919150  0.748005728 #>  [99,] -1.7782543970  0.398499084 -0.672255047 #> [100,] -0.4746675978  0.452923311  0.089694752"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  2.18131337  2.71618791  3.41674410  2.19873696  4.60698357  3.45640330 #>   [7]  4.52318725  7.12326360  1.08002714  4.24891165  2.49004649  3.04399719 #>  [13]  2.57156276  3.38719275  2.30103202  4.55961844  0.93419244  4.11649387 #>  [19]  4.92509667  5.25459536  5.74593523  0.70379981  5.28839839  3.65071043 #>  [25]  2.63893940  4.17427446  4.02775621  5.50829798  2.01307916  5.23982856 #>  [31]  5.40369864  3.09613212  4.16664916  2.80717349  4.49222674  2.69676189 #>  [37]  4.22035488  4.78183453  4.12370897  4.50140322  5.45155291  3.65110189 #>  [43]  2.06150909  2.08495268  3.27449472  2.88067453  4.41080465  0.49146365 #>  [49]  4.30077930  3.67331846  2.76116875  2.50709995  2.92769019  4.32836041 #>  [55]  5.08454992  2.45103350  1.94416598  5.38053521  1.51757669  3.99013660 #>  [61]  5.04894469  1.20700151  0.06217509  5.05942445  2.35217156  3.43782027 #>  [67]  0.48607583  1.84190021  1.48363474  1.85867812  3.09439600  3.60260380 #>  [73]  3.86377993  3.30276080  4.49705065  0.73738319  4.53241270  4.40932752 #>  [79]  5.04466729  5.54501484  0.85021428  4.53628988  1.60027551  4.47834839 #>  [85]  4.67356897 -0.39676503  3.75801020  2.75284593  4.95718501  6.19950991 #>  [91]  5.28985884  2.10256261  0.90173267  4.31308665  2.30004056  3.91640613 #>  [97]  2.11186677  2.58497399  3.09276303  6.90309895"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # ℹ 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode high-dimensional cytometry measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_knn_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — tof_make_knn_graph","title":"Title — tof_make_knn_graph","text":"Title","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_knn_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — tof_make_knn_graph","text":"","code":"tof_make_knn_graph(   tof_tibble,   knn_cols,   num_neighbors,   distance_function = c(\"euclidean\", \"cosine\"),   graph_type = c(\"weighted\", \"unweighted\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_knn_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — tof_make_knn_graph","text":"tof_tibble tibble tof_tbl. knn_cols Unquoted column names indicating columns tof_tibble used KNN calculation. num_neighbors integer number neighbors find cell ( including ). distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. graph_type string indicating graph's edges weights (\"weighted\"; default) (\"unweighted\"). ... Optional additional arguments pass tof_find_knn","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_knn_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — tof_make_knn_graph","text":"tbl_graph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_knn_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — tof_make_knn_graph","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"     ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>      cd45    cd38   cd34    cd19 cluster_id .flowsom_metacluster #>     <dbl>   <dbl>  <dbl>   <dbl> <chr>      <chr>                #>  1 -0.350 -1.50    2.82  -0.573  g          2                    #>  2  1.64  -0.422   0.543  2.31   i          3                    #>  3  1.06  -0.0543  0.877 -0.444  l          3                    #>  4  0.644 -1.12   -1.12  -0.604  k          4                    #>  5  1.34   0.606  -0.631  0.0561 p          2                    #>  6 -1.20   0.484  -0.166  0.0976 l          3                    #>  7  0.781 -0.699   0.619 -0.693  x          2                    #>  8 -0.230 -0.0746  0.793 -0.805  f          4                    #>  9 -0.504  1.05   -1.39   1.01   h          2                    #> 10  0.511  0.492  -2.11   0.543  x          2                    #> # ℹ 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>      cd45    cd38   cd34    cd19 cluster_id .phenograph_metacluster #>     <dbl>   <dbl>  <dbl>   <dbl> <chr>      <chr>                   #>  1 -0.350 -1.50    2.82  -0.573  g          2                       #>  2  1.64  -0.422   0.543  2.31   i          1                       #>  3  1.06  -0.0543  0.877 -0.444  l          1                       #>  4  0.644 -1.12   -1.12  -0.604  k          3                       #>  5  1.34   0.606  -0.631  0.0561 p          2                       #>  6 -1.20   0.484  -0.166  0.0976 l          1                       #>  7  0.781 -0.699   0.619 -0.693  x          4                       #>  8 -0.230 -0.0746  0.793 -0.805  f          3                       #>  9 -0.504  1.05   -1.39   1.01   h          2                       #> 10  0.511  0.492  -2.11   0.543  x          4                       #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 5                      #>  2 5                      #>  3 1                      #>  4 7                      #>  5 4                      #>  6 7                      #>  7 5                      #>  8 4                      #>  9 2                      #> 10 5                      #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 3                    #>  2 6                    #>  3 2                    #>  4 3                    #>  5 3                    #>  6 4                    #>  7 1                    #>  8 1                    #>  9 3                    #> 10 3                    #> # ℹ 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 1                    #>  2 1                    #>  3 3                    #>  4 3                    #>  5 1                    #>  6 2                    #>  7 2                    #>  8 2                    #>  9 1                    #> 10 1                    #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 9                         #>  2 6                         #>  3 1                         #>  4 3                         #>  5 1                         #>  6 7                         #>  7 6                         #>  8 8                         #>  9 2                         #> 10 5                         #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 6                   #>  2 2                   #>  3 7                   #>  4 6                   #>  5 8                   #>  6 10                  #>  7 1                   #>  8 10                  #>  9 2                   #> 10 7                   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 3                       #>  2 2                       #>  3 3                       #>  4 1                       #>  5 1                       #>  6 3                       #>  7 1                       #>  8 2                       #>  9 1                       #> 10 2                       #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   compute_embedding_cols = where(tof_is_numeric),   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   embedding_args = list(),   theme = ggplot2::theme_bw(),   ...,   method = c(\"ggplot2\", \"scattermore\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `embedding_args`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. compute_embedding_cols Unquoted column names indicating columns 'tof_tibble' use computing embeddings method specified `embedding_method`. Defaults numeric columns 'tof_tibble'. Supports tidyselect helpers. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (passed tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". embedding_args Optional additional arguments pass tof_reduce_dimensions. example, `method = \"tsne\"`, might include `num_comp`, `perplexity`, `theta`. theme ggplot2 theme apply scatterplot. Defaults theme_bw. ... Optional additional arguments pass tof_plot_cells_scatter. method string indicating plotting engine used. Valid values include \"ggplot2\" (default) \"scattermore\" (recommended 100K cells plotted). Note method = \"scattermore\" requires scattermore package installed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         compute_embedding_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cluster_id,         embedding_method = \"tsne\",         compute_embedding_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... hnsw_knn","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"function makes scatterplots single-cell data using user-specified x- y-axes. Additionally, point scatterplot can colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"","code":"tof_plot_cells_scatter(   tof_tibble,   x_col,   y_col,   color_col,   facet_cols,   theme = ggplot2::theme_bw(),   ...,   method = c(\"ggplot2\", \"scattermore\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"tof_tibble `tof_tbl` `tibble`. x_col unquoted column name specifying column `tof_tibble` used x-axis. y_col unquoted column name specifying column `tof_tibble` used y-axis. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. theme ggplot2 theme apply scatterplot. Defaults theme_bw. ... Optional additional arguments pass geom_point method = \"ggplot2\" geom_scattermore method = \"scattermore\". method string indicating plotting engine used. Valid values include \"ggplot2\" (default) \"scattermore\" (recommended 100K cells plotted). Note method = \"scattermore\" requires scattermore package installed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"","code":"tof_plot_clusters_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   cluster_markers = TRUE,   cluster_clusters = TRUE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. cluster_markers boolean value indicating heatmap order columns (.e. markers) using hierarchical clustering. Defaults TRUE. cluster_clusters boolean value indicating heatmap order rows (.e. clusters) using hierarchical clustering. Defaults TRUE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_clusters_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"","code":"tof_plot_clusters_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments hnsw_knn","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_clusters_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )  # use the same layout as the plot above to color the same # tree using a different marker layout_cd45 <-     tof_plot_clusters_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"","code":"tof_plot_clusters_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )  attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"  # create the volcano plot volcano <- tof_plot_clusters_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in high-dimensional cytometry data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in high-dimensional cytometry data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in high-dimensional cytometry data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   cluster_markers = TRUE,   cluster_groups = TRUE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in high-dimensional cytometry data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. cluster_markers boolean value indicating heatmap order columns (.e. markers) using hierarchical clustering. Defaults TRUE. cluster_groups boolean value indicating heatmap order rows (.e. groups) using hierarchical clustering. Defaults TRUE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in high-dimensional cytometry data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )     )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(         tof_tibble = sim_data,         cluster_col = cluster_id,         group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)     )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1  4.28 #>  2  4.22 #>  3  1.48 #>  4  3.39 #>  5  5.08 #>  6  5.18 #>  7  3.63 #>  8  3.99 #>  9  3.87 #> 10  4.39 #> 11  4.42 #> 12  2.71 #> 13  2.90 #> 14  2.95 #> 15  2.56 #> 16  1.42 #> 17  3.34 #> 18  4.18 #> 19  4.30 #> 20  3.06"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts, reads, fluorescence intensity units directly measured cytometer using user-provided function. can used perform standard pre-processing steps (.e. arcsinh transformation) cytometry data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurements aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read high-dimensional cytometry data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used high-dimensional cytometry data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents high-dimensional cytometry antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing high-dimensional cytometry data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used high-dimensional cytometry data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents high-dimensional cytometry measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads high-dimensional cytometry data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information high-dimensional cytometry panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents high-dimensional cytometry antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read high-dimensional cytometry data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used high-dimensional cytometry data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents high-dimensional cytometry antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction single-cell data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>       cd45    cd38   cd34   cd19   .pc1   .pc2    .pc3     .pc4 #>      <dbl>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl>    <dbl> #>  1 -0.191  -0.963   1.35   1.42  -0.605 -0.406 -2.06   -0.424   #>  2  0.438   1.33    0.302  0.816  1.13  -1.05  -0.0668 -0.686   #>  3  0.500  -0.873  -0.397  1.68   0.602 -0.295 -1.78    0.941   #>  4  0.0635  0.342   1.30   0.295 -0.356 -0.856 -0.406  -0.870   #>  5  0.0171  0.0653 -0.481 -0.798 -0.165  0.141  0.771   0.478   #>  6 -0.433   0.416   1.42  -1.05  -1.16  -0.369  0.703  -1.10    #>  7  0.161   1.02   -1.23  -1.49   0.478  0.155  2.03    0.551   #>  8 -2.32   -0.144  -0.121 -1.34  -0.974  2.17   0.877  -0.851   #>  9 -1.45   -0.621  -0.255 -1.40  -1.17   1.59   0.770  -0.00738 #> 10  0.484  -1.11   -2.13   0.483  0.740  0.653 -0.512   2.27    #> # ℹ 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>       cd45    cd38   cd34   cd19 .tsne1 .tsne2 #>      <dbl>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #>  1 -0.191  -0.963   1.35   1.42  -0.938 -3.24  #>  2  0.438   1.33    0.302  0.816  1.99   0.843 #>  3  0.500  -0.873  -0.397  1.68   1.05  -2.99  #>  4  0.0635  0.342   1.30   0.295  0.608  1.10  #>  5  0.0171  0.0653 -0.481 -0.798 -0.599  0.616 #>  6 -0.433   0.416   1.42  -1.05  -4.55   2.18  #>  7  0.161   1.02   -1.23  -1.49   5.14   1.04  #>  8 -2.32   -0.144  -0.121 -1.34  -5.13  -1.14  #>  9 -1.45   -0.621  -0.255 -1.40  -4.38  -1.02  #> 10  0.484  -1.11   -2.13   0.483  2.86  -3.96  #> # ℹ 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>       cd45    cd38   cd34   cd19 .umap1 .umap2 #>      <dbl>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #>  1 -0.191  -0.963   1.35   1.42   0.677  0.278 #>  2  0.438   1.33    0.302  0.816  1.27   4.12  #>  3  0.500  -0.873  -0.397  1.68   1.13   2.12  #>  4  0.0635  0.342   1.30   0.295 -0.367  0.436 #>  5  0.0171  0.0653 -0.481 -0.798 -1.13  -1.05  #>  6 -0.433   0.416   1.42  -1.05   2.76  -3.41  #>  7  0.161   1.02   -1.23  -1.49  -3.88  -4.09  #>  8 -2.32   -0.144  -0.121 -1.34  -1.74  -2.65  #>  9 -1.45   -0.621  -0.255 -1.40  -1.12  -2.23  #> 10  0.484  -1.11   -2.13   0.483 -2.45  -0.498 #> # ℹ 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on single-cell data — tof_reduce_pca","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>       .pc1    .pc2 #>      <dbl>   <dbl> #>  1 -1.18    2.40   #>  2  0.432   0.529  #>  3  0.0764  0.761  #>  4  3.09    0.0319 #>  5 -0.351  -1.84   #>  6  0.619  -0.0466 #>  7  0.561   0.211  #>  8  1.15    2.01   #>  9  0.807   0.217  #> 10 -0.647  -0.278  #> # ℹ 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>         PC1    PC2    PC3     PC4 #>       <dbl>  <dbl>  <dbl>   <dbl> #>  1 -0.260   -1.04  -0.118 -0.598  #>  2  0.00176 -0.537 -0.146  0.125  #>  3 -0.119   -0.173 -0.500  1.84   #>  4 -0.717    1.42   1.63  -1.67   #>  5 -0.793   -1.08   0.397 -0.773  #>  6  0.980    0.560 -0.946 -1.37   #>  7  1.02    -0.372  0.720 -2.35   #>  8 -0.740   -0.226  1.21   0.0807 #>  9 -1.32     1.68   0.376 -0.573  #> 10 -0.0621  -0.574  0.941  0.179  #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne1 .tsne2 #>     <dbl>  <dbl> #>  1 -5.23   0.651 #>  2  0.253 -4.95  #>  3 -3.33   5.10  #>  4 -6.28  -2.15  #>  5  4.39   0.355 #>  6 -2.62   0.632 #>  7 -3.55  -9.00  #>  8  0.862 -2.13  #>  9 -2.39  -0.260 #> 10 -5.35  -5.82  #> # ℹ 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne1 .tsne2 #>     <dbl>  <dbl> #>  1 -6.55  -3.80  #>  2 -5.35   1.96  #>  3  0.900  0.330 #>  4 -3.09  -5.67  #>  5  2.06  -1.33  #>  6 -0.282 -6.70  #>  7 -5.48   4.56  #>  8 -1.71  -1.26  #>  9 -0.977 -6.83  #> 10 -4.52  -1.36  #> # ℹ 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .umap1  .umap2 #>     <dbl>   <dbl> #>  1 -2.73   1.31   #>  2 -2.70  -2.01   #>  3 -1.12   3.50   #>  4 -3.21   1.63   #>  5  0.790  2.91   #>  6 -0.980 -1.42   #>  7  3.51  -1.76   #>  8 -1.99  -2.63   #>  9 -2.13   1.15   #> 10 -1.66  -0.0996 #> # ℹ 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>       .tsne1 .tsne2 #>        <dbl>  <dbl> #>  1 -2.97     -2.92  #>  2 -4.27     -0.599 #>  3  0.462     2.34  #>  4 -4.94      6.91  #>  5  4.25      6.49  #>  6 -0.000823  1.16  #>  7  2.04     -4.65  #>  8 -5.32     -2.66  #>  9 -4.75      2.24  #> 10 -3.48      1.06  #> # ℹ 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>     UMAP1    UMAP2 #>     <dbl>    <dbl> #>  1 -2.40   1.40    #>  2  2.68   0.413   #>  3 -1.44   4.48    #>  4 -0.927 -2.78    #>  5  0.491  2.00    #>  6  3.03  -1.40    #>  7  2.03  -3.10    #>  8  0.204 -0.00277 #>  9 -0.922  1.25    #> 10 -0.865 -0.178   #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing high-dimensional cytometry data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              1 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # ℹ 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1          0.286 #>  2          0.286 #>  3          0.143 #>  4          0.286 #>  5          0.143 #>  6          0.286 #>  7          0.857 #>  8          0.429 #>  9          0.571 #> 10          0.429 #> # ℹ 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            1   #>  2            1   #>  3            1   #>  4            0.5 #>  5            1   #>  6            1   #>  7            0.2 #>  8            1   #>  9            0.2 #> 10            1   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split high-dimensional cytometry data into a training and test set — tof_split_data","title":"Split high-dimensional cytometry data into a training and test set — tof_split_data","text":"Split high-dimensional cytometry data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split high-dimensional cytometry data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split high-dimensional cytometry data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split high-dimensional cytometry data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split high-dimensional cytometry data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/36]> Bootstrap01 #>  2 <split [100/39]> Bootstrap02 #>  3 <split [100/34]> Bootstrap03 #>  4 <split [100/39]> Bootstrap04 #>  5 <split [100/31]> Bootstrap05 #>  6 <split [100/35]> Bootstrap06 #>  7 <split [100/32]> Bootstrap07 #>  8 <split [100/39]> Bootstrap08 #>  9 <split [100/36]> Bootstrap09 #> 10 <split [100/38]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Training/Testing/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_tidytof_reduced_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","title":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","text":"Split dimensionality reduction data tidytof combines SingleCellExperiment conversion","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_tidytof_reduced_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","text":"","code":"tof_split_tidytof_reduced_dimensions(sce)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_tidytof_reduced_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","text":"sce SingleCellExperiment entry named \"tidytof_reduced_dimensions\" reducedDims slot.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_tidytof_reduced_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","text":"SingleCellExperiment separate entries named \"tidytof_pca\", \"tidytof_umap\", \"tidytof_tsne\" reducedDims slots (one dimensionality reduction methods tidytof native support).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_tidytof_reduced_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 3 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)       3.36  #> 2 pstat5            1.15  #> 3 cd45              0.597  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 pstat5          -2.73   #> 2 cd45            -1.37   #> 3 cd34             0.309  #> 4 (Intercept)     -0.0126  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 0 × 2 #> # ℹ 2 variables: feature <chr>, coefficient <dbl>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform raw high-dimensional cytometry data. — tof_transform","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"function transforms `tof_tbl` raw ion counts, reads, fluorescence intensity units directly measured cytometer using user-provided function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"","code":"tof_transform(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   transform_fun )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. transform_fun vectorized function apply protein value variance stabilization.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>       cd45    cd38   cd34   cd19 .upsample_cluster #>      <dbl>   <dbl>  <dbl>  <dbl> <chr>             #>  1  1.19    1.33    0.908  1.77  a                 #>  2 -1.79    0.0663 -0.388 -1.38  b                 #>  3 -0.273   1.71   -0.706  0.366 a                 #>  4 -1.02   -0.0678 -0.265  1.37  a                 #>  5 -1.51    0.0333 -0.198 -0.204 b                 #>  6 -0.273   0.217   2.07   1.03  b                 #>  7  0.822   0.953   0.167 -1.07  a                 #>  8  0.783  -0.465   0.657  0.575 a                 #>  9  0.0513 -0.380  -0.509  1.08  a                 #> 10  0.856   0.153   0.388 -1.76  a                 #> # ℹ 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>       cd45    cd38   cd34   cd19 .upsample_cluster #>      <dbl>   <dbl>  <dbl>  <dbl> <chr>             #>  1  1.19    1.33    0.908  1.77  a                 #>  2 -1.79    0.0663 -0.388 -1.38  b                 #>  3 -0.273   1.71   -0.706  0.366 b                 #>  4 -1.02   -0.0678 -0.265  1.37  b                 #>  5 -1.51    0.0333 -0.198 -0.204 b                 #>  6 -0.273   0.217   2.07   1.03  b                 #>  7  0.822   0.953   0.167 -1.07  b                 #>  8  0.783  -0.465   0.657  0.575 a                 #>  9  0.0513 -0.380  -0.509  1.08  b                 #> 10  0.856   0.153   0.388 -1.76  a                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 a                 #>  4 a                 #>  5 b                 #>  6 a                 #>  7 a                 #>  8 a                 #>  9 b                 #> 10 b                 #> # ℹ 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 a                 #>  4 a                 #>  5 b                 #>  6 a                 #>  7 a                 #>  8 a                 #>  9 b                 #> 10 b                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   num_neighbors = 1L,   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating many neighbors used nearest neighbor calculation. Clusters assigned based majority vote. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 a                 #>  4 b                 #>  5 a                 #>  6 b                 #>  7 b                 #>  8 b                 #>  9 b                 #> 10 a                 #> # ℹ 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 a                 #>  4 b                 #>  5 b                 #>  6 b                 #>  7 b                 #>  8 b                 #>  9 b                 #> 10 a                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select variables with a function — where","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0998","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.8","title":"tidytof 0.99.8","text":"NEW FEATURES Vignette bug fixes. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0997","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.7","title":"tidytof 0.99.7","text":"NEW FEATURES Expand introductory vignette include details explore tidytof package beginner. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0996","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.6","title":"tidytof 0.99.6","text":"NEW FEATURES Update tests. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0995","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.5","title":"tidytof 0.99.5","text":"NEW FEATURES Update dependencies. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0994","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.4","title":"tidytof 0.99.4","text":"NEW FEATURES Update tests. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0993","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.3","title":"tidytof 0.99.3","text":"NEW FEATURES Update docs. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0992","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.2","title":"tidytof 0.99.2","text":"NEW FEATURES Update docs. SIGNIFICANT USER-VISIBLE CHANGES None BUG FIXES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0992-1","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.2","title":"tidytof 0.99.2","text":"NEW FEATURES Removed unnecessary files caused build fail. SIGNIFICANT USER-VISIBLE CHANGES None BUG FIXES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0990","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.0","title":"tidytof 0.99.0","text":"NEW FEATURES Added NEWS.md file track changes package. SIGNIFICANT USER-VISIBLE CHANGES Submitted Bioconductor BUG FIXES None","code":""}]
